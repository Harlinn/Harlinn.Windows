using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Runtime.CompilerServices;

using Microsoft.Extensions.Logging;

using Harlinn.Common.Core.Net;
using Harlinn.Common.Core.Net.Collections.Generic;
using Harlinn.Common.Core.Net.Entities;

using Barrelman.Data.Types;

namespace Barrelman.Data.Entities.Changes
{
    public class AircraftTypeByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, AircraftTypeEntity> _entries = new SortedWeakReferenceList<string, AircraftTypeEntity>( );

        public AircraftTypeByNameEntityIndex( )
        {
        }

        public void Add( AircraftTypeEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<AircraftTypeEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out AircraftTypeEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<AircraftTypeEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<AircraftTypeEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<AircraftTypeEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<AircraftTypeEntity> result )
        {
            return _entries.All( result );
        }

        public AircraftTypeEntity? GetAircraftTypeByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class AisDeviceCommandByAisDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public AisDeviceCommandByAisDeviceAndTimestampEntityIndex( )
        {
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AisDeviceCommandByTimestampEntityIndex( )
        {
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisDeviceCommandByReplyEntityIndex( )
        {
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceCommandByReplyIsNullEntityIndex
    {
    }

    public class AisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public AisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex( )
        {
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AisDeviceCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, AisDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceCommandReplyEntity>( );

        public AisDeviceCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( AisDeviceCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<AisDeviceCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out AisDeviceCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<AisDeviceCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<AisDeviceCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public AisDeviceCommandReplyEntity? GetAisDeviceCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class AisDeviceCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class AisDeviceConfigurationByAisDeviceAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, AisDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, AisDeviceConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( AisDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<AisDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out AisDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisDeviceConfigurationEntity? GetAisDeviceConfigurationByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public AisDeviceConfigurationEntity? GetAisDeviceConfigurationByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class AisDeviceConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AisDeviceConfigurationByTimestampEntityIndex( )
        {
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceRawMessageByAisDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceRawMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceRawMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceRawMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceRawMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceRawMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public AisDeviceRawMessageByAisDeviceAndTimestampEntityIndex( )
        {
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceRawMessageByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceRawMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceRawMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceRawMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceRawMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceRawMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceRawMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AisDeviceRawMessageByTimestampEntityIndex( )
        {
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceRawSentenceEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceRawSentenceEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceRawSentenceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceRawSentenceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceRawSentenceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public AisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex( )
        {
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisDeviceRawSentenceByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisDeviceRawSentenceEntity> _entries = new SortedWeakReferenceList<Guid, AisDeviceRawSentenceEntity>( );
            public ById( )
            {
            }

            public void Add( AisDeviceRawSentenceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisDeviceRawSentenceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisDeviceRawSentenceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisDeviceRawSentenceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AisDeviceRawSentenceByTimestampEntityIndex( )
        {
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisMessageByAisDeviceAndReceivedTimestampEntityIndex
    {

        public class ByReceivedTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, AisMessageEntity> _entries = new SortedWeakReferenceList<DateTime, AisMessageEntity>( );

            public ByReceivedTimestamp( )
            {
            }

            public void Add( AisMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.ReceivedTimestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.ReceivedTimestamp, new WeakReference<AisMessageEntity>( entity, false ) );
                }
            }

            public bool GetByReceivedTimestamp( DateTime receivedTimestamp, out AisMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( receivedTimestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( receivedTimestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByReceivedTimestamp> _entries = new SortedListEx<Guid, ByReceivedTimestamp>( );
        public List<AisMessageEntity> GetAisMessageCollectionByAisDevice( Guid aisDevice )
        {
            throw new NotImplementedException();
        }

        public AisMessageEntity? GetAisMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public AisMessageEntity? GetAisMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class AisMessageByReceivedTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AisMessageByReceivedTimestampEntityIndex( )
        {
        }

        public List<AisMessageEntity> GetAisMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class AisMessageByMmsiAndMessageSequenceNumberEntityIndex
    {
        public class ByMessageSequenceNumber
        {
            readonly SortedListEx<long, ById> _entries = new SortedListEx<long, ById>( );
            List<long> _emptyKeys = new List<long>( );

            public ByMessageSequenceNumber( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<AisMessageEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByMessageSequenceNumber> _entries = new SortedListEx<Guid, ByMessageSequenceNumber>( );

        public AisMessageByMmsiAndMessageSequenceNumberEntityIndex( )
        {
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsi( Guid? mmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiIsNull(  )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiIsNullAndMessageSequenceNumber( long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            throw new NotImplementedException();
        }

    }

    public class AisMessageByMmsiIsNullAndMessageSequenceNumberEntityIndex
    {
    }

    public class AisAddressedSafetyRelatedMessageByDestinationMmsiEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisAddressedSafetyRelatedMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisAddressedSafetyRelatedMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisAddressedSafetyRelatedMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisAddressedSafetyRelatedMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisAddressedSafetyRelatedMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisAddressedSafetyRelatedMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisAddressedSafetyRelatedMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisAddressedSafetyRelatedMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisAddressedSafetyRelatedMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisAddressedSafetyRelatedMessageByDestinationMmsiEntityIndex( )
        {
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByDestinationMmsi( Guid? destinationMmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByDestinationMmsiIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisAddressedSafetyRelatedMessageByDestinationMmsiIsNullEntityIndex
    {
    }

    public class AisBinaryAddressedMessageByDestinationMmsiEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisBinaryAddressedMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisBinaryAddressedMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisBinaryAddressedMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisBinaryAddressedMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisBinaryAddressedMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisBinaryAddressedMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisBinaryAddressedMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisBinaryAddressedMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisBinaryAddressedMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisBinaryAddressedMessageByDestinationMmsiEntityIndex( )
        {
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByDestinationMmsi( Guid? destinationMmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByDestinationMmsiIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisBinaryAddressedMessageByDestinationMmsiIsNullEntityIndex
    {
    }

    public class AisExtendedClassBCsPositionReportMessageByNameEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisExtendedClassBCsPositionReportMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisExtendedClassBCsPositionReportMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisExtendedClassBCsPositionReportMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisExtendedClassBCsPositionReportMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisExtendedClassBCsPositionReportMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisExtendedClassBCsPositionReportMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisExtendedClassBCsPositionReportMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisExtendedClassBCsPositionReportMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisExtendedClassBCsPositionReportMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisExtendedClassBCsPositionReportMessageByNameEntityIndex( )
        {
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByName( Guid? name )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByNameIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisExtendedClassBCsPositionReportMessageByNameIsNullEntityIndex
    {
    }

    public class AisStaticAndVoyageRelatedDataMessageByImoNumberEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisStaticAndVoyageRelatedDataMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisStaticAndVoyageRelatedDataMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisStaticAndVoyageRelatedDataMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisStaticAndVoyageRelatedDataMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisStaticAndVoyageRelatedDataMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisStaticAndVoyageRelatedDataMessageByImoNumberEntityIndex( )
        {
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByImoNumber( Guid? imoNumber )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByImoNumberIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisStaticAndVoyageRelatedDataMessageByImoNumberIsNullEntityIndex
    {
    }

    public class AisStaticAndVoyageRelatedDataMessageByCallsignEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisStaticAndVoyageRelatedDataMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisStaticAndVoyageRelatedDataMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisStaticAndVoyageRelatedDataMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisStaticAndVoyageRelatedDataMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisStaticAndVoyageRelatedDataMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisStaticAndVoyageRelatedDataMessageByCallsignEntityIndex( )
        {
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByCallsign( Guid? callsign )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByCallsignIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisStaticAndVoyageRelatedDataMessageByCallsignIsNullEntityIndex
    {
    }

    public class AisStaticAndVoyageRelatedDataMessageByShipNameEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisStaticAndVoyageRelatedDataMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisStaticAndVoyageRelatedDataMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisStaticAndVoyageRelatedDataMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisStaticAndVoyageRelatedDataMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisStaticAndVoyageRelatedDataMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisStaticAndVoyageRelatedDataMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisStaticAndVoyageRelatedDataMessageByShipNameEntityIndex( )
        {
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByShipName( Guid? shipName )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByShipNameIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisStaticAndVoyageRelatedDataMessageByShipNameIsNullEntityIndex
    {
    }

    public class AisStaticDataReportPartAMessageByShipNameEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisStaticDataReportPartAMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisStaticDataReportPartAMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisStaticDataReportPartAMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisStaticDataReportPartAMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisStaticDataReportPartAMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisStaticDataReportPartAMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisStaticDataReportPartAMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisStaticDataReportPartAMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisStaticDataReportPartAMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisStaticDataReportPartAMessageByShipNameEntityIndex( )
        {
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByShipName( Guid? shipName )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByShipNameIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisStaticDataReportPartAMessageByShipNameIsNullEntityIndex
    {
    }

    public class AisStaticDataReportPartBMessageByCallsignEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisStaticDataReportPartBMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisStaticDataReportPartBMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisStaticDataReportPartBMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisStaticDataReportPartBMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisStaticDataReportPartBMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisStaticDataReportPartBMessageByCallsignEntityIndex( )
        {
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByCallsign( Guid? callsign )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByCallsignIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisStaticDataReportPartBMessageByCallsignIsNullEntityIndex
    {
    }

    public class AisStaticDataReportPartBMessageByMothershipMmsiEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisStaticDataReportPartBMessageEntity> _entries = new SortedWeakReferenceList<Guid, AisStaticDataReportPartBMessageEntity>( );
            public ById( )
            {
            }

            public void Add( AisStaticDataReportPartBMessageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisStaticDataReportPartBMessageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisStaticDataReportPartBMessageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisStaticDataReportPartBMessageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisStaticDataReportPartBMessageByMothershipMmsiEntityIndex( )
        {
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByMothershipMmsi( Guid? mothershipMmsi )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByMothershipMmsiIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisStaticDataReportPartBMessageByMothershipMmsiIsNullEntityIndex
    {
    }

    public class AlarmStateChangeByAlarmAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, AlarmStateChangeEntity> _entries = new SortedWeakReferenceList<DateTime, AlarmStateChangeEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( AlarmStateChangeEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<AlarmStateChangeEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out AlarmStateChangeEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionByAlarm( Guid alarm )
        {
            throw new NotImplementedException();
        }

        public AlarmStateChangeEntity? GetAlarmStateChangeByAlarmAndTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public AlarmStateChangeEntity? GetAlarmStateChangeByAlarmAtTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeByAlarmFromTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeByAlarmUntilTimestamp( Guid alarm, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeByAlarmOverTimestamp( Guid alarm, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class AlarmStateChangeByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AlarmStateChangeEntity> _entries = new SortedWeakReferenceList<Guid, AlarmStateChangeEntity>( );
            public ById( )
            {
            }

            public void Add( AlarmStateChangeEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AlarmStateChangeEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AlarmStateChangeEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AlarmStateChangeEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public AlarmStateChangeByTimestampEntityIndex( )
        {
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class BaseStationTypeByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, BaseStationTypeEntity> _entries = new SortedWeakReferenceList<string, BaseStationTypeEntity>( );

        public BaseStationTypeByNameEntityIndex( )
        {
        }

        public void Add( BaseStationTypeEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<BaseStationTypeEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out BaseStationTypeEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<BaseStationTypeEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<BaseStationTypeEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<BaseStationTypeEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<BaseStationTypeEntity> result )
        {
            return _entries.All( result );
        }

        public BaseStationTypeEntity? GetBaseStationTypeByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class BinaryTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, BinaryTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, BinaryTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( BinaryTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<BinaryTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out BinaryTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public BinaryTimeseriesValueEntity? GetBinaryTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public BinaryTimeseriesValueEntity? GetBinaryTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class BinaryTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, BinaryTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, BinaryTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( BinaryTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<BinaryTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out BinaryTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<BinaryTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public BinaryTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class BookmarkByViewEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, BookmarkEntity> _entries = new SortedWeakReferenceList<Guid, BookmarkEntity>( );
            public ById( )
            {
            }

            public void Add( BookmarkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<BookmarkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out BookmarkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<BookmarkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<BookmarkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<BookmarkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<BookmarkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public BookmarkByViewEntityIndex( )
        {
        }

        public List<BookmarkEntity> GetBookmarkCollectionByView( Guid view )
        {
            throw new NotImplementedException();
        }

    }

    public class BooleanTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, BooleanTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, BooleanTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( BooleanTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<BooleanTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out BooleanTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public BooleanTimeseriesValueEntity? GetBooleanTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public BooleanTimeseriesValueEntity? GetBooleanTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class BooleanTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, BooleanTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, BooleanTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( BooleanTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<BooleanTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out BooleanTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<BooleanTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public BooleanTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class ByteTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ByteTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, ByteTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ByteTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ByteTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ByteTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public ByteTimeseriesValueEntity? GetByteTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ByteTimeseriesValueEntity? GetByteTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ByteTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ByteTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, ByteTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( ByteTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ByteTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ByteTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ByteTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ByteTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraCommandByCameraAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraCommandEntity> _entries = new SortedWeakReferenceList<Guid, CameraCommandEntity>( );
            public ById( )
            {
            }

            public void Add( CameraCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public CameraCommandByCameraAndTimestampEntityIndex( )
        {
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraCommandEntity> _entries = new SortedWeakReferenceList<Guid, CameraCommandEntity>( );
            public ById( )
            {
            }

            public void Add( CameraCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraCommandByTimestampEntityIndex( )
        {
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraCommandEntity> _entries = new SortedWeakReferenceList<Guid, CameraCommandEntity>( );
            public ById( )
            {
            }

            public void Add( CameraCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public CameraCommandByReplyEntityIndex( )
        {
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraCommandByReplyIsNullEntityIndex
    {
    }

    public class CameraCommandReplyByCameraAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, CameraCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( CameraCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public CameraCommandReplyByCameraAndTimestampEntityIndex( )
        {
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, CameraCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( CameraCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, CameraCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, CameraCommandReplyEntity>( );

        public CameraCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( CameraCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<CameraCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out CameraCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<CameraCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<CameraCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<CameraCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<CameraCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public CameraCommandReplyEntity? GetCameraCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class CameraConfigurationByCameraAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, CameraConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, CameraConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( CameraConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<CameraConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out CameraConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraConfigurationEntity? GetCameraConfigurationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraConfigurationEntity? GetCameraConfigurationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, CameraConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( CameraConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraConfigurationByTimestampEntityIndex( )
        {
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraPanCalibrationByCameraAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, CameraPanCalibrationEntity> _entries = new SortedWeakReferenceList<DateTime, CameraPanCalibrationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( CameraPanCalibrationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<CameraPanCalibrationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out CameraPanCalibrationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraPanCalibrationEntity? GetCameraPanCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraPanCalibrationEntity? GetCameraPanCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraPanCalibrationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraPanCalibrationEntity> _entries = new SortedWeakReferenceList<Guid, CameraPanCalibrationEntity>( );
            public ById( )
            {
            }

            public void Add( CameraPanCalibrationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraPanCalibrationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraPanCalibrationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraPanCalibrationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraPanCalibrationByTimestampEntityIndex( )
        {
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex
    {

        public class ByPanAngle
        {
            readonly SortedWeakReferenceList<double, CameraPanCalibrationValueEntity> _entries = new SortedWeakReferenceList<double, CameraPanCalibrationValueEntity>( );

            public ByPanAngle( )
            {
            }

            public void Add( CameraPanCalibrationValueEntity entity )
            {
                if( _entries.TryGetValue(entity.PanAngle, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.PanAngle, new WeakReference<CameraPanCalibrationValueEntity>( entity, false ) );
                }
            }

            public bool GetByPanAngle( double panAngle, out CameraPanCalibrationValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( panAngle, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( panAngle );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(double key, [DisallowNull] IList<CameraPanCalibrationValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(double key, [DisallowNull] IList<CameraPanCalibrationValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(double firstKey, double lastKey, [DisallowNull] IList<CameraPanCalibrationValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraPanCalibrationValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByPanAngle> _entries = new SortedListEx<Guid, ByPanAngle>( );
        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueCollectionByPanCalibration( Guid panCalibration )
        {
            throw new NotImplementedException();
        }

        public CameraPanCalibrationValueEntity? GetCameraPanCalibrationValueByPanCalibrationAndPanAngle( Guid panCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueByPanCalibrationFromPanAngle( Guid panCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueByPanCalibrationUntilPanAngle( Guid panCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueByPanCalibrationOverPanAngle( Guid panCalibration, double fromPanAngle, double untilPanAngle )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraStatusByCameraAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, CameraStatusEntity> _entries = new SortedWeakReferenceList<DateTime, CameraStatusEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( CameraStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<CameraStatusEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out CameraStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<CameraStatusEntity> GetCameraStatusCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraStatusEntity? GetCameraStatusByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraStatusEntity? GetCameraStatusByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraStatusByTrackAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, CameraStatusEntity> _entries = new SortedWeakReferenceList<DateTime, CameraStatusEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( CameraStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<CameraStatusEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out CameraStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<CameraStatusEntity> GetCameraStatusCollectionByTrack( Guid? track )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionByTrackIsNull(  )
        {
            throw new NotImplementedException();
        }

        public CameraStatusEntity? GetCameraStatusByTrackAndTimestamp( Guid? track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionByTrackIsNullAndTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraStatusEntity? GetCameraStatusByTrackAtTimestamp( Guid? track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusByTrackFromTimestamp( Guid? track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusByTrackUntilTimestamp( Guid? track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraStatusByTrackIsNullAndTimestampEntityIndex
    {
    }

    public class CameraStatusByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraStatusEntity> _entries = new SortedWeakReferenceList<Guid, CameraStatusEntity>( );
            public ById( )
            {
            }

            public void Add( CameraStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraStatusEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraStatusByTimestampEntityIndex( )
        {
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraTiltCalibrationByCameraAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, CameraTiltCalibrationEntity> _entries = new SortedWeakReferenceList<DateTime, CameraTiltCalibrationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( CameraTiltCalibrationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<CameraTiltCalibrationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out CameraTiltCalibrationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraTiltCalibrationEntity? GetCameraTiltCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraTiltCalibrationEntity? GetCameraTiltCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraTiltCalibrationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraTiltCalibrationEntity> _entries = new SortedWeakReferenceList<Guid, CameraTiltCalibrationEntity>( );
            public ById( )
            {
            }

            public void Add( CameraTiltCalibrationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraTiltCalibrationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraTiltCalibrationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraTiltCalibrationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraTiltCalibrationByTimestampEntityIndex( )
        {
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex
    {

        public class ByPanAngle
        {
            readonly SortedWeakReferenceList<double, CameraTiltCalibrationValueEntity> _entries = new SortedWeakReferenceList<double, CameraTiltCalibrationValueEntity>( );

            public ByPanAngle( )
            {
            }

            public void Add( CameraTiltCalibrationValueEntity entity )
            {
                if( _entries.TryGetValue(entity.PanAngle, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.PanAngle, new WeakReference<CameraTiltCalibrationValueEntity>( entity, false ) );
                }
            }

            public bool GetByPanAngle( double panAngle, out CameraTiltCalibrationValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( panAngle, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( panAngle );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(double key, [DisallowNull] IList<CameraTiltCalibrationValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(double key, [DisallowNull] IList<CameraTiltCalibrationValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(double firstKey, double lastKey, [DisallowNull] IList<CameraTiltCalibrationValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraTiltCalibrationValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByPanAngle> _entries = new SortedListEx<Guid, ByPanAngle>( );
        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueCollectionByTiltCalibration( Guid tiltCalibration )
        {
            throw new NotImplementedException();
        }

        public CameraTiltCalibrationValueEntity? GetCameraTiltCalibrationValueByTiltCalibrationAndPanAngle( Guid tiltCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueByTiltCalibrationFromPanAngle( Guid tiltCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueByTiltCalibrationUntilPanAngle( Guid tiltCalibration, double panAngle )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueByTiltCalibrationOverPanAngle( Guid tiltCalibration, double fromPanAngle, double untilPanAngle )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraZoomCalibrationByCameraAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, CameraZoomCalibrationEntity> _entries = new SortedWeakReferenceList<DateTime, CameraZoomCalibrationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( CameraZoomCalibrationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<CameraZoomCalibrationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out CameraZoomCalibrationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public CameraZoomCalibrationEntity? GetCameraZoomCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public CameraZoomCalibrationEntity? GetCameraZoomCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class CameraZoomCalibrationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, CameraZoomCalibrationEntity> _entries = new SortedWeakReferenceList<Guid, CameraZoomCalibrationEntity>( );
            public ById( )
            {
            }

            public void Add( CameraZoomCalibrationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<CameraZoomCalibrationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out CameraZoomCalibrationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<CameraZoomCalibrationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public CameraZoomCalibrationByTimestampEntityIndex( )
        {
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex
    {

        public class ByFocalLength
        {
            readonly SortedWeakReferenceList<double, CameraZoomCalibrationValueEntity> _entries = new SortedWeakReferenceList<double, CameraZoomCalibrationValueEntity>( );

            public ByFocalLength( )
            {
            }

            public void Add( CameraZoomCalibrationValueEntity entity )
            {
                if( _entries.TryGetValue(entity.FocalLength, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.FocalLength, new WeakReference<CameraZoomCalibrationValueEntity>( entity, false ) );
                }
            }

            public bool GetByFocalLength( double focalLength, out CameraZoomCalibrationValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( focalLength, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( focalLength );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(double key, [DisallowNull] IList<CameraZoomCalibrationValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(double key, [DisallowNull] IList<CameraZoomCalibrationValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(double firstKey, double lastKey, [DisallowNull] IList<CameraZoomCalibrationValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CameraZoomCalibrationValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByFocalLength> _entries = new SortedListEx<Guid, ByFocalLength>( );
        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueCollectionByZoomCalibration( Guid zoomCalibration )
        {
            throw new NotImplementedException();
        }

        public CameraZoomCalibrationValueEntity? GetCameraZoomCalibrationValueByZoomCalibrationAndFocalLength( Guid zoomCalibration, double focalLength )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueByZoomCalibrationFromFocalLength( Guid zoomCalibration, double focalLength )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueByZoomCalibrationUntilFocalLength( Guid zoomCalibration, double focalLength )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueByZoomCalibrationOverFocalLength( Guid zoomCalibration, double fromFocalLength, double untilFocalLength )
        {
            throw new NotImplementedException();
        }

    }
    public class CatalogElementByCatalogAndNameEntityIndex
    {

        public class ByName
        {
            readonly SortedWeakReferenceList<string, CatalogElementEntity> _entries = new SortedWeakReferenceList<string, CatalogElementEntity>( );

            public ByName( )
            {
            }

            public void Add( CatalogElementEntity entity )
            {
                if( _entries.TryGetValue(entity.Name, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Name, new WeakReference<CatalogElementEntity>( entity, false ) );
                }
            }

            public bool GetByName( string name, out CatalogElementEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( name, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( name );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<CatalogElementEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<CatalogElementEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<CatalogElementEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<CatalogElementEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByName> _entries = new SortedListEx<Guid, ByName>( );
        public List<CatalogElementEntity> GetCatalogElementCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public List<CatalogElementEntity> GetCatalogElementCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException();
        }

        public CatalogElementEntity? GetCatalogElementByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public List<CatalogElementEntity> GetCatalogElementCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class CatalogElementByCatalogIsNullAndNameEntityIndex
    {
    }

    public class ElementByElementTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ElementEntity> _entries = new SortedWeakReferenceList<Guid, ElementEntity>( );
            public ById( )
            {
            }

            public void Add( ElementEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ElementEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ElementEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ElementEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ElementEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ElementEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ElementEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ElementByElementTypeEntityIndex( )
        {
        }

        public List<ElementEntity> GetElementCollectionByElementType( Guid? elementType )
        {
            throw new NotImplementedException();
        }

        public List<ElementEntity> GetElementCollectionByElementTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ElementByElementTypeIsNullEntityIndex
    {
    }

    public class CountryByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, CountryEntity> _entries = new SortedWeakReferenceList<string, CountryEntity>( );

        public CountryByNameEntityIndex( )
        {
        }

        public void Add( CountryEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<CountryEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out CountryEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<CountryEntity> result )
        {
            return _entries.All( result );
        }

        public CountryEntity? GetCountryByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class CountryByCodeEntityIndex
    {
        readonly SortedWeakReferenceList<int, CountryEntity> _entries = new SortedWeakReferenceList<int, CountryEntity>( );

        public CountryByCodeEntityIndex( )
        {
        }

        public void Add( CountryEntity entity )
        {
            if( _entries.TryGetValue(entity.Code, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Code, new WeakReference<CountryEntity>( entity, false ) );
            }
        }

        public bool GetByCode( int code, out CountryEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( code, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( code );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(int key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(int key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(int firstKey, int lastKey, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<CountryEntity> result )
        {
            return _entries.All( result );
        }

        public CountryEntity? GetCountryByCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<CountryEntity> GetCountryFromCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<CountryEntity> GetCountryUntilCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<CountryEntity> GetCountryOverCode( int fromCode, int untilCode )
        {
            throw new NotImplementedException();
        }

    }
    public class CountryByAlpha2EntityIndex
    {
        readonly SortedWeakReferenceList<string, CountryEntity> _entries = new SortedWeakReferenceList<string, CountryEntity>( );

        public CountryByAlpha2EntityIndex( )
        {
        }

        public void Add( CountryEntity entity )
        {
            if( _entries.TryGetValue(entity.Alpha2, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Alpha2, new WeakReference<CountryEntity>( entity, false ) );
            }
        }

        public bool GetByAlpha2( string alpha2, out CountryEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( alpha2, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( alpha2 );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<CountryEntity> result )
        {
            return _entries.All( result );
        }

        public CountryEntity? GetCountryByAlpha2( string alpha2 )
        {
            throw new NotImplementedException();
        }

    }
    public class CountryByAlpha3EntityIndex
    {
        readonly SortedWeakReferenceList<string, CountryEntity> _entries = new SortedWeakReferenceList<string, CountryEntity>( );

        public CountryByAlpha3EntityIndex( )
        {
        }

        public void Add( CountryEntity entity )
        {
            if( _entries.TryGetValue(entity.Alpha3, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Alpha3, new WeakReference<CountryEntity>( entity, false ) );
            }
        }

        public bool GetByAlpha3( string alpha3, out CountryEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( alpha3, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( alpha3 );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<CountryEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<CountryEntity> result )
        {
            return _entries.All( result );
        }

        public CountryEntity? GetCountryByAlpha3( string alpha3 )
        {
            throw new NotImplementedException();
        }

    }
    public class DateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, DateTimeTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, DateTimeTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( DateTimeTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<DateTimeTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out DateTimeTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public DateTimeTimeseriesValueEntity? GetDateTimeTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public DateTimeTimeseriesValueEntity? GetDateTimeTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class DateTimeTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, DateTimeTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, DateTimeTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( DateTimeTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<DateTimeTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out DateTimeTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<DateTimeTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public DateTimeTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class DeviceHostByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, DeviceHostEntity> _entries = new SortedWeakReferenceList<string, DeviceHostEntity>( );

        public DeviceHostByNameEntityIndex( )
        {
        }

        public void Add( DeviceHostEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<DeviceHostEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out DeviceHostEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<DeviceHostEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<DeviceHostEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<DeviceHostEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<DeviceHostEntity> result )
        {
            return _entries.All( result );
        }

        public DeviceHostEntity? GetDeviceHostByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class DeviceHostConfigurationByHostAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, DeviceHostConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, DeviceHostConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( DeviceHostConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<DeviceHostConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out DeviceHostConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public DeviceHostConfigurationEntity? GetDeviceHostConfigurationByHostAndTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public DeviceHostConfigurationEntity? GetDeviceHostConfigurationByHostAtTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationByHostFromTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationByHostUntilTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationByHostOverTimestamp( Guid host, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class DeviceHostConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, DeviceHostConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, DeviceHostConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( DeviceHostConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<DeviceHostConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out DeviceHostConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<DeviceHostConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public DeviceHostConfigurationByTimestampEntityIndex( )
        {
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class DoubleTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, DoubleTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, DoubleTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( DoubleTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<DoubleTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out DoubleTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public DoubleTimeseriesValueEntity? GetDoubleTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public DoubleTimeseriesValueEntity? GetDoubleTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class DoubleTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, DoubleTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, DoubleTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( DoubleTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<DoubleTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out DoubleTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<DoubleTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public DoubleTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class FacilityTypeByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, FacilityTypeEntity> _entries = new SortedWeakReferenceList<string, FacilityTypeEntity>( );

        public FacilityTypeByNameEntityIndex( )
        {
        }

        public void Add( FacilityTypeEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<FacilityTypeEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out FacilityTypeEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<FacilityTypeEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<FacilityTypeEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<FacilityTypeEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<FacilityTypeEntity> result )
        {
            return _entries.All( result );
        }

        public FacilityTypeEntity? GetFacilityTypeByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class GeoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, GeoPosition2DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, GeoPosition2DTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( GeoPosition2DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<GeoPosition2DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out GeoPosition2DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public GeoPosition2DTimeseriesValueEntity? GetGeoPosition2DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GeoPosition2DTimeseriesValueEntity? GetGeoPosition2DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class GeoPosition2DTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GeoPosition2DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, GeoPosition2DTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( GeoPosition2DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GeoPosition2DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GeoPosition2DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GeoPosition2DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GeoPosition2DTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GeoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, GeoPosition3DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, GeoPosition3DTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( GeoPosition3DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<GeoPosition3DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out GeoPosition3DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public GeoPosition3DTimeseriesValueEntity? GetGeoPosition3DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GeoPosition3DTimeseriesValueEntity? GetGeoPosition3DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class GeoPosition3DTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GeoPosition3DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, GeoPosition3DTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( GeoPosition3DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GeoPosition3DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GeoPosition3DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GeoPosition3DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GeoPosition3DTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GNSSDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( GNSSDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GNSSDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GNSSDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public GNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex( )
        {
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GNSSDeviceCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GNSSDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( GNSSDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GNSSDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GNSSDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GNSSDeviceCommandByTimestampEntityIndex( )
        {
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GNSSDeviceCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GNSSDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( GNSSDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GNSSDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GNSSDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public GNSSDeviceCommandByReplyEntityIndex( )
        {
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class GNSSDeviceCommandByReplyIsNullEntityIndex
    {
    }

    public class GNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GNSSDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( GNSSDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GNSSDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GNSSDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public GNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex( )
        {
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GNSSDeviceCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GNSSDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( GNSSDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GNSSDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GNSSDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GNSSDeviceCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GNSSDeviceCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GNSSDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceCommandReplyEntity>( );

        public GNSSDeviceCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( GNSSDeviceCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<GNSSDeviceCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out GNSSDeviceCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GNSSDeviceCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public GNSSDeviceCommandReplyEntity? GetGNSSDeviceCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GNSSDeviceCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class GNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, GNSSDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, GNSSDeviceConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( GNSSDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<GNSSDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out GNSSDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionByGNSSDevice( Guid gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public GNSSDeviceConfigurationEntity? GetGNSSDeviceConfigurationByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GNSSDeviceConfigurationEntity? GetGNSSDeviceConfigurationByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class GNSSDeviceConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GNSSDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, GNSSDeviceConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( GNSSDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GNSSDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GNSSDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GNSSDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GNSSDeviceConfigurationByTimestampEntityIndex( )
        {
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GuidTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, GuidTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, GuidTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( GuidTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<GuidTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out GuidTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public GuidTimeseriesValueEntity? GetGuidTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GuidTimeseriesValueEntity? GetGuidTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class GuidTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GuidTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, GuidTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( GuidTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GuidTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GuidTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GuidTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GuidTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceCommandByGyroDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public GyroDeviceCommandByGyroDeviceAndTimestampEntityIndex( )
        {
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GyroDeviceCommandByTimestampEntityIndex( )
        {
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public GyroDeviceCommandByReplyEntityIndex( )
        {
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceCommandByReplyIsNullEntityIndex
    {
    }

    public class GyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public GyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex( )
        {
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GyroDeviceCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceCommandReplyEntity>( );

        public GyroDeviceCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( GyroDeviceCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<GyroDeviceCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out GyroDeviceCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroDeviceCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public GyroDeviceCommandReplyEntity? GetGyroDeviceCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroDeviceCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class GyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, GyroDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, GyroDeviceConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( GyroDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<GyroDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out GyroDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionByGyroDevice( Guid gyroDevice )
        {
            throw new NotImplementedException();
        }

        public GyroDeviceConfigurationEntity? GetGyroDeviceConfigurationByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public GyroDeviceConfigurationEntity? GetGyroDeviceConfigurationByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroDeviceConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public GyroDeviceConfigurationByTimestampEntityIndex( )
        {
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class CallsignByIdentifierEntityIndex
    {
        readonly SortedWeakReferenceList<string, CallsignEntity> _entries = new SortedWeakReferenceList<string, CallsignEntity>( );

        public CallsignByIdentifierEntityIndex( )
        {
        }

        public void Add( CallsignEntity entity )
        {
            if( _entries.TryGetValue(entity.Identifier, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Identifier, new WeakReference<CallsignEntity>( entity, false ) );
            }
        }

        public bool GetByIdentifier( string identifier, out CallsignEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( identifier, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( identifier );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<CallsignEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<CallsignEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<CallsignEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<CallsignEntity> result )
        {
            return _entries.All( result );
        }

        public CallsignEntity? GetCallsignByIdentifier( string identifier )
        {
            throw new NotImplementedException();
        }

    }
    public class InternationalMaritimeOrganizationNumberByIdentifierEntityIndex
    {
        readonly SortedWeakReferenceList<long, InternationalMaritimeOrganizationNumberEntity> _entries = new SortedWeakReferenceList<long, InternationalMaritimeOrganizationNumberEntity>( );

        public InternationalMaritimeOrganizationNumberByIdentifierEntityIndex( )
        {
        }

        public void Add( InternationalMaritimeOrganizationNumberEntity entity )
        {
            if( _entries.TryGetValue(entity.Identifier, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Identifier, new WeakReference<InternationalMaritimeOrganizationNumberEntity>( entity, false ) );
            }
        }

        public bool GetByIdentifier( long identifier, out InternationalMaritimeOrganizationNumberEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( identifier, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( identifier );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(long key, [DisallowNull] IList<InternationalMaritimeOrganizationNumberEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(long key, [DisallowNull] IList<InternationalMaritimeOrganizationNumberEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(long firstKey, long lastKey, [DisallowNull] IList<InternationalMaritimeOrganizationNumberEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<InternationalMaritimeOrganizationNumberEntity> result )
        {
            return _entries.All( result );
        }

        public InternationalMaritimeOrganizationNumberEntity? GetInternationalMaritimeOrganizationNumberByIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public List<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberFromIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public List<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberUntilIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public List<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberOverIdentifier( long fromIdentifier, long untilIdentifier )
        {
            throw new NotImplementedException();
        }

    }
    public class MaritimeMobileServiceIdentityByIdentifierEntityIndex
    {
        readonly SortedWeakReferenceList<long, MaritimeMobileServiceIdentityEntity> _entries = new SortedWeakReferenceList<long, MaritimeMobileServiceIdentityEntity>( );

        public MaritimeMobileServiceIdentityByIdentifierEntityIndex( )
        {
        }

        public void Add( MaritimeMobileServiceIdentityEntity entity )
        {
            if( _entries.TryGetValue(entity.Identifier, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Identifier, new WeakReference<MaritimeMobileServiceIdentityEntity>( entity, false ) );
            }
        }

        public bool GetByIdentifier( long identifier, out MaritimeMobileServiceIdentityEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( identifier, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( identifier );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(long key, [DisallowNull] IList<MaritimeMobileServiceIdentityEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(long key, [DisallowNull] IList<MaritimeMobileServiceIdentityEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(long firstKey, long lastKey, [DisallowNull] IList<MaritimeMobileServiceIdentityEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<MaritimeMobileServiceIdentityEntity> result )
        {
            return _entries.All( result );
        }

        public MaritimeMobileServiceIdentityEntity? GetMaritimeMobileServiceIdentityByIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityFromIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityUntilIdentifier( long identifier )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityOverIdentifier( long fromIdentifier, long untilIdentifier )
        {
            throw new NotImplementedException();
        }

    }
    public class NameByTextEntityIndex
    {
        readonly SortedWeakReferenceList<string, NameEntity> _entries = new SortedWeakReferenceList<string, NameEntity>( );

        public NameByTextEntityIndex( )
        {
        }

        public void Add( NameEntity entity )
        {
            if( _entries.TryGetValue(entity.Text, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Text, new WeakReference<NameEntity>( entity, false ) );
            }
        }

        public bool GetByText( string text, out NameEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( text, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( text );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<NameEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<NameEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<NameEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<NameEntity> result )
        {
            return _entries.All( result );
        }

        public NameEntity? GetNameByText( string text )
        {
            throw new NotImplementedException();
        }

    }
    public class Int16TimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, Int16TimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, Int16TimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( Int16TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<Int16TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out Int16TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Int16TimeseriesValueEntity? GetInt16TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Int16TimeseriesValueEntity? GetInt16TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class Int16TimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Int16TimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, Int16TimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( Int16TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Int16TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Int16TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Int16TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public Int16TimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class Int32TimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, Int32TimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, Int32TimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( Int32TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<Int32TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out Int32TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Int32TimeseriesValueEntity? GetInt32TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Int32TimeseriesValueEntity? GetInt32TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class Int32TimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Int32TimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, Int32TimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( Int32TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Int32TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Int32TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Int32TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public Int32TimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class Int64TimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, Int64TimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, Int64TimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( Int64TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<Int64TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out Int64TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Int64TimeseriesValueEntity? GetInt64TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Int64TimeseriesValueEntity? GetInt64TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class Int64TimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Int64TimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, Int64TimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( Int64TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Int64TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Int64TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Int64TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public Int64TimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class BaseStationByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, BaseStationEntity> _entries = new SortedWeakReferenceList<string, BaseStationEntity>( );

        public BaseStationByNameEntityIndex( )
        {
        }

        public void Add( BaseStationEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<BaseStationEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out BaseStationEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<BaseStationEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<BaseStationEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<BaseStationEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<BaseStationEntity> result )
        {
            return _entries.All( result );
        }

        public BaseStationEntity? GetBaseStationByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class BaseStationByTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, BaseStationEntity> _entries = new SortedWeakReferenceList<Guid, BaseStationEntity>( );
            public ById( )
            {
            }

            public void Add( BaseStationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<BaseStationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out BaseStationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<BaseStationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<BaseStationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<BaseStationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<BaseStationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public BaseStationByTypeEntityIndex( )
        {
        }

        public List<BaseStationEntity> GetBaseStationCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public List<BaseStationEntity> GetBaseStationCollectionByTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class BaseStationByTypeIsNullEntityIndex
    {
    }

    public class DeviceByHostEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, DeviceEntity> _entries = new SortedWeakReferenceList<Guid, DeviceEntity>( );
            public ById( )
            {
            }

            public void Add( DeviceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<DeviceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out DeviceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<DeviceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<DeviceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<DeviceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<DeviceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public DeviceByHostEntityIndex( )
        {
        }

        public List<DeviceEntity> GetDeviceCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

    }

    public class DeviceByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, DeviceEntity> _entries = new SortedWeakReferenceList<string, DeviceEntity>( );

        public DeviceByNameEntityIndex( )
        {
        }

        public void Add( DeviceEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<DeviceEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out DeviceEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<DeviceEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<DeviceEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<DeviceEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<DeviceEntity> result )
        {
            return _entries.All( result );
        }

        public DeviceEntity? GetDeviceByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroDeviceByGNSSDeviceEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GyroDeviceEntity> _entries = new SortedWeakReferenceList<Guid, GyroDeviceEntity>( );
            public ById( )
            {
            }

            public void Add( GyroDeviceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GyroDeviceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GyroDeviceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GyroDeviceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GyroDeviceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GyroDeviceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GyroDeviceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public GyroDeviceByGNSSDeviceEntityIndex( )
        {
        }

        public List<GyroDeviceEntity> GetGyroDeviceCollectionByGNSSDevice( Guid? gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceEntity> GetGyroDeviceCollectionByGNSSDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class GyroDeviceByGNSSDeviceIsNullEntityIndex
    {
    }

    public class RadomeDeviceByRadarEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeDeviceEntity> _entries = new SortedWeakReferenceList<Guid, RadomeDeviceEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeDeviceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeDeviceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeDeviceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeDeviceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeDeviceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeDeviceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeDeviceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public RadomeDeviceByRadarEntityIndex( )
        {
        }

        public List<RadomeDeviceEntity> GetRadomeDeviceCollectionByRadar( Guid? radar )
        {
            throw new NotImplementedException();
        }

        public List<RadomeDeviceEntity> GetRadomeDeviceCollectionByRadarIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeDeviceByRadarIsNullEntityIndex
    {
    }

    public class RadarDeviceByRadomeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarDeviceEntity> _entries = new SortedWeakReferenceList<Guid, RadarDeviceEntity>( );
            public ById( )
            {
            }

            public void Add( RadarDeviceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarDeviceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarDeviceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public RadarDeviceByRadomeEntityIndex( )
        {
        }

        public List<RadarDeviceEntity> GetRadarDeviceCollectionByRadome( Guid? radome )
        {
            throw new NotImplementedException();
        }

        public List<RadarDeviceEntity> GetRadarDeviceCollectionByRadomeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarDeviceByRadomeIsNullEntityIndex
    {
    }

    public class RadarDeviceByGNSSDeviceEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarDeviceEntity> _entries = new SortedWeakReferenceList<Guid, RadarDeviceEntity>( );
            public ById( )
            {
            }

            public void Add( RadarDeviceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarDeviceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarDeviceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarDeviceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public RadarDeviceByGNSSDeviceEntityIndex( )
        {
        }

        public List<RadarDeviceEntity> GetRadarDeviceCollectionByGNSSDevice( Guid? gNSSDevice )
        {
            throw new NotImplementedException();
        }

        public List<RadarDeviceEntity> GetRadarDeviceCollectionByGNSSDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarDeviceByGNSSDeviceIsNullEntityIndex
    {
    }

    public class WeatherStationDeviceByGyroEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationDeviceEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationDeviceEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationDeviceEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationDeviceEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationDeviceEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationDeviceEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationDeviceEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationDeviceEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationDeviceEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public WeatherStationDeviceByGyroEntityIndex( )
        {
        }

        public List<WeatherStationDeviceEntity> GetWeatherStationDeviceCollectionByGyro( Guid? gyro )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationDeviceEntity> GetWeatherStationDeviceCollectionByGyroIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationDeviceByGyroIsNullEntityIndex
    {
    }

    public class FacilityByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, FacilityEntity> _entries = new SortedWeakReferenceList<string, FacilityEntity>( );

        public FacilityByNameEntityIndex( )
        {
        }

        public void Add( FacilityEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<FacilityEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out FacilityEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<FacilityEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<FacilityEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<FacilityEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<FacilityEntity> result )
        {
            return _entries.All( result );
        }

        public FacilityEntity? GetFacilityByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class FacilityByTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, FacilityEntity> _entries = new SortedWeakReferenceList<Guid, FacilityEntity>( );
            public ById( )
            {
            }

            public void Add( FacilityEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<FacilityEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out FacilityEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<FacilityEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<FacilityEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<FacilityEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<FacilityEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public FacilityByTypeEntityIndex( )
        {
        }

        public List<FacilityEntity> GetFacilityCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public List<FacilityEntity> GetFacilityCollectionByTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class FacilityByTypeIsNullEntityIndex
    {
    }

    public class AircraftByNameEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AircraftEntity> _entries = new SortedWeakReferenceList<Guid, AircraftEntity>( );
            public ById( )
            {
            }

            public void Add( AircraftEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AircraftEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AircraftEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ById> _entries = new SortedListEx<string, ById>( );

        public AircraftByNameEntityIndex( )
        {
        }

        public List<AircraftEntity> GetAircraftCollectionByName( string name )
        {
            throw new NotImplementedException();
        }

    }

    public class AircraftByTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AircraftEntity> _entries = new SortedWeakReferenceList<Guid, AircraftEntity>( );
            public ById( )
            {
            }

            public void Add( AircraftEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AircraftEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AircraftEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AircraftEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AircraftByTypeEntityIndex( )
        {
        }

        public List<AircraftEntity> GetAircraftCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public List<AircraftEntity> GetAircraftCollectionByTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AircraftByTypeIsNullEntityIndex
    {
    }

    public class AisAidToNavigationByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, AisAidToNavigationEntity> _entries = new SortedWeakReferenceList<string, AisAidToNavigationEntity>( );

        public AisAidToNavigationByNameEntityIndex( )
        {
        }

        public void Add( AisAidToNavigationEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<AisAidToNavigationEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out AisAidToNavigationEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<AisAidToNavigationEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<AisAidToNavigationEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<AisAidToNavigationEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<AisAidToNavigationEntity> result )
        {
            return _entries.All( result );
        }

        public AisAidToNavigationEntity? GetAisAidToNavigationByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class AisAidToNavigationByMMSIEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisAidToNavigationEntity> _entries = new SortedWeakReferenceList<Guid, AisAidToNavigationEntity>( );
            public ById( )
            {
            }

            public void Add( AisAidToNavigationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisAidToNavigationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisAidToNavigationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisAidToNavigationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisAidToNavigationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisAidToNavigationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisAidToNavigationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisAidToNavigationByMMSIEntityIndex( )
        {
        }

        public List<AisAidToNavigationEntity> GetAisAidToNavigationCollectionByMMSI( Guid? mMSI )
        {
            throw new NotImplementedException();
        }

        public List<AisAidToNavigationEntity> GetAisAidToNavigationCollectionByMMSIIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisAidToNavigationByMMSIIsNullEntityIndex
    {
    }

    public class VehicleByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, VehicleEntity> _entries = new SortedWeakReferenceList<string, VehicleEntity>( );

        public VehicleByNameEntityIndex( )
        {
        }

        public void Add( VehicleEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<VehicleEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out VehicleEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<VehicleEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<VehicleEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<VehicleEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<VehicleEntity> result )
        {
            return _entries.All( result );
        }

        public VehicleEntity? GetVehicleByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class VehicleByTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, VehicleEntity> _entries = new SortedWeakReferenceList<Guid, VehicleEntity>( );
            public ById( )
            {
            }

            public void Add( VehicleEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<VehicleEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out VehicleEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<VehicleEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<VehicleEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<VehicleEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<VehicleEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public VehicleByTypeEntityIndex( )
        {
        }

        public List<VehicleEntity> GetVehicleCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public List<VehicleEntity> GetVehicleCollectionByTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class VehicleByTypeIsNullEntityIndex
    {
    }

    public class VesselByNameEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, VesselEntity> _entries = new SortedWeakReferenceList<Guid, VesselEntity>( );
            public ById( )
            {
            }

            public void Add( VesselEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<VesselEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out VesselEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<VesselEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<VesselEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<VesselEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<VesselEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ById> _entries = new SortedListEx<string, ById>( );

        public VesselByNameEntityIndex( )
        {
        }

        public List<VesselEntity> GetVesselCollectionByName( string name )
        {
            throw new NotImplementedException();
        }

    }

    public class VesselByTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, VesselEntity> _entries = new SortedWeakReferenceList<Guid, VesselEntity>( );
            public ById( )
            {
            }

            public void Add( VesselEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<VesselEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out VesselEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<VesselEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<VesselEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<VesselEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<VesselEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public VesselByTypeEntityIndex( )
        {
        }

        public List<VesselEntity> GetVesselCollectionByType( Guid? type )
        {
            throw new NotImplementedException();
        }

        public List<VesselEntity> GetVesselCollectionByTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class VesselByTypeIsNullEntityIndex
    {
    }

    public class ItemIdentityLinkByItemAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStart( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemIdentityLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemIdentityLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemIdentityLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemIdentityLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemIdentityLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );

        public ItemIdentityLinkByItemAndStartEntityIndex( )
        {
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAndStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAtStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemFromStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemUntilStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemOverStart( Guid item, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class ItemIdentityLinkByItemAndEndEntityIndex
    {
        public class ByEnd
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByEnd( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemIdentityLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemIdentityLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemIdentityLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemIdentityLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemIdentityLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByEnd> _entries = new SortedListEx<Guid, ByEnd>( );

        public ItemIdentityLinkByItemAndEndEntityIndex( )
        {
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItem(  )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAndEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAndEndIsNull( Guid item )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAtEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemFromEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemUntilEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemOverEnd( Guid item, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

    }

    public class ItemIdentityLinkByItemAndEndIsNullEntityIndex
    {
    }

    public class ItemIdentityLinkByIdentityAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStart( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemIdentityLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemIdentityLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemIdentityLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemIdentityLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemIdentityLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );

        public ItemIdentityLinkByIdentityAndStartEntityIndex( )
        {
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentity( Guid identity )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAndStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAtStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityFromStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityUntilStart( Guid identity, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityOverStart( Guid identity, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class ItemIdentityLinkByIdentityAndEndEntityIndex
    {
        public class ByEnd
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByEnd( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemIdentityLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemIdentityLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemIdentityLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemIdentityLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemIdentityLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByEnd> _entries = new SortedListEx<Guid, ByEnd>( );

        public ItemIdentityLinkByIdentityAndEndEntityIndex( )
        {
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentity( Guid identity )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentity(  )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAndEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAndEndIsNull( Guid identity )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAtEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityFromEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityUntilEnd( Guid identity, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityOverEnd( Guid identity, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

    }

    public class ItemIdentityLinkByIdentityAndEndIsNullEntityIndex
    {
    }

    public class ItemIdentityLinkByStartEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemIdentityLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemIdentityLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemIdentityLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemIdentityLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemIdentityLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ItemIdentityLinkByStartEntityIndex( )
        {
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class ItemIdentityLinkByEndEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemIdentityLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemIdentityLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemIdentityLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemIdentityLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemIdentityLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemIdentityLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ItemIdentityLinkByEndEntityIndex( )
        {
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByEnd( DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByEndIsNull(  )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionAtEnd( DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionFromEnd( DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionUntilEnd( DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionOverEnd( DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

    }

    public class ItemIdentityLinkByEndIsNullEntityIndex
    {
    }

    public class ItemParentChildLinkByParentAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ItemParentChildLinkEntity> _entries = new SortedWeakReferenceList<DateTime, ItemParentChildLinkEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ItemParentChildLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ItemParentChildLinkEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ItemParentChildLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionByParent( Guid parent )
        {
            throw new NotImplementedException();
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByParentAndTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByParentAtTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByParentFromTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByParentUntilTimestamp( Guid parent, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByParentOverTimestamp( Guid parent, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ItemParentChildLinkByChildAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ItemParentChildLinkEntity> _entries = new SortedWeakReferenceList<DateTime, ItemParentChildLinkEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ItemParentChildLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ItemParentChildLinkEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ItemParentChildLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionByChild( Guid child )
        {
            throw new NotImplementedException();
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByChildAndTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByChildAtTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByChildFromTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByChildUntilTimestamp( Guid child, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByChildOverTimestamp( Guid child, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ItemParentChildLinkByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ItemParentChildLinkEntity> _entries = new SortedWeakReferenceList<Guid, ItemParentChildLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ItemParentChildLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ItemParentChildLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ItemParentChildLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ItemParentChildLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ItemParentChildLinkByTimestampEntityIndex( )
        {
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public LineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex( )
        {
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputDeviceCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LineInputDeviceCommandByTimestampEntityIndex( )
        {
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputDeviceCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputDeviceCommandEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceCommandEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputDeviceCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputDeviceCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputDeviceCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public LineInputDeviceCommandByReplyEntityIndex( )
        {
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputDeviceCommandByReplyIsNullEntityIndex
    {
    }

    public class LineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public LineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex( )
        {
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputDeviceCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputDeviceCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputDeviceCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputDeviceCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LineInputDeviceCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputDeviceCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, LineInputDeviceCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceCommandReplyEntity>( );

        public LineInputDeviceCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( LineInputDeviceCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<LineInputDeviceCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out LineInputDeviceCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<LineInputDeviceCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public LineInputDeviceCommandReplyEntity? GetLineInputDeviceCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class LineInputDeviceCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class LineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, LineInputDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, LineInputDeviceConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( LineInputDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<LineInputDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out LineInputDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public LineInputDeviceConfigurationEntity? GetLineInputDeviceConfigurationByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public LineInputDeviceConfigurationEntity? GetLineInputDeviceConfigurationByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class LineInputDeviceConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputDeviceConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, LineInputDeviceConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputDeviceConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputDeviceConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputDeviceConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputDeviceConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LineInputDeviceConfigurationByTimestampEntityIndex( )
        {
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputMessageRoutingByLineInputDeviceAndTypeEntityIndex
    {

        public class ByType
        {
            readonly SortedWeakReferenceList<string, LineInputMessageRoutingEntity> _entries = new SortedWeakReferenceList<string, LineInputMessageRoutingEntity>( );

            public ByType( )
            {
            }

            public void Add( LineInputMessageRoutingEntity entity )
            {
                if( _entries.TryGetValue(entity.Type, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Type, new WeakReference<LineInputMessageRoutingEntity>( entity, false ) );
                }
            }

            public bool GetByType( string type, out LineInputMessageRoutingEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( type, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( type );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<LineInputMessageRoutingEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<LineInputMessageRoutingEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<LineInputMessageRoutingEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputMessageRoutingEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByType> _entries = new SortedListEx<Guid, ByType>( );
        public List<LineInputMessageRoutingEntity> GetLineInputMessageRoutingCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public LineInputMessageRoutingEntity? GetLineInputMessageRoutingByLineInputDeviceAndType( Guid lineInputDevice, string type )
        {
            throw new NotImplementedException();
        }

    }
    public class LineInputMessageRoutingDestinationByRoutingAndListenerEntityIndex
    {

        public class ByListener
        {
            readonly SortedWeakReferenceList<Guid, LineInputMessageRoutingDestinationEntity> _entries = new SortedWeakReferenceList<Guid, LineInputMessageRoutingDestinationEntity>( );

            public ByListener( )
            {
            }

            public void Add( LineInputMessageRoutingDestinationEntity entity )
            {
                if ( entity.ListenerId is Guid listener )
                {
                    if ( _entries.TryGetValue( listener, out var weakReference ) )
                    {
                        weakReference.SetTarget( entity );
                    }
                    else
                    {
                        _entries.Add( listener, new WeakReference<LineInputMessageRoutingDestinationEntity>( entity, false ) );
                    }
                }
                else
                {
                    throw new ArgumentException( "entity.ListenerId is null.", nameof( entity ) );
                }
            }

            public bool GetByListenerId( Guid listener, out LineInputMessageRoutingDestinationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( listener, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( listener );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid key, [DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(Guid key, [DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByListener> _entries = new SortedListEx<Guid, ByListener>( );
        public List<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByRouting( Guid routing )
        {
            throw new NotImplementedException();
        }

        public List<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByRouting(  )
        {
            throw new NotImplementedException();
        }

        public LineInputMessageRoutingDestinationEntity? GetLineInputMessageRoutingDestinationByRoutingAndListener( Guid routing, Guid? listener )
        {
            throw new NotImplementedException();
        }

        public List<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByRoutingAndListenerIsNull( Guid routing )
        {
            throw new NotImplementedException();
        }

    }
    public class LineInputMessageRoutingDestinationByRoutingAndListenerIsNullEntityIndex
    {
    }

    public class LineInputMessageRoutingDestinationByListenerEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LineInputMessageRoutingDestinationEntity> _entries = new SortedWeakReferenceList<Guid, LineInputMessageRoutingDestinationEntity>( );
            public ById( )
            {
            }

            public void Add( LineInputMessageRoutingDestinationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LineInputMessageRoutingDestinationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LineInputMessageRoutingDestinationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputMessageRoutingDestinationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public LineInputMessageRoutingDestinationByListenerEntityIndex( )
        {
        }

        public List<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByListener( Guid? listener )
        {
            throw new NotImplementedException();
        }

        public List<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByListenerIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class LineInputMessageRoutingDestinationByListenerIsNullEntityIndex
    {
    }

    public class LineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex
    {
        public class ByHostName
        {
            readonly SortedListEx<string, ByPort> _entries = new SortedListEx<string, ByPort>( );
            List<string> _emptyKeys = new List<string>( );

            public ByHostName( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LineInputWhiteListEntryEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }

        public class ByPort
        {
            readonly SortedWeakReferenceList<int, LineInputWhiteListEntryEntity> _entries = new SortedWeakReferenceList<int, LineInputWhiteListEntryEntity>( );

            public ByPort( )
            {
            }

            public void Add( LineInputWhiteListEntryEntity entity )
            {
                if( _entries.TryGetValue(entity.Port, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Port, new WeakReference<LineInputWhiteListEntryEntity>( entity, false ) );
                }
            }

            public bool GetByPort( int port, out LineInputWhiteListEntryEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( port, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( port );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(int key, [DisallowNull] IList<LineInputWhiteListEntryEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(int key, [DisallowNull] IList<LineInputWhiteListEntryEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(int firstKey, int lastKey, [DisallowNull] IList<LineInputWhiteListEntryEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LineInputWhiteListEntryEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByHostName> _entries = new SortedListEx<Guid, ByHostName>( );
        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryCollectionByLineInputDevice( Guid lineInputDevice )
        {
            throw new NotImplementedException();
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryCollectionByLineInputDeviceAndHostName( Guid lineInputDevice, string hostName )
        {
            throw new NotImplementedException();
        }

        public LineInputWhiteListEntryEntity? GetLineInputWhiteListEntryByLineInputDeviceHostNameAndPort( Guid lineInputDevice, string hostName, int port )
        {
            throw new NotImplementedException();
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryByLineInputDeviceHostNameFromPort( Guid lineInputDevice, string hostName, int port )
        {
            throw new NotImplementedException();
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryByLineInputDeviceHostNameUntilPort( Guid lineInputDevice, string hostName, int port )
        {
            throw new NotImplementedException();
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryByLineInputDeviceHostNameOverPort( Guid lineInputDevice, string hostName, int fromPort, int untilPort )
        {
            throw new NotImplementedException();
        }

    }
    public class LogApplicationByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, LogApplicationEntity> _entries = new SortedWeakReferenceList<string, LogApplicationEntity>( );

        public LogApplicationByNameEntityIndex( )
        {
        }

        public void Add( LogApplicationEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<LogApplicationEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out LogApplicationEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<LogApplicationEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<LogApplicationEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<LogApplicationEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<LogApplicationEntity> result )
        {
            return _entries.All( result );
        }

        public LogApplicationEntity? GetLogApplicationByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class LogApplicationConfigurationByApplicationAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, LogApplicationConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, LogApplicationConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( LogApplicationConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<LogApplicationConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out LogApplicationConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionByApplication( Guid application )
        {
            throw new NotImplementedException();
        }

        public LogApplicationConfigurationEntity? GetLogApplicationConfigurationByApplicationAndTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public LogApplicationConfigurationEntity? GetLogApplicationConfigurationByApplicationAtTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationByApplicationFromTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationByApplicationUntilTimestamp( Guid application, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationByApplicationOverTimestamp( Guid application, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class LogApplicationConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogApplicationConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, LogApplicationConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( LogApplicationConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogApplicationConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogApplicationConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogApplicationConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LogApplicationConfigurationByTimestampEntityIndex( )
        {
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LogHostByComputerNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, LogHostEntity> _entries = new SortedWeakReferenceList<string, LogHostEntity>( );

        public LogHostByComputerNameEntityIndex( )
        {
        }

        public void Add( LogHostEntity entity )
        {
            if( _entries.TryGetValue(entity.ComputerName, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.ComputerName, new WeakReference<LogHostEntity>( entity, false ) );
            }
        }

        public bool GetByComputerName( string computerName, out LogHostEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( computerName, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( computerName );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<LogHostEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<LogHostEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<LogHostEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<LogHostEntity> result )
        {
            return _entries.All( result );
        }

        public LogHostEntity? GetLogHostByComputerName( string computerName )
        {
            throw new NotImplementedException();
        }

    }
    public class LogHostConfigurationByHostAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, LogHostConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, LogHostConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( LogHostConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<LogHostConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out LogHostConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionByHost( Guid host )
        {
            throw new NotImplementedException();
        }

        public LogHostConfigurationEntity? GetLogHostConfigurationByHostAndTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public LogHostConfigurationEntity? GetLogHostConfigurationByHostAtTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationByHostFromTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationByHostUntilTimestamp( Guid host, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationByHostOverTimestamp( Guid host, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class LogHostConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogHostConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, LogHostConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( LogHostConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogHostConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogHostConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogHostConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LogHostConfigurationByTimestampEntityIndex( )
        {
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LogLocationByFileNameAndLineNumberEntityIndex
    {

        public class ByLineNumber
        {
            readonly SortedWeakReferenceList<int, LogLocationEntity> _entries = new SortedWeakReferenceList<int, LogLocationEntity>( );

            public ByLineNumber( )
            {
            }

            public void Add( LogLocationEntity entity )
            {
                if( _entries.TryGetValue(entity.LineNumber, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.LineNumber, new WeakReference<LogLocationEntity>( entity, false ) );
                }
            }

            public bool GetByLineNumber( int lineNumber, out LogLocationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( lineNumber, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( lineNumber );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(int key, [DisallowNull] IList<LogLocationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(int key, [DisallowNull] IList<LogLocationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(int firstKey, int lastKey, [DisallowNull] IList<LogLocationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<LogLocationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<string, ByLineNumber> _entries = new SortedListEx<string, ByLineNumber>( );
        public List<LogLocationEntity> GetLogLocationCollectionByFileName( string fileName )
        {
            throw new NotImplementedException();
        }

        public LogLocationEntity? GetLogLocationByFileNameAndLineNumber( string fileName, int lineNumber )
        {
            throw new NotImplementedException();
        }

        public List<LogLocationEntity> GetLogLocationByFileNameFromLineNumber( string fileName, int lineNumber )
        {
            throw new NotImplementedException();
        }

        public List<LogLocationEntity> GetLogLocationByFileNameUntilLineNumber( string fileName, int lineNumber )
        {
            throw new NotImplementedException();
        }

        public List<LogLocationEntity> GetLogLocationByFileNameOverLineNumber( string fileName, int fromLineNumber, int untilLineNumber )
        {
            throw new NotImplementedException();
        }

    }
    public class LogProcessByApplicationAndStartedEntityIndex
    {
        public class ByStarted
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStarted( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LogProcessEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogProcessEntity> _entries = new SortedWeakReferenceList<Guid, LogProcessEntity>( );
            public ById( )
            {
            }

            public void Add( LogProcessEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogProcessEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogProcessEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStarted> _entries = new SortedListEx<Guid, ByStarted>( );

        public LogProcessByApplicationAndStartedEntityIndex( )
        {
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplication( Guid application )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationAndStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationAtStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationFromStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationUntilStarted( Guid application, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationOverStarted( Guid application, DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

    }

    public class LogProcessByHostAndStartedEntityIndex
    {
        public class ByStarted
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStarted( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LogProcessEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogProcessEntity> _entries = new SortedWeakReferenceList<Guid, LogProcessEntity>( );
            public ById( )
            {
            }

            public void Add( LogProcessEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogProcessEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogProcessEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStarted> _entries = new SortedListEx<Guid, ByStarted>( );

        public LogProcessByHostAndStartedEntityIndex( )
        {
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHost( Guid? host )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostIsNull(  )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostAndStarted( Guid? host, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostIsNullAndStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostAtStarted( Guid? host, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostFromStarted( Guid? host, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostUntilStarted( Guid? host, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostOverStarted( Guid host, DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

    }

    public class LogProcessByHostIsNullAndStartedEntityIndex
    {
    }

    public class LogProcessByStartedEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogProcessEntity> _entries = new SortedWeakReferenceList<Guid, LogProcessEntity>( );
            public ById( )
            {
            }

            public void Add( LogProcessEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogProcessEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogProcessEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogProcessEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LogProcessByStartedEntityIndex( )
        {
        }

        public List<LogProcessEntity> GetLogProcessCollectionByStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionAtStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionFromStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionUntilStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionOverStarted( DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

    }

    public class LogRecordByThreadAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LogRecordEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogRecordEntity> _entries = new SortedWeakReferenceList<Guid, LogRecordEntity>( );
            public ById( )
            {
            }

            public void Add( LogRecordEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogRecordEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogRecordEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public LogRecordByThreadAndTimestampEntityIndex( )
        {
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThread( Guid thread )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadAndTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadAtTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadFromTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadUntilTimestamp( Guid thread, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadOverTimestamp( Guid thread, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LogRecordByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogRecordEntity> _entries = new SortedWeakReferenceList<Guid, LogRecordEntity>( );
            public ById( )
            {
            }

            public void Add( LogRecordEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogRecordEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogRecordEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LogRecordByTimestampEntityIndex( )
        {
        }

        public List<LogRecordEntity> GetLogRecordCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class LogRecordByLocationEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogRecordEntity> _entries = new SortedWeakReferenceList<Guid, LogRecordEntity>( );
            public ById( )
            {
            }

            public void Add( LogRecordEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogRecordEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogRecordEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogRecordEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public LogRecordByLocationEntityIndex( )
        {
        }

        public List<LogRecordEntity> GetLogRecordCollectionByLocation( Guid location )
        {
            throw new NotImplementedException();
        }

    }

    public class LogThreadByProcessAndStartedEntityIndex
    {
        public class ByStarted
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStarted( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LogThreadEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogThreadEntity> _entries = new SortedWeakReferenceList<Guid, LogThreadEntity>( );
            public ById( )
            {
            }

            public void Add( LogThreadEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogThreadEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogThreadEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStarted> _entries = new SortedListEx<Guid, ByStarted>( );

        public LogThreadByProcessAndStartedEntityIndex( )
        {
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcess( Guid process )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessAndStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessAtStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessFromStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessUntilStarted( Guid process, DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessOverStarted( Guid process, DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

    }

    public class LogThreadByStartedEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogThreadEntity> _entries = new SortedWeakReferenceList<Guid, LogThreadEntity>( );
            public ById( )
            {
            }

            public void Add( LogThreadEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogThreadEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogThreadEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogThreadEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LogThreadByStartedEntityIndex( )
        {
        }

        public List<LogThreadEntity> GetLogThreadCollectionByStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionAtStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionFromStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionUntilStarted( DateTime started )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionOverStarted( DateTime fromStarted, DateTime untilStarted )
        {
            throw new NotImplementedException();
        }

    }

    public class LogTraceEntryByThreadAndEnteredEntityIndex
    {
        public class ByEntered
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByEntered( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LogTraceEntryEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogTraceEntryEntity> _entries = new SortedWeakReferenceList<Guid, LogTraceEntryEntity>( );
            public ById( )
            {
            }

            public void Add( LogTraceEntryEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogTraceEntryEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogTraceEntryEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByEntered> _entries = new SortedListEx<Guid, ByEntered>( );

        public LogTraceEntryByThreadAndEnteredEntityIndex( )
        {
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThread( Guid thread )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadAndEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadAtEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadFromEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadUntilEntered( Guid thread, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadOverEntered( Guid thread, DateTime fromEntered, DateTime untilEntered )
        {
            throw new NotImplementedException();
        }

    }

    public class LogTraceEntryByLocationAndEnteredEntityIndex
    {
        public class ByEntered
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByEntered( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<LogTraceEntryEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogTraceEntryEntity> _entries = new SortedWeakReferenceList<Guid, LogTraceEntryEntity>( );
            public ById( )
            {
            }

            public void Add( LogTraceEntryEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogTraceEntryEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogTraceEntryEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByEntered> _entries = new SortedListEx<Guid, ByEntered>( );

        public LogTraceEntryByLocationAndEnteredEntityIndex( )
        {
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocation( Guid location )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationAndEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationAtEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationFromEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationUntilEntered( Guid location, DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationOverEntered( Guid location, DateTime fromEntered, DateTime untilEntered )
        {
            throw new NotImplementedException();
        }

    }

    public class LogTraceEntryByEnteredEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, LogTraceEntryEntity> _entries = new SortedWeakReferenceList<Guid, LogTraceEntryEntity>( );
            public ById( )
            {
            }

            public void Add( LogTraceEntryEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<LogTraceEntryEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out LogTraceEntryEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<LogTraceEntryEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public LogTraceEntryByEnteredEntityIndex( )
        {
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByEntered( DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionAtEntered( DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionFromEntered( DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionUntilEntered( DateTime entered )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionOverEntered( DateTime fromEntered, DateTime untilEntered )
        {
            throw new NotImplementedException();
        }

    }

    public class MapElementByItemEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, MapElementEntity> _entries = new SortedWeakReferenceList<Guid, MapElementEntity>( );
            public ById( )
            {
            }

            public void Add( MapElementEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<MapElementEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out MapElementEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<MapElementEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<MapElementEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<MapElementEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<MapElementEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public MapElementByItemEntityIndex( )
        {
        }

        public List<MapElementEntity> GetMapElementCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

    }

    public class MapServiceOptionsByTimestampEntityIndex
    {
        readonly SortedWeakReferenceList<DateTime, MapServiceOptionsEntity> _entries = new SortedWeakReferenceList<DateTime, MapServiceOptionsEntity>( );

        public MapServiceOptionsByTimestampEntityIndex( )
        {
        }

        public void Add( MapServiceOptionsEntity entity )
        {
            if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Timestamp, new WeakReference<MapServiceOptionsEntity>( entity, false ) );
            }
        }

        public bool GetByTimestamp( DateTime timestamp, out MapServiceOptionsEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( timestamp, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( timestamp );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(DateTime key, [DisallowNull] IList<MapServiceOptionsEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(DateTime key, [DisallowNull] IList<MapServiceOptionsEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<MapServiceOptionsEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<MapServiceOptionsEntity> result )
        {
            return _entries.All( result );
        }

        public MapServiceOptionsEntity? GetMapServiceOptionsByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public MapServiceOptionsEntity? GetMapServiceOptionsAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MapServiceOptionsEntity> GetMapServiceOptionsFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MapServiceOptionsEntity> GetMapServiceOptionsUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MapServiceOptionsEntity> GetMapServiceOptionsOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class MaritimeIdentificationDigitsByCodeEntityIndex
    {
        readonly SortedWeakReferenceList<int, MaritimeIdentificationDigitsEntity> _entries = new SortedWeakReferenceList<int, MaritimeIdentificationDigitsEntity>( );

        public MaritimeIdentificationDigitsByCodeEntityIndex( )
        {
        }

        public void Add( MaritimeIdentificationDigitsEntity entity )
        {
            if( _entries.TryGetValue(entity.Code, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Code, new WeakReference<MaritimeIdentificationDigitsEntity>( entity, false ) );
            }
        }

        public bool GetByCode( int code, out MaritimeIdentificationDigitsEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( code, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( code );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(int key, [DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(int key, [DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(int firstKey, int lastKey, [DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
        {
            return _entries.All( result );
        }

        public MaritimeIdentificationDigitsEntity? GetMaritimeIdentificationDigitsByCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsFromCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsUntilCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsOverCode( int fromCode, int untilCode )
        {
            throw new NotImplementedException();
        }

    }
    public class MaritimeIdentificationDigitsByCountryEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, MaritimeIdentificationDigitsEntity> _entries = new SortedWeakReferenceList<Guid, MaritimeIdentificationDigitsEntity>( );
            public ById( )
            {
            }

            public void Add( MaritimeIdentificationDigitsEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<MaritimeIdentificationDigitsEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out MaritimeIdentificationDigitsEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<MaritimeIdentificationDigitsEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public MaritimeIdentificationDigitsByCountryEntityIndex( )
        {
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsCollectionByCountry( Guid country )
        {
            throw new NotImplementedException();
        }

    }

    public class MediaProxySessionByServiceAndNameEntityIndex
    {

        public class ByName
        {
            readonly SortedWeakReferenceList<string, MediaProxySessionEntity> _entries = new SortedWeakReferenceList<string, MediaProxySessionEntity>( );

            public ByName( )
            {
            }

            public void Add( MediaProxySessionEntity entity )
            {
                if( _entries.TryGetValue(entity.Name, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Name, new WeakReference<MediaProxySessionEntity>( entity, false ) );
                }
            }

            public bool GetByName( string name, out MediaProxySessionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( name, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( name );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<MediaProxySessionEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<MediaProxySessionEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<MediaProxySessionEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<MediaProxySessionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByName> _entries = new SortedListEx<Guid, ByName>( );
        public List<MediaProxySessionEntity> GetMediaProxySessionCollectionByService( Guid service )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionEntity? GetMediaProxySessionByServiceAndName( Guid service, string name )
        {
            throw new NotImplementedException();
        }

    }
    public class MediaProxySessionFileByProxySessionAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, MediaProxySessionFileEntity> _entries = new SortedWeakReferenceList<DateTime, MediaProxySessionFileEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( MediaProxySessionFileEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<MediaProxySessionFileEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out MediaProxySessionFileEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<MediaProxySessionFileEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<MediaProxySessionFileEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<MediaProxySessionFileEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<MediaProxySessionFileEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileCollectionByProxySession( Guid proxySession )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionFileEntity? GetMediaProxySessionFileByProxySessionAndTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionFileEntity? GetMediaProxySessionFileByProxySessionAtTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileByProxySessionFromTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileByProxySessionUntilTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileByProxySessionOverTimestamp( Guid proxySession, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class MediaProxySessionOptionsByProxySessionAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, MediaProxySessionOptionsEntity> _entries = new SortedWeakReferenceList<DateTime, MediaProxySessionOptionsEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( MediaProxySessionOptionsEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<MediaProxySessionOptionsEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out MediaProxySessionOptionsEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<MediaProxySessionOptionsEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<MediaProxySessionOptionsEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<MediaProxySessionOptionsEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<MediaProxySessionOptionsEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsCollectionByProxySession( Guid proxySession )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionOptionsEntity? GetMediaProxySessionOptionsByProxySessionAndTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public MediaProxySessionOptionsEntity? GetMediaProxySessionOptionsByProxySessionAtTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsByProxySessionFromTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsByProxySessionUntilTimestamp( Guid proxySession, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsByProxySessionOverTimestamp( Guid proxySession, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class MediaServiceOptionsByMediaServiceAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, MediaServiceOptionsEntity> _entries = new SortedWeakReferenceList<DateTime, MediaServiceOptionsEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( MediaServiceOptionsEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<MediaServiceOptionsEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out MediaServiceOptionsEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<MediaServiceOptionsEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<MediaServiceOptionsEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<MediaServiceOptionsEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<MediaServiceOptionsEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsCollectionByMediaService( Guid mediaService )
        {
            throw new NotImplementedException();
        }

        public MediaServiceOptionsEntity? GetMediaServiceOptionsByMediaServiceAndTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public MediaServiceOptionsEntity? GetMediaServiceOptionsByMediaServiceAtTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsByMediaServiceFromTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsByMediaServiceUntilTimestamp( Guid mediaService, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsByMediaServiceOverTimestamp( Guid mediaService, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class NamespaceElementByNamespaceAndNameEntityIndex
    {

        public class ByName
        {
            readonly SortedWeakReferenceList<string, NamespaceElementEntity> _entries = new SortedWeakReferenceList<string, NamespaceElementEntity>( );

            public ByName( )
            {
            }

            public void Add( NamespaceElementEntity entity )
            {
                if( _entries.TryGetValue(entity.Name, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Name, new WeakReference<NamespaceElementEntity>( entity, false ) );
                }
            }

            public bool GetByName( string name, out NamespaceElementEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( name, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( name );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<NamespaceElementEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<NamespaceElementEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<NamespaceElementEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<NamespaceElementEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByName> _entries = new SortedListEx<Guid, ByName>( );
        public List<NamespaceElementEntity> GetNamespaceElementCollectionByNamespace( Guid namespace__ )
        {
            throw new NotImplementedException();
        }

        public NamespaceElementEntity? GetNamespaceElementByNamespaceAndName( Guid namespace__, string name )
        {
            throw new NotImplementedException();
        }

    }
    public class OilSpillByOilSpillDetectorAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<OilSpillEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public OilSpillByOilSpillDetectorAndTimestampEntityIndex( )
        {
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public OilSpillByTimestampEntityIndex( )
        {
        }

        public List<OilSpillEntity> GetOilSpillCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorCommandEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorCommandEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public OilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex( )
        {
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorCommandEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorCommandEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public OilSpillDetectorCommandByTimestampEntityIndex( )
        {
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorCommandEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorCommandEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public OilSpillDetectorCommandByReplyEntityIndex( )
        {
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorCommandByReplyIsNullEntityIndex
    {
    }

    public class OilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public OilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex( )
        {
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public OilSpillDetectorCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, OilSpillDetectorCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorCommandReplyEntity>( );

        public OilSpillDetectorCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( OilSpillDetectorCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<OilSpillDetectorCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out OilSpillDetectorCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<OilSpillDetectorCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public OilSpillDetectorCommandReplyEntity? GetOilSpillDetectorCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class OilSpillDetectorCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class OilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, OilSpillDetectorConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, OilSpillDetectorConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( OilSpillDetectorConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<OilSpillDetectorConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out OilSpillDetectorConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            throw new NotImplementedException();
        }

        public OilSpillDetectorConfigurationEntity? GetOilSpillDetectorConfigurationByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public OilSpillDetectorConfigurationEntity? GetOilSpillDetectorConfigurationByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class OilSpillDetectorConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public OilSpillDetectorConfigurationByTimestampEntityIndex( )
        {
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorConfigurationByTargetMMSIEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, OilSpillDetectorConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, OilSpillDetectorConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( OilSpillDetectorConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<OilSpillDetectorConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out OilSpillDetectorConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<OilSpillDetectorConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public OilSpillDetectorConfigurationByTargetMMSIEntityIndex( )
        {
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByTargetMMSI( Guid? targetMMSI )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByTargetMMSIIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class OilSpillDetectorConfigurationByTargetMMSIIsNullEntityIndex
    {
    }

    public class Position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, Position2DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, Position2DTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( Position2DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<Position2DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out Position2DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Position2DTimeseriesValueEntity? GetPosition2DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Position2DTimeseriesValueEntity? GetPosition2DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class Position2DTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Position2DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, Position2DTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( Position2DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Position2DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Position2DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Position2DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public Position2DTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class Position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, Position3DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, Position3DTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( Position3DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<Position3DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out Position3DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public Position3DTimeseriesValueEntity? GetPosition3DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public Position3DTimeseriesValueEntity? GetPosition3DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class Position3DTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Position3DTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, Position3DTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( Position3DTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Position3DTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Position3DTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Position3DTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public Position3DTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class PropertyByElementAndDefinitionEntityIndex
    {

        public class ByDefinition
        {
            readonly SortedWeakReferenceList<Guid, PropertyEntity> _entries = new SortedWeakReferenceList<Guid, PropertyEntity>( );

            public ByDefinition( )
            {
            }

            public void Add( PropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.DefinitionId, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.DefinitionId, new WeakReference<PropertyEntity>( entity, false ) );
                }
            }

            public bool GetByDefinitionId( Guid definition, out PropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( definition, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( definition );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid key, [DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(Guid key, [DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByDefinition> _entries = new SortedListEx<Guid, ByDefinition>( );
        public List<PropertyEntity> GetPropertyCollectionByElement( Guid element )
        {
            throw new NotImplementedException();
        }

        public PropertyEntity? GetPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            throw new NotImplementedException();
        }

    }
    public class PropertyByDefinitionEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, PropertyEntity> _entries = new SortedWeakReferenceList<Guid, PropertyEntity>( );
            public ById( )
            {
            }

            public void Add( PropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<PropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out PropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<PropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public PropertyByDefinitionEntityIndex( )
        {
        }

        public List<PropertyEntity> GetPropertyCollectionByDefinition( Guid definition )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferencePropertyByValueEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferencePropertyEntity> _entries = new SortedWeakReferenceList<Guid, ReferencePropertyEntity>( );
            public ById( )
            {
            }

            public void Add( ReferencePropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferencePropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferencePropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferencePropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferencePropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferencePropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferencePropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ReferencePropertyByValueEntityIndex( )
        {
        }

        public List<ReferencePropertyEntity> GetReferencePropertyCollectionByValue( Guid? value__ )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyEntity> GetReferencePropertyCollectionByValueIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferencePropertyByValueIsNullEntityIndex
    {
    }

    public class BinaryTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, BinaryTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, BinaryTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( BinaryTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<BinaryTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out BinaryTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<BinaryTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<BinaryTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<BinaryTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<BinaryTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public BinaryTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<BinaryTimeseriesPropertyEntity> GetBinaryTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesPropertyEntity> GetBinaryTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class BinaryTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class BooleanTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, BooleanTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, BooleanTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( BooleanTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<BooleanTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out BooleanTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<BooleanTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<BooleanTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<BooleanTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<BooleanTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public BooleanTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<BooleanTimeseriesPropertyEntity> GetBooleanTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesPropertyEntity> GetBooleanTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class BooleanTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class ByteTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ByteTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, ByteTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( ByteTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ByteTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ByteTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ByteTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ByteTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ByteTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ByteTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ByteTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<ByteTimeseriesPropertyEntity> GetByteTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesPropertyEntity> GetByteTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ByteTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class DateTimeTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, DateTimeTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, DateTimeTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( DateTimeTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<DateTimeTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out DateTimeTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<DateTimeTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<DateTimeTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<DateTimeTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<DateTimeTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public DateTimeTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<DateTimeTimeseriesPropertyEntity> GetDateTimeTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesPropertyEntity> GetDateTimeTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class DateTimeTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class DoubleTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, DoubleTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, DoubleTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( DoubleTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<DoubleTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out DoubleTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<DoubleTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<DoubleTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<DoubleTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<DoubleTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public DoubleTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<DoubleTimeseriesPropertyEntity> GetDoubleTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesPropertyEntity> GetDoubleTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class DoubleTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class GuidTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, GuidTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, GuidTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( GuidTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<GuidTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out GuidTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<GuidTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<GuidTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<GuidTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<GuidTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public GuidTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<GuidTimeseriesPropertyEntity> GetGuidTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesPropertyEntity> GetGuidTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class GuidTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class Int16TimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Int16TimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, Int16TimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( Int16TimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Int16TimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Int16TimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Int16TimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Int16TimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Int16TimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Int16TimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public Int16TimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<Int16TimeseriesPropertyEntity> GetInt16TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesPropertyEntity> GetInt16TimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class Int16TimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class Int32TimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Int32TimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, Int32TimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( Int32TimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Int32TimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Int32TimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Int32TimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Int32TimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Int32TimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Int32TimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public Int32TimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<Int32TimeseriesPropertyEntity> GetInt32TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesPropertyEntity> GetInt32TimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class Int32TimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class Int64TimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, Int64TimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, Int64TimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( Int64TimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<Int64TimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out Int64TimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<Int64TimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<Int64TimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<Int64TimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<Int64TimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public Int64TimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<Int64TimeseriesPropertyEntity> GetInt64TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesPropertyEntity> GetInt64TimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class Int64TimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class ReferenceTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferenceTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, ReferenceTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( ReferenceTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferenceTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferenceTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferenceTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferenceTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferenceTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferenceTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ReferenceTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<ReferenceTimeseriesPropertyEntity> GetReferenceTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesPropertyEntity> GetReferenceTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferenceTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class SByteTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SByteTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, SByteTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( SByteTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SByteTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SByteTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SByteTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SByteTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SByteTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SByteTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public SByteTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<SByteTimeseriesPropertyEntity> GetSByteTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesPropertyEntity> GetSByteTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class SByteTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class SingleTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SingleTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, SingleTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( SingleTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SingleTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SingleTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SingleTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SingleTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SingleTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SingleTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public SingleTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<SingleTimeseriesPropertyEntity> GetSingleTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesPropertyEntity> GetSingleTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class SingleTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class StringTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, StringTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, StringTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( StringTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<StringTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out StringTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<StringTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<StringTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<StringTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<StringTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public StringTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<StringTimeseriesPropertyEntity> GetStringTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesPropertyEntity> GetStringTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class StringTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class TimeSpanTimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TimeSpanTimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, TimeSpanTimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( TimeSpanTimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TimeSpanTimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TimeSpanTimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TimeSpanTimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TimeSpanTimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TimeSpanTimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TimeSpanTimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public TimeSpanTimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<TimeSpanTimeseriesPropertyEntity> GetTimeSpanTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesPropertyEntity> GetTimeSpanTimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class TimeSpanTimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class UInt16TimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, UInt16TimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, UInt16TimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( UInt16TimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<UInt16TimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out UInt16TimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<UInt16TimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<UInt16TimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<UInt16TimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<UInt16TimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public UInt16TimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<UInt16TimeseriesPropertyEntity> GetUInt16TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesPropertyEntity> GetUInt16TimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class UInt16TimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class UInt32TimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, UInt32TimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, UInt32TimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( UInt32TimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<UInt32TimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out UInt32TimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<UInt32TimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<UInt32TimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<UInt32TimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<UInt32TimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public UInt32TimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<UInt32TimeseriesPropertyEntity> GetUInt32TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesPropertyEntity> GetUInt32TimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class UInt32TimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class UInt64TimeseriesPropertyByTimeseriesEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, UInt64TimeseriesPropertyEntity> _entries = new SortedWeakReferenceList<Guid, UInt64TimeseriesPropertyEntity>( );
            public ById( )
            {
            }

            public void Add( UInt64TimeseriesPropertyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<UInt64TimeseriesPropertyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out UInt64TimeseriesPropertyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<UInt64TimeseriesPropertyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<UInt64TimeseriesPropertyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<UInt64TimeseriesPropertyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<UInt64TimeseriesPropertyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public UInt64TimeseriesPropertyByTimeseriesEntityIndex( )
        {
        }

        public List<UInt64TimeseriesPropertyEntity> GetUInt64TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesPropertyEntity> GetUInt64TimeseriesPropertyCollectionByTimeseriesIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class UInt64TimeseriesPropertyByTimeseriesIsNullEntityIndex
    {
    }

    public class PropertyDefinitionByElementTypeAndNameEntityIndex
    {

        public class ByName
        {
            readonly SortedWeakReferenceList<string, PropertyDefinitionEntity> _entries = new SortedWeakReferenceList<string, PropertyDefinitionEntity>( );

            public ByName( )
            {
            }

            public void Add( PropertyDefinitionEntity entity )
            {
                if( _entries.TryGetValue(entity.Name, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Name, new WeakReference<PropertyDefinitionEntity>( entity, false ) );
                }
            }

            public bool GetByName( string name, out PropertyDefinitionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( name, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( name );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<PropertyDefinitionEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<PropertyDefinitionEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<PropertyDefinitionEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<PropertyDefinitionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByName> _entries = new SortedListEx<Guid, ByName>( );
        public List<PropertyDefinitionEntity> GetPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            throw new NotImplementedException();
        }

        public PropertyDefinitionEntity? GetPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            throw new NotImplementedException();
        }

    }
    public class ReferencePropertyDefinitionByDefaultValueEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferencePropertyDefinitionEntity> _entries = new SortedWeakReferenceList<Guid, ReferencePropertyDefinitionEntity>( );
            public ById( )
            {
            }

            public void Add( ReferencePropertyDefinitionEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferencePropertyDefinitionEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferencePropertyDefinitionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ReferencePropertyDefinitionByDefaultValueEntityIndex( )
        {
        }

        public List<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByDefaultValue( Guid? defaultValue )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByDefaultValueIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferencePropertyDefinitionByDefaultValueIsNullEntityIndex
    {
    }

    public class ReferencePropertyDefinitionByReferencedElementTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferencePropertyDefinitionEntity> _entries = new SortedWeakReferenceList<Guid, ReferencePropertyDefinitionEntity>( );
            public ById( )
            {
            }

            public void Add( ReferencePropertyDefinitionEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferencePropertyDefinitionEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferencePropertyDefinitionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferencePropertyDefinitionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ReferencePropertyDefinitionByReferencedElementTypeEntityIndex( )
        {
        }

        public List<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByReferencedElementType( Guid? referencedElementType )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByReferencedElementTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferencePropertyDefinitionByReferencedElementTypeIsNullEntityIndex
    {
    }

    public class ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferenceTimeseriesPropertyDefinitionEntity> _entries = new SortedWeakReferenceList<Guid, ReferenceTimeseriesPropertyDefinitionEntity>( );
            public ById( )
            {
            }

            public void Add( ReferenceTimeseriesPropertyDefinitionEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferenceTimeseriesPropertyDefinitionEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferenceTimeseriesPropertyDefinitionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferenceTimeseriesPropertyDefinitionEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferenceTimeseriesPropertyDefinitionEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferenceTimeseriesPropertyDefinitionEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferenceTimeseriesPropertyDefinitionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeEntityIndex( )
        {
        }

        public List<ReferenceTimeseriesPropertyDefinitionEntity> GetReferenceTimeseriesPropertyDefinitionCollectionByReferencedElementType( Guid? referencedElementType )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesPropertyDefinitionEntity> GetReferenceTimeseriesPropertyDefinitionCollectionByReferencedElementTypeIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeIsNullEntityIndex
    {
    }

    public class RadarAlarmStatusByRadarAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadarAlarmStatusEntity> _entries = new SortedWeakReferenceList<DateTime, RadarAlarmStatusEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadarAlarmStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadarAlarmStatusEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadarAlarmStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarAlarmStatusEntity? GetRadarAlarmStatusByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarAlarmStatusEntity? GetRadarAlarmStatusByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadarAlarmStatusByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarAlarmStatusEntity> _entries = new SortedWeakReferenceList<Guid, RadarAlarmStatusEntity>( );
            public ById( )
            {
            }

            public void Add( RadarAlarmStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarAlarmStatusEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarAlarmStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarAlarmStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarAlarmStatusByTimestampEntityIndex( )
        {
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarCommandByRadarAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadarCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadarCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public RadarCommandByRadarAndTimestampEntityIndex( )
        {
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadarCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadarCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarCommandByTimestampEntityIndex( )
        {
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadarCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadarCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public RadarCommandByReplyEntityIndex( )
        {
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarCommandByReplyIsNullEntityIndex
    {
    }

    public class RadarCommandReplyByRadarAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadarCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( RadarCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public RadarCommandReplyByRadarAndTimestampEntityIndex( )
        {
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadarCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( RadarCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, RadarCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadarCommandReplyEntity>( );

        public RadarCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( RadarCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<RadarCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out RadarCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<RadarCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<RadarCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<RadarCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<RadarCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public RadarCommandReplyEntity? GetRadarCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class RadarCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class RadarConfigurationByRadarAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadarConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, RadarConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadarConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadarConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadarConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarConfigurationEntity? GetRadarConfigurationByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarConfigurationEntity? GetRadarConfigurationByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadarConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, RadarConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( RadarConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarConfigurationByTimestampEntityIndex( )
        {
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarImageByRadarAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadarImageEntity> _entries = new SortedWeakReferenceList<DateTime, RadarImageEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadarImageEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadarImageEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadarImageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<RadarImageEntity> GetRadarImageCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarImageEntity? GetRadarImageByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarImageEntity? GetRadarImageByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadarImageByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarImageEntity> _entries = new SortedWeakReferenceList<Guid, RadarImageEntity>( );
            public ById( )
            {
            }

            public void Add( RadarImageEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarImageEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarImageEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarImageEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarImageByTimestampEntityIndex( )
        {
        }

        public List<RadarImageEntity> GetRadarImageCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarRawTrackTableByRadarAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadarRawTrackTableEntity> _entries = new SortedWeakReferenceList<DateTime, RadarRawTrackTableEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadarRawTrackTableEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadarRawTrackTableEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadarRawTrackTableEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarRawTrackTableEntity? GetRadarRawTrackTableByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarRawTrackTableEntity? GetRadarRawTrackTableByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadarRawTrackTableByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarRawTrackTableEntity> _entries = new SortedWeakReferenceList<Guid, RadarRawTrackTableEntity>( );
            public ById( )
            {
            }

            public void Add( RadarRawTrackTableEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarRawTrackTableEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarRawTrackTableEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarRawTrackTableEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarRawTrackTableByTimestampEntityIndex( )
        {
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadarStatusByRadarAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadarStatusEntity> _entries = new SortedWeakReferenceList<DateTime, RadarStatusEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadarStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadarStatusEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadarStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<RadarStatusEntity> GetRadarStatusCollectionByRadar( Guid radar )
        {
            throw new NotImplementedException();
        }

        public RadarStatusEntity? GetRadarStatusByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadarStatusEntity? GetRadarStatusByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadarStatusByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadarStatusEntity> _entries = new SortedWeakReferenceList<Guid, RadarStatusEntity>( );
            public ById( )
            {
            }

            public void Add( RadarStatusEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadarStatusEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadarStatusEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadarStatusEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadarStatusByTimestampEntityIndex( )
        {
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadioCommandByRadioAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadioCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadioCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadioCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadioCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadioCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public RadioCommandByRadioAndTimestampEntityIndex( )
        {
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadio( Guid radio )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadioCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadioCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadioCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadioCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadioCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadioCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadioCommandByTimestampEntityIndex( )
        {
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadioCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadioCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadioCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadioCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadioCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadioCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public RadioCommandByReplyEntityIndex( )
        {
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class RadioCommandByReplyIsNullEntityIndex
    {
    }

    public class RadioCommandReplyByRadioAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadioCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadioCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( RadioCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadioCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadioCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public RadioCommandReplyByRadioAndTimestampEntityIndex( )
        {
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadio( Guid radio )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadioCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadioCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadioCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( RadioCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadioCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadioCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadioCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadioCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadioCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, RadioCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadioCommandReplyEntity>( );

        public RadioCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( RadioCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<RadioCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out RadioCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<RadioCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<RadioCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<RadioCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<RadioCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public RadioCommandReplyEntity? GetRadioCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class RadioCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class RadioConfigurationByRadioAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadioConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, RadioConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadioConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadioConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadioConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionByRadio( Guid radio )
        {
            throw new NotImplementedException();
        }

        public RadioConfigurationEntity? GetRadioConfigurationByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadioConfigurationEntity? GetRadioConfigurationByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadioConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadioConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, RadioConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( RadioConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadioConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadioConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadioConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadioConfigurationByTimestampEntityIndex( )
        {
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeCommandByRadomeAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadomeCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public RadomeCommandByRadomeAndTimestampEntityIndex( )
        {
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadome( Guid radome )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadomeCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadomeCommandByTimestampEntityIndex( )
        {
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeCommandEntity> _entries = new SortedWeakReferenceList<Guid, RadomeCommandEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public RadomeCommandByReplyEntityIndex( )
        {
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeCommandByReplyIsNullEntityIndex
    {
    }

    public class RadomeCommandReplyByRadomeAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadomeCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public RadomeCommandReplyByRadomeAndTimestampEntityIndex( )
        {
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadome( Guid radome )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadomeCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadomeCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class RadomeCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, RadomeCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, RadomeCommandReplyEntity>( );

        public RadomeCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( RadomeCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<RadomeCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out RadomeCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<RadomeCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<RadomeCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<RadomeCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<RadomeCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public RadomeCommandReplyEntity? GetRadomeCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class RadomeCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class RadomeConfigurationByRadomeAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, RadomeConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, RadomeConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( RadomeConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<RadomeConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out RadomeConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionByRadome( Guid radome )
        {
            throw new NotImplementedException();
        }

        public RadomeConfigurationEntity? GetRadomeConfigurationByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public RadomeConfigurationEntity? GetRadomeConfigurationByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class RadomeConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, RadomeConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, RadomeConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( RadomeConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<RadomeConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out RadomeConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<RadomeConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public RadomeConfigurationByTimestampEntityIndex( )
        {
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferenceTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ReferenceTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, ReferenceTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ReferenceTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ReferenceTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ReferenceTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public ReferenceTimeseriesValueEntity? GetReferenceTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ReferenceTimeseriesValueEntity? GetReferenceTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ReferenceTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferenceTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, ReferenceTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( ReferenceTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferenceTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferenceTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ReferenceTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class ReferenceTimeseriesValueByValueEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ReferenceTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, ReferenceTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( ReferenceTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ReferenceTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ReferenceTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ReferenceTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ReferenceTimeseriesValueByValueEntityIndex( )
        {
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionByValue( Guid value__ )
        {
            throw new NotImplementedException();
        }

    }

    public class SByteTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, SByteTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, SByteTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( SByteTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<SByteTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out SByteTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public SByteTimeseriesValueEntity? GetSByteTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public SByteTimeseriesValueEntity? GetSByteTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class SByteTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SByteTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, SByteTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( SByteTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SByteTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SByteTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SByteTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public SByteTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class SecurityDomainByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, SecurityDomainEntity> _entries = new SortedWeakReferenceList<string, SecurityDomainEntity>( );

        public SecurityDomainByNameEntityIndex( )
        {
        }

        public void Add( SecurityDomainEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<SecurityDomainEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out SecurityDomainEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<SecurityDomainEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<SecurityDomainEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<SecurityDomainEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<SecurityDomainEntity> result )
        {
            return _entries.All( result );
        }

        public SecurityDomainEntity? GetSecurityDomainByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class SecurityIdentifierByDomainAndIdentityEntityIndex
    {

        public class ByIdentity
        {
            readonly SortedWeakReferenceList<string, SecurityIdentifierEntity> _entries = new SortedWeakReferenceList<string, SecurityIdentifierEntity>( );

            public ByIdentity( )
            {
            }

            public void Add( SecurityIdentifierEntity entity )
            {
                if( _entries.TryGetValue(entity.Identity, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Identity, new WeakReference<SecurityIdentifierEntity>( entity, false ) );
                }
            }

            public bool GetByIdentity( string identity, out SecurityIdentifierEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( identity, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( identity );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<SecurityIdentifierEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<SecurityIdentifierEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<SecurityIdentifierEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityIdentifierEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByIdentity> _entries = new SortedListEx<Guid, ByIdentity>( );
        public List<SecurityIdentifierEntity> GetSecurityIdentifierCollectionByDomain( Guid domain )
        {
            throw new NotImplementedException();
        }

        public SecurityIdentifierEntity? GetSecurityIdentifierByDomainAndIdentity( Guid domain, string identity )
        {
            throw new NotImplementedException();
        }

    }
    public class SecurityRoleByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, SecurityRoleEntity> _entries = new SortedWeakReferenceList<string, SecurityRoleEntity>( );

        public SecurityRoleByNameEntityIndex( )
        {
        }

        public void Add( SecurityRoleEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<SecurityRoleEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out SecurityRoleEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<SecurityRoleEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<SecurityRoleEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<SecurityRoleEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<SecurityRoleEntity> result )
        {
            return _entries.All( result );
        }

        public SecurityRoleEntity? GetSecurityRoleByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class SecurityIdentifierRoleLinkByMemberAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStart( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SecurityIdentifierRoleLinkEntity> _entries = new SortedWeakReferenceList<Guid, SecurityIdentifierRoleLinkEntity>( );
            public ById( )
            {
            }

            public void Add( SecurityIdentifierRoleLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SecurityIdentifierRoleLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SecurityIdentifierRoleLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );

        public SecurityIdentifierRoleLinkByMemberAndStartEntityIndex( )
        {
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMember( Guid member )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberAndStart( Guid member, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberAtStart( Guid member, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberFromStart( Guid member, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberUntilStart( Guid member, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberOverStart( Guid member, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class SecurityIdentifierRoleLinkByRoleAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStart( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SecurityIdentifierRoleLinkEntity> _entries = new SortedWeakReferenceList<Guid, SecurityIdentifierRoleLinkEntity>( );
            public ById( )
            {
            }

            public void Add( SecurityIdentifierRoleLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SecurityIdentifierRoleLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SecurityIdentifierRoleLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );

        public SecurityIdentifierRoleLinkByRoleAndStartEntityIndex( )
        {
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRole( Guid role )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleAndStart( Guid role, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleAtStart( Guid role, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleFromStart( Guid role, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleUntilStart( Guid role, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleOverStart( Guid role, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class SecurityIdentifierRoleLinkByStartEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SecurityIdentifierRoleLinkEntity> _entries = new SortedWeakReferenceList<Guid, SecurityIdentifierRoleLinkEntity>( );
            public ById( )
            {
            }

            public void Add( SecurityIdentifierRoleLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SecurityIdentifierRoleLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SecurityIdentifierRoleLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityIdentifierRoleLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public SecurityIdentifierRoleLinkByStartEntityIndex( )
        {
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class SecurityLoginSessionByLoginAndFromTimeEntityIndex
    {
        public class ByFromTime
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByFromTime( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SecurityLoginSessionEntity> _entries = new SortedWeakReferenceList<Guid, SecurityLoginSessionEntity>( );
            public ById( )
            {
            }

            public void Add( SecurityLoginSessionEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SecurityLoginSessionEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SecurityLoginSessionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByFromTime> _entries = new SortedListEx<Guid, ByFromTime>( );

        public SecurityLoginSessionByLoginAndFromTimeEntityIndex( )
        {
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLogin( Guid login )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginAndFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginAtFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginFromFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginUntilFromTime( Guid login, DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginOverFromTime( Guid login, DateTime fromFromTime, DateTime untilFromTime )
        {
            throw new NotImplementedException();
        }

    }

    public class SecurityLoginSessionByFromTimeEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SecurityLoginSessionEntity> _entries = new SortedWeakReferenceList<Guid, SecurityLoginSessionEntity>( );
            public ById( )
            {
            }

            public void Add( SecurityLoginSessionEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SecurityLoginSessionEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SecurityLoginSessionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityLoginSessionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public SecurityLoginSessionByFromTimeEntityIndex( )
        {
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByFromTime( DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionAtFromTime( DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionFromFromTime( DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionUntilFromTime( DateTime fromTime )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionOverFromTime( DateTime fromFromTime, DateTime untilFromTime )
        {
            throw new NotImplementedException();
        }

    }

    public class SecurityPermissionByIdentifierTypeCodeAndTimestampEntityIndex
    {
        public class ByTypeCode
        {
            readonly SortedListEx<int, ByTimestamp> _entries = new SortedListEx<int, ByTimestamp>( );
            List<int> _emptyKeys = new List<int>( );

            public ByTypeCode( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<SecurityPermissionEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, SecurityPermissionEntity> _entries = new SortedWeakReferenceList<DateTime, SecurityPermissionEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( SecurityPermissionEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<SecurityPermissionEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out SecurityPermissionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTypeCode> _entries = new SortedListEx<Guid, ByTypeCode>( );
        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifier( Guid identifier )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierAndTypeCode( Guid identifier, int typeCode )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierFromTypeCode( Guid identifier, int typeCode )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierUntilTypeCode( Guid identifier, int typeCode )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierOverTypeCode( Guid identifier, int fromTypeCode, int untilTypeCode )
        {
            throw new NotImplementedException();
        }

        public SecurityPermissionEntity? GetSecurityPermissionByIdentifierTypeCodeAndTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public SecurityPermissionEntity? GetSecurityPermissionByIdentifierTypeCodeAtTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionByIdentifierTypeCodeFromTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionByIdentifierTypeCodeUntilTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionByIdentifierTypeCodeOverTimestamp( Guid identifier, int typeCode, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class SecurityPermissionByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SecurityPermissionEntity> _entries = new SortedWeakReferenceList<Guid, SecurityPermissionEntity>( );
            public ById( )
            {
            }

            public void Add( SecurityPermissionEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SecurityPermissionEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SecurityPermissionEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SecurityPermissionEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public SecurityPermissionByTimestampEntityIndex( )
        {
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class SingleTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, SingleTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, SingleTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( SingleTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<SingleTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out SingleTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public SingleTimeseriesValueEntity? GetSingleTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public SingleTimeseriesValueEntity? GetSingleTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class SingleTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, SingleTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, SingleTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( SingleTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<SingleTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out SingleTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<SingleTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public SingleTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class StringTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, StringTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, StringTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( StringTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<StringTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out StringTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public StringTimeseriesValueEntity? GetStringTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public StringTimeseriesValueEntity? GetStringTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class StringTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, StringTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, StringTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( StringTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<StringTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out StringTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<StringTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public StringTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class TimeseriesCatalogElementByCatalogAndNameEntityIndex
    {

        public class ByName
        {
            readonly SortedWeakReferenceList<string, TimeseriesCatalogElementEntity> _entries = new SortedWeakReferenceList<string, TimeseriesCatalogElementEntity>( );

            public ByName( )
            {
            }

            public void Add( TimeseriesCatalogElementEntity entity )
            {
                if( _entries.TryGetValue(entity.Name, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Name, new WeakReference<TimeseriesCatalogElementEntity>( entity, false ) );
                }
            }

            public bool GetByName( string name, out TimeseriesCatalogElementEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( name, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( name );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<TimeseriesCatalogElementEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<TimeseriesCatalogElementEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<TimeseriesCatalogElementEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TimeseriesCatalogElementEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByName> _entries = new SortedListEx<Guid, ByName>( );
        public List<TimeseriesCatalogElementEntity> GetTimeseriesCatalogElementCollectionByCatalog( Guid? catalog )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesCatalogElementEntity> GetTimeseriesCatalogElementCollectionByCatalogIsNull(  )
        {
            throw new NotImplementedException();
        }

        public TimeseriesCatalogElementEntity? GetTimeseriesCatalogElementByCatalogAndName( Guid? catalog, string name )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesCatalogElementEntity> GetTimeseriesCatalogElementCollectionByCatalogIsNullAndName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class TimeseriesCatalogElementByCatalogIsNullAndNameEntityIndex
    {
    }

    public class AisAidToNavigationOffPositionTimeseriesByAidToNavigationEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, AisAidToNavigationOffPositionTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, AisAidToNavigationOffPositionTimeseriesEntity>( );
            public ById( )
            {
            }

            public void Add( AisAidToNavigationOffPositionTimeseriesEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<AisAidToNavigationOffPositionTimeseriesEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out AisAidToNavigationOffPositionTimeseriesEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<AisAidToNavigationOffPositionTimeseriesEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<AisAidToNavigationOffPositionTimeseriesEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<AisAidToNavigationOffPositionTimeseriesEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<AisAidToNavigationOffPositionTimeseriesEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public AisAidToNavigationOffPositionTimeseriesByAidToNavigationEntityIndex( )
        {
        }

        public List<AisAidToNavigationOffPositionTimeseriesEntity> GetAisAidToNavigationOffPositionTimeseriesCollectionByAidToNavigation( Guid? aidToNavigation )
        {
            throw new NotImplementedException();
        }

        public List<AisAidToNavigationOffPositionTimeseriesEntity> GetAisAidToNavigationOffPositionTimeseriesCollectionByAidToNavigationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class AisAidToNavigationOffPositionTimeseriesByAidToNavigationIsNullEntityIndex
    {
    }

    public class GyroCourseTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroCourseTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroCourseTimeseriesEntity>( );

        public GyroCourseTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroCourseTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroCourseTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroCourseTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroCourseTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroCourseTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroCourseTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroCourseTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroCourseTimeseriesEntity? GetGyroCourseTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroCourseTimeseriesEntity> GetGyroCourseTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroCourseTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class GyroHeadingMagneticNorthTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroHeadingMagneticNorthTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroHeadingMagneticNorthTimeseriesEntity>( );

        public GyroHeadingMagneticNorthTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroHeadingMagneticNorthTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroHeadingMagneticNorthTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroHeadingMagneticNorthTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroHeadingMagneticNorthTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroHeadingMagneticNorthTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroHeadingMagneticNorthTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroHeadingMagneticNorthTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroHeadingMagneticNorthTimeseriesEntity? GetGyroHeadingMagneticNorthTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroHeadingMagneticNorthTimeseriesEntity> GetGyroHeadingMagneticNorthTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroHeadingMagneticNorthTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class GyroHeadingTrueNorthTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroHeadingTrueNorthTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroHeadingTrueNorthTimeseriesEntity>( );

        public GyroHeadingTrueNorthTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroHeadingTrueNorthTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroHeadingTrueNorthTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroHeadingTrueNorthTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroHeadingTrueNorthTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroHeadingTrueNorthTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroHeadingTrueNorthTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroHeadingTrueNorthTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroHeadingTrueNorthTimeseriesEntity? GetGyroHeadingTrueNorthTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroHeadingTrueNorthTimeseriesEntity> GetGyroHeadingTrueNorthTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroHeadingTrueNorthTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class GyroPitchTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroPitchTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroPitchTimeseriesEntity>( );

        public GyroPitchTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroPitchTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroPitchTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroPitchTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroPitchTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroPitchTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroPitchTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroPitchTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroPitchTimeseriesEntity? GetGyroPitchTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroPitchTimeseriesEntity> GetGyroPitchTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroPitchTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class GyroRateOfTurnTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroRateOfTurnTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroRateOfTurnTimeseriesEntity>( );

        public GyroRateOfTurnTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroRateOfTurnTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroRateOfTurnTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroRateOfTurnTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroRateOfTurnTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroRateOfTurnTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroRateOfTurnTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroRateOfTurnTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroRateOfTurnTimeseriesEntity? GetGyroRateOfTurnTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroRateOfTurnTimeseriesEntity> GetGyroRateOfTurnTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroRateOfTurnTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class GyroRollTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroRollTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroRollTimeseriesEntity>( );

        public GyroRollTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroRollTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroRollTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroRollTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroRollTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroRollTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroRollTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroRollTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroRollTimeseriesEntity? GetGyroRollTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroRollTimeseriesEntity> GetGyroRollTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroRollTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class GyroSpeedTimeseriesByGyroDeviceEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, GyroSpeedTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, GyroSpeedTimeseriesEntity>( );

        public GyroSpeedTimeseriesByGyroDeviceEntityIndex( )
        {
        }

        public void Add( GyroSpeedTimeseriesEntity entity )
        {
            if ( entity.GyroDeviceId is Guid gyroDevice )
            {
                if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( gyroDevice, new WeakReference<GyroSpeedTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.GyroDeviceId is null.", nameof( entity ) );
            }
        }

        public bool GetByGyroDeviceId( Guid gyroDevice, out GyroSpeedTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( gyroDevice, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( gyroDevice );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<GyroSpeedTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<GyroSpeedTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<GyroSpeedTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<GyroSpeedTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public GyroSpeedTimeseriesEntity? GetGyroSpeedTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            throw new NotImplementedException();
        }

        public List<GyroSpeedTimeseriesEntity> GetGyroSpeedTimeseriesCollectionByGyroDeviceIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class GyroSpeedTimeseriesByGyroDeviceIsNullEntityIndex
    {
    }

    public class WeatherStationAbsoluteHumidityTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationAbsoluteHumidityTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationAbsoluteHumidityTimeseriesEntity>( );

        public WeatherStationAbsoluteHumidityTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationAbsoluteHumidityTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationAbsoluteHumidityTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationAbsoluteHumidityTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationAbsoluteHumidityTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationAbsoluteHumidityTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationAbsoluteHumidityTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationAbsoluteHumidityTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationAbsoluteHumidityTimeseriesEntity? GetWeatherStationAbsoluteHumidityTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationAbsoluteHumidityTimeseriesEntity> GetWeatherStationAbsoluteHumidityTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationAbsoluteHumidityTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationAirTemperatureTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationAirTemperatureTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationAirTemperatureTimeseriesEntity>( );

        public WeatherStationAirTemperatureTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationAirTemperatureTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationAirTemperatureTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationAirTemperatureTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationAirTemperatureTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationAirTemperatureTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationAirTemperatureTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationAirTemperatureTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationAirTemperatureTimeseriesEntity? GetWeatherStationAirTemperatureTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationAirTemperatureTimeseriesEntity> GetWeatherStationAirTemperatureTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationAirTemperatureTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationBarometricPressureTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationBarometricPressureTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationBarometricPressureTimeseriesEntity>( );

        public WeatherStationBarometricPressureTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationBarometricPressureTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationBarometricPressureTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationBarometricPressureTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationBarometricPressureTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationBarometricPressureTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationBarometricPressureTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationBarometricPressureTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationBarometricPressureTimeseriesEntity? GetWeatherStationBarometricPressureTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationBarometricPressureTimeseriesEntity> GetWeatherStationBarometricPressureTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationBarometricPressureTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationDewPointTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationDewPointTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationDewPointTimeseriesEntity>( );

        public WeatherStationDewPointTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationDewPointTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationDewPointTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationDewPointTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationDewPointTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationDewPointTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationDewPointTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationDewPointTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationDewPointTimeseriesEntity? GetWeatherStationDewPointTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationDewPointTimeseriesEntity> GetWeatherStationDewPointTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationDewPointTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationRelativeHumidityTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationRelativeHumidityTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationRelativeHumidityTimeseriesEntity>( );

        public WeatherStationRelativeHumidityTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationRelativeHumidityTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationRelativeHumidityTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationRelativeHumidityTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationRelativeHumidityTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationRelativeHumidityTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationRelativeHumidityTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationRelativeHumidityTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationRelativeHumidityTimeseriesEntity? GetWeatherStationRelativeHumidityTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationRelativeHumidityTimeseriesEntity> GetWeatherStationRelativeHumidityTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationRelativeHumidityTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationWaterTemperatureTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationWaterTemperatureTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationWaterTemperatureTimeseriesEntity>( );

        public WeatherStationWaterTemperatureTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationWaterTemperatureTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationWaterTemperatureTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationWaterTemperatureTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationWaterTemperatureTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationWaterTemperatureTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationWaterTemperatureTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationWaterTemperatureTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationWaterTemperatureTimeseriesEntity? GetWeatherStationWaterTemperatureTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationWaterTemperatureTimeseriesEntity> GetWeatherStationWaterTemperatureTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationWaterTemperatureTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationWindDirectionTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationWindDirectionTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationWindDirectionTimeseriesEntity>( );

        public WeatherStationWindDirectionTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationWindDirectionTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationWindDirectionTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationWindDirectionTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationWindDirectionTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationWindDirectionTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationWindDirectionTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationWindDirectionTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationWindDirectionTimeseriesEntity? GetWeatherStationWindDirectionTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationWindDirectionTimeseriesEntity> GetWeatherStationWindDirectionTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationWindDirectionTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class WeatherStationWindSpeedTimeseriesByWeatherStationEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationWindSpeedTimeseriesEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationWindSpeedTimeseriesEntity>( );

        public WeatherStationWindSpeedTimeseriesByWeatherStationEntityIndex( )
        {
        }

        public void Add( WeatherStationWindSpeedTimeseriesEntity entity )
        {
            if ( entity.WeatherStationId is Guid weatherStation )
            {
                if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( weatherStation, new WeakReference<WeatherStationWindSpeedTimeseriesEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.WeatherStationId is null.", nameof( entity ) );
            }
        }

        public bool GetByWeatherStationId( Guid weatherStation, out WeatherStationWindSpeedTimeseriesEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( weatherStation, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( weatherStation );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationWindSpeedTimeseriesEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationWindSpeedTimeseriesEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationWindSpeedTimeseriesEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationWindSpeedTimeseriesEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationWindSpeedTimeseriesEntity? GetWeatherStationWindSpeedTimeseriesByWeatherStation( Guid? weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationWindSpeedTimeseriesEntity> GetWeatherStationWindSpeedTimeseriesCollectionByWeatherStationIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationWindSpeedTimeseriesByWeatherStationIsNullEntityIndex
    {
    }

    public class TimeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, TimeSpanTimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, TimeSpanTimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( TimeSpanTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<TimeSpanTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out TimeSpanTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public TimeSpanTimeseriesValueEntity? GetTimeSpanTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TimeSpanTimeseriesValueEntity? GetTimeSpanTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class TimeSpanTimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TimeSpanTimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, TimeSpanTimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( TimeSpanTimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TimeSpanTimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TimeSpanTimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TimeSpanTimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TimeSpanTimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackableItemTrackLinkByItemAndStartEntityIndex
    {

        public class ByStart
        {
            readonly SortedWeakReferenceList<DateTime, TrackableItemTrackLinkEntity> _entries = new SortedWeakReferenceList<DateTime, TrackableItemTrackLinkEntity>( );

            public ByStart( )
            {
            }

            public void Add( TrackableItemTrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Start, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Start, new WeakReference<TrackableItemTrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetByStart( DateTime start, out TrackableItemTrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( start, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( start );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );
        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByItemAndStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByItemAtStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByItemFromStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByItemUntilStart( Guid item, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByItemOverStart( Guid item, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackableItemTrackLinkByItemAndEndEntityIndex
    {
        public class ByEnd
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByEnd( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackableItemTrackLinkEntity> _entries = new SortedWeakReferenceList<Guid, TrackableItemTrackLinkEntity>( );
            public ById( )
            {
            }

            public void Add( TrackableItemTrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackableItemTrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackableItemTrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByEnd> _entries = new SortedListEx<Guid, ByEnd>( );

        public TrackableItemTrackLinkByItemAndEndEntityIndex( )
        {
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItem( Guid item )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItem(  )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemAndEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemAndEndIsNull( Guid item )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemAtEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemFromEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemUntilEnd( Guid item, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemOverEnd( Guid item, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackableItemTrackLinkByItemAndEndIsNullEntityIndex
    {
    }

    public class TrackableItemTrackLinkByTrackAndStartEntityIndex
    {

        public class ByStart
        {
            readonly SortedWeakReferenceList<DateTime, TrackableItemTrackLinkEntity> _entries = new SortedWeakReferenceList<DateTime, TrackableItemTrackLinkEntity>( );

            public ByStart( )
            {
            }

            public void Add( TrackableItemTrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Start, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Start, new WeakReference<TrackableItemTrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetByStart( DateTime start, out TrackableItemTrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( start, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( start );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );
        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByTrackAndStart( Guid track, DateTime start )
        {
            throw new NotImplementedException();
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByTrackAtStart( Guid track, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByTrackFromStart( Guid track, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByTrackUntilStart( Guid track, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByTrackOverStart( Guid track, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackableItemTrackLinkByTrackAndEndEntityIndex
    {
        public class ByEnd
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByEnd( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackableItemTrackLinkEntity> _entries = new SortedWeakReferenceList<Guid, TrackableItemTrackLinkEntity>( );
            public ById( )
            {
            }

            public void Add( TrackableItemTrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackableItemTrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackableItemTrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByEnd> _entries = new SortedListEx<Guid, ByEnd>( );

        public TrackableItemTrackLinkByTrackAndEndEntityIndex( )
        {
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrack(  )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackAndEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackAndEndIsNull( Guid track )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackAtEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackFromEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackUntilEnd( Guid track, DateTime? end )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackOverEnd( Guid track, DateTime fromEnd, DateTime untilEnd )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackableItemTrackLinkByTrackAndEndIsNullEntityIndex
    {
    }

    public class TrackableItemTrackLinkByStartEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackableItemTrackLinkEntity> _entries = new SortedWeakReferenceList<Guid, TrackableItemTrackLinkEntity>( );
            public ById( )
            {
            }

            public void Add( TrackableItemTrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackableItemTrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackableItemTrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackableItemTrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TrackableItemTrackLinkByStartEntityIndex( )
        {
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackBaseByTrackerTrackNumberAndTimestampEntityIndex
    {
        public class ByTrackNumber
        {
            readonly SortedListEx<long, ByTimestamp> _entries = new SortedListEx<long, ByTimestamp>( );
            List<long> _emptyKeys = new List<long>( );

            public ByTrackNumber( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<TrackBaseEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, TrackBaseEntity> _entries = new SortedWeakReferenceList<DateTime, TrackBaseEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( TrackBaseEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<TrackBaseEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out TrackBaseEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTrackNumber> _entries = new SortedListEx<Guid, ByTrackNumber>( );
        public List<TrackBaseEntity> GetTrackBaseCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerAndTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerFromTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerUntilTrackNumber( Guid tracker, long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerOverTrackNumber( Guid tracker, long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException();
        }

        public TrackBaseEntity? GetTrackBaseByTrackerTrackNumberAndTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackBaseEntity? GetTrackBaseByTrackerTrackNumberAtTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseByTrackerTrackNumberFromTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseByTrackerTrackNumberUntilTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseByTrackerTrackNumberOverTimestamp( Guid tracker, long trackNumber, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackBaseByTrackerAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<TrackBaseEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackBaseEntity> _entries = new SortedWeakReferenceList<Guid, TrackBaseEntity>( );
            public ById( )
            {
            }

            public void Add( TrackBaseEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackBaseEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackBaseEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public TrackBaseByTrackerAndTimestampEntityIndex( )
        {
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerAndTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerAtTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerFromTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerUntilTimestamp( Guid tracker, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerOverTimestamp( Guid tracker, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackBaseByTrackNumberEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackBaseEntity> _entries = new SortedWeakReferenceList<Guid, TrackBaseEntity>( );
            public ById( )
            {
            }

            public void Add( TrackBaseEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackBaseEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackBaseEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<long, ById> _entries = new SortedListEx<long, ById>( );

        public TrackBaseByTrackNumberEntityIndex( )
        {
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionFromTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionUntilTrackNumber( long trackNumber )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionOverTrackNumber( long fromTrackNumber, long untilTrackNumber )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackBaseByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackBaseEntity> _entries = new SortedWeakReferenceList<Guid, TrackBaseEntity>( );
            public ById( )
            {
            }

            public void Add( TrackBaseEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackBaseEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackBaseEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackBaseEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TrackBaseByTimestampEntityIndex( )
        {
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackerFilterParametersByTrackerAndNameEntityIndex
    {

        public class ByName
        {
            readonly SortedWeakReferenceList<string, TrackerFilterParametersEntity> _entries = new SortedWeakReferenceList<string, TrackerFilterParametersEntity>( );

            public ByName( )
            {
            }

            public void Add( TrackerFilterParametersEntity entity )
            {
                if( _entries.TryGetValue(entity.Name, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Name, new WeakReference<TrackerFilterParametersEntity>( entity, false ) );
                }
            }

            public bool GetByName( string name, out TrackerFilterParametersEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( name, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( name );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(string key, [DisallowNull] IList<TrackerFilterParametersEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(string key, [DisallowNull] IList<TrackerFilterParametersEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<TrackerFilterParametersEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackerFilterParametersEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByName> _entries = new SortedListEx<Guid, ByName>( );
        public List<TrackerFilterParametersEntity> GetTrackerFilterParametersCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public TrackerFilterParametersEntity? GetTrackerFilterParametersByTrackerAndName( Guid tracker, string name )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackerFilterParametersConfigurationByParametersAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, TrackerFilterParametersConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, TrackerFilterParametersConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( TrackerFilterParametersConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<TrackerFilterParametersConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out TrackerFilterParametersConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionByParameters( Guid parameters )
        {
            throw new NotImplementedException();
        }

        public TrackerFilterParametersConfigurationEntity? GetTrackerFilterParametersConfigurationByParametersAndTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackerFilterParametersConfigurationEntity? GetTrackerFilterParametersConfigurationByParametersAtTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationByParametersFromTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationByParametersUntilTimestamp( Guid parameters, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationByParametersOverTimestamp( Guid parameters, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackerFilterParametersConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackerFilterParametersConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, TrackerFilterParametersConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( TrackerFilterParametersConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackerFilterParametersConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackerFilterParametersConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackerFilterParametersConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TrackerFilterParametersConfigurationByTimestampEntityIndex( )
        {
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackingServiceOptionsByTimestampEntityIndex
    {
        readonly SortedWeakReferenceList<DateTime, TrackingServiceOptionsEntity> _entries = new SortedWeakReferenceList<DateTime, TrackingServiceOptionsEntity>( );

        public TrackingServiceOptionsByTimestampEntityIndex( )
        {
        }

        public void Add( TrackingServiceOptionsEntity entity )
        {
            if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Timestamp, new WeakReference<TrackingServiceOptionsEntity>( entity, false ) );
            }
        }

        public bool GetByTimestamp( DateTime timestamp, out TrackingServiceOptionsEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( timestamp, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( timestamp );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(DateTime key, [DisallowNull] IList<TrackingServiceOptionsEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(DateTime key, [DisallowNull] IList<TrackingServiceOptionsEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackingServiceOptionsEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<TrackingServiceOptionsEntity> result )
        {
            return _entries.All( result );
        }

        public TrackingServiceOptionsEntity? GetTrackingServiceOptionsByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackingServiceOptionsEntity? GetTrackingServiceOptionsAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackingServiceOptionsEntity> GetTrackingServiceOptionsFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackingServiceOptionsEntity> GetTrackingServiceOptionsUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackingServiceOptionsEntity> GetTrackingServiceOptionsOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackLinkByPrimaryAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStart( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<TrackLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackLinkEntity> _entries = new SortedWeakReferenceList<Guid, TrackLinkEntity>( );
            public ById( )
            {
            }

            public void Add( TrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );

        public TrackLinkByPrimaryAndStartEntityIndex( )
        {
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimary( Guid primary )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryAndStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryAtStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryFromStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryUntilStart( Guid primary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryOverStart( Guid primary, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackLinkBySecondaryAndStartEntityIndex
    {
        public class ByStart
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByStart( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<TrackLinkEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackLinkEntity> _entries = new SortedWeakReferenceList<Guid, TrackLinkEntity>( );
            public ById( )
            {
            }

            public void Add( TrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );

        public TrackLinkBySecondaryAndStartEntityIndex( )
        {
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondary( Guid secondary )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryAndStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryAtStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryFromStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryUntilStart( Guid secondary, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryOverStart( Guid secondary, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackLinkByStartEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackLinkEntity> _entries = new SortedWeakReferenceList<Guid, TrackLinkEntity>( );
            public ById( )
            {
            }

            public void Add( TrackLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TrackLinkByStartEntityIndex( )
        {
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackValueByTrackAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, TrackValueEntity> _entries = new SortedWeakReferenceList<DateTime, TrackValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( TrackValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<TrackValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out TrackValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<TrackValueEntity> GetTrackValueCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public TrackValueEntity? GetTrackValueByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackValueEntity? GetTrackValueByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackValueEntity> _entries = new SortedWeakReferenceList<Guid, TrackValueEntity>( );
            public ById( )
            {
            }

            public void Add( TrackValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TrackValueByTimestampEntityIndex( )
        {
        }

        public List<TrackValueEntity> GetTrackValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class TrackValue3DByTrackAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, TrackValue3DEntity> _entries = new SortedWeakReferenceList<DateTime, TrackValue3DEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( TrackValue3DEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<TrackValue3DEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out TrackValue3DEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<TrackValue3DEntity> GetTrackValue3DCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public TrackValue3DEntity? GetTrackValue3DByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public TrackValue3DEntity? GetTrackValue3DByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class TrackValue3DByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, TrackValue3DEntity> _entries = new SortedWeakReferenceList<Guid, TrackValue3DEntity>( );
            public ById( )
            {
            }

            public void Add( TrackValue3DEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<TrackValue3DEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out TrackValue3DEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<TrackValue3DEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public TrackValue3DByTimestampEntityIndex( )
        {
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class UInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, UInt16TimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, UInt16TimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( UInt16TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<UInt16TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out UInt16TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public UInt16TimeseriesValueEntity? GetUInt16TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public UInt16TimeseriesValueEntity? GetUInt16TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class UInt16TimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, UInt16TimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, UInt16TimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( UInt16TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<UInt16TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out UInt16TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<UInt16TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public UInt16TimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class UInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, UInt32TimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, UInt32TimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( UInt32TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<UInt32TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out UInt32TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public UInt32TimeseriesValueEntity? GetUInt32TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public UInt32TimeseriesValueEntity? GetUInt32TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class UInt32TimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, UInt32TimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, UInt32TimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( UInt32TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<UInt32TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out UInt32TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<UInt32TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public UInt32TimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class UInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, UInt64TimeseriesValueEntity> _entries = new SortedWeakReferenceList<DateTime, UInt64TimeseriesValueEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( UInt64TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<UInt64TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out UInt64TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            throw new NotImplementedException();
        }

        public UInt64TimeseriesValueEntity? GetUInt64TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public UInt64TimeseriesValueEntity? GetUInt64TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class UInt64TimeseriesValueByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, UInt64TimeseriesValueEntity> _entries = new SortedWeakReferenceList<Guid, UInt64TimeseriesValueEntity>( );
            public ById( )
            {
            }

            public void Add( UInt64TimeseriesValueEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<UInt64TimeseriesValueEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out UInt64TimeseriesValueEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<UInt64TimeseriesValueEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public UInt64TimeseriesValueByTimestampEntityIndex( )
        {
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class VehicleTypeByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, VehicleTypeEntity> _entries = new SortedWeakReferenceList<string, VehicleTypeEntity>( );

        public VehicleTypeByNameEntityIndex( )
        {
        }

        public void Add( VehicleTypeEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<VehicleTypeEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out VehicleTypeEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<VehicleTypeEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<VehicleTypeEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<VehicleTypeEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<VehicleTypeEntity> result )
        {
            return _entries.All( result );
        }

        public VehicleTypeEntity? GetVehicleTypeByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class VesselTypeByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, VesselTypeEntity> _entries = new SortedWeakReferenceList<string, VesselTypeEntity>( );

        public VesselTypeByNameEntityIndex( )
        {
        }

        public void Add( VesselTypeEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<VesselTypeEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out VesselTypeEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.All( result );
        }

        public VesselTypeEntity? GetVesselTypeByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class VesselTypeByCodeEntityIndex
    {
        readonly SortedWeakReferenceList<int, VesselTypeEntity> _entries = new SortedWeakReferenceList<int, VesselTypeEntity>( );

        public VesselTypeByCodeEntityIndex( )
        {
        }

        public void Add( VesselTypeEntity entity )
        {
            if( _entries.TryGetValue(entity.Code, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Code, new WeakReference<VesselTypeEntity>( entity, false ) );
            }
        }

        public bool GetByCode( int code, out VesselTypeEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( code, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( code );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(int key, [DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(int key, [DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(int firstKey, int lastKey, [DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<VesselTypeEntity> result )
        {
            return _entries.All( result );
        }

        public VesselTypeEntity? GetVesselTypeByCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<VesselTypeEntity> GetVesselTypeFromCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<VesselTypeEntity> GetVesselTypeUntilCode( int code )
        {
            throw new NotImplementedException();
        }

        public List<VesselTypeEntity> GetVesselTypeOverCode( int fromCode, int untilCode )
        {
            throw new NotImplementedException();
        }

    }
    public class ViewByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, ViewEntity> _entries = new SortedWeakReferenceList<string, ViewEntity>( );

        public ViewByNameEntityIndex( )
        {
        }

        public void Add( ViewEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<ViewEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out ViewEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<ViewEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<ViewEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<ViewEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<ViewEntity> result )
        {
            return _entries.All( result );
        }

        public ViewEntity? GetViewByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class ViewCameraLinkByViewAndStartEntityIndex
    {

        public class ByStart
        {
            readonly SortedWeakReferenceList<DateTime, ViewCameraLinkEntity> _entries = new SortedWeakReferenceList<DateTime, ViewCameraLinkEntity>( );

            public ByStart( )
            {
            }

            public void Add( ViewCameraLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Start, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Start, new WeakReference<ViewCameraLinkEntity>( entity, false ) );
                }
            }

            public bool GetByStart( DateTime start, out ViewCameraLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( start, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( start );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );
        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionByView( Guid view )
        {
            throw new NotImplementedException();
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByViewAndStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByViewAtStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByViewFromStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByViewUntilStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByViewOverStart( Guid view, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }
    public class ViewCameraLinkByCameraAndStartEntityIndex
    {

        public class ByStart
        {
            readonly SortedWeakReferenceList<DateTime, ViewCameraLinkEntity> _entries = new SortedWeakReferenceList<DateTime, ViewCameraLinkEntity>( );

            public ByStart( )
            {
            }

            public void Add( ViewCameraLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Start, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Start, new WeakReference<ViewCameraLinkEntity>( entity, false ) );
                }
            }

            public bool GetByStart( DateTime start, out ViewCameraLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( start, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( start );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );
        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionByCamera( Guid camera )
        {
            throw new NotImplementedException();
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByCameraAndStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException();
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByCameraAtStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByCameraFromStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByCameraUntilStart( Guid camera, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByCameraOverStart( Guid camera, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }
    public class ViewCameraLinkByStartEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ViewCameraLinkEntity> _entries = new SortedWeakReferenceList<Guid, ViewCameraLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ViewCameraLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ViewCameraLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ViewCameraLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ViewCameraLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ViewCameraLinkByStartEntityIndex( )
        {
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class ViewTrackerLinkByViewAndStartEntityIndex
    {

        public class ByStart
        {
            readonly SortedWeakReferenceList<DateTime, ViewTrackerLinkEntity> _entries = new SortedWeakReferenceList<DateTime, ViewTrackerLinkEntity>( );

            public ByStart( )
            {
            }

            public void Add( ViewTrackerLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Start, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Start, new WeakReference<ViewTrackerLinkEntity>( entity, false ) );
                }
            }

            public bool GetByStart( DateTime start, out ViewTrackerLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( start, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( start );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );
        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionByView( Guid view )
        {
            throw new NotImplementedException();
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByViewAndStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByViewAtStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByViewFromStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByViewUntilStart( Guid view, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByViewOverStart( Guid view, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }
    public class ViewTrackerLinkByTrackerAndStartEntityIndex
    {

        public class ByStart
        {
            readonly SortedWeakReferenceList<DateTime, ViewTrackerLinkEntity> _entries = new SortedWeakReferenceList<DateTime, ViewTrackerLinkEntity>( );

            public ByStart( )
            {
            }

            public void Add( ViewTrackerLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Start, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Start, new WeakReference<ViewTrackerLinkEntity>( entity, false ) );
                }
            }

            public bool GetByStart( DateTime start, out ViewTrackerLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( start, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( start );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByStart> _entries = new SortedListEx<Guid, ByStart>( );
        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionByTracker( Guid tracker )
        {
            throw new NotImplementedException();
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByTrackerAndStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException();
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByTrackerAtStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByTrackerFromStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByTrackerUntilStart( Guid tracker, DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByTrackerOverStart( Guid tracker, DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }
    public class ViewTrackerLinkByStartEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ViewTrackerLinkEntity> _entries = new SortedWeakReferenceList<Guid, ViewTrackerLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ViewTrackerLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ViewTrackerLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ViewTrackerLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ViewTrackerLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ViewTrackerLinkByStartEntityIndex( )
        {
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionByStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionAtStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionFromStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionUntilStart( DateTime start )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationCommandByWeatherStationAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationCommandEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationCommandEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public WeatherStationCommandByWeatherStationAndTimestampEntityIndex( )
        {
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationCommandByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationCommandEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationCommandEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public WeatherStationCommandByTimestampEntityIndex( )
        {
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationCommandByReplyEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationCommandEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationCommandEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationCommandEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationCommandEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationCommandEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public WeatherStationCommandByReplyEntityIndex( )
        {
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByReply( Guid? reply )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByReplyIsNull(  )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationCommandByReplyIsNullEntityIndex
    {
    }

    public class WeatherStationCommandReplyByWeatherStationAndTimestampEntityIndex
    {
        public class ByTimestamp
        {
            readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );
            List<DateTime> _emptyKeys = new List<DateTime>( );

            public ByTimestamp( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );

        public WeatherStationCommandReplyByWeatherStationAndTimestampEntityIndex( )
        {
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationCommandReplyByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationCommandReplyEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationCommandReplyEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationCommandReplyEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationCommandReplyEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationCommandReplyEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public WeatherStationCommandReplyByTimestampEntityIndex( )
        {
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class WeatherStationCommandReplyByCommandEntityIndex
    {
        readonly SortedWeakReferenceList<Guid, WeatherStationCommandReplyEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationCommandReplyEntity>( );

        public WeatherStationCommandReplyByCommandEntityIndex( )
        {
        }

        public void Add( WeatherStationCommandReplyEntity entity )
        {
            if ( entity.CommandId is Guid command )
            {
                if ( _entries.TryGetValue( command, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( command, new WeakReference<WeatherStationCommandReplyEntity>( entity, false ) );
                }
            }
            else
            {
                throw new ArgumentException( "entity.CommandId is null.", nameof( entity ) );
            }
        }

        public bool GetByCommandId( Guid command, out WeatherStationCommandReplyEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( command, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( command );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(Guid key, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(Guid key, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<WeatherStationCommandReplyEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<WeatherStationCommandReplyEntity> result )
        {
            return _entries.All( result );
        }

        public WeatherStationCommandReplyEntity? GetWeatherStationCommandReplyByCommand( Guid? command )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByCommandIsNull(  )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationCommandReplyByCommandIsNullEntityIndex
    {
    }

    public class WeatherStationConfigurationByWeatherStationAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, WeatherStationConfigurationEntity> _entries = new SortedWeakReferenceList<DateTime, WeatherStationConfigurationEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( WeatherStationConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<WeatherStationConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out WeatherStationConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionByWeatherStation( Guid weatherStation )
        {
            throw new NotImplementedException();
        }

        public WeatherStationConfigurationEntity? GetWeatherStationConfigurationByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public WeatherStationConfigurationEntity? GetWeatherStationConfigurationByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class WeatherStationConfigurationByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, WeatherStationConfigurationEntity> _entries = new SortedWeakReferenceList<Guid, WeatherStationConfigurationEntity>( );
            public ById( )
            {
            }

            public void Add( WeatherStationConfigurationEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<WeatherStationConfigurationEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out WeatherStationConfigurationEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<WeatherStationConfigurationEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public WeatherStationConfigurationByTimestampEntityIndex( )
        {
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class ZoneByNameEntityIndex
    {
        readonly SortedWeakReferenceList<string, ZoneEntity> _entries = new SortedWeakReferenceList<string, ZoneEntity>( );

        public ZoneByNameEntityIndex( )
        {
        }

        public void Add( ZoneEntity entity )
        {
            if( _entries.TryGetValue(entity.Name, out var weakReference ) )
            {
                weakReference.SetTarget( entity );
            }
            else
            {
                _entries.Add( entity.Name, new WeakReference<ZoneEntity>( entity, false ) );
            }
        }

        public bool GetByName( string name, out ZoneEntity? entity )
        {
            entity = null;
            if ( _entries.TryGetValue( name, out var weakReference ) )
            {
                if ( weakReference.TryGetTarget( out entity ) == false )
                {
                    _entries.Remove( name );
                }
            }
            return _entries.Count > 0;
        }

        public bool GetFrom(string key, [DisallowNull] IList<ZoneEntity> result )
        {
            return _entries.From( key, result );
        }

        public bool GetUntil(string key, [DisallowNull] IList<ZoneEntity> result )
        {
            return _entries.Until( key, result );
        }

        public bool GetOver(string firstKey, string lastKey, [DisallowNull] IList<ZoneEntity> result )
        {
            return _entries.Over( firstKey, lastKey, result );
        }

        public bool GetAll([DisallowNull] IList<ZoneEntity> result )
        {
            return _entries.All( result );
        }

        public ZoneEntity? GetZoneByName( string name )
        {
            throw new NotImplementedException();
        }

    }
    public class ZoneExceptionsByZoneAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ZoneExceptionsEntity> _entries = new SortedWeakReferenceList<DateTime, ZoneExceptionsEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ZoneExceptionsEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ZoneExceptionsEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ZoneExceptionsEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionByZone( Guid zone )
        {
            throw new NotImplementedException();
        }

        public ZoneExceptionsEntity? GetZoneExceptionsByZoneAndTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ZoneExceptionsEntity? GetZoneExceptionsByZoneAtTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsByZoneFromTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsByZoneUntilTimestamp( Guid zone, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsByZoneOverTimestamp( Guid zone, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ZoneExceptionsByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ZoneExceptionsEntity> _entries = new SortedWeakReferenceList<Guid, ZoneExceptionsEntity>( );
            public ById( )
            {
            }

            public void Add( ZoneExceptionsEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ZoneExceptionsEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ZoneExceptionsEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneExceptionsEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ZoneExceptionsByTimestampEntityIndex( )
        {
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class ZoneExceptionsVesselLinkByZoneExceptionsAndVesselEntityIndex
    {

        public class ByVessel
        {
            readonly SortedWeakReferenceList<Guid, ZoneExceptionsVesselLinkEntity> _entries = new SortedWeakReferenceList<Guid, ZoneExceptionsVesselLinkEntity>( );

            public ByVessel( )
            {
            }

            public void Add( ZoneExceptionsVesselLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.VesselId, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.VesselId, new WeakReference<ZoneExceptionsVesselLinkEntity>( entity, false ) );
                }
            }

            public bool GetByVesselId( Guid vessel, out ZoneExceptionsVesselLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( vessel, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( vessel );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid key, [DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(Guid key, [DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(Guid firstKey, Guid lastKey, [DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByVessel> _entries = new SortedListEx<Guid, ByVessel>( );
        public List<ZoneExceptionsVesselLinkEntity> GetZoneExceptionsVesselLinkCollectionByZoneExceptions( Guid zoneExceptions )
        {
            throw new NotImplementedException();
        }

        public ZoneExceptionsVesselLinkEntity? GetZoneExceptionsVesselLinkByZoneExceptionsAndVessel( Guid zoneExceptions, Guid vessel )
        {
            throw new NotImplementedException();
        }

    }
    public class ZoneExceptionsVesselLinkByVesselEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ZoneExceptionsVesselLinkEntity> _entries = new SortedWeakReferenceList<Guid, ZoneExceptionsVesselLinkEntity>( );
            public ById( )
            {
            }

            public void Add( ZoneExceptionsVesselLinkEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ZoneExceptionsVesselLinkEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ZoneExceptionsVesselLinkEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneExceptionsVesselLinkEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ById> _entries = new SortedListEx<Guid, ById>( );

        public ZoneExceptionsVesselLinkByVesselEntityIndex( )
        {
        }

        public List<ZoneExceptionsVesselLinkEntity> GetZoneExceptionsVesselLinkCollectionByVessel( Guid vessel )
        {
            throw new NotImplementedException();
        }

    }

    public class ZoneTrackAlarmByTrackAndTimestampEntityIndex
    {

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ZoneTrackAlarmEntity> _entries = new SortedWeakReferenceList<DateTime, ZoneTrackAlarmEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ZoneTrackAlarmEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ZoneTrackAlarmEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ZoneTrackAlarmEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByTrack( Guid track )
        {
            throw new NotImplementedException();
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ZoneTrackAlarmByZoneTrackAndTimestampEntityIndex
    {
        public class ByTrack
        {
            readonly SortedListEx<Guid, ByTimestamp> _entries = new SortedListEx<Guid, ByTimestamp>( );
            List<Guid> _emptyKeys = new List<Guid>( );

            public ByTrack( )
            {
            }

            void RemoveEmptyKeys( )
            {
                var emptyKeyCount = _emptyKeys.Count;
                for ( int i = 0; i < emptyKeyCount; i++ )
                {
                    _entries.Remove( _emptyKeys[ i ] );
                }
                _emptyKeys.Clear( );
            }

            public bool GetAll([DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                foreach( var entry in _entries )
                {
                    if( entry.Value.GetAll( result ) == false )
                    {
                        _emptyKeys.Add( entry.Key );
                    }
                }
                RemoveEmptyKeys( );
                return _entries.Count > 0;
            }

        }

        public class ByTimestamp
        {
            readonly SortedWeakReferenceList<DateTime, ZoneTrackAlarmEntity> _entries = new SortedWeakReferenceList<DateTime, ZoneTrackAlarmEntity>( );

            public ByTimestamp( )
            {
            }

            public void Add( ZoneTrackAlarmEntity entity )
            {
                if( _entries.TryGetValue(entity.Timestamp, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Timestamp, new WeakReference<ZoneTrackAlarmEntity>( entity, false ) );
                }
            }

            public bool GetByTimestamp( DateTime timestamp, out ZoneTrackAlarmEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( timestamp, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( timestamp );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(DateTime key, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.From( key, result );
            }

            public bool GetUntil(DateTime key, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.Until( key, result );
            }

            public bool GetOver(DateTime firstKey, DateTime lastKey, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.Over( firstKey, lastKey, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<Guid, ByTrack> _entries = new SortedListEx<Guid, ByTrack>( );
        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByZone( Guid zone )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByZoneAndTrack( Guid zone, Guid track )
        {
            throw new NotImplementedException();
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByZoneTrackAndTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByZoneTrackAtTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByZoneTrackFromTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByZoneTrackUntilTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByZoneTrackOverTimestamp( Guid zone, Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }
    public class ZoneTrackAlarmByTimestampEntityIndex
    {
        public class ById
        {
            readonly SortedWeakReferenceList<Guid, ZoneTrackAlarmEntity> _entries = new SortedWeakReferenceList<Guid, ZoneTrackAlarmEntity>( );
            public ById( )
            {
            }

            public void Add( ZoneTrackAlarmEntity entity )
            {
                if( _entries.TryGetValue(entity.Id, out var weakReference ) )
                {
                    weakReference.SetTarget( entity );
                }
                else
                {
                    _entries.Add( entity.Id, new WeakReference<ZoneTrackAlarmEntity>( entity, false ) );
                }
            }

            public bool GetById( Guid id, out ZoneTrackAlarmEntity? entity )
            {
                entity = null;
                if ( _entries.TryGetValue( id, out var weakReference ) )
                {
                    if ( weakReference.TryGetTarget( out entity ) == false )
                    {
                        _entries.Remove( id );
                    }
                }
                return _entries.Count > 0;
            }

            public bool GetFrom(Guid id, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.From( id, result );
            }

            public bool GetUntil(Guid id, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.Until( id, result );
            }

            public bool GetOver(Guid firstId, Guid lastId, [DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.Over( firstId, lastId, result );
            }

            public bool GetAll([DisallowNull] IList<ZoneTrackAlarmEntity> result )
            {
                return _entries.All( result );
            }

        }

        readonly SortedListEx<DateTime, ById> _entries = new SortedListEx<DateTime, ById>( );

        public ZoneTrackAlarmByTimestampEntityIndex( )
        {
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionAtTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionFromTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionUntilTimestamp( DateTime timestamp )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            throw new NotImplementedException();
        }

    }

    public class EntityChanges
    {
        readonly AircraftTypeByNameEntityIndex _aircraftTypeByNameEntityIndex = new AircraftTypeByNameEntityIndex( );
        readonly AisDeviceCommandByAisDeviceAndTimestampEntityIndex _aisDeviceCommandByAisDeviceAndTimestampEntityIndex = new AisDeviceCommandByAisDeviceAndTimestampEntityIndex( );
        readonly AisDeviceCommandByTimestampEntityIndex _aisDeviceCommandByTimestampEntityIndex = new AisDeviceCommandByTimestampEntityIndex( );
        readonly AisDeviceCommandByReplyEntityIndex _aisDeviceCommandByReplyEntityIndex = new AisDeviceCommandByReplyEntityIndex( );
        readonly AisDeviceCommandByReplyIsNullEntityIndex _aisDeviceCommandByReplyIsNullEntityIndex = new AisDeviceCommandByReplyIsNullEntityIndex( );
        readonly AisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex _aisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex = new AisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex( );
        readonly AisDeviceCommandReplyByTimestampEntityIndex _aisDeviceCommandReplyByTimestampEntityIndex = new AisDeviceCommandReplyByTimestampEntityIndex( );
        readonly AisDeviceCommandReplyByCommandEntityIndex _aisDeviceCommandReplyByCommandEntityIndex = new AisDeviceCommandReplyByCommandEntityIndex( );
        readonly AisDeviceCommandReplyByCommandIsNullEntityIndex _aisDeviceCommandReplyByCommandIsNullEntityIndex = new AisDeviceCommandReplyByCommandIsNullEntityIndex( );
        readonly AisDeviceConfigurationByAisDeviceAndTimestampEntityIndex _aisDeviceConfigurationByAisDeviceAndTimestampEntityIndex = new AisDeviceConfigurationByAisDeviceAndTimestampEntityIndex( );
        readonly AisDeviceConfigurationByTimestampEntityIndex _aisDeviceConfigurationByTimestampEntityIndex = new AisDeviceConfigurationByTimestampEntityIndex( );
        readonly AisDeviceRawMessageByAisDeviceAndTimestampEntityIndex _aisDeviceRawMessageByAisDeviceAndTimestampEntityIndex = new AisDeviceRawMessageByAisDeviceAndTimestampEntityIndex( );
        readonly AisDeviceRawMessageByTimestampEntityIndex _aisDeviceRawMessageByTimestampEntityIndex = new AisDeviceRawMessageByTimestampEntityIndex( );
        readonly AisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex _aisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex = new AisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex( );
        readonly AisDeviceRawSentenceByTimestampEntityIndex _aisDeviceRawSentenceByTimestampEntityIndex = new AisDeviceRawSentenceByTimestampEntityIndex( );
        readonly AisMessageByAisDeviceAndReceivedTimestampEntityIndex _aisMessageByAisDeviceAndReceivedTimestampEntityIndex = new AisMessageByAisDeviceAndReceivedTimestampEntityIndex( );
        readonly AisMessageByReceivedTimestampEntityIndex _aisMessageByReceivedTimestampEntityIndex = new AisMessageByReceivedTimestampEntityIndex( );
        readonly AisMessageByMmsiAndMessageSequenceNumberEntityIndex _aisMessageByMmsiAndMessageSequenceNumberEntityIndex = new AisMessageByMmsiAndMessageSequenceNumberEntityIndex( );
        readonly AisMessageByMmsiIsNullAndMessageSequenceNumberEntityIndex _aisMessageByMmsiIsNullAndMessageSequenceNumberEntityIndex = new AisMessageByMmsiIsNullAndMessageSequenceNumberEntityIndex( );
        readonly AisAddressedSafetyRelatedMessageByDestinationMmsiEntityIndex _aisAddressedSafetyRelatedMessageByDestinationMmsiEntityIndex = new AisAddressedSafetyRelatedMessageByDestinationMmsiEntityIndex( );
        readonly AisAddressedSafetyRelatedMessageByDestinationMmsiIsNullEntityIndex _aisAddressedSafetyRelatedMessageByDestinationMmsiIsNullEntityIndex = new AisAddressedSafetyRelatedMessageByDestinationMmsiIsNullEntityIndex( );
        readonly AisBinaryAddressedMessageByDestinationMmsiEntityIndex _aisBinaryAddressedMessageByDestinationMmsiEntityIndex = new AisBinaryAddressedMessageByDestinationMmsiEntityIndex( );
        readonly AisBinaryAddressedMessageByDestinationMmsiIsNullEntityIndex _aisBinaryAddressedMessageByDestinationMmsiIsNullEntityIndex = new AisBinaryAddressedMessageByDestinationMmsiIsNullEntityIndex( );
        readonly AisExtendedClassBCsPositionReportMessageByNameEntityIndex _aisExtendedClassBCsPositionReportMessageByNameEntityIndex = new AisExtendedClassBCsPositionReportMessageByNameEntityIndex( );
        readonly AisExtendedClassBCsPositionReportMessageByNameIsNullEntityIndex _aisExtendedClassBCsPositionReportMessageByNameIsNullEntityIndex = new AisExtendedClassBCsPositionReportMessageByNameIsNullEntityIndex( );
        readonly AisStaticAndVoyageRelatedDataMessageByImoNumberEntityIndex _aisStaticAndVoyageRelatedDataMessageByImoNumberEntityIndex = new AisStaticAndVoyageRelatedDataMessageByImoNumberEntityIndex( );
        readonly AisStaticAndVoyageRelatedDataMessageByImoNumberIsNullEntityIndex _aisStaticAndVoyageRelatedDataMessageByImoNumberIsNullEntityIndex = new AisStaticAndVoyageRelatedDataMessageByImoNumberIsNullEntityIndex( );
        readonly AisStaticAndVoyageRelatedDataMessageByCallsignEntityIndex _aisStaticAndVoyageRelatedDataMessageByCallsignEntityIndex = new AisStaticAndVoyageRelatedDataMessageByCallsignEntityIndex( );
        readonly AisStaticAndVoyageRelatedDataMessageByCallsignIsNullEntityIndex _aisStaticAndVoyageRelatedDataMessageByCallsignIsNullEntityIndex = new AisStaticAndVoyageRelatedDataMessageByCallsignIsNullEntityIndex( );
        readonly AisStaticAndVoyageRelatedDataMessageByShipNameEntityIndex _aisStaticAndVoyageRelatedDataMessageByShipNameEntityIndex = new AisStaticAndVoyageRelatedDataMessageByShipNameEntityIndex( );
        readonly AisStaticAndVoyageRelatedDataMessageByShipNameIsNullEntityIndex _aisStaticAndVoyageRelatedDataMessageByShipNameIsNullEntityIndex = new AisStaticAndVoyageRelatedDataMessageByShipNameIsNullEntityIndex( );
        readonly AisStaticDataReportPartAMessageByShipNameEntityIndex _aisStaticDataReportPartAMessageByShipNameEntityIndex = new AisStaticDataReportPartAMessageByShipNameEntityIndex( );
        readonly AisStaticDataReportPartAMessageByShipNameIsNullEntityIndex _aisStaticDataReportPartAMessageByShipNameIsNullEntityIndex = new AisStaticDataReportPartAMessageByShipNameIsNullEntityIndex( );
        readonly AisStaticDataReportPartBMessageByCallsignEntityIndex _aisStaticDataReportPartBMessageByCallsignEntityIndex = new AisStaticDataReportPartBMessageByCallsignEntityIndex( );
        readonly AisStaticDataReportPartBMessageByCallsignIsNullEntityIndex _aisStaticDataReportPartBMessageByCallsignIsNullEntityIndex = new AisStaticDataReportPartBMessageByCallsignIsNullEntityIndex( );
        readonly AisStaticDataReportPartBMessageByMothershipMmsiEntityIndex _aisStaticDataReportPartBMessageByMothershipMmsiEntityIndex = new AisStaticDataReportPartBMessageByMothershipMmsiEntityIndex( );
        readonly AisStaticDataReportPartBMessageByMothershipMmsiIsNullEntityIndex _aisStaticDataReportPartBMessageByMothershipMmsiIsNullEntityIndex = new AisStaticDataReportPartBMessageByMothershipMmsiIsNullEntityIndex( );
        readonly AlarmStateChangeByAlarmAndTimestampEntityIndex _alarmStateChangeByAlarmAndTimestampEntityIndex = new AlarmStateChangeByAlarmAndTimestampEntityIndex( );
        readonly AlarmStateChangeByTimestampEntityIndex _alarmStateChangeByTimestampEntityIndex = new AlarmStateChangeByTimestampEntityIndex( );
        readonly BaseStationTypeByNameEntityIndex _baseStationTypeByNameEntityIndex = new BaseStationTypeByNameEntityIndex( );
        readonly BinaryTimeseriesValueByTimeseriesAndTimestampEntityIndex _binaryTimeseriesValueByTimeseriesAndTimestampEntityIndex = new BinaryTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly BinaryTimeseriesValueByTimestampEntityIndex _binaryTimeseriesValueByTimestampEntityIndex = new BinaryTimeseriesValueByTimestampEntityIndex( );
        readonly BookmarkByViewEntityIndex _bookmarkByViewEntityIndex = new BookmarkByViewEntityIndex( );
        readonly BooleanTimeseriesValueByTimeseriesAndTimestampEntityIndex _booleanTimeseriesValueByTimeseriesAndTimestampEntityIndex = new BooleanTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly BooleanTimeseriesValueByTimestampEntityIndex _booleanTimeseriesValueByTimestampEntityIndex = new BooleanTimeseriesValueByTimestampEntityIndex( );
        readonly ByteTimeseriesValueByTimeseriesAndTimestampEntityIndex _byteTimeseriesValueByTimeseriesAndTimestampEntityIndex = new ByteTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly ByteTimeseriesValueByTimestampEntityIndex _byteTimeseriesValueByTimestampEntityIndex = new ByteTimeseriesValueByTimestampEntityIndex( );
        readonly CameraCommandByCameraAndTimestampEntityIndex _cameraCommandByCameraAndTimestampEntityIndex = new CameraCommandByCameraAndTimestampEntityIndex( );
        readonly CameraCommandByTimestampEntityIndex _cameraCommandByTimestampEntityIndex = new CameraCommandByTimestampEntityIndex( );
        readonly CameraCommandByReplyEntityIndex _cameraCommandByReplyEntityIndex = new CameraCommandByReplyEntityIndex( );
        readonly CameraCommandByReplyIsNullEntityIndex _cameraCommandByReplyIsNullEntityIndex = new CameraCommandByReplyIsNullEntityIndex( );
        readonly CameraCommandReplyByCameraAndTimestampEntityIndex _cameraCommandReplyByCameraAndTimestampEntityIndex = new CameraCommandReplyByCameraAndTimestampEntityIndex( );
        readonly CameraCommandReplyByTimestampEntityIndex _cameraCommandReplyByTimestampEntityIndex = new CameraCommandReplyByTimestampEntityIndex( );
        readonly CameraCommandReplyByCommandEntityIndex _cameraCommandReplyByCommandEntityIndex = new CameraCommandReplyByCommandEntityIndex( );
        readonly CameraCommandReplyByCommandIsNullEntityIndex _cameraCommandReplyByCommandIsNullEntityIndex = new CameraCommandReplyByCommandIsNullEntityIndex( );
        readonly CameraConfigurationByCameraAndTimestampEntityIndex _cameraConfigurationByCameraAndTimestampEntityIndex = new CameraConfigurationByCameraAndTimestampEntityIndex( );
        readonly CameraConfigurationByTimestampEntityIndex _cameraConfigurationByTimestampEntityIndex = new CameraConfigurationByTimestampEntityIndex( );
        readonly CameraPanCalibrationByCameraAndTimestampEntityIndex _cameraPanCalibrationByCameraAndTimestampEntityIndex = new CameraPanCalibrationByCameraAndTimestampEntityIndex( );
        readonly CameraPanCalibrationByTimestampEntityIndex _cameraPanCalibrationByTimestampEntityIndex = new CameraPanCalibrationByTimestampEntityIndex( );
        readonly CameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex _cameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex = new CameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex( );
        readonly CameraStatusByCameraAndTimestampEntityIndex _cameraStatusByCameraAndTimestampEntityIndex = new CameraStatusByCameraAndTimestampEntityIndex( );
        readonly CameraStatusByTrackAndTimestampEntityIndex _cameraStatusByTrackAndTimestampEntityIndex = new CameraStatusByTrackAndTimestampEntityIndex( );
        readonly CameraStatusByTrackIsNullAndTimestampEntityIndex _cameraStatusByTrackIsNullAndTimestampEntityIndex = new CameraStatusByTrackIsNullAndTimestampEntityIndex( );
        readonly CameraStatusByTimestampEntityIndex _cameraStatusByTimestampEntityIndex = new CameraStatusByTimestampEntityIndex( );
        readonly CameraTiltCalibrationByCameraAndTimestampEntityIndex _cameraTiltCalibrationByCameraAndTimestampEntityIndex = new CameraTiltCalibrationByCameraAndTimestampEntityIndex( );
        readonly CameraTiltCalibrationByTimestampEntityIndex _cameraTiltCalibrationByTimestampEntityIndex = new CameraTiltCalibrationByTimestampEntityIndex( );
        readonly CameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex _cameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex = new CameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex( );
        readonly CameraZoomCalibrationByCameraAndTimestampEntityIndex _cameraZoomCalibrationByCameraAndTimestampEntityIndex = new CameraZoomCalibrationByCameraAndTimestampEntityIndex( );
        readonly CameraZoomCalibrationByTimestampEntityIndex _cameraZoomCalibrationByTimestampEntityIndex = new CameraZoomCalibrationByTimestampEntityIndex( );
        readonly CameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex _cameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex = new CameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex( );
        readonly CatalogElementByCatalogAndNameEntityIndex _catalogElementByCatalogAndNameEntityIndex = new CatalogElementByCatalogAndNameEntityIndex( );
        readonly CatalogElementByCatalogIsNullAndNameEntityIndex _catalogElementByCatalogIsNullAndNameEntityIndex = new CatalogElementByCatalogIsNullAndNameEntityIndex( );
        readonly ElementByElementTypeEntityIndex _elementByElementTypeEntityIndex = new ElementByElementTypeEntityIndex( );
        readonly ElementByElementTypeIsNullEntityIndex _elementByElementTypeIsNullEntityIndex = new ElementByElementTypeIsNullEntityIndex( );
        readonly CountryByNameEntityIndex _countryByNameEntityIndex = new CountryByNameEntityIndex( );
        readonly CountryByCodeEntityIndex _countryByCodeEntityIndex = new CountryByCodeEntityIndex( );
        readonly CountryByAlpha2EntityIndex _countryByAlpha2EntityIndex = new CountryByAlpha2EntityIndex( );
        readonly CountryByAlpha3EntityIndex _countryByAlpha3EntityIndex = new CountryByAlpha3EntityIndex( );
        readonly DateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex _dateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex = new DateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly DateTimeTimeseriesValueByTimestampEntityIndex _dateTimeTimeseriesValueByTimestampEntityIndex = new DateTimeTimeseriesValueByTimestampEntityIndex( );
        readonly DeviceHostByNameEntityIndex _deviceHostByNameEntityIndex = new DeviceHostByNameEntityIndex( );
        readonly DeviceHostConfigurationByHostAndTimestampEntityIndex _deviceHostConfigurationByHostAndTimestampEntityIndex = new DeviceHostConfigurationByHostAndTimestampEntityIndex( );
        readonly DeviceHostConfigurationByTimestampEntityIndex _deviceHostConfigurationByTimestampEntityIndex = new DeviceHostConfigurationByTimestampEntityIndex( );
        readonly DoubleTimeseriesValueByTimeseriesAndTimestampEntityIndex _doubleTimeseriesValueByTimeseriesAndTimestampEntityIndex = new DoubleTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly DoubleTimeseriesValueByTimestampEntityIndex _doubleTimeseriesValueByTimestampEntityIndex = new DoubleTimeseriesValueByTimestampEntityIndex( );
        readonly FacilityTypeByNameEntityIndex _facilityTypeByNameEntityIndex = new FacilityTypeByNameEntityIndex( );
        readonly GeoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex _geoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex = new GeoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly GeoPosition2DTimeseriesValueByTimestampEntityIndex _geoPosition2DTimeseriesValueByTimestampEntityIndex = new GeoPosition2DTimeseriesValueByTimestampEntityIndex( );
        readonly GeoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex _geoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex = new GeoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly GeoPosition3DTimeseriesValueByTimestampEntityIndex _geoPosition3DTimeseriesValueByTimestampEntityIndex = new GeoPosition3DTimeseriesValueByTimestampEntityIndex( );
        readonly GNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex _gNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex = new GNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex( );
        readonly GNSSDeviceCommandByTimestampEntityIndex _gNSSDeviceCommandByTimestampEntityIndex = new GNSSDeviceCommandByTimestampEntityIndex( );
        readonly GNSSDeviceCommandByReplyEntityIndex _gNSSDeviceCommandByReplyEntityIndex = new GNSSDeviceCommandByReplyEntityIndex( );
        readonly GNSSDeviceCommandByReplyIsNullEntityIndex _gNSSDeviceCommandByReplyIsNullEntityIndex = new GNSSDeviceCommandByReplyIsNullEntityIndex( );
        readonly GNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex _gNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex = new GNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex( );
        readonly GNSSDeviceCommandReplyByTimestampEntityIndex _gNSSDeviceCommandReplyByTimestampEntityIndex = new GNSSDeviceCommandReplyByTimestampEntityIndex( );
        readonly GNSSDeviceCommandReplyByCommandEntityIndex _gNSSDeviceCommandReplyByCommandEntityIndex = new GNSSDeviceCommandReplyByCommandEntityIndex( );
        readonly GNSSDeviceCommandReplyByCommandIsNullEntityIndex _gNSSDeviceCommandReplyByCommandIsNullEntityIndex = new GNSSDeviceCommandReplyByCommandIsNullEntityIndex( );
        readonly GNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex _gNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex = new GNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex( );
        readonly GNSSDeviceConfigurationByTimestampEntityIndex _gNSSDeviceConfigurationByTimestampEntityIndex = new GNSSDeviceConfigurationByTimestampEntityIndex( );
        readonly GuidTimeseriesValueByTimeseriesAndTimestampEntityIndex _guidTimeseriesValueByTimeseriesAndTimestampEntityIndex = new GuidTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly GuidTimeseriesValueByTimestampEntityIndex _guidTimeseriesValueByTimestampEntityIndex = new GuidTimeseriesValueByTimestampEntityIndex( );
        readonly GyroDeviceCommandByGyroDeviceAndTimestampEntityIndex _gyroDeviceCommandByGyroDeviceAndTimestampEntityIndex = new GyroDeviceCommandByGyroDeviceAndTimestampEntityIndex( );
        readonly GyroDeviceCommandByTimestampEntityIndex _gyroDeviceCommandByTimestampEntityIndex = new GyroDeviceCommandByTimestampEntityIndex( );
        readonly GyroDeviceCommandByReplyEntityIndex _gyroDeviceCommandByReplyEntityIndex = new GyroDeviceCommandByReplyEntityIndex( );
        readonly GyroDeviceCommandByReplyIsNullEntityIndex _gyroDeviceCommandByReplyIsNullEntityIndex = new GyroDeviceCommandByReplyIsNullEntityIndex( );
        readonly GyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex _gyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex = new GyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex( );
        readonly GyroDeviceCommandReplyByTimestampEntityIndex _gyroDeviceCommandReplyByTimestampEntityIndex = new GyroDeviceCommandReplyByTimestampEntityIndex( );
        readonly GyroDeviceCommandReplyByCommandEntityIndex _gyroDeviceCommandReplyByCommandEntityIndex = new GyroDeviceCommandReplyByCommandEntityIndex( );
        readonly GyroDeviceCommandReplyByCommandIsNullEntityIndex _gyroDeviceCommandReplyByCommandIsNullEntityIndex = new GyroDeviceCommandReplyByCommandIsNullEntityIndex( );
        readonly GyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex _gyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex = new GyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex( );
        readonly GyroDeviceConfigurationByTimestampEntityIndex _gyroDeviceConfigurationByTimestampEntityIndex = new GyroDeviceConfigurationByTimestampEntityIndex( );
        readonly CallsignByIdentifierEntityIndex _callsignByIdentifierEntityIndex = new CallsignByIdentifierEntityIndex( );
        readonly InternationalMaritimeOrganizationNumberByIdentifierEntityIndex _internationalMaritimeOrganizationNumberByIdentifierEntityIndex = new InternationalMaritimeOrganizationNumberByIdentifierEntityIndex( );
        readonly MaritimeMobileServiceIdentityByIdentifierEntityIndex _maritimeMobileServiceIdentityByIdentifierEntityIndex = new MaritimeMobileServiceIdentityByIdentifierEntityIndex( );
        readonly NameByTextEntityIndex _nameByTextEntityIndex = new NameByTextEntityIndex( );
        readonly Int16TimeseriesValueByTimeseriesAndTimestampEntityIndex _int16TimeseriesValueByTimeseriesAndTimestampEntityIndex = new Int16TimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly Int16TimeseriesValueByTimestampEntityIndex _int16TimeseriesValueByTimestampEntityIndex = new Int16TimeseriesValueByTimestampEntityIndex( );
        readonly Int32TimeseriesValueByTimeseriesAndTimestampEntityIndex _int32TimeseriesValueByTimeseriesAndTimestampEntityIndex = new Int32TimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly Int32TimeseriesValueByTimestampEntityIndex _int32TimeseriesValueByTimestampEntityIndex = new Int32TimeseriesValueByTimestampEntityIndex( );
        readonly Int64TimeseriesValueByTimeseriesAndTimestampEntityIndex _int64TimeseriesValueByTimeseriesAndTimestampEntityIndex = new Int64TimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly Int64TimeseriesValueByTimestampEntityIndex _int64TimeseriesValueByTimestampEntityIndex = new Int64TimeseriesValueByTimestampEntityIndex( );
        readonly BaseStationByNameEntityIndex _baseStationByNameEntityIndex = new BaseStationByNameEntityIndex( );
        readonly BaseStationByTypeEntityIndex _baseStationByTypeEntityIndex = new BaseStationByTypeEntityIndex( );
        readonly BaseStationByTypeIsNullEntityIndex _baseStationByTypeIsNullEntityIndex = new BaseStationByTypeIsNullEntityIndex( );
        readonly DeviceByHostEntityIndex _deviceByHostEntityIndex = new DeviceByHostEntityIndex( );
        readonly DeviceByNameEntityIndex _deviceByNameEntityIndex = new DeviceByNameEntityIndex( );
        readonly GyroDeviceByGNSSDeviceEntityIndex _gyroDeviceByGNSSDeviceEntityIndex = new GyroDeviceByGNSSDeviceEntityIndex( );
        readonly GyroDeviceByGNSSDeviceIsNullEntityIndex _gyroDeviceByGNSSDeviceIsNullEntityIndex = new GyroDeviceByGNSSDeviceIsNullEntityIndex( );
        readonly RadomeDeviceByRadarEntityIndex _radomeDeviceByRadarEntityIndex = new RadomeDeviceByRadarEntityIndex( );
        readonly RadomeDeviceByRadarIsNullEntityIndex _radomeDeviceByRadarIsNullEntityIndex = new RadomeDeviceByRadarIsNullEntityIndex( );
        readonly RadarDeviceByRadomeEntityIndex _radarDeviceByRadomeEntityIndex = new RadarDeviceByRadomeEntityIndex( );
        readonly RadarDeviceByRadomeIsNullEntityIndex _radarDeviceByRadomeIsNullEntityIndex = new RadarDeviceByRadomeIsNullEntityIndex( );
        readonly RadarDeviceByGNSSDeviceEntityIndex _radarDeviceByGNSSDeviceEntityIndex = new RadarDeviceByGNSSDeviceEntityIndex( );
        readonly RadarDeviceByGNSSDeviceIsNullEntityIndex _radarDeviceByGNSSDeviceIsNullEntityIndex = new RadarDeviceByGNSSDeviceIsNullEntityIndex( );
        readonly WeatherStationDeviceByGyroEntityIndex _weatherStationDeviceByGyroEntityIndex = new WeatherStationDeviceByGyroEntityIndex( );
        readonly WeatherStationDeviceByGyroIsNullEntityIndex _weatherStationDeviceByGyroIsNullEntityIndex = new WeatherStationDeviceByGyroIsNullEntityIndex( );
        readonly FacilityByNameEntityIndex _facilityByNameEntityIndex = new FacilityByNameEntityIndex( );
        readonly FacilityByTypeEntityIndex _facilityByTypeEntityIndex = new FacilityByTypeEntityIndex( );
        readonly FacilityByTypeIsNullEntityIndex _facilityByTypeIsNullEntityIndex = new FacilityByTypeIsNullEntityIndex( );
        readonly AircraftByNameEntityIndex _aircraftByNameEntityIndex = new AircraftByNameEntityIndex( );
        readonly AircraftByTypeEntityIndex _aircraftByTypeEntityIndex = new AircraftByTypeEntityIndex( );
        readonly AircraftByTypeIsNullEntityIndex _aircraftByTypeIsNullEntityIndex = new AircraftByTypeIsNullEntityIndex( );
        readonly AisAidToNavigationByNameEntityIndex _aisAidToNavigationByNameEntityIndex = new AisAidToNavigationByNameEntityIndex( );
        readonly AisAidToNavigationByMMSIEntityIndex _aisAidToNavigationByMMSIEntityIndex = new AisAidToNavigationByMMSIEntityIndex( );
        readonly AisAidToNavigationByMMSIIsNullEntityIndex _aisAidToNavigationByMMSIIsNullEntityIndex = new AisAidToNavigationByMMSIIsNullEntityIndex( );
        readonly VehicleByNameEntityIndex _vehicleByNameEntityIndex = new VehicleByNameEntityIndex( );
        readonly VehicleByTypeEntityIndex _vehicleByTypeEntityIndex = new VehicleByTypeEntityIndex( );
        readonly VehicleByTypeIsNullEntityIndex _vehicleByTypeIsNullEntityIndex = new VehicleByTypeIsNullEntityIndex( );
        readonly VesselByNameEntityIndex _vesselByNameEntityIndex = new VesselByNameEntityIndex( );
        readonly VesselByTypeEntityIndex _vesselByTypeEntityIndex = new VesselByTypeEntityIndex( );
        readonly VesselByTypeIsNullEntityIndex _vesselByTypeIsNullEntityIndex = new VesselByTypeIsNullEntityIndex( );
        readonly ItemIdentityLinkByItemAndStartEntityIndex _itemIdentityLinkByItemAndStartEntityIndex = new ItemIdentityLinkByItemAndStartEntityIndex( );
        readonly ItemIdentityLinkByItemAndEndEntityIndex _itemIdentityLinkByItemAndEndEntityIndex = new ItemIdentityLinkByItemAndEndEntityIndex( );
        readonly ItemIdentityLinkByItemAndEndIsNullEntityIndex _itemIdentityLinkByItemAndEndIsNullEntityIndex = new ItemIdentityLinkByItemAndEndIsNullEntityIndex( );
        readonly ItemIdentityLinkByIdentityAndStartEntityIndex _itemIdentityLinkByIdentityAndStartEntityIndex = new ItemIdentityLinkByIdentityAndStartEntityIndex( );
        readonly ItemIdentityLinkByIdentityAndEndEntityIndex _itemIdentityLinkByIdentityAndEndEntityIndex = new ItemIdentityLinkByIdentityAndEndEntityIndex( );
        readonly ItemIdentityLinkByIdentityAndEndIsNullEntityIndex _itemIdentityLinkByIdentityAndEndIsNullEntityIndex = new ItemIdentityLinkByIdentityAndEndIsNullEntityIndex( );
        readonly ItemIdentityLinkByStartEntityIndex _itemIdentityLinkByStartEntityIndex = new ItemIdentityLinkByStartEntityIndex( );
        readonly ItemIdentityLinkByEndEntityIndex _itemIdentityLinkByEndEntityIndex = new ItemIdentityLinkByEndEntityIndex( );
        readonly ItemIdentityLinkByEndIsNullEntityIndex _itemIdentityLinkByEndIsNullEntityIndex = new ItemIdentityLinkByEndIsNullEntityIndex( );
        readonly ItemParentChildLinkByParentAndTimestampEntityIndex _itemParentChildLinkByParentAndTimestampEntityIndex = new ItemParentChildLinkByParentAndTimestampEntityIndex( );
        readonly ItemParentChildLinkByChildAndTimestampEntityIndex _itemParentChildLinkByChildAndTimestampEntityIndex = new ItemParentChildLinkByChildAndTimestampEntityIndex( );
        readonly ItemParentChildLinkByTimestampEntityIndex _itemParentChildLinkByTimestampEntityIndex = new ItemParentChildLinkByTimestampEntityIndex( );
        readonly LineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex _lineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex = new LineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex( );
        readonly LineInputDeviceCommandByTimestampEntityIndex _lineInputDeviceCommandByTimestampEntityIndex = new LineInputDeviceCommandByTimestampEntityIndex( );
        readonly LineInputDeviceCommandByReplyEntityIndex _lineInputDeviceCommandByReplyEntityIndex = new LineInputDeviceCommandByReplyEntityIndex( );
        readonly LineInputDeviceCommandByReplyIsNullEntityIndex _lineInputDeviceCommandByReplyIsNullEntityIndex = new LineInputDeviceCommandByReplyIsNullEntityIndex( );
        readonly LineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex _lineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex = new LineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex( );
        readonly LineInputDeviceCommandReplyByTimestampEntityIndex _lineInputDeviceCommandReplyByTimestampEntityIndex = new LineInputDeviceCommandReplyByTimestampEntityIndex( );
        readonly LineInputDeviceCommandReplyByCommandEntityIndex _lineInputDeviceCommandReplyByCommandEntityIndex = new LineInputDeviceCommandReplyByCommandEntityIndex( );
        readonly LineInputDeviceCommandReplyByCommandIsNullEntityIndex _lineInputDeviceCommandReplyByCommandIsNullEntityIndex = new LineInputDeviceCommandReplyByCommandIsNullEntityIndex( );
        readonly LineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex _lineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex = new LineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex( );
        readonly LineInputDeviceConfigurationByTimestampEntityIndex _lineInputDeviceConfigurationByTimestampEntityIndex = new LineInputDeviceConfigurationByTimestampEntityIndex( );
        readonly LineInputMessageRoutingByLineInputDeviceAndTypeEntityIndex _lineInputMessageRoutingByLineInputDeviceAndTypeEntityIndex = new LineInputMessageRoutingByLineInputDeviceAndTypeEntityIndex( );
        readonly LineInputMessageRoutingDestinationByRoutingAndListenerEntityIndex _lineInputMessageRoutingDestinationByRoutingAndListenerEntityIndex = new LineInputMessageRoutingDestinationByRoutingAndListenerEntityIndex( );
        readonly LineInputMessageRoutingDestinationByRoutingAndListenerIsNullEntityIndex _lineInputMessageRoutingDestinationByRoutingAndListenerIsNullEntityIndex = new LineInputMessageRoutingDestinationByRoutingAndListenerIsNullEntityIndex( );
        readonly LineInputMessageRoutingDestinationByListenerEntityIndex _lineInputMessageRoutingDestinationByListenerEntityIndex = new LineInputMessageRoutingDestinationByListenerEntityIndex( );
        readonly LineInputMessageRoutingDestinationByListenerIsNullEntityIndex _lineInputMessageRoutingDestinationByListenerIsNullEntityIndex = new LineInputMessageRoutingDestinationByListenerIsNullEntityIndex( );
        readonly LineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex _lineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex = new LineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex( );
        readonly LogApplicationByNameEntityIndex _logApplicationByNameEntityIndex = new LogApplicationByNameEntityIndex( );
        readonly LogApplicationConfigurationByApplicationAndTimestampEntityIndex _logApplicationConfigurationByApplicationAndTimestampEntityIndex = new LogApplicationConfigurationByApplicationAndTimestampEntityIndex( );
        readonly LogApplicationConfigurationByTimestampEntityIndex _logApplicationConfigurationByTimestampEntityIndex = new LogApplicationConfigurationByTimestampEntityIndex( );
        readonly LogHostByComputerNameEntityIndex _logHostByComputerNameEntityIndex = new LogHostByComputerNameEntityIndex( );
        readonly LogHostConfigurationByHostAndTimestampEntityIndex _logHostConfigurationByHostAndTimestampEntityIndex = new LogHostConfigurationByHostAndTimestampEntityIndex( );
        readonly LogHostConfigurationByTimestampEntityIndex _logHostConfigurationByTimestampEntityIndex = new LogHostConfigurationByTimestampEntityIndex( );
        readonly LogLocationByFileNameAndLineNumberEntityIndex _logLocationByFileNameAndLineNumberEntityIndex = new LogLocationByFileNameAndLineNumberEntityIndex( );
        readonly LogProcessByApplicationAndStartedEntityIndex _logProcessByApplicationAndStartedEntityIndex = new LogProcessByApplicationAndStartedEntityIndex( );
        readonly LogProcessByHostAndStartedEntityIndex _logProcessByHostAndStartedEntityIndex = new LogProcessByHostAndStartedEntityIndex( );
        readonly LogProcessByHostIsNullAndStartedEntityIndex _logProcessByHostIsNullAndStartedEntityIndex = new LogProcessByHostIsNullAndStartedEntityIndex( );
        readonly LogProcessByStartedEntityIndex _logProcessByStartedEntityIndex = new LogProcessByStartedEntityIndex( );
        readonly LogRecordByThreadAndTimestampEntityIndex _logRecordByThreadAndTimestampEntityIndex = new LogRecordByThreadAndTimestampEntityIndex( );
        readonly LogRecordByTimestampEntityIndex _logRecordByTimestampEntityIndex = new LogRecordByTimestampEntityIndex( );
        readonly LogRecordByLocationEntityIndex _logRecordByLocationEntityIndex = new LogRecordByLocationEntityIndex( );
        readonly LogThreadByProcessAndStartedEntityIndex _logThreadByProcessAndStartedEntityIndex = new LogThreadByProcessAndStartedEntityIndex( );
        readonly LogThreadByStartedEntityIndex _logThreadByStartedEntityIndex = new LogThreadByStartedEntityIndex( );
        readonly LogTraceEntryByThreadAndEnteredEntityIndex _logTraceEntryByThreadAndEnteredEntityIndex = new LogTraceEntryByThreadAndEnteredEntityIndex( );
        readonly LogTraceEntryByLocationAndEnteredEntityIndex _logTraceEntryByLocationAndEnteredEntityIndex = new LogTraceEntryByLocationAndEnteredEntityIndex( );
        readonly LogTraceEntryByEnteredEntityIndex _logTraceEntryByEnteredEntityIndex = new LogTraceEntryByEnteredEntityIndex( );
        readonly MapElementByItemEntityIndex _mapElementByItemEntityIndex = new MapElementByItemEntityIndex( );
        readonly MapServiceOptionsByTimestampEntityIndex _mapServiceOptionsByTimestampEntityIndex = new MapServiceOptionsByTimestampEntityIndex( );
        readonly MaritimeIdentificationDigitsByCodeEntityIndex _maritimeIdentificationDigitsByCodeEntityIndex = new MaritimeIdentificationDigitsByCodeEntityIndex( );
        readonly MaritimeIdentificationDigitsByCountryEntityIndex _maritimeIdentificationDigitsByCountryEntityIndex = new MaritimeIdentificationDigitsByCountryEntityIndex( );
        readonly MediaProxySessionByServiceAndNameEntityIndex _mediaProxySessionByServiceAndNameEntityIndex = new MediaProxySessionByServiceAndNameEntityIndex( );
        readonly MediaProxySessionFileByProxySessionAndTimestampEntityIndex _mediaProxySessionFileByProxySessionAndTimestampEntityIndex = new MediaProxySessionFileByProxySessionAndTimestampEntityIndex( );
        readonly MediaProxySessionOptionsByProxySessionAndTimestampEntityIndex _mediaProxySessionOptionsByProxySessionAndTimestampEntityIndex = new MediaProxySessionOptionsByProxySessionAndTimestampEntityIndex( );
        readonly MediaServiceOptionsByMediaServiceAndTimestampEntityIndex _mediaServiceOptionsByMediaServiceAndTimestampEntityIndex = new MediaServiceOptionsByMediaServiceAndTimestampEntityIndex( );
        readonly NamespaceElementByNamespaceAndNameEntityIndex _namespaceElementByNamespaceAndNameEntityIndex = new NamespaceElementByNamespaceAndNameEntityIndex( );
        readonly OilSpillByOilSpillDetectorAndTimestampEntityIndex _oilSpillByOilSpillDetectorAndTimestampEntityIndex = new OilSpillByOilSpillDetectorAndTimestampEntityIndex( );
        readonly OilSpillByTimestampEntityIndex _oilSpillByTimestampEntityIndex = new OilSpillByTimestampEntityIndex( );
        readonly OilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex _oilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex = new OilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex( );
        readonly OilSpillDetectorCommandByTimestampEntityIndex _oilSpillDetectorCommandByTimestampEntityIndex = new OilSpillDetectorCommandByTimestampEntityIndex( );
        readonly OilSpillDetectorCommandByReplyEntityIndex _oilSpillDetectorCommandByReplyEntityIndex = new OilSpillDetectorCommandByReplyEntityIndex( );
        readonly OilSpillDetectorCommandByReplyIsNullEntityIndex _oilSpillDetectorCommandByReplyIsNullEntityIndex = new OilSpillDetectorCommandByReplyIsNullEntityIndex( );
        readonly OilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex _oilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex = new OilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex( );
        readonly OilSpillDetectorCommandReplyByTimestampEntityIndex _oilSpillDetectorCommandReplyByTimestampEntityIndex = new OilSpillDetectorCommandReplyByTimestampEntityIndex( );
        readonly OilSpillDetectorCommandReplyByCommandEntityIndex _oilSpillDetectorCommandReplyByCommandEntityIndex = new OilSpillDetectorCommandReplyByCommandEntityIndex( );
        readonly OilSpillDetectorCommandReplyByCommandIsNullEntityIndex _oilSpillDetectorCommandReplyByCommandIsNullEntityIndex = new OilSpillDetectorCommandReplyByCommandIsNullEntityIndex( );
        readonly OilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex _oilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex = new OilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex( );
        readonly OilSpillDetectorConfigurationByTimestampEntityIndex _oilSpillDetectorConfigurationByTimestampEntityIndex = new OilSpillDetectorConfigurationByTimestampEntityIndex( );
        readonly OilSpillDetectorConfigurationByTargetMMSIEntityIndex _oilSpillDetectorConfigurationByTargetMMSIEntityIndex = new OilSpillDetectorConfigurationByTargetMMSIEntityIndex( );
        readonly OilSpillDetectorConfigurationByTargetMMSIIsNullEntityIndex _oilSpillDetectorConfigurationByTargetMMSIIsNullEntityIndex = new OilSpillDetectorConfigurationByTargetMMSIIsNullEntityIndex( );
        readonly Position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex _position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex = new Position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly Position2DTimeseriesValueByTimestampEntityIndex _position2DTimeseriesValueByTimestampEntityIndex = new Position2DTimeseriesValueByTimestampEntityIndex( );
        readonly Position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex _position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex = new Position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly Position3DTimeseriesValueByTimestampEntityIndex _position3DTimeseriesValueByTimestampEntityIndex = new Position3DTimeseriesValueByTimestampEntityIndex( );
        readonly PropertyByElementAndDefinitionEntityIndex _propertyByElementAndDefinitionEntityIndex = new PropertyByElementAndDefinitionEntityIndex( );
        readonly PropertyByDefinitionEntityIndex _propertyByDefinitionEntityIndex = new PropertyByDefinitionEntityIndex( );
        readonly ReferencePropertyByValueEntityIndex _referencePropertyByValueEntityIndex = new ReferencePropertyByValueEntityIndex( );
        readonly ReferencePropertyByValueIsNullEntityIndex _referencePropertyByValueIsNullEntityIndex = new ReferencePropertyByValueIsNullEntityIndex( );
        readonly BinaryTimeseriesPropertyByTimeseriesEntityIndex _binaryTimeseriesPropertyByTimeseriesEntityIndex = new BinaryTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly BinaryTimeseriesPropertyByTimeseriesIsNullEntityIndex _binaryTimeseriesPropertyByTimeseriesIsNullEntityIndex = new BinaryTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly BooleanTimeseriesPropertyByTimeseriesEntityIndex _booleanTimeseriesPropertyByTimeseriesEntityIndex = new BooleanTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly BooleanTimeseriesPropertyByTimeseriesIsNullEntityIndex _booleanTimeseriesPropertyByTimeseriesIsNullEntityIndex = new BooleanTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly ByteTimeseriesPropertyByTimeseriesEntityIndex _byteTimeseriesPropertyByTimeseriesEntityIndex = new ByteTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly ByteTimeseriesPropertyByTimeseriesIsNullEntityIndex _byteTimeseriesPropertyByTimeseriesIsNullEntityIndex = new ByteTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly DateTimeTimeseriesPropertyByTimeseriesEntityIndex _dateTimeTimeseriesPropertyByTimeseriesEntityIndex = new DateTimeTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly DateTimeTimeseriesPropertyByTimeseriesIsNullEntityIndex _dateTimeTimeseriesPropertyByTimeseriesIsNullEntityIndex = new DateTimeTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly DoubleTimeseriesPropertyByTimeseriesEntityIndex _doubleTimeseriesPropertyByTimeseriesEntityIndex = new DoubleTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly DoubleTimeseriesPropertyByTimeseriesIsNullEntityIndex _doubleTimeseriesPropertyByTimeseriesIsNullEntityIndex = new DoubleTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly GuidTimeseriesPropertyByTimeseriesEntityIndex _guidTimeseriesPropertyByTimeseriesEntityIndex = new GuidTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly GuidTimeseriesPropertyByTimeseriesIsNullEntityIndex _guidTimeseriesPropertyByTimeseriesIsNullEntityIndex = new GuidTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly Int16TimeseriesPropertyByTimeseriesEntityIndex _int16TimeseriesPropertyByTimeseriesEntityIndex = new Int16TimeseriesPropertyByTimeseriesEntityIndex( );
        readonly Int16TimeseriesPropertyByTimeseriesIsNullEntityIndex _int16TimeseriesPropertyByTimeseriesIsNullEntityIndex = new Int16TimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly Int32TimeseriesPropertyByTimeseriesEntityIndex _int32TimeseriesPropertyByTimeseriesEntityIndex = new Int32TimeseriesPropertyByTimeseriesEntityIndex( );
        readonly Int32TimeseriesPropertyByTimeseriesIsNullEntityIndex _int32TimeseriesPropertyByTimeseriesIsNullEntityIndex = new Int32TimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly Int64TimeseriesPropertyByTimeseriesEntityIndex _int64TimeseriesPropertyByTimeseriesEntityIndex = new Int64TimeseriesPropertyByTimeseriesEntityIndex( );
        readonly Int64TimeseriesPropertyByTimeseriesIsNullEntityIndex _int64TimeseriesPropertyByTimeseriesIsNullEntityIndex = new Int64TimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly ReferenceTimeseriesPropertyByTimeseriesEntityIndex _referenceTimeseriesPropertyByTimeseriesEntityIndex = new ReferenceTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly ReferenceTimeseriesPropertyByTimeseriesIsNullEntityIndex _referenceTimeseriesPropertyByTimeseriesIsNullEntityIndex = new ReferenceTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly SByteTimeseriesPropertyByTimeseriesEntityIndex _sByteTimeseriesPropertyByTimeseriesEntityIndex = new SByteTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly SByteTimeseriesPropertyByTimeseriesIsNullEntityIndex _sByteTimeseriesPropertyByTimeseriesIsNullEntityIndex = new SByteTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly SingleTimeseriesPropertyByTimeseriesEntityIndex _singleTimeseriesPropertyByTimeseriesEntityIndex = new SingleTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly SingleTimeseriesPropertyByTimeseriesIsNullEntityIndex _singleTimeseriesPropertyByTimeseriesIsNullEntityIndex = new SingleTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly StringTimeseriesPropertyByTimeseriesEntityIndex _stringTimeseriesPropertyByTimeseriesEntityIndex = new StringTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly StringTimeseriesPropertyByTimeseriesIsNullEntityIndex _stringTimeseriesPropertyByTimeseriesIsNullEntityIndex = new StringTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly TimeSpanTimeseriesPropertyByTimeseriesEntityIndex _timeSpanTimeseriesPropertyByTimeseriesEntityIndex = new TimeSpanTimeseriesPropertyByTimeseriesEntityIndex( );
        readonly TimeSpanTimeseriesPropertyByTimeseriesIsNullEntityIndex _timeSpanTimeseriesPropertyByTimeseriesIsNullEntityIndex = new TimeSpanTimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly UInt16TimeseriesPropertyByTimeseriesEntityIndex _uInt16TimeseriesPropertyByTimeseriesEntityIndex = new UInt16TimeseriesPropertyByTimeseriesEntityIndex( );
        readonly UInt16TimeseriesPropertyByTimeseriesIsNullEntityIndex _uInt16TimeseriesPropertyByTimeseriesIsNullEntityIndex = new UInt16TimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly UInt32TimeseriesPropertyByTimeseriesEntityIndex _uInt32TimeseriesPropertyByTimeseriesEntityIndex = new UInt32TimeseriesPropertyByTimeseriesEntityIndex( );
        readonly UInt32TimeseriesPropertyByTimeseriesIsNullEntityIndex _uInt32TimeseriesPropertyByTimeseriesIsNullEntityIndex = new UInt32TimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly UInt64TimeseriesPropertyByTimeseriesEntityIndex _uInt64TimeseriesPropertyByTimeseriesEntityIndex = new UInt64TimeseriesPropertyByTimeseriesEntityIndex( );
        readonly UInt64TimeseriesPropertyByTimeseriesIsNullEntityIndex _uInt64TimeseriesPropertyByTimeseriesIsNullEntityIndex = new UInt64TimeseriesPropertyByTimeseriesIsNullEntityIndex( );
        readonly PropertyDefinitionByElementTypeAndNameEntityIndex _propertyDefinitionByElementTypeAndNameEntityIndex = new PropertyDefinitionByElementTypeAndNameEntityIndex( );
        readonly ReferencePropertyDefinitionByDefaultValueEntityIndex _referencePropertyDefinitionByDefaultValueEntityIndex = new ReferencePropertyDefinitionByDefaultValueEntityIndex( );
        readonly ReferencePropertyDefinitionByDefaultValueIsNullEntityIndex _referencePropertyDefinitionByDefaultValueIsNullEntityIndex = new ReferencePropertyDefinitionByDefaultValueIsNullEntityIndex( );
        readonly ReferencePropertyDefinitionByReferencedElementTypeEntityIndex _referencePropertyDefinitionByReferencedElementTypeEntityIndex = new ReferencePropertyDefinitionByReferencedElementTypeEntityIndex( );
        readonly ReferencePropertyDefinitionByReferencedElementTypeIsNullEntityIndex _referencePropertyDefinitionByReferencedElementTypeIsNullEntityIndex = new ReferencePropertyDefinitionByReferencedElementTypeIsNullEntityIndex( );
        readonly ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeEntityIndex _referenceTimeseriesPropertyDefinitionByReferencedElementTypeEntityIndex = new ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeEntityIndex( );
        readonly ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeIsNullEntityIndex _referenceTimeseriesPropertyDefinitionByReferencedElementTypeIsNullEntityIndex = new ReferenceTimeseriesPropertyDefinitionByReferencedElementTypeIsNullEntityIndex( );
        readonly RadarAlarmStatusByRadarAndTimestampEntityIndex _radarAlarmStatusByRadarAndTimestampEntityIndex = new RadarAlarmStatusByRadarAndTimestampEntityIndex( );
        readonly RadarAlarmStatusByTimestampEntityIndex _radarAlarmStatusByTimestampEntityIndex = new RadarAlarmStatusByTimestampEntityIndex( );
        readonly RadarCommandByRadarAndTimestampEntityIndex _radarCommandByRadarAndTimestampEntityIndex = new RadarCommandByRadarAndTimestampEntityIndex( );
        readonly RadarCommandByTimestampEntityIndex _radarCommandByTimestampEntityIndex = new RadarCommandByTimestampEntityIndex( );
        readonly RadarCommandByReplyEntityIndex _radarCommandByReplyEntityIndex = new RadarCommandByReplyEntityIndex( );
        readonly RadarCommandByReplyIsNullEntityIndex _radarCommandByReplyIsNullEntityIndex = new RadarCommandByReplyIsNullEntityIndex( );
        readonly RadarCommandReplyByRadarAndTimestampEntityIndex _radarCommandReplyByRadarAndTimestampEntityIndex = new RadarCommandReplyByRadarAndTimestampEntityIndex( );
        readonly RadarCommandReplyByTimestampEntityIndex _radarCommandReplyByTimestampEntityIndex = new RadarCommandReplyByTimestampEntityIndex( );
        readonly RadarCommandReplyByCommandEntityIndex _radarCommandReplyByCommandEntityIndex = new RadarCommandReplyByCommandEntityIndex( );
        readonly RadarCommandReplyByCommandIsNullEntityIndex _radarCommandReplyByCommandIsNullEntityIndex = new RadarCommandReplyByCommandIsNullEntityIndex( );
        readonly RadarConfigurationByRadarAndTimestampEntityIndex _radarConfigurationByRadarAndTimestampEntityIndex = new RadarConfigurationByRadarAndTimestampEntityIndex( );
        readonly RadarConfigurationByTimestampEntityIndex _radarConfigurationByTimestampEntityIndex = new RadarConfigurationByTimestampEntityIndex( );
        readonly RadarImageByRadarAndTimestampEntityIndex _radarImageByRadarAndTimestampEntityIndex = new RadarImageByRadarAndTimestampEntityIndex( );
        readonly RadarImageByTimestampEntityIndex _radarImageByTimestampEntityIndex = new RadarImageByTimestampEntityIndex( );
        readonly RadarRawTrackTableByRadarAndTimestampEntityIndex _radarRawTrackTableByRadarAndTimestampEntityIndex = new RadarRawTrackTableByRadarAndTimestampEntityIndex( );
        readonly RadarRawTrackTableByTimestampEntityIndex _radarRawTrackTableByTimestampEntityIndex = new RadarRawTrackTableByTimestampEntityIndex( );
        readonly RadarStatusByRadarAndTimestampEntityIndex _radarStatusByRadarAndTimestampEntityIndex = new RadarStatusByRadarAndTimestampEntityIndex( );
        readonly RadarStatusByTimestampEntityIndex _radarStatusByTimestampEntityIndex = new RadarStatusByTimestampEntityIndex( );
        readonly RadioCommandByRadioAndTimestampEntityIndex _radioCommandByRadioAndTimestampEntityIndex = new RadioCommandByRadioAndTimestampEntityIndex( );
        readonly RadioCommandByTimestampEntityIndex _radioCommandByTimestampEntityIndex = new RadioCommandByTimestampEntityIndex( );
        readonly RadioCommandByReplyEntityIndex _radioCommandByReplyEntityIndex = new RadioCommandByReplyEntityIndex( );
        readonly RadioCommandByReplyIsNullEntityIndex _radioCommandByReplyIsNullEntityIndex = new RadioCommandByReplyIsNullEntityIndex( );
        readonly RadioCommandReplyByRadioAndTimestampEntityIndex _radioCommandReplyByRadioAndTimestampEntityIndex = new RadioCommandReplyByRadioAndTimestampEntityIndex( );
        readonly RadioCommandReplyByTimestampEntityIndex _radioCommandReplyByTimestampEntityIndex = new RadioCommandReplyByTimestampEntityIndex( );
        readonly RadioCommandReplyByCommandEntityIndex _radioCommandReplyByCommandEntityIndex = new RadioCommandReplyByCommandEntityIndex( );
        readonly RadioCommandReplyByCommandIsNullEntityIndex _radioCommandReplyByCommandIsNullEntityIndex = new RadioCommandReplyByCommandIsNullEntityIndex( );
        readonly RadioConfigurationByRadioAndTimestampEntityIndex _radioConfigurationByRadioAndTimestampEntityIndex = new RadioConfigurationByRadioAndTimestampEntityIndex( );
        readonly RadioConfigurationByTimestampEntityIndex _radioConfigurationByTimestampEntityIndex = new RadioConfigurationByTimestampEntityIndex( );
        readonly RadomeCommandByRadomeAndTimestampEntityIndex _radomeCommandByRadomeAndTimestampEntityIndex = new RadomeCommandByRadomeAndTimestampEntityIndex( );
        readonly RadomeCommandByTimestampEntityIndex _radomeCommandByTimestampEntityIndex = new RadomeCommandByTimestampEntityIndex( );
        readonly RadomeCommandByReplyEntityIndex _radomeCommandByReplyEntityIndex = new RadomeCommandByReplyEntityIndex( );
        readonly RadomeCommandByReplyIsNullEntityIndex _radomeCommandByReplyIsNullEntityIndex = new RadomeCommandByReplyIsNullEntityIndex( );
        readonly RadomeCommandReplyByRadomeAndTimestampEntityIndex _radomeCommandReplyByRadomeAndTimestampEntityIndex = new RadomeCommandReplyByRadomeAndTimestampEntityIndex( );
        readonly RadomeCommandReplyByTimestampEntityIndex _radomeCommandReplyByTimestampEntityIndex = new RadomeCommandReplyByTimestampEntityIndex( );
        readonly RadomeCommandReplyByCommandEntityIndex _radomeCommandReplyByCommandEntityIndex = new RadomeCommandReplyByCommandEntityIndex( );
        readonly RadomeCommandReplyByCommandIsNullEntityIndex _radomeCommandReplyByCommandIsNullEntityIndex = new RadomeCommandReplyByCommandIsNullEntityIndex( );
        readonly RadomeConfigurationByRadomeAndTimestampEntityIndex _radomeConfigurationByRadomeAndTimestampEntityIndex = new RadomeConfigurationByRadomeAndTimestampEntityIndex( );
        readonly RadomeConfigurationByTimestampEntityIndex _radomeConfigurationByTimestampEntityIndex = new RadomeConfigurationByTimestampEntityIndex( );
        readonly ReferenceTimeseriesValueByTimeseriesAndTimestampEntityIndex _referenceTimeseriesValueByTimeseriesAndTimestampEntityIndex = new ReferenceTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly ReferenceTimeseriesValueByTimestampEntityIndex _referenceTimeseriesValueByTimestampEntityIndex = new ReferenceTimeseriesValueByTimestampEntityIndex( );
        readonly ReferenceTimeseriesValueByValueEntityIndex _referenceTimeseriesValueByValueEntityIndex = new ReferenceTimeseriesValueByValueEntityIndex( );
        readonly SByteTimeseriesValueByTimeseriesAndTimestampEntityIndex _sByteTimeseriesValueByTimeseriesAndTimestampEntityIndex = new SByteTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly SByteTimeseriesValueByTimestampEntityIndex _sByteTimeseriesValueByTimestampEntityIndex = new SByteTimeseriesValueByTimestampEntityIndex( );
        readonly SecurityDomainByNameEntityIndex _securityDomainByNameEntityIndex = new SecurityDomainByNameEntityIndex( );
        readonly SecurityIdentifierByDomainAndIdentityEntityIndex _securityIdentifierByDomainAndIdentityEntityIndex = new SecurityIdentifierByDomainAndIdentityEntityIndex( );
        readonly SecurityRoleByNameEntityIndex _securityRoleByNameEntityIndex = new SecurityRoleByNameEntityIndex( );
        readonly SecurityIdentifierRoleLinkByMemberAndStartEntityIndex _securityIdentifierRoleLinkByMemberAndStartEntityIndex = new SecurityIdentifierRoleLinkByMemberAndStartEntityIndex( );
        readonly SecurityIdentifierRoleLinkByRoleAndStartEntityIndex _securityIdentifierRoleLinkByRoleAndStartEntityIndex = new SecurityIdentifierRoleLinkByRoleAndStartEntityIndex( );
        readonly SecurityIdentifierRoleLinkByStartEntityIndex _securityIdentifierRoleLinkByStartEntityIndex = new SecurityIdentifierRoleLinkByStartEntityIndex( );
        readonly SecurityLoginSessionByLoginAndFromTimeEntityIndex _securityLoginSessionByLoginAndFromTimeEntityIndex = new SecurityLoginSessionByLoginAndFromTimeEntityIndex( );
        readonly SecurityLoginSessionByFromTimeEntityIndex _securityLoginSessionByFromTimeEntityIndex = new SecurityLoginSessionByFromTimeEntityIndex( );
        readonly SecurityPermissionByIdentifierTypeCodeAndTimestampEntityIndex _securityPermissionByIdentifierTypeCodeAndTimestampEntityIndex = new SecurityPermissionByIdentifierTypeCodeAndTimestampEntityIndex( );
        readonly SecurityPermissionByTimestampEntityIndex _securityPermissionByTimestampEntityIndex = new SecurityPermissionByTimestampEntityIndex( );
        readonly SingleTimeseriesValueByTimeseriesAndTimestampEntityIndex _singleTimeseriesValueByTimeseriesAndTimestampEntityIndex = new SingleTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly SingleTimeseriesValueByTimestampEntityIndex _singleTimeseriesValueByTimestampEntityIndex = new SingleTimeseriesValueByTimestampEntityIndex( );
        readonly StringTimeseriesValueByTimeseriesAndTimestampEntityIndex _stringTimeseriesValueByTimeseriesAndTimestampEntityIndex = new StringTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly StringTimeseriesValueByTimestampEntityIndex _stringTimeseriesValueByTimestampEntityIndex = new StringTimeseriesValueByTimestampEntityIndex( );
        readonly TimeseriesCatalogElementByCatalogAndNameEntityIndex _timeseriesCatalogElementByCatalogAndNameEntityIndex = new TimeseriesCatalogElementByCatalogAndNameEntityIndex( );
        readonly TimeseriesCatalogElementByCatalogIsNullAndNameEntityIndex _timeseriesCatalogElementByCatalogIsNullAndNameEntityIndex = new TimeseriesCatalogElementByCatalogIsNullAndNameEntityIndex( );
        readonly AisAidToNavigationOffPositionTimeseriesByAidToNavigationEntityIndex _aisAidToNavigationOffPositionTimeseriesByAidToNavigationEntityIndex = new AisAidToNavigationOffPositionTimeseriesByAidToNavigationEntityIndex( );
        readonly AisAidToNavigationOffPositionTimeseriesByAidToNavigationIsNullEntityIndex _aisAidToNavigationOffPositionTimeseriesByAidToNavigationIsNullEntityIndex = new AisAidToNavigationOffPositionTimeseriesByAidToNavigationIsNullEntityIndex( );
        readonly GyroCourseTimeseriesByGyroDeviceEntityIndex _gyroCourseTimeseriesByGyroDeviceEntityIndex = new GyroCourseTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroCourseTimeseriesByGyroDeviceIsNullEntityIndex _gyroCourseTimeseriesByGyroDeviceIsNullEntityIndex = new GyroCourseTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly GyroHeadingMagneticNorthTimeseriesByGyroDeviceEntityIndex _gyroHeadingMagneticNorthTimeseriesByGyroDeviceEntityIndex = new GyroHeadingMagneticNorthTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroHeadingMagneticNorthTimeseriesByGyroDeviceIsNullEntityIndex _gyroHeadingMagneticNorthTimeseriesByGyroDeviceIsNullEntityIndex = new GyroHeadingMagneticNorthTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly GyroHeadingTrueNorthTimeseriesByGyroDeviceEntityIndex _gyroHeadingTrueNorthTimeseriesByGyroDeviceEntityIndex = new GyroHeadingTrueNorthTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroHeadingTrueNorthTimeseriesByGyroDeviceIsNullEntityIndex _gyroHeadingTrueNorthTimeseriesByGyroDeviceIsNullEntityIndex = new GyroHeadingTrueNorthTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly GyroPitchTimeseriesByGyroDeviceEntityIndex _gyroPitchTimeseriesByGyroDeviceEntityIndex = new GyroPitchTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroPitchTimeseriesByGyroDeviceIsNullEntityIndex _gyroPitchTimeseriesByGyroDeviceIsNullEntityIndex = new GyroPitchTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly GyroRateOfTurnTimeseriesByGyroDeviceEntityIndex _gyroRateOfTurnTimeseriesByGyroDeviceEntityIndex = new GyroRateOfTurnTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroRateOfTurnTimeseriesByGyroDeviceIsNullEntityIndex _gyroRateOfTurnTimeseriesByGyroDeviceIsNullEntityIndex = new GyroRateOfTurnTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly GyroRollTimeseriesByGyroDeviceEntityIndex _gyroRollTimeseriesByGyroDeviceEntityIndex = new GyroRollTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroRollTimeseriesByGyroDeviceIsNullEntityIndex _gyroRollTimeseriesByGyroDeviceIsNullEntityIndex = new GyroRollTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly GyroSpeedTimeseriesByGyroDeviceEntityIndex _gyroSpeedTimeseriesByGyroDeviceEntityIndex = new GyroSpeedTimeseriesByGyroDeviceEntityIndex( );
        readonly GyroSpeedTimeseriesByGyroDeviceIsNullEntityIndex _gyroSpeedTimeseriesByGyroDeviceIsNullEntityIndex = new GyroSpeedTimeseriesByGyroDeviceIsNullEntityIndex( );
        readonly WeatherStationAbsoluteHumidityTimeseriesByWeatherStationEntityIndex _weatherStationAbsoluteHumidityTimeseriesByWeatherStationEntityIndex = new WeatherStationAbsoluteHumidityTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationAbsoluteHumidityTimeseriesByWeatherStationIsNullEntityIndex _weatherStationAbsoluteHumidityTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationAbsoluteHumidityTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationAirTemperatureTimeseriesByWeatherStationEntityIndex _weatherStationAirTemperatureTimeseriesByWeatherStationEntityIndex = new WeatherStationAirTemperatureTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationAirTemperatureTimeseriesByWeatherStationIsNullEntityIndex _weatherStationAirTemperatureTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationAirTemperatureTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationBarometricPressureTimeseriesByWeatherStationEntityIndex _weatherStationBarometricPressureTimeseriesByWeatherStationEntityIndex = new WeatherStationBarometricPressureTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationBarometricPressureTimeseriesByWeatherStationIsNullEntityIndex _weatherStationBarometricPressureTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationBarometricPressureTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationDewPointTimeseriesByWeatherStationEntityIndex _weatherStationDewPointTimeseriesByWeatherStationEntityIndex = new WeatherStationDewPointTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationDewPointTimeseriesByWeatherStationIsNullEntityIndex _weatherStationDewPointTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationDewPointTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationRelativeHumidityTimeseriesByWeatherStationEntityIndex _weatherStationRelativeHumidityTimeseriesByWeatherStationEntityIndex = new WeatherStationRelativeHumidityTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationRelativeHumidityTimeseriesByWeatherStationIsNullEntityIndex _weatherStationRelativeHumidityTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationRelativeHumidityTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationWaterTemperatureTimeseriesByWeatherStationEntityIndex _weatherStationWaterTemperatureTimeseriesByWeatherStationEntityIndex = new WeatherStationWaterTemperatureTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationWaterTemperatureTimeseriesByWeatherStationIsNullEntityIndex _weatherStationWaterTemperatureTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationWaterTemperatureTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationWindDirectionTimeseriesByWeatherStationEntityIndex _weatherStationWindDirectionTimeseriesByWeatherStationEntityIndex = new WeatherStationWindDirectionTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationWindDirectionTimeseriesByWeatherStationIsNullEntityIndex _weatherStationWindDirectionTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationWindDirectionTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly WeatherStationWindSpeedTimeseriesByWeatherStationEntityIndex _weatherStationWindSpeedTimeseriesByWeatherStationEntityIndex = new WeatherStationWindSpeedTimeseriesByWeatherStationEntityIndex( );
        readonly WeatherStationWindSpeedTimeseriesByWeatherStationIsNullEntityIndex _weatherStationWindSpeedTimeseriesByWeatherStationIsNullEntityIndex = new WeatherStationWindSpeedTimeseriesByWeatherStationIsNullEntityIndex( );
        readonly TimeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex _timeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex = new TimeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly TimeSpanTimeseriesValueByTimestampEntityIndex _timeSpanTimeseriesValueByTimestampEntityIndex = new TimeSpanTimeseriesValueByTimestampEntityIndex( );
        readonly TrackableItemTrackLinkByItemAndStartEntityIndex _trackableItemTrackLinkByItemAndStartEntityIndex = new TrackableItemTrackLinkByItemAndStartEntityIndex( );
        readonly TrackableItemTrackLinkByItemAndEndEntityIndex _trackableItemTrackLinkByItemAndEndEntityIndex = new TrackableItemTrackLinkByItemAndEndEntityIndex( );
        readonly TrackableItemTrackLinkByItemAndEndIsNullEntityIndex _trackableItemTrackLinkByItemAndEndIsNullEntityIndex = new TrackableItemTrackLinkByItemAndEndIsNullEntityIndex( );
        readonly TrackableItemTrackLinkByTrackAndStartEntityIndex _trackableItemTrackLinkByTrackAndStartEntityIndex = new TrackableItemTrackLinkByTrackAndStartEntityIndex( );
        readonly TrackableItemTrackLinkByTrackAndEndEntityIndex _trackableItemTrackLinkByTrackAndEndEntityIndex = new TrackableItemTrackLinkByTrackAndEndEntityIndex( );
        readonly TrackableItemTrackLinkByTrackAndEndIsNullEntityIndex _trackableItemTrackLinkByTrackAndEndIsNullEntityIndex = new TrackableItemTrackLinkByTrackAndEndIsNullEntityIndex( );
        readonly TrackableItemTrackLinkByStartEntityIndex _trackableItemTrackLinkByStartEntityIndex = new TrackableItemTrackLinkByStartEntityIndex( );
        readonly TrackBaseByTrackerTrackNumberAndTimestampEntityIndex _trackBaseByTrackerTrackNumberAndTimestampEntityIndex = new TrackBaseByTrackerTrackNumberAndTimestampEntityIndex( );
        readonly TrackBaseByTrackerAndTimestampEntityIndex _trackBaseByTrackerAndTimestampEntityIndex = new TrackBaseByTrackerAndTimestampEntityIndex( );
        readonly TrackBaseByTrackNumberEntityIndex _trackBaseByTrackNumberEntityIndex = new TrackBaseByTrackNumberEntityIndex( );
        readonly TrackBaseByTimestampEntityIndex _trackBaseByTimestampEntityIndex = new TrackBaseByTimestampEntityIndex( );
        readonly TrackerFilterParametersByTrackerAndNameEntityIndex _trackerFilterParametersByTrackerAndNameEntityIndex = new TrackerFilterParametersByTrackerAndNameEntityIndex( );
        readonly TrackerFilterParametersConfigurationByParametersAndTimestampEntityIndex _trackerFilterParametersConfigurationByParametersAndTimestampEntityIndex = new TrackerFilterParametersConfigurationByParametersAndTimestampEntityIndex( );
        readonly TrackerFilterParametersConfigurationByTimestampEntityIndex _trackerFilterParametersConfigurationByTimestampEntityIndex = new TrackerFilterParametersConfigurationByTimestampEntityIndex( );
        readonly TrackingServiceOptionsByTimestampEntityIndex _trackingServiceOptionsByTimestampEntityIndex = new TrackingServiceOptionsByTimestampEntityIndex( );
        readonly TrackLinkByPrimaryAndStartEntityIndex _trackLinkByPrimaryAndStartEntityIndex = new TrackLinkByPrimaryAndStartEntityIndex( );
        readonly TrackLinkBySecondaryAndStartEntityIndex _trackLinkBySecondaryAndStartEntityIndex = new TrackLinkBySecondaryAndStartEntityIndex( );
        readonly TrackLinkByStartEntityIndex _trackLinkByStartEntityIndex = new TrackLinkByStartEntityIndex( );
        readonly TrackValueByTrackAndTimestampEntityIndex _trackValueByTrackAndTimestampEntityIndex = new TrackValueByTrackAndTimestampEntityIndex( );
        readonly TrackValueByTimestampEntityIndex _trackValueByTimestampEntityIndex = new TrackValueByTimestampEntityIndex( );
        readonly TrackValue3DByTrackAndTimestampEntityIndex _trackValue3DByTrackAndTimestampEntityIndex = new TrackValue3DByTrackAndTimestampEntityIndex( );
        readonly TrackValue3DByTimestampEntityIndex _trackValue3DByTimestampEntityIndex = new TrackValue3DByTimestampEntityIndex( );
        readonly UInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex _uInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex = new UInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly UInt16TimeseriesValueByTimestampEntityIndex _uInt16TimeseriesValueByTimestampEntityIndex = new UInt16TimeseriesValueByTimestampEntityIndex( );
        readonly UInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex _uInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex = new UInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly UInt32TimeseriesValueByTimestampEntityIndex _uInt32TimeseriesValueByTimestampEntityIndex = new UInt32TimeseriesValueByTimestampEntityIndex( );
        readonly UInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex _uInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex = new UInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex( );
        readonly UInt64TimeseriesValueByTimestampEntityIndex _uInt64TimeseriesValueByTimestampEntityIndex = new UInt64TimeseriesValueByTimestampEntityIndex( );
        readonly VehicleTypeByNameEntityIndex _vehicleTypeByNameEntityIndex = new VehicleTypeByNameEntityIndex( );
        readonly VesselTypeByNameEntityIndex _vesselTypeByNameEntityIndex = new VesselTypeByNameEntityIndex( );
        readonly VesselTypeByCodeEntityIndex _vesselTypeByCodeEntityIndex = new VesselTypeByCodeEntityIndex( );
        readonly ViewByNameEntityIndex _viewByNameEntityIndex = new ViewByNameEntityIndex( );
        readonly ViewCameraLinkByViewAndStartEntityIndex _viewCameraLinkByViewAndStartEntityIndex = new ViewCameraLinkByViewAndStartEntityIndex( );
        readonly ViewCameraLinkByCameraAndStartEntityIndex _viewCameraLinkByCameraAndStartEntityIndex = new ViewCameraLinkByCameraAndStartEntityIndex( );
        readonly ViewCameraLinkByStartEntityIndex _viewCameraLinkByStartEntityIndex = new ViewCameraLinkByStartEntityIndex( );
        readonly ViewTrackerLinkByViewAndStartEntityIndex _viewTrackerLinkByViewAndStartEntityIndex = new ViewTrackerLinkByViewAndStartEntityIndex( );
        readonly ViewTrackerLinkByTrackerAndStartEntityIndex _viewTrackerLinkByTrackerAndStartEntityIndex = new ViewTrackerLinkByTrackerAndStartEntityIndex( );
        readonly ViewTrackerLinkByStartEntityIndex _viewTrackerLinkByStartEntityIndex = new ViewTrackerLinkByStartEntityIndex( );
        readonly WeatherStationCommandByWeatherStationAndTimestampEntityIndex _weatherStationCommandByWeatherStationAndTimestampEntityIndex = new WeatherStationCommandByWeatherStationAndTimestampEntityIndex( );
        readonly WeatherStationCommandByTimestampEntityIndex _weatherStationCommandByTimestampEntityIndex = new WeatherStationCommandByTimestampEntityIndex( );
        readonly WeatherStationCommandByReplyEntityIndex _weatherStationCommandByReplyEntityIndex = new WeatherStationCommandByReplyEntityIndex( );
        readonly WeatherStationCommandByReplyIsNullEntityIndex _weatherStationCommandByReplyIsNullEntityIndex = new WeatherStationCommandByReplyIsNullEntityIndex( );
        readonly WeatherStationCommandReplyByWeatherStationAndTimestampEntityIndex _weatherStationCommandReplyByWeatherStationAndTimestampEntityIndex = new WeatherStationCommandReplyByWeatherStationAndTimestampEntityIndex( );
        readonly WeatherStationCommandReplyByTimestampEntityIndex _weatherStationCommandReplyByTimestampEntityIndex = new WeatherStationCommandReplyByTimestampEntityIndex( );
        readonly WeatherStationCommandReplyByCommandEntityIndex _weatherStationCommandReplyByCommandEntityIndex = new WeatherStationCommandReplyByCommandEntityIndex( );
        readonly WeatherStationCommandReplyByCommandIsNullEntityIndex _weatherStationCommandReplyByCommandIsNullEntityIndex = new WeatherStationCommandReplyByCommandIsNullEntityIndex( );
        readonly WeatherStationConfigurationByWeatherStationAndTimestampEntityIndex _weatherStationConfigurationByWeatherStationAndTimestampEntityIndex = new WeatherStationConfigurationByWeatherStationAndTimestampEntityIndex( );
        readonly WeatherStationConfigurationByTimestampEntityIndex _weatherStationConfigurationByTimestampEntityIndex = new WeatherStationConfigurationByTimestampEntityIndex( );
        readonly ZoneByNameEntityIndex _zoneByNameEntityIndex = new ZoneByNameEntityIndex( );
        readonly ZoneExceptionsByZoneAndTimestampEntityIndex _zoneExceptionsByZoneAndTimestampEntityIndex = new ZoneExceptionsByZoneAndTimestampEntityIndex( );
        readonly ZoneExceptionsByTimestampEntityIndex _zoneExceptionsByTimestampEntityIndex = new ZoneExceptionsByTimestampEntityIndex( );
        readonly ZoneExceptionsVesselLinkByZoneExceptionsAndVesselEntityIndex _zoneExceptionsVesselLinkByZoneExceptionsAndVesselEntityIndex = new ZoneExceptionsVesselLinkByZoneExceptionsAndVesselEntityIndex( );
        readonly ZoneExceptionsVesselLinkByVesselEntityIndex _zoneExceptionsVesselLinkByVesselEntityIndex = new ZoneExceptionsVesselLinkByVesselEntityIndex( );
        readonly ZoneTrackAlarmByTrackAndTimestampEntityIndex _zoneTrackAlarmByTrackAndTimestampEntityIndex = new ZoneTrackAlarmByTrackAndTimestampEntityIndex( );
        readonly ZoneTrackAlarmByZoneTrackAndTimestampEntityIndex _zoneTrackAlarmByZoneTrackAndTimestampEntityIndex = new ZoneTrackAlarmByZoneTrackAndTimestampEntityIndex( );
        readonly ZoneTrackAlarmByTimestampEntityIndex _zoneTrackAlarmByTimestampEntityIndex = new ZoneTrackAlarmByTimestampEntityIndex( );
        public List<AircraftTypeEntity> GetAircraftTypeCollection( )
        {
            throw new NotImplementedException();
        }

        public AircraftTypeEntity? GetAircraftTypeByName( string name )
        {
            return _aircraftTypeByNameEntityIndex.GetAircraftTypeByName( name );
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDevice( Guid aisDevice )
        {
            return _aisDeviceCommandByAisDeviceAndTimestampEntityIndex.GetAisDeviceCommandCollectionByAisDevice( aisDevice );
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceCommandByAisDeviceAndTimestampEntityIndex.GetAisDeviceCommandCollectionByAisDeviceAndTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceCommandByAisDeviceAndTimestampEntityIndex.GetAisDeviceCommandCollectionByAisDeviceAtTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceCommandByAisDeviceAndTimestampEntityIndex.GetAisDeviceCommandCollectionByAisDeviceFromTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceCommandByAisDeviceAndTimestampEntityIndex.GetAisDeviceCommandCollectionByAisDeviceUntilTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _aisDeviceCommandByAisDeviceAndTimestampEntityIndex.GetAisDeviceCommandCollectionByAisDeviceOverTimestamp( aisDevice, fromTimestamp, untilTimestamp );
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            return _aisDeviceCommandByTimestampEntityIndex.GetAisDeviceCommandCollectionByTimestamp( timestamp );
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            return _aisDeviceCommandByTimestampEntityIndex.GetAisDeviceCommandCollectionAtTimestamp( timestamp );
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            return _aisDeviceCommandByTimestampEntityIndex.GetAisDeviceCommandCollectionFromTimestamp( timestamp );
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            return _aisDeviceCommandByTimestampEntityIndex.GetAisDeviceCommandCollectionUntilTimestamp( timestamp );
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _aisDeviceCommandByTimestampEntityIndex.GetAisDeviceCommandCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<AisDeviceCommandEntity> GetAisDeviceCommandCollectionByReply( Guid? reply )
        {
            return _aisDeviceCommandByReplyEntityIndex.GetAisDeviceCommandCollectionByReply( reply );
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDevice( Guid aisDevice )
        {
            return _aisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex.GetAisDeviceCommandReplyCollectionByAisDevice( aisDevice );
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex.GetAisDeviceCommandReplyCollectionByAisDeviceAndTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex.GetAisDeviceCommandReplyCollectionByAisDeviceAtTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex.GetAisDeviceCommandReplyCollectionByAisDeviceFromTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex.GetAisDeviceCommandReplyCollectionByAisDeviceUntilTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _aisDeviceCommandReplyByAisDeviceAndTimestampEntityIndex.GetAisDeviceCommandReplyCollectionByAisDeviceOverTimestamp( aisDevice, fromTimestamp, untilTimestamp );
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            return _aisDeviceCommandReplyByTimestampEntityIndex.GetAisDeviceCommandReplyCollectionByTimestamp( timestamp );
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            return _aisDeviceCommandReplyByTimestampEntityIndex.GetAisDeviceCommandReplyCollectionAtTimestamp( timestamp );
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            return _aisDeviceCommandReplyByTimestampEntityIndex.GetAisDeviceCommandReplyCollectionFromTimestamp( timestamp );
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            return _aisDeviceCommandReplyByTimestampEntityIndex.GetAisDeviceCommandReplyCollectionUntilTimestamp( timestamp );
        }

        public List<AisDeviceCommandReplyEntity> GetAisDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _aisDeviceCommandReplyByTimestampEntityIndex.GetAisDeviceCommandReplyCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public AisDeviceCommandReplyEntity? GetAisDeviceCommandReplyByCommand( Guid? command )
        {
            return _aisDeviceCommandReplyByCommandEntityIndex.GetAisDeviceCommandReplyByCommand( command );
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionByAisDevice( Guid aisDevice )
        {
            return _aisDeviceConfigurationByAisDeviceAndTimestampEntityIndex.GetAisDeviceConfigurationCollectionByAisDevice( aisDevice );
        }

        public AisDeviceConfigurationEntity? GetAisDeviceConfigurationByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceConfigurationByAisDeviceAndTimestampEntityIndex.GetAisDeviceConfigurationByAisDeviceAndTimestamp( aisDevice, timestamp );
        }

        public AisDeviceConfigurationEntity? GetAisDeviceConfigurationByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceConfigurationByAisDeviceAndTimestampEntityIndex.GetAisDeviceConfigurationByAisDeviceAtTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceConfigurationByAisDeviceAndTimestampEntityIndex.GetAisDeviceConfigurationByAisDeviceFromTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceConfigurationByAisDeviceAndTimestampEntityIndex.GetAisDeviceConfigurationByAisDeviceUntilTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _aisDeviceConfigurationByAisDeviceAndTimestampEntityIndex.GetAisDeviceConfigurationByAisDeviceOverTimestamp( aisDevice, fromTimestamp, untilTimestamp );
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _aisDeviceConfigurationByTimestampEntityIndex.GetAisDeviceConfigurationCollectionByTimestamp( timestamp );
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _aisDeviceConfigurationByTimestampEntityIndex.GetAisDeviceConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _aisDeviceConfigurationByTimestampEntityIndex.GetAisDeviceConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _aisDeviceConfigurationByTimestampEntityIndex.GetAisDeviceConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<AisDeviceConfigurationEntity> GetAisDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _aisDeviceConfigurationByTimestampEntityIndex.GetAisDeviceConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDevice( Guid aisDevice )
        {
            return _aisDeviceRawMessageByAisDeviceAndTimestampEntityIndex.GetAisDeviceRawMessageCollectionByAisDevice( aisDevice );
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceRawMessageByAisDeviceAndTimestampEntityIndex.GetAisDeviceRawMessageCollectionByAisDeviceAndTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceRawMessageByAisDeviceAndTimestampEntityIndex.GetAisDeviceRawMessageCollectionByAisDeviceAtTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceRawMessageByAisDeviceAndTimestampEntityIndex.GetAisDeviceRawMessageCollectionByAisDeviceFromTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceRawMessageByAisDeviceAndTimestampEntityIndex.GetAisDeviceRawMessageCollectionByAisDeviceUntilTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _aisDeviceRawMessageByAisDeviceAndTimestampEntityIndex.GetAisDeviceRawMessageCollectionByAisDeviceOverTimestamp( aisDevice, fromTimestamp, untilTimestamp );
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionByTimestamp( DateTime timestamp )
        {
            return _aisDeviceRawMessageByTimestampEntityIndex.GetAisDeviceRawMessageCollectionByTimestamp( timestamp );
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionAtTimestamp( DateTime timestamp )
        {
            return _aisDeviceRawMessageByTimestampEntityIndex.GetAisDeviceRawMessageCollectionAtTimestamp( timestamp );
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionFromTimestamp( DateTime timestamp )
        {
            return _aisDeviceRawMessageByTimestampEntityIndex.GetAisDeviceRawMessageCollectionFromTimestamp( timestamp );
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionUntilTimestamp( DateTime timestamp )
        {
            return _aisDeviceRawMessageByTimestampEntityIndex.GetAisDeviceRawMessageCollectionUntilTimestamp( timestamp );
        }

        public List<AisDeviceRawMessageEntity> GetAisDeviceRawMessageCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _aisDeviceRawMessageByTimestampEntityIndex.GetAisDeviceRawMessageCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDevice( Guid aisDevice )
        {
            return _aisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex.GetAisDeviceRawSentenceCollectionByAisDevice( aisDevice );
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceAndTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex.GetAisDeviceRawSentenceCollectionByAisDeviceAndTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceAtTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex.GetAisDeviceRawSentenceCollectionByAisDeviceAtTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceFromTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex.GetAisDeviceRawSentenceCollectionByAisDeviceFromTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceUntilTimestamp( Guid aisDevice, DateTime timestamp )
        {
            return _aisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex.GetAisDeviceRawSentenceCollectionByAisDeviceUntilTimestamp( aisDevice, timestamp );
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByAisDeviceOverTimestamp( Guid aisDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _aisDeviceRawSentenceByAisDeviceAndTimestampEntityIndex.GetAisDeviceRawSentenceCollectionByAisDeviceOverTimestamp( aisDevice, fromTimestamp, untilTimestamp );
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionByTimestamp( DateTime timestamp )
        {
            return _aisDeviceRawSentenceByTimestampEntityIndex.GetAisDeviceRawSentenceCollectionByTimestamp( timestamp );
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionAtTimestamp( DateTime timestamp )
        {
            return _aisDeviceRawSentenceByTimestampEntityIndex.GetAisDeviceRawSentenceCollectionAtTimestamp( timestamp );
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionFromTimestamp( DateTime timestamp )
        {
            return _aisDeviceRawSentenceByTimestampEntityIndex.GetAisDeviceRawSentenceCollectionFromTimestamp( timestamp );
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionUntilTimestamp( DateTime timestamp )
        {
            return _aisDeviceRawSentenceByTimestampEntityIndex.GetAisDeviceRawSentenceCollectionUntilTimestamp( timestamp );
        }

        public List<AisDeviceRawSentenceEntity> GetAisDeviceRawSentenceCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _aisDeviceRawSentenceByTimestampEntityIndex.GetAisDeviceRawSentenceCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<AisMessageEntity> GetAisMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisMessageEntity> GetAisMessageCollectionByAisDevice( Guid aisDevice )
        {
            return _aisMessageByAisDeviceAndReceivedTimestampEntityIndex.GetAisMessageCollectionByAisDevice( aisDevice );
        }

        public AisMessageEntity? GetAisMessageByAisDeviceAndReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            return _aisMessageByAisDeviceAndReceivedTimestampEntityIndex.GetAisMessageByAisDeviceAndReceivedTimestamp( aisDevice, receivedTimestamp );
        }

        public AisMessageEntity? GetAisMessageByAisDeviceAtReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            return _aisMessageByAisDeviceAndReceivedTimestampEntityIndex.GetAisMessageByAisDeviceAtReceivedTimestamp( aisDevice, receivedTimestamp );
        }

        public List<AisMessageEntity> GetAisMessageByAisDeviceFromReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            return _aisMessageByAisDeviceAndReceivedTimestampEntityIndex.GetAisMessageByAisDeviceFromReceivedTimestamp( aisDevice, receivedTimestamp );
        }

        public List<AisMessageEntity> GetAisMessageByAisDeviceUntilReceivedTimestamp( Guid aisDevice, DateTime receivedTimestamp )
        {
            return _aisMessageByAisDeviceAndReceivedTimestampEntityIndex.GetAisMessageByAisDeviceUntilReceivedTimestamp( aisDevice, receivedTimestamp );
        }

        public List<AisMessageEntity> GetAisMessageByAisDeviceOverReceivedTimestamp( Guid aisDevice, DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            return _aisMessageByAisDeviceAndReceivedTimestampEntityIndex.GetAisMessageByAisDeviceOverReceivedTimestamp( aisDevice, fromReceivedTimestamp, untilReceivedTimestamp );
        }

        public List<AisMessageEntity> GetAisMessageCollectionByReceivedTimestamp( DateTime receivedTimestamp )
        {
            return _aisMessageByReceivedTimestampEntityIndex.GetAisMessageCollectionByReceivedTimestamp( receivedTimestamp );
        }

        public List<AisMessageEntity> GetAisMessageCollectionAtReceivedTimestamp( DateTime receivedTimestamp )
        {
            return _aisMessageByReceivedTimestampEntityIndex.GetAisMessageCollectionAtReceivedTimestamp( receivedTimestamp );
        }

        public List<AisMessageEntity> GetAisMessageCollectionFromReceivedTimestamp( DateTime receivedTimestamp )
        {
            return _aisMessageByReceivedTimestampEntityIndex.GetAisMessageCollectionFromReceivedTimestamp( receivedTimestamp );
        }

        public List<AisMessageEntity> GetAisMessageCollectionUntilReceivedTimestamp( DateTime receivedTimestamp )
        {
            return _aisMessageByReceivedTimestampEntityIndex.GetAisMessageCollectionUntilReceivedTimestamp( receivedTimestamp );
        }

        public List<AisMessageEntity> GetAisMessageCollectionOverReceivedTimestamp( DateTime fromReceivedTimestamp, DateTime untilReceivedTimestamp )
        {
            return _aisMessageByReceivedTimestampEntityIndex.GetAisMessageCollectionOverReceivedTimestamp( fromReceivedTimestamp, untilReceivedTimestamp );
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsi( Guid? mmsi )
        {
            return _aisMessageByMmsiAndMessageSequenceNumberEntityIndex.GetAisMessageCollectionByMmsi( mmsi );
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiAndMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            return _aisMessageByMmsiAndMessageSequenceNumberEntityIndex.GetAisMessageCollectionByMmsiAndMessageSequenceNumber( mmsi, messageSequenceNumber );
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiFromMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            return _aisMessageByMmsiAndMessageSequenceNumberEntityIndex.GetAisMessageCollectionByMmsiFromMessageSequenceNumber( mmsi, messageSequenceNumber );
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiUntilMessageSequenceNumber( Guid? mmsi, long messageSequenceNumber )
        {
            return _aisMessageByMmsiAndMessageSequenceNumberEntityIndex.GetAisMessageCollectionByMmsiUntilMessageSequenceNumber( mmsi, messageSequenceNumber );
        }

        public List<AisMessageEntity> GetAisMessageCollectionByMmsiOverMessageSequenceNumber( Guid mmsi, long fromMessageSequenceNumber, long untilMessageSequenceNumber )
        {
            return _aisMessageByMmsiAndMessageSequenceNumberEntityIndex.GetAisMessageCollectionByMmsiOverMessageSequenceNumber( mmsi, fromMessageSequenceNumber, untilMessageSequenceNumber );
        }

        public List<AidToNavigationReportMessageEntity> GetAidToNavigationReportMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisAddressedSafetyRelatedMessageEntity> GetAisAddressedSafetyRelatedMessageCollectionByDestinationMmsi( Guid? destinationMmsi )
        {
            return _aisAddressedSafetyRelatedMessageByDestinationMmsiEntityIndex.GetAisAddressedSafetyRelatedMessageCollectionByDestinationMmsi( destinationMmsi );
        }

        public List<AisBaseStationReportMessageEntity> GetAisBaseStationReportMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAcknowledgeMessageEntity> GetAisBinaryAcknowledgeMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisBinaryAddressedMessageEntity> GetAisBinaryAddressedMessageCollectionByDestinationMmsi( Guid? destinationMmsi )
        {
            return _aisBinaryAddressedMessageByDestinationMmsiEntityIndex.GetAisBinaryAddressedMessageCollectionByDestinationMmsi( destinationMmsi );
        }

        public List<AisBinaryBroadcastMessageEntity> GetAisBinaryBroadcastMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDataLinkManagementMessageEntity> GetAisDataLinkManagementMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisExtendedClassBCsPositionReportMessageEntity> GetAisExtendedClassBCsPositionReportMessageCollectionByName( Guid? name )
        {
            return _aisExtendedClassBCsPositionReportMessageByNameEntityIndex.GetAisExtendedClassBCsPositionReportMessageCollectionByName( name );
        }

        public List<AisInterrogationMessageEntity> GetAisInterrogationMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageBaseEntity> GetAisPositionReportClassAMessageBaseCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAAssignedScheduleMessageEntity> GetAisPositionReportClassAAssignedScheduleMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAMessageEntity> GetAisPositionReportClassAMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportClassAResponseToInterrogationMessageEntity> GetAisPositionReportClassAResponseToInterrogationMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisPositionReportForLongRangeApplicationsMessageEntity> GetAisPositionReportForLongRangeApplicationsMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisSafetyRelatedAcknowledgmentMessageEntity> GetAisSafetyRelatedAcknowledgmentMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardClassBCsPositionReportMessageEntity> GetAisStandardClassBCsPositionReportMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStandardSarAircraftPositionReportMessageEntity> GetAisStandardSarAircraftPositionReportMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByImoNumber( Guid? imoNumber )
        {
            return _aisStaticAndVoyageRelatedDataMessageByImoNumberEntityIndex.GetAisStaticAndVoyageRelatedDataMessageCollectionByImoNumber( imoNumber );
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByCallsign( Guid? callsign )
        {
            return _aisStaticAndVoyageRelatedDataMessageByCallsignEntityIndex.GetAisStaticAndVoyageRelatedDataMessageCollectionByCallsign( callsign );
        }

        public List<AisStaticAndVoyageRelatedDataMessageEntity> GetAisStaticAndVoyageRelatedDataMessageCollectionByShipName( Guid? shipName )
        {
            return _aisStaticAndVoyageRelatedDataMessageByShipNameEntityIndex.GetAisStaticAndVoyageRelatedDataMessageCollectionByShipName( shipName );
        }

        public List<AisStaticDataReportMessageEntity> GetAisStaticDataReportMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartAMessageEntity> GetAisStaticDataReportPartAMessageCollectionByShipName( Guid? shipName )
        {
            return _aisStaticDataReportPartAMessageByShipNameEntityIndex.GetAisStaticDataReportPartAMessageCollectionByShipName( shipName );
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByCallsign( Guid? callsign )
        {
            return _aisStaticDataReportPartBMessageByCallsignEntityIndex.GetAisStaticDataReportPartBMessageCollectionByCallsign( callsign );
        }

        public List<AisStaticDataReportPartBMessageEntity> GetAisStaticDataReportPartBMessageCollectionByMothershipMmsi( Guid? mothershipMmsi )
        {
            return _aisStaticDataReportPartBMessageByMothershipMmsiEntityIndex.GetAisStaticDataReportPartBMessageCollectionByMothershipMmsi( mothershipMmsi );
        }

        public List<AisUtcAndDateInquiryMessageEntity> GetAisUtcAndDateInquiryMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisUtcAndDateResponseMessageEntity> GetAisUtcAndDateResponseMessageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionByAlarm( Guid alarm )
        {
            return _alarmStateChangeByAlarmAndTimestampEntityIndex.GetAlarmStateChangeCollectionByAlarm( alarm );
        }

        public AlarmStateChangeEntity? GetAlarmStateChangeByAlarmAndTimestamp( Guid alarm, DateTime timestamp )
        {
            return _alarmStateChangeByAlarmAndTimestampEntityIndex.GetAlarmStateChangeByAlarmAndTimestamp( alarm, timestamp );
        }

        public AlarmStateChangeEntity? GetAlarmStateChangeByAlarmAtTimestamp( Guid alarm, DateTime timestamp )
        {
            return _alarmStateChangeByAlarmAndTimestampEntityIndex.GetAlarmStateChangeByAlarmAtTimestamp( alarm, timestamp );
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeByAlarmFromTimestamp( Guid alarm, DateTime timestamp )
        {
            return _alarmStateChangeByAlarmAndTimestampEntityIndex.GetAlarmStateChangeByAlarmFromTimestamp( alarm, timestamp );
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeByAlarmUntilTimestamp( Guid alarm, DateTime timestamp )
        {
            return _alarmStateChangeByAlarmAndTimestampEntityIndex.GetAlarmStateChangeByAlarmUntilTimestamp( alarm, timestamp );
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeByAlarmOverTimestamp( Guid alarm, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _alarmStateChangeByAlarmAndTimestampEntityIndex.GetAlarmStateChangeByAlarmOverTimestamp( alarm, fromTimestamp, untilTimestamp );
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionByTimestamp( DateTime timestamp )
        {
            return _alarmStateChangeByTimestampEntityIndex.GetAlarmStateChangeCollectionByTimestamp( timestamp );
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionAtTimestamp( DateTime timestamp )
        {
            return _alarmStateChangeByTimestampEntityIndex.GetAlarmStateChangeCollectionAtTimestamp( timestamp );
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionFromTimestamp( DateTime timestamp )
        {
            return _alarmStateChangeByTimestampEntityIndex.GetAlarmStateChangeCollectionFromTimestamp( timestamp );
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionUntilTimestamp( DateTime timestamp )
        {
            return _alarmStateChangeByTimestampEntityIndex.GetAlarmStateChangeCollectionUntilTimestamp( timestamp );
        }

        public List<AlarmStateChangeEntity> GetAlarmStateChangeCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _alarmStateChangeByTimestampEntityIndex.GetAlarmStateChangeCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<BaseStationTypeEntity> GetBaseStationTypeCollection( )
        {
            throw new NotImplementedException();
        }

        public BaseStationTypeEntity? GetBaseStationTypeByName( string name )
        {
            return _baseStationTypeByNameEntityIndex.GetBaseStationTypeByName( name );
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _binaryTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetBinaryTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public BinaryTimeseriesValueEntity? GetBinaryTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _binaryTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetBinaryTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public BinaryTimeseriesValueEntity? GetBinaryTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _binaryTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetBinaryTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _binaryTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetBinaryTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _binaryTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetBinaryTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _binaryTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetBinaryTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _binaryTimeseriesValueByTimestampEntityIndex.GetBinaryTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _binaryTimeseriesValueByTimestampEntityIndex.GetBinaryTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _binaryTimeseriesValueByTimestampEntityIndex.GetBinaryTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _binaryTimeseriesValueByTimestampEntityIndex.GetBinaryTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<BinaryTimeseriesValueEntity> GetBinaryTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _binaryTimeseriesValueByTimestampEntityIndex.GetBinaryTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<BookmarkEntity> GetBookmarkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BookmarkEntity> GetBookmarkCollectionByView( Guid view )
        {
            return _bookmarkByViewEntityIndex.GetBookmarkCollectionByView( view );
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _booleanTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetBooleanTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public BooleanTimeseriesValueEntity? GetBooleanTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _booleanTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetBooleanTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public BooleanTimeseriesValueEntity? GetBooleanTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _booleanTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetBooleanTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _booleanTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetBooleanTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _booleanTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetBooleanTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _booleanTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetBooleanTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _booleanTimeseriesValueByTimestampEntityIndex.GetBooleanTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _booleanTimeseriesValueByTimestampEntityIndex.GetBooleanTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _booleanTimeseriesValueByTimestampEntityIndex.GetBooleanTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _booleanTimeseriesValueByTimestampEntityIndex.GetBooleanTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<BooleanTimeseriesValueEntity> GetBooleanTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _booleanTimeseriesValueByTimestampEntityIndex.GetBooleanTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _byteTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetByteTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public ByteTimeseriesValueEntity? GetByteTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _byteTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetByteTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public ByteTimeseriesValueEntity? GetByteTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _byteTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetByteTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _byteTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetByteTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _byteTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetByteTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _byteTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetByteTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _byteTimeseriesValueByTimestampEntityIndex.GetByteTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _byteTimeseriesValueByTimestampEntityIndex.GetByteTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _byteTimeseriesValueByTimestampEntityIndex.GetByteTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _byteTimeseriesValueByTimestampEntityIndex.GetByteTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<ByteTimeseriesValueEntity> GetByteTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _byteTimeseriesValueByTimestampEntityIndex.GetByteTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<CameraCommandEntity> GetCameraCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCamera( Guid camera )
        {
            return _cameraCommandByCameraAndTimestampEntityIndex.GetCameraCommandCollectionByCamera( camera );
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraCommandByCameraAndTimestampEntityIndex.GetCameraCommandCollectionByCameraAndTimestamp( camera, timestamp );
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraCommandByCameraAndTimestampEntityIndex.GetCameraCommandCollectionByCameraAtTimestamp( camera, timestamp );
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraCommandByCameraAndTimestampEntityIndex.GetCameraCommandCollectionByCameraFromTimestamp( camera, timestamp );
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraCommandByCameraAndTimestampEntityIndex.GetCameraCommandCollectionByCameraUntilTimestamp( camera, timestamp );
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraCommandByCameraAndTimestampEntityIndex.GetCameraCommandCollectionByCameraOverTimestamp( camera, fromTimestamp, untilTimestamp );
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByTimestamp( DateTime timestamp )
        {
            return _cameraCommandByTimestampEntityIndex.GetCameraCommandCollectionByTimestamp( timestamp );
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionAtTimestamp( DateTime timestamp )
        {
            return _cameraCommandByTimestampEntityIndex.GetCameraCommandCollectionAtTimestamp( timestamp );
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionFromTimestamp( DateTime timestamp )
        {
            return _cameraCommandByTimestampEntityIndex.GetCameraCommandCollectionFromTimestamp( timestamp );
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            return _cameraCommandByTimestampEntityIndex.GetCameraCommandCollectionUntilTimestamp( timestamp );
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraCommandByTimestampEntityIndex.GetCameraCommandCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<CameraCommandEntity> GetCameraCommandCollectionByReply( Guid? reply )
        {
            return _cameraCommandByReplyEntityIndex.GetCameraCommandCollectionByReply( reply );
        }

        public List<CameraCommandAbsoluteMoveEntity> GetCameraCommandAbsoluteMoveCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandAdjustPanTiltZoomEntity> GetCameraCommandAdjustPanTiltZoomCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandContinuousMoveEntity> GetCameraCommandContinuousMoveCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandGeoMoveEntity> GetCameraCommandGeoMoveCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRelativeMoveEntity> GetCameraCommandRelativeMoveCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReleasePTZOwnershipEntity> GetCameraCommandReleasePTZOwnershipCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandRequestPTZOwnershipEntity> GetCameraCommandRequestPTZOwnershipCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetAutoFocusEntity> GetCameraCommandSetAutoFocusCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetBlackAndWhiteEntity> GetCameraCommandSetBlackAndWhiteCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetFollowedEntity> GetCameraCommandSetFollowedCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetInfraRedLampEntity> GetCameraCommandSetInfraRedLampCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWasherEntity> GetCameraCommandSetWasherCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandSetWiperEntity> GetCameraCommandSetWiperCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandStopEntity> GetCameraCommandStopCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCamera( Guid camera )
        {
            return _cameraCommandReplyByCameraAndTimestampEntityIndex.GetCameraCommandReplyCollectionByCamera( camera );
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraCommandReplyByCameraAndTimestampEntityIndex.GetCameraCommandReplyCollectionByCameraAndTimestamp( camera, timestamp );
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraCommandReplyByCameraAndTimestampEntityIndex.GetCameraCommandReplyCollectionByCameraAtTimestamp( camera, timestamp );
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraCommandReplyByCameraAndTimestampEntityIndex.GetCameraCommandReplyCollectionByCameraFromTimestamp( camera, timestamp );
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraCommandReplyByCameraAndTimestampEntityIndex.GetCameraCommandReplyCollectionByCameraUntilTimestamp( camera, timestamp );
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraCommandReplyByCameraAndTimestampEntityIndex.GetCameraCommandReplyCollectionByCameraOverTimestamp( camera, fromTimestamp, untilTimestamp );
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            return _cameraCommandReplyByTimestampEntityIndex.GetCameraCommandReplyCollectionByTimestamp( timestamp );
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            return _cameraCommandReplyByTimestampEntityIndex.GetCameraCommandReplyCollectionAtTimestamp( timestamp );
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            return _cameraCommandReplyByTimestampEntityIndex.GetCameraCommandReplyCollectionFromTimestamp( timestamp );
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            return _cameraCommandReplyByTimestampEntityIndex.GetCameraCommandReplyCollectionUntilTimestamp( timestamp );
        }

        public List<CameraCommandReplyEntity> GetCameraCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraCommandReplyByTimestampEntityIndex.GetCameraCommandReplyCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public CameraCommandReplyEntity? GetCameraCommandReplyByCommand( Guid? command )
        {
            return _cameraCommandReplyByCommandEntityIndex.GetCameraCommandReplyByCommand( command );
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionByCamera( Guid camera )
        {
            return _cameraConfigurationByCameraAndTimestampEntityIndex.GetCameraConfigurationCollectionByCamera( camera );
        }

        public CameraConfigurationEntity? GetCameraConfigurationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraConfigurationByCameraAndTimestampEntityIndex.GetCameraConfigurationByCameraAndTimestamp( camera, timestamp );
        }

        public CameraConfigurationEntity? GetCameraConfigurationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraConfigurationByCameraAndTimestampEntityIndex.GetCameraConfigurationByCameraAtTimestamp( camera, timestamp );
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraConfigurationByCameraAndTimestampEntityIndex.GetCameraConfigurationByCameraFromTimestamp( camera, timestamp );
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraConfigurationByCameraAndTimestampEntityIndex.GetCameraConfigurationByCameraUntilTimestamp( camera, timestamp );
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraConfigurationByCameraAndTimestampEntityIndex.GetCameraConfigurationByCameraOverTimestamp( camera, fromTimestamp, untilTimestamp );
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _cameraConfigurationByTimestampEntityIndex.GetCameraConfigurationCollectionByTimestamp( timestamp );
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _cameraConfigurationByTimestampEntityIndex.GetCameraConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _cameraConfigurationByTimestampEntityIndex.GetCameraConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _cameraConfigurationByTimestampEntityIndex.GetCameraConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<CameraConfigurationEntity> GetCameraConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraConfigurationByTimestampEntityIndex.GetCameraConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionByCamera( Guid camera )
        {
            return _cameraPanCalibrationByCameraAndTimestampEntityIndex.GetCameraPanCalibrationCollectionByCamera( camera );
        }

        public CameraPanCalibrationEntity? GetCameraPanCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraPanCalibrationByCameraAndTimestampEntityIndex.GetCameraPanCalibrationByCameraAndTimestamp( camera, timestamp );
        }

        public CameraPanCalibrationEntity? GetCameraPanCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraPanCalibrationByCameraAndTimestampEntityIndex.GetCameraPanCalibrationByCameraAtTimestamp( camera, timestamp );
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraPanCalibrationByCameraAndTimestampEntityIndex.GetCameraPanCalibrationByCameraFromTimestamp( camera, timestamp );
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraPanCalibrationByCameraAndTimestampEntityIndex.GetCameraPanCalibrationByCameraUntilTimestamp( camera, timestamp );
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraPanCalibrationByCameraAndTimestampEntityIndex.GetCameraPanCalibrationByCameraOverTimestamp( camera, fromTimestamp, untilTimestamp );
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            return _cameraPanCalibrationByTimestampEntityIndex.GetCameraPanCalibrationCollectionByTimestamp( timestamp );
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            return _cameraPanCalibrationByTimestampEntityIndex.GetCameraPanCalibrationCollectionAtTimestamp( timestamp );
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            return _cameraPanCalibrationByTimestampEntityIndex.GetCameraPanCalibrationCollectionFromTimestamp( timestamp );
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _cameraPanCalibrationByTimestampEntityIndex.GetCameraPanCalibrationCollectionUntilTimestamp( timestamp );
        }

        public List<CameraPanCalibrationEntity> GetCameraPanCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraPanCalibrationByTimestampEntityIndex.GetCameraPanCalibrationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueCollectionByPanCalibration( Guid panCalibration )
        {
            return _cameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex.GetCameraPanCalibrationValueCollectionByPanCalibration( panCalibration );
        }

        public CameraPanCalibrationValueEntity? GetCameraPanCalibrationValueByPanCalibrationAndPanAngle( Guid panCalibration, double panAngle )
        {
            return _cameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex.GetCameraPanCalibrationValueByPanCalibrationAndPanAngle( panCalibration, panAngle );
        }

        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueByPanCalibrationFromPanAngle( Guid panCalibration, double panAngle )
        {
            return _cameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex.GetCameraPanCalibrationValueByPanCalibrationFromPanAngle( panCalibration, panAngle );
        }

        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueByPanCalibrationUntilPanAngle( Guid panCalibration, double panAngle )
        {
            return _cameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex.GetCameraPanCalibrationValueByPanCalibrationUntilPanAngle( panCalibration, panAngle );
        }

        public List<CameraPanCalibrationValueEntity> GetCameraPanCalibrationValueByPanCalibrationOverPanAngle( Guid panCalibration, double fromPanAngle, double untilPanAngle )
        {
            return _cameraPanCalibrationValueByPanCalibrationAndPanAngleEntityIndex.GetCameraPanCalibrationValueByPanCalibrationOverPanAngle( panCalibration, fromPanAngle, untilPanAngle );
        }

        public List<CameraStatusEntity> GetCameraStatusCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionByCamera( Guid camera )
        {
            return _cameraStatusByCameraAndTimestampEntityIndex.GetCameraStatusCollectionByCamera( camera );
        }

        public CameraStatusEntity? GetCameraStatusByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraStatusByCameraAndTimestampEntityIndex.GetCameraStatusByCameraAndTimestamp( camera, timestamp );
        }

        public CameraStatusEntity? GetCameraStatusByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraStatusByCameraAndTimestampEntityIndex.GetCameraStatusByCameraAtTimestamp( camera, timestamp );
        }

        public List<CameraStatusEntity> GetCameraStatusByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraStatusByCameraAndTimestampEntityIndex.GetCameraStatusByCameraFromTimestamp( camera, timestamp );
        }

        public List<CameraStatusEntity> GetCameraStatusByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraStatusByCameraAndTimestampEntityIndex.GetCameraStatusByCameraUntilTimestamp( camera, timestamp );
        }

        public List<CameraStatusEntity> GetCameraStatusByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraStatusByCameraAndTimestampEntityIndex.GetCameraStatusByCameraOverTimestamp( camera, fromTimestamp, untilTimestamp );
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionByTrack( Guid? track )
        {
            return _cameraStatusByTrackAndTimestampEntityIndex.GetCameraStatusCollectionByTrack( track );
        }

        public CameraStatusEntity? GetCameraStatusByTrackAndTimestamp( Guid? track, DateTime timestamp )
        {
            return _cameraStatusByTrackAndTimestampEntityIndex.GetCameraStatusByTrackAndTimestamp( track, timestamp );
        }

        public CameraStatusEntity? GetCameraStatusByTrackAtTimestamp( Guid? track, DateTime timestamp )
        {
            return _cameraStatusByTrackAndTimestampEntityIndex.GetCameraStatusByTrackAtTimestamp( track, timestamp );
        }

        public List<CameraStatusEntity> GetCameraStatusByTrackFromTimestamp( Guid? track, DateTime timestamp )
        {
            return _cameraStatusByTrackAndTimestampEntityIndex.GetCameraStatusByTrackFromTimestamp( track, timestamp );
        }

        public List<CameraStatusEntity> GetCameraStatusByTrackUntilTimestamp( Guid? track, DateTime timestamp )
        {
            return _cameraStatusByTrackAndTimestampEntityIndex.GetCameraStatusByTrackUntilTimestamp( track, timestamp );
        }

        public List<CameraStatusEntity> GetCameraStatusByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraStatusByTrackAndTimestampEntityIndex.GetCameraStatusByTrackOverTimestamp( track, fromTimestamp, untilTimestamp );
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionByTimestamp( DateTime timestamp )
        {
            return _cameraStatusByTimestampEntityIndex.GetCameraStatusCollectionByTimestamp( timestamp );
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionAtTimestamp( DateTime timestamp )
        {
            return _cameraStatusByTimestampEntityIndex.GetCameraStatusCollectionAtTimestamp( timestamp );
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionFromTimestamp( DateTime timestamp )
        {
            return _cameraStatusByTimestampEntityIndex.GetCameraStatusCollectionFromTimestamp( timestamp );
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            return _cameraStatusByTimestampEntityIndex.GetCameraStatusCollectionUntilTimestamp( timestamp );
        }

        public List<CameraStatusEntity> GetCameraStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraStatusByTimestampEntityIndex.GetCameraStatusCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionByCamera( Guid camera )
        {
            return _cameraTiltCalibrationByCameraAndTimestampEntityIndex.GetCameraTiltCalibrationCollectionByCamera( camera );
        }

        public CameraTiltCalibrationEntity? GetCameraTiltCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraTiltCalibrationByCameraAndTimestampEntityIndex.GetCameraTiltCalibrationByCameraAndTimestamp( camera, timestamp );
        }

        public CameraTiltCalibrationEntity? GetCameraTiltCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraTiltCalibrationByCameraAndTimestampEntityIndex.GetCameraTiltCalibrationByCameraAtTimestamp( camera, timestamp );
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraTiltCalibrationByCameraAndTimestampEntityIndex.GetCameraTiltCalibrationByCameraFromTimestamp( camera, timestamp );
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraTiltCalibrationByCameraAndTimestampEntityIndex.GetCameraTiltCalibrationByCameraUntilTimestamp( camera, timestamp );
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraTiltCalibrationByCameraAndTimestampEntityIndex.GetCameraTiltCalibrationByCameraOverTimestamp( camera, fromTimestamp, untilTimestamp );
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            return _cameraTiltCalibrationByTimestampEntityIndex.GetCameraTiltCalibrationCollectionByTimestamp( timestamp );
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            return _cameraTiltCalibrationByTimestampEntityIndex.GetCameraTiltCalibrationCollectionAtTimestamp( timestamp );
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            return _cameraTiltCalibrationByTimestampEntityIndex.GetCameraTiltCalibrationCollectionFromTimestamp( timestamp );
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _cameraTiltCalibrationByTimestampEntityIndex.GetCameraTiltCalibrationCollectionUntilTimestamp( timestamp );
        }

        public List<CameraTiltCalibrationEntity> GetCameraTiltCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraTiltCalibrationByTimestampEntityIndex.GetCameraTiltCalibrationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueCollectionByTiltCalibration( Guid tiltCalibration )
        {
            return _cameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex.GetCameraTiltCalibrationValueCollectionByTiltCalibration( tiltCalibration );
        }

        public CameraTiltCalibrationValueEntity? GetCameraTiltCalibrationValueByTiltCalibrationAndPanAngle( Guid tiltCalibration, double panAngle )
        {
            return _cameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex.GetCameraTiltCalibrationValueByTiltCalibrationAndPanAngle( tiltCalibration, panAngle );
        }

        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueByTiltCalibrationFromPanAngle( Guid tiltCalibration, double panAngle )
        {
            return _cameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex.GetCameraTiltCalibrationValueByTiltCalibrationFromPanAngle( tiltCalibration, panAngle );
        }

        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueByTiltCalibrationUntilPanAngle( Guid tiltCalibration, double panAngle )
        {
            return _cameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex.GetCameraTiltCalibrationValueByTiltCalibrationUntilPanAngle( tiltCalibration, panAngle );
        }

        public List<CameraTiltCalibrationValueEntity> GetCameraTiltCalibrationValueByTiltCalibrationOverPanAngle( Guid tiltCalibration, double fromPanAngle, double untilPanAngle )
        {
            return _cameraTiltCalibrationValueByTiltCalibrationAndPanAngleEntityIndex.GetCameraTiltCalibrationValueByTiltCalibrationOverPanAngle( tiltCalibration, fromPanAngle, untilPanAngle );
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionByCamera( Guid camera )
        {
            return _cameraZoomCalibrationByCameraAndTimestampEntityIndex.GetCameraZoomCalibrationCollectionByCamera( camera );
        }

        public CameraZoomCalibrationEntity? GetCameraZoomCalibrationByCameraAndTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraZoomCalibrationByCameraAndTimestampEntityIndex.GetCameraZoomCalibrationByCameraAndTimestamp( camera, timestamp );
        }

        public CameraZoomCalibrationEntity? GetCameraZoomCalibrationByCameraAtTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraZoomCalibrationByCameraAndTimestampEntityIndex.GetCameraZoomCalibrationByCameraAtTimestamp( camera, timestamp );
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationByCameraFromTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraZoomCalibrationByCameraAndTimestampEntityIndex.GetCameraZoomCalibrationByCameraFromTimestamp( camera, timestamp );
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationByCameraUntilTimestamp( Guid camera, DateTime timestamp )
        {
            return _cameraZoomCalibrationByCameraAndTimestampEntityIndex.GetCameraZoomCalibrationByCameraUntilTimestamp( camera, timestamp );
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationByCameraOverTimestamp( Guid camera, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraZoomCalibrationByCameraAndTimestampEntityIndex.GetCameraZoomCalibrationByCameraOverTimestamp( camera, fromTimestamp, untilTimestamp );
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionByTimestamp( DateTime timestamp )
        {
            return _cameraZoomCalibrationByTimestampEntityIndex.GetCameraZoomCalibrationCollectionByTimestamp( timestamp );
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionAtTimestamp( DateTime timestamp )
        {
            return _cameraZoomCalibrationByTimestampEntityIndex.GetCameraZoomCalibrationCollectionAtTimestamp( timestamp );
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionFromTimestamp( DateTime timestamp )
        {
            return _cameraZoomCalibrationByTimestampEntityIndex.GetCameraZoomCalibrationCollectionFromTimestamp( timestamp );
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _cameraZoomCalibrationByTimestampEntityIndex.GetCameraZoomCalibrationCollectionUntilTimestamp( timestamp );
        }

        public List<CameraZoomCalibrationEntity> GetCameraZoomCalibrationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _cameraZoomCalibrationByTimestampEntityIndex.GetCameraZoomCalibrationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueCollectionByZoomCalibration( Guid zoomCalibration )
        {
            return _cameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex.GetCameraZoomCalibrationValueCollectionByZoomCalibration( zoomCalibration );
        }

        public CameraZoomCalibrationValueEntity? GetCameraZoomCalibrationValueByZoomCalibrationAndFocalLength( Guid zoomCalibration, double focalLength )
        {
            return _cameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex.GetCameraZoomCalibrationValueByZoomCalibrationAndFocalLength( zoomCalibration, focalLength );
        }

        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueByZoomCalibrationFromFocalLength( Guid zoomCalibration, double focalLength )
        {
            return _cameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex.GetCameraZoomCalibrationValueByZoomCalibrationFromFocalLength( zoomCalibration, focalLength );
        }

        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueByZoomCalibrationUntilFocalLength( Guid zoomCalibration, double focalLength )
        {
            return _cameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex.GetCameraZoomCalibrationValueByZoomCalibrationUntilFocalLength( zoomCalibration, focalLength );
        }

        public List<CameraZoomCalibrationValueEntity> GetCameraZoomCalibrationValueByZoomCalibrationOverFocalLength( Guid zoomCalibration, double fromFocalLength, double untilFocalLength )
        {
            return _cameraZoomCalibrationValueByZoomCalibrationAndFocalLengthEntityIndex.GetCameraZoomCalibrationValueByZoomCalibrationOverFocalLength( zoomCalibration, fromFocalLength, untilFocalLength );
        }

        public List<CatalogElementEntity> GetCatalogElementCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CatalogElementEntity> GetCatalogElementCollectionByCatalog( Guid? catalog )
        {
            return _catalogElementByCatalogAndNameEntityIndex.GetCatalogElementCollectionByCatalog( catalog );
        }

        public CatalogElementEntity? GetCatalogElementByCatalogAndName( Guid? catalog, string name )
        {
            return _catalogElementByCatalogAndNameEntityIndex.GetCatalogElementByCatalogAndName( catalog, name );
        }

        public List<CatalogEntity> GetCatalogCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ElementEntity> GetElementCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ElementEntity> GetElementCollectionByElementType( Guid? elementType )
        {
            return _elementByElementTypeEntityIndex.GetElementCollectionByElementType( elementType );
        }

        public List<CollectionInfoEntity> GetCollectionInfoCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CountryEntity> GetCountryCollection( )
        {
            throw new NotImplementedException();
        }

        public CountryEntity? GetCountryByName( string name )
        {
            return _countryByNameEntityIndex.GetCountryByName( name );
        }

        public CountryEntity? GetCountryByCode( int code )
        {
            return _countryByCodeEntityIndex.GetCountryByCode( code );
        }

        public List<CountryEntity> GetCountryFromCode( int code )
        {
            return _countryByCodeEntityIndex.GetCountryFromCode( code );
        }

        public List<CountryEntity> GetCountryUntilCode( int code )
        {
            return _countryByCodeEntityIndex.GetCountryUntilCode( code );
        }

        public List<CountryEntity> GetCountryOverCode( int fromCode, int untilCode )
        {
            return _countryByCodeEntityIndex.GetCountryOverCode( fromCode, untilCode );
        }

        public CountryEntity? GetCountryByAlpha2( string alpha2 )
        {
            return _countryByAlpha2EntityIndex.GetCountryByAlpha2( alpha2 );
        }

        public CountryEntity? GetCountryByAlpha3( string alpha3 )
        {
            return _countryByAlpha3EntityIndex.GetCountryByAlpha3( alpha3 );
        }

        public List<CursorInfoEntity> GetCursorInfoCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _dateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetDateTimeTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public DateTimeTimeseriesValueEntity? GetDateTimeTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _dateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetDateTimeTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public DateTimeTimeseriesValueEntity? GetDateTimeTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _dateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetDateTimeTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _dateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetDateTimeTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _dateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetDateTimeTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _dateTimeTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetDateTimeTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _dateTimeTimeseriesValueByTimestampEntityIndex.GetDateTimeTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _dateTimeTimeseriesValueByTimestampEntityIndex.GetDateTimeTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _dateTimeTimeseriesValueByTimestampEntityIndex.GetDateTimeTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _dateTimeTimeseriesValueByTimestampEntityIndex.GetDateTimeTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<DateTimeTimeseriesValueEntity> GetDateTimeTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _dateTimeTimeseriesValueByTimestampEntityIndex.GetDateTimeTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<DeviceHostEntity> GetDeviceHostCollection( )
        {
            throw new NotImplementedException();
        }

        public DeviceHostEntity? GetDeviceHostByName( string name )
        {
            return _deviceHostByNameEntityIndex.GetDeviceHostByName( name );
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionByHost( Guid host )
        {
            return _deviceHostConfigurationByHostAndTimestampEntityIndex.GetDeviceHostConfigurationCollectionByHost( host );
        }

        public DeviceHostConfigurationEntity? GetDeviceHostConfigurationByHostAndTimestamp( Guid host, DateTime timestamp )
        {
            return _deviceHostConfigurationByHostAndTimestampEntityIndex.GetDeviceHostConfigurationByHostAndTimestamp( host, timestamp );
        }

        public DeviceHostConfigurationEntity? GetDeviceHostConfigurationByHostAtTimestamp( Guid host, DateTime timestamp )
        {
            return _deviceHostConfigurationByHostAndTimestampEntityIndex.GetDeviceHostConfigurationByHostAtTimestamp( host, timestamp );
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationByHostFromTimestamp( Guid host, DateTime timestamp )
        {
            return _deviceHostConfigurationByHostAndTimestampEntityIndex.GetDeviceHostConfigurationByHostFromTimestamp( host, timestamp );
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationByHostUntilTimestamp( Guid host, DateTime timestamp )
        {
            return _deviceHostConfigurationByHostAndTimestampEntityIndex.GetDeviceHostConfigurationByHostUntilTimestamp( host, timestamp );
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationByHostOverTimestamp( Guid host, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _deviceHostConfigurationByHostAndTimestampEntityIndex.GetDeviceHostConfigurationByHostOverTimestamp( host, fromTimestamp, untilTimestamp );
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _deviceHostConfigurationByTimestampEntityIndex.GetDeviceHostConfigurationCollectionByTimestamp( timestamp );
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _deviceHostConfigurationByTimestampEntityIndex.GetDeviceHostConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _deviceHostConfigurationByTimestampEntityIndex.GetDeviceHostConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _deviceHostConfigurationByTimestampEntityIndex.GetDeviceHostConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<DeviceHostConfigurationEntity> GetDeviceHostConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _deviceHostConfigurationByTimestampEntityIndex.GetDeviceHostConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _doubleTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetDoubleTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public DoubleTimeseriesValueEntity? GetDoubleTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _doubleTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetDoubleTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public DoubleTimeseriesValueEntity? GetDoubleTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _doubleTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetDoubleTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _doubleTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetDoubleTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _doubleTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetDoubleTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _doubleTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetDoubleTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _doubleTimeseriesValueByTimestampEntityIndex.GetDoubleTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _doubleTimeseriesValueByTimestampEntityIndex.GetDoubleTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _doubleTimeseriesValueByTimestampEntityIndex.GetDoubleTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _doubleTimeseriesValueByTimestampEntityIndex.GetDoubleTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<DoubleTimeseriesValueEntity> GetDoubleTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _doubleTimeseriesValueByTimestampEntityIndex.GetDoubleTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<FacilityTypeEntity> GetFacilityTypeCollection( )
        {
            throw new NotImplementedException();
        }

        public FacilityTypeEntity? GetFacilityTypeByName( string name )
        {
            return _facilityTypeByNameEntityIndex.GetFacilityTypeByName( name );
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _geoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGeoPosition2DTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public GeoPosition2DTimeseriesValueEntity? GetGeoPosition2DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _geoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGeoPosition2DTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public GeoPosition2DTimeseriesValueEntity? GetGeoPosition2DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _geoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGeoPosition2DTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _geoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGeoPosition2DTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _geoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGeoPosition2DTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _geoPosition2DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGeoPosition2DTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _geoPosition2DTimeseriesValueByTimestampEntityIndex.GetGeoPosition2DTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _geoPosition2DTimeseriesValueByTimestampEntityIndex.GetGeoPosition2DTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _geoPosition2DTimeseriesValueByTimestampEntityIndex.GetGeoPosition2DTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _geoPosition2DTimeseriesValueByTimestampEntityIndex.GetGeoPosition2DTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<GeoPosition2DTimeseriesValueEntity> GetGeoPosition2DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _geoPosition2DTimeseriesValueByTimestampEntityIndex.GetGeoPosition2DTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _geoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGeoPosition3DTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public GeoPosition3DTimeseriesValueEntity? GetGeoPosition3DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _geoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGeoPosition3DTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public GeoPosition3DTimeseriesValueEntity? GetGeoPosition3DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _geoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGeoPosition3DTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _geoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGeoPosition3DTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _geoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGeoPosition3DTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _geoPosition3DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGeoPosition3DTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _geoPosition3DTimeseriesValueByTimestampEntityIndex.GetGeoPosition3DTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _geoPosition3DTimeseriesValueByTimestampEntityIndex.GetGeoPosition3DTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _geoPosition3DTimeseriesValueByTimestampEntityIndex.GetGeoPosition3DTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _geoPosition3DTimeseriesValueByTimestampEntityIndex.GetGeoPosition3DTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<GeoPosition3DTimeseriesValueEntity> GetGeoPosition3DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _geoPosition3DTimeseriesValueByTimestampEntityIndex.GetGeoPosition3DTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDevice( Guid gNSSDevice )
        {
            return _gNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceCommandCollectionByGNSSDevice( gNSSDevice );
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            return _gNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceCommandCollectionByGNSSDeviceAndTimestamp( gNSSDevice, timestamp );
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            return _gNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceCommandCollectionByGNSSDeviceAtTimestamp( gNSSDevice, timestamp );
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            return _gNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceCommandCollectionByGNSSDeviceFromTimestamp( gNSSDevice, timestamp );
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            return _gNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceCommandCollectionByGNSSDeviceUntilTimestamp( gNSSDevice, timestamp );
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _gNSSDeviceCommandByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceCommandCollectionByGNSSDeviceOverTimestamp( gNSSDevice, fromTimestamp, untilTimestamp );
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            return _gNSSDeviceCommandByTimestampEntityIndex.GetGNSSDeviceCommandCollectionByTimestamp( timestamp );
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            return _gNSSDeviceCommandByTimestampEntityIndex.GetGNSSDeviceCommandCollectionAtTimestamp( timestamp );
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            return _gNSSDeviceCommandByTimestampEntityIndex.GetGNSSDeviceCommandCollectionFromTimestamp( timestamp );
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            return _gNSSDeviceCommandByTimestampEntityIndex.GetGNSSDeviceCommandCollectionUntilTimestamp( timestamp );
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _gNSSDeviceCommandByTimestampEntityIndex.GetGNSSDeviceCommandCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<GNSSDeviceCommandEntity> GetGNSSDeviceCommandCollectionByReply( Guid? reply )
        {
            return _gNSSDeviceCommandByReplyEntityIndex.GetGNSSDeviceCommandCollectionByReply( reply );
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDevice( Guid gNSSDevice )
        {
            return _gNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceCommandReplyCollectionByGNSSDevice( gNSSDevice );
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            return _gNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAndTimestamp( gNSSDevice, timestamp );
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            return _gNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceCommandReplyCollectionByGNSSDeviceAtTimestamp( gNSSDevice, timestamp );
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            return _gNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceCommandReplyCollectionByGNSSDeviceFromTimestamp( gNSSDevice, timestamp );
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            return _gNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceCommandReplyCollectionByGNSSDeviceUntilTimestamp( gNSSDevice, timestamp );
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _gNSSDeviceCommandReplyByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceCommandReplyCollectionByGNSSDeviceOverTimestamp( gNSSDevice, fromTimestamp, untilTimestamp );
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            return _gNSSDeviceCommandReplyByTimestampEntityIndex.GetGNSSDeviceCommandReplyCollectionByTimestamp( timestamp );
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            return _gNSSDeviceCommandReplyByTimestampEntityIndex.GetGNSSDeviceCommandReplyCollectionAtTimestamp( timestamp );
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            return _gNSSDeviceCommandReplyByTimestampEntityIndex.GetGNSSDeviceCommandReplyCollectionFromTimestamp( timestamp );
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            return _gNSSDeviceCommandReplyByTimestampEntityIndex.GetGNSSDeviceCommandReplyCollectionUntilTimestamp( timestamp );
        }

        public List<GNSSDeviceCommandReplyEntity> GetGNSSDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _gNSSDeviceCommandReplyByTimestampEntityIndex.GetGNSSDeviceCommandReplyCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public GNSSDeviceCommandReplyEntity? GetGNSSDeviceCommandReplyByCommand( Guid? command )
        {
            return _gNSSDeviceCommandReplyByCommandEntityIndex.GetGNSSDeviceCommandReplyByCommand( command );
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionByGNSSDevice( Guid gNSSDevice )
        {
            return _gNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceConfigurationCollectionByGNSSDevice( gNSSDevice );
        }

        public GNSSDeviceConfigurationEntity? GetGNSSDeviceConfigurationByGNSSDeviceAndTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            return _gNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceConfigurationByGNSSDeviceAndTimestamp( gNSSDevice, timestamp );
        }

        public GNSSDeviceConfigurationEntity? GetGNSSDeviceConfigurationByGNSSDeviceAtTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            return _gNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceConfigurationByGNSSDeviceAtTimestamp( gNSSDevice, timestamp );
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationByGNSSDeviceFromTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            return _gNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceConfigurationByGNSSDeviceFromTimestamp( gNSSDevice, timestamp );
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationByGNSSDeviceUntilTimestamp( Guid gNSSDevice, DateTime timestamp )
        {
            return _gNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceConfigurationByGNSSDeviceUntilTimestamp( gNSSDevice, timestamp );
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationByGNSSDeviceOverTimestamp( Guid gNSSDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _gNSSDeviceConfigurationByGNSSDeviceAndTimestampEntityIndex.GetGNSSDeviceConfigurationByGNSSDeviceOverTimestamp( gNSSDevice, fromTimestamp, untilTimestamp );
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _gNSSDeviceConfigurationByTimestampEntityIndex.GetGNSSDeviceConfigurationCollectionByTimestamp( timestamp );
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _gNSSDeviceConfigurationByTimestampEntityIndex.GetGNSSDeviceConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _gNSSDeviceConfigurationByTimestampEntityIndex.GetGNSSDeviceConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _gNSSDeviceConfigurationByTimestampEntityIndex.GetGNSSDeviceConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<GNSSDeviceConfigurationEntity> GetGNSSDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _gNSSDeviceConfigurationByTimestampEntityIndex.GetGNSSDeviceConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _guidTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGuidTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public GuidTimeseriesValueEntity? GetGuidTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _guidTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGuidTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public GuidTimeseriesValueEntity? GetGuidTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _guidTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGuidTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _guidTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGuidTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _guidTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGuidTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _guidTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetGuidTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _guidTimeseriesValueByTimestampEntityIndex.GetGuidTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _guidTimeseriesValueByTimestampEntityIndex.GetGuidTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _guidTimeseriesValueByTimestampEntityIndex.GetGuidTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _guidTimeseriesValueByTimestampEntityIndex.GetGuidTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<GuidTimeseriesValueEntity> GetGuidTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _guidTimeseriesValueByTimestampEntityIndex.GetGuidTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDevice( Guid gyroDevice )
        {
            return _gyroDeviceCommandByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceCommandCollectionByGyroDevice( gyroDevice );
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            return _gyroDeviceCommandByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceCommandCollectionByGyroDeviceAndTimestamp( gyroDevice, timestamp );
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            return _gyroDeviceCommandByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceCommandCollectionByGyroDeviceAtTimestamp( gyroDevice, timestamp );
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            return _gyroDeviceCommandByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceCommandCollectionByGyroDeviceFromTimestamp( gyroDevice, timestamp );
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            return _gyroDeviceCommandByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceCommandCollectionByGyroDeviceUntilTimestamp( gyroDevice, timestamp );
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _gyroDeviceCommandByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceCommandCollectionByGyroDeviceOverTimestamp( gyroDevice, fromTimestamp, untilTimestamp );
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            return _gyroDeviceCommandByTimestampEntityIndex.GetGyroDeviceCommandCollectionByTimestamp( timestamp );
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            return _gyroDeviceCommandByTimestampEntityIndex.GetGyroDeviceCommandCollectionAtTimestamp( timestamp );
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            return _gyroDeviceCommandByTimestampEntityIndex.GetGyroDeviceCommandCollectionFromTimestamp( timestamp );
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            return _gyroDeviceCommandByTimestampEntityIndex.GetGyroDeviceCommandCollectionUntilTimestamp( timestamp );
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _gyroDeviceCommandByTimestampEntityIndex.GetGyroDeviceCommandCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<GyroDeviceCommandEntity> GetGyroDeviceCommandCollectionByReply( Guid? reply )
        {
            return _gyroDeviceCommandByReplyEntityIndex.GetGyroDeviceCommandCollectionByReply( reply );
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDevice( Guid gyroDevice )
        {
            return _gyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceCommandReplyCollectionByGyroDevice( gyroDevice );
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            return _gyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceCommandReplyCollectionByGyroDeviceAndTimestamp( gyroDevice, timestamp );
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            return _gyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceCommandReplyCollectionByGyroDeviceAtTimestamp( gyroDevice, timestamp );
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            return _gyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceCommandReplyCollectionByGyroDeviceFromTimestamp( gyroDevice, timestamp );
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            return _gyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceCommandReplyCollectionByGyroDeviceUntilTimestamp( gyroDevice, timestamp );
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _gyroDeviceCommandReplyByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceCommandReplyCollectionByGyroDeviceOverTimestamp( gyroDevice, fromTimestamp, untilTimestamp );
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            return _gyroDeviceCommandReplyByTimestampEntityIndex.GetGyroDeviceCommandReplyCollectionByTimestamp( timestamp );
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            return _gyroDeviceCommandReplyByTimestampEntityIndex.GetGyroDeviceCommandReplyCollectionAtTimestamp( timestamp );
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            return _gyroDeviceCommandReplyByTimestampEntityIndex.GetGyroDeviceCommandReplyCollectionFromTimestamp( timestamp );
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            return _gyroDeviceCommandReplyByTimestampEntityIndex.GetGyroDeviceCommandReplyCollectionUntilTimestamp( timestamp );
        }

        public List<GyroDeviceCommandReplyEntity> GetGyroDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _gyroDeviceCommandReplyByTimestampEntityIndex.GetGyroDeviceCommandReplyCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public GyroDeviceCommandReplyEntity? GetGyroDeviceCommandReplyByCommand( Guid? command )
        {
            return _gyroDeviceCommandReplyByCommandEntityIndex.GetGyroDeviceCommandReplyByCommand( command );
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionByGyroDevice( Guid gyroDevice )
        {
            return _gyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceConfigurationCollectionByGyroDevice( gyroDevice );
        }

        public GyroDeviceConfigurationEntity? GetGyroDeviceConfigurationByGyroDeviceAndTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            return _gyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceConfigurationByGyroDeviceAndTimestamp( gyroDevice, timestamp );
        }

        public GyroDeviceConfigurationEntity? GetGyroDeviceConfigurationByGyroDeviceAtTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            return _gyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceConfigurationByGyroDeviceAtTimestamp( gyroDevice, timestamp );
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationByGyroDeviceFromTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            return _gyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceConfigurationByGyroDeviceFromTimestamp( gyroDevice, timestamp );
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationByGyroDeviceUntilTimestamp( Guid gyroDevice, DateTime timestamp )
        {
            return _gyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceConfigurationByGyroDeviceUntilTimestamp( gyroDevice, timestamp );
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationByGyroDeviceOverTimestamp( Guid gyroDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _gyroDeviceConfigurationByGyroDeviceAndTimestampEntityIndex.GetGyroDeviceConfigurationByGyroDeviceOverTimestamp( gyroDevice, fromTimestamp, untilTimestamp );
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _gyroDeviceConfigurationByTimestampEntityIndex.GetGyroDeviceConfigurationCollectionByTimestamp( timestamp );
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _gyroDeviceConfigurationByTimestampEntityIndex.GetGyroDeviceConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _gyroDeviceConfigurationByTimestampEntityIndex.GetGyroDeviceConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _gyroDeviceConfigurationByTimestampEntityIndex.GetGyroDeviceConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<GyroDeviceConfigurationEntity> GetGyroDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _gyroDeviceConfigurationByTimestampEntityIndex.GetGyroDeviceConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<IdentityEntity> GetIdentityCollection( )
        {
            throw new NotImplementedException();
        }

        public List<CallsignEntity> GetCallsignCollection( )
        {
            throw new NotImplementedException();
        }

        public CallsignEntity? GetCallsignByIdentifier( string identifier )
        {
            return _callsignByIdentifierEntityIndex.GetCallsignByIdentifier( identifier );
        }

        public List<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberCollection( )
        {
            throw new NotImplementedException();
        }

        public InternationalMaritimeOrganizationNumberEntity? GetInternationalMaritimeOrganizationNumberByIdentifier( long identifier )
        {
            return _internationalMaritimeOrganizationNumberByIdentifierEntityIndex.GetInternationalMaritimeOrganizationNumberByIdentifier( identifier );
        }

        public List<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberFromIdentifier( long identifier )
        {
            return _internationalMaritimeOrganizationNumberByIdentifierEntityIndex.GetInternationalMaritimeOrganizationNumberFromIdentifier( identifier );
        }

        public List<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberUntilIdentifier( long identifier )
        {
            return _internationalMaritimeOrganizationNumberByIdentifierEntityIndex.GetInternationalMaritimeOrganizationNumberUntilIdentifier( identifier );
        }

        public List<InternationalMaritimeOrganizationNumberEntity> GetInternationalMaritimeOrganizationNumberOverIdentifier( long fromIdentifier, long untilIdentifier )
        {
            return _internationalMaritimeOrganizationNumberByIdentifierEntityIndex.GetInternationalMaritimeOrganizationNumberOverIdentifier( fromIdentifier, untilIdentifier );
        }

        public List<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityCollection( )
        {
            throw new NotImplementedException();
        }

        public MaritimeMobileServiceIdentityEntity? GetMaritimeMobileServiceIdentityByIdentifier( long identifier )
        {
            return _maritimeMobileServiceIdentityByIdentifierEntityIndex.GetMaritimeMobileServiceIdentityByIdentifier( identifier );
        }

        public List<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityFromIdentifier( long identifier )
        {
            return _maritimeMobileServiceIdentityByIdentifierEntityIndex.GetMaritimeMobileServiceIdentityFromIdentifier( identifier );
        }

        public List<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityUntilIdentifier( long identifier )
        {
            return _maritimeMobileServiceIdentityByIdentifierEntityIndex.GetMaritimeMobileServiceIdentityUntilIdentifier( identifier );
        }

        public List<MaritimeMobileServiceIdentityEntity> GetMaritimeMobileServiceIdentityOverIdentifier( long fromIdentifier, long untilIdentifier )
        {
            return _maritimeMobileServiceIdentityByIdentifierEntityIndex.GetMaritimeMobileServiceIdentityOverIdentifier( fromIdentifier, untilIdentifier );
        }

        public List<NameEntity> GetNameCollection( )
        {
            throw new NotImplementedException();
        }

        public NameEntity? GetNameByText( string text )
        {
            return _nameByTextEntityIndex.GetNameByText( text );
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _int16TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt16TimeseriesValueCollectionByTimeseries( timeseries );
        }

        public Int16TimeseriesValueEntity? GetInt16TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _int16TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt16TimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public Int16TimeseriesValueEntity? GetInt16TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _int16TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt16TimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _int16TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt16TimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _int16TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt16TimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _int16TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt16TimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _int16TimeseriesValueByTimestampEntityIndex.GetInt16TimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _int16TimeseriesValueByTimestampEntityIndex.GetInt16TimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _int16TimeseriesValueByTimestampEntityIndex.GetInt16TimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _int16TimeseriesValueByTimestampEntityIndex.GetInt16TimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<Int16TimeseriesValueEntity> GetInt16TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _int16TimeseriesValueByTimestampEntityIndex.GetInt16TimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _int32TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt32TimeseriesValueCollectionByTimeseries( timeseries );
        }

        public Int32TimeseriesValueEntity? GetInt32TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _int32TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt32TimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public Int32TimeseriesValueEntity? GetInt32TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _int32TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt32TimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _int32TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt32TimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _int32TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt32TimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _int32TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt32TimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _int32TimeseriesValueByTimestampEntityIndex.GetInt32TimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _int32TimeseriesValueByTimestampEntityIndex.GetInt32TimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _int32TimeseriesValueByTimestampEntityIndex.GetInt32TimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _int32TimeseriesValueByTimestampEntityIndex.GetInt32TimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<Int32TimeseriesValueEntity> GetInt32TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _int32TimeseriesValueByTimestampEntityIndex.GetInt32TimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _int64TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt64TimeseriesValueCollectionByTimeseries( timeseries );
        }

        public Int64TimeseriesValueEntity? GetInt64TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _int64TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt64TimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public Int64TimeseriesValueEntity? GetInt64TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _int64TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt64TimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _int64TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt64TimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _int64TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt64TimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _int64TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetInt64TimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _int64TimeseriesValueByTimestampEntityIndex.GetInt64TimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _int64TimeseriesValueByTimestampEntityIndex.GetInt64TimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _int64TimeseriesValueByTimestampEntityIndex.GetInt64TimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _int64TimeseriesValueByTimestampEntityIndex.GetInt64TimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<Int64TimeseriesValueEntity> GetInt64TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _int64TimeseriesValueByTimestampEntityIndex.GetInt64TimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<ItemEntity> GetItemCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BaseStationEntity> GetBaseStationCollection( )
        {
            throw new NotImplementedException();
        }

        public BaseStationEntity? GetBaseStationByName( string name )
        {
            return _baseStationByNameEntityIndex.GetBaseStationByName( name );
        }

        public List<BaseStationEntity> GetBaseStationCollectionByType( Guid? type )
        {
            return _baseStationByTypeEntityIndex.GetBaseStationCollectionByType( type );
        }

        public List<DeviceEntity> GetDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DeviceEntity> GetDeviceCollectionByHost( Guid host )
        {
            return _deviceByHostEntityIndex.GetDeviceCollectionByHost( host );
        }

        public DeviceEntity? GetDeviceByName( string name )
        {
            return _deviceByNameEntityIndex.GetDeviceByName( name );
        }

        public List<CameraDeviceEntity> GetCameraDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSDeviceEntity> GetGNSSDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceEntity> GetGyroDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroDeviceEntity> GetGyroDeviceCollectionByGNSSDevice( Guid? gNSSDevice )
        {
            return _gyroDeviceByGNSSDeviceEntityIndex.GetGyroDeviceCollectionByGNSSDevice( gNSSDevice );
        }

        public List<LineInputDeviceEntity> GetLineInputDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorDeviceEntity> GetOilSpillDetectorDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadioDeviceEntity> GetRadioDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeDeviceEntity> GetRadomeDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeDeviceEntity> GetRadomeDeviceCollectionByRadar( Guid? radar )
        {
            return _radomeDeviceByRadarEntityIndex.GetRadomeDeviceCollectionByRadar( radar );
        }

        public List<TrackerDeviceEntity> GetTrackerDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisDeviceEntity> GetAisDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarDeviceEntity> GetRadarDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarDeviceEntity> GetRadarDeviceCollectionByRadome( Guid? radome )
        {
            return _radarDeviceByRadomeEntityIndex.GetRadarDeviceCollectionByRadome( radome );
        }

        public List<RadarDeviceEntity> GetRadarDeviceCollectionByGNSSDevice( Guid? gNSSDevice )
        {
            return _radarDeviceByGNSSDeviceEntityIndex.GetRadarDeviceCollectionByGNSSDevice( gNSSDevice );
        }

        public List<WeatherStationDeviceEntity> GetWeatherStationDeviceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationDeviceEntity> GetWeatherStationDeviceCollectionByGyro( Guid? gyro )
        {
            return _weatherStationDeviceByGyroEntityIndex.GetWeatherStationDeviceCollectionByGyro( gyro );
        }

        public List<FacilityEntity> GetFacilityCollection( )
        {
            throw new NotImplementedException();
        }

        public FacilityEntity? GetFacilityByName( string name )
        {
            return _facilityByNameEntityIndex.GetFacilityByName( name );
        }

        public List<FacilityEntity> GetFacilityCollectionByType( Guid? type )
        {
            return _facilityByTypeEntityIndex.GetFacilityCollectionByType( type );
        }

        public List<TrackableItemEntity> GetTrackableItemCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AircraftEntity> GetAircraftCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AircraftEntity> GetAircraftCollectionByName( string name )
        {
            return _aircraftByNameEntityIndex.GetAircraftCollectionByName( name );
        }

        public List<AircraftEntity> GetAircraftCollectionByType( Guid? type )
        {
            return _aircraftByTypeEntityIndex.GetAircraftCollectionByType( type );
        }

        public List<AisAidToNavigationEntity> GetAisAidToNavigationCollection( )
        {
            throw new NotImplementedException();
        }

        public AisAidToNavigationEntity? GetAisAidToNavigationByName( string name )
        {
            return _aisAidToNavigationByNameEntityIndex.GetAisAidToNavigationByName( name );
        }

        public List<AisAidToNavigationEntity> GetAisAidToNavigationCollectionByMMSI( Guid? mMSI )
        {
            return _aisAidToNavigationByMMSIEntityIndex.GetAisAidToNavigationCollectionByMMSI( mMSI );
        }

        public List<VehicleEntity> GetVehicleCollection( )
        {
            throw new NotImplementedException();
        }

        public VehicleEntity? GetVehicleByName( string name )
        {
            return _vehicleByNameEntityIndex.GetVehicleByName( name );
        }

        public List<VehicleEntity> GetVehicleCollectionByType( Guid? type )
        {
            return _vehicleByTypeEntityIndex.GetVehicleCollectionByType( type );
        }

        public List<VesselEntity> GetVesselCollection( )
        {
            throw new NotImplementedException();
        }

        public List<VesselEntity> GetVesselCollectionByName( string name )
        {
            return _vesselByNameEntityIndex.GetVesselCollectionByName( name );
        }

        public List<VesselEntity> GetVesselCollectionByType( Guid? type )
        {
            return _vesselByTypeEntityIndex.GetVesselCollectionByType( type );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItem( Guid item )
        {
            return _itemIdentityLinkByItemAndStartEntityIndex.GetItemIdentityLinkCollectionByItem( item );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAndStart( Guid item, DateTime start )
        {
            return _itemIdentityLinkByItemAndStartEntityIndex.GetItemIdentityLinkCollectionByItemAndStart( item, start );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAtStart( Guid item, DateTime start )
        {
            return _itemIdentityLinkByItemAndStartEntityIndex.GetItemIdentityLinkCollectionByItemAtStart( item, start );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemFromStart( Guid item, DateTime start )
        {
            return _itemIdentityLinkByItemAndStartEntityIndex.GetItemIdentityLinkCollectionByItemFromStart( item, start );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemUntilStart( Guid item, DateTime start )
        {
            return _itemIdentityLinkByItemAndStartEntityIndex.GetItemIdentityLinkCollectionByItemUntilStart( item, start );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemOverStart( Guid item, DateTime fromStart, DateTime untilStart )
        {
            return _itemIdentityLinkByItemAndStartEntityIndex.GetItemIdentityLinkCollectionByItemOverStart( item, fromStart, untilStart );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAndEnd( Guid item, DateTime? end )
        {
            return _itemIdentityLinkByItemAndEndEntityIndex.GetItemIdentityLinkCollectionByItemAndEnd( item, end );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemAtEnd( Guid item, DateTime? end )
        {
            return _itemIdentityLinkByItemAndEndEntityIndex.GetItemIdentityLinkCollectionByItemAtEnd( item, end );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemFromEnd( Guid item, DateTime? end )
        {
            return _itemIdentityLinkByItemAndEndEntityIndex.GetItemIdentityLinkCollectionByItemFromEnd( item, end );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemUntilEnd( Guid item, DateTime? end )
        {
            return _itemIdentityLinkByItemAndEndEntityIndex.GetItemIdentityLinkCollectionByItemUntilEnd( item, end );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByItemOverEnd( Guid item, DateTime fromEnd, DateTime untilEnd )
        {
            return _itemIdentityLinkByItemAndEndEntityIndex.GetItemIdentityLinkCollectionByItemOverEnd( item, fromEnd, untilEnd );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentity( Guid identity )
        {
            return _itemIdentityLinkByIdentityAndStartEntityIndex.GetItemIdentityLinkCollectionByIdentity( identity );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAndStart( Guid identity, DateTime start )
        {
            return _itemIdentityLinkByIdentityAndStartEntityIndex.GetItemIdentityLinkCollectionByIdentityAndStart( identity, start );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAtStart( Guid identity, DateTime start )
        {
            return _itemIdentityLinkByIdentityAndStartEntityIndex.GetItemIdentityLinkCollectionByIdentityAtStart( identity, start );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityFromStart( Guid identity, DateTime start )
        {
            return _itemIdentityLinkByIdentityAndStartEntityIndex.GetItemIdentityLinkCollectionByIdentityFromStart( identity, start );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityUntilStart( Guid identity, DateTime start )
        {
            return _itemIdentityLinkByIdentityAndStartEntityIndex.GetItemIdentityLinkCollectionByIdentityUntilStart( identity, start );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityOverStart( Guid identity, DateTime fromStart, DateTime untilStart )
        {
            return _itemIdentityLinkByIdentityAndStartEntityIndex.GetItemIdentityLinkCollectionByIdentityOverStart( identity, fromStart, untilStart );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAndEnd( Guid identity, DateTime? end )
        {
            return _itemIdentityLinkByIdentityAndEndEntityIndex.GetItemIdentityLinkCollectionByIdentityAndEnd( identity, end );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityAtEnd( Guid identity, DateTime? end )
        {
            return _itemIdentityLinkByIdentityAndEndEntityIndex.GetItemIdentityLinkCollectionByIdentityAtEnd( identity, end );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityFromEnd( Guid identity, DateTime? end )
        {
            return _itemIdentityLinkByIdentityAndEndEntityIndex.GetItemIdentityLinkCollectionByIdentityFromEnd( identity, end );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityUntilEnd( Guid identity, DateTime? end )
        {
            return _itemIdentityLinkByIdentityAndEndEntityIndex.GetItemIdentityLinkCollectionByIdentityUntilEnd( identity, end );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByIdentityOverEnd( Guid identity, DateTime fromEnd, DateTime untilEnd )
        {
            return _itemIdentityLinkByIdentityAndEndEntityIndex.GetItemIdentityLinkCollectionByIdentityOverEnd( identity, fromEnd, untilEnd );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByStart( DateTime start )
        {
            return _itemIdentityLinkByStartEntityIndex.GetItemIdentityLinkCollectionByStart( start );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionAtStart( DateTime start )
        {
            return _itemIdentityLinkByStartEntityIndex.GetItemIdentityLinkCollectionAtStart( start );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionFromStart( DateTime start )
        {
            return _itemIdentityLinkByStartEntityIndex.GetItemIdentityLinkCollectionFromStart( start );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionUntilStart( DateTime start )
        {
            return _itemIdentityLinkByStartEntityIndex.GetItemIdentityLinkCollectionUntilStart( start );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            return _itemIdentityLinkByStartEntityIndex.GetItemIdentityLinkCollectionOverStart( fromStart, untilStart );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionByEnd( DateTime? end )
        {
            return _itemIdentityLinkByEndEntityIndex.GetItemIdentityLinkCollectionByEnd( end );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionAtEnd( DateTime? end )
        {
            return _itemIdentityLinkByEndEntityIndex.GetItemIdentityLinkCollectionAtEnd( end );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionFromEnd( DateTime? end )
        {
            return _itemIdentityLinkByEndEntityIndex.GetItemIdentityLinkCollectionFromEnd( end );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionUntilEnd( DateTime? end )
        {
            return _itemIdentityLinkByEndEntityIndex.GetItemIdentityLinkCollectionUntilEnd( end );
        }

        public List<ItemIdentityLinkEntity> GetItemIdentityLinkCollectionOverEnd( DateTime fromEnd, DateTime untilEnd )
        {
            return _itemIdentityLinkByEndEntityIndex.GetItemIdentityLinkCollectionOverEnd( fromEnd, untilEnd );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionByParent( Guid parent )
        {
            return _itemParentChildLinkByParentAndTimestampEntityIndex.GetItemParentChildLinkCollectionByParent( parent );
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByParentAndTimestamp( Guid parent, DateTime timestamp )
        {
            return _itemParentChildLinkByParentAndTimestampEntityIndex.GetItemParentChildLinkByParentAndTimestamp( parent, timestamp );
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByParentAtTimestamp( Guid parent, DateTime timestamp )
        {
            return _itemParentChildLinkByParentAndTimestampEntityIndex.GetItemParentChildLinkByParentAtTimestamp( parent, timestamp );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByParentFromTimestamp( Guid parent, DateTime timestamp )
        {
            return _itemParentChildLinkByParentAndTimestampEntityIndex.GetItemParentChildLinkByParentFromTimestamp( parent, timestamp );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByParentUntilTimestamp( Guid parent, DateTime timestamp )
        {
            return _itemParentChildLinkByParentAndTimestampEntityIndex.GetItemParentChildLinkByParentUntilTimestamp( parent, timestamp );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByParentOverTimestamp( Guid parent, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _itemParentChildLinkByParentAndTimestampEntityIndex.GetItemParentChildLinkByParentOverTimestamp( parent, fromTimestamp, untilTimestamp );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionByChild( Guid child )
        {
            return _itemParentChildLinkByChildAndTimestampEntityIndex.GetItemParentChildLinkCollectionByChild( child );
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByChildAndTimestamp( Guid child, DateTime timestamp )
        {
            return _itemParentChildLinkByChildAndTimestampEntityIndex.GetItemParentChildLinkByChildAndTimestamp( child, timestamp );
        }

        public ItemParentChildLinkEntity? GetItemParentChildLinkByChildAtTimestamp( Guid child, DateTime timestamp )
        {
            return _itemParentChildLinkByChildAndTimestampEntityIndex.GetItemParentChildLinkByChildAtTimestamp( child, timestamp );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByChildFromTimestamp( Guid child, DateTime timestamp )
        {
            return _itemParentChildLinkByChildAndTimestampEntityIndex.GetItemParentChildLinkByChildFromTimestamp( child, timestamp );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByChildUntilTimestamp( Guid child, DateTime timestamp )
        {
            return _itemParentChildLinkByChildAndTimestampEntityIndex.GetItemParentChildLinkByChildUntilTimestamp( child, timestamp );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkByChildOverTimestamp( Guid child, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _itemParentChildLinkByChildAndTimestampEntityIndex.GetItemParentChildLinkByChildOverTimestamp( child, fromTimestamp, untilTimestamp );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionByTimestamp( DateTime timestamp )
        {
            return _itemParentChildLinkByTimestampEntityIndex.GetItemParentChildLinkCollectionByTimestamp( timestamp );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionAtTimestamp( DateTime timestamp )
        {
            return _itemParentChildLinkByTimestampEntityIndex.GetItemParentChildLinkCollectionAtTimestamp( timestamp );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionFromTimestamp( DateTime timestamp )
        {
            return _itemParentChildLinkByTimestampEntityIndex.GetItemParentChildLinkCollectionFromTimestamp( timestamp );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionUntilTimestamp( DateTime timestamp )
        {
            return _itemParentChildLinkByTimestampEntityIndex.GetItemParentChildLinkCollectionUntilTimestamp( timestamp );
        }

        public List<ItemParentChildLinkEntity> GetItemParentChildLinkCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _itemParentChildLinkByTimestampEntityIndex.GetItemParentChildLinkCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDevice( Guid lineInputDevice )
        {
            return _lineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceCommandCollectionByLineInputDevice( lineInputDevice );
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            return _lineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceCommandCollectionByLineInputDeviceAndTimestamp( lineInputDevice, timestamp );
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            return _lineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceCommandCollectionByLineInputDeviceAtTimestamp( lineInputDevice, timestamp );
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            return _lineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceCommandCollectionByLineInputDeviceFromTimestamp( lineInputDevice, timestamp );
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            return _lineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceCommandCollectionByLineInputDeviceUntilTimestamp( lineInputDevice, timestamp );
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _lineInputDeviceCommandByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceCommandCollectionByLineInputDeviceOverTimestamp( lineInputDevice, fromTimestamp, untilTimestamp );
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByTimestamp( DateTime timestamp )
        {
            return _lineInputDeviceCommandByTimestampEntityIndex.GetLineInputDeviceCommandCollectionByTimestamp( timestamp );
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionAtTimestamp( DateTime timestamp )
        {
            return _lineInputDeviceCommandByTimestampEntityIndex.GetLineInputDeviceCommandCollectionAtTimestamp( timestamp );
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionFromTimestamp( DateTime timestamp )
        {
            return _lineInputDeviceCommandByTimestampEntityIndex.GetLineInputDeviceCommandCollectionFromTimestamp( timestamp );
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            return _lineInputDeviceCommandByTimestampEntityIndex.GetLineInputDeviceCommandCollectionUntilTimestamp( timestamp );
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _lineInputDeviceCommandByTimestampEntityIndex.GetLineInputDeviceCommandCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<LineInputDeviceCommandEntity> GetLineInputDeviceCommandCollectionByReply( Guid? reply )
        {
            return _lineInputDeviceCommandByReplyEntityIndex.GetLineInputDeviceCommandCollectionByReply( reply );
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDevice( Guid lineInputDevice )
        {
            return _lineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceCommandReplyCollectionByLineInputDevice( lineInputDevice );
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            return _lineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAndTimestamp( lineInputDevice, timestamp );
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            return _lineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceCommandReplyCollectionByLineInputDeviceAtTimestamp( lineInputDevice, timestamp );
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            return _lineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceCommandReplyCollectionByLineInputDeviceFromTimestamp( lineInputDevice, timestamp );
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            return _lineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceCommandReplyCollectionByLineInputDeviceUntilTimestamp( lineInputDevice, timestamp );
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _lineInputDeviceCommandReplyByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceCommandReplyCollectionByLineInputDeviceOverTimestamp( lineInputDevice, fromTimestamp, untilTimestamp );
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            return _lineInputDeviceCommandReplyByTimestampEntityIndex.GetLineInputDeviceCommandReplyCollectionByTimestamp( timestamp );
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            return _lineInputDeviceCommandReplyByTimestampEntityIndex.GetLineInputDeviceCommandReplyCollectionAtTimestamp( timestamp );
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            return _lineInputDeviceCommandReplyByTimestampEntityIndex.GetLineInputDeviceCommandReplyCollectionFromTimestamp( timestamp );
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            return _lineInputDeviceCommandReplyByTimestampEntityIndex.GetLineInputDeviceCommandReplyCollectionUntilTimestamp( timestamp );
        }

        public List<LineInputDeviceCommandReplyEntity> GetLineInputDeviceCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _lineInputDeviceCommandReplyByTimestampEntityIndex.GetLineInputDeviceCommandReplyCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public LineInputDeviceCommandReplyEntity? GetLineInputDeviceCommandReplyByCommand( Guid? command )
        {
            return _lineInputDeviceCommandReplyByCommandEntityIndex.GetLineInputDeviceCommandReplyByCommand( command );
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionByLineInputDevice( Guid lineInputDevice )
        {
            return _lineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceConfigurationCollectionByLineInputDevice( lineInputDevice );
        }

        public LineInputDeviceConfigurationEntity? GetLineInputDeviceConfigurationByLineInputDeviceAndTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            return _lineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceConfigurationByLineInputDeviceAndTimestamp( lineInputDevice, timestamp );
        }

        public LineInputDeviceConfigurationEntity? GetLineInputDeviceConfigurationByLineInputDeviceAtTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            return _lineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceConfigurationByLineInputDeviceAtTimestamp( lineInputDevice, timestamp );
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationByLineInputDeviceFromTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            return _lineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceConfigurationByLineInputDeviceFromTimestamp( lineInputDevice, timestamp );
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationByLineInputDeviceUntilTimestamp( Guid lineInputDevice, DateTime timestamp )
        {
            return _lineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceConfigurationByLineInputDeviceUntilTimestamp( lineInputDevice, timestamp );
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationByLineInputDeviceOverTimestamp( Guid lineInputDevice, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _lineInputDeviceConfigurationByLineInputDeviceAndTimestampEntityIndex.GetLineInputDeviceConfigurationByLineInputDeviceOverTimestamp( lineInputDevice, fromTimestamp, untilTimestamp );
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _lineInputDeviceConfigurationByTimestampEntityIndex.GetLineInputDeviceConfigurationCollectionByTimestamp( timestamp );
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _lineInputDeviceConfigurationByTimestampEntityIndex.GetLineInputDeviceConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _lineInputDeviceConfigurationByTimestampEntityIndex.GetLineInputDeviceConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _lineInputDeviceConfigurationByTimestampEntityIndex.GetLineInputDeviceConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<LineInputDeviceConfigurationEntity> GetLineInputDeviceConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _lineInputDeviceConfigurationByTimestampEntityIndex.GetLineInputDeviceConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<LineInputMessageRoutingEntity> GetLineInputMessageRoutingCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputMessageRoutingEntity> GetLineInputMessageRoutingCollectionByLineInputDevice( Guid lineInputDevice )
        {
            return _lineInputMessageRoutingByLineInputDeviceAndTypeEntityIndex.GetLineInputMessageRoutingCollectionByLineInputDevice( lineInputDevice );
        }

        public LineInputMessageRoutingEntity? GetLineInputMessageRoutingByLineInputDeviceAndType( Guid lineInputDevice, string type )
        {
            return _lineInputMessageRoutingByLineInputDeviceAndTypeEntityIndex.GetLineInputMessageRoutingByLineInputDeviceAndType( lineInputDevice, type );
        }

        public List<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByRouting( Guid routing )
        {
            return _lineInputMessageRoutingDestinationByRoutingAndListenerEntityIndex.GetLineInputMessageRoutingDestinationCollectionByRouting( routing );
        }

        public LineInputMessageRoutingDestinationEntity? GetLineInputMessageRoutingDestinationByRoutingAndListener( Guid routing, Guid? listener )
        {
            return _lineInputMessageRoutingDestinationByRoutingAndListenerEntityIndex.GetLineInputMessageRoutingDestinationByRoutingAndListener( routing, listener );
        }

        public List<LineInputMessageRoutingDestinationEntity> GetLineInputMessageRoutingDestinationCollectionByListener( Guid? listener )
        {
            return _lineInputMessageRoutingDestinationByListenerEntityIndex.GetLineInputMessageRoutingDestinationCollectionByListener( listener );
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryCollectionByLineInputDevice( Guid lineInputDevice )
        {
            return _lineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex.GetLineInputWhiteListEntryCollectionByLineInputDevice( lineInputDevice );
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryCollectionByLineInputDeviceAndHostName( Guid lineInputDevice, string hostName )
        {
            return _lineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex.GetLineInputWhiteListEntryCollectionByLineInputDeviceAndHostName( lineInputDevice, hostName );
        }

        public LineInputWhiteListEntryEntity? GetLineInputWhiteListEntryByLineInputDeviceHostNameAndPort( Guid lineInputDevice, string hostName, int port )
        {
            return _lineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex.GetLineInputWhiteListEntryByLineInputDeviceHostNameAndPort( lineInputDevice, hostName, port );
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryByLineInputDeviceHostNameFromPort( Guid lineInputDevice, string hostName, int port )
        {
            return _lineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex.GetLineInputWhiteListEntryByLineInputDeviceHostNameFromPort( lineInputDevice, hostName, port );
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryByLineInputDeviceHostNameUntilPort( Guid lineInputDevice, string hostName, int port )
        {
            return _lineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex.GetLineInputWhiteListEntryByLineInputDeviceHostNameUntilPort( lineInputDevice, hostName, port );
        }

        public List<LineInputWhiteListEntryEntity> GetLineInputWhiteListEntryByLineInputDeviceHostNameOverPort( Guid lineInputDevice, string hostName, int fromPort, int untilPort )
        {
            return _lineInputWhiteListEntryByLineInputDeviceHostNameAndPortEntityIndex.GetLineInputWhiteListEntryByLineInputDeviceHostNameOverPort( lineInputDevice, hostName, fromPort, untilPort );
        }

        public List<LogApplicationEntity> GetLogApplicationCollection( )
        {
            throw new NotImplementedException();
        }

        public LogApplicationEntity? GetLogApplicationByName( string name )
        {
            return _logApplicationByNameEntityIndex.GetLogApplicationByName( name );
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionByApplication( Guid application )
        {
            return _logApplicationConfigurationByApplicationAndTimestampEntityIndex.GetLogApplicationConfigurationCollectionByApplication( application );
        }

        public LogApplicationConfigurationEntity? GetLogApplicationConfigurationByApplicationAndTimestamp( Guid application, DateTime timestamp )
        {
            return _logApplicationConfigurationByApplicationAndTimestampEntityIndex.GetLogApplicationConfigurationByApplicationAndTimestamp( application, timestamp );
        }

        public LogApplicationConfigurationEntity? GetLogApplicationConfigurationByApplicationAtTimestamp( Guid application, DateTime timestamp )
        {
            return _logApplicationConfigurationByApplicationAndTimestampEntityIndex.GetLogApplicationConfigurationByApplicationAtTimestamp( application, timestamp );
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationByApplicationFromTimestamp( Guid application, DateTime timestamp )
        {
            return _logApplicationConfigurationByApplicationAndTimestampEntityIndex.GetLogApplicationConfigurationByApplicationFromTimestamp( application, timestamp );
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationByApplicationUntilTimestamp( Guid application, DateTime timestamp )
        {
            return _logApplicationConfigurationByApplicationAndTimestampEntityIndex.GetLogApplicationConfigurationByApplicationUntilTimestamp( application, timestamp );
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationByApplicationOverTimestamp( Guid application, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _logApplicationConfigurationByApplicationAndTimestampEntityIndex.GetLogApplicationConfigurationByApplicationOverTimestamp( application, fromTimestamp, untilTimestamp );
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _logApplicationConfigurationByTimestampEntityIndex.GetLogApplicationConfigurationCollectionByTimestamp( timestamp );
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _logApplicationConfigurationByTimestampEntityIndex.GetLogApplicationConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _logApplicationConfigurationByTimestampEntityIndex.GetLogApplicationConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _logApplicationConfigurationByTimestampEntityIndex.GetLogApplicationConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<LogApplicationConfigurationEntity> GetLogApplicationConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _logApplicationConfigurationByTimestampEntityIndex.GetLogApplicationConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<LogHostEntity> GetLogHostCollection( )
        {
            throw new NotImplementedException();
        }

        public LogHostEntity? GetLogHostByComputerName( string computerName )
        {
            return _logHostByComputerNameEntityIndex.GetLogHostByComputerName( computerName );
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionByHost( Guid host )
        {
            return _logHostConfigurationByHostAndTimestampEntityIndex.GetLogHostConfigurationCollectionByHost( host );
        }

        public LogHostConfigurationEntity? GetLogHostConfigurationByHostAndTimestamp( Guid host, DateTime timestamp )
        {
            return _logHostConfigurationByHostAndTimestampEntityIndex.GetLogHostConfigurationByHostAndTimestamp( host, timestamp );
        }

        public LogHostConfigurationEntity? GetLogHostConfigurationByHostAtTimestamp( Guid host, DateTime timestamp )
        {
            return _logHostConfigurationByHostAndTimestampEntityIndex.GetLogHostConfigurationByHostAtTimestamp( host, timestamp );
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationByHostFromTimestamp( Guid host, DateTime timestamp )
        {
            return _logHostConfigurationByHostAndTimestampEntityIndex.GetLogHostConfigurationByHostFromTimestamp( host, timestamp );
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationByHostUntilTimestamp( Guid host, DateTime timestamp )
        {
            return _logHostConfigurationByHostAndTimestampEntityIndex.GetLogHostConfigurationByHostUntilTimestamp( host, timestamp );
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationByHostOverTimestamp( Guid host, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _logHostConfigurationByHostAndTimestampEntityIndex.GetLogHostConfigurationByHostOverTimestamp( host, fromTimestamp, untilTimestamp );
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _logHostConfigurationByTimestampEntityIndex.GetLogHostConfigurationCollectionByTimestamp( timestamp );
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _logHostConfigurationByTimestampEntityIndex.GetLogHostConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _logHostConfigurationByTimestampEntityIndex.GetLogHostConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _logHostConfigurationByTimestampEntityIndex.GetLogHostConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<LogHostConfigurationEntity> GetLogHostConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _logHostConfigurationByTimestampEntityIndex.GetLogHostConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<LogLocationEntity> GetLogLocationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogLocationEntity> GetLogLocationCollectionByFileName( string fileName )
        {
            return _logLocationByFileNameAndLineNumberEntityIndex.GetLogLocationCollectionByFileName( fileName );
        }

        public LogLocationEntity? GetLogLocationByFileNameAndLineNumber( string fileName, int lineNumber )
        {
            return _logLocationByFileNameAndLineNumberEntityIndex.GetLogLocationByFileNameAndLineNumber( fileName, lineNumber );
        }

        public List<LogLocationEntity> GetLogLocationByFileNameFromLineNumber( string fileName, int lineNumber )
        {
            return _logLocationByFileNameAndLineNumberEntityIndex.GetLogLocationByFileNameFromLineNumber( fileName, lineNumber );
        }

        public List<LogLocationEntity> GetLogLocationByFileNameUntilLineNumber( string fileName, int lineNumber )
        {
            return _logLocationByFileNameAndLineNumberEntityIndex.GetLogLocationByFileNameUntilLineNumber( fileName, lineNumber );
        }

        public List<LogLocationEntity> GetLogLocationByFileNameOverLineNumber( string fileName, int fromLineNumber, int untilLineNumber )
        {
            return _logLocationByFileNameAndLineNumberEntityIndex.GetLogLocationByFileNameOverLineNumber( fileName, fromLineNumber, untilLineNumber );
        }

        public List<LogProcessEntity> GetLogProcessCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplication( Guid application )
        {
            return _logProcessByApplicationAndStartedEntityIndex.GetLogProcessCollectionByApplication( application );
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationAndStarted( Guid application, DateTime started )
        {
            return _logProcessByApplicationAndStartedEntityIndex.GetLogProcessCollectionByApplicationAndStarted( application, started );
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationAtStarted( Guid application, DateTime started )
        {
            return _logProcessByApplicationAndStartedEntityIndex.GetLogProcessCollectionByApplicationAtStarted( application, started );
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationFromStarted( Guid application, DateTime started )
        {
            return _logProcessByApplicationAndStartedEntityIndex.GetLogProcessCollectionByApplicationFromStarted( application, started );
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationUntilStarted( Guid application, DateTime started )
        {
            return _logProcessByApplicationAndStartedEntityIndex.GetLogProcessCollectionByApplicationUntilStarted( application, started );
        }

        public List<LogProcessEntity> GetLogProcessCollectionByApplicationOverStarted( Guid application, DateTime fromStarted, DateTime untilStarted )
        {
            return _logProcessByApplicationAndStartedEntityIndex.GetLogProcessCollectionByApplicationOverStarted( application, fromStarted, untilStarted );
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHost( Guid? host )
        {
            return _logProcessByHostAndStartedEntityIndex.GetLogProcessCollectionByHost( host );
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostAndStarted( Guid? host, DateTime started )
        {
            return _logProcessByHostAndStartedEntityIndex.GetLogProcessCollectionByHostAndStarted( host, started );
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostAtStarted( Guid? host, DateTime started )
        {
            return _logProcessByHostAndStartedEntityIndex.GetLogProcessCollectionByHostAtStarted( host, started );
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostFromStarted( Guid? host, DateTime started )
        {
            return _logProcessByHostAndStartedEntityIndex.GetLogProcessCollectionByHostFromStarted( host, started );
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostUntilStarted( Guid? host, DateTime started )
        {
            return _logProcessByHostAndStartedEntityIndex.GetLogProcessCollectionByHostUntilStarted( host, started );
        }

        public List<LogProcessEntity> GetLogProcessCollectionByHostOverStarted( Guid host, DateTime fromStarted, DateTime untilStarted )
        {
            return _logProcessByHostAndStartedEntityIndex.GetLogProcessCollectionByHostOverStarted( host, fromStarted, untilStarted );
        }

        public List<LogProcessEntity> GetLogProcessCollectionByStarted( DateTime started )
        {
            return _logProcessByStartedEntityIndex.GetLogProcessCollectionByStarted( started );
        }

        public List<LogProcessEntity> GetLogProcessCollectionAtStarted( DateTime started )
        {
            return _logProcessByStartedEntityIndex.GetLogProcessCollectionAtStarted( started );
        }

        public List<LogProcessEntity> GetLogProcessCollectionFromStarted( DateTime started )
        {
            return _logProcessByStartedEntityIndex.GetLogProcessCollectionFromStarted( started );
        }

        public List<LogProcessEntity> GetLogProcessCollectionUntilStarted( DateTime started )
        {
            return _logProcessByStartedEntityIndex.GetLogProcessCollectionUntilStarted( started );
        }

        public List<LogProcessEntity> GetLogProcessCollectionOverStarted( DateTime fromStarted, DateTime untilStarted )
        {
            return _logProcessByStartedEntityIndex.GetLogProcessCollectionOverStarted( fromStarted, untilStarted );
        }

        public List<LogRecordEntity> GetLogRecordCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThread( Guid thread )
        {
            return _logRecordByThreadAndTimestampEntityIndex.GetLogRecordCollectionByThread( thread );
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadAndTimestamp( Guid thread, DateTime timestamp )
        {
            return _logRecordByThreadAndTimestampEntityIndex.GetLogRecordCollectionByThreadAndTimestamp( thread, timestamp );
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadAtTimestamp( Guid thread, DateTime timestamp )
        {
            return _logRecordByThreadAndTimestampEntityIndex.GetLogRecordCollectionByThreadAtTimestamp( thread, timestamp );
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadFromTimestamp( Guid thread, DateTime timestamp )
        {
            return _logRecordByThreadAndTimestampEntityIndex.GetLogRecordCollectionByThreadFromTimestamp( thread, timestamp );
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadUntilTimestamp( Guid thread, DateTime timestamp )
        {
            return _logRecordByThreadAndTimestampEntityIndex.GetLogRecordCollectionByThreadUntilTimestamp( thread, timestamp );
        }

        public List<LogRecordEntity> GetLogRecordCollectionByThreadOverTimestamp( Guid thread, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _logRecordByThreadAndTimestampEntityIndex.GetLogRecordCollectionByThreadOverTimestamp( thread, fromTimestamp, untilTimestamp );
        }

        public List<LogRecordEntity> GetLogRecordCollectionByTimestamp( DateTime timestamp )
        {
            return _logRecordByTimestampEntityIndex.GetLogRecordCollectionByTimestamp( timestamp );
        }

        public List<LogRecordEntity> GetLogRecordCollectionAtTimestamp( DateTime timestamp )
        {
            return _logRecordByTimestampEntityIndex.GetLogRecordCollectionAtTimestamp( timestamp );
        }

        public List<LogRecordEntity> GetLogRecordCollectionFromTimestamp( DateTime timestamp )
        {
            return _logRecordByTimestampEntityIndex.GetLogRecordCollectionFromTimestamp( timestamp );
        }

        public List<LogRecordEntity> GetLogRecordCollectionUntilTimestamp( DateTime timestamp )
        {
            return _logRecordByTimestampEntityIndex.GetLogRecordCollectionUntilTimestamp( timestamp );
        }

        public List<LogRecordEntity> GetLogRecordCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _logRecordByTimestampEntityIndex.GetLogRecordCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<LogRecordEntity> GetLogRecordCollectionByLocation( Guid location )
        {
            return _logRecordByLocationEntityIndex.GetLogRecordCollectionByLocation( location );
        }

        public List<LogThreadEntity> GetLogThreadCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcess( Guid process )
        {
            return _logThreadByProcessAndStartedEntityIndex.GetLogThreadCollectionByProcess( process );
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessAndStarted( Guid process, DateTime started )
        {
            return _logThreadByProcessAndStartedEntityIndex.GetLogThreadCollectionByProcessAndStarted( process, started );
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessAtStarted( Guid process, DateTime started )
        {
            return _logThreadByProcessAndStartedEntityIndex.GetLogThreadCollectionByProcessAtStarted( process, started );
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessFromStarted( Guid process, DateTime started )
        {
            return _logThreadByProcessAndStartedEntityIndex.GetLogThreadCollectionByProcessFromStarted( process, started );
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessUntilStarted( Guid process, DateTime started )
        {
            return _logThreadByProcessAndStartedEntityIndex.GetLogThreadCollectionByProcessUntilStarted( process, started );
        }

        public List<LogThreadEntity> GetLogThreadCollectionByProcessOverStarted( Guid process, DateTime fromStarted, DateTime untilStarted )
        {
            return _logThreadByProcessAndStartedEntityIndex.GetLogThreadCollectionByProcessOverStarted( process, fromStarted, untilStarted );
        }

        public List<LogThreadEntity> GetLogThreadCollectionByStarted( DateTime started )
        {
            return _logThreadByStartedEntityIndex.GetLogThreadCollectionByStarted( started );
        }

        public List<LogThreadEntity> GetLogThreadCollectionAtStarted( DateTime started )
        {
            return _logThreadByStartedEntityIndex.GetLogThreadCollectionAtStarted( started );
        }

        public List<LogThreadEntity> GetLogThreadCollectionFromStarted( DateTime started )
        {
            return _logThreadByStartedEntityIndex.GetLogThreadCollectionFromStarted( started );
        }

        public List<LogThreadEntity> GetLogThreadCollectionUntilStarted( DateTime started )
        {
            return _logThreadByStartedEntityIndex.GetLogThreadCollectionUntilStarted( started );
        }

        public List<LogThreadEntity> GetLogThreadCollectionOverStarted( DateTime fromStarted, DateTime untilStarted )
        {
            return _logThreadByStartedEntityIndex.GetLogThreadCollectionOverStarted( fromStarted, untilStarted );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollection( )
        {
            throw new NotImplementedException();
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThread( Guid thread )
        {
            return _logTraceEntryByThreadAndEnteredEntityIndex.GetLogTraceEntryCollectionByThread( thread );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadAndEntered( Guid thread, DateTime entered )
        {
            return _logTraceEntryByThreadAndEnteredEntityIndex.GetLogTraceEntryCollectionByThreadAndEntered( thread, entered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadAtEntered( Guid thread, DateTime entered )
        {
            return _logTraceEntryByThreadAndEnteredEntityIndex.GetLogTraceEntryCollectionByThreadAtEntered( thread, entered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadFromEntered( Guid thread, DateTime entered )
        {
            return _logTraceEntryByThreadAndEnteredEntityIndex.GetLogTraceEntryCollectionByThreadFromEntered( thread, entered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadUntilEntered( Guid thread, DateTime entered )
        {
            return _logTraceEntryByThreadAndEnteredEntityIndex.GetLogTraceEntryCollectionByThreadUntilEntered( thread, entered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByThreadOverEntered( Guid thread, DateTime fromEntered, DateTime untilEntered )
        {
            return _logTraceEntryByThreadAndEnteredEntityIndex.GetLogTraceEntryCollectionByThreadOverEntered( thread, fromEntered, untilEntered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocation( Guid location )
        {
            return _logTraceEntryByLocationAndEnteredEntityIndex.GetLogTraceEntryCollectionByLocation( location );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationAndEntered( Guid location, DateTime entered )
        {
            return _logTraceEntryByLocationAndEnteredEntityIndex.GetLogTraceEntryCollectionByLocationAndEntered( location, entered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationAtEntered( Guid location, DateTime entered )
        {
            return _logTraceEntryByLocationAndEnteredEntityIndex.GetLogTraceEntryCollectionByLocationAtEntered( location, entered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationFromEntered( Guid location, DateTime entered )
        {
            return _logTraceEntryByLocationAndEnteredEntityIndex.GetLogTraceEntryCollectionByLocationFromEntered( location, entered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationUntilEntered( Guid location, DateTime entered )
        {
            return _logTraceEntryByLocationAndEnteredEntityIndex.GetLogTraceEntryCollectionByLocationUntilEntered( location, entered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByLocationOverEntered( Guid location, DateTime fromEntered, DateTime untilEntered )
        {
            return _logTraceEntryByLocationAndEnteredEntityIndex.GetLogTraceEntryCollectionByLocationOverEntered( location, fromEntered, untilEntered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionByEntered( DateTime entered )
        {
            return _logTraceEntryByEnteredEntityIndex.GetLogTraceEntryCollectionByEntered( entered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionAtEntered( DateTime entered )
        {
            return _logTraceEntryByEnteredEntityIndex.GetLogTraceEntryCollectionAtEntered( entered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionFromEntered( DateTime entered )
        {
            return _logTraceEntryByEnteredEntityIndex.GetLogTraceEntryCollectionFromEntered( entered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionUntilEntered( DateTime entered )
        {
            return _logTraceEntryByEnteredEntityIndex.GetLogTraceEntryCollectionUntilEntered( entered );
        }

        public List<LogTraceEntryEntity> GetLogTraceEntryCollectionOverEntered( DateTime fromEntered, DateTime untilEntered )
        {
            return _logTraceEntryByEnteredEntityIndex.GetLogTraceEntryCollectionOverEntered( fromEntered, untilEntered );
        }

        public List<MapElementEntity> GetMapElementCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MapElementEntity> GetMapElementCollectionByItem( Guid item )
        {
            return _mapElementByItemEntityIndex.GetMapElementCollectionByItem( item );
        }

        public List<MapInfoEntity> GetMapInfoCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MapServiceOptionsEntity> GetMapServiceOptionsCollection( )
        {
            throw new NotImplementedException();
        }

        public MapServiceOptionsEntity? GetMapServiceOptionsByTimestamp( DateTime timestamp )
        {
            return _mapServiceOptionsByTimestampEntityIndex.GetMapServiceOptionsByTimestamp( timestamp );
        }

        public MapServiceOptionsEntity? GetMapServiceOptionsAtTimestamp( DateTime timestamp )
        {
            return _mapServiceOptionsByTimestampEntityIndex.GetMapServiceOptionsAtTimestamp( timestamp );
        }

        public List<MapServiceOptionsEntity> GetMapServiceOptionsFromTimestamp( DateTime timestamp )
        {
            return _mapServiceOptionsByTimestampEntityIndex.GetMapServiceOptionsFromTimestamp( timestamp );
        }

        public List<MapServiceOptionsEntity> GetMapServiceOptionsUntilTimestamp( DateTime timestamp )
        {
            return _mapServiceOptionsByTimestampEntityIndex.GetMapServiceOptionsUntilTimestamp( timestamp );
        }

        public List<MapServiceOptionsEntity> GetMapServiceOptionsOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _mapServiceOptionsByTimestampEntityIndex.GetMapServiceOptionsOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsCollection( )
        {
            throw new NotImplementedException();
        }

        public MaritimeIdentificationDigitsEntity? GetMaritimeIdentificationDigitsByCode( int code )
        {
            return _maritimeIdentificationDigitsByCodeEntityIndex.GetMaritimeIdentificationDigitsByCode( code );
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsFromCode( int code )
        {
            return _maritimeIdentificationDigitsByCodeEntityIndex.GetMaritimeIdentificationDigitsFromCode( code );
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsUntilCode( int code )
        {
            return _maritimeIdentificationDigitsByCodeEntityIndex.GetMaritimeIdentificationDigitsUntilCode( code );
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsOverCode( int fromCode, int untilCode )
        {
            return _maritimeIdentificationDigitsByCodeEntityIndex.GetMaritimeIdentificationDigitsOverCode( fromCode, untilCode );
        }

        public List<MaritimeIdentificationDigitsEntity> GetMaritimeIdentificationDigitsCollectionByCountry( Guid country )
        {
            return _maritimeIdentificationDigitsByCountryEntityIndex.GetMaritimeIdentificationDigitsCollectionByCountry( country );
        }

        public List<MediaProxySessionEntity> GetMediaProxySessionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionEntity> GetMediaProxySessionCollectionByService( Guid service )
        {
            return _mediaProxySessionByServiceAndNameEntityIndex.GetMediaProxySessionCollectionByService( service );
        }

        public MediaProxySessionEntity? GetMediaProxySessionByServiceAndName( Guid service, string name )
        {
            return _mediaProxySessionByServiceAndNameEntityIndex.GetMediaProxySessionByServiceAndName( service, name );
        }

        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileCollectionByProxySession( Guid proxySession )
        {
            return _mediaProxySessionFileByProxySessionAndTimestampEntityIndex.GetMediaProxySessionFileCollectionByProxySession( proxySession );
        }

        public MediaProxySessionFileEntity? GetMediaProxySessionFileByProxySessionAndTimestamp( Guid proxySession, DateTime timestamp )
        {
            return _mediaProxySessionFileByProxySessionAndTimestampEntityIndex.GetMediaProxySessionFileByProxySessionAndTimestamp( proxySession, timestamp );
        }

        public MediaProxySessionFileEntity? GetMediaProxySessionFileByProxySessionAtTimestamp( Guid proxySession, DateTime timestamp )
        {
            return _mediaProxySessionFileByProxySessionAndTimestampEntityIndex.GetMediaProxySessionFileByProxySessionAtTimestamp( proxySession, timestamp );
        }

        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileByProxySessionFromTimestamp( Guid proxySession, DateTime timestamp )
        {
            return _mediaProxySessionFileByProxySessionAndTimestampEntityIndex.GetMediaProxySessionFileByProxySessionFromTimestamp( proxySession, timestamp );
        }

        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileByProxySessionUntilTimestamp( Guid proxySession, DateTime timestamp )
        {
            return _mediaProxySessionFileByProxySessionAndTimestampEntityIndex.GetMediaProxySessionFileByProxySessionUntilTimestamp( proxySession, timestamp );
        }

        public List<MediaProxySessionFileEntity> GetMediaProxySessionFileByProxySessionOverTimestamp( Guid proxySession, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _mediaProxySessionFileByProxySessionAndTimestampEntityIndex.GetMediaProxySessionFileByProxySessionOverTimestamp( proxySession, fromTimestamp, untilTimestamp );
        }

        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsCollectionByProxySession( Guid proxySession )
        {
            return _mediaProxySessionOptionsByProxySessionAndTimestampEntityIndex.GetMediaProxySessionOptionsCollectionByProxySession( proxySession );
        }

        public MediaProxySessionOptionsEntity? GetMediaProxySessionOptionsByProxySessionAndTimestamp( Guid proxySession, DateTime timestamp )
        {
            return _mediaProxySessionOptionsByProxySessionAndTimestampEntityIndex.GetMediaProxySessionOptionsByProxySessionAndTimestamp( proxySession, timestamp );
        }

        public MediaProxySessionOptionsEntity? GetMediaProxySessionOptionsByProxySessionAtTimestamp( Guid proxySession, DateTime timestamp )
        {
            return _mediaProxySessionOptionsByProxySessionAndTimestampEntityIndex.GetMediaProxySessionOptionsByProxySessionAtTimestamp( proxySession, timestamp );
        }

        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsByProxySessionFromTimestamp( Guid proxySession, DateTime timestamp )
        {
            return _mediaProxySessionOptionsByProxySessionAndTimestampEntityIndex.GetMediaProxySessionOptionsByProxySessionFromTimestamp( proxySession, timestamp );
        }

        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsByProxySessionUntilTimestamp( Guid proxySession, DateTime timestamp )
        {
            return _mediaProxySessionOptionsByProxySessionAndTimestampEntityIndex.GetMediaProxySessionOptionsByProxySessionUntilTimestamp( proxySession, timestamp );
        }

        public List<MediaProxySessionOptionsEntity> GetMediaProxySessionOptionsByProxySessionOverTimestamp( Guid proxySession, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _mediaProxySessionOptionsByProxySessionAndTimestampEntityIndex.GetMediaProxySessionOptionsByProxySessionOverTimestamp( proxySession, fromTimestamp, untilTimestamp );
        }

        public List<MediaServiceEntity> GetMediaServiceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsCollectionByMediaService( Guid mediaService )
        {
            return _mediaServiceOptionsByMediaServiceAndTimestampEntityIndex.GetMediaServiceOptionsCollectionByMediaService( mediaService );
        }

        public MediaServiceOptionsEntity? GetMediaServiceOptionsByMediaServiceAndTimestamp( Guid mediaService, DateTime timestamp )
        {
            return _mediaServiceOptionsByMediaServiceAndTimestampEntityIndex.GetMediaServiceOptionsByMediaServiceAndTimestamp( mediaService, timestamp );
        }

        public MediaServiceOptionsEntity? GetMediaServiceOptionsByMediaServiceAtTimestamp( Guid mediaService, DateTime timestamp )
        {
            return _mediaServiceOptionsByMediaServiceAndTimestampEntityIndex.GetMediaServiceOptionsByMediaServiceAtTimestamp( mediaService, timestamp );
        }

        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsByMediaServiceFromTimestamp( Guid mediaService, DateTime timestamp )
        {
            return _mediaServiceOptionsByMediaServiceAndTimestampEntityIndex.GetMediaServiceOptionsByMediaServiceFromTimestamp( mediaService, timestamp );
        }

        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsByMediaServiceUntilTimestamp( Guid mediaService, DateTime timestamp )
        {
            return _mediaServiceOptionsByMediaServiceAndTimestampEntityIndex.GetMediaServiceOptionsByMediaServiceUntilTimestamp( mediaService, timestamp );
        }

        public List<MediaServiceOptionsEntity> GetMediaServiceOptionsByMediaServiceOverTimestamp( Guid mediaService, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _mediaServiceOptionsByMediaServiceAndTimestampEntityIndex.GetMediaServiceOptionsByMediaServiceOverTimestamp( mediaService, fromTimestamp, untilTimestamp );
        }

        public List<NamespaceElementEntity> GetNamespaceElementCollection( )
        {
            throw new NotImplementedException();
        }

        public List<NamespaceElementEntity> GetNamespaceElementCollectionByNamespace( Guid namespace__ )
        {
            return _namespaceElementByNamespaceAndNameEntityIndex.GetNamespaceElementCollectionByNamespace( namespace__ );
        }

        public NamespaceElementEntity? GetNamespaceElementByNamespaceAndName( Guid namespace__, string name )
        {
            return _namespaceElementByNamespaceAndNameEntityIndex.GetNamespaceElementByNamespaceAndName( namespace__, name );
        }

        public List<ElementTypeEntity> GetElementTypeCollection( )
        {
            throw new NotImplementedException();
        }

        public List<NamespaceEntity> GetNamespaceCollection( )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollection( )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            return _oilSpillByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillCollectionByOilSpillDetector( oilSpillDetector );
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillCollectionByOilSpillDetectorAndTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillCollectionByOilSpillDetectorAtTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillCollectionByOilSpillDetectorFromTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillCollectionByOilSpillDetectorUntilTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillEntity> GetOilSpillCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _oilSpillByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillCollectionByOilSpillDetectorOverTimestamp( oilSpillDetector, fromTimestamp, untilTimestamp );
        }

        public List<OilSpillEntity> GetOilSpillCollectionByTimestamp( DateTime timestamp )
        {
            return _oilSpillByTimestampEntityIndex.GetOilSpillCollectionByTimestamp( timestamp );
        }

        public List<OilSpillEntity> GetOilSpillCollectionAtTimestamp( DateTime timestamp )
        {
            return _oilSpillByTimestampEntityIndex.GetOilSpillCollectionAtTimestamp( timestamp );
        }

        public List<OilSpillEntity> GetOilSpillCollectionFromTimestamp( DateTime timestamp )
        {
            return _oilSpillByTimestampEntityIndex.GetOilSpillCollectionFromTimestamp( timestamp );
        }

        public List<OilSpillEntity> GetOilSpillCollectionUntilTimestamp( DateTime timestamp )
        {
            return _oilSpillByTimestampEntityIndex.GetOilSpillCollectionUntilTimestamp( timestamp );
        }

        public List<OilSpillEntity> GetOilSpillCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _oilSpillByTimestampEntityIndex.GetOilSpillCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            return _oilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorCommandCollectionByOilSpillDetector( oilSpillDetector );
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorCommandCollectionByOilSpillDetectorAndTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorCommandCollectionByOilSpillDetectorAtTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorCommandCollectionByOilSpillDetectorFromTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorCommandCollectionByOilSpillDetectorUntilTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _oilSpillDetectorCommandByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorCommandCollectionByOilSpillDetectorOverTimestamp( oilSpillDetector, fromTimestamp, untilTimestamp );
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByTimestamp( DateTime timestamp )
        {
            return _oilSpillDetectorCommandByTimestampEntityIndex.GetOilSpillDetectorCommandCollectionByTimestamp( timestamp );
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionAtTimestamp( DateTime timestamp )
        {
            return _oilSpillDetectorCommandByTimestampEntityIndex.GetOilSpillDetectorCommandCollectionAtTimestamp( timestamp );
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionFromTimestamp( DateTime timestamp )
        {
            return _oilSpillDetectorCommandByTimestampEntityIndex.GetOilSpillDetectorCommandCollectionFromTimestamp( timestamp );
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            return _oilSpillDetectorCommandByTimestampEntityIndex.GetOilSpillDetectorCommandCollectionUntilTimestamp( timestamp );
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _oilSpillDetectorCommandByTimestampEntityIndex.GetOilSpillDetectorCommandCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<OilSpillDetectorCommandEntity> GetOilSpillDetectorCommandCollectionByReply( Guid? reply )
        {
            return _oilSpillDetectorCommandByReplyEntityIndex.GetOilSpillDetectorCommandCollectionByReply( reply );
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            return _oilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorCommandReplyCollectionByOilSpillDetector( oilSpillDetector );
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAndTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorAtTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorFromTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorUntilTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _oilSpillDetectorCommandReplyByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorCommandReplyCollectionByOilSpillDetectorOverTimestamp( oilSpillDetector, fromTimestamp, untilTimestamp );
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            return _oilSpillDetectorCommandReplyByTimestampEntityIndex.GetOilSpillDetectorCommandReplyCollectionByTimestamp( timestamp );
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            return _oilSpillDetectorCommandReplyByTimestampEntityIndex.GetOilSpillDetectorCommandReplyCollectionAtTimestamp( timestamp );
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            return _oilSpillDetectorCommandReplyByTimestampEntityIndex.GetOilSpillDetectorCommandReplyCollectionFromTimestamp( timestamp );
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            return _oilSpillDetectorCommandReplyByTimestampEntityIndex.GetOilSpillDetectorCommandReplyCollectionUntilTimestamp( timestamp );
        }

        public List<OilSpillDetectorCommandReplyEntity> GetOilSpillDetectorCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _oilSpillDetectorCommandReplyByTimestampEntityIndex.GetOilSpillDetectorCommandReplyCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public OilSpillDetectorCommandReplyEntity? GetOilSpillDetectorCommandReplyByCommand( Guid? command )
        {
            return _oilSpillDetectorCommandReplyByCommandEntityIndex.GetOilSpillDetectorCommandReplyByCommand( command );
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByOilSpillDetector( Guid oilSpillDetector )
        {
            return _oilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorConfigurationCollectionByOilSpillDetector( oilSpillDetector );
        }

        public OilSpillDetectorConfigurationEntity? GetOilSpillDetectorConfigurationByOilSpillDetectorAndTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorConfigurationByOilSpillDetectorAndTimestamp( oilSpillDetector, timestamp );
        }

        public OilSpillDetectorConfigurationEntity? GetOilSpillDetectorConfigurationByOilSpillDetectorAtTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorConfigurationByOilSpillDetectorAtTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationByOilSpillDetectorFromTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorConfigurationByOilSpillDetectorFromTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationByOilSpillDetectorUntilTimestamp( Guid oilSpillDetector, DateTime timestamp )
        {
            return _oilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorConfigurationByOilSpillDetectorUntilTimestamp( oilSpillDetector, timestamp );
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationByOilSpillDetectorOverTimestamp( Guid oilSpillDetector, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _oilSpillDetectorConfigurationByOilSpillDetectorAndTimestampEntityIndex.GetOilSpillDetectorConfigurationByOilSpillDetectorOverTimestamp( oilSpillDetector, fromTimestamp, untilTimestamp );
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _oilSpillDetectorConfigurationByTimestampEntityIndex.GetOilSpillDetectorConfigurationCollectionByTimestamp( timestamp );
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _oilSpillDetectorConfigurationByTimestampEntityIndex.GetOilSpillDetectorConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _oilSpillDetectorConfigurationByTimestampEntityIndex.GetOilSpillDetectorConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _oilSpillDetectorConfigurationByTimestampEntityIndex.GetOilSpillDetectorConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _oilSpillDetectorConfigurationByTimestampEntityIndex.GetOilSpillDetectorConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<OilSpillDetectorConfigurationEntity> GetOilSpillDetectorConfigurationCollectionByTargetMMSI( Guid? targetMMSI )
        {
            return _oilSpillDetectorConfigurationByTargetMMSIEntityIndex.GetOilSpillDetectorConfigurationCollectionByTargetMMSI( targetMMSI );
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetPosition2DTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public Position2DTimeseriesValueEntity? GetPosition2DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetPosition2DTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public Position2DTimeseriesValueEntity? GetPosition2DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetPosition2DTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetPosition2DTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetPosition2DTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _position2DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetPosition2DTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _position2DTimeseriesValueByTimestampEntityIndex.GetPosition2DTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _position2DTimeseriesValueByTimestampEntityIndex.GetPosition2DTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _position2DTimeseriesValueByTimestampEntityIndex.GetPosition2DTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _position2DTimeseriesValueByTimestampEntityIndex.GetPosition2DTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<Position2DTimeseriesValueEntity> GetPosition2DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _position2DTimeseriesValueByTimestampEntityIndex.GetPosition2DTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetPosition3DTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public Position3DTimeseriesValueEntity? GetPosition3DTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetPosition3DTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public Position3DTimeseriesValueEntity? GetPosition3DTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetPosition3DTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetPosition3DTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetPosition3DTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _position3DTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetPosition3DTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _position3DTimeseriesValueByTimestampEntityIndex.GetPosition3DTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _position3DTimeseriesValueByTimestampEntityIndex.GetPosition3DTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _position3DTimeseriesValueByTimestampEntityIndex.GetPosition3DTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _position3DTimeseriesValueByTimestampEntityIndex.GetPosition3DTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<Position3DTimeseriesValueEntity> GetPosition3DTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _position3DTimeseriesValueByTimestampEntityIndex.GetPosition3DTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<ProcessTrackValueResultEntity> GetProcessTrackValueResultCollection( )
        {
            throw new NotImplementedException();
        }

        public List<PropertyEntity> GetPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<PropertyEntity> GetPropertyCollectionByElement( Guid element )
        {
            return _propertyByElementAndDefinitionEntityIndex.GetPropertyCollectionByElement( element );
        }

        public PropertyEntity? GetPropertyByElementAndDefinition( Guid element, Guid definition )
        {
            return _propertyByElementAndDefinitionEntityIndex.GetPropertyByElementAndDefinition( element, definition );
        }

        public List<PropertyEntity> GetPropertyCollectionByDefinition( Guid definition )
        {
            return _propertyByDefinitionEntityIndex.GetPropertyCollectionByDefinition( definition );
        }

        public List<BinaryPropertyEntity> GetBinaryPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BooleanPropertyEntity> GetBooleanPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BytePropertyEntity> GetBytePropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimePropertyEntity> GetDateTimePropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DoublePropertyEntity> GetDoublePropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GuidPropertyEntity> GetGuidPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int16PropertyEntity> GetInt16PropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int32PropertyEntity> GetInt32PropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int64PropertyEntity> GetInt64PropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyEntity> GetReferencePropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyEntity> GetReferencePropertyCollectionByValue( Guid? value__ )
        {
            return _referencePropertyByValueEntityIndex.GetReferencePropertyCollectionByValue( value__ );
        }

        public List<SBytePropertyEntity> GetSBytePropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SinglePropertyEntity> GetSinglePropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<StringPropertyEntity> GetStringPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesPropertyEntity> GetTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesPropertyEntity> GetBinaryTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesPropertyEntity> GetBinaryTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _binaryTimeseriesPropertyByTimeseriesEntityIndex.GetBinaryTimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<BooleanTimeseriesPropertyEntity> GetBooleanTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesPropertyEntity> GetBooleanTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _booleanTimeseriesPropertyByTimeseriesEntityIndex.GetBooleanTimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<ByteTimeseriesPropertyEntity> GetByteTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesPropertyEntity> GetByteTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _byteTimeseriesPropertyByTimeseriesEntityIndex.GetByteTimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<DateTimeTimeseriesPropertyEntity> GetDateTimeTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesPropertyEntity> GetDateTimeTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _dateTimeTimeseriesPropertyByTimeseriesEntityIndex.GetDateTimeTimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<DoubleTimeseriesPropertyEntity> GetDoubleTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesPropertyEntity> GetDoubleTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _doubleTimeseriesPropertyByTimeseriesEntityIndex.GetDoubleTimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<GuidTimeseriesPropertyEntity> GetGuidTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesPropertyEntity> GetGuidTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _guidTimeseriesPropertyByTimeseriesEntityIndex.GetGuidTimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<Int16TimeseriesPropertyEntity> GetInt16TimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesPropertyEntity> GetInt16TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _int16TimeseriesPropertyByTimeseriesEntityIndex.GetInt16TimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<Int32TimeseriesPropertyEntity> GetInt32TimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesPropertyEntity> GetInt32TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _int32TimeseriesPropertyByTimeseriesEntityIndex.GetInt32TimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<Int64TimeseriesPropertyEntity> GetInt64TimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesPropertyEntity> GetInt64TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _int64TimeseriesPropertyByTimeseriesEntityIndex.GetInt64TimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<ReferenceTimeseriesPropertyEntity> GetReferenceTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesPropertyEntity> GetReferenceTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _referenceTimeseriesPropertyByTimeseriesEntityIndex.GetReferenceTimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<SByteTimeseriesPropertyEntity> GetSByteTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesPropertyEntity> GetSByteTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _sByteTimeseriesPropertyByTimeseriesEntityIndex.GetSByteTimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<SingleTimeseriesPropertyEntity> GetSingleTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesPropertyEntity> GetSingleTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _singleTimeseriesPropertyByTimeseriesEntityIndex.GetSingleTimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<StringTimeseriesPropertyEntity> GetStringTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesPropertyEntity> GetStringTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _stringTimeseriesPropertyByTimeseriesEntityIndex.GetStringTimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<TimeSpanTimeseriesPropertyEntity> GetTimeSpanTimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesPropertyEntity> GetTimeSpanTimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _timeSpanTimeseriesPropertyByTimeseriesEntityIndex.GetTimeSpanTimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<UInt16TimeseriesPropertyEntity> GetUInt16TimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesPropertyEntity> GetUInt16TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _uInt16TimeseriesPropertyByTimeseriesEntityIndex.GetUInt16TimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<UInt32TimeseriesPropertyEntity> GetUInt32TimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesPropertyEntity> GetUInt32TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _uInt32TimeseriesPropertyByTimeseriesEntityIndex.GetUInt32TimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<UInt64TimeseriesPropertyEntity> GetUInt64TimeseriesPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesPropertyEntity> GetUInt64TimeseriesPropertyCollectionByTimeseries( Guid? timeseries )
        {
            return _uInt64TimeseriesPropertyByTimeseriesEntityIndex.GetUInt64TimeseriesPropertyCollectionByTimeseries( timeseries );
        }

        public List<TimeSpanPropertyEntity> GetTimeSpanPropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt16PropertyEntity> GetUInt16PropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt32PropertyEntity> GetUInt32PropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt64PropertyEntity> GetUInt64PropertyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<PropertyDefinitionEntity> GetPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<PropertyDefinitionEntity> GetPropertyDefinitionCollectionByElementType( Guid elementType )
        {
            return _propertyDefinitionByElementTypeAndNameEntityIndex.GetPropertyDefinitionCollectionByElementType( elementType );
        }

        public PropertyDefinitionEntity? GetPropertyDefinitionByElementTypeAndName( Guid elementType, string name )
        {
            return _propertyDefinitionByElementTypeAndNameEntityIndex.GetPropertyDefinitionByElementTypeAndName( elementType, name );
        }

        public List<BinaryPropertyDefinitionEntity> GetBinaryPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BooleanPropertyDefinitionEntity> GetBooleanPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BytePropertyDefinitionEntity> GetBytePropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimePropertyDefinitionEntity> GetDateTimePropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DoublePropertyDefinitionEntity> GetDoublePropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GuidPropertyDefinitionEntity> GetGuidPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int16PropertyDefinitionEntity> GetInt16PropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int32PropertyDefinitionEntity> GetInt32PropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int64PropertyDefinitionEntity> GetInt64PropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByDefaultValue( Guid? defaultValue )
        {
            return _referencePropertyDefinitionByDefaultValueEntityIndex.GetReferencePropertyDefinitionCollectionByDefaultValue( defaultValue );
        }

        public List<ReferencePropertyDefinitionEntity> GetReferencePropertyDefinitionCollectionByReferencedElementType( Guid? referencedElementType )
        {
            return _referencePropertyDefinitionByReferencedElementTypeEntityIndex.GetReferencePropertyDefinitionCollectionByReferencedElementType( referencedElementType );
        }

        public List<SBytePropertyDefinitionEntity> GetSBytePropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SinglePropertyDefinitionEntity> GetSinglePropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<StringPropertyDefinitionEntity> GetStringPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesPropertyDefinitionEntity> GetTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesPropertyDefinitionEntity> GetBinaryTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesPropertyDefinitionEntity> GetBooleanTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesPropertyDefinitionEntity> GetByteTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesPropertyDefinitionEntity> GetDateTimeTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesPropertyDefinitionEntity> GetDoubleTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesPropertyDefinitionEntity> GetGuidTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesPropertyDefinitionEntity> GetInt16TimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesPropertyDefinitionEntity> GetInt32TimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesPropertyDefinitionEntity> GetInt64TimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesPropertyDefinitionEntity> GetReferenceTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesPropertyDefinitionEntity> GetReferenceTimeseriesPropertyDefinitionCollectionByReferencedElementType( Guid? referencedElementType )
        {
            return _referenceTimeseriesPropertyDefinitionByReferencedElementTypeEntityIndex.GetReferenceTimeseriesPropertyDefinitionCollectionByReferencedElementType( referencedElementType );
        }

        public List<SByteTimeseriesPropertyDefinitionEntity> GetSByteTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesPropertyDefinitionEntity> GetSingleTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesPropertyDefinitionEntity> GetStringTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesPropertyDefinitionEntity> GetTimeSpanTimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesPropertyDefinitionEntity> GetUInt16TimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesPropertyDefinitionEntity> GetUInt32TimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesPropertyDefinitionEntity> GetUInt64TimeseriesPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanPropertyDefinitionEntity> GetTimeSpanPropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt16PropertyDefinitionEntity> GetUInt16PropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt32PropertyDefinitionEntity> GetUInt32PropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt64PropertyDefinitionEntity> GetUInt64PropertyDefinitionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionByRadar( Guid radar )
        {
            return _radarAlarmStatusByRadarAndTimestampEntityIndex.GetRadarAlarmStatusCollectionByRadar( radar );
        }

        public RadarAlarmStatusEntity? GetRadarAlarmStatusByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarAlarmStatusByRadarAndTimestampEntityIndex.GetRadarAlarmStatusByRadarAndTimestamp( radar, timestamp );
        }

        public RadarAlarmStatusEntity? GetRadarAlarmStatusByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarAlarmStatusByRadarAndTimestampEntityIndex.GetRadarAlarmStatusByRadarAtTimestamp( radar, timestamp );
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarAlarmStatusByRadarAndTimestampEntityIndex.GetRadarAlarmStatusByRadarFromTimestamp( radar, timestamp );
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarAlarmStatusByRadarAndTimestampEntityIndex.GetRadarAlarmStatusByRadarUntilTimestamp( radar, timestamp );
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarAlarmStatusByRadarAndTimestampEntityIndex.GetRadarAlarmStatusByRadarOverTimestamp( radar, fromTimestamp, untilTimestamp );
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionByTimestamp( DateTime timestamp )
        {
            return _radarAlarmStatusByTimestampEntityIndex.GetRadarAlarmStatusCollectionByTimestamp( timestamp );
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionAtTimestamp( DateTime timestamp )
        {
            return _radarAlarmStatusByTimestampEntityIndex.GetRadarAlarmStatusCollectionAtTimestamp( timestamp );
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionFromTimestamp( DateTime timestamp )
        {
            return _radarAlarmStatusByTimestampEntityIndex.GetRadarAlarmStatusCollectionFromTimestamp( timestamp );
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radarAlarmStatusByTimestampEntityIndex.GetRadarAlarmStatusCollectionUntilTimestamp( timestamp );
        }

        public List<RadarAlarmStatusEntity> GetRadarAlarmStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarAlarmStatusByTimestampEntityIndex.GetRadarAlarmStatusCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<RadarCommandEntity> GetRadarCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadar( Guid radar )
        {
            return _radarCommandByRadarAndTimestampEntityIndex.GetRadarCommandCollectionByRadar( radar );
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarCommandByRadarAndTimestampEntityIndex.GetRadarCommandCollectionByRadarAndTimestamp( radar, timestamp );
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarCommandByRadarAndTimestampEntityIndex.GetRadarCommandCollectionByRadarAtTimestamp( radar, timestamp );
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarCommandByRadarAndTimestampEntityIndex.GetRadarCommandCollectionByRadarFromTimestamp( radar, timestamp );
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarCommandByRadarAndTimestampEntityIndex.GetRadarCommandCollectionByRadarUntilTimestamp( radar, timestamp );
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarCommandByRadarAndTimestampEntityIndex.GetRadarCommandCollectionByRadarOverTimestamp( radar, fromTimestamp, untilTimestamp );
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByTimestamp( DateTime timestamp )
        {
            return _radarCommandByTimestampEntityIndex.GetRadarCommandCollectionByTimestamp( timestamp );
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionAtTimestamp( DateTime timestamp )
        {
            return _radarCommandByTimestampEntityIndex.GetRadarCommandCollectionAtTimestamp( timestamp );
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionFromTimestamp( DateTime timestamp )
        {
            return _radarCommandByTimestampEntityIndex.GetRadarCommandCollectionFromTimestamp( timestamp );
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radarCommandByTimestampEntityIndex.GetRadarCommandCollectionUntilTimestamp( timestamp );
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarCommandByTimestampEntityIndex.GetRadarCommandCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<RadarCommandEntity> GetRadarCommandCollectionByReply( Guid? reply )
        {
            return _radarCommandByReplyEntityIndex.GetRadarCommandCollectionByReply( reply );
        }

        public List<RadarCommandGetStatusEntity> GetRadarCommandGetStatusCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadar( Guid radar )
        {
            return _radarCommandReplyByRadarAndTimestampEntityIndex.GetRadarCommandReplyCollectionByRadar( radar );
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarCommandReplyByRadarAndTimestampEntityIndex.GetRadarCommandReplyCollectionByRadarAndTimestamp( radar, timestamp );
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarCommandReplyByRadarAndTimestampEntityIndex.GetRadarCommandReplyCollectionByRadarAtTimestamp( radar, timestamp );
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarCommandReplyByRadarAndTimestampEntityIndex.GetRadarCommandReplyCollectionByRadarFromTimestamp( radar, timestamp );
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarCommandReplyByRadarAndTimestampEntityIndex.GetRadarCommandReplyCollectionByRadarUntilTimestamp( radar, timestamp );
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarCommandReplyByRadarAndTimestampEntityIndex.GetRadarCommandReplyCollectionByRadarOverTimestamp( radar, fromTimestamp, untilTimestamp );
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            return _radarCommandReplyByTimestampEntityIndex.GetRadarCommandReplyCollectionByTimestamp( timestamp );
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            return _radarCommandReplyByTimestampEntityIndex.GetRadarCommandReplyCollectionAtTimestamp( timestamp );
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            return _radarCommandReplyByTimestampEntityIndex.GetRadarCommandReplyCollectionFromTimestamp( timestamp );
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radarCommandReplyByTimestampEntityIndex.GetRadarCommandReplyCollectionUntilTimestamp( timestamp );
        }

        public List<RadarCommandReplyEntity> GetRadarCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarCommandReplyByTimestampEntityIndex.GetRadarCommandReplyCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public RadarCommandReplyEntity? GetRadarCommandReplyByCommand( Guid? command )
        {
            return _radarCommandReplyByCommandEntityIndex.GetRadarCommandReplyByCommand( command );
        }

        public List<RadarCommandReplyGetStatusEntity> GetRadarCommandReplyGetStatusCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionByRadar( Guid radar )
        {
            return _radarConfigurationByRadarAndTimestampEntityIndex.GetRadarConfigurationCollectionByRadar( radar );
        }

        public RadarConfigurationEntity? GetRadarConfigurationByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarConfigurationByRadarAndTimestampEntityIndex.GetRadarConfigurationByRadarAndTimestamp( radar, timestamp );
        }

        public RadarConfigurationEntity? GetRadarConfigurationByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarConfigurationByRadarAndTimestampEntityIndex.GetRadarConfigurationByRadarAtTimestamp( radar, timestamp );
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarConfigurationByRadarAndTimestampEntityIndex.GetRadarConfigurationByRadarFromTimestamp( radar, timestamp );
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarConfigurationByRadarAndTimestampEntityIndex.GetRadarConfigurationByRadarUntilTimestamp( radar, timestamp );
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarConfigurationByRadarAndTimestampEntityIndex.GetRadarConfigurationByRadarOverTimestamp( radar, fromTimestamp, untilTimestamp );
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _radarConfigurationByTimestampEntityIndex.GetRadarConfigurationCollectionByTimestamp( timestamp );
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _radarConfigurationByTimestampEntityIndex.GetRadarConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _radarConfigurationByTimestampEntityIndex.GetRadarConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radarConfigurationByTimestampEntityIndex.GetRadarConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<RadarConfigurationEntity> GetRadarConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarConfigurationByTimestampEntityIndex.GetRadarConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<RadarImageEntity> GetRadarImageCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarImageEntity> GetRadarImageCollectionByRadar( Guid radar )
        {
            return _radarImageByRadarAndTimestampEntityIndex.GetRadarImageCollectionByRadar( radar );
        }

        public RadarImageEntity? GetRadarImageByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarImageByRadarAndTimestampEntityIndex.GetRadarImageByRadarAndTimestamp( radar, timestamp );
        }

        public RadarImageEntity? GetRadarImageByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarImageByRadarAndTimestampEntityIndex.GetRadarImageByRadarAtTimestamp( radar, timestamp );
        }

        public List<RadarImageEntity> GetRadarImageByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarImageByRadarAndTimestampEntityIndex.GetRadarImageByRadarFromTimestamp( radar, timestamp );
        }

        public List<RadarImageEntity> GetRadarImageByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarImageByRadarAndTimestampEntityIndex.GetRadarImageByRadarUntilTimestamp( radar, timestamp );
        }

        public List<RadarImageEntity> GetRadarImageByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarImageByRadarAndTimestampEntityIndex.GetRadarImageByRadarOverTimestamp( radar, fromTimestamp, untilTimestamp );
        }

        public List<RadarImageEntity> GetRadarImageCollectionByTimestamp( DateTime timestamp )
        {
            return _radarImageByTimestampEntityIndex.GetRadarImageCollectionByTimestamp( timestamp );
        }

        public List<RadarImageEntity> GetRadarImageCollectionAtTimestamp( DateTime timestamp )
        {
            return _radarImageByTimestampEntityIndex.GetRadarImageCollectionAtTimestamp( timestamp );
        }

        public List<RadarImageEntity> GetRadarImageCollectionFromTimestamp( DateTime timestamp )
        {
            return _radarImageByTimestampEntityIndex.GetRadarImageCollectionFromTimestamp( timestamp );
        }

        public List<RadarImageEntity> GetRadarImageCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radarImageByTimestampEntityIndex.GetRadarImageCollectionUntilTimestamp( timestamp );
        }

        public List<RadarImageEntity> GetRadarImageCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarImageByTimestampEntityIndex.GetRadarImageCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionByRadar( Guid radar )
        {
            return _radarRawTrackTableByRadarAndTimestampEntityIndex.GetRadarRawTrackTableCollectionByRadar( radar );
        }

        public RadarRawTrackTableEntity? GetRadarRawTrackTableByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarRawTrackTableByRadarAndTimestampEntityIndex.GetRadarRawTrackTableByRadarAndTimestamp( radar, timestamp );
        }

        public RadarRawTrackTableEntity? GetRadarRawTrackTableByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarRawTrackTableByRadarAndTimestampEntityIndex.GetRadarRawTrackTableByRadarAtTimestamp( radar, timestamp );
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarRawTrackTableByRadarAndTimestampEntityIndex.GetRadarRawTrackTableByRadarFromTimestamp( radar, timestamp );
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarRawTrackTableByRadarAndTimestampEntityIndex.GetRadarRawTrackTableByRadarUntilTimestamp( radar, timestamp );
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarRawTrackTableByRadarAndTimestampEntityIndex.GetRadarRawTrackTableByRadarOverTimestamp( radar, fromTimestamp, untilTimestamp );
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionByTimestamp( DateTime timestamp )
        {
            return _radarRawTrackTableByTimestampEntityIndex.GetRadarRawTrackTableCollectionByTimestamp( timestamp );
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionAtTimestamp( DateTime timestamp )
        {
            return _radarRawTrackTableByTimestampEntityIndex.GetRadarRawTrackTableCollectionAtTimestamp( timestamp );
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionFromTimestamp( DateTime timestamp )
        {
            return _radarRawTrackTableByTimestampEntityIndex.GetRadarRawTrackTableCollectionFromTimestamp( timestamp );
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radarRawTrackTableByTimestampEntityIndex.GetRadarRawTrackTableCollectionUntilTimestamp( timestamp );
        }

        public List<RadarRawTrackTableEntity> GetRadarRawTrackTableCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarRawTrackTableByTimestampEntityIndex.GetRadarRawTrackTableCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<RadarStatusEntity> GetRadarStatusCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionByRadar( Guid radar )
        {
            return _radarStatusByRadarAndTimestampEntityIndex.GetRadarStatusCollectionByRadar( radar );
        }

        public RadarStatusEntity? GetRadarStatusByRadarAndTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarStatusByRadarAndTimestampEntityIndex.GetRadarStatusByRadarAndTimestamp( radar, timestamp );
        }

        public RadarStatusEntity? GetRadarStatusByRadarAtTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarStatusByRadarAndTimestampEntityIndex.GetRadarStatusByRadarAtTimestamp( radar, timestamp );
        }

        public List<RadarStatusEntity> GetRadarStatusByRadarFromTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarStatusByRadarAndTimestampEntityIndex.GetRadarStatusByRadarFromTimestamp( radar, timestamp );
        }

        public List<RadarStatusEntity> GetRadarStatusByRadarUntilTimestamp( Guid radar, DateTime timestamp )
        {
            return _radarStatusByRadarAndTimestampEntityIndex.GetRadarStatusByRadarUntilTimestamp( radar, timestamp );
        }

        public List<RadarStatusEntity> GetRadarStatusByRadarOverTimestamp( Guid radar, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarStatusByRadarAndTimestampEntityIndex.GetRadarStatusByRadarOverTimestamp( radar, fromTimestamp, untilTimestamp );
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionByTimestamp( DateTime timestamp )
        {
            return _radarStatusByTimestampEntityIndex.GetRadarStatusCollectionByTimestamp( timestamp );
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionAtTimestamp( DateTime timestamp )
        {
            return _radarStatusByTimestampEntityIndex.GetRadarStatusCollectionAtTimestamp( timestamp );
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionFromTimestamp( DateTime timestamp )
        {
            return _radarStatusByTimestampEntityIndex.GetRadarStatusCollectionFromTimestamp( timestamp );
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radarStatusByTimestampEntityIndex.GetRadarStatusCollectionUntilTimestamp( timestamp );
        }

        public List<RadarStatusEntity> GetRadarStatusCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radarStatusByTimestampEntityIndex.GetRadarStatusCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<RadioCommandEntity> GetRadioCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadio( Guid radio )
        {
            return _radioCommandByRadioAndTimestampEntityIndex.GetRadioCommandCollectionByRadio( radio );
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            return _radioCommandByRadioAndTimestampEntityIndex.GetRadioCommandCollectionByRadioAndTimestamp( radio, timestamp );
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            return _radioCommandByRadioAndTimestampEntityIndex.GetRadioCommandCollectionByRadioAtTimestamp( radio, timestamp );
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            return _radioCommandByRadioAndTimestampEntityIndex.GetRadioCommandCollectionByRadioFromTimestamp( radio, timestamp );
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            return _radioCommandByRadioAndTimestampEntityIndex.GetRadioCommandCollectionByRadioUntilTimestamp( radio, timestamp );
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radioCommandByRadioAndTimestampEntityIndex.GetRadioCommandCollectionByRadioOverTimestamp( radio, fromTimestamp, untilTimestamp );
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByTimestamp( DateTime timestamp )
        {
            return _radioCommandByTimestampEntityIndex.GetRadioCommandCollectionByTimestamp( timestamp );
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionAtTimestamp( DateTime timestamp )
        {
            return _radioCommandByTimestampEntityIndex.GetRadioCommandCollectionAtTimestamp( timestamp );
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionFromTimestamp( DateTime timestamp )
        {
            return _radioCommandByTimestampEntityIndex.GetRadioCommandCollectionFromTimestamp( timestamp );
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radioCommandByTimestampEntityIndex.GetRadioCommandCollectionUntilTimestamp( timestamp );
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radioCommandByTimestampEntityIndex.GetRadioCommandCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<RadioCommandEntity> GetRadioCommandCollectionByReply( Guid? reply )
        {
            return _radioCommandByReplyEntityIndex.GetRadioCommandCollectionByReply( reply );
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadio( Guid radio )
        {
            return _radioCommandReplyByRadioAndTimestampEntityIndex.GetRadioCommandReplyCollectionByRadio( radio );
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            return _radioCommandReplyByRadioAndTimestampEntityIndex.GetRadioCommandReplyCollectionByRadioAndTimestamp( radio, timestamp );
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            return _radioCommandReplyByRadioAndTimestampEntityIndex.GetRadioCommandReplyCollectionByRadioAtTimestamp( radio, timestamp );
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            return _radioCommandReplyByRadioAndTimestampEntityIndex.GetRadioCommandReplyCollectionByRadioFromTimestamp( radio, timestamp );
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            return _radioCommandReplyByRadioAndTimestampEntityIndex.GetRadioCommandReplyCollectionByRadioUntilTimestamp( radio, timestamp );
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radioCommandReplyByRadioAndTimestampEntityIndex.GetRadioCommandReplyCollectionByRadioOverTimestamp( radio, fromTimestamp, untilTimestamp );
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            return _radioCommandReplyByTimestampEntityIndex.GetRadioCommandReplyCollectionByTimestamp( timestamp );
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            return _radioCommandReplyByTimestampEntityIndex.GetRadioCommandReplyCollectionAtTimestamp( timestamp );
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            return _radioCommandReplyByTimestampEntityIndex.GetRadioCommandReplyCollectionFromTimestamp( timestamp );
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radioCommandReplyByTimestampEntityIndex.GetRadioCommandReplyCollectionUntilTimestamp( timestamp );
        }

        public List<RadioCommandReplyEntity> GetRadioCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radioCommandReplyByTimestampEntityIndex.GetRadioCommandReplyCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public RadioCommandReplyEntity? GetRadioCommandReplyByCommand( Guid? command )
        {
            return _radioCommandReplyByCommandEntityIndex.GetRadioCommandReplyByCommand( command );
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionByRadio( Guid radio )
        {
            return _radioConfigurationByRadioAndTimestampEntityIndex.GetRadioConfigurationCollectionByRadio( radio );
        }

        public RadioConfigurationEntity? GetRadioConfigurationByRadioAndTimestamp( Guid radio, DateTime timestamp )
        {
            return _radioConfigurationByRadioAndTimestampEntityIndex.GetRadioConfigurationByRadioAndTimestamp( radio, timestamp );
        }

        public RadioConfigurationEntity? GetRadioConfigurationByRadioAtTimestamp( Guid radio, DateTime timestamp )
        {
            return _radioConfigurationByRadioAndTimestampEntityIndex.GetRadioConfigurationByRadioAtTimestamp( radio, timestamp );
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationByRadioFromTimestamp( Guid radio, DateTime timestamp )
        {
            return _radioConfigurationByRadioAndTimestampEntityIndex.GetRadioConfigurationByRadioFromTimestamp( radio, timestamp );
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationByRadioUntilTimestamp( Guid radio, DateTime timestamp )
        {
            return _radioConfigurationByRadioAndTimestampEntityIndex.GetRadioConfigurationByRadioUntilTimestamp( radio, timestamp );
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationByRadioOverTimestamp( Guid radio, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radioConfigurationByRadioAndTimestampEntityIndex.GetRadioConfigurationByRadioOverTimestamp( radio, fromTimestamp, untilTimestamp );
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _radioConfigurationByTimestampEntityIndex.GetRadioConfigurationCollectionByTimestamp( timestamp );
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _radioConfigurationByTimestampEntityIndex.GetRadioConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _radioConfigurationByTimestampEntityIndex.GetRadioConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radioConfigurationByTimestampEntityIndex.GetRadioConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<RadioConfigurationEntity> GetRadioConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radioConfigurationByTimestampEntityIndex.GetRadioConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadome( Guid radome )
        {
            return _radomeCommandByRadomeAndTimestampEntityIndex.GetRadomeCommandCollectionByRadome( radome );
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            return _radomeCommandByRadomeAndTimestampEntityIndex.GetRadomeCommandCollectionByRadomeAndTimestamp( radome, timestamp );
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            return _radomeCommandByRadomeAndTimestampEntityIndex.GetRadomeCommandCollectionByRadomeAtTimestamp( radome, timestamp );
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            return _radomeCommandByRadomeAndTimestampEntityIndex.GetRadomeCommandCollectionByRadomeFromTimestamp( radome, timestamp );
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            return _radomeCommandByRadomeAndTimestampEntityIndex.GetRadomeCommandCollectionByRadomeUntilTimestamp( radome, timestamp );
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radomeCommandByRadomeAndTimestampEntityIndex.GetRadomeCommandCollectionByRadomeOverTimestamp( radome, fromTimestamp, untilTimestamp );
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByTimestamp( DateTime timestamp )
        {
            return _radomeCommandByTimestampEntityIndex.GetRadomeCommandCollectionByTimestamp( timestamp );
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionAtTimestamp( DateTime timestamp )
        {
            return _radomeCommandByTimestampEntityIndex.GetRadomeCommandCollectionAtTimestamp( timestamp );
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionFromTimestamp( DateTime timestamp )
        {
            return _radomeCommandByTimestampEntityIndex.GetRadomeCommandCollectionFromTimestamp( timestamp );
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radomeCommandByTimestampEntityIndex.GetRadomeCommandCollectionUntilTimestamp( timestamp );
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radomeCommandByTimestampEntityIndex.GetRadomeCommandCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<RadomeCommandEntity> GetRadomeCommandCollectionByReply( Guid? reply )
        {
            return _radomeCommandByReplyEntityIndex.GetRadomeCommandCollectionByReply( reply );
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadome( Guid radome )
        {
            return _radomeCommandReplyByRadomeAndTimestampEntityIndex.GetRadomeCommandReplyCollectionByRadome( radome );
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            return _radomeCommandReplyByRadomeAndTimestampEntityIndex.GetRadomeCommandReplyCollectionByRadomeAndTimestamp( radome, timestamp );
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            return _radomeCommandReplyByRadomeAndTimestampEntityIndex.GetRadomeCommandReplyCollectionByRadomeAtTimestamp( radome, timestamp );
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            return _radomeCommandReplyByRadomeAndTimestampEntityIndex.GetRadomeCommandReplyCollectionByRadomeFromTimestamp( radome, timestamp );
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            return _radomeCommandReplyByRadomeAndTimestampEntityIndex.GetRadomeCommandReplyCollectionByRadomeUntilTimestamp( radome, timestamp );
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radomeCommandReplyByRadomeAndTimestampEntityIndex.GetRadomeCommandReplyCollectionByRadomeOverTimestamp( radome, fromTimestamp, untilTimestamp );
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            return _radomeCommandReplyByTimestampEntityIndex.GetRadomeCommandReplyCollectionByTimestamp( timestamp );
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            return _radomeCommandReplyByTimestampEntityIndex.GetRadomeCommandReplyCollectionAtTimestamp( timestamp );
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            return _radomeCommandReplyByTimestampEntityIndex.GetRadomeCommandReplyCollectionFromTimestamp( timestamp );
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radomeCommandReplyByTimestampEntityIndex.GetRadomeCommandReplyCollectionUntilTimestamp( timestamp );
        }

        public List<RadomeCommandReplyEntity> GetRadomeCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radomeCommandReplyByTimestampEntityIndex.GetRadomeCommandReplyCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public RadomeCommandReplyEntity? GetRadomeCommandReplyByCommand( Guid? command )
        {
            return _radomeCommandReplyByCommandEntityIndex.GetRadomeCommandReplyByCommand( command );
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionByRadome( Guid radome )
        {
            return _radomeConfigurationByRadomeAndTimestampEntityIndex.GetRadomeConfigurationCollectionByRadome( radome );
        }

        public RadomeConfigurationEntity? GetRadomeConfigurationByRadomeAndTimestamp( Guid radome, DateTime timestamp )
        {
            return _radomeConfigurationByRadomeAndTimestampEntityIndex.GetRadomeConfigurationByRadomeAndTimestamp( radome, timestamp );
        }

        public RadomeConfigurationEntity? GetRadomeConfigurationByRadomeAtTimestamp( Guid radome, DateTime timestamp )
        {
            return _radomeConfigurationByRadomeAndTimestampEntityIndex.GetRadomeConfigurationByRadomeAtTimestamp( radome, timestamp );
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationByRadomeFromTimestamp( Guid radome, DateTime timestamp )
        {
            return _radomeConfigurationByRadomeAndTimestampEntityIndex.GetRadomeConfigurationByRadomeFromTimestamp( radome, timestamp );
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationByRadomeUntilTimestamp( Guid radome, DateTime timestamp )
        {
            return _radomeConfigurationByRadomeAndTimestampEntityIndex.GetRadomeConfigurationByRadomeUntilTimestamp( radome, timestamp );
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationByRadomeOverTimestamp( Guid radome, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radomeConfigurationByRadomeAndTimestampEntityIndex.GetRadomeConfigurationByRadomeOverTimestamp( radome, fromTimestamp, untilTimestamp );
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _radomeConfigurationByTimestampEntityIndex.GetRadomeConfigurationCollectionByTimestamp( timestamp );
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _radomeConfigurationByTimestampEntityIndex.GetRadomeConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _radomeConfigurationByTimestampEntityIndex.GetRadomeConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _radomeConfigurationByTimestampEntityIndex.GetRadomeConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<RadomeConfigurationEntity> GetRadomeConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _radomeConfigurationByTimestampEntityIndex.GetRadomeConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _referenceTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetReferenceTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public ReferenceTimeseriesValueEntity? GetReferenceTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _referenceTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetReferenceTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public ReferenceTimeseriesValueEntity? GetReferenceTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _referenceTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetReferenceTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _referenceTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetReferenceTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _referenceTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetReferenceTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _referenceTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetReferenceTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _referenceTimeseriesValueByTimestampEntityIndex.GetReferenceTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _referenceTimeseriesValueByTimestampEntityIndex.GetReferenceTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _referenceTimeseriesValueByTimestampEntityIndex.GetReferenceTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _referenceTimeseriesValueByTimestampEntityIndex.GetReferenceTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _referenceTimeseriesValueByTimestampEntityIndex.GetReferenceTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<ReferenceTimeseriesValueEntity> GetReferenceTimeseriesValueCollectionByValue( Guid value__ )
        {
            return _referenceTimeseriesValueByValueEntityIndex.GetReferenceTimeseriesValueCollectionByValue( value__ );
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _sByteTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetSByteTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public SByteTimeseriesValueEntity? GetSByteTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _sByteTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetSByteTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public SByteTimeseriesValueEntity? GetSByteTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _sByteTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetSByteTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _sByteTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetSByteTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _sByteTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetSByteTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _sByteTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetSByteTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _sByteTimeseriesValueByTimestampEntityIndex.GetSByteTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _sByteTimeseriesValueByTimestampEntityIndex.GetSByteTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _sByteTimeseriesValueByTimestampEntityIndex.GetSByteTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _sByteTimeseriesValueByTimestampEntityIndex.GetSByteTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<SByteTimeseriesValueEntity> GetSByteTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _sByteTimeseriesValueByTimestampEntityIndex.GetSByteTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<SecurityDomainEntity> GetSecurityDomainCollection( )
        {
            throw new NotImplementedException();
        }

        public SecurityDomainEntity? GetSecurityDomainByName( string name )
        {
            return _securityDomainByNameEntityIndex.GetSecurityDomainByName( name );
        }

        public List<SecurityIdentifierEntity> GetSecurityIdentifierCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierEntity> GetSecurityIdentifierCollectionByDomain( Guid domain )
        {
            return _securityIdentifierByDomainAndIdentityEntityIndex.GetSecurityIdentifierCollectionByDomain( domain );
        }

        public SecurityIdentifierEntity? GetSecurityIdentifierByDomainAndIdentity( Guid domain, string identity )
        {
            return _securityIdentifierByDomainAndIdentityEntityIndex.GetSecurityIdentifierByDomainAndIdentity( domain, identity );
        }

        public List<SecurityLoginEntity> GetSecurityLoginCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SecurityRoleEntity> GetSecurityRoleCollection( )
        {
            throw new NotImplementedException();
        }

        public SecurityRoleEntity? GetSecurityRoleByName( string name )
        {
            return _securityRoleByNameEntityIndex.GetSecurityRoleByName( name );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMember( Guid member )
        {
            return _securityIdentifierRoleLinkByMemberAndStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByMember( member );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberAndStart( Guid member, DateTime start )
        {
            return _securityIdentifierRoleLinkByMemberAndStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByMemberAndStart( member, start );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberAtStart( Guid member, DateTime start )
        {
            return _securityIdentifierRoleLinkByMemberAndStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByMemberAtStart( member, start );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberFromStart( Guid member, DateTime start )
        {
            return _securityIdentifierRoleLinkByMemberAndStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByMemberFromStart( member, start );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberUntilStart( Guid member, DateTime start )
        {
            return _securityIdentifierRoleLinkByMemberAndStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByMemberUntilStart( member, start );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByMemberOverStart( Guid member, DateTime fromStart, DateTime untilStart )
        {
            return _securityIdentifierRoleLinkByMemberAndStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByMemberOverStart( member, fromStart, untilStart );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRole( Guid role )
        {
            return _securityIdentifierRoleLinkByRoleAndStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByRole( role );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleAndStart( Guid role, DateTime start )
        {
            return _securityIdentifierRoleLinkByRoleAndStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByRoleAndStart( role, start );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleAtStart( Guid role, DateTime start )
        {
            return _securityIdentifierRoleLinkByRoleAndStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByRoleAtStart( role, start );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleFromStart( Guid role, DateTime start )
        {
            return _securityIdentifierRoleLinkByRoleAndStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByRoleFromStart( role, start );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleUntilStart( Guid role, DateTime start )
        {
            return _securityIdentifierRoleLinkByRoleAndStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByRoleUntilStart( role, start );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByRoleOverStart( Guid role, DateTime fromStart, DateTime untilStart )
        {
            return _securityIdentifierRoleLinkByRoleAndStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByRoleOverStart( role, fromStart, untilStart );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionByStart( DateTime start )
        {
            return _securityIdentifierRoleLinkByStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionByStart( start );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionAtStart( DateTime start )
        {
            return _securityIdentifierRoleLinkByStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionAtStart( start );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionFromStart( DateTime start )
        {
            return _securityIdentifierRoleLinkByStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionFromStart( start );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionUntilStart( DateTime start )
        {
            return _securityIdentifierRoleLinkByStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionUntilStart( start );
        }

        public List<SecurityIdentifierRoleLinkEntity> GetSecurityIdentifierRoleLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            return _securityIdentifierRoleLinkByStartEntityIndex.GetSecurityIdentifierRoleLinkCollectionOverStart( fromStart, untilStart );
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLogin( Guid login )
        {
            return _securityLoginSessionByLoginAndFromTimeEntityIndex.GetSecurityLoginSessionCollectionByLogin( login );
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginAndFromTime( Guid login, DateTime fromTime )
        {
            return _securityLoginSessionByLoginAndFromTimeEntityIndex.GetSecurityLoginSessionCollectionByLoginAndFromTime( login, fromTime );
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginAtFromTime( Guid login, DateTime fromTime )
        {
            return _securityLoginSessionByLoginAndFromTimeEntityIndex.GetSecurityLoginSessionCollectionByLoginAtFromTime( login, fromTime );
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginFromFromTime( Guid login, DateTime fromTime )
        {
            return _securityLoginSessionByLoginAndFromTimeEntityIndex.GetSecurityLoginSessionCollectionByLoginFromFromTime( login, fromTime );
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginUntilFromTime( Guid login, DateTime fromTime )
        {
            return _securityLoginSessionByLoginAndFromTimeEntityIndex.GetSecurityLoginSessionCollectionByLoginUntilFromTime( login, fromTime );
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByLoginOverFromTime( Guid login, DateTime fromFromTime, DateTime untilFromTime )
        {
            return _securityLoginSessionByLoginAndFromTimeEntityIndex.GetSecurityLoginSessionCollectionByLoginOverFromTime( login, fromFromTime, untilFromTime );
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionByFromTime( DateTime fromTime )
        {
            return _securityLoginSessionByFromTimeEntityIndex.GetSecurityLoginSessionCollectionByFromTime( fromTime );
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionAtFromTime( DateTime fromTime )
        {
            return _securityLoginSessionByFromTimeEntityIndex.GetSecurityLoginSessionCollectionAtFromTime( fromTime );
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionFromFromTime( DateTime fromTime )
        {
            return _securityLoginSessionByFromTimeEntityIndex.GetSecurityLoginSessionCollectionFromFromTime( fromTime );
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionUntilFromTime( DateTime fromTime )
        {
            return _securityLoginSessionByFromTimeEntityIndex.GetSecurityLoginSessionCollectionUntilFromTime( fromTime );
        }

        public List<SecurityLoginSessionEntity> GetSecurityLoginSessionCollectionOverFromTime( DateTime fromFromTime, DateTime untilFromTime )
        {
            return _securityLoginSessionByFromTimeEntityIndex.GetSecurityLoginSessionCollectionOverFromTime( fromFromTime, untilFromTime );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifier( Guid identifier )
        {
            return _securityPermissionByIdentifierTypeCodeAndTimestampEntityIndex.GetSecurityPermissionCollectionByIdentifier( identifier );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierAndTypeCode( Guid identifier, int typeCode )
        {
            return _securityPermissionByIdentifierTypeCodeAndTimestampEntityIndex.GetSecurityPermissionCollectionByIdentifierAndTypeCode( identifier, typeCode );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierFromTypeCode( Guid identifier, int typeCode )
        {
            return _securityPermissionByIdentifierTypeCodeAndTimestampEntityIndex.GetSecurityPermissionCollectionByIdentifierFromTypeCode( identifier, typeCode );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierUntilTypeCode( Guid identifier, int typeCode )
        {
            return _securityPermissionByIdentifierTypeCodeAndTimestampEntityIndex.GetSecurityPermissionCollectionByIdentifierUntilTypeCode( identifier, typeCode );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByIdentifierOverTypeCode( Guid identifier, int fromTypeCode, int untilTypeCode )
        {
            return _securityPermissionByIdentifierTypeCodeAndTimestampEntityIndex.GetSecurityPermissionCollectionByIdentifierOverTypeCode( identifier, fromTypeCode, untilTypeCode );
        }

        public SecurityPermissionEntity? GetSecurityPermissionByIdentifierTypeCodeAndTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            return _securityPermissionByIdentifierTypeCodeAndTimestampEntityIndex.GetSecurityPermissionByIdentifierTypeCodeAndTimestamp( identifier, typeCode, timestamp );
        }

        public SecurityPermissionEntity? GetSecurityPermissionByIdentifierTypeCodeAtTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            return _securityPermissionByIdentifierTypeCodeAndTimestampEntityIndex.GetSecurityPermissionByIdentifierTypeCodeAtTimestamp( identifier, typeCode, timestamp );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionByIdentifierTypeCodeFromTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            return _securityPermissionByIdentifierTypeCodeAndTimestampEntityIndex.GetSecurityPermissionByIdentifierTypeCodeFromTimestamp( identifier, typeCode, timestamp );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionByIdentifierTypeCodeUntilTimestamp( Guid identifier, int typeCode, DateTime timestamp )
        {
            return _securityPermissionByIdentifierTypeCodeAndTimestampEntityIndex.GetSecurityPermissionByIdentifierTypeCodeUntilTimestamp( identifier, typeCode, timestamp );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionByIdentifierTypeCodeOverTimestamp( Guid identifier, int typeCode, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _securityPermissionByIdentifierTypeCodeAndTimestampEntityIndex.GetSecurityPermissionByIdentifierTypeCodeOverTimestamp( identifier, typeCode, fromTimestamp, untilTimestamp );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionByTimestamp( DateTime timestamp )
        {
            return _securityPermissionByTimestampEntityIndex.GetSecurityPermissionCollectionByTimestamp( timestamp );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionAtTimestamp( DateTime timestamp )
        {
            return _securityPermissionByTimestampEntityIndex.GetSecurityPermissionCollectionAtTimestamp( timestamp );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionFromTimestamp( DateTime timestamp )
        {
            return _securityPermissionByTimestampEntityIndex.GetSecurityPermissionCollectionFromTimestamp( timestamp );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionUntilTimestamp( DateTime timestamp )
        {
            return _securityPermissionByTimestampEntityIndex.GetSecurityPermissionCollectionUntilTimestamp( timestamp );
        }

        public List<SecurityPermissionEntity> GetSecurityPermissionCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _securityPermissionByTimestampEntityIndex.GetSecurityPermissionCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _singleTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetSingleTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public SingleTimeseriesValueEntity? GetSingleTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _singleTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetSingleTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public SingleTimeseriesValueEntity? GetSingleTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _singleTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetSingleTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _singleTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetSingleTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _singleTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetSingleTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _singleTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetSingleTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _singleTimeseriesValueByTimestampEntityIndex.GetSingleTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _singleTimeseriesValueByTimestampEntityIndex.GetSingleTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _singleTimeseriesValueByTimestampEntityIndex.GetSingleTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _singleTimeseriesValueByTimestampEntityIndex.GetSingleTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<SingleTimeseriesValueEntity> GetSingleTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _singleTimeseriesValueByTimestampEntityIndex.GetSingleTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _stringTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetStringTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public StringTimeseriesValueEntity? GetStringTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _stringTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetStringTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public StringTimeseriesValueEntity? GetStringTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _stringTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetStringTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _stringTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetStringTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _stringTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetStringTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _stringTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetStringTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _stringTimeseriesValueByTimestampEntityIndex.GetStringTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _stringTimeseriesValueByTimestampEntityIndex.GetStringTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _stringTimeseriesValueByTimestampEntityIndex.GetStringTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _stringTimeseriesValueByTimestampEntityIndex.GetStringTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<StringTimeseriesValueEntity> GetStringTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _stringTimeseriesValueByTimestampEntityIndex.GetStringTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<TimeseriesCatalogElementEntity> GetTimeseriesCatalogElementCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesCatalogElementEntity> GetTimeseriesCatalogElementCollectionByCatalog( Guid? catalog )
        {
            return _timeseriesCatalogElementByCatalogAndNameEntityIndex.GetTimeseriesCatalogElementCollectionByCatalog( catalog );
        }

        public TimeseriesCatalogElementEntity? GetTimeseriesCatalogElementByCatalogAndName( Guid? catalog, string name )
        {
            return _timeseriesCatalogElementByCatalogAndNameEntityIndex.GetTimeseriesCatalogElementByCatalogAndName( catalog, name );
        }

        public List<TimeseriesEntity> GetTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BinaryTimeseriesEntity> GetBinaryTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<BooleanTimeseriesEntity> GetBooleanTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisAidToNavigationOffPositionTimeseriesEntity> GetAisAidToNavigationOffPositionTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisAidToNavigationOffPositionTimeseriesEntity> GetAisAidToNavigationOffPositionTimeseriesCollectionByAidToNavigation( Guid? aidToNavigation )
        {
            return _aisAidToNavigationOffPositionTimeseriesByAidToNavigationEntityIndex.GetAisAidToNavigationOffPositionTimeseriesCollectionByAidToNavigation( aidToNavigation );
        }

        public List<DeviceEnabledTimeseriesEntity> GetDeviceEnabledTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarAutomaticSensitivityTimeControlTimeseriesEntity> GetRadarAutomaticSensitivityTimeControlTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarBlankSector1TimeseriesEntity> GetRadarBlankSector1TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarBlankSector2TimeseriesEntity> GetRadarBlankSector2TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarEnableAutomaticFrequencyControlTimeseriesEntity> GetRadarEnableAutomaticFrequencyControlTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarEnableFastTimeConstantTimeseriesEntity> GetRadarEnableFastTimeConstantTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarEnableSensitivityTimeControlTimeseriesEntity> GetRadarEnableSensitivityTimeControlTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarPowerOnTimeseriesEntity> GetRadarPowerOnTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarSaveSettingsTimeseriesEntity> GetRadarSaveSettingsTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarTrackingTimeseriesEntity> GetRadarTrackingTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaProxySessionEnabledTimeseriesEntity> GetMediaProxySessionEnabledTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<MediaServiceEnabledTimeseriesEntity> GetMediaServiceEnabledTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ByteTimeseriesEntity> GetByteTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DateTimeTimeseriesEntity> GetDateTimeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<DoubleTimeseriesEntity> GetDoubleTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSAltitudeTimeseriesEntity> GetGNSSAltitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSLatitudeTimeseriesEntity> GetGNSSLatitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GNSSLongitudeTimeseriesEntity> GetGNSSLongitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GyroCourseTimeseriesEntity> GetGyroCourseTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public GyroCourseTimeseriesEntity? GetGyroCourseTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            return _gyroCourseTimeseriesByGyroDeviceEntityIndex.GetGyroCourseTimeseriesByGyroDevice( gyroDevice );
        }

        public List<GyroHeadingMagneticNorthTimeseriesEntity> GetGyroHeadingMagneticNorthTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public GyroHeadingMagneticNorthTimeseriesEntity? GetGyroHeadingMagneticNorthTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            return _gyroHeadingMagneticNorthTimeseriesByGyroDeviceEntityIndex.GetGyroHeadingMagneticNorthTimeseriesByGyroDevice( gyroDevice );
        }

        public List<GyroHeadingTrueNorthTimeseriesEntity> GetGyroHeadingTrueNorthTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public GyroHeadingTrueNorthTimeseriesEntity? GetGyroHeadingTrueNorthTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            return _gyroHeadingTrueNorthTimeseriesByGyroDeviceEntityIndex.GetGyroHeadingTrueNorthTimeseriesByGyroDevice( gyroDevice );
        }

        public List<GyroPitchTimeseriesEntity> GetGyroPitchTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public GyroPitchTimeseriesEntity? GetGyroPitchTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            return _gyroPitchTimeseriesByGyroDeviceEntityIndex.GetGyroPitchTimeseriesByGyroDevice( gyroDevice );
        }

        public List<GyroRateOfTurnTimeseriesEntity> GetGyroRateOfTurnTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public GyroRateOfTurnTimeseriesEntity? GetGyroRateOfTurnTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            return _gyroRateOfTurnTimeseriesByGyroDeviceEntityIndex.GetGyroRateOfTurnTimeseriesByGyroDevice( gyroDevice );
        }

        public List<GyroRollTimeseriesEntity> GetGyroRollTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public GyroRollTimeseriesEntity? GetGyroRollTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            return _gyroRollTimeseriesByGyroDeviceEntityIndex.GetGyroRollTimeseriesByGyroDevice( gyroDevice );
        }

        public List<GyroSpeedTimeseriesEntity> GetGyroSpeedTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public GyroSpeedTimeseriesEntity? GetGyroSpeedTimeseriesByGyroDevice( Guid? gyroDevice )
        {
            return _gyroSpeedTimeseriesByGyroDeviceEntityIndex.GetGyroSpeedTimeseriesByGyroDevice( gyroDevice );
        }

        public List<RadarLatitudeTimeseriesEntity> GetRadarLatitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarLongitudeTimeseriesEntity> GetRadarLongitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeDewPointTimeseriesEntity> GetRadomeDewPointTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomePressureTimeseriesEntity> GetRadomePressureTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeTemperatureTimeseriesEntity> GetRadomeTemperatureTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<VesselDraughtTimeseriesEntity> GetVesselDraughtTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ViewLatitudeTimeseriesEntity> GetViewLatitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ViewLongitudeTimeseriesEntity> GetViewLongitudeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ViewZoomLevelTimeseriesEntity> GetViewZoomLevelTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationAbsoluteHumidityTimeseriesEntity> GetWeatherStationAbsoluteHumidityTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public WeatherStationAbsoluteHumidityTimeseriesEntity? GetWeatherStationAbsoluteHumidityTimeseriesByWeatherStation( Guid? weatherStation )
        {
            return _weatherStationAbsoluteHumidityTimeseriesByWeatherStationEntityIndex.GetWeatherStationAbsoluteHumidityTimeseriesByWeatherStation( weatherStation );
        }

        public List<WeatherStationAirTemperatureTimeseriesEntity> GetWeatherStationAirTemperatureTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public WeatherStationAirTemperatureTimeseriesEntity? GetWeatherStationAirTemperatureTimeseriesByWeatherStation( Guid? weatherStation )
        {
            return _weatherStationAirTemperatureTimeseriesByWeatherStationEntityIndex.GetWeatherStationAirTemperatureTimeseriesByWeatherStation( weatherStation );
        }

        public List<WeatherStationBarometricPressureTimeseriesEntity> GetWeatherStationBarometricPressureTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public WeatherStationBarometricPressureTimeseriesEntity? GetWeatherStationBarometricPressureTimeseriesByWeatherStation( Guid? weatherStation )
        {
            return _weatherStationBarometricPressureTimeseriesByWeatherStationEntityIndex.GetWeatherStationBarometricPressureTimeseriesByWeatherStation( weatherStation );
        }

        public List<WeatherStationDewPointTimeseriesEntity> GetWeatherStationDewPointTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public WeatherStationDewPointTimeseriesEntity? GetWeatherStationDewPointTimeseriesByWeatherStation( Guid? weatherStation )
        {
            return _weatherStationDewPointTimeseriesByWeatherStationEntityIndex.GetWeatherStationDewPointTimeseriesByWeatherStation( weatherStation );
        }

        public List<WeatherStationRelativeHumidityTimeseriesEntity> GetWeatherStationRelativeHumidityTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public WeatherStationRelativeHumidityTimeseriesEntity? GetWeatherStationRelativeHumidityTimeseriesByWeatherStation( Guid? weatherStation )
        {
            return _weatherStationRelativeHumidityTimeseriesByWeatherStationEntityIndex.GetWeatherStationRelativeHumidityTimeseriesByWeatherStation( weatherStation );
        }

        public List<WeatherStationWaterTemperatureTimeseriesEntity> GetWeatherStationWaterTemperatureTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public WeatherStationWaterTemperatureTimeseriesEntity? GetWeatherStationWaterTemperatureTimeseriesByWeatherStation( Guid? weatherStation )
        {
            return _weatherStationWaterTemperatureTimeseriesByWeatherStationEntityIndex.GetWeatherStationWaterTemperatureTimeseriesByWeatherStation( weatherStation );
        }

        public List<WeatherStationWindDirectionTimeseriesEntity> GetWeatherStationWindDirectionTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public WeatherStationWindDirectionTimeseriesEntity? GetWeatherStationWindDirectionTimeseriesByWeatherStation( Guid? weatherStation )
        {
            return _weatherStationWindDirectionTimeseriesByWeatherStationEntityIndex.GetWeatherStationWindDirectionTimeseriesByWeatherStation( weatherStation );
        }

        public List<WeatherStationWindSpeedTimeseriesEntity> GetWeatherStationWindSpeedTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public WeatherStationWindSpeedTimeseriesEntity? GetWeatherStationWindSpeedTimeseriesByWeatherStation( Guid? weatherStation )
        {
            return _weatherStationWindSpeedTimeseriesByWeatherStationEntityIndex.GetWeatherStationWindSpeedTimeseriesByWeatherStation( weatherStation );
        }

        public List<GeoPosition2DTimeseriesEntity> GetGeoPosition2DTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<AisAidToNavigationPositionTimeseriesEntity> GetAisAidToNavigationPositionTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GeoPosition3DTimeseriesEntity> GetGeoPosition3DTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<GuidTimeseriesEntity> GetGuidTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int16TimeseriesEntity> GetInt16TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int32TimeseriesEntity> GetInt32TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarAzimuthOffsetTimeseriesEntity> GetRadarAzimuthOffsetTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarFastTimeConstantLevelTimeseriesEntity> GetRadarFastTimeConstantLevelTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarFastTimeConstantModeTimeseriesEntity> GetRadarFastTimeConstantModeTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarPulseTimeseriesEntity> GetRadarPulseTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarSector1EndTimeseriesEntity> GetRadarSector1EndTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarSector1StartTimeseriesEntity> GetRadarSector1StartTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarSector2EndTimeseriesEntity> GetRadarSector2EndTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarSector2StartTimeseriesEntity> GetRadarSector2StartTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarSensitivityTimeControlLevelTimeseriesEntity> GetRadarSensitivityTimeControlLevelTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadarTuningTimeseriesEntity> GetRadarTuningTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<VesselPersonsOnBoardTimeseriesEntity> GetVesselPersonsOnBoardTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Int64TimeseriesEntity> GetInt64TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Position2DTimeseriesEntity> GetPosition2DTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Position3DTimeseriesEntity> GetPosition3DTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ReferenceTimeseriesEntity> GetReferenceTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SByteTimeseriesEntity> GetSByteTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<SingleTimeseriesEntity> GetSingleTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<StringTimeseriesEntity> GetStringTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesEntity> GetTimeSpanTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesEntity> GetUInt16TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesEntity> GetUInt32TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<RadomeStatusTimeseriesEntity> GetRadomeStatusTimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesEntity> GetUInt64TimeseriesCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesCatalogEntity> GetTimeseriesCatalogCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeseriesInfoEntity> GetTimeseriesInfoCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _timeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetTimeSpanTimeseriesValueCollectionByTimeseries( timeseries );
        }

        public TimeSpanTimeseriesValueEntity? GetTimeSpanTimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _timeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetTimeSpanTimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public TimeSpanTimeseriesValueEntity? GetTimeSpanTimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _timeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetTimeSpanTimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _timeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetTimeSpanTimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _timeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetTimeSpanTimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _timeSpanTimeseriesValueByTimeseriesAndTimestampEntityIndex.GetTimeSpanTimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _timeSpanTimeseriesValueByTimestampEntityIndex.GetTimeSpanTimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _timeSpanTimeseriesValueByTimestampEntityIndex.GetTimeSpanTimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _timeSpanTimeseriesValueByTimestampEntityIndex.GetTimeSpanTimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _timeSpanTimeseriesValueByTimestampEntityIndex.GetTimeSpanTimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<TimeSpanTimeseriesValueEntity> GetTimeSpanTimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _timeSpanTimeseriesValueByTimestampEntityIndex.GetTimeSpanTimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItem( Guid item )
        {
            return _trackableItemTrackLinkByItemAndStartEntityIndex.GetTrackableItemTrackLinkCollectionByItem( item );
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByItemAndStart( Guid item, DateTime start )
        {
            return _trackableItemTrackLinkByItemAndStartEntityIndex.GetTrackableItemTrackLinkByItemAndStart( item, start );
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByItemAtStart( Guid item, DateTime start )
        {
            return _trackableItemTrackLinkByItemAndStartEntityIndex.GetTrackableItemTrackLinkByItemAtStart( item, start );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByItemFromStart( Guid item, DateTime start )
        {
            return _trackableItemTrackLinkByItemAndStartEntityIndex.GetTrackableItemTrackLinkByItemFromStart( item, start );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByItemUntilStart( Guid item, DateTime start )
        {
            return _trackableItemTrackLinkByItemAndStartEntityIndex.GetTrackableItemTrackLinkByItemUntilStart( item, start );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByItemOverStart( Guid item, DateTime fromStart, DateTime untilStart )
        {
            return _trackableItemTrackLinkByItemAndStartEntityIndex.GetTrackableItemTrackLinkByItemOverStart( item, fromStart, untilStart );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemAndEnd( Guid item, DateTime? end )
        {
            return _trackableItemTrackLinkByItemAndEndEntityIndex.GetTrackableItemTrackLinkCollectionByItemAndEnd( item, end );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemAtEnd( Guid item, DateTime? end )
        {
            return _trackableItemTrackLinkByItemAndEndEntityIndex.GetTrackableItemTrackLinkCollectionByItemAtEnd( item, end );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemFromEnd( Guid item, DateTime? end )
        {
            return _trackableItemTrackLinkByItemAndEndEntityIndex.GetTrackableItemTrackLinkCollectionByItemFromEnd( item, end );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemUntilEnd( Guid item, DateTime? end )
        {
            return _trackableItemTrackLinkByItemAndEndEntityIndex.GetTrackableItemTrackLinkCollectionByItemUntilEnd( item, end );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByItemOverEnd( Guid item, DateTime fromEnd, DateTime untilEnd )
        {
            return _trackableItemTrackLinkByItemAndEndEntityIndex.GetTrackableItemTrackLinkCollectionByItemOverEnd( item, fromEnd, untilEnd );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrack( Guid track )
        {
            return _trackableItemTrackLinkByTrackAndStartEntityIndex.GetTrackableItemTrackLinkCollectionByTrack( track );
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByTrackAndStart( Guid track, DateTime start )
        {
            return _trackableItemTrackLinkByTrackAndStartEntityIndex.GetTrackableItemTrackLinkByTrackAndStart( track, start );
        }

        public TrackableItemTrackLinkEntity? GetTrackableItemTrackLinkByTrackAtStart( Guid track, DateTime start )
        {
            return _trackableItemTrackLinkByTrackAndStartEntityIndex.GetTrackableItemTrackLinkByTrackAtStart( track, start );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByTrackFromStart( Guid track, DateTime start )
        {
            return _trackableItemTrackLinkByTrackAndStartEntityIndex.GetTrackableItemTrackLinkByTrackFromStart( track, start );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByTrackUntilStart( Guid track, DateTime start )
        {
            return _trackableItemTrackLinkByTrackAndStartEntityIndex.GetTrackableItemTrackLinkByTrackUntilStart( track, start );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkByTrackOverStart( Guid track, DateTime fromStart, DateTime untilStart )
        {
            return _trackableItemTrackLinkByTrackAndStartEntityIndex.GetTrackableItemTrackLinkByTrackOverStart( track, fromStart, untilStart );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackAndEnd( Guid track, DateTime? end )
        {
            return _trackableItemTrackLinkByTrackAndEndEntityIndex.GetTrackableItemTrackLinkCollectionByTrackAndEnd( track, end );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackAtEnd( Guid track, DateTime? end )
        {
            return _trackableItemTrackLinkByTrackAndEndEntityIndex.GetTrackableItemTrackLinkCollectionByTrackAtEnd( track, end );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackFromEnd( Guid track, DateTime? end )
        {
            return _trackableItemTrackLinkByTrackAndEndEntityIndex.GetTrackableItemTrackLinkCollectionByTrackFromEnd( track, end );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackUntilEnd( Guid track, DateTime? end )
        {
            return _trackableItemTrackLinkByTrackAndEndEntityIndex.GetTrackableItemTrackLinkCollectionByTrackUntilEnd( track, end );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByTrackOverEnd( Guid track, DateTime fromEnd, DateTime untilEnd )
        {
            return _trackableItemTrackLinkByTrackAndEndEntityIndex.GetTrackableItemTrackLinkCollectionByTrackOverEnd( track, fromEnd, untilEnd );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionByStart( DateTime start )
        {
            return _trackableItemTrackLinkByStartEntityIndex.GetTrackableItemTrackLinkCollectionByStart( start );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionAtStart( DateTime start )
        {
            return _trackableItemTrackLinkByStartEntityIndex.GetTrackableItemTrackLinkCollectionAtStart( start );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionFromStart( DateTime start )
        {
            return _trackableItemTrackLinkByStartEntityIndex.GetTrackableItemTrackLinkCollectionFromStart( start );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionUntilStart( DateTime start )
        {
            return _trackableItemTrackLinkByStartEntityIndex.GetTrackableItemTrackLinkCollectionUntilStart( start );
        }

        public List<TrackableItemTrackLinkEntity> GetTrackableItemTrackLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            return _trackableItemTrackLinkByStartEntityIndex.GetTrackableItemTrackLinkCollectionOverStart( fromStart, untilStart );
        }

        public List<TrackBaseEntity> GetTrackBaseCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTracker( Guid tracker )
        {
            return _trackBaseByTrackerTrackNumberAndTimestampEntityIndex.GetTrackBaseCollectionByTracker( tracker );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerAndTrackNumber( Guid tracker, long trackNumber )
        {
            return _trackBaseByTrackerTrackNumberAndTimestampEntityIndex.GetTrackBaseCollectionByTrackerAndTrackNumber( tracker, trackNumber );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerFromTrackNumber( Guid tracker, long trackNumber )
        {
            return _trackBaseByTrackerTrackNumberAndTimestampEntityIndex.GetTrackBaseCollectionByTrackerFromTrackNumber( tracker, trackNumber );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerUntilTrackNumber( Guid tracker, long trackNumber )
        {
            return _trackBaseByTrackerTrackNumberAndTimestampEntityIndex.GetTrackBaseCollectionByTrackerUntilTrackNumber( tracker, trackNumber );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerOverTrackNumber( Guid tracker, long fromTrackNumber, long untilTrackNumber )
        {
            return _trackBaseByTrackerTrackNumberAndTimestampEntityIndex.GetTrackBaseCollectionByTrackerOverTrackNumber( tracker, fromTrackNumber, untilTrackNumber );
        }

        public TrackBaseEntity? GetTrackBaseByTrackerTrackNumberAndTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            return _trackBaseByTrackerTrackNumberAndTimestampEntityIndex.GetTrackBaseByTrackerTrackNumberAndTimestamp( tracker, trackNumber, timestamp );
        }

        public TrackBaseEntity? GetTrackBaseByTrackerTrackNumberAtTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            return _trackBaseByTrackerTrackNumberAndTimestampEntityIndex.GetTrackBaseByTrackerTrackNumberAtTimestamp( tracker, trackNumber, timestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseByTrackerTrackNumberFromTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            return _trackBaseByTrackerTrackNumberAndTimestampEntityIndex.GetTrackBaseByTrackerTrackNumberFromTimestamp( tracker, trackNumber, timestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseByTrackerTrackNumberUntilTimestamp( Guid tracker, long trackNumber, DateTime timestamp )
        {
            return _trackBaseByTrackerTrackNumberAndTimestampEntityIndex.GetTrackBaseByTrackerTrackNumberUntilTimestamp( tracker, trackNumber, timestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseByTrackerTrackNumberOverTimestamp( Guid tracker, long trackNumber, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _trackBaseByTrackerTrackNumberAndTimestampEntityIndex.GetTrackBaseByTrackerTrackNumberOverTimestamp( tracker, trackNumber, fromTimestamp, untilTimestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerAndTimestamp( Guid tracker, DateTime timestamp )
        {
            return _trackBaseByTrackerAndTimestampEntityIndex.GetTrackBaseCollectionByTrackerAndTimestamp( tracker, timestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerAtTimestamp( Guid tracker, DateTime timestamp )
        {
            return _trackBaseByTrackerAndTimestampEntityIndex.GetTrackBaseCollectionByTrackerAtTimestamp( tracker, timestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerFromTimestamp( Guid tracker, DateTime timestamp )
        {
            return _trackBaseByTrackerAndTimestampEntityIndex.GetTrackBaseCollectionByTrackerFromTimestamp( tracker, timestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerUntilTimestamp( Guid tracker, DateTime timestamp )
        {
            return _trackBaseByTrackerAndTimestampEntityIndex.GetTrackBaseCollectionByTrackerUntilTimestamp( tracker, timestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackerOverTimestamp( Guid tracker, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _trackBaseByTrackerAndTimestampEntityIndex.GetTrackBaseCollectionByTrackerOverTimestamp( tracker, fromTimestamp, untilTimestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTrackNumber( long trackNumber )
        {
            return _trackBaseByTrackNumberEntityIndex.GetTrackBaseCollectionByTrackNumber( trackNumber );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionFromTrackNumber( long trackNumber )
        {
            return _trackBaseByTrackNumberEntityIndex.GetTrackBaseCollectionFromTrackNumber( trackNumber );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionUntilTrackNumber( long trackNumber )
        {
            return _trackBaseByTrackNumberEntityIndex.GetTrackBaseCollectionUntilTrackNumber( trackNumber );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionOverTrackNumber( long fromTrackNumber, long untilTrackNumber )
        {
            return _trackBaseByTrackNumberEntityIndex.GetTrackBaseCollectionOverTrackNumber( fromTrackNumber, untilTrackNumber );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionByTimestamp( DateTime timestamp )
        {
            return _trackBaseByTimestampEntityIndex.GetTrackBaseCollectionByTimestamp( timestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionAtTimestamp( DateTime timestamp )
        {
            return _trackBaseByTimestampEntityIndex.GetTrackBaseCollectionAtTimestamp( timestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionFromTimestamp( DateTime timestamp )
        {
            return _trackBaseByTimestampEntityIndex.GetTrackBaseCollectionFromTimestamp( timestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionUntilTimestamp( DateTime timestamp )
        {
            return _trackBaseByTimestampEntityIndex.GetTrackBaseCollectionUntilTimestamp( timestamp );
        }

        public List<TrackBaseEntity> GetTrackBaseCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _trackBaseByTimestampEntityIndex.GetTrackBaseCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<TrackEntity> GetTrackCollection( )
        {
            throw new NotImplementedException();
        }

        public List<Track3DEntity> GetTrack3DCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersEntity> GetTrackerFilterParametersCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersEntity> GetTrackerFilterParametersCollectionByTracker( Guid tracker )
        {
            return _trackerFilterParametersByTrackerAndNameEntityIndex.GetTrackerFilterParametersCollectionByTracker( tracker );
        }

        public TrackerFilterParametersEntity? GetTrackerFilterParametersByTrackerAndName( Guid tracker, string name )
        {
            return _trackerFilterParametersByTrackerAndNameEntityIndex.GetTrackerFilterParametersByTrackerAndName( tracker, name );
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionByParameters( Guid parameters )
        {
            return _trackerFilterParametersConfigurationByParametersAndTimestampEntityIndex.GetTrackerFilterParametersConfigurationCollectionByParameters( parameters );
        }

        public TrackerFilterParametersConfigurationEntity? GetTrackerFilterParametersConfigurationByParametersAndTimestamp( Guid parameters, DateTime timestamp )
        {
            return _trackerFilterParametersConfigurationByParametersAndTimestampEntityIndex.GetTrackerFilterParametersConfigurationByParametersAndTimestamp( parameters, timestamp );
        }

        public TrackerFilterParametersConfigurationEntity? GetTrackerFilterParametersConfigurationByParametersAtTimestamp( Guid parameters, DateTime timestamp )
        {
            return _trackerFilterParametersConfigurationByParametersAndTimestampEntityIndex.GetTrackerFilterParametersConfigurationByParametersAtTimestamp( parameters, timestamp );
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationByParametersFromTimestamp( Guid parameters, DateTime timestamp )
        {
            return _trackerFilterParametersConfigurationByParametersAndTimestampEntityIndex.GetTrackerFilterParametersConfigurationByParametersFromTimestamp( parameters, timestamp );
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationByParametersUntilTimestamp( Guid parameters, DateTime timestamp )
        {
            return _trackerFilterParametersConfigurationByParametersAndTimestampEntityIndex.GetTrackerFilterParametersConfigurationByParametersUntilTimestamp( parameters, timestamp );
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationByParametersOverTimestamp( Guid parameters, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _trackerFilterParametersConfigurationByParametersAndTimestampEntityIndex.GetTrackerFilterParametersConfigurationByParametersOverTimestamp( parameters, fromTimestamp, untilTimestamp );
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _trackerFilterParametersConfigurationByTimestampEntityIndex.GetTrackerFilterParametersConfigurationCollectionByTimestamp( timestamp );
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _trackerFilterParametersConfigurationByTimestampEntityIndex.GetTrackerFilterParametersConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _trackerFilterParametersConfigurationByTimestampEntityIndex.GetTrackerFilterParametersConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _trackerFilterParametersConfigurationByTimestampEntityIndex.GetTrackerFilterParametersConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<TrackerFilterParametersConfigurationEntity> GetTrackerFilterParametersConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _trackerFilterParametersConfigurationByTimestampEntityIndex.GetTrackerFilterParametersConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<TrackInfoEntity> GetTrackInfoCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackingServiceOptionsEntity> GetTrackingServiceOptionsCollection( )
        {
            throw new NotImplementedException();
        }

        public TrackingServiceOptionsEntity? GetTrackingServiceOptionsByTimestamp( DateTime timestamp )
        {
            return _trackingServiceOptionsByTimestampEntityIndex.GetTrackingServiceOptionsByTimestamp( timestamp );
        }

        public TrackingServiceOptionsEntity? GetTrackingServiceOptionsAtTimestamp( DateTime timestamp )
        {
            return _trackingServiceOptionsByTimestampEntityIndex.GetTrackingServiceOptionsAtTimestamp( timestamp );
        }

        public List<TrackingServiceOptionsEntity> GetTrackingServiceOptionsFromTimestamp( DateTime timestamp )
        {
            return _trackingServiceOptionsByTimestampEntityIndex.GetTrackingServiceOptionsFromTimestamp( timestamp );
        }

        public List<TrackingServiceOptionsEntity> GetTrackingServiceOptionsUntilTimestamp( DateTime timestamp )
        {
            return _trackingServiceOptionsByTimestampEntityIndex.GetTrackingServiceOptionsUntilTimestamp( timestamp );
        }

        public List<TrackingServiceOptionsEntity> GetTrackingServiceOptionsOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _trackingServiceOptionsByTimestampEntityIndex.GetTrackingServiceOptionsOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<TrackLinkEntity> GetTrackLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimary( Guid primary )
        {
            return _trackLinkByPrimaryAndStartEntityIndex.GetTrackLinkCollectionByPrimary( primary );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryAndStart( Guid primary, DateTime start )
        {
            return _trackLinkByPrimaryAndStartEntityIndex.GetTrackLinkCollectionByPrimaryAndStart( primary, start );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryAtStart( Guid primary, DateTime start )
        {
            return _trackLinkByPrimaryAndStartEntityIndex.GetTrackLinkCollectionByPrimaryAtStart( primary, start );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryFromStart( Guid primary, DateTime start )
        {
            return _trackLinkByPrimaryAndStartEntityIndex.GetTrackLinkCollectionByPrimaryFromStart( primary, start );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryUntilStart( Guid primary, DateTime start )
        {
            return _trackLinkByPrimaryAndStartEntityIndex.GetTrackLinkCollectionByPrimaryUntilStart( primary, start );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByPrimaryOverStart( Guid primary, DateTime fromStart, DateTime untilStart )
        {
            return _trackLinkByPrimaryAndStartEntityIndex.GetTrackLinkCollectionByPrimaryOverStart( primary, fromStart, untilStart );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondary( Guid secondary )
        {
            return _trackLinkBySecondaryAndStartEntityIndex.GetTrackLinkCollectionBySecondary( secondary );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryAndStart( Guid secondary, DateTime start )
        {
            return _trackLinkBySecondaryAndStartEntityIndex.GetTrackLinkCollectionBySecondaryAndStart( secondary, start );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryAtStart( Guid secondary, DateTime start )
        {
            return _trackLinkBySecondaryAndStartEntityIndex.GetTrackLinkCollectionBySecondaryAtStart( secondary, start );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryFromStart( Guid secondary, DateTime start )
        {
            return _trackLinkBySecondaryAndStartEntityIndex.GetTrackLinkCollectionBySecondaryFromStart( secondary, start );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryUntilStart( Guid secondary, DateTime start )
        {
            return _trackLinkBySecondaryAndStartEntityIndex.GetTrackLinkCollectionBySecondaryUntilStart( secondary, start );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionBySecondaryOverStart( Guid secondary, DateTime fromStart, DateTime untilStart )
        {
            return _trackLinkBySecondaryAndStartEntityIndex.GetTrackLinkCollectionBySecondaryOverStart( secondary, fromStart, untilStart );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionByStart( DateTime start )
        {
            return _trackLinkByStartEntityIndex.GetTrackLinkCollectionByStart( start );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionAtStart( DateTime start )
        {
            return _trackLinkByStartEntityIndex.GetTrackLinkCollectionAtStart( start );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionFromStart( DateTime start )
        {
            return _trackLinkByStartEntityIndex.GetTrackLinkCollectionFromStart( start );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionUntilStart( DateTime start )
        {
            return _trackLinkByStartEntityIndex.GetTrackLinkCollectionUntilStart( start );
        }

        public List<TrackLinkEntity> GetTrackLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            return _trackLinkByStartEntityIndex.GetTrackLinkCollectionOverStart( fromStart, untilStart );
        }

        public List<TrackValueEntity> GetTrackValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackValueEntity> GetTrackValueCollectionByTrack( Guid track )
        {
            return _trackValueByTrackAndTimestampEntityIndex.GetTrackValueCollectionByTrack( track );
        }

        public TrackValueEntity? GetTrackValueByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            return _trackValueByTrackAndTimestampEntityIndex.GetTrackValueByTrackAndTimestamp( track, timestamp );
        }

        public TrackValueEntity? GetTrackValueByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            return _trackValueByTrackAndTimestampEntityIndex.GetTrackValueByTrackAtTimestamp( track, timestamp );
        }

        public List<TrackValueEntity> GetTrackValueByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            return _trackValueByTrackAndTimestampEntityIndex.GetTrackValueByTrackFromTimestamp( track, timestamp );
        }

        public List<TrackValueEntity> GetTrackValueByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            return _trackValueByTrackAndTimestampEntityIndex.GetTrackValueByTrackUntilTimestamp( track, timestamp );
        }

        public List<TrackValueEntity> GetTrackValueByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _trackValueByTrackAndTimestampEntityIndex.GetTrackValueByTrackOverTimestamp( track, fromTimestamp, untilTimestamp );
        }

        public List<TrackValueEntity> GetTrackValueCollectionByTimestamp( DateTime timestamp )
        {
            return _trackValueByTimestampEntityIndex.GetTrackValueCollectionByTimestamp( timestamp );
        }

        public List<TrackValueEntity> GetTrackValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _trackValueByTimestampEntityIndex.GetTrackValueCollectionAtTimestamp( timestamp );
        }

        public List<TrackValueEntity> GetTrackValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _trackValueByTimestampEntityIndex.GetTrackValueCollectionFromTimestamp( timestamp );
        }

        public List<TrackValueEntity> GetTrackValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _trackValueByTimestampEntityIndex.GetTrackValueCollectionUntilTimestamp( timestamp );
        }

        public List<TrackValueEntity> GetTrackValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _trackValueByTimestampEntityIndex.GetTrackValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollection( )
        {
            throw new NotImplementedException();
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionByTrack( Guid track )
        {
            return _trackValue3DByTrackAndTimestampEntityIndex.GetTrackValue3DCollectionByTrack( track );
        }

        public TrackValue3DEntity? GetTrackValue3DByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            return _trackValue3DByTrackAndTimestampEntityIndex.GetTrackValue3DByTrackAndTimestamp( track, timestamp );
        }

        public TrackValue3DEntity? GetTrackValue3DByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            return _trackValue3DByTrackAndTimestampEntityIndex.GetTrackValue3DByTrackAtTimestamp( track, timestamp );
        }

        public List<TrackValue3DEntity> GetTrackValue3DByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            return _trackValue3DByTrackAndTimestampEntityIndex.GetTrackValue3DByTrackFromTimestamp( track, timestamp );
        }

        public List<TrackValue3DEntity> GetTrackValue3DByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            return _trackValue3DByTrackAndTimestampEntityIndex.GetTrackValue3DByTrackUntilTimestamp( track, timestamp );
        }

        public List<TrackValue3DEntity> GetTrackValue3DByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _trackValue3DByTrackAndTimestampEntityIndex.GetTrackValue3DByTrackOverTimestamp( track, fromTimestamp, untilTimestamp );
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionByTimestamp( DateTime timestamp )
        {
            return _trackValue3DByTimestampEntityIndex.GetTrackValue3DCollectionByTimestamp( timestamp );
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionAtTimestamp( DateTime timestamp )
        {
            return _trackValue3DByTimestampEntityIndex.GetTrackValue3DCollectionAtTimestamp( timestamp );
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionFromTimestamp( DateTime timestamp )
        {
            return _trackValue3DByTimestampEntityIndex.GetTrackValue3DCollectionFromTimestamp( timestamp );
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionUntilTimestamp( DateTime timestamp )
        {
            return _trackValue3DByTimestampEntityIndex.GetTrackValue3DCollectionUntilTimestamp( timestamp );
        }

        public List<TrackValue3DEntity> GetTrackValue3DCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _trackValue3DByTimestampEntityIndex.GetTrackValue3DCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _uInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt16TimeseriesValueCollectionByTimeseries( timeseries );
        }

        public UInt16TimeseriesValueEntity? GetUInt16TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _uInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt16TimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public UInt16TimeseriesValueEntity? GetUInt16TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _uInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt16TimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _uInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt16TimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _uInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt16TimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _uInt16TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt16TimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _uInt16TimeseriesValueByTimestampEntityIndex.GetUInt16TimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _uInt16TimeseriesValueByTimestampEntityIndex.GetUInt16TimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _uInt16TimeseriesValueByTimestampEntityIndex.GetUInt16TimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _uInt16TimeseriesValueByTimestampEntityIndex.GetUInt16TimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<UInt16TimeseriesValueEntity> GetUInt16TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _uInt16TimeseriesValueByTimestampEntityIndex.GetUInt16TimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _uInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt32TimeseriesValueCollectionByTimeseries( timeseries );
        }

        public UInt32TimeseriesValueEntity? GetUInt32TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _uInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt32TimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public UInt32TimeseriesValueEntity? GetUInt32TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _uInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt32TimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _uInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt32TimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _uInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt32TimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _uInt32TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt32TimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _uInt32TimeseriesValueByTimestampEntityIndex.GetUInt32TimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _uInt32TimeseriesValueByTimestampEntityIndex.GetUInt32TimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _uInt32TimeseriesValueByTimestampEntityIndex.GetUInt32TimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _uInt32TimeseriesValueByTimestampEntityIndex.GetUInt32TimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<UInt32TimeseriesValueEntity> GetUInt32TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _uInt32TimeseriesValueByTimestampEntityIndex.GetUInt32TimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollection( )
        {
            throw new NotImplementedException();
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionByTimeseries( Guid timeseries )
        {
            return _uInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt64TimeseriesValueCollectionByTimeseries( timeseries );
        }

        public UInt64TimeseriesValueEntity? GetUInt64TimeseriesValueByTimeseriesAndTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _uInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt64TimeseriesValueByTimeseriesAndTimestamp( timeseries, timestamp );
        }

        public UInt64TimeseriesValueEntity? GetUInt64TimeseriesValueByTimeseriesAtTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _uInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt64TimeseriesValueByTimeseriesAtTimestamp( timeseries, timestamp );
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueByTimeseriesFromTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _uInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt64TimeseriesValueByTimeseriesFromTimestamp( timeseries, timestamp );
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueByTimeseriesUntilTimestamp( Guid timeseries, DateTime timestamp )
        {
            return _uInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt64TimeseriesValueByTimeseriesUntilTimestamp( timeseries, timestamp );
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueByTimeseriesOverTimestamp( Guid timeseries, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _uInt64TimeseriesValueByTimeseriesAndTimestampEntityIndex.GetUInt64TimeseriesValueByTimeseriesOverTimestamp( timeseries, fromTimestamp, untilTimestamp );
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionByTimestamp( DateTime timestamp )
        {
            return _uInt64TimeseriesValueByTimestampEntityIndex.GetUInt64TimeseriesValueCollectionByTimestamp( timestamp );
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionAtTimestamp( DateTime timestamp )
        {
            return _uInt64TimeseriesValueByTimestampEntityIndex.GetUInt64TimeseriesValueCollectionAtTimestamp( timestamp );
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionFromTimestamp( DateTime timestamp )
        {
            return _uInt64TimeseriesValueByTimestampEntityIndex.GetUInt64TimeseriesValueCollectionFromTimestamp( timestamp );
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionUntilTimestamp( DateTime timestamp )
        {
            return _uInt64TimeseriesValueByTimestampEntityIndex.GetUInt64TimeseriesValueCollectionUntilTimestamp( timestamp );
        }

        public List<UInt64TimeseriesValueEntity> GetUInt64TimeseriesValueCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _uInt64TimeseriesValueByTimestampEntityIndex.GetUInt64TimeseriesValueCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<VehicleTypeEntity> GetVehicleTypeCollection( )
        {
            throw new NotImplementedException();
        }

        public VehicleTypeEntity? GetVehicleTypeByName( string name )
        {
            return _vehicleTypeByNameEntityIndex.GetVehicleTypeByName( name );
        }

        public List<VesselTypeEntity> GetVesselTypeCollection( )
        {
            throw new NotImplementedException();
        }

        public VesselTypeEntity? GetVesselTypeByName( string name )
        {
            return _vesselTypeByNameEntityIndex.GetVesselTypeByName( name );
        }

        public VesselTypeEntity? GetVesselTypeByCode( int code )
        {
            return _vesselTypeByCodeEntityIndex.GetVesselTypeByCode( code );
        }

        public List<VesselTypeEntity> GetVesselTypeFromCode( int code )
        {
            return _vesselTypeByCodeEntityIndex.GetVesselTypeFromCode( code );
        }

        public List<VesselTypeEntity> GetVesselTypeUntilCode( int code )
        {
            return _vesselTypeByCodeEntityIndex.GetVesselTypeUntilCode( code );
        }

        public List<VesselTypeEntity> GetVesselTypeOverCode( int fromCode, int untilCode )
        {
            return _vesselTypeByCodeEntityIndex.GetVesselTypeOverCode( fromCode, untilCode );
        }

        public List<ViewEntity> GetViewCollection( )
        {
            throw new NotImplementedException();
        }

        public ViewEntity? GetViewByName( string name )
        {
            return _viewByNameEntityIndex.GetViewByName( name );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionByView( Guid view )
        {
            return _viewCameraLinkByViewAndStartEntityIndex.GetViewCameraLinkCollectionByView( view );
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByViewAndStart( Guid view, DateTime start )
        {
            return _viewCameraLinkByViewAndStartEntityIndex.GetViewCameraLinkByViewAndStart( view, start );
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByViewAtStart( Guid view, DateTime start )
        {
            return _viewCameraLinkByViewAndStartEntityIndex.GetViewCameraLinkByViewAtStart( view, start );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByViewFromStart( Guid view, DateTime start )
        {
            return _viewCameraLinkByViewAndStartEntityIndex.GetViewCameraLinkByViewFromStart( view, start );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByViewUntilStart( Guid view, DateTime start )
        {
            return _viewCameraLinkByViewAndStartEntityIndex.GetViewCameraLinkByViewUntilStart( view, start );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByViewOverStart( Guid view, DateTime fromStart, DateTime untilStart )
        {
            return _viewCameraLinkByViewAndStartEntityIndex.GetViewCameraLinkByViewOverStart( view, fromStart, untilStart );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionByCamera( Guid camera )
        {
            return _viewCameraLinkByCameraAndStartEntityIndex.GetViewCameraLinkCollectionByCamera( camera );
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByCameraAndStart( Guid camera, DateTime start )
        {
            return _viewCameraLinkByCameraAndStartEntityIndex.GetViewCameraLinkByCameraAndStart( camera, start );
        }

        public ViewCameraLinkEntity? GetViewCameraLinkByCameraAtStart( Guid camera, DateTime start )
        {
            return _viewCameraLinkByCameraAndStartEntityIndex.GetViewCameraLinkByCameraAtStart( camera, start );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByCameraFromStart( Guid camera, DateTime start )
        {
            return _viewCameraLinkByCameraAndStartEntityIndex.GetViewCameraLinkByCameraFromStart( camera, start );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByCameraUntilStart( Guid camera, DateTime start )
        {
            return _viewCameraLinkByCameraAndStartEntityIndex.GetViewCameraLinkByCameraUntilStart( camera, start );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkByCameraOverStart( Guid camera, DateTime fromStart, DateTime untilStart )
        {
            return _viewCameraLinkByCameraAndStartEntityIndex.GetViewCameraLinkByCameraOverStart( camera, fromStart, untilStart );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionByStart( DateTime start )
        {
            return _viewCameraLinkByStartEntityIndex.GetViewCameraLinkCollectionByStart( start );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionAtStart( DateTime start )
        {
            return _viewCameraLinkByStartEntityIndex.GetViewCameraLinkCollectionAtStart( start );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionFromStart( DateTime start )
        {
            return _viewCameraLinkByStartEntityIndex.GetViewCameraLinkCollectionFromStart( start );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionUntilStart( DateTime start )
        {
            return _viewCameraLinkByStartEntityIndex.GetViewCameraLinkCollectionUntilStart( start );
        }

        public List<ViewCameraLinkEntity> GetViewCameraLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            return _viewCameraLinkByStartEntityIndex.GetViewCameraLinkCollectionOverStart( fromStart, untilStart );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionByView( Guid view )
        {
            return _viewTrackerLinkByViewAndStartEntityIndex.GetViewTrackerLinkCollectionByView( view );
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByViewAndStart( Guid view, DateTime start )
        {
            return _viewTrackerLinkByViewAndStartEntityIndex.GetViewTrackerLinkByViewAndStart( view, start );
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByViewAtStart( Guid view, DateTime start )
        {
            return _viewTrackerLinkByViewAndStartEntityIndex.GetViewTrackerLinkByViewAtStart( view, start );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByViewFromStart( Guid view, DateTime start )
        {
            return _viewTrackerLinkByViewAndStartEntityIndex.GetViewTrackerLinkByViewFromStart( view, start );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByViewUntilStart( Guid view, DateTime start )
        {
            return _viewTrackerLinkByViewAndStartEntityIndex.GetViewTrackerLinkByViewUntilStart( view, start );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByViewOverStart( Guid view, DateTime fromStart, DateTime untilStart )
        {
            return _viewTrackerLinkByViewAndStartEntityIndex.GetViewTrackerLinkByViewOverStart( view, fromStart, untilStart );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionByTracker( Guid tracker )
        {
            return _viewTrackerLinkByTrackerAndStartEntityIndex.GetViewTrackerLinkCollectionByTracker( tracker );
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByTrackerAndStart( Guid tracker, DateTime start )
        {
            return _viewTrackerLinkByTrackerAndStartEntityIndex.GetViewTrackerLinkByTrackerAndStart( tracker, start );
        }

        public ViewTrackerLinkEntity? GetViewTrackerLinkByTrackerAtStart( Guid tracker, DateTime start )
        {
            return _viewTrackerLinkByTrackerAndStartEntityIndex.GetViewTrackerLinkByTrackerAtStart( tracker, start );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByTrackerFromStart( Guid tracker, DateTime start )
        {
            return _viewTrackerLinkByTrackerAndStartEntityIndex.GetViewTrackerLinkByTrackerFromStart( tracker, start );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByTrackerUntilStart( Guid tracker, DateTime start )
        {
            return _viewTrackerLinkByTrackerAndStartEntityIndex.GetViewTrackerLinkByTrackerUntilStart( tracker, start );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkByTrackerOverStart( Guid tracker, DateTime fromStart, DateTime untilStart )
        {
            return _viewTrackerLinkByTrackerAndStartEntityIndex.GetViewTrackerLinkByTrackerOverStart( tracker, fromStart, untilStart );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionByStart( DateTime start )
        {
            return _viewTrackerLinkByStartEntityIndex.GetViewTrackerLinkCollectionByStart( start );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionAtStart( DateTime start )
        {
            return _viewTrackerLinkByStartEntityIndex.GetViewTrackerLinkCollectionAtStart( start );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionFromStart( DateTime start )
        {
            return _viewTrackerLinkByStartEntityIndex.GetViewTrackerLinkCollectionFromStart( start );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionUntilStart( DateTime start )
        {
            return _viewTrackerLinkByStartEntityIndex.GetViewTrackerLinkCollectionUntilStart( start );
        }

        public List<ViewTrackerLinkEntity> GetViewTrackerLinkCollectionOverStart( DateTime fromStart, DateTime untilStart )
        {
            return _viewTrackerLinkByStartEntityIndex.GetViewTrackerLinkCollectionOverStart( fromStart, untilStart );
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStation( Guid weatherStation )
        {
            return _weatherStationCommandByWeatherStationAndTimestampEntityIndex.GetWeatherStationCommandCollectionByWeatherStation( weatherStation );
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            return _weatherStationCommandByWeatherStationAndTimestampEntityIndex.GetWeatherStationCommandCollectionByWeatherStationAndTimestamp( weatherStation, timestamp );
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            return _weatherStationCommandByWeatherStationAndTimestampEntityIndex.GetWeatherStationCommandCollectionByWeatherStationAtTimestamp( weatherStation, timestamp );
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            return _weatherStationCommandByWeatherStationAndTimestampEntityIndex.GetWeatherStationCommandCollectionByWeatherStationFromTimestamp( weatherStation, timestamp );
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            return _weatherStationCommandByWeatherStationAndTimestampEntityIndex.GetWeatherStationCommandCollectionByWeatherStationUntilTimestamp( weatherStation, timestamp );
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _weatherStationCommandByWeatherStationAndTimestampEntityIndex.GetWeatherStationCommandCollectionByWeatherStationOverTimestamp( weatherStation, fromTimestamp, untilTimestamp );
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByTimestamp( DateTime timestamp )
        {
            return _weatherStationCommandByTimestampEntityIndex.GetWeatherStationCommandCollectionByTimestamp( timestamp );
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionAtTimestamp( DateTime timestamp )
        {
            return _weatherStationCommandByTimestampEntityIndex.GetWeatherStationCommandCollectionAtTimestamp( timestamp );
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionFromTimestamp( DateTime timestamp )
        {
            return _weatherStationCommandByTimestampEntityIndex.GetWeatherStationCommandCollectionFromTimestamp( timestamp );
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionUntilTimestamp( DateTime timestamp )
        {
            return _weatherStationCommandByTimestampEntityIndex.GetWeatherStationCommandCollectionUntilTimestamp( timestamp );
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _weatherStationCommandByTimestampEntityIndex.GetWeatherStationCommandCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<WeatherStationCommandEntity> GetWeatherStationCommandCollectionByReply( Guid? reply )
        {
            return _weatherStationCommandByReplyEntityIndex.GetWeatherStationCommandCollectionByReply( reply );
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStation( Guid weatherStation )
        {
            return _weatherStationCommandReplyByWeatherStationAndTimestampEntityIndex.GetWeatherStationCommandReplyCollectionByWeatherStation( weatherStation );
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            return _weatherStationCommandReplyByWeatherStationAndTimestampEntityIndex.GetWeatherStationCommandReplyCollectionByWeatherStationAndTimestamp( weatherStation, timestamp );
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            return _weatherStationCommandReplyByWeatherStationAndTimestampEntityIndex.GetWeatherStationCommandReplyCollectionByWeatherStationAtTimestamp( weatherStation, timestamp );
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            return _weatherStationCommandReplyByWeatherStationAndTimestampEntityIndex.GetWeatherStationCommandReplyCollectionByWeatherStationFromTimestamp( weatherStation, timestamp );
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            return _weatherStationCommandReplyByWeatherStationAndTimestampEntityIndex.GetWeatherStationCommandReplyCollectionByWeatherStationUntilTimestamp( weatherStation, timestamp );
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _weatherStationCommandReplyByWeatherStationAndTimestampEntityIndex.GetWeatherStationCommandReplyCollectionByWeatherStationOverTimestamp( weatherStation, fromTimestamp, untilTimestamp );
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionByTimestamp( DateTime timestamp )
        {
            return _weatherStationCommandReplyByTimestampEntityIndex.GetWeatherStationCommandReplyCollectionByTimestamp( timestamp );
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionAtTimestamp( DateTime timestamp )
        {
            return _weatherStationCommandReplyByTimestampEntityIndex.GetWeatherStationCommandReplyCollectionAtTimestamp( timestamp );
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionFromTimestamp( DateTime timestamp )
        {
            return _weatherStationCommandReplyByTimestampEntityIndex.GetWeatherStationCommandReplyCollectionFromTimestamp( timestamp );
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionUntilTimestamp( DateTime timestamp )
        {
            return _weatherStationCommandReplyByTimestampEntityIndex.GetWeatherStationCommandReplyCollectionUntilTimestamp( timestamp );
        }

        public List<WeatherStationCommandReplyEntity> GetWeatherStationCommandReplyCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _weatherStationCommandReplyByTimestampEntityIndex.GetWeatherStationCommandReplyCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public WeatherStationCommandReplyEntity? GetWeatherStationCommandReplyByCommand( Guid? command )
        {
            return _weatherStationCommandReplyByCommandEntityIndex.GetWeatherStationCommandReplyByCommand( command );
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollection( )
        {
            throw new NotImplementedException();
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionByWeatherStation( Guid weatherStation )
        {
            return _weatherStationConfigurationByWeatherStationAndTimestampEntityIndex.GetWeatherStationConfigurationCollectionByWeatherStation( weatherStation );
        }

        public WeatherStationConfigurationEntity? GetWeatherStationConfigurationByWeatherStationAndTimestamp( Guid weatherStation, DateTime timestamp )
        {
            return _weatherStationConfigurationByWeatherStationAndTimestampEntityIndex.GetWeatherStationConfigurationByWeatherStationAndTimestamp( weatherStation, timestamp );
        }

        public WeatherStationConfigurationEntity? GetWeatherStationConfigurationByWeatherStationAtTimestamp( Guid weatherStation, DateTime timestamp )
        {
            return _weatherStationConfigurationByWeatherStationAndTimestampEntityIndex.GetWeatherStationConfigurationByWeatherStationAtTimestamp( weatherStation, timestamp );
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationByWeatherStationFromTimestamp( Guid weatherStation, DateTime timestamp )
        {
            return _weatherStationConfigurationByWeatherStationAndTimestampEntityIndex.GetWeatherStationConfigurationByWeatherStationFromTimestamp( weatherStation, timestamp );
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationByWeatherStationUntilTimestamp( Guid weatherStation, DateTime timestamp )
        {
            return _weatherStationConfigurationByWeatherStationAndTimestampEntityIndex.GetWeatherStationConfigurationByWeatherStationUntilTimestamp( weatherStation, timestamp );
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationByWeatherStationOverTimestamp( Guid weatherStation, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _weatherStationConfigurationByWeatherStationAndTimestampEntityIndex.GetWeatherStationConfigurationByWeatherStationOverTimestamp( weatherStation, fromTimestamp, untilTimestamp );
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionByTimestamp( DateTime timestamp )
        {
            return _weatherStationConfigurationByTimestampEntityIndex.GetWeatherStationConfigurationCollectionByTimestamp( timestamp );
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionAtTimestamp( DateTime timestamp )
        {
            return _weatherStationConfigurationByTimestampEntityIndex.GetWeatherStationConfigurationCollectionAtTimestamp( timestamp );
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionFromTimestamp( DateTime timestamp )
        {
            return _weatherStationConfigurationByTimestampEntityIndex.GetWeatherStationConfigurationCollectionFromTimestamp( timestamp );
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionUntilTimestamp( DateTime timestamp )
        {
            return _weatherStationConfigurationByTimestampEntityIndex.GetWeatherStationConfigurationCollectionUntilTimestamp( timestamp );
        }

        public List<WeatherStationConfigurationEntity> GetWeatherStationConfigurationCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _weatherStationConfigurationByTimestampEntityIndex.GetWeatherStationConfigurationCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<ZoneEntity> GetZoneCollection( )
        {
            throw new NotImplementedException();
        }

        public ZoneEntity? GetZoneByName( string name )
        {
            return _zoneByNameEntityIndex.GetZoneByName( name );
        }

        public List<CircularZoneEntity> GetCircularZoneCollection( )
        {
            throw new NotImplementedException();
        }

        public List<PolygonZoneEntity> GetPolygonZoneCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionByZone( Guid zone )
        {
            return _zoneExceptionsByZoneAndTimestampEntityIndex.GetZoneExceptionsCollectionByZone( zone );
        }

        public ZoneExceptionsEntity? GetZoneExceptionsByZoneAndTimestamp( Guid zone, DateTime timestamp )
        {
            return _zoneExceptionsByZoneAndTimestampEntityIndex.GetZoneExceptionsByZoneAndTimestamp( zone, timestamp );
        }

        public ZoneExceptionsEntity? GetZoneExceptionsByZoneAtTimestamp( Guid zone, DateTime timestamp )
        {
            return _zoneExceptionsByZoneAndTimestampEntityIndex.GetZoneExceptionsByZoneAtTimestamp( zone, timestamp );
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsByZoneFromTimestamp( Guid zone, DateTime timestamp )
        {
            return _zoneExceptionsByZoneAndTimestampEntityIndex.GetZoneExceptionsByZoneFromTimestamp( zone, timestamp );
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsByZoneUntilTimestamp( Guid zone, DateTime timestamp )
        {
            return _zoneExceptionsByZoneAndTimestampEntityIndex.GetZoneExceptionsByZoneUntilTimestamp( zone, timestamp );
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsByZoneOverTimestamp( Guid zone, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _zoneExceptionsByZoneAndTimestampEntityIndex.GetZoneExceptionsByZoneOverTimestamp( zone, fromTimestamp, untilTimestamp );
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionByTimestamp( DateTime timestamp )
        {
            return _zoneExceptionsByTimestampEntityIndex.GetZoneExceptionsCollectionByTimestamp( timestamp );
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionAtTimestamp( DateTime timestamp )
        {
            return _zoneExceptionsByTimestampEntityIndex.GetZoneExceptionsCollectionAtTimestamp( timestamp );
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionFromTimestamp( DateTime timestamp )
        {
            return _zoneExceptionsByTimestampEntityIndex.GetZoneExceptionsCollectionFromTimestamp( timestamp );
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionUntilTimestamp( DateTime timestamp )
        {
            return _zoneExceptionsByTimestampEntityIndex.GetZoneExceptionsCollectionUntilTimestamp( timestamp );
        }

        public List<ZoneExceptionsEntity> GetZoneExceptionsCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _zoneExceptionsByTimestampEntityIndex.GetZoneExceptionsCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

        public List<ZoneExceptionsVesselLinkEntity> GetZoneExceptionsVesselLinkCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ZoneExceptionsVesselLinkEntity> GetZoneExceptionsVesselLinkCollectionByZoneExceptions( Guid zoneExceptions )
        {
            return _zoneExceptionsVesselLinkByZoneExceptionsAndVesselEntityIndex.GetZoneExceptionsVesselLinkCollectionByZoneExceptions( zoneExceptions );
        }

        public ZoneExceptionsVesselLinkEntity? GetZoneExceptionsVesselLinkByZoneExceptionsAndVessel( Guid zoneExceptions, Guid vessel )
        {
            return _zoneExceptionsVesselLinkByZoneExceptionsAndVesselEntityIndex.GetZoneExceptionsVesselLinkByZoneExceptionsAndVessel( zoneExceptions, vessel );
        }

        public List<ZoneExceptionsVesselLinkEntity> GetZoneExceptionsVesselLinkCollectionByVessel( Guid vessel )
        {
            return _zoneExceptionsVesselLinkByVesselEntityIndex.GetZoneExceptionsVesselLinkCollectionByVessel( vessel );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollection( )
        {
            throw new NotImplementedException();
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByTrack( Guid track )
        {
            return _zoneTrackAlarmByTrackAndTimestampEntityIndex.GetZoneTrackAlarmCollectionByTrack( track );
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByTrackAndTimestamp( Guid track, DateTime timestamp )
        {
            return _zoneTrackAlarmByTrackAndTimestampEntityIndex.GetZoneTrackAlarmByTrackAndTimestamp( track, timestamp );
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByTrackAtTimestamp( Guid track, DateTime timestamp )
        {
            return _zoneTrackAlarmByTrackAndTimestampEntityIndex.GetZoneTrackAlarmByTrackAtTimestamp( track, timestamp );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByTrackFromTimestamp( Guid track, DateTime timestamp )
        {
            return _zoneTrackAlarmByTrackAndTimestampEntityIndex.GetZoneTrackAlarmByTrackFromTimestamp( track, timestamp );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByTrackUntilTimestamp( Guid track, DateTime timestamp )
        {
            return _zoneTrackAlarmByTrackAndTimestampEntityIndex.GetZoneTrackAlarmByTrackUntilTimestamp( track, timestamp );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByTrackOverTimestamp( Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _zoneTrackAlarmByTrackAndTimestampEntityIndex.GetZoneTrackAlarmByTrackOverTimestamp( track, fromTimestamp, untilTimestamp );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByZone( Guid zone )
        {
            return _zoneTrackAlarmByZoneTrackAndTimestampEntityIndex.GetZoneTrackAlarmCollectionByZone( zone );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByZoneAndTrack( Guid zone, Guid track )
        {
            return _zoneTrackAlarmByZoneTrackAndTimestampEntityIndex.GetZoneTrackAlarmCollectionByZoneAndTrack( zone, track );
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByZoneTrackAndTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            return _zoneTrackAlarmByZoneTrackAndTimestampEntityIndex.GetZoneTrackAlarmByZoneTrackAndTimestamp( zone, track, timestamp );
        }

        public ZoneTrackAlarmEntity? GetZoneTrackAlarmByZoneTrackAtTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            return _zoneTrackAlarmByZoneTrackAndTimestampEntityIndex.GetZoneTrackAlarmByZoneTrackAtTimestamp( zone, track, timestamp );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByZoneTrackFromTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            return _zoneTrackAlarmByZoneTrackAndTimestampEntityIndex.GetZoneTrackAlarmByZoneTrackFromTimestamp( zone, track, timestamp );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByZoneTrackUntilTimestamp( Guid zone, Guid track, DateTime timestamp )
        {
            return _zoneTrackAlarmByZoneTrackAndTimestampEntityIndex.GetZoneTrackAlarmByZoneTrackUntilTimestamp( zone, track, timestamp );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmByZoneTrackOverTimestamp( Guid zone, Guid track, DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _zoneTrackAlarmByZoneTrackAndTimestampEntityIndex.GetZoneTrackAlarmByZoneTrackOverTimestamp( zone, track, fromTimestamp, untilTimestamp );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionByTimestamp( DateTime timestamp )
        {
            return _zoneTrackAlarmByTimestampEntityIndex.GetZoneTrackAlarmCollectionByTimestamp( timestamp );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionAtTimestamp( DateTime timestamp )
        {
            return _zoneTrackAlarmByTimestampEntityIndex.GetZoneTrackAlarmCollectionAtTimestamp( timestamp );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionFromTimestamp( DateTime timestamp )
        {
            return _zoneTrackAlarmByTimestampEntityIndex.GetZoneTrackAlarmCollectionFromTimestamp( timestamp );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionUntilTimestamp( DateTime timestamp )
        {
            return _zoneTrackAlarmByTimestampEntityIndex.GetZoneTrackAlarmCollectionUntilTimestamp( timestamp );
        }

        public List<ZoneTrackAlarmEntity> GetZoneTrackAlarmCollectionOverTimestamp( DateTime fromTimestamp, DateTime untilTimestamp )
        {
            return _zoneTrackAlarmByTimestampEntityIndex.GetZoneTrackAlarmCollectionOverTimestamp( fromTimestamp, untilTimestamp );
        }

    }

}
