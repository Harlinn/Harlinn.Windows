package com.harlinn.barrelman.databases.mssql;

import java.sql.*;

import com.harlinn.barrelman.types.*;
import com.harlinn.common.data.*;
import com.harlinn.common.io.*;
import com.harlinn.common.types.*;
import com.harlinn.common.util.*;

public class MsSqlStoredProcedures
{
    private final ConnectionWrapper connection;
    private final InsertGuidKeyResult insertResult = new InsertGuidKeyResult(false, new Guid( ));
    private final UpdateRowVersionResult updateResult = new UpdateRowVersionResult(false, 0);

    public MsSqlStoredProcedures( ConnectionWrapper connection ) {
        assert connection != null : "connection cannot be null.";
        this.connection = connection;
    }

    public final ConnectionWrapper getConnection( ) {
        return connection;
    }

    public final InsertGuidKeyResult insertAircraftType( Guid id, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AircraftTypeInsert(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAircraftType( AircraftTypeObject aircraftTypeObject ) throws SQLException {
        Guid id = aircraftTypeObject.getId( );
        String name = aircraftTypeObject.getName( );
        var result = insertAircraftType( id, name );
        if( result.isSuccess() ) {
            aircraftTypeObject.setId(result.getId());
            aircraftTypeObject.setRowVersion(0);
            aircraftTypeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateAircraftType( Guid id, long rowVersion, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AircraftTypeUpdate(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAircraftType( AircraftTypeObject aircraftTypeObject ) throws SQLException {
        Guid id = aircraftTypeObject.getId();
        long rowVersion = aircraftTypeObject.getRowVersion();
        String name = aircraftTypeObject.getName();
        var result = updateAircraftType( id, rowVersion, name );
        if( result.isSuccess( ) ) {
            aircraftTypeObject.setRowVersion(result.getRowVersion());
            aircraftTypeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAircraftType( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AircraftTypeDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAircraftType( AircraftTypeObject aircraftTypeObject ) throws SQLException {
        var id = aircraftTypeObject.getId( );
        var rowVersion = aircraftTypeObject.getRowVersion();
        var result = deleteAircraftType( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisDeviceCommand( Guid id, Guid aisDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisDeviceCommandInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisDeviceCommand( Guid id, Guid aisDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisDeviceCommandInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisDeviceCommand( AisDeviceCommandObject aisDeviceCommandObject ) throws SQLException {
        Guid id = aisDeviceCommandObject.getId( );
        Guid aisDevice = aisDeviceCommandObject.getAisDevice( );
        DateTime timestamp = aisDeviceCommandObject.getTimestamp( );
        int deviceCommandSourceType = aisDeviceCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = aisDeviceCommandObject.getDeviceCommandSourceId( );
        Guid reply = aisDeviceCommandObject.getReply( );
        var result = insertAisDeviceCommand( id, aisDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            aisDeviceCommandObject.setId(result.getId());
            aisDeviceCommandObject.setRowVersion(0);
            aisDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisDeviceCommand( AisDeviceCommandObject aisDeviceCommandObject ) throws SQLException {
        Guid id = aisDeviceCommandObject.getId( );
        Guid aisDevice = aisDeviceCommandObject.getAisDevice( );
        DateTime timestamp = aisDeviceCommandObject.getTimestamp( );
        int deviceCommandSourceType = aisDeviceCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = aisDeviceCommandObject.getDeviceCommandSourceId( );
        var result = insert1AisDeviceCommand( id, aisDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            aisDeviceCommandObject.setId( result.getId( ) );
            aisDeviceCommandObject.setRowVersion(0);
            aisDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisDeviceCommand( Guid id, long rowVersion, Guid aisDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDeviceCommandUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisDeviceCommand( Guid id, long rowVersion, Guid aisDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDeviceCommandUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisDeviceCommand( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDeviceCommandUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisDeviceCommand( AisDeviceCommandObject aisDeviceCommandObject ) throws SQLException {
        Guid id = aisDeviceCommandObject.getId();
        long rowVersion = aisDeviceCommandObject.getRowVersion();
        Guid aisDevice = aisDeviceCommandObject.getAisDevice();
        DateTime timestamp = aisDeviceCommandObject.getTimestamp();
        int deviceCommandSourceType = aisDeviceCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = aisDeviceCommandObject.getDeviceCommandSourceId();
        Guid reply = aisDeviceCommandObject.getReply();
        var result = updateAisDeviceCommand( id, rowVersion, aisDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            aisDeviceCommandObject.setRowVersion(result.getRowVersion());
            aisDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisDeviceCommand( AisDeviceCommandObject aisDeviceCommandObject ) throws SQLException {
        Guid id = aisDeviceCommandObject.getId();
        long rowVersion = aisDeviceCommandObject.getRowVersion();
        Guid aisDevice = aisDeviceCommandObject.getAisDevice();
        DateTime timestamp = aisDeviceCommandObject.getTimestamp();
        int deviceCommandSourceType = aisDeviceCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = aisDeviceCommandObject.getDeviceCommandSourceId();
        var result = update1AisDeviceCommand( id, rowVersion, aisDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            aisDeviceCommandObject.setRowVersion(result.getRowVersion());
            aisDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisDeviceCommand( AisDeviceCommandObject aisDeviceCommandObject ) throws SQLException {
        Guid id = aisDeviceCommandObject.getId();
        long rowVersion = aisDeviceCommandObject.getRowVersion();
        Guid reply = aisDeviceCommandObject.getReply();
        var result = update2AisDeviceCommand( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            aisDeviceCommandObject.setRowVersion(result.getRowVersion());
            aisDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisDeviceCommand( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisDeviceCommandDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisDeviceCommand( AisDeviceCommandObject aisDeviceCommandObject ) throws SQLException {
        var id = aisDeviceCommandObject.getId( );
        var rowVersion = aisDeviceCommandObject.getRowVersion();
        var result = deleteAisDeviceCommand( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisDeviceCommandReply( Guid id, Guid aisDevice, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisDeviceCommandReplyInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableGuid(4, command);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisDeviceCommandReply( Guid id, Guid aisDevice, DateTime timestamp, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisDeviceCommandReplyInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, status);
            callableStatement.setString(5, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisDeviceCommandReply( AisDeviceCommandReplyObject aisDeviceCommandReplyObject ) throws SQLException {
        Guid id = aisDeviceCommandReplyObject.getId( );
        Guid aisDevice = aisDeviceCommandReplyObject.getAisDevice( );
        DateTime timestamp = aisDeviceCommandReplyObject.getTimestamp( );
        Guid command = aisDeviceCommandReplyObject.getCommand( );
        int status = aisDeviceCommandReplyObject.getStatus( );
        String message = aisDeviceCommandReplyObject.getMessage( );
        var result = insertAisDeviceCommandReply( id, aisDevice, timestamp, command, status, message );
        if( result.isSuccess() ) {
            aisDeviceCommandReplyObject.setId(result.getId());
            aisDeviceCommandReplyObject.setRowVersion(0);
            aisDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisDeviceCommandReply( AisDeviceCommandReplyObject aisDeviceCommandReplyObject ) throws SQLException {
        Guid id = aisDeviceCommandReplyObject.getId( );
        Guid aisDevice = aisDeviceCommandReplyObject.getAisDevice( );
        DateTime timestamp = aisDeviceCommandReplyObject.getTimestamp( );
        int status = aisDeviceCommandReplyObject.getStatus( );
        String message = aisDeviceCommandReplyObject.getMessage( );
        var result = insert1AisDeviceCommandReply( id, aisDevice, timestamp, status, message );
        if( result.isSuccess( ) ) {
            aisDeviceCommandReplyObject.setId( result.getId( ) );
            aisDeviceCommandReplyObject.setRowVersion(0);
            aisDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisDeviceCommandReply( Guid id, long rowVersion, Guid aisDevice, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDeviceCommandReplyUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableGuid(5, command);
            callableStatement.setInt32(6, status);
            callableStatement.setString(7, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisDeviceCommandReply( Guid id, long rowVersion, Guid aisDevice, DateTime timestamp, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDeviceCommandReplyUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisDeviceCommandReply( Guid id, long rowVersion, Guid command ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDeviceCommandReplyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, command);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisDeviceCommandReply( AisDeviceCommandReplyObject aisDeviceCommandReplyObject ) throws SQLException {
        Guid id = aisDeviceCommandReplyObject.getId();
        long rowVersion = aisDeviceCommandReplyObject.getRowVersion();
        Guid aisDevice = aisDeviceCommandReplyObject.getAisDevice();
        DateTime timestamp = aisDeviceCommandReplyObject.getTimestamp();
        Guid command = aisDeviceCommandReplyObject.getCommand();
        int status = aisDeviceCommandReplyObject.getStatus();
        String message = aisDeviceCommandReplyObject.getMessage();
        var result = updateAisDeviceCommandReply( id, rowVersion, aisDevice, timestamp, command, status, message );
        if( result.isSuccess( ) ) {
            aisDeviceCommandReplyObject.setRowVersion(result.getRowVersion());
            aisDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisDeviceCommandReply( AisDeviceCommandReplyObject aisDeviceCommandReplyObject ) throws SQLException {
        Guid id = aisDeviceCommandReplyObject.getId();
        long rowVersion = aisDeviceCommandReplyObject.getRowVersion();
        Guid aisDevice = aisDeviceCommandReplyObject.getAisDevice();
        DateTime timestamp = aisDeviceCommandReplyObject.getTimestamp();
        int status = aisDeviceCommandReplyObject.getStatus();
        String message = aisDeviceCommandReplyObject.getMessage();
        var result = update1AisDeviceCommandReply( id, rowVersion, aisDevice, timestamp, status, message );
        if( result.isSuccess( ) ) {
            aisDeviceCommandReplyObject.setRowVersion(result.getRowVersion());
            aisDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisDeviceCommandReply( AisDeviceCommandReplyObject aisDeviceCommandReplyObject ) throws SQLException {
        Guid id = aisDeviceCommandReplyObject.getId();
        long rowVersion = aisDeviceCommandReplyObject.getRowVersion();
        Guid command = aisDeviceCommandReplyObject.getCommand();
        var result = update2AisDeviceCommandReply( id, rowVersion, command );
        if( result.isSuccess( ) ) {
            aisDeviceCommandReplyObject.setRowVersion(result.getRowVersion());
            aisDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisDeviceCommandReply( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisDeviceCommandReplyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisDeviceCommandReply( AisDeviceCommandReplyObject aisDeviceCommandReplyObject ) throws SQLException {
        var id = aisDeviceCommandReplyObject.getId( );
        var rowVersion = aisDeviceCommandReplyObject.getRowVersion();
        var result = deleteAisDeviceCommandReply( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisDeviceConfiguration( Guid id, Guid aisDevice, DateTime timestamp, boolean filter, double northWestLatitude, double northWestLongitude, double southEastLatitude, double southEastLongitude, String comPort, int baudRate, String iPAddress, int port, int udpPort, boolean authenticate, String userName, String password, String authenticationURL, int connectionType, int sourceUpdateRate, String configurationURL, boolean storeReceivedSentences ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisDeviceConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setBoolean(4, filter);
            callableStatement.setDouble(5, northWestLatitude);
            callableStatement.setDouble(6, northWestLongitude);
            callableStatement.setDouble(7, southEastLatitude);
            callableStatement.setDouble(8, southEastLongitude);
            callableStatement.setString(9, comPort);
            callableStatement.setInt32(10, baudRate);
            callableStatement.setString(11, iPAddress);
            callableStatement.setInt32(12, port);
            callableStatement.setInt32(13, udpPort);
            callableStatement.setBoolean(14, authenticate);
            callableStatement.setString(15, userName);
            callableStatement.setString(16, password);
            callableStatement.setString(17, authenticationURL);
            callableStatement.setInt32(18, connectionType);
            callableStatement.setInt32(19, sourceUpdateRate);
            callableStatement.setString(20, configurationURL);
            callableStatement.setBoolean(21, storeReceivedSentences);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisDeviceConfiguration( AisDeviceConfigurationObject aisDeviceConfigurationObject ) throws SQLException {
        Guid id = aisDeviceConfigurationObject.getId( );
        Guid aisDevice = aisDeviceConfigurationObject.getAisDevice( );
        DateTime timestamp = aisDeviceConfigurationObject.getTimestamp( );
        boolean filter = aisDeviceConfigurationObject.getFilter( );
        double northWestLatitude = aisDeviceConfigurationObject.getNorthWestLatitude( );
        double northWestLongitude = aisDeviceConfigurationObject.getNorthWestLongitude( );
        double southEastLatitude = aisDeviceConfigurationObject.getSouthEastLatitude( );
        double southEastLongitude = aisDeviceConfigurationObject.getSouthEastLongitude( );
        String comPort = aisDeviceConfigurationObject.getComPort( );
        int baudRate = aisDeviceConfigurationObject.getBaudRate( );
        String iPAddress = aisDeviceConfigurationObject.getIPAddress( );
        int port = aisDeviceConfigurationObject.getPort( );
        int udpPort = aisDeviceConfigurationObject.getUdpPort( );
        boolean authenticate = aisDeviceConfigurationObject.getAuthenticate( );
        String userName = aisDeviceConfigurationObject.getUserName( );
        String password = aisDeviceConfigurationObject.getPassword( );
        String authenticationURL = aisDeviceConfigurationObject.getAuthenticationURL( );
        int connectionType = aisDeviceConfigurationObject.getConnectionType( );
        int sourceUpdateRate = aisDeviceConfigurationObject.getSourceUpdateRate( );
        String configurationURL = aisDeviceConfigurationObject.getConfigurationURL( );
        boolean storeReceivedSentences = aisDeviceConfigurationObject.getStoreReceivedSentences( );
        var result = insertAisDeviceConfiguration( id, aisDevice, timestamp, filter, northWestLatitude, northWestLongitude, southEastLatitude, southEastLongitude, comPort, baudRate, iPAddress, port, udpPort, authenticate, userName, password, authenticationURL, connectionType, sourceUpdateRate, configurationURL, storeReceivedSentences );
        if( result.isSuccess() ) {
            aisDeviceConfigurationObject.setId(result.getId());
            aisDeviceConfigurationObject.setRowVersion(0);
            aisDeviceConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateAisDeviceConfiguration( Guid id, long rowVersion, Guid aisDevice, DateTime timestamp, boolean filter, double northWestLatitude, double northWestLongitude, double southEastLatitude, double southEastLongitude, String comPort, int baudRate, String iPAddress, int port, int udpPort, boolean authenticate, String userName, String password, String authenticationURL, int connectionType, int sourceUpdateRate, String configurationURL, boolean storeReceivedSentences ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDeviceConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setBoolean(5, filter);
            callableStatement.setDouble(6, northWestLatitude);
            callableStatement.setDouble(7, northWestLongitude);
            callableStatement.setDouble(8, southEastLatitude);
            callableStatement.setDouble(9, southEastLongitude);
            callableStatement.setString(10, comPort);
            callableStatement.setInt32(11, baudRate);
            callableStatement.setString(12, iPAddress);
            callableStatement.setInt32(13, port);
            callableStatement.setInt32(14, udpPort);
            callableStatement.setBoolean(15, authenticate);
            callableStatement.setString(16, userName);
            callableStatement.setString(17, password);
            callableStatement.setString(18, authenticationURL);
            callableStatement.setInt32(19, connectionType);
            callableStatement.setInt32(20, sourceUpdateRate);
            callableStatement.setString(21, configurationURL);
            callableStatement.setBoolean(22, storeReceivedSentences);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisDeviceConfiguration( AisDeviceConfigurationObject aisDeviceConfigurationObject ) throws SQLException {
        Guid id = aisDeviceConfigurationObject.getId();
        long rowVersion = aisDeviceConfigurationObject.getRowVersion();
        Guid aisDevice = aisDeviceConfigurationObject.getAisDevice();
        DateTime timestamp = aisDeviceConfigurationObject.getTimestamp();
        boolean filter = aisDeviceConfigurationObject.getFilter();
        double northWestLatitude = aisDeviceConfigurationObject.getNorthWestLatitude();
        double northWestLongitude = aisDeviceConfigurationObject.getNorthWestLongitude();
        double southEastLatitude = aisDeviceConfigurationObject.getSouthEastLatitude();
        double southEastLongitude = aisDeviceConfigurationObject.getSouthEastLongitude();
        String comPort = aisDeviceConfigurationObject.getComPort();
        int baudRate = aisDeviceConfigurationObject.getBaudRate();
        String iPAddress = aisDeviceConfigurationObject.getIPAddress();
        int port = aisDeviceConfigurationObject.getPort();
        int udpPort = aisDeviceConfigurationObject.getUdpPort();
        boolean authenticate = aisDeviceConfigurationObject.getAuthenticate();
        String userName = aisDeviceConfigurationObject.getUserName();
        String password = aisDeviceConfigurationObject.getPassword();
        String authenticationURL = aisDeviceConfigurationObject.getAuthenticationURL();
        int connectionType = aisDeviceConfigurationObject.getConnectionType();
        int sourceUpdateRate = aisDeviceConfigurationObject.getSourceUpdateRate();
        String configurationURL = aisDeviceConfigurationObject.getConfigurationURL();
        boolean storeReceivedSentences = aisDeviceConfigurationObject.getStoreReceivedSentences();
        var result = updateAisDeviceConfiguration( id, rowVersion, aisDevice, timestamp, filter, northWestLatitude, northWestLongitude, southEastLatitude, southEastLongitude, comPort, baudRate, iPAddress, port, udpPort, authenticate, userName, password, authenticationURL, connectionType, sourceUpdateRate, configurationURL, storeReceivedSentences );
        if( result.isSuccess( ) ) {
            aisDeviceConfigurationObject.setRowVersion(result.getRowVersion());
            aisDeviceConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisDeviceConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisDeviceConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisDeviceConfiguration( AisDeviceConfigurationObject aisDeviceConfigurationObject ) throws SQLException {
        var id = aisDeviceConfigurationObject.getId( );
        var rowVersion = aisDeviceConfigurationObject.getRowVersion();
        var result = deleteAisDeviceConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisDeviceRawMessage( Guid id, Guid aisDevice, DateTime timestamp, boolean isSent, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisDeviceRawMessageInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setBoolean(4, isSent);
            callableStatement.setString(5, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisDeviceRawMessage( AisDeviceRawMessageObject aisDeviceRawMessageObject ) throws SQLException {
        Guid id = aisDeviceRawMessageObject.getId( );
        Guid aisDevice = aisDeviceRawMessageObject.getAisDevice( );
        DateTime timestamp = aisDeviceRawMessageObject.getTimestamp( );
        boolean isSent = aisDeviceRawMessageObject.getIsSent( );
        String message = aisDeviceRawMessageObject.getMessage( );
        var result = insertAisDeviceRawMessage( id, aisDevice, timestamp, isSent, message );
        if( result.isSuccess() ) {
            aisDeviceRawMessageObject.setId(result.getId());
            aisDeviceRawMessageObject.setRowVersion(0);
            aisDeviceRawMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateAisDeviceRawMessage( Guid id, long rowVersion, Guid aisDevice, DateTime timestamp, boolean isSent, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDeviceRawMessageUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setBoolean(5, isSent);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisDeviceRawMessage( AisDeviceRawMessageObject aisDeviceRawMessageObject ) throws SQLException {
        Guid id = aisDeviceRawMessageObject.getId();
        long rowVersion = aisDeviceRawMessageObject.getRowVersion();
        Guid aisDevice = aisDeviceRawMessageObject.getAisDevice();
        DateTime timestamp = aisDeviceRawMessageObject.getTimestamp();
        boolean isSent = aisDeviceRawMessageObject.getIsSent();
        String message = aisDeviceRawMessageObject.getMessage();
        var result = updateAisDeviceRawMessage( id, rowVersion, aisDevice, timestamp, isSent, message );
        if( result.isSuccess( ) ) {
            aisDeviceRawMessageObject.setRowVersion(result.getRowVersion());
            aisDeviceRawMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisDeviceRawMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisDeviceRawMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisDeviceRawMessage( AisDeviceRawMessageObject aisDeviceRawMessageObject ) throws SQLException {
        var id = aisDeviceRawMessageObject.getId( );
        var rowVersion = aisDeviceRawMessageObject.getRowVersion();
        var result = deleteAisDeviceRawMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisDeviceRawSentence( Guid id, Guid aisDevice, DateTime timestamp, String sentence ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisDeviceRawSentenceInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setString(4, sentence);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisDeviceRawSentence( AisDeviceRawSentenceObject aisDeviceRawSentenceObject ) throws SQLException {
        Guid id = aisDeviceRawSentenceObject.getId( );
        Guid aisDevice = aisDeviceRawSentenceObject.getAisDevice( );
        DateTime timestamp = aisDeviceRawSentenceObject.getTimestamp( );
        String sentence = aisDeviceRawSentenceObject.getSentence( );
        var result = insertAisDeviceRawSentence( id, aisDevice, timestamp, sentence );
        if( result.isSuccess() ) {
            aisDeviceRawSentenceObject.setId(result.getId());
            aisDeviceRawSentenceObject.setRowVersion(0);
            aisDeviceRawSentenceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateAisDeviceRawSentence( Guid id, long rowVersion, Guid aisDevice, DateTime timestamp, String sentence ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDeviceRawSentenceUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setString(5, sentence);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisDeviceRawSentence( AisDeviceRawSentenceObject aisDeviceRawSentenceObject ) throws SQLException {
        Guid id = aisDeviceRawSentenceObject.getId();
        long rowVersion = aisDeviceRawSentenceObject.getRowVersion();
        Guid aisDevice = aisDeviceRawSentenceObject.getAisDevice();
        DateTime timestamp = aisDeviceRawSentenceObject.getTimestamp();
        String sentence = aisDeviceRawSentenceObject.getSentence();
        var result = updateAisDeviceRawSentence( id, rowVersion, aisDevice, timestamp, sentence );
        if( result.isSuccess( ) ) {
            aisDeviceRawSentenceObject.setRowVersion(result.getRowVersion());
            aisDeviceRawSentenceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisDeviceRawSentence( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisDeviceRawSentenceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisDeviceRawSentence( AisDeviceRawSentenceObject aisDeviceRawSentenceObject ) throws SQLException {
        var id = aisDeviceRawSentenceObject.getId( );
        var rowVersion = aisDeviceRawSentenceObject.getRowVersion();
        var result = deleteAisDeviceRawSentence( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAidToNavigationReportMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int navigationalAidType, String name, int positionAccuracy, double longitude, double latitude, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, int timestamp, boolean offPosition, int regionalReserved, int raim, boolean virtualAid, boolean assigned, int spare, String nameExtension ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AidToNavigationReportMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, navigationalAidType);
            callableStatement.setString(8, name);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setInt32(12, dimensionToBow);
            callableStatement.setInt32(13, dimensionToStern);
            callableStatement.setInt32(14, dimensionToPort);
            callableStatement.setInt32(15, dimensionToStarboard);
            callableStatement.setInt32(16, positionFixType);
            callableStatement.setInt32(17, timestamp);
            callableStatement.setBoolean(18, offPosition);
            callableStatement.setInt32(19, regionalReserved);
            callableStatement.setInt32(20, raim);
            callableStatement.setBoolean(21, virtualAid);
            callableStatement.setBoolean(22, assigned);
            callableStatement.setInt32(23, spare);
            callableStatement.setString(24, nameExtension);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AidToNavigationReportMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int navigationalAidType, String name, int positionAccuracy, double longitude, double latitude, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, int timestamp, boolean offPosition, int regionalReserved, int raim, boolean virtualAid, boolean assigned, int spare, String nameExtension ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AidToNavigationReportMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, navigationalAidType);
            callableStatement.setString(7, name);
            callableStatement.setInt32(8, positionAccuracy);
            callableStatement.setDouble(9, longitude);
            callableStatement.setDouble(10, latitude);
            callableStatement.setInt32(11, dimensionToBow);
            callableStatement.setInt32(12, dimensionToStern);
            callableStatement.setInt32(13, dimensionToPort);
            callableStatement.setInt32(14, dimensionToStarboard);
            callableStatement.setInt32(15, positionFixType);
            callableStatement.setInt32(16, timestamp);
            callableStatement.setBoolean(17, offPosition);
            callableStatement.setInt32(18, regionalReserved);
            callableStatement.setInt32(19, raim);
            callableStatement.setBoolean(20, virtualAid);
            callableStatement.setBoolean(21, assigned);
            callableStatement.setInt32(22, spare);
            callableStatement.setString(23, nameExtension);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAidToNavigationReportMessage( AidToNavigationReportMessageObject aidToNavigationReportMessageObject ) throws SQLException {
        Guid id = aidToNavigationReportMessageObject.getId( );
        Guid aisDevice = aidToNavigationReportMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aidToNavigationReportMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aidToNavigationReportMessageObject.getMessageSequenceNumber( );
        int repeat = aidToNavigationReportMessageObject.getRepeat( );
        Guid mmsi = aidToNavigationReportMessageObject.getMmsi( );
        int navigationalAidType = aidToNavigationReportMessageObject.getNavigationalAidType( );
        String name = aidToNavigationReportMessageObject.getName( );
        int positionAccuracy = aidToNavigationReportMessageObject.getPositionAccuracy( );
        double longitude = aidToNavigationReportMessageObject.getLongitude( );
        double latitude = aidToNavigationReportMessageObject.getLatitude( );
        int dimensionToBow = aidToNavigationReportMessageObject.getDimensionToBow( );
        int dimensionToStern = aidToNavigationReportMessageObject.getDimensionToStern( );
        int dimensionToPort = aidToNavigationReportMessageObject.getDimensionToPort( );
        int dimensionToStarboard = aidToNavigationReportMessageObject.getDimensionToStarboard( );
        int positionFixType = aidToNavigationReportMessageObject.getPositionFixType( );
        int timestamp = aidToNavigationReportMessageObject.getTimestamp( );
        boolean offPosition = aidToNavigationReportMessageObject.getOffPosition( );
        int regionalReserved = aidToNavigationReportMessageObject.getRegionalReserved( );
        int raim = aidToNavigationReportMessageObject.getRaim( );
        boolean virtualAid = aidToNavigationReportMessageObject.getVirtualAid( );
        boolean assigned = aidToNavigationReportMessageObject.getAssigned( );
        int spare = aidToNavigationReportMessageObject.getSpare( );
        String nameExtension = aidToNavigationReportMessageObject.getNameExtension( );
        var result = insertAidToNavigationReportMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, navigationalAidType, name, positionAccuracy, longitude, latitude, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, timestamp, offPosition, regionalReserved, raim, virtualAid, assigned, spare, nameExtension );
        if( result.isSuccess() ) {
            aidToNavigationReportMessageObject.setId(result.getId());
            aidToNavigationReportMessageObject.setRowVersion(0);
            aidToNavigationReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AidToNavigationReportMessage( AidToNavigationReportMessageObject aidToNavigationReportMessageObject ) throws SQLException {
        Guid id = aidToNavigationReportMessageObject.getId( );
        Guid aisDevice = aidToNavigationReportMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aidToNavigationReportMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aidToNavigationReportMessageObject.getMessageSequenceNumber( );
        int repeat = aidToNavigationReportMessageObject.getRepeat( );
        int navigationalAidType = aidToNavigationReportMessageObject.getNavigationalAidType( );
        String name = aidToNavigationReportMessageObject.getName( );
        int positionAccuracy = aidToNavigationReportMessageObject.getPositionAccuracy( );
        double longitude = aidToNavigationReportMessageObject.getLongitude( );
        double latitude = aidToNavigationReportMessageObject.getLatitude( );
        int dimensionToBow = aidToNavigationReportMessageObject.getDimensionToBow( );
        int dimensionToStern = aidToNavigationReportMessageObject.getDimensionToStern( );
        int dimensionToPort = aidToNavigationReportMessageObject.getDimensionToPort( );
        int dimensionToStarboard = aidToNavigationReportMessageObject.getDimensionToStarboard( );
        int positionFixType = aidToNavigationReportMessageObject.getPositionFixType( );
        int timestamp = aidToNavigationReportMessageObject.getTimestamp( );
        boolean offPosition = aidToNavigationReportMessageObject.getOffPosition( );
        int regionalReserved = aidToNavigationReportMessageObject.getRegionalReserved( );
        int raim = aidToNavigationReportMessageObject.getRaim( );
        boolean virtualAid = aidToNavigationReportMessageObject.getVirtualAid( );
        boolean assigned = aidToNavigationReportMessageObject.getAssigned( );
        int spare = aidToNavigationReportMessageObject.getSpare( );
        String nameExtension = aidToNavigationReportMessageObject.getNameExtension( );
        var result = insert1AidToNavigationReportMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, navigationalAidType, name, positionAccuracy, longitude, latitude, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, timestamp, offPosition, regionalReserved, raim, virtualAid, assigned, spare, nameExtension );
        if( result.isSuccess( ) ) {
            aidToNavigationReportMessageObject.setId( result.getId( ) );
            aidToNavigationReportMessageObject.setRowVersion(0);
            aidToNavigationReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAidToNavigationReportMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int navigationalAidType, String name, int positionAccuracy, double longitude, double latitude, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, int timestamp, boolean offPosition, int regionalReserved, int raim, boolean virtualAid, boolean assigned, int spare, String nameExtension ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AidToNavigationReportMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, navigationalAidType);
            callableStatement.setString(9, name);
            callableStatement.setInt32(10, positionAccuracy);
            callableStatement.setDouble(11, longitude);
            callableStatement.setDouble(12, latitude);
            callableStatement.setInt32(13, dimensionToBow);
            callableStatement.setInt32(14, dimensionToStern);
            callableStatement.setInt32(15, dimensionToPort);
            callableStatement.setInt32(16, dimensionToStarboard);
            callableStatement.setInt32(17, positionFixType);
            callableStatement.setInt32(18, timestamp);
            callableStatement.setBoolean(19, offPosition);
            callableStatement.setInt32(20, regionalReserved);
            callableStatement.setInt32(21, raim);
            callableStatement.setBoolean(22, virtualAid);
            callableStatement.setBoolean(23, assigned);
            callableStatement.setInt32(24, spare);
            callableStatement.setString(25, nameExtension);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AidToNavigationReportMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int navigationalAidType, String name, int positionAccuracy, double longitude, double latitude, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, int timestamp, boolean offPosition, int regionalReserved, int raim, boolean virtualAid, boolean assigned, int spare, String nameExtension ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AidToNavigationReportMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, navigationalAidType);
            callableStatement.setString(8, name);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setInt32(12, dimensionToBow);
            callableStatement.setInt32(13, dimensionToStern);
            callableStatement.setInt32(14, dimensionToPort);
            callableStatement.setInt32(15, dimensionToStarboard);
            callableStatement.setInt32(16, positionFixType);
            callableStatement.setInt32(17, timestamp);
            callableStatement.setBoolean(18, offPosition);
            callableStatement.setInt32(19, regionalReserved);
            callableStatement.setInt32(20, raim);
            callableStatement.setBoolean(21, virtualAid);
            callableStatement.setBoolean(22, assigned);
            callableStatement.setInt32(23, spare);
            callableStatement.setString(24, nameExtension);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AidToNavigationReportMessage( Guid id, long rowVersion, Guid mmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AidToNavigationReportMessageUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAidToNavigationReportMessage( AidToNavigationReportMessageObject aidToNavigationReportMessageObject ) throws SQLException {
        Guid id = aidToNavigationReportMessageObject.getId();
        long rowVersion = aidToNavigationReportMessageObject.getRowVersion();
        Guid aisDevice = aidToNavigationReportMessageObject.getAisDevice();
        DateTime receivedTimestamp = aidToNavigationReportMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aidToNavigationReportMessageObject.getMessageSequenceNumber();
        int repeat = aidToNavigationReportMessageObject.getRepeat();
        Guid mmsi = aidToNavigationReportMessageObject.getMmsi();
        int navigationalAidType = aidToNavigationReportMessageObject.getNavigationalAidType();
        String name = aidToNavigationReportMessageObject.getName();
        int positionAccuracy = aidToNavigationReportMessageObject.getPositionAccuracy();
        double longitude = aidToNavigationReportMessageObject.getLongitude();
        double latitude = aidToNavigationReportMessageObject.getLatitude();
        int dimensionToBow = aidToNavigationReportMessageObject.getDimensionToBow();
        int dimensionToStern = aidToNavigationReportMessageObject.getDimensionToStern();
        int dimensionToPort = aidToNavigationReportMessageObject.getDimensionToPort();
        int dimensionToStarboard = aidToNavigationReportMessageObject.getDimensionToStarboard();
        int positionFixType = aidToNavigationReportMessageObject.getPositionFixType();
        int timestamp = aidToNavigationReportMessageObject.getTimestamp();
        boolean offPosition = aidToNavigationReportMessageObject.getOffPosition();
        int regionalReserved = aidToNavigationReportMessageObject.getRegionalReserved();
        int raim = aidToNavigationReportMessageObject.getRaim();
        boolean virtualAid = aidToNavigationReportMessageObject.getVirtualAid();
        boolean assigned = aidToNavigationReportMessageObject.getAssigned();
        int spare = aidToNavigationReportMessageObject.getSpare();
        String nameExtension = aidToNavigationReportMessageObject.getNameExtension();
        var result = updateAidToNavigationReportMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, navigationalAidType, name, positionAccuracy, longitude, latitude, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, timestamp, offPosition, regionalReserved, raim, virtualAid, assigned, spare, nameExtension );
        if( result.isSuccess( ) ) {
            aidToNavigationReportMessageObject.setRowVersion(result.getRowVersion());
            aidToNavigationReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AidToNavigationReportMessage( AidToNavigationReportMessageObject aidToNavigationReportMessageObject ) throws SQLException {
        Guid id = aidToNavigationReportMessageObject.getId();
        long rowVersion = aidToNavigationReportMessageObject.getRowVersion();
        Guid aisDevice = aidToNavigationReportMessageObject.getAisDevice();
        DateTime receivedTimestamp = aidToNavigationReportMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aidToNavigationReportMessageObject.getMessageSequenceNumber();
        int repeat = aidToNavigationReportMessageObject.getRepeat();
        int navigationalAidType = aidToNavigationReportMessageObject.getNavigationalAidType();
        String name = aidToNavigationReportMessageObject.getName();
        int positionAccuracy = aidToNavigationReportMessageObject.getPositionAccuracy();
        double longitude = aidToNavigationReportMessageObject.getLongitude();
        double latitude = aidToNavigationReportMessageObject.getLatitude();
        int dimensionToBow = aidToNavigationReportMessageObject.getDimensionToBow();
        int dimensionToStern = aidToNavigationReportMessageObject.getDimensionToStern();
        int dimensionToPort = aidToNavigationReportMessageObject.getDimensionToPort();
        int dimensionToStarboard = aidToNavigationReportMessageObject.getDimensionToStarboard();
        int positionFixType = aidToNavigationReportMessageObject.getPositionFixType();
        int timestamp = aidToNavigationReportMessageObject.getTimestamp();
        boolean offPosition = aidToNavigationReportMessageObject.getOffPosition();
        int regionalReserved = aidToNavigationReportMessageObject.getRegionalReserved();
        int raim = aidToNavigationReportMessageObject.getRaim();
        boolean virtualAid = aidToNavigationReportMessageObject.getVirtualAid();
        boolean assigned = aidToNavigationReportMessageObject.getAssigned();
        int spare = aidToNavigationReportMessageObject.getSpare();
        String nameExtension = aidToNavigationReportMessageObject.getNameExtension();
        var result = update1AidToNavigationReportMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, navigationalAidType, name, positionAccuracy, longitude, latitude, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, timestamp, offPosition, regionalReserved, raim, virtualAid, assigned, spare, nameExtension );
        if( result.isSuccess( ) ) {
            aidToNavigationReportMessageObject.setRowVersion(result.getRowVersion());
            aidToNavigationReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AidToNavigationReportMessage( AidToNavigationReportMessageObject aidToNavigationReportMessageObject ) throws SQLException {
        Guid id = aidToNavigationReportMessageObject.getId();
        long rowVersion = aidToNavigationReportMessageObject.getRowVersion();
        Guid mmsi = aidToNavigationReportMessageObject.getMmsi();
        var result = update2AidToNavigationReportMessage( id, rowVersion, mmsi );
        if( result.isSuccess( ) ) {
            aidToNavigationReportMessageObject.setRowVersion(result.getRowVersion());
            aidToNavigationReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAidToNavigationReportMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AidToNavigationReportMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAidToNavigationReportMessage( AidToNavigationReportMessageObject aidToNavigationReportMessageObject ) throws SQLException {
        var id = aidToNavigationReportMessageObject.getId( );
        var rowVersion = aidToNavigationReportMessageObject.getRowVersion();
        var result = deleteAidToNavigationReportMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisAddressedSafetyRelatedMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int sequenceNumber, Guid destinationMmsi, boolean retransmitFlag, int spare, String text ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisAddressedSafetyRelatedMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, sequenceNumber);
            callableStatement.setNullableGuid(8, destinationMmsi);
            callableStatement.setBoolean(9, retransmitFlag);
            callableStatement.setInt32(10, spare);
            callableStatement.setString(11, text);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisAddressedSafetyRelatedMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int sequenceNumber, boolean retransmitFlag, int spare, String text ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisAddressedSafetyRelatedMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, sequenceNumber);
            callableStatement.setBoolean(7, retransmitFlag);
            callableStatement.setInt32(8, spare);
            callableStatement.setString(9, text);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisAddressedSafetyRelatedMessage( AisAddressedSafetyRelatedMessageObject aisAddressedSafetyRelatedMessageObject ) throws SQLException {
        Guid id = aisAddressedSafetyRelatedMessageObject.getId( );
        Guid aisDevice = aisAddressedSafetyRelatedMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisAddressedSafetyRelatedMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisAddressedSafetyRelatedMessageObject.getMessageSequenceNumber( );
        int repeat = aisAddressedSafetyRelatedMessageObject.getRepeat( );
        Guid mmsi = aisAddressedSafetyRelatedMessageObject.getMmsi( );
        int sequenceNumber = aisAddressedSafetyRelatedMessageObject.getSequenceNumber( );
        Guid destinationMmsi = aisAddressedSafetyRelatedMessageObject.getDestinationMmsi( );
        boolean retransmitFlag = aisAddressedSafetyRelatedMessageObject.getRetransmitFlag( );
        int spare = aisAddressedSafetyRelatedMessageObject.getSpare( );
        String text = aisAddressedSafetyRelatedMessageObject.getText( );
        var result = insertAisAddressedSafetyRelatedMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, sequenceNumber, destinationMmsi, retransmitFlag, spare, text );
        if( result.isSuccess() ) {
            aisAddressedSafetyRelatedMessageObject.setId(result.getId());
            aisAddressedSafetyRelatedMessageObject.setRowVersion(0);
            aisAddressedSafetyRelatedMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisAddressedSafetyRelatedMessage( AisAddressedSafetyRelatedMessageObject aisAddressedSafetyRelatedMessageObject ) throws SQLException {
        Guid id = aisAddressedSafetyRelatedMessageObject.getId( );
        Guid aisDevice = aisAddressedSafetyRelatedMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisAddressedSafetyRelatedMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisAddressedSafetyRelatedMessageObject.getMessageSequenceNumber( );
        int repeat = aisAddressedSafetyRelatedMessageObject.getRepeat( );
        int sequenceNumber = aisAddressedSafetyRelatedMessageObject.getSequenceNumber( );
        boolean retransmitFlag = aisAddressedSafetyRelatedMessageObject.getRetransmitFlag( );
        int spare = aisAddressedSafetyRelatedMessageObject.getSpare( );
        String text = aisAddressedSafetyRelatedMessageObject.getText( );
        var result = insert1AisAddressedSafetyRelatedMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, sequenceNumber, retransmitFlag, spare, text );
        if( result.isSuccess( ) ) {
            aisAddressedSafetyRelatedMessageObject.setId( result.getId( ) );
            aisAddressedSafetyRelatedMessageObject.setRowVersion(0);
            aisAddressedSafetyRelatedMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisAddressedSafetyRelatedMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int sequenceNumber, Guid destinationMmsi, boolean retransmitFlag, int spare, String text ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisAddressedSafetyRelatedMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, sequenceNumber);
            callableStatement.setNullableGuid(9, destinationMmsi);
            callableStatement.setBoolean(10, retransmitFlag);
            callableStatement.setInt32(11, spare);
            callableStatement.setString(12, text);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisAddressedSafetyRelatedMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int sequenceNumber, boolean retransmitFlag, int spare, String text ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisAddressedSafetyRelatedMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, sequenceNumber);
            callableStatement.setBoolean(8, retransmitFlag);
            callableStatement.setInt32(9, spare);
            callableStatement.setString(10, text);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisAddressedSafetyRelatedMessage( Guid id, long rowVersion, Guid mmsi, Guid destinationMmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisAddressedSafetyRelatedMessageUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.setNullableGuid(4, destinationMmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisAddressedSafetyRelatedMessage( AisAddressedSafetyRelatedMessageObject aisAddressedSafetyRelatedMessageObject ) throws SQLException {
        Guid id = aisAddressedSafetyRelatedMessageObject.getId();
        long rowVersion = aisAddressedSafetyRelatedMessageObject.getRowVersion();
        Guid aisDevice = aisAddressedSafetyRelatedMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisAddressedSafetyRelatedMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisAddressedSafetyRelatedMessageObject.getMessageSequenceNumber();
        int repeat = aisAddressedSafetyRelatedMessageObject.getRepeat();
        Guid mmsi = aisAddressedSafetyRelatedMessageObject.getMmsi();
        int sequenceNumber = aisAddressedSafetyRelatedMessageObject.getSequenceNumber();
        Guid destinationMmsi = aisAddressedSafetyRelatedMessageObject.getDestinationMmsi();
        boolean retransmitFlag = aisAddressedSafetyRelatedMessageObject.getRetransmitFlag();
        int spare = aisAddressedSafetyRelatedMessageObject.getSpare();
        String text = aisAddressedSafetyRelatedMessageObject.getText();
        var result = updateAisAddressedSafetyRelatedMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, sequenceNumber, destinationMmsi, retransmitFlag, spare, text );
        if( result.isSuccess( ) ) {
            aisAddressedSafetyRelatedMessageObject.setRowVersion(result.getRowVersion());
            aisAddressedSafetyRelatedMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisAddressedSafetyRelatedMessage( AisAddressedSafetyRelatedMessageObject aisAddressedSafetyRelatedMessageObject ) throws SQLException {
        Guid id = aisAddressedSafetyRelatedMessageObject.getId();
        long rowVersion = aisAddressedSafetyRelatedMessageObject.getRowVersion();
        Guid aisDevice = aisAddressedSafetyRelatedMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisAddressedSafetyRelatedMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisAddressedSafetyRelatedMessageObject.getMessageSequenceNumber();
        int repeat = aisAddressedSafetyRelatedMessageObject.getRepeat();
        int sequenceNumber = aisAddressedSafetyRelatedMessageObject.getSequenceNumber();
        boolean retransmitFlag = aisAddressedSafetyRelatedMessageObject.getRetransmitFlag();
        int spare = aisAddressedSafetyRelatedMessageObject.getSpare();
        String text = aisAddressedSafetyRelatedMessageObject.getText();
        var result = update1AisAddressedSafetyRelatedMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, sequenceNumber, retransmitFlag, spare, text );
        if( result.isSuccess( ) ) {
            aisAddressedSafetyRelatedMessageObject.setRowVersion(result.getRowVersion());
            aisAddressedSafetyRelatedMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisAddressedSafetyRelatedMessage( AisAddressedSafetyRelatedMessageObject aisAddressedSafetyRelatedMessageObject ) throws SQLException {
        Guid id = aisAddressedSafetyRelatedMessageObject.getId();
        long rowVersion = aisAddressedSafetyRelatedMessageObject.getRowVersion();
        Guid mmsi = aisAddressedSafetyRelatedMessageObject.getMmsi();
        Guid destinationMmsi = aisAddressedSafetyRelatedMessageObject.getDestinationMmsi();
        var result = update2AisAddressedSafetyRelatedMessage( id, rowVersion, mmsi, destinationMmsi );
        if( result.isSuccess( ) ) {
            aisAddressedSafetyRelatedMessageObject.setRowVersion(result.getRowVersion());
            aisAddressedSafetyRelatedMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisAddressedSafetyRelatedMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisAddressedSafetyRelatedMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisAddressedSafetyRelatedMessage( AisAddressedSafetyRelatedMessageObject aisAddressedSafetyRelatedMessageObject ) throws SQLException {
        var id = aisAddressedSafetyRelatedMessageObject.getId( );
        var rowVersion = aisAddressedSafetyRelatedMessageObject.getRowVersion();
        var result = deleteAisAddressedSafetyRelatedMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisBaseStationReportMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, DateTime timestamp, int positionAccuracy, double longitude, double latitude, int positionFixType, int spare, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisBaseStationReportMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setLongFromDateTime(7, timestamp);
            callableStatement.setInt32(8, positionAccuracy);
            callableStatement.setDouble(9, longitude);
            callableStatement.setDouble(10, latitude);
            callableStatement.setInt32(11, positionFixType);
            callableStatement.setInt32(12, spare);
            callableStatement.setInt32(13, raim);
            callableStatement.setInt32(14, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisBaseStationReportMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, DateTime timestamp, int positionAccuracy, double longitude, double latitude, int positionFixType, int spare, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisBaseStationReportMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setLongFromDateTime(6, timestamp);
            callableStatement.setInt32(7, positionAccuracy);
            callableStatement.setDouble(8, longitude);
            callableStatement.setDouble(9, latitude);
            callableStatement.setInt32(10, positionFixType);
            callableStatement.setInt32(11, spare);
            callableStatement.setInt32(12, raim);
            callableStatement.setInt32(13, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisBaseStationReportMessage( AisBaseStationReportMessageObject aisBaseStationReportMessageObject ) throws SQLException {
        Guid id = aisBaseStationReportMessageObject.getId( );
        Guid aisDevice = aisBaseStationReportMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisBaseStationReportMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisBaseStationReportMessageObject.getMessageSequenceNumber( );
        int repeat = aisBaseStationReportMessageObject.getRepeat( );
        Guid mmsi = aisBaseStationReportMessageObject.getMmsi( );
        DateTime timestamp = aisBaseStationReportMessageObject.getTimestamp( );
        int positionAccuracy = aisBaseStationReportMessageObject.getPositionAccuracy( );
        double longitude = aisBaseStationReportMessageObject.getLongitude( );
        double latitude = aisBaseStationReportMessageObject.getLatitude( );
        int positionFixType = aisBaseStationReportMessageObject.getPositionFixType( );
        int spare = aisBaseStationReportMessageObject.getSpare( );
        int raim = aisBaseStationReportMessageObject.getRaim( );
        int radioStatus = aisBaseStationReportMessageObject.getRadioStatus( );
        var result = insertAisBaseStationReportMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, timestamp, positionAccuracy, longitude, latitude, positionFixType, spare, raim, radioStatus );
        if( result.isSuccess() ) {
            aisBaseStationReportMessageObject.setId(result.getId());
            aisBaseStationReportMessageObject.setRowVersion(0);
            aisBaseStationReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisBaseStationReportMessage( AisBaseStationReportMessageObject aisBaseStationReportMessageObject ) throws SQLException {
        Guid id = aisBaseStationReportMessageObject.getId( );
        Guid aisDevice = aisBaseStationReportMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisBaseStationReportMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisBaseStationReportMessageObject.getMessageSequenceNumber( );
        int repeat = aisBaseStationReportMessageObject.getRepeat( );
        DateTime timestamp = aisBaseStationReportMessageObject.getTimestamp( );
        int positionAccuracy = aisBaseStationReportMessageObject.getPositionAccuracy( );
        double longitude = aisBaseStationReportMessageObject.getLongitude( );
        double latitude = aisBaseStationReportMessageObject.getLatitude( );
        int positionFixType = aisBaseStationReportMessageObject.getPositionFixType( );
        int spare = aisBaseStationReportMessageObject.getSpare( );
        int raim = aisBaseStationReportMessageObject.getRaim( );
        int radioStatus = aisBaseStationReportMessageObject.getRadioStatus( );
        var result = insert1AisBaseStationReportMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, timestamp, positionAccuracy, longitude, latitude, positionFixType, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisBaseStationReportMessageObject.setId( result.getId( ) );
            aisBaseStationReportMessageObject.setRowVersion(0);
            aisBaseStationReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisBaseStationReportMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, DateTime timestamp, int positionAccuracy, double longitude, double latitude, int positionFixType, int spare, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisBaseStationReportMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setLongFromDateTime(8, timestamp);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setInt32(12, positionFixType);
            callableStatement.setInt32(13, spare);
            callableStatement.setInt32(14, raim);
            callableStatement.setInt32(15, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisBaseStationReportMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, DateTime timestamp, int positionAccuracy, double longitude, double latitude, int positionFixType, int spare, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisBaseStationReportMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setLongFromDateTime(7, timestamp);
            callableStatement.setInt32(8, positionAccuracy);
            callableStatement.setDouble(9, longitude);
            callableStatement.setDouble(10, latitude);
            callableStatement.setInt32(11, positionFixType);
            callableStatement.setInt32(12, spare);
            callableStatement.setInt32(13, raim);
            callableStatement.setInt32(14, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisBaseStationReportMessage( Guid id, long rowVersion, Guid mmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisBaseStationReportMessageUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisBaseStationReportMessage( AisBaseStationReportMessageObject aisBaseStationReportMessageObject ) throws SQLException {
        Guid id = aisBaseStationReportMessageObject.getId();
        long rowVersion = aisBaseStationReportMessageObject.getRowVersion();
        Guid aisDevice = aisBaseStationReportMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisBaseStationReportMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisBaseStationReportMessageObject.getMessageSequenceNumber();
        int repeat = aisBaseStationReportMessageObject.getRepeat();
        Guid mmsi = aisBaseStationReportMessageObject.getMmsi();
        DateTime timestamp = aisBaseStationReportMessageObject.getTimestamp();
        int positionAccuracy = aisBaseStationReportMessageObject.getPositionAccuracy();
        double longitude = aisBaseStationReportMessageObject.getLongitude();
        double latitude = aisBaseStationReportMessageObject.getLatitude();
        int positionFixType = aisBaseStationReportMessageObject.getPositionFixType();
        int spare = aisBaseStationReportMessageObject.getSpare();
        int raim = aisBaseStationReportMessageObject.getRaim();
        int radioStatus = aisBaseStationReportMessageObject.getRadioStatus();
        var result = updateAisBaseStationReportMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, timestamp, positionAccuracy, longitude, latitude, positionFixType, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisBaseStationReportMessageObject.setRowVersion(result.getRowVersion());
            aisBaseStationReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisBaseStationReportMessage( AisBaseStationReportMessageObject aisBaseStationReportMessageObject ) throws SQLException {
        Guid id = aisBaseStationReportMessageObject.getId();
        long rowVersion = aisBaseStationReportMessageObject.getRowVersion();
        Guid aisDevice = aisBaseStationReportMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisBaseStationReportMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisBaseStationReportMessageObject.getMessageSequenceNumber();
        int repeat = aisBaseStationReportMessageObject.getRepeat();
        DateTime timestamp = aisBaseStationReportMessageObject.getTimestamp();
        int positionAccuracy = aisBaseStationReportMessageObject.getPositionAccuracy();
        double longitude = aisBaseStationReportMessageObject.getLongitude();
        double latitude = aisBaseStationReportMessageObject.getLatitude();
        int positionFixType = aisBaseStationReportMessageObject.getPositionFixType();
        int spare = aisBaseStationReportMessageObject.getSpare();
        int raim = aisBaseStationReportMessageObject.getRaim();
        int radioStatus = aisBaseStationReportMessageObject.getRadioStatus();
        var result = update1AisBaseStationReportMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, timestamp, positionAccuracy, longitude, latitude, positionFixType, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisBaseStationReportMessageObject.setRowVersion(result.getRowVersion());
            aisBaseStationReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisBaseStationReportMessage( AisBaseStationReportMessageObject aisBaseStationReportMessageObject ) throws SQLException {
        Guid id = aisBaseStationReportMessageObject.getId();
        long rowVersion = aisBaseStationReportMessageObject.getRowVersion();
        Guid mmsi = aisBaseStationReportMessageObject.getMmsi();
        var result = update2AisBaseStationReportMessage( id, rowVersion, mmsi );
        if( result.isSuccess( ) ) {
            aisBaseStationReportMessageObject.setRowVersion(result.getRowVersion());
            aisBaseStationReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisBaseStationReportMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisBaseStationReportMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisBaseStationReportMessage( AisBaseStationReportMessageObject aisBaseStationReportMessageObject ) throws SQLException {
        var id = aisBaseStationReportMessageObject.getId( );
        var rowVersion = aisBaseStationReportMessageObject.getRowVersion();
        var result = deleteAisBaseStationReportMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisBinaryAcknowledgeMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int sequenceNumber1, Guid mmsi1, Integer sequenceNumber2, Guid mmsi2, Integer sequenceNumber3, Guid mmsi3, Integer sequenceNumber4, Guid mmsi4 ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisBinaryAcknowledgeMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, spare);
            callableStatement.setInt32(8, sequenceNumber1);
            callableStatement.setNullableGuid(9, mmsi1);
            callableStatement.setNullableInt32(10, sequenceNumber2);
            callableStatement.setNullableGuid(11, mmsi2);
            callableStatement.setNullableInt32(12, sequenceNumber3);
            callableStatement.setNullableGuid(13, mmsi3);
            callableStatement.setNullableInt32(14, sequenceNumber4);
            callableStatement.setNullableGuid(15, mmsi4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisBinaryAcknowledgeMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int spare, int sequenceNumber1, Integer sequenceNumber2, Integer sequenceNumber3, Integer sequenceNumber4 ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisBinaryAcknowledgeMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, spare);
            callableStatement.setInt32(7, sequenceNumber1);
            callableStatement.setNullableInt32(8, sequenceNumber2);
            callableStatement.setNullableInt32(9, sequenceNumber3);
            callableStatement.setNullableInt32(10, sequenceNumber4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisBinaryAcknowledgeMessage( AisBinaryAcknowledgeMessageObject aisBinaryAcknowledgeMessageObject ) throws SQLException {
        Guid id = aisBinaryAcknowledgeMessageObject.getId( );
        Guid aisDevice = aisBinaryAcknowledgeMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisBinaryAcknowledgeMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisBinaryAcknowledgeMessageObject.getMessageSequenceNumber( );
        int repeat = aisBinaryAcknowledgeMessageObject.getRepeat( );
        Guid mmsi = aisBinaryAcknowledgeMessageObject.getMmsi( );
        int spare = aisBinaryAcknowledgeMessageObject.getSpare( );
        int sequenceNumber1 = aisBinaryAcknowledgeMessageObject.getSequenceNumber1( );
        Guid mmsi1 = aisBinaryAcknowledgeMessageObject.getMmsi1( );
        Integer sequenceNumber2 = aisBinaryAcknowledgeMessageObject.getSequenceNumber2( );
        Guid mmsi2 = aisBinaryAcknowledgeMessageObject.getMmsi2( );
        Integer sequenceNumber3 = aisBinaryAcknowledgeMessageObject.getSequenceNumber3( );
        Guid mmsi3 = aisBinaryAcknowledgeMessageObject.getMmsi3( );
        Integer sequenceNumber4 = aisBinaryAcknowledgeMessageObject.getSequenceNumber4( );
        Guid mmsi4 = aisBinaryAcknowledgeMessageObject.getMmsi4( );
        var result = insertAisBinaryAcknowledgeMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, spare, sequenceNumber1, mmsi1, sequenceNumber2, mmsi2, sequenceNumber3, mmsi3, sequenceNumber4, mmsi4 );
        if( result.isSuccess() ) {
            aisBinaryAcknowledgeMessageObject.setId(result.getId());
            aisBinaryAcknowledgeMessageObject.setRowVersion(0);
            aisBinaryAcknowledgeMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisBinaryAcknowledgeMessage( AisBinaryAcknowledgeMessageObject aisBinaryAcknowledgeMessageObject ) throws SQLException {
        Guid id = aisBinaryAcknowledgeMessageObject.getId( );
        Guid aisDevice = aisBinaryAcknowledgeMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisBinaryAcknowledgeMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisBinaryAcknowledgeMessageObject.getMessageSequenceNumber( );
        int repeat = aisBinaryAcknowledgeMessageObject.getRepeat( );
        int spare = aisBinaryAcknowledgeMessageObject.getSpare( );
        int sequenceNumber1 = aisBinaryAcknowledgeMessageObject.getSequenceNumber1( );
        Integer sequenceNumber2 = aisBinaryAcknowledgeMessageObject.getSequenceNumber2( );
        Integer sequenceNumber3 = aisBinaryAcknowledgeMessageObject.getSequenceNumber3( );
        Integer sequenceNumber4 = aisBinaryAcknowledgeMessageObject.getSequenceNumber4( );
        var result = insert1AisBinaryAcknowledgeMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, spare, sequenceNumber1, sequenceNumber2, sequenceNumber3, sequenceNumber4 );
        if( result.isSuccess( ) ) {
            aisBinaryAcknowledgeMessageObject.setId( result.getId( ) );
            aisBinaryAcknowledgeMessageObject.setRowVersion(0);
            aisBinaryAcknowledgeMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisBinaryAcknowledgeMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int sequenceNumber1, Guid mmsi1, Integer sequenceNumber2, Guid mmsi2, Integer sequenceNumber3, Guid mmsi3, Integer sequenceNumber4, Guid mmsi4 ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisBinaryAcknowledgeMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, spare);
            callableStatement.setInt32(9, sequenceNumber1);
            callableStatement.setNullableGuid(10, mmsi1);
            callableStatement.setNullableInt32(11, sequenceNumber2);
            callableStatement.setNullableGuid(12, mmsi2);
            callableStatement.setNullableInt32(13, sequenceNumber3);
            callableStatement.setNullableGuid(14, mmsi3);
            callableStatement.setNullableInt32(15, sequenceNumber4);
            callableStatement.setNullableGuid(16, mmsi4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisBinaryAcknowledgeMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int spare, int sequenceNumber1, Integer sequenceNumber2, Integer sequenceNumber3, Integer sequenceNumber4 ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisBinaryAcknowledgeMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, spare);
            callableStatement.setInt32(8, sequenceNumber1);
            callableStatement.setNullableInt32(9, sequenceNumber2);
            callableStatement.setNullableInt32(10, sequenceNumber3);
            callableStatement.setNullableInt32(11, sequenceNumber4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisBinaryAcknowledgeMessage( Guid id, long rowVersion, Guid mmsi, Guid mmsi1, Guid mmsi2, Guid mmsi3, Guid mmsi4 ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisBinaryAcknowledgeMessageUpdate2(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.setNullableGuid(4, mmsi1);
            callableStatement.setNullableGuid(5, mmsi2);
            callableStatement.setNullableGuid(6, mmsi3);
            callableStatement.setNullableGuid(7, mmsi4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisBinaryAcknowledgeMessage( AisBinaryAcknowledgeMessageObject aisBinaryAcknowledgeMessageObject ) throws SQLException {
        Guid id = aisBinaryAcknowledgeMessageObject.getId();
        long rowVersion = aisBinaryAcknowledgeMessageObject.getRowVersion();
        Guid aisDevice = aisBinaryAcknowledgeMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisBinaryAcknowledgeMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisBinaryAcknowledgeMessageObject.getMessageSequenceNumber();
        int repeat = aisBinaryAcknowledgeMessageObject.getRepeat();
        Guid mmsi = aisBinaryAcknowledgeMessageObject.getMmsi();
        int spare = aisBinaryAcknowledgeMessageObject.getSpare();
        int sequenceNumber1 = aisBinaryAcknowledgeMessageObject.getSequenceNumber1();
        Guid mmsi1 = aisBinaryAcknowledgeMessageObject.getMmsi1();
        Integer sequenceNumber2 = aisBinaryAcknowledgeMessageObject.getSequenceNumber2();
        Guid mmsi2 = aisBinaryAcknowledgeMessageObject.getMmsi2();
        Integer sequenceNumber3 = aisBinaryAcknowledgeMessageObject.getSequenceNumber3();
        Guid mmsi3 = aisBinaryAcknowledgeMessageObject.getMmsi3();
        Integer sequenceNumber4 = aisBinaryAcknowledgeMessageObject.getSequenceNumber4();
        Guid mmsi4 = aisBinaryAcknowledgeMessageObject.getMmsi4();
        var result = updateAisBinaryAcknowledgeMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, spare, sequenceNumber1, mmsi1, sequenceNumber2, mmsi2, sequenceNumber3, mmsi3, sequenceNumber4, mmsi4 );
        if( result.isSuccess( ) ) {
            aisBinaryAcknowledgeMessageObject.setRowVersion(result.getRowVersion());
            aisBinaryAcknowledgeMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisBinaryAcknowledgeMessage( AisBinaryAcknowledgeMessageObject aisBinaryAcknowledgeMessageObject ) throws SQLException {
        Guid id = aisBinaryAcknowledgeMessageObject.getId();
        long rowVersion = aisBinaryAcknowledgeMessageObject.getRowVersion();
        Guid aisDevice = aisBinaryAcknowledgeMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisBinaryAcknowledgeMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisBinaryAcknowledgeMessageObject.getMessageSequenceNumber();
        int repeat = aisBinaryAcknowledgeMessageObject.getRepeat();
        int spare = aisBinaryAcknowledgeMessageObject.getSpare();
        int sequenceNumber1 = aisBinaryAcknowledgeMessageObject.getSequenceNumber1();
        Integer sequenceNumber2 = aisBinaryAcknowledgeMessageObject.getSequenceNumber2();
        Integer sequenceNumber3 = aisBinaryAcknowledgeMessageObject.getSequenceNumber3();
        Integer sequenceNumber4 = aisBinaryAcknowledgeMessageObject.getSequenceNumber4();
        var result = update1AisBinaryAcknowledgeMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, spare, sequenceNumber1, sequenceNumber2, sequenceNumber3, sequenceNumber4 );
        if( result.isSuccess( ) ) {
            aisBinaryAcknowledgeMessageObject.setRowVersion(result.getRowVersion());
            aisBinaryAcknowledgeMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisBinaryAcknowledgeMessage( AisBinaryAcknowledgeMessageObject aisBinaryAcknowledgeMessageObject ) throws SQLException {
        Guid id = aisBinaryAcknowledgeMessageObject.getId();
        long rowVersion = aisBinaryAcknowledgeMessageObject.getRowVersion();
        Guid mmsi = aisBinaryAcknowledgeMessageObject.getMmsi();
        Guid mmsi1 = aisBinaryAcknowledgeMessageObject.getMmsi1();
        Guid mmsi2 = aisBinaryAcknowledgeMessageObject.getMmsi2();
        Guid mmsi3 = aisBinaryAcknowledgeMessageObject.getMmsi3();
        Guid mmsi4 = aisBinaryAcknowledgeMessageObject.getMmsi4();
        var result = update2AisBinaryAcknowledgeMessage( id, rowVersion, mmsi, mmsi1, mmsi2, mmsi3, mmsi4 );
        if( result.isSuccess( ) ) {
            aisBinaryAcknowledgeMessageObject.setRowVersion(result.getRowVersion());
            aisBinaryAcknowledgeMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisBinaryAcknowledgeMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisBinaryAcknowledgeMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisBinaryAcknowledgeMessage( AisBinaryAcknowledgeMessageObject aisBinaryAcknowledgeMessageObject ) throws SQLException {
        var id = aisBinaryAcknowledgeMessageObject.getId( );
        var rowVersion = aisBinaryAcknowledgeMessageObject.getRowVersion();
        var result = deleteAisBinaryAcknowledgeMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisBinaryAddressedMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int sequenceNumber, Guid destinationMmsi, boolean retransmitFlag, int spare, int designatedAreaCode, int functionalId, String data ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisBinaryAddressedMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, sequenceNumber);
            callableStatement.setNullableGuid(8, destinationMmsi);
            callableStatement.setBoolean(9, retransmitFlag);
            callableStatement.setInt32(10, spare);
            callableStatement.setInt32(11, designatedAreaCode);
            callableStatement.setInt32(12, functionalId);
            callableStatement.setString(13, data);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisBinaryAddressedMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int sequenceNumber, boolean retransmitFlag, int spare, int designatedAreaCode, int functionalId, String data ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisBinaryAddressedMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, sequenceNumber);
            callableStatement.setBoolean(7, retransmitFlag);
            callableStatement.setInt32(8, spare);
            callableStatement.setInt32(9, designatedAreaCode);
            callableStatement.setInt32(10, functionalId);
            callableStatement.setString(11, data);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisBinaryAddressedMessage( AisBinaryAddressedMessageObject aisBinaryAddressedMessageObject ) throws SQLException {
        Guid id = aisBinaryAddressedMessageObject.getId( );
        Guid aisDevice = aisBinaryAddressedMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisBinaryAddressedMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisBinaryAddressedMessageObject.getMessageSequenceNumber( );
        int repeat = aisBinaryAddressedMessageObject.getRepeat( );
        Guid mmsi = aisBinaryAddressedMessageObject.getMmsi( );
        int sequenceNumber = aisBinaryAddressedMessageObject.getSequenceNumber( );
        Guid destinationMmsi = aisBinaryAddressedMessageObject.getDestinationMmsi( );
        boolean retransmitFlag = aisBinaryAddressedMessageObject.getRetransmitFlag( );
        int spare = aisBinaryAddressedMessageObject.getSpare( );
        int designatedAreaCode = aisBinaryAddressedMessageObject.getDesignatedAreaCode( );
        int functionalId = aisBinaryAddressedMessageObject.getFunctionalId( );
        String data = aisBinaryAddressedMessageObject.getData( );
        var result = insertAisBinaryAddressedMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, sequenceNumber, destinationMmsi, retransmitFlag, spare, designatedAreaCode, functionalId, data );
        if( result.isSuccess() ) {
            aisBinaryAddressedMessageObject.setId(result.getId());
            aisBinaryAddressedMessageObject.setRowVersion(0);
            aisBinaryAddressedMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisBinaryAddressedMessage( AisBinaryAddressedMessageObject aisBinaryAddressedMessageObject ) throws SQLException {
        Guid id = aisBinaryAddressedMessageObject.getId( );
        Guid aisDevice = aisBinaryAddressedMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisBinaryAddressedMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisBinaryAddressedMessageObject.getMessageSequenceNumber( );
        int repeat = aisBinaryAddressedMessageObject.getRepeat( );
        int sequenceNumber = aisBinaryAddressedMessageObject.getSequenceNumber( );
        boolean retransmitFlag = aisBinaryAddressedMessageObject.getRetransmitFlag( );
        int spare = aisBinaryAddressedMessageObject.getSpare( );
        int designatedAreaCode = aisBinaryAddressedMessageObject.getDesignatedAreaCode( );
        int functionalId = aisBinaryAddressedMessageObject.getFunctionalId( );
        String data = aisBinaryAddressedMessageObject.getData( );
        var result = insert1AisBinaryAddressedMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, sequenceNumber, retransmitFlag, spare, designatedAreaCode, functionalId, data );
        if( result.isSuccess( ) ) {
            aisBinaryAddressedMessageObject.setId( result.getId( ) );
            aisBinaryAddressedMessageObject.setRowVersion(0);
            aisBinaryAddressedMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisBinaryAddressedMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int sequenceNumber, Guid destinationMmsi, boolean retransmitFlag, int spare, int designatedAreaCode, int functionalId, String data ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisBinaryAddressedMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, sequenceNumber);
            callableStatement.setNullableGuid(9, destinationMmsi);
            callableStatement.setBoolean(10, retransmitFlag);
            callableStatement.setInt32(11, spare);
            callableStatement.setInt32(12, designatedAreaCode);
            callableStatement.setInt32(13, functionalId);
            callableStatement.setString(14, data);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisBinaryAddressedMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int sequenceNumber, boolean retransmitFlag, int spare, int designatedAreaCode, int functionalId, String data ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisBinaryAddressedMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, sequenceNumber);
            callableStatement.setBoolean(8, retransmitFlag);
            callableStatement.setInt32(9, spare);
            callableStatement.setInt32(10, designatedAreaCode);
            callableStatement.setInt32(11, functionalId);
            callableStatement.setString(12, data);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisBinaryAddressedMessage( Guid id, long rowVersion, Guid mmsi, Guid destinationMmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisBinaryAddressedMessageUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.setNullableGuid(4, destinationMmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisBinaryAddressedMessage( AisBinaryAddressedMessageObject aisBinaryAddressedMessageObject ) throws SQLException {
        Guid id = aisBinaryAddressedMessageObject.getId();
        long rowVersion = aisBinaryAddressedMessageObject.getRowVersion();
        Guid aisDevice = aisBinaryAddressedMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisBinaryAddressedMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisBinaryAddressedMessageObject.getMessageSequenceNumber();
        int repeat = aisBinaryAddressedMessageObject.getRepeat();
        Guid mmsi = aisBinaryAddressedMessageObject.getMmsi();
        int sequenceNumber = aisBinaryAddressedMessageObject.getSequenceNumber();
        Guid destinationMmsi = aisBinaryAddressedMessageObject.getDestinationMmsi();
        boolean retransmitFlag = aisBinaryAddressedMessageObject.getRetransmitFlag();
        int spare = aisBinaryAddressedMessageObject.getSpare();
        int designatedAreaCode = aisBinaryAddressedMessageObject.getDesignatedAreaCode();
        int functionalId = aisBinaryAddressedMessageObject.getFunctionalId();
        String data = aisBinaryAddressedMessageObject.getData();
        var result = updateAisBinaryAddressedMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, sequenceNumber, destinationMmsi, retransmitFlag, spare, designatedAreaCode, functionalId, data );
        if( result.isSuccess( ) ) {
            aisBinaryAddressedMessageObject.setRowVersion(result.getRowVersion());
            aisBinaryAddressedMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisBinaryAddressedMessage( AisBinaryAddressedMessageObject aisBinaryAddressedMessageObject ) throws SQLException {
        Guid id = aisBinaryAddressedMessageObject.getId();
        long rowVersion = aisBinaryAddressedMessageObject.getRowVersion();
        Guid aisDevice = aisBinaryAddressedMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisBinaryAddressedMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisBinaryAddressedMessageObject.getMessageSequenceNumber();
        int repeat = aisBinaryAddressedMessageObject.getRepeat();
        int sequenceNumber = aisBinaryAddressedMessageObject.getSequenceNumber();
        boolean retransmitFlag = aisBinaryAddressedMessageObject.getRetransmitFlag();
        int spare = aisBinaryAddressedMessageObject.getSpare();
        int designatedAreaCode = aisBinaryAddressedMessageObject.getDesignatedAreaCode();
        int functionalId = aisBinaryAddressedMessageObject.getFunctionalId();
        String data = aisBinaryAddressedMessageObject.getData();
        var result = update1AisBinaryAddressedMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, sequenceNumber, retransmitFlag, spare, designatedAreaCode, functionalId, data );
        if( result.isSuccess( ) ) {
            aisBinaryAddressedMessageObject.setRowVersion(result.getRowVersion());
            aisBinaryAddressedMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisBinaryAddressedMessage( AisBinaryAddressedMessageObject aisBinaryAddressedMessageObject ) throws SQLException {
        Guid id = aisBinaryAddressedMessageObject.getId();
        long rowVersion = aisBinaryAddressedMessageObject.getRowVersion();
        Guid mmsi = aisBinaryAddressedMessageObject.getMmsi();
        Guid destinationMmsi = aisBinaryAddressedMessageObject.getDestinationMmsi();
        var result = update2AisBinaryAddressedMessage( id, rowVersion, mmsi, destinationMmsi );
        if( result.isSuccess( ) ) {
            aisBinaryAddressedMessageObject.setRowVersion(result.getRowVersion());
            aisBinaryAddressedMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisBinaryAddressedMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisBinaryAddressedMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisBinaryAddressedMessage( AisBinaryAddressedMessageObject aisBinaryAddressedMessageObject ) throws SQLException {
        var id = aisBinaryAddressedMessageObject.getId( );
        var rowVersion = aisBinaryAddressedMessageObject.getRowVersion();
        var result = deleteAisBinaryAddressedMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisBinaryBroadcastMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int designatedAreaCode, int functionalId, String data ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisBinaryBroadcastMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, spare);
            callableStatement.setInt32(8, designatedAreaCode);
            callableStatement.setInt32(9, functionalId);
            callableStatement.setString(10, data);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisBinaryBroadcastMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int spare, int designatedAreaCode, int functionalId, String data ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisBinaryBroadcastMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, spare);
            callableStatement.setInt32(7, designatedAreaCode);
            callableStatement.setInt32(8, functionalId);
            callableStatement.setString(9, data);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisBinaryBroadcastMessage( AisBinaryBroadcastMessageObject aisBinaryBroadcastMessageObject ) throws SQLException {
        Guid id = aisBinaryBroadcastMessageObject.getId( );
        Guid aisDevice = aisBinaryBroadcastMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisBinaryBroadcastMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisBinaryBroadcastMessageObject.getMessageSequenceNumber( );
        int repeat = aisBinaryBroadcastMessageObject.getRepeat( );
        Guid mmsi = aisBinaryBroadcastMessageObject.getMmsi( );
        int spare = aisBinaryBroadcastMessageObject.getSpare( );
        int designatedAreaCode = aisBinaryBroadcastMessageObject.getDesignatedAreaCode( );
        int functionalId = aisBinaryBroadcastMessageObject.getFunctionalId( );
        String data = aisBinaryBroadcastMessageObject.getData( );
        var result = insertAisBinaryBroadcastMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, spare, designatedAreaCode, functionalId, data );
        if( result.isSuccess() ) {
            aisBinaryBroadcastMessageObject.setId(result.getId());
            aisBinaryBroadcastMessageObject.setRowVersion(0);
            aisBinaryBroadcastMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisBinaryBroadcastMessage( AisBinaryBroadcastMessageObject aisBinaryBroadcastMessageObject ) throws SQLException {
        Guid id = aisBinaryBroadcastMessageObject.getId( );
        Guid aisDevice = aisBinaryBroadcastMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisBinaryBroadcastMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisBinaryBroadcastMessageObject.getMessageSequenceNumber( );
        int repeat = aisBinaryBroadcastMessageObject.getRepeat( );
        int spare = aisBinaryBroadcastMessageObject.getSpare( );
        int designatedAreaCode = aisBinaryBroadcastMessageObject.getDesignatedAreaCode( );
        int functionalId = aisBinaryBroadcastMessageObject.getFunctionalId( );
        String data = aisBinaryBroadcastMessageObject.getData( );
        var result = insert1AisBinaryBroadcastMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, spare, designatedAreaCode, functionalId, data );
        if( result.isSuccess( ) ) {
            aisBinaryBroadcastMessageObject.setId( result.getId( ) );
            aisBinaryBroadcastMessageObject.setRowVersion(0);
            aisBinaryBroadcastMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisBinaryBroadcastMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int designatedAreaCode, int functionalId, String data ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisBinaryBroadcastMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, spare);
            callableStatement.setInt32(9, designatedAreaCode);
            callableStatement.setInt32(10, functionalId);
            callableStatement.setString(11, data);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisBinaryBroadcastMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int spare, int designatedAreaCode, int functionalId, String data ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisBinaryBroadcastMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, spare);
            callableStatement.setInt32(8, designatedAreaCode);
            callableStatement.setInt32(9, functionalId);
            callableStatement.setString(10, data);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisBinaryBroadcastMessage( Guid id, long rowVersion, Guid mmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisBinaryBroadcastMessageUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisBinaryBroadcastMessage( AisBinaryBroadcastMessageObject aisBinaryBroadcastMessageObject ) throws SQLException {
        Guid id = aisBinaryBroadcastMessageObject.getId();
        long rowVersion = aisBinaryBroadcastMessageObject.getRowVersion();
        Guid aisDevice = aisBinaryBroadcastMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisBinaryBroadcastMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisBinaryBroadcastMessageObject.getMessageSequenceNumber();
        int repeat = aisBinaryBroadcastMessageObject.getRepeat();
        Guid mmsi = aisBinaryBroadcastMessageObject.getMmsi();
        int spare = aisBinaryBroadcastMessageObject.getSpare();
        int designatedAreaCode = aisBinaryBroadcastMessageObject.getDesignatedAreaCode();
        int functionalId = aisBinaryBroadcastMessageObject.getFunctionalId();
        String data = aisBinaryBroadcastMessageObject.getData();
        var result = updateAisBinaryBroadcastMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, spare, designatedAreaCode, functionalId, data );
        if( result.isSuccess( ) ) {
            aisBinaryBroadcastMessageObject.setRowVersion(result.getRowVersion());
            aisBinaryBroadcastMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisBinaryBroadcastMessage( AisBinaryBroadcastMessageObject aisBinaryBroadcastMessageObject ) throws SQLException {
        Guid id = aisBinaryBroadcastMessageObject.getId();
        long rowVersion = aisBinaryBroadcastMessageObject.getRowVersion();
        Guid aisDevice = aisBinaryBroadcastMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisBinaryBroadcastMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisBinaryBroadcastMessageObject.getMessageSequenceNumber();
        int repeat = aisBinaryBroadcastMessageObject.getRepeat();
        int spare = aisBinaryBroadcastMessageObject.getSpare();
        int designatedAreaCode = aisBinaryBroadcastMessageObject.getDesignatedAreaCode();
        int functionalId = aisBinaryBroadcastMessageObject.getFunctionalId();
        String data = aisBinaryBroadcastMessageObject.getData();
        var result = update1AisBinaryBroadcastMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, spare, designatedAreaCode, functionalId, data );
        if( result.isSuccess( ) ) {
            aisBinaryBroadcastMessageObject.setRowVersion(result.getRowVersion());
            aisBinaryBroadcastMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisBinaryBroadcastMessage( AisBinaryBroadcastMessageObject aisBinaryBroadcastMessageObject ) throws SQLException {
        Guid id = aisBinaryBroadcastMessageObject.getId();
        long rowVersion = aisBinaryBroadcastMessageObject.getRowVersion();
        Guid mmsi = aisBinaryBroadcastMessageObject.getMmsi();
        var result = update2AisBinaryBroadcastMessage( id, rowVersion, mmsi );
        if( result.isSuccess( ) ) {
            aisBinaryBroadcastMessageObject.setRowVersion(result.getRowVersion());
            aisBinaryBroadcastMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisBinaryBroadcastMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisBinaryBroadcastMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisBinaryBroadcastMessage( AisBinaryBroadcastMessageObject aisBinaryBroadcastMessageObject ) throws SQLException {
        var id = aisBinaryBroadcastMessageObject.getId( );
        var rowVersion = aisBinaryBroadcastMessageObject.getRowVersion();
        var result = deleteAisBinaryBroadcastMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisDataLinkManagementMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int offset1, int reservedSlots1, int timeout1, int increment1, Integer offset2, Integer reservedSlots2, Integer timeout2, Integer increment2, Integer offset3, Integer reservedSlots3, Integer timeout3, Integer increment3, Integer offset4, Integer reservedSlots4, Integer timeout4, Integer increment4 ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisDataLinkManagementMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, spare);
            callableStatement.setInt32(8, offset1);
            callableStatement.setInt32(9, reservedSlots1);
            callableStatement.setInt32(10, timeout1);
            callableStatement.setInt32(11, increment1);
            callableStatement.setNullableInt32(12, offset2);
            callableStatement.setNullableInt32(13, reservedSlots2);
            callableStatement.setNullableInt32(14, timeout2);
            callableStatement.setNullableInt32(15, increment2);
            callableStatement.setNullableInt32(16, offset3);
            callableStatement.setNullableInt32(17, reservedSlots3);
            callableStatement.setNullableInt32(18, timeout3);
            callableStatement.setNullableInt32(19, increment3);
            callableStatement.setNullableInt32(20, offset4);
            callableStatement.setNullableInt32(21, reservedSlots4);
            callableStatement.setNullableInt32(22, timeout4);
            callableStatement.setNullableInt32(23, increment4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisDataLinkManagementMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int spare, int offset1, int reservedSlots1, int timeout1, int increment1, Integer offset2, Integer reservedSlots2, Integer timeout2, Integer increment2, Integer offset3, Integer reservedSlots3, Integer timeout3, Integer increment3, Integer offset4, Integer reservedSlots4, Integer timeout4, Integer increment4 ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisDataLinkManagementMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, spare);
            callableStatement.setInt32(7, offset1);
            callableStatement.setInt32(8, reservedSlots1);
            callableStatement.setInt32(9, timeout1);
            callableStatement.setInt32(10, increment1);
            callableStatement.setNullableInt32(11, offset2);
            callableStatement.setNullableInt32(12, reservedSlots2);
            callableStatement.setNullableInt32(13, timeout2);
            callableStatement.setNullableInt32(14, increment2);
            callableStatement.setNullableInt32(15, offset3);
            callableStatement.setNullableInt32(16, reservedSlots3);
            callableStatement.setNullableInt32(17, timeout3);
            callableStatement.setNullableInt32(18, increment3);
            callableStatement.setNullableInt32(19, offset4);
            callableStatement.setNullableInt32(20, reservedSlots4);
            callableStatement.setNullableInt32(21, timeout4);
            callableStatement.setNullableInt32(22, increment4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisDataLinkManagementMessage( AisDataLinkManagementMessageObject aisDataLinkManagementMessageObject ) throws SQLException {
        Guid id = aisDataLinkManagementMessageObject.getId( );
        Guid aisDevice = aisDataLinkManagementMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisDataLinkManagementMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisDataLinkManagementMessageObject.getMessageSequenceNumber( );
        int repeat = aisDataLinkManagementMessageObject.getRepeat( );
        Guid mmsi = aisDataLinkManagementMessageObject.getMmsi( );
        int spare = aisDataLinkManagementMessageObject.getSpare( );
        int offset1 = aisDataLinkManagementMessageObject.getOffset1( );
        int reservedSlots1 = aisDataLinkManagementMessageObject.getReservedSlots1( );
        int timeout1 = aisDataLinkManagementMessageObject.getTimeout1( );
        int increment1 = aisDataLinkManagementMessageObject.getIncrement1( );
        Integer offset2 = aisDataLinkManagementMessageObject.getOffset2( );
        Integer reservedSlots2 = aisDataLinkManagementMessageObject.getReservedSlots2( );
        Integer timeout2 = aisDataLinkManagementMessageObject.getTimeout2( );
        Integer increment2 = aisDataLinkManagementMessageObject.getIncrement2( );
        Integer offset3 = aisDataLinkManagementMessageObject.getOffset3( );
        Integer reservedSlots3 = aisDataLinkManagementMessageObject.getReservedSlots3( );
        Integer timeout3 = aisDataLinkManagementMessageObject.getTimeout3( );
        Integer increment3 = aisDataLinkManagementMessageObject.getIncrement3( );
        Integer offset4 = aisDataLinkManagementMessageObject.getOffset4( );
        Integer reservedSlots4 = aisDataLinkManagementMessageObject.getReservedSlots4( );
        Integer timeout4 = aisDataLinkManagementMessageObject.getTimeout4( );
        Integer increment4 = aisDataLinkManagementMessageObject.getIncrement4( );
        var result = insertAisDataLinkManagementMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, spare, offset1, reservedSlots1, timeout1, increment1, offset2, reservedSlots2, timeout2, increment2, offset3, reservedSlots3, timeout3, increment3, offset4, reservedSlots4, timeout4, increment4 );
        if( result.isSuccess() ) {
            aisDataLinkManagementMessageObject.setId(result.getId());
            aisDataLinkManagementMessageObject.setRowVersion(0);
            aisDataLinkManagementMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisDataLinkManagementMessage( AisDataLinkManagementMessageObject aisDataLinkManagementMessageObject ) throws SQLException {
        Guid id = aisDataLinkManagementMessageObject.getId( );
        Guid aisDevice = aisDataLinkManagementMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisDataLinkManagementMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisDataLinkManagementMessageObject.getMessageSequenceNumber( );
        int repeat = aisDataLinkManagementMessageObject.getRepeat( );
        int spare = aisDataLinkManagementMessageObject.getSpare( );
        int offset1 = aisDataLinkManagementMessageObject.getOffset1( );
        int reservedSlots1 = aisDataLinkManagementMessageObject.getReservedSlots1( );
        int timeout1 = aisDataLinkManagementMessageObject.getTimeout1( );
        int increment1 = aisDataLinkManagementMessageObject.getIncrement1( );
        Integer offset2 = aisDataLinkManagementMessageObject.getOffset2( );
        Integer reservedSlots2 = aisDataLinkManagementMessageObject.getReservedSlots2( );
        Integer timeout2 = aisDataLinkManagementMessageObject.getTimeout2( );
        Integer increment2 = aisDataLinkManagementMessageObject.getIncrement2( );
        Integer offset3 = aisDataLinkManagementMessageObject.getOffset3( );
        Integer reservedSlots3 = aisDataLinkManagementMessageObject.getReservedSlots3( );
        Integer timeout3 = aisDataLinkManagementMessageObject.getTimeout3( );
        Integer increment3 = aisDataLinkManagementMessageObject.getIncrement3( );
        Integer offset4 = aisDataLinkManagementMessageObject.getOffset4( );
        Integer reservedSlots4 = aisDataLinkManagementMessageObject.getReservedSlots4( );
        Integer timeout4 = aisDataLinkManagementMessageObject.getTimeout4( );
        Integer increment4 = aisDataLinkManagementMessageObject.getIncrement4( );
        var result = insert1AisDataLinkManagementMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, spare, offset1, reservedSlots1, timeout1, increment1, offset2, reservedSlots2, timeout2, increment2, offset3, reservedSlots3, timeout3, increment3, offset4, reservedSlots4, timeout4, increment4 );
        if( result.isSuccess( ) ) {
            aisDataLinkManagementMessageObject.setId( result.getId( ) );
            aisDataLinkManagementMessageObject.setRowVersion(0);
            aisDataLinkManagementMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisDataLinkManagementMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int offset1, int reservedSlots1, int timeout1, int increment1, Integer offset2, Integer reservedSlots2, Integer timeout2, Integer increment2, Integer offset3, Integer reservedSlots3, Integer timeout3, Integer increment3, Integer offset4, Integer reservedSlots4, Integer timeout4, Integer increment4 ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDataLinkManagementMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, spare);
            callableStatement.setInt32(9, offset1);
            callableStatement.setInt32(10, reservedSlots1);
            callableStatement.setInt32(11, timeout1);
            callableStatement.setInt32(12, increment1);
            callableStatement.setNullableInt32(13, offset2);
            callableStatement.setNullableInt32(14, reservedSlots2);
            callableStatement.setNullableInt32(15, timeout2);
            callableStatement.setNullableInt32(16, increment2);
            callableStatement.setNullableInt32(17, offset3);
            callableStatement.setNullableInt32(18, reservedSlots3);
            callableStatement.setNullableInt32(19, timeout3);
            callableStatement.setNullableInt32(20, increment3);
            callableStatement.setNullableInt32(21, offset4);
            callableStatement.setNullableInt32(22, reservedSlots4);
            callableStatement.setNullableInt32(23, timeout4);
            callableStatement.setNullableInt32(24, increment4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisDataLinkManagementMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int spare, int offset1, int reservedSlots1, int timeout1, int increment1, Integer offset2, Integer reservedSlots2, Integer timeout2, Integer increment2, Integer offset3, Integer reservedSlots3, Integer timeout3, Integer increment3, Integer offset4, Integer reservedSlots4, Integer timeout4, Integer increment4 ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDataLinkManagementMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, spare);
            callableStatement.setInt32(8, offset1);
            callableStatement.setInt32(9, reservedSlots1);
            callableStatement.setInt32(10, timeout1);
            callableStatement.setInt32(11, increment1);
            callableStatement.setNullableInt32(12, offset2);
            callableStatement.setNullableInt32(13, reservedSlots2);
            callableStatement.setNullableInt32(14, timeout2);
            callableStatement.setNullableInt32(15, increment2);
            callableStatement.setNullableInt32(16, offset3);
            callableStatement.setNullableInt32(17, reservedSlots3);
            callableStatement.setNullableInt32(18, timeout3);
            callableStatement.setNullableInt32(19, increment3);
            callableStatement.setNullableInt32(20, offset4);
            callableStatement.setNullableInt32(21, reservedSlots4);
            callableStatement.setNullableInt32(22, timeout4);
            callableStatement.setNullableInt32(23, increment4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisDataLinkManagementMessage( Guid id, long rowVersion, Guid mmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDataLinkManagementMessageUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisDataLinkManagementMessage( AisDataLinkManagementMessageObject aisDataLinkManagementMessageObject ) throws SQLException {
        Guid id = aisDataLinkManagementMessageObject.getId();
        long rowVersion = aisDataLinkManagementMessageObject.getRowVersion();
        Guid aisDevice = aisDataLinkManagementMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisDataLinkManagementMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisDataLinkManagementMessageObject.getMessageSequenceNumber();
        int repeat = aisDataLinkManagementMessageObject.getRepeat();
        Guid mmsi = aisDataLinkManagementMessageObject.getMmsi();
        int spare = aisDataLinkManagementMessageObject.getSpare();
        int offset1 = aisDataLinkManagementMessageObject.getOffset1();
        int reservedSlots1 = aisDataLinkManagementMessageObject.getReservedSlots1();
        int timeout1 = aisDataLinkManagementMessageObject.getTimeout1();
        int increment1 = aisDataLinkManagementMessageObject.getIncrement1();
        Integer offset2 = aisDataLinkManagementMessageObject.getOffset2();
        Integer reservedSlots2 = aisDataLinkManagementMessageObject.getReservedSlots2();
        Integer timeout2 = aisDataLinkManagementMessageObject.getTimeout2();
        Integer increment2 = aisDataLinkManagementMessageObject.getIncrement2();
        Integer offset3 = aisDataLinkManagementMessageObject.getOffset3();
        Integer reservedSlots3 = aisDataLinkManagementMessageObject.getReservedSlots3();
        Integer timeout3 = aisDataLinkManagementMessageObject.getTimeout3();
        Integer increment3 = aisDataLinkManagementMessageObject.getIncrement3();
        Integer offset4 = aisDataLinkManagementMessageObject.getOffset4();
        Integer reservedSlots4 = aisDataLinkManagementMessageObject.getReservedSlots4();
        Integer timeout4 = aisDataLinkManagementMessageObject.getTimeout4();
        Integer increment4 = aisDataLinkManagementMessageObject.getIncrement4();
        var result = updateAisDataLinkManagementMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, spare, offset1, reservedSlots1, timeout1, increment1, offset2, reservedSlots2, timeout2, increment2, offset3, reservedSlots3, timeout3, increment3, offset4, reservedSlots4, timeout4, increment4 );
        if( result.isSuccess( ) ) {
            aisDataLinkManagementMessageObject.setRowVersion(result.getRowVersion());
            aisDataLinkManagementMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisDataLinkManagementMessage( AisDataLinkManagementMessageObject aisDataLinkManagementMessageObject ) throws SQLException {
        Guid id = aisDataLinkManagementMessageObject.getId();
        long rowVersion = aisDataLinkManagementMessageObject.getRowVersion();
        Guid aisDevice = aisDataLinkManagementMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisDataLinkManagementMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisDataLinkManagementMessageObject.getMessageSequenceNumber();
        int repeat = aisDataLinkManagementMessageObject.getRepeat();
        int spare = aisDataLinkManagementMessageObject.getSpare();
        int offset1 = aisDataLinkManagementMessageObject.getOffset1();
        int reservedSlots1 = aisDataLinkManagementMessageObject.getReservedSlots1();
        int timeout1 = aisDataLinkManagementMessageObject.getTimeout1();
        int increment1 = aisDataLinkManagementMessageObject.getIncrement1();
        Integer offset2 = aisDataLinkManagementMessageObject.getOffset2();
        Integer reservedSlots2 = aisDataLinkManagementMessageObject.getReservedSlots2();
        Integer timeout2 = aisDataLinkManagementMessageObject.getTimeout2();
        Integer increment2 = aisDataLinkManagementMessageObject.getIncrement2();
        Integer offset3 = aisDataLinkManagementMessageObject.getOffset3();
        Integer reservedSlots3 = aisDataLinkManagementMessageObject.getReservedSlots3();
        Integer timeout3 = aisDataLinkManagementMessageObject.getTimeout3();
        Integer increment3 = aisDataLinkManagementMessageObject.getIncrement3();
        Integer offset4 = aisDataLinkManagementMessageObject.getOffset4();
        Integer reservedSlots4 = aisDataLinkManagementMessageObject.getReservedSlots4();
        Integer timeout4 = aisDataLinkManagementMessageObject.getTimeout4();
        Integer increment4 = aisDataLinkManagementMessageObject.getIncrement4();
        var result = update1AisDataLinkManagementMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, spare, offset1, reservedSlots1, timeout1, increment1, offset2, reservedSlots2, timeout2, increment2, offset3, reservedSlots3, timeout3, increment3, offset4, reservedSlots4, timeout4, increment4 );
        if( result.isSuccess( ) ) {
            aisDataLinkManagementMessageObject.setRowVersion(result.getRowVersion());
            aisDataLinkManagementMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisDataLinkManagementMessage( AisDataLinkManagementMessageObject aisDataLinkManagementMessageObject ) throws SQLException {
        Guid id = aisDataLinkManagementMessageObject.getId();
        long rowVersion = aisDataLinkManagementMessageObject.getRowVersion();
        Guid mmsi = aisDataLinkManagementMessageObject.getMmsi();
        var result = update2AisDataLinkManagementMessage( id, rowVersion, mmsi );
        if( result.isSuccess( ) ) {
            aisDataLinkManagementMessageObject.setRowVersion(result.getRowVersion());
            aisDataLinkManagementMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisDataLinkManagementMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisDataLinkManagementMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisDataLinkManagementMessage( AisDataLinkManagementMessageObject aisDataLinkManagementMessageObject ) throws SQLException {
        var id = aisDataLinkManagementMessageObject.getId( );
        var rowVersion = aisDataLinkManagementMessageObject.getRowVersion();
        var result = deleteAisDataLinkManagementMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisExtendedClassBCsPositionReportMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int reserved, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int regionalReserved, Guid name, int shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, int raim, boolean dataTerminalReady, boolean assigned, int spare ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisExtendedClassBCsPositionReportMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, reserved);
            callableStatement.setDouble(8, speedOverGround);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setDouble(12, courseOverGround);
            callableStatement.setNullableInt32(13, trueHeading);
            callableStatement.setInt32(14, timestamp);
            callableStatement.setInt32(15, regionalReserved);
            callableStatement.setNullableGuid(16, name);
            callableStatement.setInt32(17, shipType);
            callableStatement.setInt32(18, dimensionToBow);
            callableStatement.setInt32(19, dimensionToStern);
            callableStatement.setInt32(20, dimensionToPort);
            callableStatement.setInt32(21, dimensionToStarboard);
            callableStatement.setInt32(22, positionFixType);
            callableStatement.setInt32(23, raim);
            callableStatement.setBoolean(24, dataTerminalReady);
            callableStatement.setBoolean(25, assigned);
            callableStatement.setInt32(26, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisExtendedClassBCsPositionReportMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int reserved, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int regionalReserved, int shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, int raim, boolean dataTerminalReady, boolean assigned, int spare ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisExtendedClassBCsPositionReportMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, reserved);
            callableStatement.setDouble(7, speedOverGround);
            callableStatement.setInt32(8, positionAccuracy);
            callableStatement.setDouble(9, longitude);
            callableStatement.setDouble(10, latitude);
            callableStatement.setDouble(11, courseOverGround);
            callableStatement.setNullableInt32(12, trueHeading);
            callableStatement.setInt32(13, timestamp);
            callableStatement.setInt32(14, regionalReserved);
            callableStatement.setInt32(15, shipType);
            callableStatement.setInt32(16, dimensionToBow);
            callableStatement.setInt32(17, dimensionToStern);
            callableStatement.setInt32(18, dimensionToPort);
            callableStatement.setInt32(19, dimensionToStarboard);
            callableStatement.setInt32(20, positionFixType);
            callableStatement.setInt32(21, raim);
            callableStatement.setBoolean(22, dataTerminalReady);
            callableStatement.setBoolean(23, assigned);
            callableStatement.setInt32(24, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisExtendedClassBCsPositionReportMessage( AisExtendedClassBCsPositionReportMessageObject aisExtendedClassBCsPositionReportMessageObject ) throws SQLException {
        Guid id = aisExtendedClassBCsPositionReportMessageObject.getId( );
        Guid aisDevice = aisExtendedClassBCsPositionReportMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisExtendedClassBCsPositionReportMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisExtendedClassBCsPositionReportMessageObject.getMessageSequenceNumber( );
        int repeat = aisExtendedClassBCsPositionReportMessageObject.getRepeat( );
        Guid mmsi = aisExtendedClassBCsPositionReportMessageObject.getMmsi( );
        int reserved = aisExtendedClassBCsPositionReportMessageObject.getReserved( );
        double speedOverGround = aisExtendedClassBCsPositionReportMessageObject.getSpeedOverGround( );
        int positionAccuracy = aisExtendedClassBCsPositionReportMessageObject.getPositionAccuracy( );
        double longitude = aisExtendedClassBCsPositionReportMessageObject.getLongitude( );
        double latitude = aisExtendedClassBCsPositionReportMessageObject.getLatitude( );
        double courseOverGround = aisExtendedClassBCsPositionReportMessageObject.getCourseOverGround( );
        Integer trueHeading = aisExtendedClassBCsPositionReportMessageObject.getTrueHeading( );
        int timestamp = aisExtendedClassBCsPositionReportMessageObject.getTimestamp( );
        int regionalReserved = aisExtendedClassBCsPositionReportMessageObject.getRegionalReserved( );
        Guid name = aisExtendedClassBCsPositionReportMessageObject.getName( );
        int shipType = aisExtendedClassBCsPositionReportMessageObject.getShipType( );
        int dimensionToBow = aisExtendedClassBCsPositionReportMessageObject.getDimensionToBow( );
        int dimensionToStern = aisExtendedClassBCsPositionReportMessageObject.getDimensionToStern( );
        int dimensionToPort = aisExtendedClassBCsPositionReportMessageObject.getDimensionToPort( );
        int dimensionToStarboard = aisExtendedClassBCsPositionReportMessageObject.getDimensionToStarboard( );
        int positionFixType = aisExtendedClassBCsPositionReportMessageObject.getPositionFixType( );
        int raim = aisExtendedClassBCsPositionReportMessageObject.getRaim( );
        boolean dataTerminalReady = aisExtendedClassBCsPositionReportMessageObject.getDataTerminalReady( );
        boolean assigned = aisExtendedClassBCsPositionReportMessageObject.getAssigned( );
        int spare = aisExtendedClassBCsPositionReportMessageObject.getSpare( );
        var result = insertAisExtendedClassBCsPositionReportMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, reserved, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, regionalReserved, name, shipType, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, raim, dataTerminalReady, assigned, spare );
        if( result.isSuccess() ) {
            aisExtendedClassBCsPositionReportMessageObject.setId(result.getId());
            aisExtendedClassBCsPositionReportMessageObject.setRowVersion(0);
            aisExtendedClassBCsPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisExtendedClassBCsPositionReportMessage( AisExtendedClassBCsPositionReportMessageObject aisExtendedClassBCsPositionReportMessageObject ) throws SQLException {
        Guid id = aisExtendedClassBCsPositionReportMessageObject.getId( );
        Guid aisDevice = aisExtendedClassBCsPositionReportMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisExtendedClassBCsPositionReportMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisExtendedClassBCsPositionReportMessageObject.getMessageSequenceNumber( );
        int repeat = aisExtendedClassBCsPositionReportMessageObject.getRepeat( );
        int reserved = aisExtendedClassBCsPositionReportMessageObject.getReserved( );
        double speedOverGround = aisExtendedClassBCsPositionReportMessageObject.getSpeedOverGround( );
        int positionAccuracy = aisExtendedClassBCsPositionReportMessageObject.getPositionAccuracy( );
        double longitude = aisExtendedClassBCsPositionReportMessageObject.getLongitude( );
        double latitude = aisExtendedClassBCsPositionReportMessageObject.getLatitude( );
        double courseOverGround = aisExtendedClassBCsPositionReportMessageObject.getCourseOverGround( );
        Integer trueHeading = aisExtendedClassBCsPositionReportMessageObject.getTrueHeading( );
        int timestamp = aisExtendedClassBCsPositionReportMessageObject.getTimestamp( );
        int regionalReserved = aisExtendedClassBCsPositionReportMessageObject.getRegionalReserved( );
        int shipType = aisExtendedClassBCsPositionReportMessageObject.getShipType( );
        int dimensionToBow = aisExtendedClassBCsPositionReportMessageObject.getDimensionToBow( );
        int dimensionToStern = aisExtendedClassBCsPositionReportMessageObject.getDimensionToStern( );
        int dimensionToPort = aisExtendedClassBCsPositionReportMessageObject.getDimensionToPort( );
        int dimensionToStarboard = aisExtendedClassBCsPositionReportMessageObject.getDimensionToStarboard( );
        int positionFixType = aisExtendedClassBCsPositionReportMessageObject.getPositionFixType( );
        int raim = aisExtendedClassBCsPositionReportMessageObject.getRaim( );
        boolean dataTerminalReady = aisExtendedClassBCsPositionReportMessageObject.getDataTerminalReady( );
        boolean assigned = aisExtendedClassBCsPositionReportMessageObject.getAssigned( );
        int spare = aisExtendedClassBCsPositionReportMessageObject.getSpare( );
        var result = insert1AisExtendedClassBCsPositionReportMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, reserved, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, regionalReserved, shipType, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, raim, dataTerminalReady, assigned, spare );
        if( result.isSuccess( ) ) {
            aisExtendedClassBCsPositionReportMessageObject.setId( result.getId( ) );
            aisExtendedClassBCsPositionReportMessageObject.setRowVersion(0);
            aisExtendedClassBCsPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisExtendedClassBCsPositionReportMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int reserved, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int regionalReserved, Guid name, int shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, int raim, boolean dataTerminalReady, boolean assigned, int spare ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisExtendedClassBCsPositionReportMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, reserved);
            callableStatement.setDouble(9, speedOverGround);
            callableStatement.setInt32(10, positionAccuracy);
            callableStatement.setDouble(11, longitude);
            callableStatement.setDouble(12, latitude);
            callableStatement.setDouble(13, courseOverGround);
            callableStatement.setNullableInt32(14, trueHeading);
            callableStatement.setInt32(15, timestamp);
            callableStatement.setInt32(16, regionalReserved);
            callableStatement.setNullableGuid(17, name);
            callableStatement.setInt32(18, shipType);
            callableStatement.setInt32(19, dimensionToBow);
            callableStatement.setInt32(20, dimensionToStern);
            callableStatement.setInt32(21, dimensionToPort);
            callableStatement.setInt32(22, dimensionToStarboard);
            callableStatement.setInt32(23, positionFixType);
            callableStatement.setInt32(24, raim);
            callableStatement.setBoolean(25, dataTerminalReady);
            callableStatement.setBoolean(26, assigned);
            callableStatement.setInt32(27, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisExtendedClassBCsPositionReportMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int reserved, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int regionalReserved, int shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, int raim, boolean dataTerminalReady, boolean assigned, int spare ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisExtendedClassBCsPositionReportMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, reserved);
            callableStatement.setDouble(8, speedOverGround);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setDouble(12, courseOverGround);
            callableStatement.setNullableInt32(13, trueHeading);
            callableStatement.setInt32(14, timestamp);
            callableStatement.setInt32(15, regionalReserved);
            callableStatement.setInt32(16, shipType);
            callableStatement.setInt32(17, dimensionToBow);
            callableStatement.setInt32(18, dimensionToStern);
            callableStatement.setInt32(19, dimensionToPort);
            callableStatement.setInt32(20, dimensionToStarboard);
            callableStatement.setInt32(21, positionFixType);
            callableStatement.setInt32(22, raim);
            callableStatement.setBoolean(23, dataTerminalReady);
            callableStatement.setBoolean(24, assigned);
            callableStatement.setInt32(25, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisExtendedClassBCsPositionReportMessage( Guid id, long rowVersion, Guid mmsi, Guid name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisExtendedClassBCsPositionReportMessageUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.setNullableGuid(4, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisExtendedClassBCsPositionReportMessage( AisExtendedClassBCsPositionReportMessageObject aisExtendedClassBCsPositionReportMessageObject ) throws SQLException {
        Guid id = aisExtendedClassBCsPositionReportMessageObject.getId();
        long rowVersion = aisExtendedClassBCsPositionReportMessageObject.getRowVersion();
        Guid aisDevice = aisExtendedClassBCsPositionReportMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisExtendedClassBCsPositionReportMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisExtendedClassBCsPositionReportMessageObject.getMessageSequenceNumber();
        int repeat = aisExtendedClassBCsPositionReportMessageObject.getRepeat();
        Guid mmsi = aisExtendedClassBCsPositionReportMessageObject.getMmsi();
        int reserved = aisExtendedClassBCsPositionReportMessageObject.getReserved();
        double speedOverGround = aisExtendedClassBCsPositionReportMessageObject.getSpeedOverGround();
        int positionAccuracy = aisExtendedClassBCsPositionReportMessageObject.getPositionAccuracy();
        double longitude = aisExtendedClassBCsPositionReportMessageObject.getLongitude();
        double latitude = aisExtendedClassBCsPositionReportMessageObject.getLatitude();
        double courseOverGround = aisExtendedClassBCsPositionReportMessageObject.getCourseOverGround();
        Integer trueHeading = aisExtendedClassBCsPositionReportMessageObject.getTrueHeading();
        int timestamp = aisExtendedClassBCsPositionReportMessageObject.getTimestamp();
        int regionalReserved = aisExtendedClassBCsPositionReportMessageObject.getRegionalReserved();
        Guid name = aisExtendedClassBCsPositionReportMessageObject.getName();
        int shipType = aisExtendedClassBCsPositionReportMessageObject.getShipType();
        int dimensionToBow = aisExtendedClassBCsPositionReportMessageObject.getDimensionToBow();
        int dimensionToStern = aisExtendedClassBCsPositionReportMessageObject.getDimensionToStern();
        int dimensionToPort = aisExtendedClassBCsPositionReportMessageObject.getDimensionToPort();
        int dimensionToStarboard = aisExtendedClassBCsPositionReportMessageObject.getDimensionToStarboard();
        int positionFixType = aisExtendedClassBCsPositionReportMessageObject.getPositionFixType();
        int raim = aisExtendedClassBCsPositionReportMessageObject.getRaim();
        boolean dataTerminalReady = aisExtendedClassBCsPositionReportMessageObject.getDataTerminalReady();
        boolean assigned = aisExtendedClassBCsPositionReportMessageObject.getAssigned();
        int spare = aisExtendedClassBCsPositionReportMessageObject.getSpare();
        var result = updateAisExtendedClassBCsPositionReportMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, reserved, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, regionalReserved, name, shipType, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, raim, dataTerminalReady, assigned, spare );
        if( result.isSuccess( ) ) {
            aisExtendedClassBCsPositionReportMessageObject.setRowVersion(result.getRowVersion());
            aisExtendedClassBCsPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisExtendedClassBCsPositionReportMessage( AisExtendedClassBCsPositionReportMessageObject aisExtendedClassBCsPositionReportMessageObject ) throws SQLException {
        Guid id = aisExtendedClassBCsPositionReportMessageObject.getId();
        long rowVersion = aisExtendedClassBCsPositionReportMessageObject.getRowVersion();
        Guid aisDevice = aisExtendedClassBCsPositionReportMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisExtendedClassBCsPositionReportMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisExtendedClassBCsPositionReportMessageObject.getMessageSequenceNumber();
        int repeat = aisExtendedClassBCsPositionReportMessageObject.getRepeat();
        int reserved = aisExtendedClassBCsPositionReportMessageObject.getReserved();
        double speedOverGround = aisExtendedClassBCsPositionReportMessageObject.getSpeedOverGround();
        int positionAccuracy = aisExtendedClassBCsPositionReportMessageObject.getPositionAccuracy();
        double longitude = aisExtendedClassBCsPositionReportMessageObject.getLongitude();
        double latitude = aisExtendedClassBCsPositionReportMessageObject.getLatitude();
        double courseOverGround = aisExtendedClassBCsPositionReportMessageObject.getCourseOverGround();
        Integer trueHeading = aisExtendedClassBCsPositionReportMessageObject.getTrueHeading();
        int timestamp = aisExtendedClassBCsPositionReportMessageObject.getTimestamp();
        int regionalReserved = aisExtendedClassBCsPositionReportMessageObject.getRegionalReserved();
        int shipType = aisExtendedClassBCsPositionReportMessageObject.getShipType();
        int dimensionToBow = aisExtendedClassBCsPositionReportMessageObject.getDimensionToBow();
        int dimensionToStern = aisExtendedClassBCsPositionReportMessageObject.getDimensionToStern();
        int dimensionToPort = aisExtendedClassBCsPositionReportMessageObject.getDimensionToPort();
        int dimensionToStarboard = aisExtendedClassBCsPositionReportMessageObject.getDimensionToStarboard();
        int positionFixType = aisExtendedClassBCsPositionReportMessageObject.getPositionFixType();
        int raim = aisExtendedClassBCsPositionReportMessageObject.getRaim();
        boolean dataTerminalReady = aisExtendedClassBCsPositionReportMessageObject.getDataTerminalReady();
        boolean assigned = aisExtendedClassBCsPositionReportMessageObject.getAssigned();
        int spare = aisExtendedClassBCsPositionReportMessageObject.getSpare();
        var result = update1AisExtendedClassBCsPositionReportMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, reserved, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, regionalReserved, shipType, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, raim, dataTerminalReady, assigned, spare );
        if( result.isSuccess( ) ) {
            aisExtendedClassBCsPositionReportMessageObject.setRowVersion(result.getRowVersion());
            aisExtendedClassBCsPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisExtendedClassBCsPositionReportMessage( AisExtendedClassBCsPositionReportMessageObject aisExtendedClassBCsPositionReportMessageObject ) throws SQLException {
        Guid id = aisExtendedClassBCsPositionReportMessageObject.getId();
        long rowVersion = aisExtendedClassBCsPositionReportMessageObject.getRowVersion();
        Guid mmsi = aisExtendedClassBCsPositionReportMessageObject.getMmsi();
        Guid name = aisExtendedClassBCsPositionReportMessageObject.getName();
        var result = update2AisExtendedClassBCsPositionReportMessage( id, rowVersion, mmsi, name );
        if( result.isSuccess( ) ) {
            aisExtendedClassBCsPositionReportMessageObject.setRowVersion(result.getRowVersion());
            aisExtendedClassBCsPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisExtendedClassBCsPositionReportMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisExtendedClassBCsPositionReportMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisExtendedClassBCsPositionReportMessage( AisExtendedClassBCsPositionReportMessageObject aisExtendedClassBCsPositionReportMessageObject ) throws SQLException {
        var id = aisExtendedClassBCsPositionReportMessageObject.getId( );
        var rowVersion = aisExtendedClassBCsPositionReportMessageObject.getRowVersion();
        var result = deleteAisExtendedClassBCsPositionReportMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisInterrogationMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Guid interrogatedMmsi, int firstMessageType, int firstSlotOffset, Integer secondMessageType, Integer secondSlotOffset, Guid secondStationInterrogationMmsi, Integer secondStationFirstMessageType, Integer secondStationFirstSlotOffset ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisInterrogationMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setNullableGuid(7, interrogatedMmsi);
            callableStatement.setInt32(8, firstMessageType);
            callableStatement.setInt32(9, firstSlotOffset);
            callableStatement.setNullableInt32(10, secondMessageType);
            callableStatement.setNullableInt32(11, secondSlotOffset);
            callableStatement.setNullableGuid(12, secondStationInterrogationMmsi);
            callableStatement.setNullableInt32(13, secondStationFirstMessageType);
            callableStatement.setNullableInt32(14, secondStationFirstSlotOffset);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisInterrogationMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int firstMessageType, int firstSlotOffset, Integer secondMessageType, Integer secondSlotOffset, Integer secondStationFirstMessageType, Integer secondStationFirstSlotOffset ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisInterrogationMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, firstMessageType);
            callableStatement.setInt32(7, firstSlotOffset);
            callableStatement.setNullableInt32(8, secondMessageType);
            callableStatement.setNullableInt32(9, secondSlotOffset);
            callableStatement.setNullableInt32(10, secondStationFirstMessageType);
            callableStatement.setNullableInt32(11, secondStationFirstSlotOffset);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisInterrogationMessage( AisInterrogationMessageObject aisInterrogationMessageObject ) throws SQLException {
        Guid id = aisInterrogationMessageObject.getId( );
        Guid aisDevice = aisInterrogationMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisInterrogationMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisInterrogationMessageObject.getMessageSequenceNumber( );
        int repeat = aisInterrogationMessageObject.getRepeat( );
        Guid mmsi = aisInterrogationMessageObject.getMmsi( );
        Guid interrogatedMmsi = aisInterrogationMessageObject.getInterrogatedMmsi( );
        int firstMessageType = aisInterrogationMessageObject.getFirstMessageType( );
        int firstSlotOffset = aisInterrogationMessageObject.getFirstSlotOffset( );
        Integer secondMessageType = aisInterrogationMessageObject.getSecondMessageType( );
        Integer secondSlotOffset = aisInterrogationMessageObject.getSecondSlotOffset( );
        Guid secondStationInterrogationMmsi = aisInterrogationMessageObject.getSecondStationInterrogationMmsi( );
        Integer secondStationFirstMessageType = aisInterrogationMessageObject.getSecondStationFirstMessageType( );
        Integer secondStationFirstSlotOffset = aisInterrogationMessageObject.getSecondStationFirstSlotOffset( );
        var result = insertAisInterrogationMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, interrogatedMmsi, firstMessageType, firstSlotOffset, secondMessageType, secondSlotOffset, secondStationInterrogationMmsi, secondStationFirstMessageType, secondStationFirstSlotOffset );
        if( result.isSuccess() ) {
            aisInterrogationMessageObject.setId(result.getId());
            aisInterrogationMessageObject.setRowVersion(0);
            aisInterrogationMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisInterrogationMessage( AisInterrogationMessageObject aisInterrogationMessageObject ) throws SQLException {
        Guid id = aisInterrogationMessageObject.getId( );
        Guid aisDevice = aisInterrogationMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisInterrogationMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisInterrogationMessageObject.getMessageSequenceNumber( );
        int repeat = aisInterrogationMessageObject.getRepeat( );
        int firstMessageType = aisInterrogationMessageObject.getFirstMessageType( );
        int firstSlotOffset = aisInterrogationMessageObject.getFirstSlotOffset( );
        Integer secondMessageType = aisInterrogationMessageObject.getSecondMessageType( );
        Integer secondSlotOffset = aisInterrogationMessageObject.getSecondSlotOffset( );
        Integer secondStationFirstMessageType = aisInterrogationMessageObject.getSecondStationFirstMessageType( );
        Integer secondStationFirstSlotOffset = aisInterrogationMessageObject.getSecondStationFirstSlotOffset( );
        var result = insert1AisInterrogationMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, firstMessageType, firstSlotOffset, secondMessageType, secondSlotOffset, secondStationFirstMessageType, secondStationFirstSlotOffset );
        if( result.isSuccess( ) ) {
            aisInterrogationMessageObject.setId( result.getId( ) );
            aisInterrogationMessageObject.setRowVersion(0);
            aisInterrogationMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisInterrogationMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, Guid interrogatedMmsi, int firstMessageType, int firstSlotOffset, Integer secondMessageType, Integer secondSlotOffset, Guid secondStationInterrogationMmsi, Integer secondStationFirstMessageType, Integer secondStationFirstSlotOffset ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisInterrogationMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setNullableGuid(8, interrogatedMmsi);
            callableStatement.setInt32(9, firstMessageType);
            callableStatement.setInt32(10, firstSlotOffset);
            callableStatement.setNullableInt32(11, secondMessageType);
            callableStatement.setNullableInt32(12, secondSlotOffset);
            callableStatement.setNullableGuid(13, secondStationInterrogationMmsi);
            callableStatement.setNullableInt32(14, secondStationFirstMessageType);
            callableStatement.setNullableInt32(15, secondStationFirstSlotOffset);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisInterrogationMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int firstMessageType, int firstSlotOffset, Integer secondMessageType, Integer secondSlotOffset, Integer secondStationFirstMessageType, Integer secondStationFirstSlotOffset ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisInterrogationMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, firstMessageType);
            callableStatement.setInt32(8, firstSlotOffset);
            callableStatement.setNullableInt32(9, secondMessageType);
            callableStatement.setNullableInt32(10, secondSlotOffset);
            callableStatement.setNullableInt32(11, secondStationFirstMessageType);
            callableStatement.setNullableInt32(12, secondStationFirstSlotOffset);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisInterrogationMessage( Guid id, long rowVersion, Guid mmsi, Guid interrogatedMmsi, Guid secondStationInterrogationMmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisInterrogationMessageUpdate2(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.setNullableGuid(4, interrogatedMmsi);
            callableStatement.setNullableGuid(5, secondStationInterrogationMmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisInterrogationMessage( AisInterrogationMessageObject aisInterrogationMessageObject ) throws SQLException {
        Guid id = aisInterrogationMessageObject.getId();
        long rowVersion = aisInterrogationMessageObject.getRowVersion();
        Guid aisDevice = aisInterrogationMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisInterrogationMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisInterrogationMessageObject.getMessageSequenceNumber();
        int repeat = aisInterrogationMessageObject.getRepeat();
        Guid mmsi = aisInterrogationMessageObject.getMmsi();
        Guid interrogatedMmsi = aisInterrogationMessageObject.getInterrogatedMmsi();
        int firstMessageType = aisInterrogationMessageObject.getFirstMessageType();
        int firstSlotOffset = aisInterrogationMessageObject.getFirstSlotOffset();
        Integer secondMessageType = aisInterrogationMessageObject.getSecondMessageType();
        Integer secondSlotOffset = aisInterrogationMessageObject.getSecondSlotOffset();
        Guid secondStationInterrogationMmsi = aisInterrogationMessageObject.getSecondStationInterrogationMmsi();
        Integer secondStationFirstMessageType = aisInterrogationMessageObject.getSecondStationFirstMessageType();
        Integer secondStationFirstSlotOffset = aisInterrogationMessageObject.getSecondStationFirstSlotOffset();
        var result = updateAisInterrogationMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, interrogatedMmsi, firstMessageType, firstSlotOffset, secondMessageType, secondSlotOffset, secondStationInterrogationMmsi, secondStationFirstMessageType, secondStationFirstSlotOffset );
        if( result.isSuccess( ) ) {
            aisInterrogationMessageObject.setRowVersion(result.getRowVersion());
            aisInterrogationMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisInterrogationMessage( AisInterrogationMessageObject aisInterrogationMessageObject ) throws SQLException {
        Guid id = aisInterrogationMessageObject.getId();
        long rowVersion = aisInterrogationMessageObject.getRowVersion();
        Guid aisDevice = aisInterrogationMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisInterrogationMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisInterrogationMessageObject.getMessageSequenceNumber();
        int repeat = aisInterrogationMessageObject.getRepeat();
        int firstMessageType = aisInterrogationMessageObject.getFirstMessageType();
        int firstSlotOffset = aisInterrogationMessageObject.getFirstSlotOffset();
        Integer secondMessageType = aisInterrogationMessageObject.getSecondMessageType();
        Integer secondSlotOffset = aisInterrogationMessageObject.getSecondSlotOffset();
        Integer secondStationFirstMessageType = aisInterrogationMessageObject.getSecondStationFirstMessageType();
        Integer secondStationFirstSlotOffset = aisInterrogationMessageObject.getSecondStationFirstSlotOffset();
        var result = update1AisInterrogationMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, firstMessageType, firstSlotOffset, secondMessageType, secondSlotOffset, secondStationFirstMessageType, secondStationFirstSlotOffset );
        if( result.isSuccess( ) ) {
            aisInterrogationMessageObject.setRowVersion(result.getRowVersion());
            aisInterrogationMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisInterrogationMessage( AisInterrogationMessageObject aisInterrogationMessageObject ) throws SQLException {
        Guid id = aisInterrogationMessageObject.getId();
        long rowVersion = aisInterrogationMessageObject.getRowVersion();
        Guid mmsi = aisInterrogationMessageObject.getMmsi();
        Guid interrogatedMmsi = aisInterrogationMessageObject.getInterrogatedMmsi();
        Guid secondStationInterrogationMmsi = aisInterrogationMessageObject.getSecondStationInterrogationMmsi();
        var result = update2AisInterrogationMessage( id, rowVersion, mmsi, interrogatedMmsi, secondStationInterrogationMmsi );
        if( result.isSuccess( ) ) {
            aisInterrogationMessageObject.setRowVersion(result.getRowVersion());
            aisInterrogationMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisInterrogationMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisInterrogationMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisInterrogationMessage( AisInterrogationMessageObject aisInterrogationMessageObject ) throws SQLException {
        var id = aisInterrogationMessageObject.getId( );
        var rowVersion = aisInterrogationMessageObject.getRowVersion();
        var result = deleteAisInterrogationMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisPositionReportClassAAssignedScheduleMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int navigationStatus, Integer rateOfTurn, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int maneuverIndicator, int spare, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisPositionReportClassAAssignedScheduleMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, navigationStatus);
            callableStatement.setNullableInt32(8, rateOfTurn);
            callableStatement.setDouble(9, speedOverGround);
            callableStatement.setInt32(10, positionAccuracy);
            callableStatement.setDouble(11, longitude);
            callableStatement.setDouble(12, latitude);
            callableStatement.setDouble(13, courseOverGround);
            callableStatement.setNullableInt32(14, trueHeading);
            callableStatement.setInt32(15, timestamp);
            callableStatement.setInt32(16, maneuverIndicator);
            callableStatement.setInt32(17, spare);
            callableStatement.setInt32(18, raim);
            callableStatement.setInt32(19, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisPositionReportClassAAssignedScheduleMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int navigationStatus, Integer rateOfTurn, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int maneuverIndicator, int spare, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisPositionReportClassAAssignedScheduleMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, navigationStatus);
            callableStatement.setNullableInt32(7, rateOfTurn);
            callableStatement.setDouble(8, speedOverGround);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setDouble(12, courseOverGround);
            callableStatement.setNullableInt32(13, trueHeading);
            callableStatement.setInt32(14, timestamp);
            callableStatement.setInt32(15, maneuverIndicator);
            callableStatement.setInt32(16, spare);
            callableStatement.setInt32(17, raim);
            callableStatement.setInt32(18, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisPositionReportClassAAssignedScheduleMessage( AisPositionReportClassAAssignedScheduleMessageObject aisPositionReportClassAAssignedScheduleMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAAssignedScheduleMessageObject.getId( );
        Guid aisDevice = aisPositionReportClassAAssignedScheduleMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisPositionReportClassAAssignedScheduleMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisPositionReportClassAAssignedScheduleMessageObject.getMessageSequenceNumber( );
        int repeat = aisPositionReportClassAAssignedScheduleMessageObject.getRepeat( );
        Guid mmsi = aisPositionReportClassAAssignedScheduleMessageObject.getMmsi( );
        int navigationStatus = aisPositionReportClassAAssignedScheduleMessageObject.getNavigationStatus( );
        Integer rateOfTurn = aisPositionReportClassAAssignedScheduleMessageObject.getRateOfTurn( );
        double speedOverGround = aisPositionReportClassAAssignedScheduleMessageObject.getSpeedOverGround( );
        int positionAccuracy = aisPositionReportClassAAssignedScheduleMessageObject.getPositionAccuracy( );
        double longitude = aisPositionReportClassAAssignedScheduleMessageObject.getLongitude( );
        double latitude = aisPositionReportClassAAssignedScheduleMessageObject.getLatitude( );
        double courseOverGround = aisPositionReportClassAAssignedScheduleMessageObject.getCourseOverGround( );
        Integer trueHeading = aisPositionReportClassAAssignedScheduleMessageObject.getTrueHeading( );
        int timestamp = aisPositionReportClassAAssignedScheduleMessageObject.getTimestamp( );
        int maneuverIndicator = aisPositionReportClassAAssignedScheduleMessageObject.getManeuverIndicator( );
        int spare = aisPositionReportClassAAssignedScheduleMessageObject.getSpare( );
        int raim = aisPositionReportClassAAssignedScheduleMessageObject.getRaim( );
        int radioStatus = aisPositionReportClassAAssignedScheduleMessageObject.getRadioStatus( );
        var result = insertAisPositionReportClassAAssignedScheduleMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus );
        if( result.isSuccess() ) {
            aisPositionReportClassAAssignedScheduleMessageObject.setId(result.getId());
            aisPositionReportClassAAssignedScheduleMessageObject.setRowVersion(0);
            aisPositionReportClassAAssignedScheduleMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisPositionReportClassAAssignedScheduleMessage( AisPositionReportClassAAssignedScheduleMessageObject aisPositionReportClassAAssignedScheduleMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAAssignedScheduleMessageObject.getId( );
        Guid aisDevice = aisPositionReportClassAAssignedScheduleMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisPositionReportClassAAssignedScheduleMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisPositionReportClassAAssignedScheduleMessageObject.getMessageSequenceNumber( );
        int repeat = aisPositionReportClassAAssignedScheduleMessageObject.getRepeat( );
        int navigationStatus = aisPositionReportClassAAssignedScheduleMessageObject.getNavigationStatus( );
        Integer rateOfTurn = aisPositionReportClassAAssignedScheduleMessageObject.getRateOfTurn( );
        double speedOverGround = aisPositionReportClassAAssignedScheduleMessageObject.getSpeedOverGround( );
        int positionAccuracy = aisPositionReportClassAAssignedScheduleMessageObject.getPositionAccuracy( );
        double longitude = aisPositionReportClassAAssignedScheduleMessageObject.getLongitude( );
        double latitude = aisPositionReportClassAAssignedScheduleMessageObject.getLatitude( );
        double courseOverGround = aisPositionReportClassAAssignedScheduleMessageObject.getCourseOverGround( );
        Integer trueHeading = aisPositionReportClassAAssignedScheduleMessageObject.getTrueHeading( );
        int timestamp = aisPositionReportClassAAssignedScheduleMessageObject.getTimestamp( );
        int maneuverIndicator = aisPositionReportClassAAssignedScheduleMessageObject.getManeuverIndicator( );
        int spare = aisPositionReportClassAAssignedScheduleMessageObject.getSpare( );
        int raim = aisPositionReportClassAAssignedScheduleMessageObject.getRaim( );
        int radioStatus = aisPositionReportClassAAssignedScheduleMessageObject.getRadioStatus( );
        var result = insert1AisPositionReportClassAAssignedScheduleMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisPositionReportClassAAssignedScheduleMessageObject.setId( result.getId( ) );
            aisPositionReportClassAAssignedScheduleMessageObject.setRowVersion(0);
            aisPositionReportClassAAssignedScheduleMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisPositionReportClassAAssignedScheduleMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int navigationStatus, Integer rateOfTurn, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int maneuverIndicator, int spare, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisPositionReportClassAAssignedScheduleMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, navigationStatus);
            callableStatement.setNullableInt32(9, rateOfTurn);
            callableStatement.setDouble(10, speedOverGround);
            callableStatement.setInt32(11, positionAccuracy);
            callableStatement.setDouble(12, longitude);
            callableStatement.setDouble(13, latitude);
            callableStatement.setDouble(14, courseOverGround);
            callableStatement.setNullableInt32(15, trueHeading);
            callableStatement.setInt32(16, timestamp);
            callableStatement.setInt32(17, maneuverIndicator);
            callableStatement.setInt32(18, spare);
            callableStatement.setInt32(19, raim);
            callableStatement.setInt32(20, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisPositionReportClassAAssignedScheduleMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int navigationStatus, Integer rateOfTurn, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int maneuverIndicator, int spare, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisPositionReportClassAAssignedScheduleMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, navigationStatus);
            callableStatement.setNullableInt32(8, rateOfTurn);
            callableStatement.setDouble(9, speedOverGround);
            callableStatement.setInt32(10, positionAccuracy);
            callableStatement.setDouble(11, longitude);
            callableStatement.setDouble(12, latitude);
            callableStatement.setDouble(13, courseOverGround);
            callableStatement.setNullableInt32(14, trueHeading);
            callableStatement.setInt32(15, timestamp);
            callableStatement.setInt32(16, maneuverIndicator);
            callableStatement.setInt32(17, spare);
            callableStatement.setInt32(18, raim);
            callableStatement.setInt32(19, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisPositionReportClassAAssignedScheduleMessage( Guid id, long rowVersion, Guid mmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisPositionReportClassAAssignedScheduleMessageUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisPositionReportClassAAssignedScheduleMessage( AisPositionReportClassAAssignedScheduleMessageObject aisPositionReportClassAAssignedScheduleMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAAssignedScheduleMessageObject.getId();
        long rowVersion = aisPositionReportClassAAssignedScheduleMessageObject.getRowVersion();
        Guid aisDevice = aisPositionReportClassAAssignedScheduleMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisPositionReportClassAAssignedScheduleMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisPositionReportClassAAssignedScheduleMessageObject.getMessageSequenceNumber();
        int repeat = aisPositionReportClassAAssignedScheduleMessageObject.getRepeat();
        Guid mmsi = aisPositionReportClassAAssignedScheduleMessageObject.getMmsi();
        int navigationStatus = aisPositionReportClassAAssignedScheduleMessageObject.getNavigationStatus();
        Integer rateOfTurn = aisPositionReportClassAAssignedScheduleMessageObject.getRateOfTurn();
        double speedOverGround = aisPositionReportClassAAssignedScheduleMessageObject.getSpeedOverGround();
        int positionAccuracy = aisPositionReportClassAAssignedScheduleMessageObject.getPositionAccuracy();
        double longitude = aisPositionReportClassAAssignedScheduleMessageObject.getLongitude();
        double latitude = aisPositionReportClassAAssignedScheduleMessageObject.getLatitude();
        double courseOverGround = aisPositionReportClassAAssignedScheduleMessageObject.getCourseOverGround();
        Integer trueHeading = aisPositionReportClassAAssignedScheduleMessageObject.getTrueHeading();
        int timestamp = aisPositionReportClassAAssignedScheduleMessageObject.getTimestamp();
        int maneuverIndicator = aisPositionReportClassAAssignedScheduleMessageObject.getManeuverIndicator();
        int spare = aisPositionReportClassAAssignedScheduleMessageObject.getSpare();
        int raim = aisPositionReportClassAAssignedScheduleMessageObject.getRaim();
        int radioStatus = aisPositionReportClassAAssignedScheduleMessageObject.getRadioStatus();
        var result = updateAisPositionReportClassAAssignedScheduleMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisPositionReportClassAAssignedScheduleMessageObject.setRowVersion(result.getRowVersion());
            aisPositionReportClassAAssignedScheduleMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisPositionReportClassAAssignedScheduleMessage( AisPositionReportClassAAssignedScheduleMessageObject aisPositionReportClassAAssignedScheduleMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAAssignedScheduleMessageObject.getId();
        long rowVersion = aisPositionReportClassAAssignedScheduleMessageObject.getRowVersion();
        Guid aisDevice = aisPositionReportClassAAssignedScheduleMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisPositionReportClassAAssignedScheduleMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisPositionReportClassAAssignedScheduleMessageObject.getMessageSequenceNumber();
        int repeat = aisPositionReportClassAAssignedScheduleMessageObject.getRepeat();
        int navigationStatus = aisPositionReportClassAAssignedScheduleMessageObject.getNavigationStatus();
        Integer rateOfTurn = aisPositionReportClassAAssignedScheduleMessageObject.getRateOfTurn();
        double speedOverGround = aisPositionReportClassAAssignedScheduleMessageObject.getSpeedOverGround();
        int positionAccuracy = aisPositionReportClassAAssignedScheduleMessageObject.getPositionAccuracy();
        double longitude = aisPositionReportClassAAssignedScheduleMessageObject.getLongitude();
        double latitude = aisPositionReportClassAAssignedScheduleMessageObject.getLatitude();
        double courseOverGround = aisPositionReportClassAAssignedScheduleMessageObject.getCourseOverGround();
        Integer trueHeading = aisPositionReportClassAAssignedScheduleMessageObject.getTrueHeading();
        int timestamp = aisPositionReportClassAAssignedScheduleMessageObject.getTimestamp();
        int maneuverIndicator = aisPositionReportClassAAssignedScheduleMessageObject.getManeuverIndicator();
        int spare = aisPositionReportClassAAssignedScheduleMessageObject.getSpare();
        int raim = aisPositionReportClassAAssignedScheduleMessageObject.getRaim();
        int radioStatus = aisPositionReportClassAAssignedScheduleMessageObject.getRadioStatus();
        var result = update1AisPositionReportClassAAssignedScheduleMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisPositionReportClassAAssignedScheduleMessageObject.setRowVersion(result.getRowVersion());
            aisPositionReportClassAAssignedScheduleMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisPositionReportClassAAssignedScheduleMessage( AisPositionReportClassAAssignedScheduleMessageObject aisPositionReportClassAAssignedScheduleMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAAssignedScheduleMessageObject.getId();
        long rowVersion = aisPositionReportClassAAssignedScheduleMessageObject.getRowVersion();
        Guid mmsi = aisPositionReportClassAAssignedScheduleMessageObject.getMmsi();
        var result = update2AisPositionReportClassAAssignedScheduleMessage( id, rowVersion, mmsi );
        if( result.isSuccess( ) ) {
            aisPositionReportClassAAssignedScheduleMessageObject.setRowVersion(result.getRowVersion());
            aisPositionReportClassAAssignedScheduleMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisPositionReportClassAAssignedScheduleMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisPositionReportClassAAssignedScheduleMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisPositionReportClassAAssignedScheduleMessage( AisPositionReportClassAAssignedScheduleMessageObject aisPositionReportClassAAssignedScheduleMessageObject ) throws SQLException {
        var id = aisPositionReportClassAAssignedScheduleMessageObject.getId( );
        var rowVersion = aisPositionReportClassAAssignedScheduleMessageObject.getRowVersion();
        var result = deleteAisPositionReportClassAAssignedScheduleMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisPositionReportClassAMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int navigationStatus, Integer rateOfTurn, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int maneuverIndicator, int spare, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisPositionReportClassAMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, navigationStatus);
            callableStatement.setNullableInt32(8, rateOfTurn);
            callableStatement.setDouble(9, speedOverGround);
            callableStatement.setInt32(10, positionAccuracy);
            callableStatement.setDouble(11, longitude);
            callableStatement.setDouble(12, latitude);
            callableStatement.setDouble(13, courseOverGround);
            callableStatement.setNullableInt32(14, trueHeading);
            callableStatement.setInt32(15, timestamp);
            callableStatement.setInt32(16, maneuverIndicator);
            callableStatement.setInt32(17, spare);
            callableStatement.setInt32(18, raim);
            callableStatement.setInt32(19, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisPositionReportClassAMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int navigationStatus, Integer rateOfTurn, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int maneuverIndicator, int spare, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisPositionReportClassAMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, navigationStatus);
            callableStatement.setNullableInt32(7, rateOfTurn);
            callableStatement.setDouble(8, speedOverGround);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setDouble(12, courseOverGround);
            callableStatement.setNullableInt32(13, trueHeading);
            callableStatement.setInt32(14, timestamp);
            callableStatement.setInt32(15, maneuverIndicator);
            callableStatement.setInt32(16, spare);
            callableStatement.setInt32(17, raim);
            callableStatement.setInt32(18, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisPositionReportClassAMessage( AisPositionReportClassAMessageObject aisPositionReportClassAMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAMessageObject.getId( );
        Guid aisDevice = aisPositionReportClassAMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisPositionReportClassAMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisPositionReportClassAMessageObject.getMessageSequenceNumber( );
        int repeat = aisPositionReportClassAMessageObject.getRepeat( );
        Guid mmsi = aisPositionReportClassAMessageObject.getMmsi( );
        int navigationStatus = aisPositionReportClassAMessageObject.getNavigationStatus( );
        Integer rateOfTurn = aisPositionReportClassAMessageObject.getRateOfTurn( );
        double speedOverGround = aisPositionReportClassAMessageObject.getSpeedOverGround( );
        int positionAccuracy = aisPositionReportClassAMessageObject.getPositionAccuracy( );
        double longitude = aisPositionReportClassAMessageObject.getLongitude( );
        double latitude = aisPositionReportClassAMessageObject.getLatitude( );
        double courseOverGround = aisPositionReportClassAMessageObject.getCourseOverGround( );
        Integer trueHeading = aisPositionReportClassAMessageObject.getTrueHeading( );
        int timestamp = aisPositionReportClassAMessageObject.getTimestamp( );
        int maneuverIndicator = aisPositionReportClassAMessageObject.getManeuverIndicator( );
        int spare = aisPositionReportClassAMessageObject.getSpare( );
        int raim = aisPositionReportClassAMessageObject.getRaim( );
        int radioStatus = aisPositionReportClassAMessageObject.getRadioStatus( );
        var result = insertAisPositionReportClassAMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus );
        if( result.isSuccess() ) {
            aisPositionReportClassAMessageObject.setId(result.getId());
            aisPositionReportClassAMessageObject.setRowVersion(0);
            aisPositionReportClassAMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisPositionReportClassAMessage( AisPositionReportClassAMessageObject aisPositionReportClassAMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAMessageObject.getId( );
        Guid aisDevice = aisPositionReportClassAMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisPositionReportClassAMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisPositionReportClassAMessageObject.getMessageSequenceNumber( );
        int repeat = aisPositionReportClassAMessageObject.getRepeat( );
        int navigationStatus = aisPositionReportClassAMessageObject.getNavigationStatus( );
        Integer rateOfTurn = aisPositionReportClassAMessageObject.getRateOfTurn( );
        double speedOverGround = aisPositionReportClassAMessageObject.getSpeedOverGround( );
        int positionAccuracy = aisPositionReportClassAMessageObject.getPositionAccuracy( );
        double longitude = aisPositionReportClassAMessageObject.getLongitude( );
        double latitude = aisPositionReportClassAMessageObject.getLatitude( );
        double courseOverGround = aisPositionReportClassAMessageObject.getCourseOverGround( );
        Integer trueHeading = aisPositionReportClassAMessageObject.getTrueHeading( );
        int timestamp = aisPositionReportClassAMessageObject.getTimestamp( );
        int maneuverIndicator = aisPositionReportClassAMessageObject.getManeuverIndicator( );
        int spare = aisPositionReportClassAMessageObject.getSpare( );
        int raim = aisPositionReportClassAMessageObject.getRaim( );
        int radioStatus = aisPositionReportClassAMessageObject.getRadioStatus( );
        var result = insert1AisPositionReportClassAMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisPositionReportClassAMessageObject.setId( result.getId( ) );
            aisPositionReportClassAMessageObject.setRowVersion(0);
            aisPositionReportClassAMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisPositionReportClassAMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int navigationStatus, Integer rateOfTurn, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int maneuverIndicator, int spare, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisPositionReportClassAMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, navigationStatus);
            callableStatement.setNullableInt32(9, rateOfTurn);
            callableStatement.setDouble(10, speedOverGround);
            callableStatement.setInt32(11, positionAccuracy);
            callableStatement.setDouble(12, longitude);
            callableStatement.setDouble(13, latitude);
            callableStatement.setDouble(14, courseOverGround);
            callableStatement.setNullableInt32(15, trueHeading);
            callableStatement.setInt32(16, timestamp);
            callableStatement.setInt32(17, maneuverIndicator);
            callableStatement.setInt32(18, spare);
            callableStatement.setInt32(19, raim);
            callableStatement.setInt32(20, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisPositionReportClassAMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int navigationStatus, Integer rateOfTurn, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int maneuverIndicator, int spare, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisPositionReportClassAMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, navigationStatus);
            callableStatement.setNullableInt32(8, rateOfTurn);
            callableStatement.setDouble(9, speedOverGround);
            callableStatement.setInt32(10, positionAccuracy);
            callableStatement.setDouble(11, longitude);
            callableStatement.setDouble(12, latitude);
            callableStatement.setDouble(13, courseOverGround);
            callableStatement.setNullableInt32(14, trueHeading);
            callableStatement.setInt32(15, timestamp);
            callableStatement.setInt32(16, maneuverIndicator);
            callableStatement.setInt32(17, spare);
            callableStatement.setInt32(18, raim);
            callableStatement.setInt32(19, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisPositionReportClassAMessage( Guid id, long rowVersion, Guid mmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisPositionReportClassAMessageUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisPositionReportClassAMessage( AisPositionReportClassAMessageObject aisPositionReportClassAMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAMessageObject.getId();
        long rowVersion = aisPositionReportClassAMessageObject.getRowVersion();
        Guid aisDevice = aisPositionReportClassAMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisPositionReportClassAMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisPositionReportClassAMessageObject.getMessageSequenceNumber();
        int repeat = aisPositionReportClassAMessageObject.getRepeat();
        Guid mmsi = aisPositionReportClassAMessageObject.getMmsi();
        int navigationStatus = aisPositionReportClassAMessageObject.getNavigationStatus();
        Integer rateOfTurn = aisPositionReportClassAMessageObject.getRateOfTurn();
        double speedOverGround = aisPositionReportClassAMessageObject.getSpeedOverGround();
        int positionAccuracy = aisPositionReportClassAMessageObject.getPositionAccuracy();
        double longitude = aisPositionReportClassAMessageObject.getLongitude();
        double latitude = aisPositionReportClassAMessageObject.getLatitude();
        double courseOverGround = aisPositionReportClassAMessageObject.getCourseOverGround();
        Integer trueHeading = aisPositionReportClassAMessageObject.getTrueHeading();
        int timestamp = aisPositionReportClassAMessageObject.getTimestamp();
        int maneuverIndicator = aisPositionReportClassAMessageObject.getManeuverIndicator();
        int spare = aisPositionReportClassAMessageObject.getSpare();
        int raim = aisPositionReportClassAMessageObject.getRaim();
        int radioStatus = aisPositionReportClassAMessageObject.getRadioStatus();
        var result = updateAisPositionReportClassAMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisPositionReportClassAMessageObject.setRowVersion(result.getRowVersion());
            aisPositionReportClassAMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisPositionReportClassAMessage( AisPositionReportClassAMessageObject aisPositionReportClassAMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAMessageObject.getId();
        long rowVersion = aisPositionReportClassAMessageObject.getRowVersion();
        Guid aisDevice = aisPositionReportClassAMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisPositionReportClassAMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisPositionReportClassAMessageObject.getMessageSequenceNumber();
        int repeat = aisPositionReportClassAMessageObject.getRepeat();
        int navigationStatus = aisPositionReportClassAMessageObject.getNavigationStatus();
        Integer rateOfTurn = aisPositionReportClassAMessageObject.getRateOfTurn();
        double speedOverGround = aisPositionReportClassAMessageObject.getSpeedOverGround();
        int positionAccuracy = aisPositionReportClassAMessageObject.getPositionAccuracy();
        double longitude = aisPositionReportClassAMessageObject.getLongitude();
        double latitude = aisPositionReportClassAMessageObject.getLatitude();
        double courseOverGround = aisPositionReportClassAMessageObject.getCourseOverGround();
        Integer trueHeading = aisPositionReportClassAMessageObject.getTrueHeading();
        int timestamp = aisPositionReportClassAMessageObject.getTimestamp();
        int maneuverIndicator = aisPositionReportClassAMessageObject.getManeuverIndicator();
        int spare = aisPositionReportClassAMessageObject.getSpare();
        int raim = aisPositionReportClassAMessageObject.getRaim();
        int radioStatus = aisPositionReportClassAMessageObject.getRadioStatus();
        var result = update1AisPositionReportClassAMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisPositionReportClassAMessageObject.setRowVersion(result.getRowVersion());
            aisPositionReportClassAMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisPositionReportClassAMessage( AisPositionReportClassAMessageObject aisPositionReportClassAMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAMessageObject.getId();
        long rowVersion = aisPositionReportClassAMessageObject.getRowVersion();
        Guid mmsi = aisPositionReportClassAMessageObject.getMmsi();
        var result = update2AisPositionReportClassAMessage( id, rowVersion, mmsi );
        if( result.isSuccess( ) ) {
            aisPositionReportClassAMessageObject.setRowVersion(result.getRowVersion());
            aisPositionReportClassAMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisPositionReportClassAMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisPositionReportClassAMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisPositionReportClassAMessage( AisPositionReportClassAMessageObject aisPositionReportClassAMessageObject ) throws SQLException {
        var id = aisPositionReportClassAMessageObject.getId( );
        var rowVersion = aisPositionReportClassAMessageObject.getRowVersion();
        var result = deleteAisPositionReportClassAMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisPositionReportClassAResponseToInterrogationMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int navigationStatus, Integer rateOfTurn, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int maneuverIndicator, int spare, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisPositionReportClassAResponseToInterrogationMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, navigationStatus);
            callableStatement.setNullableInt32(8, rateOfTurn);
            callableStatement.setDouble(9, speedOverGround);
            callableStatement.setInt32(10, positionAccuracy);
            callableStatement.setDouble(11, longitude);
            callableStatement.setDouble(12, latitude);
            callableStatement.setDouble(13, courseOverGround);
            callableStatement.setNullableInt32(14, trueHeading);
            callableStatement.setInt32(15, timestamp);
            callableStatement.setInt32(16, maneuverIndicator);
            callableStatement.setInt32(17, spare);
            callableStatement.setInt32(18, raim);
            callableStatement.setInt32(19, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisPositionReportClassAResponseToInterrogationMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int navigationStatus, Integer rateOfTurn, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int maneuverIndicator, int spare, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisPositionReportClassAResponseToInterrogationMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, navigationStatus);
            callableStatement.setNullableInt32(7, rateOfTurn);
            callableStatement.setDouble(8, speedOverGround);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setDouble(12, courseOverGround);
            callableStatement.setNullableInt32(13, trueHeading);
            callableStatement.setInt32(14, timestamp);
            callableStatement.setInt32(15, maneuverIndicator);
            callableStatement.setInt32(16, spare);
            callableStatement.setInt32(17, raim);
            callableStatement.setInt32(18, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisPositionReportClassAResponseToInterrogationMessage( AisPositionReportClassAResponseToInterrogationMessageObject aisPositionReportClassAResponseToInterrogationMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAResponseToInterrogationMessageObject.getId( );
        Guid aisDevice = aisPositionReportClassAResponseToInterrogationMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisPositionReportClassAResponseToInterrogationMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisPositionReportClassAResponseToInterrogationMessageObject.getMessageSequenceNumber( );
        int repeat = aisPositionReportClassAResponseToInterrogationMessageObject.getRepeat( );
        Guid mmsi = aisPositionReportClassAResponseToInterrogationMessageObject.getMmsi( );
        int navigationStatus = aisPositionReportClassAResponseToInterrogationMessageObject.getNavigationStatus( );
        Integer rateOfTurn = aisPositionReportClassAResponseToInterrogationMessageObject.getRateOfTurn( );
        double speedOverGround = aisPositionReportClassAResponseToInterrogationMessageObject.getSpeedOverGround( );
        int positionAccuracy = aisPositionReportClassAResponseToInterrogationMessageObject.getPositionAccuracy( );
        double longitude = aisPositionReportClassAResponseToInterrogationMessageObject.getLongitude( );
        double latitude = aisPositionReportClassAResponseToInterrogationMessageObject.getLatitude( );
        double courseOverGround = aisPositionReportClassAResponseToInterrogationMessageObject.getCourseOverGround( );
        Integer trueHeading = aisPositionReportClassAResponseToInterrogationMessageObject.getTrueHeading( );
        int timestamp = aisPositionReportClassAResponseToInterrogationMessageObject.getTimestamp( );
        int maneuverIndicator = aisPositionReportClassAResponseToInterrogationMessageObject.getManeuverIndicator( );
        int spare = aisPositionReportClassAResponseToInterrogationMessageObject.getSpare( );
        int raim = aisPositionReportClassAResponseToInterrogationMessageObject.getRaim( );
        int radioStatus = aisPositionReportClassAResponseToInterrogationMessageObject.getRadioStatus( );
        var result = insertAisPositionReportClassAResponseToInterrogationMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus );
        if( result.isSuccess() ) {
            aisPositionReportClassAResponseToInterrogationMessageObject.setId(result.getId());
            aisPositionReportClassAResponseToInterrogationMessageObject.setRowVersion(0);
            aisPositionReportClassAResponseToInterrogationMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisPositionReportClassAResponseToInterrogationMessage( AisPositionReportClassAResponseToInterrogationMessageObject aisPositionReportClassAResponseToInterrogationMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAResponseToInterrogationMessageObject.getId( );
        Guid aisDevice = aisPositionReportClassAResponseToInterrogationMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisPositionReportClassAResponseToInterrogationMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisPositionReportClassAResponseToInterrogationMessageObject.getMessageSequenceNumber( );
        int repeat = aisPositionReportClassAResponseToInterrogationMessageObject.getRepeat( );
        int navigationStatus = aisPositionReportClassAResponseToInterrogationMessageObject.getNavigationStatus( );
        Integer rateOfTurn = aisPositionReportClassAResponseToInterrogationMessageObject.getRateOfTurn( );
        double speedOverGround = aisPositionReportClassAResponseToInterrogationMessageObject.getSpeedOverGround( );
        int positionAccuracy = aisPositionReportClassAResponseToInterrogationMessageObject.getPositionAccuracy( );
        double longitude = aisPositionReportClassAResponseToInterrogationMessageObject.getLongitude( );
        double latitude = aisPositionReportClassAResponseToInterrogationMessageObject.getLatitude( );
        double courseOverGround = aisPositionReportClassAResponseToInterrogationMessageObject.getCourseOverGround( );
        Integer trueHeading = aisPositionReportClassAResponseToInterrogationMessageObject.getTrueHeading( );
        int timestamp = aisPositionReportClassAResponseToInterrogationMessageObject.getTimestamp( );
        int maneuverIndicator = aisPositionReportClassAResponseToInterrogationMessageObject.getManeuverIndicator( );
        int spare = aisPositionReportClassAResponseToInterrogationMessageObject.getSpare( );
        int raim = aisPositionReportClassAResponseToInterrogationMessageObject.getRaim( );
        int radioStatus = aisPositionReportClassAResponseToInterrogationMessageObject.getRadioStatus( );
        var result = insert1AisPositionReportClassAResponseToInterrogationMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisPositionReportClassAResponseToInterrogationMessageObject.setId( result.getId( ) );
            aisPositionReportClassAResponseToInterrogationMessageObject.setRowVersion(0);
            aisPositionReportClassAResponseToInterrogationMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisPositionReportClassAResponseToInterrogationMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int navigationStatus, Integer rateOfTurn, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int maneuverIndicator, int spare, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisPositionReportClassAResponseToInterrogationMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, navigationStatus);
            callableStatement.setNullableInt32(9, rateOfTurn);
            callableStatement.setDouble(10, speedOverGround);
            callableStatement.setInt32(11, positionAccuracy);
            callableStatement.setDouble(12, longitude);
            callableStatement.setDouble(13, latitude);
            callableStatement.setDouble(14, courseOverGround);
            callableStatement.setNullableInt32(15, trueHeading);
            callableStatement.setInt32(16, timestamp);
            callableStatement.setInt32(17, maneuverIndicator);
            callableStatement.setInt32(18, spare);
            callableStatement.setInt32(19, raim);
            callableStatement.setInt32(20, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisPositionReportClassAResponseToInterrogationMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int navigationStatus, Integer rateOfTurn, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int maneuverIndicator, int spare, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisPositionReportClassAResponseToInterrogationMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, navigationStatus);
            callableStatement.setNullableInt32(8, rateOfTurn);
            callableStatement.setDouble(9, speedOverGround);
            callableStatement.setInt32(10, positionAccuracy);
            callableStatement.setDouble(11, longitude);
            callableStatement.setDouble(12, latitude);
            callableStatement.setDouble(13, courseOverGround);
            callableStatement.setNullableInt32(14, trueHeading);
            callableStatement.setInt32(15, timestamp);
            callableStatement.setInt32(16, maneuverIndicator);
            callableStatement.setInt32(17, spare);
            callableStatement.setInt32(18, raim);
            callableStatement.setInt32(19, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisPositionReportClassAResponseToInterrogationMessage( Guid id, long rowVersion, Guid mmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisPositionReportClassAResponseToInterrogationMessageUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisPositionReportClassAResponseToInterrogationMessage( AisPositionReportClassAResponseToInterrogationMessageObject aisPositionReportClassAResponseToInterrogationMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAResponseToInterrogationMessageObject.getId();
        long rowVersion = aisPositionReportClassAResponseToInterrogationMessageObject.getRowVersion();
        Guid aisDevice = aisPositionReportClassAResponseToInterrogationMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisPositionReportClassAResponseToInterrogationMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisPositionReportClassAResponseToInterrogationMessageObject.getMessageSequenceNumber();
        int repeat = aisPositionReportClassAResponseToInterrogationMessageObject.getRepeat();
        Guid mmsi = aisPositionReportClassAResponseToInterrogationMessageObject.getMmsi();
        int navigationStatus = aisPositionReportClassAResponseToInterrogationMessageObject.getNavigationStatus();
        Integer rateOfTurn = aisPositionReportClassAResponseToInterrogationMessageObject.getRateOfTurn();
        double speedOverGround = aisPositionReportClassAResponseToInterrogationMessageObject.getSpeedOverGround();
        int positionAccuracy = aisPositionReportClassAResponseToInterrogationMessageObject.getPositionAccuracy();
        double longitude = aisPositionReportClassAResponseToInterrogationMessageObject.getLongitude();
        double latitude = aisPositionReportClassAResponseToInterrogationMessageObject.getLatitude();
        double courseOverGround = aisPositionReportClassAResponseToInterrogationMessageObject.getCourseOverGround();
        Integer trueHeading = aisPositionReportClassAResponseToInterrogationMessageObject.getTrueHeading();
        int timestamp = aisPositionReportClassAResponseToInterrogationMessageObject.getTimestamp();
        int maneuverIndicator = aisPositionReportClassAResponseToInterrogationMessageObject.getManeuverIndicator();
        int spare = aisPositionReportClassAResponseToInterrogationMessageObject.getSpare();
        int raim = aisPositionReportClassAResponseToInterrogationMessageObject.getRaim();
        int radioStatus = aisPositionReportClassAResponseToInterrogationMessageObject.getRadioStatus();
        var result = updateAisPositionReportClassAResponseToInterrogationMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisPositionReportClassAResponseToInterrogationMessageObject.setRowVersion(result.getRowVersion());
            aisPositionReportClassAResponseToInterrogationMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisPositionReportClassAResponseToInterrogationMessage( AisPositionReportClassAResponseToInterrogationMessageObject aisPositionReportClassAResponseToInterrogationMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAResponseToInterrogationMessageObject.getId();
        long rowVersion = aisPositionReportClassAResponseToInterrogationMessageObject.getRowVersion();
        Guid aisDevice = aisPositionReportClassAResponseToInterrogationMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisPositionReportClassAResponseToInterrogationMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisPositionReportClassAResponseToInterrogationMessageObject.getMessageSequenceNumber();
        int repeat = aisPositionReportClassAResponseToInterrogationMessageObject.getRepeat();
        int navigationStatus = aisPositionReportClassAResponseToInterrogationMessageObject.getNavigationStatus();
        Integer rateOfTurn = aisPositionReportClassAResponseToInterrogationMessageObject.getRateOfTurn();
        double speedOverGround = aisPositionReportClassAResponseToInterrogationMessageObject.getSpeedOverGround();
        int positionAccuracy = aisPositionReportClassAResponseToInterrogationMessageObject.getPositionAccuracy();
        double longitude = aisPositionReportClassAResponseToInterrogationMessageObject.getLongitude();
        double latitude = aisPositionReportClassAResponseToInterrogationMessageObject.getLatitude();
        double courseOverGround = aisPositionReportClassAResponseToInterrogationMessageObject.getCourseOverGround();
        Integer trueHeading = aisPositionReportClassAResponseToInterrogationMessageObject.getTrueHeading();
        int timestamp = aisPositionReportClassAResponseToInterrogationMessageObject.getTimestamp();
        int maneuverIndicator = aisPositionReportClassAResponseToInterrogationMessageObject.getManeuverIndicator();
        int spare = aisPositionReportClassAResponseToInterrogationMessageObject.getSpare();
        int raim = aisPositionReportClassAResponseToInterrogationMessageObject.getRaim();
        int radioStatus = aisPositionReportClassAResponseToInterrogationMessageObject.getRadioStatus();
        var result = update1AisPositionReportClassAResponseToInterrogationMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, navigationStatus, rateOfTurn, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, maneuverIndicator, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisPositionReportClassAResponseToInterrogationMessageObject.setRowVersion(result.getRowVersion());
            aisPositionReportClassAResponseToInterrogationMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisPositionReportClassAResponseToInterrogationMessage( AisPositionReportClassAResponseToInterrogationMessageObject aisPositionReportClassAResponseToInterrogationMessageObject ) throws SQLException {
        Guid id = aisPositionReportClassAResponseToInterrogationMessageObject.getId();
        long rowVersion = aisPositionReportClassAResponseToInterrogationMessageObject.getRowVersion();
        Guid mmsi = aisPositionReportClassAResponseToInterrogationMessageObject.getMmsi();
        var result = update2AisPositionReportClassAResponseToInterrogationMessage( id, rowVersion, mmsi );
        if( result.isSuccess( ) ) {
            aisPositionReportClassAResponseToInterrogationMessageObject.setRowVersion(result.getRowVersion());
            aisPositionReportClassAResponseToInterrogationMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisPositionReportClassAResponseToInterrogationMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisPositionReportClassAResponseToInterrogationMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisPositionReportClassAResponseToInterrogationMessage( AisPositionReportClassAResponseToInterrogationMessageObject aisPositionReportClassAResponseToInterrogationMessageObject ) throws SQLException {
        var id = aisPositionReportClassAResponseToInterrogationMessageObject.getId( );
        var rowVersion = aisPositionReportClassAResponseToInterrogationMessageObject.getRowVersion();
        var result = deleteAisPositionReportClassAResponseToInterrogationMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisPositionReportForLongRangeApplicationsMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int positionAccuracy, int raim, int navigationStatus, double longitude, double latitude, double speedOverGround, double courseOverGround, int gnssPositionStatus, int spare ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisPositionReportForLongRangeApplicationsMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, positionAccuracy);
            callableStatement.setInt32(8, raim);
            callableStatement.setInt32(9, navigationStatus);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setDouble(12, speedOverGround);
            callableStatement.setDouble(13, courseOverGround);
            callableStatement.setInt32(14, gnssPositionStatus);
            callableStatement.setInt32(15, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisPositionReportForLongRangeApplicationsMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int positionAccuracy, int raim, int navigationStatus, double longitude, double latitude, double speedOverGround, double courseOverGround, int gnssPositionStatus, int spare ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisPositionReportForLongRangeApplicationsMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, positionAccuracy);
            callableStatement.setInt32(7, raim);
            callableStatement.setInt32(8, navigationStatus);
            callableStatement.setDouble(9, longitude);
            callableStatement.setDouble(10, latitude);
            callableStatement.setDouble(11, speedOverGround);
            callableStatement.setDouble(12, courseOverGround);
            callableStatement.setInt32(13, gnssPositionStatus);
            callableStatement.setInt32(14, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisPositionReportForLongRangeApplicationsMessage( AisPositionReportForLongRangeApplicationsMessageObject aisPositionReportForLongRangeApplicationsMessageObject ) throws SQLException {
        Guid id = aisPositionReportForLongRangeApplicationsMessageObject.getId( );
        Guid aisDevice = aisPositionReportForLongRangeApplicationsMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisPositionReportForLongRangeApplicationsMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisPositionReportForLongRangeApplicationsMessageObject.getMessageSequenceNumber( );
        int repeat = aisPositionReportForLongRangeApplicationsMessageObject.getRepeat( );
        Guid mmsi = aisPositionReportForLongRangeApplicationsMessageObject.getMmsi( );
        int positionAccuracy = aisPositionReportForLongRangeApplicationsMessageObject.getPositionAccuracy( );
        int raim = aisPositionReportForLongRangeApplicationsMessageObject.getRaim( );
        int navigationStatus = aisPositionReportForLongRangeApplicationsMessageObject.getNavigationStatus( );
        double longitude = aisPositionReportForLongRangeApplicationsMessageObject.getLongitude( );
        double latitude = aisPositionReportForLongRangeApplicationsMessageObject.getLatitude( );
        double speedOverGround = aisPositionReportForLongRangeApplicationsMessageObject.getSpeedOverGround( );
        double courseOverGround = aisPositionReportForLongRangeApplicationsMessageObject.getCourseOverGround( );
        int gnssPositionStatus = aisPositionReportForLongRangeApplicationsMessageObject.getGnssPositionStatus( );
        int spare = aisPositionReportForLongRangeApplicationsMessageObject.getSpare( );
        var result = insertAisPositionReportForLongRangeApplicationsMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, positionAccuracy, raim, navigationStatus, longitude, latitude, speedOverGround, courseOverGround, gnssPositionStatus, spare );
        if( result.isSuccess() ) {
            aisPositionReportForLongRangeApplicationsMessageObject.setId(result.getId());
            aisPositionReportForLongRangeApplicationsMessageObject.setRowVersion(0);
            aisPositionReportForLongRangeApplicationsMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisPositionReportForLongRangeApplicationsMessage( AisPositionReportForLongRangeApplicationsMessageObject aisPositionReportForLongRangeApplicationsMessageObject ) throws SQLException {
        Guid id = aisPositionReportForLongRangeApplicationsMessageObject.getId( );
        Guid aisDevice = aisPositionReportForLongRangeApplicationsMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisPositionReportForLongRangeApplicationsMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisPositionReportForLongRangeApplicationsMessageObject.getMessageSequenceNumber( );
        int repeat = aisPositionReportForLongRangeApplicationsMessageObject.getRepeat( );
        int positionAccuracy = aisPositionReportForLongRangeApplicationsMessageObject.getPositionAccuracy( );
        int raim = aisPositionReportForLongRangeApplicationsMessageObject.getRaim( );
        int navigationStatus = aisPositionReportForLongRangeApplicationsMessageObject.getNavigationStatus( );
        double longitude = aisPositionReportForLongRangeApplicationsMessageObject.getLongitude( );
        double latitude = aisPositionReportForLongRangeApplicationsMessageObject.getLatitude( );
        double speedOverGround = aisPositionReportForLongRangeApplicationsMessageObject.getSpeedOverGround( );
        double courseOverGround = aisPositionReportForLongRangeApplicationsMessageObject.getCourseOverGround( );
        int gnssPositionStatus = aisPositionReportForLongRangeApplicationsMessageObject.getGnssPositionStatus( );
        int spare = aisPositionReportForLongRangeApplicationsMessageObject.getSpare( );
        var result = insert1AisPositionReportForLongRangeApplicationsMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, positionAccuracy, raim, navigationStatus, longitude, latitude, speedOverGround, courseOverGround, gnssPositionStatus, spare );
        if( result.isSuccess( ) ) {
            aisPositionReportForLongRangeApplicationsMessageObject.setId( result.getId( ) );
            aisPositionReportForLongRangeApplicationsMessageObject.setRowVersion(0);
            aisPositionReportForLongRangeApplicationsMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisPositionReportForLongRangeApplicationsMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int positionAccuracy, int raim, int navigationStatus, double longitude, double latitude, double speedOverGround, double courseOverGround, int gnssPositionStatus, int spare ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisPositionReportForLongRangeApplicationsMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, positionAccuracy);
            callableStatement.setInt32(9, raim);
            callableStatement.setInt32(10, navigationStatus);
            callableStatement.setDouble(11, longitude);
            callableStatement.setDouble(12, latitude);
            callableStatement.setDouble(13, speedOverGround);
            callableStatement.setDouble(14, courseOverGround);
            callableStatement.setInt32(15, gnssPositionStatus);
            callableStatement.setInt32(16, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisPositionReportForLongRangeApplicationsMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int positionAccuracy, int raim, int navigationStatus, double longitude, double latitude, double speedOverGround, double courseOverGround, int gnssPositionStatus, int spare ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisPositionReportForLongRangeApplicationsMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, positionAccuracy);
            callableStatement.setInt32(8, raim);
            callableStatement.setInt32(9, navigationStatus);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setDouble(12, speedOverGround);
            callableStatement.setDouble(13, courseOverGround);
            callableStatement.setInt32(14, gnssPositionStatus);
            callableStatement.setInt32(15, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisPositionReportForLongRangeApplicationsMessage( Guid id, long rowVersion, Guid mmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisPositionReportForLongRangeApplicationsMessageUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisPositionReportForLongRangeApplicationsMessage( AisPositionReportForLongRangeApplicationsMessageObject aisPositionReportForLongRangeApplicationsMessageObject ) throws SQLException {
        Guid id = aisPositionReportForLongRangeApplicationsMessageObject.getId();
        long rowVersion = aisPositionReportForLongRangeApplicationsMessageObject.getRowVersion();
        Guid aisDevice = aisPositionReportForLongRangeApplicationsMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisPositionReportForLongRangeApplicationsMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisPositionReportForLongRangeApplicationsMessageObject.getMessageSequenceNumber();
        int repeat = aisPositionReportForLongRangeApplicationsMessageObject.getRepeat();
        Guid mmsi = aisPositionReportForLongRangeApplicationsMessageObject.getMmsi();
        int positionAccuracy = aisPositionReportForLongRangeApplicationsMessageObject.getPositionAccuracy();
        int raim = aisPositionReportForLongRangeApplicationsMessageObject.getRaim();
        int navigationStatus = aisPositionReportForLongRangeApplicationsMessageObject.getNavigationStatus();
        double longitude = aisPositionReportForLongRangeApplicationsMessageObject.getLongitude();
        double latitude = aisPositionReportForLongRangeApplicationsMessageObject.getLatitude();
        double speedOverGround = aisPositionReportForLongRangeApplicationsMessageObject.getSpeedOverGround();
        double courseOverGround = aisPositionReportForLongRangeApplicationsMessageObject.getCourseOverGround();
        int gnssPositionStatus = aisPositionReportForLongRangeApplicationsMessageObject.getGnssPositionStatus();
        int spare = aisPositionReportForLongRangeApplicationsMessageObject.getSpare();
        var result = updateAisPositionReportForLongRangeApplicationsMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, positionAccuracy, raim, navigationStatus, longitude, latitude, speedOverGround, courseOverGround, gnssPositionStatus, spare );
        if( result.isSuccess( ) ) {
            aisPositionReportForLongRangeApplicationsMessageObject.setRowVersion(result.getRowVersion());
            aisPositionReportForLongRangeApplicationsMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisPositionReportForLongRangeApplicationsMessage( AisPositionReportForLongRangeApplicationsMessageObject aisPositionReportForLongRangeApplicationsMessageObject ) throws SQLException {
        Guid id = aisPositionReportForLongRangeApplicationsMessageObject.getId();
        long rowVersion = aisPositionReportForLongRangeApplicationsMessageObject.getRowVersion();
        Guid aisDevice = aisPositionReportForLongRangeApplicationsMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisPositionReportForLongRangeApplicationsMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisPositionReportForLongRangeApplicationsMessageObject.getMessageSequenceNumber();
        int repeat = aisPositionReportForLongRangeApplicationsMessageObject.getRepeat();
        int positionAccuracy = aisPositionReportForLongRangeApplicationsMessageObject.getPositionAccuracy();
        int raim = aisPositionReportForLongRangeApplicationsMessageObject.getRaim();
        int navigationStatus = aisPositionReportForLongRangeApplicationsMessageObject.getNavigationStatus();
        double longitude = aisPositionReportForLongRangeApplicationsMessageObject.getLongitude();
        double latitude = aisPositionReportForLongRangeApplicationsMessageObject.getLatitude();
        double speedOverGround = aisPositionReportForLongRangeApplicationsMessageObject.getSpeedOverGround();
        double courseOverGround = aisPositionReportForLongRangeApplicationsMessageObject.getCourseOverGround();
        int gnssPositionStatus = aisPositionReportForLongRangeApplicationsMessageObject.getGnssPositionStatus();
        int spare = aisPositionReportForLongRangeApplicationsMessageObject.getSpare();
        var result = update1AisPositionReportForLongRangeApplicationsMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, positionAccuracy, raim, navigationStatus, longitude, latitude, speedOverGround, courseOverGround, gnssPositionStatus, spare );
        if( result.isSuccess( ) ) {
            aisPositionReportForLongRangeApplicationsMessageObject.setRowVersion(result.getRowVersion());
            aisPositionReportForLongRangeApplicationsMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisPositionReportForLongRangeApplicationsMessage( AisPositionReportForLongRangeApplicationsMessageObject aisPositionReportForLongRangeApplicationsMessageObject ) throws SQLException {
        Guid id = aisPositionReportForLongRangeApplicationsMessageObject.getId();
        long rowVersion = aisPositionReportForLongRangeApplicationsMessageObject.getRowVersion();
        Guid mmsi = aisPositionReportForLongRangeApplicationsMessageObject.getMmsi();
        var result = update2AisPositionReportForLongRangeApplicationsMessage( id, rowVersion, mmsi );
        if( result.isSuccess( ) ) {
            aisPositionReportForLongRangeApplicationsMessageObject.setRowVersion(result.getRowVersion());
            aisPositionReportForLongRangeApplicationsMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisPositionReportForLongRangeApplicationsMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisPositionReportForLongRangeApplicationsMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisPositionReportForLongRangeApplicationsMessage( AisPositionReportForLongRangeApplicationsMessageObject aisPositionReportForLongRangeApplicationsMessageObject ) throws SQLException {
        var id = aisPositionReportForLongRangeApplicationsMessageObject.getId( );
        var rowVersion = aisPositionReportForLongRangeApplicationsMessageObject.getRowVersion();
        var result = deleteAisPositionReportForLongRangeApplicationsMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisSafetyRelatedAcknowledgmentMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int sequenceNumber1, Guid mmsi1, Integer sequenceNumber2, Guid mmsi2, Integer sequenceNumber3, Guid mmsi3, Integer sequenceNumber4, Guid mmsi4 ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisSafetyRelatedAcknowledgmentMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, spare);
            callableStatement.setInt32(8, sequenceNumber1);
            callableStatement.setNullableGuid(9, mmsi1);
            callableStatement.setNullableInt32(10, sequenceNumber2);
            callableStatement.setNullableGuid(11, mmsi2);
            callableStatement.setNullableInt32(12, sequenceNumber3);
            callableStatement.setNullableGuid(13, mmsi3);
            callableStatement.setNullableInt32(14, sequenceNumber4);
            callableStatement.setNullableGuid(15, mmsi4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisSafetyRelatedAcknowledgmentMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int spare, int sequenceNumber1, Integer sequenceNumber2, Integer sequenceNumber3, Integer sequenceNumber4 ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisSafetyRelatedAcknowledgmentMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, spare);
            callableStatement.setInt32(7, sequenceNumber1);
            callableStatement.setNullableInt32(8, sequenceNumber2);
            callableStatement.setNullableInt32(9, sequenceNumber3);
            callableStatement.setNullableInt32(10, sequenceNumber4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisSafetyRelatedAcknowledgmentMessage( AisSafetyRelatedAcknowledgmentMessageObject aisSafetyRelatedAcknowledgmentMessageObject ) throws SQLException {
        Guid id = aisSafetyRelatedAcknowledgmentMessageObject.getId( );
        Guid aisDevice = aisSafetyRelatedAcknowledgmentMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisSafetyRelatedAcknowledgmentMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisSafetyRelatedAcknowledgmentMessageObject.getMessageSequenceNumber( );
        int repeat = aisSafetyRelatedAcknowledgmentMessageObject.getRepeat( );
        Guid mmsi = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi( );
        int spare = aisSafetyRelatedAcknowledgmentMessageObject.getSpare( );
        int sequenceNumber1 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber1( );
        Guid mmsi1 = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi1( );
        Integer sequenceNumber2 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber2( );
        Guid mmsi2 = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi2( );
        Integer sequenceNumber3 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber3( );
        Guid mmsi3 = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi3( );
        Integer sequenceNumber4 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber4( );
        Guid mmsi4 = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi4( );
        var result = insertAisSafetyRelatedAcknowledgmentMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, spare, sequenceNumber1, mmsi1, sequenceNumber2, mmsi2, sequenceNumber3, mmsi3, sequenceNumber4, mmsi4 );
        if( result.isSuccess() ) {
            aisSafetyRelatedAcknowledgmentMessageObject.setId(result.getId());
            aisSafetyRelatedAcknowledgmentMessageObject.setRowVersion(0);
            aisSafetyRelatedAcknowledgmentMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisSafetyRelatedAcknowledgmentMessage( AisSafetyRelatedAcknowledgmentMessageObject aisSafetyRelatedAcknowledgmentMessageObject ) throws SQLException {
        Guid id = aisSafetyRelatedAcknowledgmentMessageObject.getId( );
        Guid aisDevice = aisSafetyRelatedAcknowledgmentMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisSafetyRelatedAcknowledgmentMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisSafetyRelatedAcknowledgmentMessageObject.getMessageSequenceNumber( );
        int repeat = aisSafetyRelatedAcknowledgmentMessageObject.getRepeat( );
        int spare = aisSafetyRelatedAcknowledgmentMessageObject.getSpare( );
        int sequenceNumber1 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber1( );
        Integer sequenceNumber2 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber2( );
        Integer sequenceNumber3 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber3( );
        Integer sequenceNumber4 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber4( );
        var result = insert1AisSafetyRelatedAcknowledgmentMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, spare, sequenceNumber1, sequenceNumber2, sequenceNumber3, sequenceNumber4 );
        if( result.isSuccess( ) ) {
            aisSafetyRelatedAcknowledgmentMessageObject.setId( result.getId( ) );
            aisSafetyRelatedAcknowledgmentMessageObject.setRowVersion(0);
            aisSafetyRelatedAcknowledgmentMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisSafetyRelatedAcknowledgmentMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare, int sequenceNumber1, Guid mmsi1, Integer sequenceNumber2, Guid mmsi2, Integer sequenceNumber3, Guid mmsi3, Integer sequenceNumber4, Guid mmsi4 ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisSafetyRelatedAcknowledgmentMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, spare);
            callableStatement.setInt32(9, sequenceNumber1);
            callableStatement.setNullableGuid(10, mmsi1);
            callableStatement.setNullableInt32(11, sequenceNumber2);
            callableStatement.setNullableGuid(12, mmsi2);
            callableStatement.setNullableInt32(13, sequenceNumber3);
            callableStatement.setNullableGuid(14, mmsi3);
            callableStatement.setNullableInt32(15, sequenceNumber4);
            callableStatement.setNullableGuid(16, mmsi4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisSafetyRelatedAcknowledgmentMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int spare, int sequenceNumber1, Integer sequenceNumber2, Integer sequenceNumber3, Integer sequenceNumber4 ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisSafetyRelatedAcknowledgmentMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, spare);
            callableStatement.setInt32(8, sequenceNumber1);
            callableStatement.setNullableInt32(9, sequenceNumber2);
            callableStatement.setNullableInt32(10, sequenceNumber3);
            callableStatement.setNullableInt32(11, sequenceNumber4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisSafetyRelatedAcknowledgmentMessage( Guid id, long rowVersion, Guid mmsi, Guid mmsi1, Guid mmsi2, Guid mmsi3, Guid mmsi4 ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisSafetyRelatedAcknowledgmentMessageUpdate2(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.setNullableGuid(4, mmsi1);
            callableStatement.setNullableGuid(5, mmsi2);
            callableStatement.setNullableGuid(6, mmsi3);
            callableStatement.setNullableGuid(7, mmsi4);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisSafetyRelatedAcknowledgmentMessage( AisSafetyRelatedAcknowledgmentMessageObject aisSafetyRelatedAcknowledgmentMessageObject ) throws SQLException {
        Guid id = aisSafetyRelatedAcknowledgmentMessageObject.getId();
        long rowVersion = aisSafetyRelatedAcknowledgmentMessageObject.getRowVersion();
        Guid aisDevice = aisSafetyRelatedAcknowledgmentMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisSafetyRelatedAcknowledgmentMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisSafetyRelatedAcknowledgmentMessageObject.getMessageSequenceNumber();
        int repeat = aisSafetyRelatedAcknowledgmentMessageObject.getRepeat();
        Guid mmsi = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi();
        int spare = aisSafetyRelatedAcknowledgmentMessageObject.getSpare();
        int sequenceNumber1 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber1();
        Guid mmsi1 = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi1();
        Integer sequenceNumber2 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber2();
        Guid mmsi2 = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi2();
        Integer sequenceNumber3 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber3();
        Guid mmsi3 = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi3();
        Integer sequenceNumber4 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber4();
        Guid mmsi4 = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi4();
        var result = updateAisSafetyRelatedAcknowledgmentMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, spare, sequenceNumber1, mmsi1, sequenceNumber2, mmsi2, sequenceNumber3, mmsi3, sequenceNumber4, mmsi4 );
        if( result.isSuccess( ) ) {
            aisSafetyRelatedAcknowledgmentMessageObject.setRowVersion(result.getRowVersion());
            aisSafetyRelatedAcknowledgmentMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisSafetyRelatedAcknowledgmentMessage( AisSafetyRelatedAcknowledgmentMessageObject aisSafetyRelatedAcknowledgmentMessageObject ) throws SQLException {
        Guid id = aisSafetyRelatedAcknowledgmentMessageObject.getId();
        long rowVersion = aisSafetyRelatedAcknowledgmentMessageObject.getRowVersion();
        Guid aisDevice = aisSafetyRelatedAcknowledgmentMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisSafetyRelatedAcknowledgmentMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisSafetyRelatedAcknowledgmentMessageObject.getMessageSequenceNumber();
        int repeat = aisSafetyRelatedAcknowledgmentMessageObject.getRepeat();
        int spare = aisSafetyRelatedAcknowledgmentMessageObject.getSpare();
        int sequenceNumber1 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber1();
        Integer sequenceNumber2 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber2();
        Integer sequenceNumber3 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber3();
        Integer sequenceNumber4 = aisSafetyRelatedAcknowledgmentMessageObject.getSequenceNumber4();
        var result = update1AisSafetyRelatedAcknowledgmentMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, spare, sequenceNumber1, sequenceNumber2, sequenceNumber3, sequenceNumber4 );
        if( result.isSuccess( ) ) {
            aisSafetyRelatedAcknowledgmentMessageObject.setRowVersion(result.getRowVersion());
            aisSafetyRelatedAcknowledgmentMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisSafetyRelatedAcknowledgmentMessage( AisSafetyRelatedAcknowledgmentMessageObject aisSafetyRelatedAcknowledgmentMessageObject ) throws SQLException {
        Guid id = aisSafetyRelatedAcknowledgmentMessageObject.getId();
        long rowVersion = aisSafetyRelatedAcknowledgmentMessageObject.getRowVersion();
        Guid mmsi = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi();
        Guid mmsi1 = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi1();
        Guid mmsi2 = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi2();
        Guid mmsi3 = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi3();
        Guid mmsi4 = aisSafetyRelatedAcknowledgmentMessageObject.getMmsi4();
        var result = update2AisSafetyRelatedAcknowledgmentMessage( id, rowVersion, mmsi, mmsi1, mmsi2, mmsi3, mmsi4 );
        if( result.isSuccess( ) ) {
            aisSafetyRelatedAcknowledgmentMessageObject.setRowVersion(result.getRowVersion());
            aisSafetyRelatedAcknowledgmentMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisSafetyRelatedAcknowledgmentMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisSafetyRelatedAcknowledgmentMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisSafetyRelatedAcknowledgmentMessage( AisSafetyRelatedAcknowledgmentMessageObject aisSafetyRelatedAcknowledgmentMessageObject ) throws SQLException {
        var id = aisSafetyRelatedAcknowledgmentMessageObject.getId( );
        var rowVersion = aisSafetyRelatedAcknowledgmentMessageObject.getRowVersion();
        var result = deleteAisSafetyRelatedAcknowledgmentMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisStandardClassBCsPositionReportMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int reserved, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int regionalReserved, boolean isCsUnit, boolean hasDisplay, boolean hasDscCapability, boolean band, boolean canAcceptMessage22, boolean assigned, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisStandardClassBCsPositionReportMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, reserved);
            callableStatement.setDouble(8, speedOverGround);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setDouble(12, courseOverGround);
            callableStatement.setNullableInt32(13, trueHeading);
            callableStatement.setInt32(14, timestamp);
            callableStatement.setInt32(15, regionalReserved);
            callableStatement.setBoolean(16, isCsUnit);
            callableStatement.setBoolean(17, hasDisplay);
            callableStatement.setBoolean(18, hasDscCapability);
            callableStatement.setBoolean(19, band);
            callableStatement.setBoolean(20, canAcceptMessage22);
            callableStatement.setBoolean(21, assigned);
            callableStatement.setInt32(22, raim);
            callableStatement.setInt32(23, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisStandardClassBCsPositionReportMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int reserved, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int regionalReserved, boolean isCsUnit, boolean hasDisplay, boolean hasDscCapability, boolean band, boolean canAcceptMessage22, boolean assigned, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisStandardClassBCsPositionReportMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, reserved);
            callableStatement.setDouble(7, speedOverGround);
            callableStatement.setInt32(8, positionAccuracy);
            callableStatement.setDouble(9, longitude);
            callableStatement.setDouble(10, latitude);
            callableStatement.setDouble(11, courseOverGround);
            callableStatement.setNullableInt32(12, trueHeading);
            callableStatement.setInt32(13, timestamp);
            callableStatement.setInt32(14, regionalReserved);
            callableStatement.setBoolean(15, isCsUnit);
            callableStatement.setBoolean(16, hasDisplay);
            callableStatement.setBoolean(17, hasDscCapability);
            callableStatement.setBoolean(18, band);
            callableStatement.setBoolean(19, canAcceptMessage22);
            callableStatement.setBoolean(20, assigned);
            callableStatement.setInt32(21, raim);
            callableStatement.setInt32(22, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisStandardClassBCsPositionReportMessage( AisStandardClassBCsPositionReportMessageObject aisStandardClassBCsPositionReportMessageObject ) throws SQLException {
        Guid id = aisStandardClassBCsPositionReportMessageObject.getId( );
        Guid aisDevice = aisStandardClassBCsPositionReportMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisStandardClassBCsPositionReportMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisStandardClassBCsPositionReportMessageObject.getMessageSequenceNumber( );
        int repeat = aisStandardClassBCsPositionReportMessageObject.getRepeat( );
        Guid mmsi = aisStandardClassBCsPositionReportMessageObject.getMmsi( );
        int reserved = aisStandardClassBCsPositionReportMessageObject.getReserved( );
        double speedOverGround = aisStandardClassBCsPositionReportMessageObject.getSpeedOverGround( );
        int positionAccuracy = aisStandardClassBCsPositionReportMessageObject.getPositionAccuracy( );
        double longitude = aisStandardClassBCsPositionReportMessageObject.getLongitude( );
        double latitude = aisStandardClassBCsPositionReportMessageObject.getLatitude( );
        double courseOverGround = aisStandardClassBCsPositionReportMessageObject.getCourseOverGround( );
        Integer trueHeading = aisStandardClassBCsPositionReportMessageObject.getTrueHeading( );
        int timestamp = aisStandardClassBCsPositionReportMessageObject.getTimestamp( );
        int regionalReserved = aisStandardClassBCsPositionReportMessageObject.getRegionalReserved( );
        boolean isCsUnit = aisStandardClassBCsPositionReportMessageObject.getIsCsUnit( );
        boolean hasDisplay = aisStandardClassBCsPositionReportMessageObject.getHasDisplay( );
        boolean hasDscCapability = aisStandardClassBCsPositionReportMessageObject.getHasDscCapability( );
        boolean band = aisStandardClassBCsPositionReportMessageObject.getBand( );
        boolean canAcceptMessage22 = aisStandardClassBCsPositionReportMessageObject.getCanAcceptMessage22( );
        boolean assigned = aisStandardClassBCsPositionReportMessageObject.getAssigned( );
        int raim = aisStandardClassBCsPositionReportMessageObject.getRaim( );
        int radioStatus = aisStandardClassBCsPositionReportMessageObject.getRadioStatus( );
        var result = insertAisStandardClassBCsPositionReportMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, reserved, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, regionalReserved, isCsUnit, hasDisplay, hasDscCapability, band, canAcceptMessage22, assigned, raim, radioStatus );
        if( result.isSuccess() ) {
            aisStandardClassBCsPositionReportMessageObject.setId(result.getId());
            aisStandardClassBCsPositionReportMessageObject.setRowVersion(0);
            aisStandardClassBCsPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisStandardClassBCsPositionReportMessage( AisStandardClassBCsPositionReportMessageObject aisStandardClassBCsPositionReportMessageObject ) throws SQLException {
        Guid id = aisStandardClassBCsPositionReportMessageObject.getId( );
        Guid aisDevice = aisStandardClassBCsPositionReportMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisStandardClassBCsPositionReportMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisStandardClassBCsPositionReportMessageObject.getMessageSequenceNumber( );
        int repeat = aisStandardClassBCsPositionReportMessageObject.getRepeat( );
        int reserved = aisStandardClassBCsPositionReportMessageObject.getReserved( );
        double speedOverGround = aisStandardClassBCsPositionReportMessageObject.getSpeedOverGround( );
        int positionAccuracy = aisStandardClassBCsPositionReportMessageObject.getPositionAccuracy( );
        double longitude = aisStandardClassBCsPositionReportMessageObject.getLongitude( );
        double latitude = aisStandardClassBCsPositionReportMessageObject.getLatitude( );
        double courseOverGround = aisStandardClassBCsPositionReportMessageObject.getCourseOverGround( );
        Integer trueHeading = aisStandardClassBCsPositionReportMessageObject.getTrueHeading( );
        int timestamp = aisStandardClassBCsPositionReportMessageObject.getTimestamp( );
        int regionalReserved = aisStandardClassBCsPositionReportMessageObject.getRegionalReserved( );
        boolean isCsUnit = aisStandardClassBCsPositionReportMessageObject.getIsCsUnit( );
        boolean hasDisplay = aisStandardClassBCsPositionReportMessageObject.getHasDisplay( );
        boolean hasDscCapability = aisStandardClassBCsPositionReportMessageObject.getHasDscCapability( );
        boolean band = aisStandardClassBCsPositionReportMessageObject.getBand( );
        boolean canAcceptMessage22 = aisStandardClassBCsPositionReportMessageObject.getCanAcceptMessage22( );
        boolean assigned = aisStandardClassBCsPositionReportMessageObject.getAssigned( );
        int raim = aisStandardClassBCsPositionReportMessageObject.getRaim( );
        int radioStatus = aisStandardClassBCsPositionReportMessageObject.getRadioStatus( );
        var result = insert1AisStandardClassBCsPositionReportMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, reserved, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, regionalReserved, isCsUnit, hasDisplay, hasDscCapability, band, canAcceptMessage22, assigned, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisStandardClassBCsPositionReportMessageObject.setId( result.getId( ) );
            aisStandardClassBCsPositionReportMessageObject.setRowVersion(0);
            aisStandardClassBCsPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisStandardClassBCsPositionReportMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int reserved, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int regionalReserved, boolean isCsUnit, boolean hasDisplay, boolean hasDscCapability, boolean band, boolean canAcceptMessage22, boolean assigned, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStandardClassBCsPositionReportMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, reserved);
            callableStatement.setDouble(9, speedOverGround);
            callableStatement.setInt32(10, positionAccuracy);
            callableStatement.setDouble(11, longitude);
            callableStatement.setDouble(12, latitude);
            callableStatement.setDouble(13, courseOverGround);
            callableStatement.setNullableInt32(14, trueHeading);
            callableStatement.setInt32(15, timestamp);
            callableStatement.setInt32(16, regionalReserved);
            callableStatement.setBoolean(17, isCsUnit);
            callableStatement.setBoolean(18, hasDisplay);
            callableStatement.setBoolean(19, hasDscCapability);
            callableStatement.setBoolean(20, band);
            callableStatement.setBoolean(21, canAcceptMessage22);
            callableStatement.setBoolean(22, assigned);
            callableStatement.setInt32(23, raim);
            callableStatement.setInt32(24, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisStandardClassBCsPositionReportMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int reserved, double speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, Integer trueHeading, int timestamp, int regionalReserved, boolean isCsUnit, boolean hasDisplay, boolean hasDscCapability, boolean band, boolean canAcceptMessage22, boolean assigned, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStandardClassBCsPositionReportMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, reserved);
            callableStatement.setDouble(8, speedOverGround);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setDouble(12, courseOverGround);
            callableStatement.setNullableInt32(13, trueHeading);
            callableStatement.setInt32(14, timestamp);
            callableStatement.setInt32(15, regionalReserved);
            callableStatement.setBoolean(16, isCsUnit);
            callableStatement.setBoolean(17, hasDisplay);
            callableStatement.setBoolean(18, hasDscCapability);
            callableStatement.setBoolean(19, band);
            callableStatement.setBoolean(20, canAcceptMessage22);
            callableStatement.setBoolean(21, assigned);
            callableStatement.setInt32(22, raim);
            callableStatement.setInt32(23, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisStandardClassBCsPositionReportMessage( Guid id, long rowVersion, Guid mmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStandardClassBCsPositionReportMessageUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisStandardClassBCsPositionReportMessage( AisStandardClassBCsPositionReportMessageObject aisStandardClassBCsPositionReportMessageObject ) throws SQLException {
        Guid id = aisStandardClassBCsPositionReportMessageObject.getId();
        long rowVersion = aisStandardClassBCsPositionReportMessageObject.getRowVersion();
        Guid aisDevice = aisStandardClassBCsPositionReportMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisStandardClassBCsPositionReportMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisStandardClassBCsPositionReportMessageObject.getMessageSequenceNumber();
        int repeat = aisStandardClassBCsPositionReportMessageObject.getRepeat();
        Guid mmsi = aisStandardClassBCsPositionReportMessageObject.getMmsi();
        int reserved = aisStandardClassBCsPositionReportMessageObject.getReserved();
        double speedOverGround = aisStandardClassBCsPositionReportMessageObject.getSpeedOverGround();
        int positionAccuracy = aisStandardClassBCsPositionReportMessageObject.getPositionAccuracy();
        double longitude = aisStandardClassBCsPositionReportMessageObject.getLongitude();
        double latitude = aisStandardClassBCsPositionReportMessageObject.getLatitude();
        double courseOverGround = aisStandardClassBCsPositionReportMessageObject.getCourseOverGround();
        Integer trueHeading = aisStandardClassBCsPositionReportMessageObject.getTrueHeading();
        int timestamp = aisStandardClassBCsPositionReportMessageObject.getTimestamp();
        int regionalReserved = aisStandardClassBCsPositionReportMessageObject.getRegionalReserved();
        boolean isCsUnit = aisStandardClassBCsPositionReportMessageObject.getIsCsUnit();
        boolean hasDisplay = aisStandardClassBCsPositionReportMessageObject.getHasDisplay();
        boolean hasDscCapability = aisStandardClassBCsPositionReportMessageObject.getHasDscCapability();
        boolean band = aisStandardClassBCsPositionReportMessageObject.getBand();
        boolean canAcceptMessage22 = aisStandardClassBCsPositionReportMessageObject.getCanAcceptMessage22();
        boolean assigned = aisStandardClassBCsPositionReportMessageObject.getAssigned();
        int raim = aisStandardClassBCsPositionReportMessageObject.getRaim();
        int radioStatus = aisStandardClassBCsPositionReportMessageObject.getRadioStatus();
        var result = updateAisStandardClassBCsPositionReportMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, reserved, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, regionalReserved, isCsUnit, hasDisplay, hasDscCapability, band, canAcceptMessage22, assigned, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisStandardClassBCsPositionReportMessageObject.setRowVersion(result.getRowVersion());
            aisStandardClassBCsPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisStandardClassBCsPositionReportMessage( AisStandardClassBCsPositionReportMessageObject aisStandardClassBCsPositionReportMessageObject ) throws SQLException {
        Guid id = aisStandardClassBCsPositionReportMessageObject.getId();
        long rowVersion = aisStandardClassBCsPositionReportMessageObject.getRowVersion();
        Guid aisDevice = aisStandardClassBCsPositionReportMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisStandardClassBCsPositionReportMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisStandardClassBCsPositionReportMessageObject.getMessageSequenceNumber();
        int repeat = aisStandardClassBCsPositionReportMessageObject.getRepeat();
        int reserved = aisStandardClassBCsPositionReportMessageObject.getReserved();
        double speedOverGround = aisStandardClassBCsPositionReportMessageObject.getSpeedOverGround();
        int positionAccuracy = aisStandardClassBCsPositionReportMessageObject.getPositionAccuracy();
        double longitude = aisStandardClassBCsPositionReportMessageObject.getLongitude();
        double latitude = aisStandardClassBCsPositionReportMessageObject.getLatitude();
        double courseOverGround = aisStandardClassBCsPositionReportMessageObject.getCourseOverGround();
        Integer trueHeading = aisStandardClassBCsPositionReportMessageObject.getTrueHeading();
        int timestamp = aisStandardClassBCsPositionReportMessageObject.getTimestamp();
        int regionalReserved = aisStandardClassBCsPositionReportMessageObject.getRegionalReserved();
        boolean isCsUnit = aisStandardClassBCsPositionReportMessageObject.getIsCsUnit();
        boolean hasDisplay = aisStandardClassBCsPositionReportMessageObject.getHasDisplay();
        boolean hasDscCapability = aisStandardClassBCsPositionReportMessageObject.getHasDscCapability();
        boolean band = aisStandardClassBCsPositionReportMessageObject.getBand();
        boolean canAcceptMessage22 = aisStandardClassBCsPositionReportMessageObject.getCanAcceptMessage22();
        boolean assigned = aisStandardClassBCsPositionReportMessageObject.getAssigned();
        int raim = aisStandardClassBCsPositionReportMessageObject.getRaim();
        int radioStatus = aisStandardClassBCsPositionReportMessageObject.getRadioStatus();
        var result = update1AisStandardClassBCsPositionReportMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, reserved, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, trueHeading, timestamp, regionalReserved, isCsUnit, hasDisplay, hasDscCapability, band, canAcceptMessage22, assigned, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisStandardClassBCsPositionReportMessageObject.setRowVersion(result.getRowVersion());
            aisStandardClassBCsPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisStandardClassBCsPositionReportMessage( AisStandardClassBCsPositionReportMessageObject aisStandardClassBCsPositionReportMessageObject ) throws SQLException {
        Guid id = aisStandardClassBCsPositionReportMessageObject.getId();
        long rowVersion = aisStandardClassBCsPositionReportMessageObject.getRowVersion();
        Guid mmsi = aisStandardClassBCsPositionReportMessageObject.getMmsi();
        var result = update2AisStandardClassBCsPositionReportMessage( id, rowVersion, mmsi );
        if( result.isSuccess( ) ) {
            aisStandardClassBCsPositionReportMessageObject.setRowVersion(result.getRowVersion());
            aisStandardClassBCsPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisStandardClassBCsPositionReportMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisStandardClassBCsPositionReportMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisStandardClassBCsPositionReportMessage( AisStandardClassBCsPositionReportMessageObject aisStandardClassBCsPositionReportMessageObject ) throws SQLException {
        var id = aisStandardClassBCsPositionReportMessageObject.getId( );
        var rowVersion = aisStandardClassBCsPositionReportMessageObject.getRowVersion();
        var result = deleteAisStandardClassBCsPositionReportMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisStandardSarAircraftPositionReportMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int altitude, int speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, int timestamp, int reserved, boolean dataTerminalReady, int spare, boolean assigned, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisStandardSarAircraftPositionReportMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, altitude);
            callableStatement.setInt32(8, speedOverGround);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setDouble(12, courseOverGround);
            callableStatement.setInt32(13, timestamp);
            callableStatement.setInt32(14, reserved);
            callableStatement.setBoolean(15, dataTerminalReady);
            callableStatement.setInt32(16, spare);
            callableStatement.setBoolean(17, assigned);
            callableStatement.setInt32(18, raim);
            callableStatement.setInt32(19, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisStandardSarAircraftPositionReportMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int altitude, int speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, int timestamp, int reserved, boolean dataTerminalReady, int spare, boolean assigned, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisStandardSarAircraftPositionReportMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, altitude);
            callableStatement.setInt32(7, speedOverGround);
            callableStatement.setInt32(8, positionAccuracy);
            callableStatement.setDouble(9, longitude);
            callableStatement.setDouble(10, latitude);
            callableStatement.setDouble(11, courseOverGround);
            callableStatement.setInt32(12, timestamp);
            callableStatement.setInt32(13, reserved);
            callableStatement.setBoolean(14, dataTerminalReady);
            callableStatement.setInt32(15, spare);
            callableStatement.setBoolean(16, assigned);
            callableStatement.setInt32(17, raim);
            callableStatement.setInt32(18, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisStandardSarAircraftPositionReportMessage( AisStandardSarAircraftPositionReportMessageObject aisStandardSarAircraftPositionReportMessageObject ) throws SQLException {
        Guid id = aisStandardSarAircraftPositionReportMessageObject.getId( );
        Guid aisDevice = aisStandardSarAircraftPositionReportMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisStandardSarAircraftPositionReportMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisStandardSarAircraftPositionReportMessageObject.getMessageSequenceNumber( );
        int repeat = aisStandardSarAircraftPositionReportMessageObject.getRepeat( );
        Guid mmsi = aisStandardSarAircraftPositionReportMessageObject.getMmsi( );
        int altitude = aisStandardSarAircraftPositionReportMessageObject.getAltitude( );
        int speedOverGround = aisStandardSarAircraftPositionReportMessageObject.getSpeedOverGround( );
        int positionAccuracy = aisStandardSarAircraftPositionReportMessageObject.getPositionAccuracy( );
        double longitude = aisStandardSarAircraftPositionReportMessageObject.getLongitude( );
        double latitude = aisStandardSarAircraftPositionReportMessageObject.getLatitude( );
        double courseOverGround = aisStandardSarAircraftPositionReportMessageObject.getCourseOverGround( );
        int timestamp = aisStandardSarAircraftPositionReportMessageObject.getTimestamp( );
        int reserved = aisStandardSarAircraftPositionReportMessageObject.getReserved( );
        boolean dataTerminalReady = aisStandardSarAircraftPositionReportMessageObject.getDataTerminalReady( );
        int spare = aisStandardSarAircraftPositionReportMessageObject.getSpare( );
        boolean assigned = aisStandardSarAircraftPositionReportMessageObject.getAssigned( );
        int raim = aisStandardSarAircraftPositionReportMessageObject.getRaim( );
        int radioStatus = aisStandardSarAircraftPositionReportMessageObject.getRadioStatus( );
        var result = insertAisStandardSarAircraftPositionReportMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, altitude, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, timestamp, reserved, dataTerminalReady, spare, assigned, raim, radioStatus );
        if( result.isSuccess() ) {
            aisStandardSarAircraftPositionReportMessageObject.setId(result.getId());
            aisStandardSarAircraftPositionReportMessageObject.setRowVersion(0);
            aisStandardSarAircraftPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisStandardSarAircraftPositionReportMessage( AisStandardSarAircraftPositionReportMessageObject aisStandardSarAircraftPositionReportMessageObject ) throws SQLException {
        Guid id = aisStandardSarAircraftPositionReportMessageObject.getId( );
        Guid aisDevice = aisStandardSarAircraftPositionReportMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisStandardSarAircraftPositionReportMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisStandardSarAircraftPositionReportMessageObject.getMessageSequenceNumber( );
        int repeat = aisStandardSarAircraftPositionReportMessageObject.getRepeat( );
        int altitude = aisStandardSarAircraftPositionReportMessageObject.getAltitude( );
        int speedOverGround = aisStandardSarAircraftPositionReportMessageObject.getSpeedOverGround( );
        int positionAccuracy = aisStandardSarAircraftPositionReportMessageObject.getPositionAccuracy( );
        double longitude = aisStandardSarAircraftPositionReportMessageObject.getLongitude( );
        double latitude = aisStandardSarAircraftPositionReportMessageObject.getLatitude( );
        double courseOverGround = aisStandardSarAircraftPositionReportMessageObject.getCourseOverGround( );
        int timestamp = aisStandardSarAircraftPositionReportMessageObject.getTimestamp( );
        int reserved = aisStandardSarAircraftPositionReportMessageObject.getReserved( );
        boolean dataTerminalReady = aisStandardSarAircraftPositionReportMessageObject.getDataTerminalReady( );
        int spare = aisStandardSarAircraftPositionReportMessageObject.getSpare( );
        boolean assigned = aisStandardSarAircraftPositionReportMessageObject.getAssigned( );
        int raim = aisStandardSarAircraftPositionReportMessageObject.getRaim( );
        int radioStatus = aisStandardSarAircraftPositionReportMessageObject.getRadioStatus( );
        var result = insert1AisStandardSarAircraftPositionReportMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, altitude, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, timestamp, reserved, dataTerminalReady, spare, assigned, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisStandardSarAircraftPositionReportMessageObject.setId( result.getId( ) );
            aisStandardSarAircraftPositionReportMessageObject.setRowVersion(0);
            aisStandardSarAircraftPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisStandardSarAircraftPositionReportMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int altitude, int speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, int timestamp, int reserved, boolean dataTerminalReady, int spare, boolean assigned, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStandardSarAircraftPositionReportMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, altitude);
            callableStatement.setInt32(9, speedOverGround);
            callableStatement.setInt32(10, positionAccuracy);
            callableStatement.setDouble(11, longitude);
            callableStatement.setDouble(12, latitude);
            callableStatement.setDouble(13, courseOverGround);
            callableStatement.setInt32(14, timestamp);
            callableStatement.setInt32(15, reserved);
            callableStatement.setBoolean(16, dataTerminalReady);
            callableStatement.setInt32(17, spare);
            callableStatement.setBoolean(18, assigned);
            callableStatement.setInt32(19, raim);
            callableStatement.setInt32(20, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisStandardSarAircraftPositionReportMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int altitude, int speedOverGround, int positionAccuracy, double longitude, double latitude, double courseOverGround, int timestamp, int reserved, boolean dataTerminalReady, int spare, boolean assigned, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStandardSarAircraftPositionReportMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, altitude);
            callableStatement.setInt32(8, speedOverGround);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setDouble(12, courseOverGround);
            callableStatement.setInt32(13, timestamp);
            callableStatement.setInt32(14, reserved);
            callableStatement.setBoolean(15, dataTerminalReady);
            callableStatement.setInt32(16, spare);
            callableStatement.setBoolean(17, assigned);
            callableStatement.setInt32(18, raim);
            callableStatement.setInt32(19, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisStandardSarAircraftPositionReportMessage( Guid id, long rowVersion, Guid mmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStandardSarAircraftPositionReportMessageUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisStandardSarAircraftPositionReportMessage( AisStandardSarAircraftPositionReportMessageObject aisStandardSarAircraftPositionReportMessageObject ) throws SQLException {
        Guid id = aisStandardSarAircraftPositionReportMessageObject.getId();
        long rowVersion = aisStandardSarAircraftPositionReportMessageObject.getRowVersion();
        Guid aisDevice = aisStandardSarAircraftPositionReportMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisStandardSarAircraftPositionReportMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisStandardSarAircraftPositionReportMessageObject.getMessageSequenceNumber();
        int repeat = aisStandardSarAircraftPositionReportMessageObject.getRepeat();
        Guid mmsi = aisStandardSarAircraftPositionReportMessageObject.getMmsi();
        int altitude = aisStandardSarAircraftPositionReportMessageObject.getAltitude();
        int speedOverGround = aisStandardSarAircraftPositionReportMessageObject.getSpeedOverGround();
        int positionAccuracy = aisStandardSarAircraftPositionReportMessageObject.getPositionAccuracy();
        double longitude = aisStandardSarAircraftPositionReportMessageObject.getLongitude();
        double latitude = aisStandardSarAircraftPositionReportMessageObject.getLatitude();
        double courseOverGround = aisStandardSarAircraftPositionReportMessageObject.getCourseOverGround();
        int timestamp = aisStandardSarAircraftPositionReportMessageObject.getTimestamp();
        int reserved = aisStandardSarAircraftPositionReportMessageObject.getReserved();
        boolean dataTerminalReady = aisStandardSarAircraftPositionReportMessageObject.getDataTerminalReady();
        int spare = aisStandardSarAircraftPositionReportMessageObject.getSpare();
        boolean assigned = aisStandardSarAircraftPositionReportMessageObject.getAssigned();
        int raim = aisStandardSarAircraftPositionReportMessageObject.getRaim();
        int radioStatus = aisStandardSarAircraftPositionReportMessageObject.getRadioStatus();
        var result = updateAisStandardSarAircraftPositionReportMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, altitude, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, timestamp, reserved, dataTerminalReady, spare, assigned, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisStandardSarAircraftPositionReportMessageObject.setRowVersion(result.getRowVersion());
            aisStandardSarAircraftPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisStandardSarAircraftPositionReportMessage( AisStandardSarAircraftPositionReportMessageObject aisStandardSarAircraftPositionReportMessageObject ) throws SQLException {
        Guid id = aisStandardSarAircraftPositionReportMessageObject.getId();
        long rowVersion = aisStandardSarAircraftPositionReportMessageObject.getRowVersion();
        Guid aisDevice = aisStandardSarAircraftPositionReportMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisStandardSarAircraftPositionReportMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisStandardSarAircraftPositionReportMessageObject.getMessageSequenceNumber();
        int repeat = aisStandardSarAircraftPositionReportMessageObject.getRepeat();
        int altitude = aisStandardSarAircraftPositionReportMessageObject.getAltitude();
        int speedOverGround = aisStandardSarAircraftPositionReportMessageObject.getSpeedOverGround();
        int positionAccuracy = aisStandardSarAircraftPositionReportMessageObject.getPositionAccuracy();
        double longitude = aisStandardSarAircraftPositionReportMessageObject.getLongitude();
        double latitude = aisStandardSarAircraftPositionReportMessageObject.getLatitude();
        double courseOverGround = aisStandardSarAircraftPositionReportMessageObject.getCourseOverGround();
        int timestamp = aisStandardSarAircraftPositionReportMessageObject.getTimestamp();
        int reserved = aisStandardSarAircraftPositionReportMessageObject.getReserved();
        boolean dataTerminalReady = aisStandardSarAircraftPositionReportMessageObject.getDataTerminalReady();
        int spare = aisStandardSarAircraftPositionReportMessageObject.getSpare();
        boolean assigned = aisStandardSarAircraftPositionReportMessageObject.getAssigned();
        int raim = aisStandardSarAircraftPositionReportMessageObject.getRaim();
        int radioStatus = aisStandardSarAircraftPositionReportMessageObject.getRadioStatus();
        var result = update1AisStandardSarAircraftPositionReportMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, altitude, speedOverGround, positionAccuracy, longitude, latitude, courseOverGround, timestamp, reserved, dataTerminalReady, spare, assigned, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisStandardSarAircraftPositionReportMessageObject.setRowVersion(result.getRowVersion());
            aisStandardSarAircraftPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisStandardSarAircraftPositionReportMessage( AisStandardSarAircraftPositionReportMessageObject aisStandardSarAircraftPositionReportMessageObject ) throws SQLException {
        Guid id = aisStandardSarAircraftPositionReportMessageObject.getId();
        long rowVersion = aisStandardSarAircraftPositionReportMessageObject.getRowVersion();
        Guid mmsi = aisStandardSarAircraftPositionReportMessageObject.getMmsi();
        var result = update2AisStandardSarAircraftPositionReportMessage( id, rowVersion, mmsi );
        if( result.isSuccess( ) ) {
            aisStandardSarAircraftPositionReportMessageObject.setRowVersion(result.getRowVersion());
            aisStandardSarAircraftPositionReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisStandardSarAircraftPositionReportMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisStandardSarAircraftPositionReportMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisStandardSarAircraftPositionReportMessage( AisStandardSarAircraftPositionReportMessageObject aisStandardSarAircraftPositionReportMessageObject ) throws SQLException {
        var id = aisStandardSarAircraftPositionReportMessageObject.getId( );
        var rowVersion = aisStandardSarAircraftPositionReportMessageObject.getRowVersion();
        var result = deleteAisStandardSarAircraftPositionReportMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisStaticAndVoyageRelatedDataMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int aisVersion, Guid imoNumber, Guid callsign, Guid shipName, int shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, DateTime estimatedTimeOfArrival, double draught, String destination, boolean dataTerminalReady, int spare ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisStaticAndVoyageRelatedDataMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, aisVersion);
            callableStatement.setNullableGuid(8, imoNumber);
            callableStatement.setNullableGuid(9, callsign);
            callableStatement.setNullableGuid(10, shipName);
            callableStatement.setInt32(11, shipType);
            callableStatement.setInt32(12, dimensionToBow);
            callableStatement.setInt32(13, dimensionToStern);
            callableStatement.setInt32(14, dimensionToPort);
            callableStatement.setInt32(15, dimensionToStarboard);
            callableStatement.setInt32(16, positionFixType);
            callableStatement.setLongFromNullableDateTime(17, estimatedTimeOfArrival);
            callableStatement.setDouble(18, draught);
            callableStatement.setString(19, destination);
            callableStatement.setBoolean(20, dataTerminalReady);
            callableStatement.setInt32(21, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisStaticAndVoyageRelatedDataMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int aisVersion, int shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, DateTime estimatedTimeOfArrival, double draught, String destination, boolean dataTerminalReady, int spare ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisStaticAndVoyageRelatedDataMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, aisVersion);
            callableStatement.setInt32(7, shipType);
            callableStatement.setInt32(8, dimensionToBow);
            callableStatement.setInt32(9, dimensionToStern);
            callableStatement.setInt32(10, dimensionToPort);
            callableStatement.setInt32(11, dimensionToStarboard);
            callableStatement.setInt32(12, positionFixType);
            callableStatement.setLongFromNullableDateTime(13, estimatedTimeOfArrival);
            callableStatement.setDouble(14, draught);
            callableStatement.setString(15, destination);
            callableStatement.setBoolean(16, dataTerminalReady);
            callableStatement.setInt32(17, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisStaticAndVoyageRelatedDataMessage( AisStaticAndVoyageRelatedDataMessageObject aisStaticAndVoyageRelatedDataMessageObject ) throws SQLException {
        Guid id = aisStaticAndVoyageRelatedDataMessageObject.getId( );
        Guid aisDevice = aisStaticAndVoyageRelatedDataMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisStaticAndVoyageRelatedDataMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisStaticAndVoyageRelatedDataMessageObject.getMessageSequenceNumber( );
        int repeat = aisStaticAndVoyageRelatedDataMessageObject.getRepeat( );
        Guid mmsi = aisStaticAndVoyageRelatedDataMessageObject.getMmsi( );
        int aisVersion = aisStaticAndVoyageRelatedDataMessageObject.getAisVersion( );
        Guid imoNumber = aisStaticAndVoyageRelatedDataMessageObject.getImoNumber( );
        Guid callsign = aisStaticAndVoyageRelatedDataMessageObject.getCallsign( );
        Guid shipName = aisStaticAndVoyageRelatedDataMessageObject.getShipName( );
        int shipType = aisStaticAndVoyageRelatedDataMessageObject.getShipType( );
        int dimensionToBow = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToBow( );
        int dimensionToStern = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToStern( );
        int dimensionToPort = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToPort( );
        int dimensionToStarboard = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToStarboard( );
        int positionFixType = aisStaticAndVoyageRelatedDataMessageObject.getPositionFixType( );
        DateTime estimatedTimeOfArrival = aisStaticAndVoyageRelatedDataMessageObject.getEstimatedTimeOfArrival( );
        double draught = aisStaticAndVoyageRelatedDataMessageObject.getDraught( );
        String destination = aisStaticAndVoyageRelatedDataMessageObject.getDestination( );
        boolean dataTerminalReady = aisStaticAndVoyageRelatedDataMessageObject.getDataTerminalReady( );
        int spare = aisStaticAndVoyageRelatedDataMessageObject.getSpare( );
        var result = insertAisStaticAndVoyageRelatedDataMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, aisVersion, imoNumber, callsign, shipName, shipType, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, estimatedTimeOfArrival, draught, destination, dataTerminalReady, spare );
        if( result.isSuccess() ) {
            aisStaticAndVoyageRelatedDataMessageObject.setId(result.getId());
            aisStaticAndVoyageRelatedDataMessageObject.setRowVersion(0);
            aisStaticAndVoyageRelatedDataMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisStaticAndVoyageRelatedDataMessage( AisStaticAndVoyageRelatedDataMessageObject aisStaticAndVoyageRelatedDataMessageObject ) throws SQLException {
        Guid id = aisStaticAndVoyageRelatedDataMessageObject.getId( );
        Guid aisDevice = aisStaticAndVoyageRelatedDataMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisStaticAndVoyageRelatedDataMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisStaticAndVoyageRelatedDataMessageObject.getMessageSequenceNumber( );
        int repeat = aisStaticAndVoyageRelatedDataMessageObject.getRepeat( );
        int aisVersion = aisStaticAndVoyageRelatedDataMessageObject.getAisVersion( );
        int shipType = aisStaticAndVoyageRelatedDataMessageObject.getShipType( );
        int dimensionToBow = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToBow( );
        int dimensionToStern = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToStern( );
        int dimensionToPort = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToPort( );
        int dimensionToStarboard = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToStarboard( );
        int positionFixType = aisStaticAndVoyageRelatedDataMessageObject.getPositionFixType( );
        DateTime estimatedTimeOfArrival = aisStaticAndVoyageRelatedDataMessageObject.getEstimatedTimeOfArrival( );
        double draught = aisStaticAndVoyageRelatedDataMessageObject.getDraught( );
        String destination = aisStaticAndVoyageRelatedDataMessageObject.getDestination( );
        boolean dataTerminalReady = aisStaticAndVoyageRelatedDataMessageObject.getDataTerminalReady( );
        int spare = aisStaticAndVoyageRelatedDataMessageObject.getSpare( );
        var result = insert1AisStaticAndVoyageRelatedDataMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, aisVersion, shipType, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, estimatedTimeOfArrival, draught, destination, dataTerminalReady, spare );
        if( result.isSuccess( ) ) {
            aisStaticAndVoyageRelatedDataMessageObject.setId( result.getId( ) );
            aisStaticAndVoyageRelatedDataMessageObject.setRowVersion(0);
            aisStaticAndVoyageRelatedDataMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisStaticAndVoyageRelatedDataMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int aisVersion, Guid imoNumber, Guid callsign, Guid shipName, int shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, DateTime estimatedTimeOfArrival, double draught, String destination, boolean dataTerminalReady, int spare ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStaticAndVoyageRelatedDataMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, aisVersion);
            callableStatement.setNullableGuid(9, imoNumber);
            callableStatement.setNullableGuid(10, callsign);
            callableStatement.setNullableGuid(11, shipName);
            callableStatement.setInt32(12, shipType);
            callableStatement.setInt32(13, dimensionToBow);
            callableStatement.setInt32(14, dimensionToStern);
            callableStatement.setInt32(15, dimensionToPort);
            callableStatement.setInt32(16, dimensionToStarboard);
            callableStatement.setInt32(17, positionFixType);
            callableStatement.setLongFromNullableDateTime(18, estimatedTimeOfArrival);
            callableStatement.setDouble(19, draught);
            callableStatement.setString(20, destination);
            callableStatement.setBoolean(21, dataTerminalReady);
            callableStatement.setInt32(22, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisStaticAndVoyageRelatedDataMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int aisVersion, int shipType, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, DateTime estimatedTimeOfArrival, double draught, String destination, boolean dataTerminalReady, int spare ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStaticAndVoyageRelatedDataMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, aisVersion);
            callableStatement.setInt32(8, shipType);
            callableStatement.setInt32(9, dimensionToBow);
            callableStatement.setInt32(10, dimensionToStern);
            callableStatement.setInt32(11, dimensionToPort);
            callableStatement.setInt32(12, dimensionToStarboard);
            callableStatement.setInt32(13, positionFixType);
            callableStatement.setLongFromNullableDateTime(14, estimatedTimeOfArrival);
            callableStatement.setDouble(15, draught);
            callableStatement.setString(16, destination);
            callableStatement.setBoolean(17, dataTerminalReady);
            callableStatement.setInt32(18, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisStaticAndVoyageRelatedDataMessage( Guid id, long rowVersion, Guid mmsi, Guid imoNumber, Guid callsign, Guid shipName ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStaticAndVoyageRelatedDataMessageUpdate2(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.setNullableGuid(4, imoNumber);
            callableStatement.setNullableGuid(5, callsign);
            callableStatement.setNullableGuid(6, shipName);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisStaticAndVoyageRelatedDataMessage( AisStaticAndVoyageRelatedDataMessageObject aisStaticAndVoyageRelatedDataMessageObject ) throws SQLException {
        Guid id = aisStaticAndVoyageRelatedDataMessageObject.getId();
        long rowVersion = aisStaticAndVoyageRelatedDataMessageObject.getRowVersion();
        Guid aisDevice = aisStaticAndVoyageRelatedDataMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisStaticAndVoyageRelatedDataMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisStaticAndVoyageRelatedDataMessageObject.getMessageSequenceNumber();
        int repeat = aisStaticAndVoyageRelatedDataMessageObject.getRepeat();
        Guid mmsi = aisStaticAndVoyageRelatedDataMessageObject.getMmsi();
        int aisVersion = aisStaticAndVoyageRelatedDataMessageObject.getAisVersion();
        Guid imoNumber = aisStaticAndVoyageRelatedDataMessageObject.getImoNumber();
        Guid callsign = aisStaticAndVoyageRelatedDataMessageObject.getCallsign();
        Guid shipName = aisStaticAndVoyageRelatedDataMessageObject.getShipName();
        int shipType = aisStaticAndVoyageRelatedDataMessageObject.getShipType();
        int dimensionToBow = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToBow();
        int dimensionToStern = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToStern();
        int dimensionToPort = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToPort();
        int dimensionToStarboard = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToStarboard();
        int positionFixType = aisStaticAndVoyageRelatedDataMessageObject.getPositionFixType();
        DateTime estimatedTimeOfArrival = aisStaticAndVoyageRelatedDataMessageObject.getEstimatedTimeOfArrival();
        double draught = aisStaticAndVoyageRelatedDataMessageObject.getDraught();
        String destination = aisStaticAndVoyageRelatedDataMessageObject.getDestination();
        boolean dataTerminalReady = aisStaticAndVoyageRelatedDataMessageObject.getDataTerminalReady();
        int spare = aisStaticAndVoyageRelatedDataMessageObject.getSpare();
        var result = updateAisStaticAndVoyageRelatedDataMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, aisVersion, imoNumber, callsign, shipName, shipType, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, estimatedTimeOfArrival, draught, destination, dataTerminalReady, spare );
        if( result.isSuccess( ) ) {
            aisStaticAndVoyageRelatedDataMessageObject.setRowVersion(result.getRowVersion());
            aisStaticAndVoyageRelatedDataMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisStaticAndVoyageRelatedDataMessage( AisStaticAndVoyageRelatedDataMessageObject aisStaticAndVoyageRelatedDataMessageObject ) throws SQLException {
        Guid id = aisStaticAndVoyageRelatedDataMessageObject.getId();
        long rowVersion = aisStaticAndVoyageRelatedDataMessageObject.getRowVersion();
        Guid aisDevice = aisStaticAndVoyageRelatedDataMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisStaticAndVoyageRelatedDataMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisStaticAndVoyageRelatedDataMessageObject.getMessageSequenceNumber();
        int repeat = aisStaticAndVoyageRelatedDataMessageObject.getRepeat();
        int aisVersion = aisStaticAndVoyageRelatedDataMessageObject.getAisVersion();
        int shipType = aisStaticAndVoyageRelatedDataMessageObject.getShipType();
        int dimensionToBow = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToBow();
        int dimensionToStern = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToStern();
        int dimensionToPort = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToPort();
        int dimensionToStarboard = aisStaticAndVoyageRelatedDataMessageObject.getDimensionToStarboard();
        int positionFixType = aisStaticAndVoyageRelatedDataMessageObject.getPositionFixType();
        DateTime estimatedTimeOfArrival = aisStaticAndVoyageRelatedDataMessageObject.getEstimatedTimeOfArrival();
        double draught = aisStaticAndVoyageRelatedDataMessageObject.getDraught();
        String destination = aisStaticAndVoyageRelatedDataMessageObject.getDestination();
        boolean dataTerminalReady = aisStaticAndVoyageRelatedDataMessageObject.getDataTerminalReady();
        int spare = aisStaticAndVoyageRelatedDataMessageObject.getSpare();
        var result = update1AisStaticAndVoyageRelatedDataMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, aisVersion, shipType, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, estimatedTimeOfArrival, draught, destination, dataTerminalReady, spare );
        if( result.isSuccess( ) ) {
            aisStaticAndVoyageRelatedDataMessageObject.setRowVersion(result.getRowVersion());
            aisStaticAndVoyageRelatedDataMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisStaticAndVoyageRelatedDataMessage( AisStaticAndVoyageRelatedDataMessageObject aisStaticAndVoyageRelatedDataMessageObject ) throws SQLException {
        Guid id = aisStaticAndVoyageRelatedDataMessageObject.getId();
        long rowVersion = aisStaticAndVoyageRelatedDataMessageObject.getRowVersion();
        Guid mmsi = aisStaticAndVoyageRelatedDataMessageObject.getMmsi();
        Guid imoNumber = aisStaticAndVoyageRelatedDataMessageObject.getImoNumber();
        Guid callsign = aisStaticAndVoyageRelatedDataMessageObject.getCallsign();
        Guid shipName = aisStaticAndVoyageRelatedDataMessageObject.getShipName();
        var result = update2AisStaticAndVoyageRelatedDataMessage( id, rowVersion, mmsi, imoNumber, callsign, shipName );
        if( result.isSuccess( ) ) {
            aisStaticAndVoyageRelatedDataMessageObject.setRowVersion(result.getRowVersion());
            aisStaticAndVoyageRelatedDataMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisStaticAndVoyageRelatedDataMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisStaticAndVoyageRelatedDataMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisStaticAndVoyageRelatedDataMessage( AisStaticAndVoyageRelatedDataMessageObject aisStaticAndVoyageRelatedDataMessageObject ) throws SQLException {
        var id = aisStaticAndVoyageRelatedDataMessageObject.getId( );
        var rowVersion = aisStaticAndVoyageRelatedDataMessageObject.getRowVersion();
        var result = deleteAisStaticAndVoyageRelatedDataMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisStaticDataReportMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisStaticDataReportMessageInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, partNumber);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisStaticDataReportMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int partNumber ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisStaticDataReportMessageInsert1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, partNumber);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisStaticDataReportMessage( AisStaticDataReportMessageObject aisStaticDataReportMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportMessageObject.getId( );
        Guid aisDevice = aisStaticDataReportMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisStaticDataReportMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisStaticDataReportMessageObject.getMessageSequenceNumber( );
        int repeat = aisStaticDataReportMessageObject.getRepeat( );
        Guid mmsi = aisStaticDataReportMessageObject.getMmsi( );
        int partNumber = aisStaticDataReportMessageObject.getPartNumber( );
        var result = insertAisStaticDataReportMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, partNumber );
        if( result.isSuccess() ) {
            aisStaticDataReportMessageObject.setId(result.getId());
            aisStaticDataReportMessageObject.setRowVersion(0);
            aisStaticDataReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisStaticDataReportMessage( AisStaticDataReportMessageObject aisStaticDataReportMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportMessageObject.getId( );
        Guid aisDevice = aisStaticDataReportMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisStaticDataReportMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisStaticDataReportMessageObject.getMessageSequenceNumber( );
        int repeat = aisStaticDataReportMessageObject.getRepeat( );
        int partNumber = aisStaticDataReportMessageObject.getPartNumber( );
        var result = insert1AisStaticDataReportMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, partNumber );
        if( result.isSuccess( ) ) {
            aisStaticDataReportMessageObject.setId( result.getId( ) );
            aisStaticDataReportMessageObject.setRowVersion(0);
            aisStaticDataReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisStaticDataReportMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStaticDataReportMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, partNumber);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisStaticDataReportMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int partNumber ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStaticDataReportMessageUpdate1(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, partNumber);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisStaticDataReportMessage( Guid id, long rowVersion, Guid mmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStaticDataReportMessageUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisStaticDataReportMessage( AisStaticDataReportMessageObject aisStaticDataReportMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportMessageObject.getId();
        long rowVersion = aisStaticDataReportMessageObject.getRowVersion();
        Guid aisDevice = aisStaticDataReportMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisStaticDataReportMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisStaticDataReportMessageObject.getMessageSequenceNumber();
        int repeat = aisStaticDataReportMessageObject.getRepeat();
        Guid mmsi = aisStaticDataReportMessageObject.getMmsi();
        int partNumber = aisStaticDataReportMessageObject.getPartNumber();
        var result = updateAisStaticDataReportMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, partNumber );
        if( result.isSuccess( ) ) {
            aisStaticDataReportMessageObject.setRowVersion(result.getRowVersion());
            aisStaticDataReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisStaticDataReportMessage( AisStaticDataReportMessageObject aisStaticDataReportMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportMessageObject.getId();
        long rowVersion = aisStaticDataReportMessageObject.getRowVersion();
        Guid aisDevice = aisStaticDataReportMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisStaticDataReportMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisStaticDataReportMessageObject.getMessageSequenceNumber();
        int repeat = aisStaticDataReportMessageObject.getRepeat();
        int partNumber = aisStaticDataReportMessageObject.getPartNumber();
        var result = update1AisStaticDataReportMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, partNumber );
        if( result.isSuccess( ) ) {
            aisStaticDataReportMessageObject.setRowVersion(result.getRowVersion());
            aisStaticDataReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisStaticDataReportMessage( AisStaticDataReportMessageObject aisStaticDataReportMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportMessageObject.getId();
        long rowVersion = aisStaticDataReportMessageObject.getRowVersion();
        Guid mmsi = aisStaticDataReportMessageObject.getMmsi();
        var result = update2AisStaticDataReportMessage( id, rowVersion, mmsi );
        if( result.isSuccess( ) ) {
            aisStaticDataReportMessageObject.setRowVersion(result.getRowVersion());
            aisStaticDataReportMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisStaticDataReportMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisStaticDataReportMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisStaticDataReportMessage( AisStaticDataReportMessageObject aisStaticDataReportMessageObject ) throws SQLException {
        var id = aisStaticDataReportMessageObject.getId( );
        var rowVersion = aisStaticDataReportMessageObject.getRowVersion();
        var result = deleteAisStaticDataReportMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisStaticDataReportPartAMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber, Guid shipName, int spare ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisStaticDataReportPartAMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, partNumber);
            callableStatement.setNullableGuid(8, shipName);
            callableStatement.setInt32(9, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisStaticDataReportPartAMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int partNumber, int spare ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisStaticDataReportPartAMessageInsert1(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, partNumber);
            callableStatement.setInt32(7, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisStaticDataReportPartAMessage( AisStaticDataReportPartAMessageObject aisStaticDataReportPartAMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportPartAMessageObject.getId( );
        Guid aisDevice = aisStaticDataReportPartAMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisStaticDataReportPartAMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisStaticDataReportPartAMessageObject.getMessageSequenceNumber( );
        int repeat = aisStaticDataReportPartAMessageObject.getRepeat( );
        Guid mmsi = aisStaticDataReportPartAMessageObject.getMmsi( );
        int partNumber = aisStaticDataReportPartAMessageObject.getPartNumber( );
        Guid shipName = aisStaticDataReportPartAMessageObject.getShipName( );
        int spare = aisStaticDataReportPartAMessageObject.getSpare( );
        var result = insertAisStaticDataReportPartAMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, partNumber, shipName, spare );
        if( result.isSuccess() ) {
            aisStaticDataReportPartAMessageObject.setId(result.getId());
            aisStaticDataReportPartAMessageObject.setRowVersion(0);
            aisStaticDataReportPartAMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisStaticDataReportPartAMessage( AisStaticDataReportPartAMessageObject aisStaticDataReportPartAMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportPartAMessageObject.getId( );
        Guid aisDevice = aisStaticDataReportPartAMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisStaticDataReportPartAMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisStaticDataReportPartAMessageObject.getMessageSequenceNumber( );
        int repeat = aisStaticDataReportPartAMessageObject.getRepeat( );
        int partNumber = aisStaticDataReportPartAMessageObject.getPartNumber( );
        int spare = aisStaticDataReportPartAMessageObject.getSpare( );
        var result = insert1AisStaticDataReportPartAMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, partNumber, spare );
        if( result.isSuccess( ) ) {
            aisStaticDataReportPartAMessageObject.setId( result.getId( ) );
            aisStaticDataReportPartAMessageObject.setRowVersion(0);
            aisStaticDataReportPartAMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisStaticDataReportPartAMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber, Guid shipName, int spare ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStaticDataReportPartAMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, partNumber);
            callableStatement.setNullableGuid(9, shipName);
            callableStatement.setInt32(10, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisStaticDataReportPartAMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int partNumber, int spare ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStaticDataReportPartAMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, partNumber);
            callableStatement.setInt32(8, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisStaticDataReportPartAMessage( Guid id, long rowVersion, Guid mmsi, Guid shipName ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStaticDataReportPartAMessageUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.setNullableGuid(4, shipName);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisStaticDataReportPartAMessage( AisStaticDataReportPartAMessageObject aisStaticDataReportPartAMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportPartAMessageObject.getId();
        long rowVersion = aisStaticDataReportPartAMessageObject.getRowVersion();
        Guid aisDevice = aisStaticDataReportPartAMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisStaticDataReportPartAMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisStaticDataReportPartAMessageObject.getMessageSequenceNumber();
        int repeat = aisStaticDataReportPartAMessageObject.getRepeat();
        Guid mmsi = aisStaticDataReportPartAMessageObject.getMmsi();
        int partNumber = aisStaticDataReportPartAMessageObject.getPartNumber();
        Guid shipName = aisStaticDataReportPartAMessageObject.getShipName();
        int spare = aisStaticDataReportPartAMessageObject.getSpare();
        var result = updateAisStaticDataReportPartAMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, partNumber, shipName, spare );
        if( result.isSuccess( ) ) {
            aisStaticDataReportPartAMessageObject.setRowVersion(result.getRowVersion());
            aisStaticDataReportPartAMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisStaticDataReportPartAMessage( AisStaticDataReportPartAMessageObject aisStaticDataReportPartAMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportPartAMessageObject.getId();
        long rowVersion = aisStaticDataReportPartAMessageObject.getRowVersion();
        Guid aisDevice = aisStaticDataReportPartAMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisStaticDataReportPartAMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisStaticDataReportPartAMessageObject.getMessageSequenceNumber();
        int repeat = aisStaticDataReportPartAMessageObject.getRepeat();
        int partNumber = aisStaticDataReportPartAMessageObject.getPartNumber();
        int spare = aisStaticDataReportPartAMessageObject.getSpare();
        var result = update1AisStaticDataReportPartAMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, partNumber, spare );
        if( result.isSuccess( ) ) {
            aisStaticDataReportPartAMessageObject.setRowVersion(result.getRowVersion());
            aisStaticDataReportPartAMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisStaticDataReportPartAMessage( AisStaticDataReportPartAMessageObject aisStaticDataReportPartAMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportPartAMessageObject.getId();
        long rowVersion = aisStaticDataReportPartAMessageObject.getRowVersion();
        Guid mmsi = aisStaticDataReportPartAMessageObject.getMmsi();
        Guid shipName = aisStaticDataReportPartAMessageObject.getShipName();
        var result = update2AisStaticDataReportPartAMessage( id, rowVersion, mmsi, shipName );
        if( result.isSuccess( ) ) {
            aisStaticDataReportPartAMessageObject.setRowVersion(result.getRowVersion());
            aisStaticDataReportPartAMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisStaticDataReportPartAMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisStaticDataReportPartAMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisStaticDataReportPartAMessage( AisStaticDataReportPartAMessageObject aisStaticDataReportPartAMessageObject ) throws SQLException {
        var id = aisStaticDataReportPartAMessageObject.getId( );
        var rowVersion = aisStaticDataReportPartAMessageObject.getRowVersion();
        var result = deleteAisStaticDataReportPartAMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisStaticDataReportPartBMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber, int shipType, String vendorId, int unitModelCode, int serialNumber, Guid callsign, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Guid mothershipMmsi, int positionFixType, int spare ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisStaticDataReportPartBMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, partNumber);
            callableStatement.setInt32(8, shipType);
            callableStatement.setString(9, vendorId);
            callableStatement.setInt32(10, unitModelCode);
            callableStatement.setInt32(11, serialNumber);
            callableStatement.setNullableGuid(12, callsign);
            callableStatement.setInt32(13, dimensionToBow);
            callableStatement.setInt32(14, dimensionToStern);
            callableStatement.setInt32(15, dimensionToPort);
            callableStatement.setInt32(16, dimensionToStarboard);
            callableStatement.setNullableGuid(17, mothershipMmsi);
            callableStatement.setInt32(18, positionFixType);
            callableStatement.setInt32(19, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisStaticDataReportPartBMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int partNumber, int shipType, String vendorId, int unitModelCode, int serialNumber, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, int spare ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisStaticDataReportPartBMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, partNumber);
            callableStatement.setInt32(7, shipType);
            callableStatement.setString(8, vendorId);
            callableStatement.setInt32(9, unitModelCode);
            callableStatement.setInt32(10, serialNumber);
            callableStatement.setInt32(11, dimensionToBow);
            callableStatement.setInt32(12, dimensionToStern);
            callableStatement.setInt32(13, dimensionToPort);
            callableStatement.setInt32(14, dimensionToStarboard);
            callableStatement.setInt32(15, positionFixType);
            callableStatement.setInt32(16, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisStaticDataReportPartBMessage( AisStaticDataReportPartBMessageObject aisStaticDataReportPartBMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportPartBMessageObject.getId( );
        Guid aisDevice = aisStaticDataReportPartBMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisStaticDataReportPartBMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisStaticDataReportPartBMessageObject.getMessageSequenceNumber( );
        int repeat = aisStaticDataReportPartBMessageObject.getRepeat( );
        Guid mmsi = aisStaticDataReportPartBMessageObject.getMmsi( );
        int partNumber = aisStaticDataReportPartBMessageObject.getPartNumber( );
        int shipType = aisStaticDataReportPartBMessageObject.getShipType( );
        String vendorId = aisStaticDataReportPartBMessageObject.getVendorId( );
        int unitModelCode = aisStaticDataReportPartBMessageObject.getUnitModelCode( );
        int serialNumber = aisStaticDataReportPartBMessageObject.getSerialNumber( );
        Guid callsign = aisStaticDataReportPartBMessageObject.getCallsign( );
        int dimensionToBow = aisStaticDataReportPartBMessageObject.getDimensionToBow( );
        int dimensionToStern = aisStaticDataReportPartBMessageObject.getDimensionToStern( );
        int dimensionToPort = aisStaticDataReportPartBMessageObject.getDimensionToPort( );
        int dimensionToStarboard = aisStaticDataReportPartBMessageObject.getDimensionToStarboard( );
        Guid mothershipMmsi = aisStaticDataReportPartBMessageObject.getMothershipMmsi( );
        int positionFixType = aisStaticDataReportPartBMessageObject.getPositionFixType( );
        int spare = aisStaticDataReportPartBMessageObject.getSpare( );
        var result = insertAisStaticDataReportPartBMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, partNumber, shipType, vendorId, unitModelCode, serialNumber, callsign, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, mothershipMmsi, positionFixType, spare );
        if( result.isSuccess() ) {
            aisStaticDataReportPartBMessageObject.setId(result.getId());
            aisStaticDataReportPartBMessageObject.setRowVersion(0);
            aisStaticDataReportPartBMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisStaticDataReportPartBMessage( AisStaticDataReportPartBMessageObject aisStaticDataReportPartBMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportPartBMessageObject.getId( );
        Guid aisDevice = aisStaticDataReportPartBMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisStaticDataReportPartBMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisStaticDataReportPartBMessageObject.getMessageSequenceNumber( );
        int repeat = aisStaticDataReportPartBMessageObject.getRepeat( );
        int partNumber = aisStaticDataReportPartBMessageObject.getPartNumber( );
        int shipType = aisStaticDataReportPartBMessageObject.getShipType( );
        String vendorId = aisStaticDataReportPartBMessageObject.getVendorId( );
        int unitModelCode = aisStaticDataReportPartBMessageObject.getUnitModelCode( );
        int serialNumber = aisStaticDataReportPartBMessageObject.getSerialNumber( );
        int dimensionToBow = aisStaticDataReportPartBMessageObject.getDimensionToBow( );
        int dimensionToStern = aisStaticDataReportPartBMessageObject.getDimensionToStern( );
        int dimensionToPort = aisStaticDataReportPartBMessageObject.getDimensionToPort( );
        int dimensionToStarboard = aisStaticDataReportPartBMessageObject.getDimensionToStarboard( );
        int positionFixType = aisStaticDataReportPartBMessageObject.getPositionFixType( );
        int spare = aisStaticDataReportPartBMessageObject.getSpare( );
        var result = insert1AisStaticDataReportPartBMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, partNumber, shipType, vendorId, unitModelCode, serialNumber, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, spare );
        if( result.isSuccess( ) ) {
            aisStaticDataReportPartBMessageObject.setId( result.getId( ) );
            aisStaticDataReportPartBMessageObject.setRowVersion(0);
            aisStaticDataReportPartBMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisStaticDataReportPartBMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int partNumber, int shipType, String vendorId, int unitModelCode, int serialNumber, Guid callsign, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, Guid mothershipMmsi, int positionFixType, int spare ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStaticDataReportPartBMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, partNumber);
            callableStatement.setInt32(9, shipType);
            callableStatement.setString(10, vendorId);
            callableStatement.setInt32(11, unitModelCode);
            callableStatement.setInt32(12, serialNumber);
            callableStatement.setNullableGuid(13, callsign);
            callableStatement.setInt32(14, dimensionToBow);
            callableStatement.setInt32(15, dimensionToStern);
            callableStatement.setInt32(16, dimensionToPort);
            callableStatement.setInt32(17, dimensionToStarboard);
            callableStatement.setNullableGuid(18, mothershipMmsi);
            callableStatement.setInt32(19, positionFixType);
            callableStatement.setInt32(20, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisStaticDataReportPartBMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int partNumber, int shipType, String vendorId, int unitModelCode, int serialNumber, int dimensionToBow, int dimensionToStern, int dimensionToPort, int dimensionToStarboard, int positionFixType, int spare ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStaticDataReportPartBMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, partNumber);
            callableStatement.setInt32(8, shipType);
            callableStatement.setString(9, vendorId);
            callableStatement.setInt32(10, unitModelCode);
            callableStatement.setInt32(11, serialNumber);
            callableStatement.setInt32(12, dimensionToBow);
            callableStatement.setInt32(13, dimensionToStern);
            callableStatement.setInt32(14, dimensionToPort);
            callableStatement.setInt32(15, dimensionToStarboard);
            callableStatement.setInt32(16, positionFixType);
            callableStatement.setInt32(17, spare);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisStaticDataReportPartBMessage( Guid id, long rowVersion, Guid mmsi, Guid callsign, Guid mothershipMmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisStaticDataReportPartBMessageUpdate2(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.setNullableGuid(4, callsign);
            callableStatement.setNullableGuid(5, mothershipMmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisStaticDataReportPartBMessage( AisStaticDataReportPartBMessageObject aisStaticDataReportPartBMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportPartBMessageObject.getId();
        long rowVersion = aisStaticDataReportPartBMessageObject.getRowVersion();
        Guid aisDevice = aisStaticDataReportPartBMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisStaticDataReportPartBMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisStaticDataReportPartBMessageObject.getMessageSequenceNumber();
        int repeat = aisStaticDataReportPartBMessageObject.getRepeat();
        Guid mmsi = aisStaticDataReportPartBMessageObject.getMmsi();
        int partNumber = aisStaticDataReportPartBMessageObject.getPartNumber();
        int shipType = aisStaticDataReportPartBMessageObject.getShipType();
        String vendorId = aisStaticDataReportPartBMessageObject.getVendorId();
        int unitModelCode = aisStaticDataReportPartBMessageObject.getUnitModelCode();
        int serialNumber = aisStaticDataReportPartBMessageObject.getSerialNumber();
        Guid callsign = aisStaticDataReportPartBMessageObject.getCallsign();
        int dimensionToBow = aisStaticDataReportPartBMessageObject.getDimensionToBow();
        int dimensionToStern = aisStaticDataReportPartBMessageObject.getDimensionToStern();
        int dimensionToPort = aisStaticDataReportPartBMessageObject.getDimensionToPort();
        int dimensionToStarboard = aisStaticDataReportPartBMessageObject.getDimensionToStarboard();
        Guid mothershipMmsi = aisStaticDataReportPartBMessageObject.getMothershipMmsi();
        int positionFixType = aisStaticDataReportPartBMessageObject.getPositionFixType();
        int spare = aisStaticDataReportPartBMessageObject.getSpare();
        var result = updateAisStaticDataReportPartBMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, partNumber, shipType, vendorId, unitModelCode, serialNumber, callsign, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, mothershipMmsi, positionFixType, spare );
        if( result.isSuccess( ) ) {
            aisStaticDataReportPartBMessageObject.setRowVersion(result.getRowVersion());
            aisStaticDataReportPartBMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisStaticDataReportPartBMessage( AisStaticDataReportPartBMessageObject aisStaticDataReportPartBMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportPartBMessageObject.getId();
        long rowVersion = aisStaticDataReportPartBMessageObject.getRowVersion();
        Guid aisDevice = aisStaticDataReportPartBMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisStaticDataReportPartBMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisStaticDataReportPartBMessageObject.getMessageSequenceNumber();
        int repeat = aisStaticDataReportPartBMessageObject.getRepeat();
        int partNumber = aisStaticDataReportPartBMessageObject.getPartNumber();
        int shipType = aisStaticDataReportPartBMessageObject.getShipType();
        String vendorId = aisStaticDataReportPartBMessageObject.getVendorId();
        int unitModelCode = aisStaticDataReportPartBMessageObject.getUnitModelCode();
        int serialNumber = aisStaticDataReportPartBMessageObject.getSerialNumber();
        int dimensionToBow = aisStaticDataReportPartBMessageObject.getDimensionToBow();
        int dimensionToStern = aisStaticDataReportPartBMessageObject.getDimensionToStern();
        int dimensionToPort = aisStaticDataReportPartBMessageObject.getDimensionToPort();
        int dimensionToStarboard = aisStaticDataReportPartBMessageObject.getDimensionToStarboard();
        int positionFixType = aisStaticDataReportPartBMessageObject.getPositionFixType();
        int spare = aisStaticDataReportPartBMessageObject.getSpare();
        var result = update1AisStaticDataReportPartBMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, partNumber, shipType, vendorId, unitModelCode, serialNumber, dimensionToBow, dimensionToStern, dimensionToPort, dimensionToStarboard, positionFixType, spare );
        if( result.isSuccess( ) ) {
            aisStaticDataReportPartBMessageObject.setRowVersion(result.getRowVersion());
            aisStaticDataReportPartBMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisStaticDataReportPartBMessage( AisStaticDataReportPartBMessageObject aisStaticDataReportPartBMessageObject ) throws SQLException {
        Guid id = aisStaticDataReportPartBMessageObject.getId();
        long rowVersion = aisStaticDataReportPartBMessageObject.getRowVersion();
        Guid mmsi = aisStaticDataReportPartBMessageObject.getMmsi();
        Guid callsign = aisStaticDataReportPartBMessageObject.getCallsign();
        Guid mothershipMmsi = aisStaticDataReportPartBMessageObject.getMothershipMmsi();
        var result = update2AisStaticDataReportPartBMessage( id, rowVersion, mmsi, callsign, mothershipMmsi );
        if( result.isSuccess( ) ) {
            aisStaticDataReportPartBMessageObject.setRowVersion(result.getRowVersion());
            aisStaticDataReportPartBMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisStaticDataReportPartBMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisStaticDataReportPartBMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisStaticDataReportPartBMessage( AisStaticDataReportPartBMessageObject aisStaticDataReportPartBMessageObject ) throws SQLException {
        var id = aisStaticDataReportPartBMessageObject.getId( );
        var rowVersion = aisStaticDataReportPartBMessageObject.getRowVersion();
        var result = deleteAisStaticDataReportPartBMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisUtcAndDateInquiryMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare1, Guid destinationMmsi, int spare2 ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisUtcAndDateInquiryMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setInt32(7, spare1);
            callableStatement.setNullableGuid(8, destinationMmsi);
            callableStatement.setInt32(9, spare2);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisUtcAndDateInquiryMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int spare1, int spare2 ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisUtcAndDateInquiryMessageInsert1(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setInt32(6, spare1);
            callableStatement.setInt32(7, spare2);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisUtcAndDateInquiryMessage( AisUtcAndDateInquiryMessageObject aisUtcAndDateInquiryMessageObject ) throws SQLException {
        Guid id = aisUtcAndDateInquiryMessageObject.getId( );
        Guid aisDevice = aisUtcAndDateInquiryMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisUtcAndDateInquiryMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisUtcAndDateInquiryMessageObject.getMessageSequenceNumber( );
        int repeat = aisUtcAndDateInquiryMessageObject.getRepeat( );
        Guid mmsi = aisUtcAndDateInquiryMessageObject.getMmsi( );
        int spare1 = aisUtcAndDateInquiryMessageObject.getSpare1( );
        Guid destinationMmsi = aisUtcAndDateInquiryMessageObject.getDestinationMmsi( );
        int spare2 = aisUtcAndDateInquiryMessageObject.getSpare2( );
        var result = insertAisUtcAndDateInquiryMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, spare1, destinationMmsi, spare2 );
        if( result.isSuccess() ) {
            aisUtcAndDateInquiryMessageObject.setId(result.getId());
            aisUtcAndDateInquiryMessageObject.setRowVersion(0);
            aisUtcAndDateInquiryMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisUtcAndDateInquiryMessage( AisUtcAndDateInquiryMessageObject aisUtcAndDateInquiryMessageObject ) throws SQLException {
        Guid id = aisUtcAndDateInquiryMessageObject.getId( );
        Guid aisDevice = aisUtcAndDateInquiryMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisUtcAndDateInquiryMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisUtcAndDateInquiryMessageObject.getMessageSequenceNumber( );
        int repeat = aisUtcAndDateInquiryMessageObject.getRepeat( );
        int spare1 = aisUtcAndDateInquiryMessageObject.getSpare1( );
        int spare2 = aisUtcAndDateInquiryMessageObject.getSpare2( );
        var result = insert1AisUtcAndDateInquiryMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, spare1, spare2 );
        if( result.isSuccess( ) ) {
            aisUtcAndDateInquiryMessageObject.setId( result.getId( ) );
            aisUtcAndDateInquiryMessageObject.setRowVersion(0);
            aisUtcAndDateInquiryMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisUtcAndDateInquiryMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, int spare1, Guid destinationMmsi, int spare2 ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisUtcAndDateInquiryMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setInt32(8, spare1);
            callableStatement.setNullableGuid(9, destinationMmsi);
            callableStatement.setInt32(10, spare2);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisUtcAndDateInquiryMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, int spare1, int spare2 ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisUtcAndDateInquiryMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setInt32(7, spare1);
            callableStatement.setInt32(8, spare2);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisUtcAndDateInquiryMessage( Guid id, long rowVersion, Guid mmsi, Guid destinationMmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisUtcAndDateInquiryMessageUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.setNullableGuid(4, destinationMmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisUtcAndDateInquiryMessage( AisUtcAndDateInquiryMessageObject aisUtcAndDateInquiryMessageObject ) throws SQLException {
        Guid id = aisUtcAndDateInquiryMessageObject.getId();
        long rowVersion = aisUtcAndDateInquiryMessageObject.getRowVersion();
        Guid aisDevice = aisUtcAndDateInquiryMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisUtcAndDateInquiryMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisUtcAndDateInquiryMessageObject.getMessageSequenceNumber();
        int repeat = aisUtcAndDateInquiryMessageObject.getRepeat();
        Guid mmsi = aisUtcAndDateInquiryMessageObject.getMmsi();
        int spare1 = aisUtcAndDateInquiryMessageObject.getSpare1();
        Guid destinationMmsi = aisUtcAndDateInquiryMessageObject.getDestinationMmsi();
        int spare2 = aisUtcAndDateInquiryMessageObject.getSpare2();
        var result = updateAisUtcAndDateInquiryMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, spare1, destinationMmsi, spare2 );
        if( result.isSuccess( ) ) {
            aisUtcAndDateInquiryMessageObject.setRowVersion(result.getRowVersion());
            aisUtcAndDateInquiryMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisUtcAndDateInquiryMessage( AisUtcAndDateInquiryMessageObject aisUtcAndDateInquiryMessageObject ) throws SQLException {
        Guid id = aisUtcAndDateInquiryMessageObject.getId();
        long rowVersion = aisUtcAndDateInquiryMessageObject.getRowVersion();
        Guid aisDevice = aisUtcAndDateInquiryMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisUtcAndDateInquiryMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisUtcAndDateInquiryMessageObject.getMessageSequenceNumber();
        int repeat = aisUtcAndDateInquiryMessageObject.getRepeat();
        int spare1 = aisUtcAndDateInquiryMessageObject.getSpare1();
        int spare2 = aisUtcAndDateInquiryMessageObject.getSpare2();
        var result = update1AisUtcAndDateInquiryMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, spare1, spare2 );
        if( result.isSuccess( ) ) {
            aisUtcAndDateInquiryMessageObject.setRowVersion(result.getRowVersion());
            aisUtcAndDateInquiryMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisUtcAndDateInquiryMessage( AisUtcAndDateInquiryMessageObject aisUtcAndDateInquiryMessageObject ) throws SQLException {
        Guid id = aisUtcAndDateInquiryMessageObject.getId();
        long rowVersion = aisUtcAndDateInquiryMessageObject.getRowVersion();
        Guid mmsi = aisUtcAndDateInquiryMessageObject.getMmsi();
        Guid destinationMmsi = aisUtcAndDateInquiryMessageObject.getDestinationMmsi();
        var result = update2AisUtcAndDateInquiryMessage( id, rowVersion, mmsi, destinationMmsi );
        if( result.isSuccess( ) ) {
            aisUtcAndDateInquiryMessageObject.setRowVersion(result.getRowVersion());
            aisUtcAndDateInquiryMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisUtcAndDateInquiryMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisUtcAndDateInquiryMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisUtcAndDateInquiryMessage( AisUtcAndDateInquiryMessageObject aisUtcAndDateInquiryMessageObject ) throws SQLException {
        var id = aisUtcAndDateInquiryMessageObject.getId( );
        var rowVersion = aisUtcAndDateInquiryMessageObject.getRowVersion();
        var result = deleteAisUtcAndDateInquiryMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisUtcAndDateResponseMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, DateTime datetime, int positionAccuracy, double longitude, double latitude, int positionFixType, int spare, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisUtcAndDateResponseMessageInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setNullableGuid(6, mmsi);
            callableStatement.setLongFromDateTime(7, datetime);
            callableStatement.setInt32(8, positionAccuracy);
            callableStatement.setDouble(9, longitude);
            callableStatement.setDouble(10, latitude);
            callableStatement.setInt32(11, positionFixType);
            callableStatement.setInt32(12, spare);
            callableStatement.setInt32(13, raim);
            callableStatement.setInt32(14, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisUtcAndDateResponseMessage( Guid id, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, DateTime datetime, int positionAccuracy, double longitude, double latitude, int positionFixType, int spare, int raim, int radioStatus ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisUtcAndDateResponseMessageInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, aisDevice);
            callableStatement.setLongFromDateTime(3, receivedTimestamp);
            callableStatement.setInt64(4, messageSequenceNumber);
            callableStatement.setInt32(5, repeat);
            callableStatement.setLongFromDateTime(6, datetime);
            callableStatement.setInt32(7, positionAccuracy);
            callableStatement.setDouble(8, longitude);
            callableStatement.setDouble(9, latitude);
            callableStatement.setInt32(10, positionFixType);
            callableStatement.setInt32(11, spare);
            callableStatement.setInt32(12, raim);
            callableStatement.setInt32(13, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisUtcAndDateResponseMessage( AisUtcAndDateResponseMessageObject aisUtcAndDateResponseMessageObject ) throws SQLException {
        Guid id = aisUtcAndDateResponseMessageObject.getId( );
        Guid aisDevice = aisUtcAndDateResponseMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisUtcAndDateResponseMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisUtcAndDateResponseMessageObject.getMessageSequenceNumber( );
        int repeat = aisUtcAndDateResponseMessageObject.getRepeat( );
        Guid mmsi = aisUtcAndDateResponseMessageObject.getMmsi( );
        DateTime datetime = aisUtcAndDateResponseMessageObject.getDatetime( );
        int positionAccuracy = aisUtcAndDateResponseMessageObject.getPositionAccuracy( );
        double longitude = aisUtcAndDateResponseMessageObject.getLongitude( );
        double latitude = aisUtcAndDateResponseMessageObject.getLatitude( );
        int positionFixType = aisUtcAndDateResponseMessageObject.getPositionFixType( );
        int spare = aisUtcAndDateResponseMessageObject.getSpare( );
        int raim = aisUtcAndDateResponseMessageObject.getRaim( );
        int radioStatus = aisUtcAndDateResponseMessageObject.getRadioStatus( );
        var result = insertAisUtcAndDateResponseMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, datetime, positionAccuracy, longitude, latitude, positionFixType, spare, raim, radioStatus );
        if( result.isSuccess() ) {
            aisUtcAndDateResponseMessageObject.setId(result.getId());
            aisUtcAndDateResponseMessageObject.setRowVersion(0);
            aisUtcAndDateResponseMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisUtcAndDateResponseMessage( AisUtcAndDateResponseMessageObject aisUtcAndDateResponseMessageObject ) throws SQLException {
        Guid id = aisUtcAndDateResponseMessageObject.getId( );
        Guid aisDevice = aisUtcAndDateResponseMessageObject.getAisDevice( );
        DateTime receivedTimestamp = aisUtcAndDateResponseMessageObject.getReceivedTimestamp( );
        long messageSequenceNumber = aisUtcAndDateResponseMessageObject.getMessageSequenceNumber( );
        int repeat = aisUtcAndDateResponseMessageObject.getRepeat( );
        DateTime datetime = aisUtcAndDateResponseMessageObject.getDatetime( );
        int positionAccuracy = aisUtcAndDateResponseMessageObject.getPositionAccuracy( );
        double longitude = aisUtcAndDateResponseMessageObject.getLongitude( );
        double latitude = aisUtcAndDateResponseMessageObject.getLatitude( );
        int positionFixType = aisUtcAndDateResponseMessageObject.getPositionFixType( );
        int spare = aisUtcAndDateResponseMessageObject.getSpare( );
        int raim = aisUtcAndDateResponseMessageObject.getRaim( );
        int radioStatus = aisUtcAndDateResponseMessageObject.getRadioStatus( );
        var result = insert1AisUtcAndDateResponseMessage( id, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, datetime, positionAccuracy, longitude, latitude, positionFixType, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisUtcAndDateResponseMessageObject.setId( result.getId( ) );
            aisUtcAndDateResponseMessageObject.setRowVersion(0);
            aisUtcAndDateResponseMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisUtcAndDateResponseMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, Guid mmsi, DateTime datetime, int positionAccuracy, double longitude, double latitude, int positionFixType, int spare, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisUtcAndDateResponseMessageUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setNullableGuid(7, mmsi);
            callableStatement.setLongFromDateTime(8, datetime);
            callableStatement.setInt32(9, positionAccuracy);
            callableStatement.setDouble(10, longitude);
            callableStatement.setDouble(11, latitude);
            callableStatement.setInt32(12, positionFixType);
            callableStatement.setInt32(13, spare);
            callableStatement.setInt32(14, raim);
            callableStatement.setInt32(15, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisUtcAndDateResponseMessage( Guid id, long rowVersion, Guid aisDevice, DateTime receivedTimestamp, long messageSequenceNumber, int repeat, DateTime datetime, int positionAccuracy, double longitude, double latitude, int positionFixType, int spare, int raim, int radioStatus ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisUtcAndDateResponseMessageUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, aisDevice);
            callableStatement.setLongFromDateTime(4, receivedTimestamp);
            callableStatement.setInt64(5, messageSequenceNumber);
            callableStatement.setInt32(6, repeat);
            callableStatement.setLongFromDateTime(7, datetime);
            callableStatement.setInt32(8, positionAccuracy);
            callableStatement.setDouble(9, longitude);
            callableStatement.setDouble(10, latitude);
            callableStatement.setInt32(11, positionFixType);
            callableStatement.setInt32(12, spare);
            callableStatement.setInt32(13, raim);
            callableStatement.setInt32(14, radioStatus);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisUtcAndDateResponseMessage( Guid id, long rowVersion, Guid mmsi ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisUtcAndDateResponseMessageUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mmsi);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisUtcAndDateResponseMessage( AisUtcAndDateResponseMessageObject aisUtcAndDateResponseMessageObject ) throws SQLException {
        Guid id = aisUtcAndDateResponseMessageObject.getId();
        long rowVersion = aisUtcAndDateResponseMessageObject.getRowVersion();
        Guid aisDevice = aisUtcAndDateResponseMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisUtcAndDateResponseMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisUtcAndDateResponseMessageObject.getMessageSequenceNumber();
        int repeat = aisUtcAndDateResponseMessageObject.getRepeat();
        Guid mmsi = aisUtcAndDateResponseMessageObject.getMmsi();
        DateTime datetime = aisUtcAndDateResponseMessageObject.getDatetime();
        int positionAccuracy = aisUtcAndDateResponseMessageObject.getPositionAccuracy();
        double longitude = aisUtcAndDateResponseMessageObject.getLongitude();
        double latitude = aisUtcAndDateResponseMessageObject.getLatitude();
        int positionFixType = aisUtcAndDateResponseMessageObject.getPositionFixType();
        int spare = aisUtcAndDateResponseMessageObject.getSpare();
        int raim = aisUtcAndDateResponseMessageObject.getRaim();
        int radioStatus = aisUtcAndDateResponseMessageObject.getRadioStatus();
        var result = updateAisUtcAndDateResponseMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, mmsi, datetime, positionAccuracy, longitude, latitude, positionFixType, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisUtcAndDateResponseMessageObject.setRowVersion(result.getRowVersion());
            aisUtcAndDateResponseMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisUtcAndDateResponseMessage( AisUtcAndDateResponseMessageObject aisUtcAndDateResponseMessageObject ) throws SQLException {
        Guid id = aisUtcAndDateResponseMessageObject.getId();
        long rowVersion = aisUtcAndDateResponseMessageObject.getRowVersion();
        Guid aisDevice = aisUtcAndDateResponseMessageObject.getAisDevice();
        DateTime receivedTimestamp = aisUtcAndDateResponseMessageObject.getReceivedTimestamp();
        long messageSequenceNumber = aisUtcAndDateResponseMessageObject.getMessageSequenceNumber();
        int repeat = aisUtcAndDateResponseMessageObject.getRepeat();
        DateTime datetime = aisUtcAndDateResponseMessageObject.getDatetime();
        int positionAccuracy = aisUtcAndDateResponseMessageObject.getPositionAccuracy();
        double longitude = aisUtcAndDateResponseMessageObject.getLongitude();
        double latitude = aisUtcAndDateResponseMessageObject.getLatitude();
        int positionFixType = aisUtcAndDateResponseMessageObject.getPositionFixType();
        int spare = aisUtcAndDateResponseMessageObject.getSpare();
        int raim = aisUtcAndDateResponseMessageObject.getRaim();
        int radioStatus = aisUtcAndDateResponseMessageObject.getRadioStatus();
        var result = update1AisUtcAndDateResponseMessage( id, rowVersion, aisDevice, receivedTimestamp, messageSequenceNumber, repeat, datetime, positionAccuracy, longitude, latitude, positionFixType, spare, raim, radioStatus );
        if( result.isSuccess( ) ) {
            aisUtcAndDateResponseMessageObject.setRowVersion(result.getRowVersion());
            aisUtcAndDateResponseMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisUtcAndDateResponseMessage( AisUtcAndDateResponseMessageObject aisUtcAndDateResponseMessageObject ) throws SQLException {
        Guid id = aisUtcAndDateResponseMessageObject.getId();
        long rowVersion = aisUtcAndDateResponseMessageObject.getRowVersion();
        Guid mmsi = aisUtcAndDateResponseMessageObject.getMmsi();
        var result = update2AisUtcAndDateResponseMessage( id, rowVersion, mmsi );
        if( result.isSuccess( ) ) {
            aisUtcAndDateResponseMessageObject.setRowVersion(result.getRowVersion());
            aisUtcAndDateResponseMessageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisUtcAndDateResponseMessage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisUtcAndDateResponseMessageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisUtcAndDateResponseMessage( AisUtcAndDateResponseMessageObject aisUtcAndDateResponseMessageObject ) throws SQLException {
        var id = aisUtcAndDateResponseMessageObject.getId( );
        var rowVersion = aisUtcAndDateResponseMessageObject.getRowVersion();
        var result = deleteAisUtcAndDateResponseMessage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAlarmStateChange( Guid id, Guid alarm, DateTime timestamp, int state ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AlarmStateChangeInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, alarm);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, state);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAlarmStateChange( AlarmStateChangeObject alarmStateChangeObject ) throws SQLException {
        Guid id = alarmStateChangeObject.getId( );
        Guid alarm = alarmStateChangeObject.getAlarm( );
        DateTime timestamp = alarmStateChangeObject.getTimestamp( );
        int state = alarmStateChangeObject.getState( );
        var result = insertAlarmStateChange( id, alarm, timestamp, state );
        if( result.isSuccess() ) {
            alarmStateChangeObject.setId(result.getId());
            alarmStateChangeObject.setRowVersion(0);
            alarmStateChangeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateAlarmStateChange( Guid id, long rowVersion, Guid alarm, DateTime timestamp, int state ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AlarmStateChangeUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, alarm);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, state);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAlarmStateChange( AlarmStateChangeObject alarmStateChangeObject ) throws SQLException {
        Guid id = alarmStateChangeObject.getId();
        long rowVersion = alarmStateChangeObject.getRowVersion();
        Guid alarm = alarmStateChangeObject.getAlarm();
        DateTime timestamp = alarmStateChangeObject.getTimestamp();
        int state = alarmStateChangeObject.getState();
        var result = updateAlarmStateChange( id, rowVersion, alarm, timestamp, state );
        if( result.isSuccess( ) ) {
            alarmStateChangeObject.setRowVersion(result.getRowVersion());
            alarmStateChangeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAlarmStateChange( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AlarmStateChangeDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAlarmStateChange( AlarmStateChangeObject alarmStateChangeObject ) throws SQLException {
        var id = alarmStateChangeObject.getId( );
        var rowVersion = alarmStateChangeObject.getRowVersion();
        var result = deleteAlarmStateChange( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBaseStationType( Guid id, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BaseStationTypeInsert(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBaseStationType( BaseStationTypeObject baseStationTypeObject ) throws SQLException {
        Guid id = baseStationTypeObject.getId( );
        String name = baseStationTypeObject.getName( );
        var result = insertBaseStationType( id, name );
        if( result.isSuccess() ) {
            baseStationTypeObject.setId(result.getId());
            baseStationTypeObject.setRowVersion(0);
            baseStationTypeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateBaseStationType( Guid id, long rowVersion, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BaseStationTypeUpdate(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBaseStationType( BaseStationTypeObject baseStationTypeObject ) throws SQLException {
        Guid id = baseStationTypeObject.getId();
        long rowVersion = baseStationTypeObject.getRowVersion();
        String name = baseStationTypeObject.getName();
        var result = updateBaseStationType( id, rowVersion, name );
        if( result.isSuccess( ) ) {
            baseStationTypeObject.setRowVersion(result.getRowVersion());
            baseStationTypeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBaseStationType( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BaseStationTypeDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBaseStationType( BaseStationTypeObject baseStationTypeObject ) throws SQLException {
        var id = baseStationTypeObject.getId( );
        var rowVersion = baseStationTypeObject.getRowVersion();
        var result = deleteBaseStationType( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBinaryTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, byte[] value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BinaryTimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setBinary(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBinaryTimeseriesValue( BinaryTimeseriesValueObject binaryTimeseriesValueObject ) throws SQLException {
        Guid id = binaryTimeseriesValueObject.getId( );
        Guid timeseries = binaryTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = binaryTimeseriesValueObject.getTimestamp( );
        byte[] value = binaryTimeseriesValueObject.getValue( );
        var result = insertBinaryTimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            binaryTimeseriesValueObject.setId(result.getId());
            binaryTimeseriesValueObject.setRowVersion(0);
            binaryTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateBinaryTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, byte[] value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BinaryTimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setBinary(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBinaryTimeseriesValue( BinaryTimeseriesValueObject binaryTimeseriesValueObject ) throws SQLException {
        Guid id = binaryTimeseriesValueObject.getId();
        long rowVersion = binaryTimeseriesValueObject.getRowVersion();
        Guid timeseries = binaryTimeseriesValueObject.getTimeseries();
        DateTime timestamp = binaryTimeseriesValueObject.getTimestamp();
        byte[] value = binaryTimeseriesValueObject.getValue();
        var result = updateBinaryTimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            binaryTimeseriesValueObject.setRowVersion(result.getRowVersion());
            binaryTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBinaryTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BinaryTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBinaryTimeseriesValue( BinaryTimeseriesValueObject binaryTimeseriesValueObject ) throws SQLException {
        var id = binaryTimeseriesValueObject.getId( );
        var rowVersion = binaryTimeseriesValueObject.getRowVersion();
        var result = deleteBinaryTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBookmark( Guid id, Guid view, String name, DateTime timestamp, double latitude, double longitude, double zoomLevel ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BookmarkInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, view);
            callableStatement.setString(3, name);
            callableStatement.setLongFromNullableDateTime(4, timestamp);
            callableStatement.setDouble(5, latitude);
            callableStatement.setDouble(6, longitude);
            callableStatement.setDouble(7, zoomLevel);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBookmark( BookmarkObject bookmarkObject ) throws SQLException {
        Guid id = bookmarkObject.getId( );
        Guid view = bookmarkObject.getView( );
        String name = bookmarkObject.getName( );
        DateTime timestamp = bookmarkObject.getTimestamp( );
        double latitude = bookmarkObject.getLatitude( );
        double longitude = bookmarkObject.getLongitude( );
        double zoomLevel = bookmarkObject.getZoomLevel( );
        var result = insertBookmark( id, view, name, timestamp, latitude, longitude, zoomLevel );
        if( result.isSuccess() ) {
            bookmarkObject.setId(result.getId());
            bookmarkObject.setRowVersion(0);
            bookmarkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateBookmark( Guid id, long rowVersion, Guid view, String name, DateTime timestamp, double latitude, double longitude, double zoomLevel ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BookmarkUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, view);
            callableStatement.setString(4, name);
            callableStatement.setLongFromNullableDateTime(5, timestamp);
            callableStatement.setDouble(6, latitude);
            callableStatement.setDouble(7, longitude);
            callableStatement.setDouble(8, zoomLevel);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBookmark( BookmarkObject bookmarkObject ) throws SQLException {
        Guid id = bookmarkObject.getId();
        long rowVersion = bookmarkObject.getRowVersion();
        Guid view = bookmarkObject.getView();
        String name = bookmarkObject.getName();
        DateTime timestamp = bookmarkObject.getTimestamp();
        double latitude = bookmarkObject.getLatitude();
        double longitude = bookmarkObject.getLongitude();
        double zoomLevel = bookmarkObject.getZoomLevel();
        var result = updateBookmark( id, rowVersion, view, name, timestamp, latitude, longitude, zoomLevel );
        if( result.isSuccess( ) ) {
            bookmarkObject.setRowVersion(result.getRowVersion());
            bookmarkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBookmark( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BookmarkDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBookmark( BookmarkObject bookmarkObject ) throws SQLException {
        var id = bookmarkObject.getId( );
        var rowVersion = bookmarkObject.getRowVersion();
        var result = deleteBookmark( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBooleanTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Boolean value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BooleanTimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableBoolean(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBooleanTimeseriesValue( BooleanTimeseriesValueObject booleanTimeseriesValueObject ) throws SQLException {
        Guid id = booleanTimeseriesValueObject.getId( );
        Guid timeseries = booleanTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = booleanTimeseriesValueObject.getTimestamp( );
        Boolean value = booleanTimeseriesValueObject.getValue( );
        var result = insertBooleanTimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            booleanTimeseriesValueObject.setId(result.getId());
            booleanTimeseriesValueObject.setRowVersion(0);
            booleanTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateBooleanTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Boolean value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BooleanTimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableBoolean(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBooleanTimeseriesValue( BooleanTimeseriesValueObject booleanTimeseriesValueObject ) throws SQLException {
        Guid id = booleanTimeseriesValueObject.getId();
        long rowVersion = booleanTimeseriesValueObject.getRowVersion();
        Guid timeseries = booleanTimeseriesValueObject.getTimeseries();
        DateTime timestamp = booleanTimeseriesValueObject.getTimestamp();
        Boolean value = booleanTimeseriesValueObject.getValue();
        var result = updateBooleanTimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            booleanTimeseriesValueObject.setRowVersion(result.getRowVersion());
            booleanTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBooleanTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BooleanTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBooleanTimeseriesValue( BooleanTimeseriesValueObject booleanTimeseriesValueObject ) throws SQLException {
        var id = booleanTimeseriesValueObject.getId( );
        var rowVersion = booleanTimeseriesValueObject.getRowVersion();
        var result = deleteBooleanTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertByteTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Byte value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ByteTimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableUInt8(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertByteTimeseriesValue( ByteTimeseriesValueObject byteTimeseriesValueObject ) throws SQLException {
        Guid id = byteTimeseriesValueObject.getId( );
        Guid timeseries = byteTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = byteTimeseriesValueObject.getTimestamp( );
        Byte value = byteTimeseriesValueObject.getValue( );
        var result = insertByteTimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            byteTimeseriesValueObject.setId(result.getId());
            byteTimeseriesValueObject.setRowVersion(0);
            byteTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateByteTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Byte value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ByteTimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableUInt8(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateByteTimeseriesValue( ByteTimeseriesValueObject byteTimeseriesValueObject ) throws SQLException {
        Guid id = byteTimeseriesValueObject.getId();
        long rowVersion = byteTimeseriesValueObject.getRowVersion();
        Guid timeseries = byteTimeseriesValueObject.getTimeseries();
        DateTime timestamp = byteTimeseriesValueObject.getTimestamp();
        Byte value = byteTimeseriesValueObject.getValue();
        var result = updateByteTimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            byteTimeseriesValueObject.setRowVersion(result.getRowVersion());
            byteTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteByteTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ByteTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteByteTimeseriesValue( ByteTimeseriesValueObject byteTimeseriesValueObject ) throws SQLException {
        var id = byteTimeseriesValueObject.getId( );
        var rowVersion = byteTimeseriesValueObject.getRowVersion();
        var result = deleteByteTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommand( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommand( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommand( CameraCommandObject cameraCommandObject ) throws SQLException {
        Guid id = cameraCommandObject.getId( );
        Guid camera = cameraCommandObject.getCamera( );
        DateTime timestamp = cameraCommandObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandObject.getReply( );
        var result = insertCameraCommand( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            cameraCommandObject.setId(result.getId());
            cameraCommandObject.setRowVersion(0);
            cameraCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommand( CameraCommandObject cameraCommandObject ) throws SQLException {
        Guid id = cameraCommandObject.getId( );
        Guid camera = cameraCommandObject.getCamera( );
        DateTime timestamp = cameraCommandObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandObject.getDeviceCommandSourceId( );
        var result = insert1CameraCommand( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            cameraCommandObject.setId( result.getId( ) );
            cameraCommandObject.setRowVersion(0);
            cameraCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommand( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommand( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommand( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommand( CameraCommandObject cameraCommandObject ) throws SQLException {
        Guid id = cameraCommandObject.getId();
        long rowVersion = cameraCommandObject.getRowVersion();
        Guid camera = cameraCommandObject.getCamera();
        DateTime timestamp = cameraCommandObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandObject.getReply();
        var result = updateCameraCommand( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            cameraCommandObject.setRowVersion(result.getRowVersion());
            cameraCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommand( CameraCommandObject cameraCommandObject ) throws SQLException {
        Guid id = cameraCommandObject.getId();
        long rowVersion = cameraCommandObject.getRowVersion();
        Guid camera = cameraCommandObject.getCamera();
        DateTime timestamp = cameraCommandObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandObject.getDeviceCommandSourceId();
        var result = update1CameraCommand( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            cameraCommandObject.setRowVersion(result.getRowVersion());
            cameraCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommand( CameraCommandObject cameraCommandObject ) throws SQLException {
        Guid id = cameraCommandObject.getId();
        long rowVersion = cameraCommandObject.getRowVersion();
        Guid reply = cameraCommandObject.getReply();
        var result = update2CameraCommand( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandObject.setRowVersion(result.getRowVersion());
            cameraCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommand( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommand( CameraCommandObject cameraCommandObject ) throws SQLException {
        var id = cameraCommandObject.getId( );
        var rowVersion = cameraCommandObject.getRowVersion();
        var result = deleteCameraCommand( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandAbsoluteMove( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, int positionPanTiltMode, Double panAngle, Double tiltAngle, int positionFocalLengthMode, Double focalLength, int speedPanTiltMode, Double panSpeed, Double tiltSpeed, int speedFocalLengthMode, Double zoomSpeed ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandAbsoluteMoveInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.setInt32(7, positionPanTiltMode);
            callableStatement.setNullableDouble(8, panAngle);
            callableStatement.setNullableDouble(9, tiltAngle);
            callableStatement.setInt32(10, positionFocalLengthMode);
            callableStatement.setNullableDouble(11, focalLength);
            callableStatement.setInt32(12, speedPanTiltMode);
            callableStatement.setNullableDouble(13, panSpeed);
            callableStatement.setNullableDouble(14, tiltSpeed);
            callableStatement.setInt32(15, speedFocalLengthMode);
            callableStatement.setNullableDouble(16, zoomSpeed);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandAbsoluteMove( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, int positionPanTiltMode, Double panAngle, Double tiltAngle, int positionFocalLengthMode, Double focalLength, int speedPanTiltMode, Double panSpeed, Double tiltSpeed, int speedFocalLengthMode, Double zoomSpeed ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandAbsoluteMoveInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setInt32(6, positionPanTiltMode);
            callableStatement.setNullableDouble(7, panAngle);
            callableStatement.setNullableDouble(8, tiltAngle);
            callableStatement.setInt32(9, positionFocalLengthMode);
            callableStatement.setNullableDouble(10, focalLength);
            callableStatement.setInt32(11, speedPanTiltMode);
            callableStatement.setNullableDouble(12, panSpeed);
            callableStatement.setNullableDouble(13, tiltSpeed);
            callableStatement.setInt32(14, speedFocalLengthMode);
            callableStatement.setNullableDouble(15, zoomSpeed);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandAbsoluteMove( CameraCommandAbsoluteMoveObject cameraCommandAbsoluteMoveObject ) throws SQLException {
        Guid id = cameraCommandAbsoluteMoveObject.getId( );
        Guid camera = cameraCommandAbsoluteMoveObject.getCamera( );
        DateTime timestamp = cameraCommandAbsoluteMoveObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandAbsoluteMoveObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandAbsoluteMoveObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandAbsoluteMoveObject.getReply( );
        int positionPanTiltMode = cameraCommandAbsoluteMoveObject.getPositionPanTiltMode( );
        Double panAngle = cameraCommandAbsoluteMoveObject.getPanAngle( );
        Double tiltAngle = cameraCommandAbsoluteMoveObject.getTiltAngle( );
        int positionFocalLengthMode = cameraCommandAbsoluteMoveObject.getPositionFocalLengthMode( );
        Double focalLength = cameraCommandAbsoluteMoveObject.getFocalLength( );
        int speedPanTiltMode = cameraCommandAbsoluteMoveObject.getSpeedPanTiltMode( );
        Double panSpeed = cameraCommandAbsoluteMoveObject.getPanSpeed( );
        Double tiltSpeed = cameraCommandAbsoluteMoveObject.getTiltSpeed( );
        int speedFocalLengthMode = cameraCommandAbsoluteMoveObject.getSpeedFocalLengthMode( );
        Double zoomSpeed = cameraCommandAbsoluteMoveObject.getZoomSpeed( );
        var result = insertCameraCommandAbsoluteMove( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, positionPanTiltMode, panAngle, tiltAngle, positionFocalLengthMode, focalLength, speedPanTiltMode, panSpeed, tiltSpeed, speedFocalLengthMode, zoomSpeed );
        if( result.isSuccess() ) {
            cameraCommandAbsoluteMoveObject.setId(result.getId());
            cameraCommandAbsoluteMoveObject.setRowVersion(0);
            cameraCommandAbsoluteMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandAbsoluteMove( CameraCommandAbsoluteMoveObject cameraCommandAbsoluteMoveObject ) throws SQLException {
        Guid id = cameraCommandAbsoluteMoveObject.getId( );
        Guid camera = cameraCommandAbsoluteMoveObject.getCamera( );
        DateTime timestamp = cameraCommandAbsoluteMoveObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandAbsoluteMoveObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandAbsoluteMoveObject.getDeviceCommandSourceId( );
        int positionPanTiltMode = cameraCommandAbsoluteMoveObject.getPositionPanTiltMode( );
        Double panAngle = cameraCommandAbsoluteMoveObject.getPanAngle( );
        Double tiltAngle = cameraCommandAbsoluteMoveObject.getTiltAngle( );
        int positionFocalLengthMode = cameraCommandAbsoluteMoveObject.getPositionFocalLengthMode( );
        Double focalLength = cameraCommandAbsoluteMoveObject.getFocalLength( );
        int speedPanTiltMode = cameraCommandAbsoluteMoveObject.getSpeedPanTiltMode( );
        Double panSpeed = cameraCommandAbsoluteMoveObject.getPanSpeed( );
        Double tiltSpeed = cameraCommandAbsoluteMoveObject.getTiltSpeed( );
        int speedFocalLengthMode = cameraCommandAbsoluteMoveObject.getSpeedFocalLengthMode( );
        Double zoomSpeed = cameraCommandAbsoluteMoveObject.getZoomSpeed( );
        var result = insert1CameraCommandAbsoluteMove( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, positionPanTiltMode, panAngle, tiltAngle, positionFocalLengthMode, focalLength, speedPanTiltMode, panSpeed, tiltSpeed, speedFocalLengthMode, zoomSpeed );
        if( result.isSuccess( ) ) {
            cameraCommandAbsoluteMoveObject.setId( result.getId( ) );
            cameraCommandAbsoluteMoveObject.setRowVersion(0);
            cameraCommandAbsoluteMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandAbsoluteMove( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, int positionPanTiltMode, Double panAngle, Double tiltAngle, int positionFocalLengthMode, Double focalLength, int speedPanTiltMode, Double panSpeed, Double tiltSpeed, int speedFocalLengthMode, Double zoomSpeed ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandAbsoluteMoveUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.setInt32(8, positionPanTiltMode);
            callableStatement.setNullableDouble(9, panAngle);
            callableStatement.setNullableDouble(10, tiltAngle);
            callableStatement.setInt32(11, positionFocalLengthMode);
            callableStatement.setNullableDouble(12, focalLength);
            callableStatement.setInt32(13, speedPanTiltMode);
            callableStatement.setNullableDouble(14, panSpeed);
            callableStatement.setNullableDouble(15, tiltSpeed);
            callableStatement.setInt32(16, speedFocalLengthMode);
            callableStatement.setNullableDouble(17, zoomSpeed);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandAbsoluteMove( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, int positionPanTiltMode, Double panAngle, Double tiltAngle, int positionFocalLengthMode, Double focalLength, int speedPanTiltMode, Double panSpeed, Double tiltSpeed, int speedFocalLengthMode, Double zoomSpeed ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandAbsoluteMoveUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setInt32(7, positionPanTiltMode);
            callableStatement.setNullableDouble(8, panAngle);
            callableStatement.setNullableDouble(9, tiltAngle);
            callableStatement.setInt32(10, positionFocalLengthMode);
            callableStatement.setNullableDouble(11, focalLength);
            callableStatement.setInt32(12, speedPanTiltMode);
            callableStatement.setNullableDouble(13, panSpeed);
            callableStatement.setNullableDouble(14, tiltSpeed);
            callableStatement.setInt32(15, speedFocalLengthMode);
            callableStatement.setNullableDouble(16, zoomSpeed);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandAbsoluteMove( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandAbsoluteMoveUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandAbsoluteMove( CameraCommandAbsoluteMoveObject cameraCommandAbsoluteMoveObject ) throws SQLException {
        Guid id = cameraCommandAbsoluteMoveObject.getId();
        long rowVersion = cameraCommandAbsoluteMoveObject.getRowVersion();
        Guid camera = cameraCommandAbsoluteMoveObject.getCamera();
        DateTime timestamp = cameraCommandAbsoluteMoveObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandAbsoluteMoveObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandAbsoluteMoveObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandAbsoluteMoveObject.getReply();
        int positionPanTiltMode = cameraCommandAbsoluteMoveObject.getPositionPanTiltMode();
        Double panAngle = cameraCommandAbsoluteMoveObject.getPanAngle();
        Double tiltAngle = cameraCommandAbsoluteMoveObject.getTiltAngle();
        int positionFocalLengthMode = cameraCommandAbsoluteMoveObject.getPositionFocalLengthMode();
        Double focalLength = cameraCommandAbsoluteMoveObject.getFocalLength();
        int speedPanTiltMode = cameraCommandAbsoluteMoveObject.getSpeedPanTiltMode();
        Double panSpeed = cameraCommandAbsoluteMoveObject.getPanSpeed();
        Double tiltSpeed = cameraCommandAbsoluteMoveObject.getTiltSpeed();
        int speedFocalLengthMode = cameraCommandAbsoluteMoveObject.getSpeedFocalLengthMode();
        Double zoomSpeed = cameraCommandAbsoluteMoveObject.getZoomSpeed();
        var result = updateCameraCommandAbsoluteMove( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, positionPanTiltMode, panAngle, tiltAngle, positionFocalLengthMode, focalLength, speedPanTiltMode, panSpeed, tiltSpeed, speedFocalLengthMode, zoomSpeed );
        if( result.isSuccess( ) ) {
            cameraCommandAbsoluteMoveObject.setRowVersion(result.getRowVersion());
            cameraCommandAbsoluteMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandAbsoluteMove( CameraCommandAbsoluteMoveObject cameraCommandAbsoluteMoveObject ) throws SQLException {
        Guid id = cameraCommandAbsoluteMoveObject.getId();
        long rowVersion = cameraCommandAbsoluteMoveObject.getRowVersion();
        Guid camera = cameraCommandAbsoluteMoveObject.getCamera();
        DateTime timestamp = cameraCommandAbsoluteMoveObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandAbsoluteMoveObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandAbsoluteMoveObject.getDeviceCommandSourceId();
        int positionPanTiltMode = cameraCommandAbsoluteMoveObject.getPositionPanTiltMode();
        Double panAngle = cameraCommandAbsoluteMoveObject.getPanAngle();
        Double tiltAngle = cameraCommandAbsoluteMoveObject.getTiltAngle();
        int positionFocalLengthMode = cameraCommandAbsoluteMoveObject.getPositionFocalLengthMode();
        Double focalLength = cameraCommandAbsoluteMoveObject.getFocalLength();
        int speedPanTiltMode = cameraCommandAbsoluteMoveObject.getSpeedPanTiltMode();
        Double panSpeed = cameraCommandAbsoluteMoveObject.getPanSpeed();
        Double tiltSpeed = cameraCommandAbsoluteMoveObject.getTiltSpeed();
        int speedFocalLengthMode = cameraCommandAbsoluteMoveObject.getSpeedFocalLengthMode();
        Double zoomSpeed = cameraCommandAbsoluteMoveObject.getZoomSpeed();
        var result = update1CameraCommandAbsoluteMove( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, positionPanTiltMode, panAngle, tiltAngle, positionFocalLengthMode, focalLength, speedPanTiltMode, panSpeed, tiltSpeed, speedFocalLengthMode, zoomSpeed );
        if( result.isSuccess( ) ) {
            cameraCommandAbsoluteMoveObject.setRowVersion(result.getRowVersion());
            cameraCommandAbsoluteMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandAbsoluteMove( CameraCommandAbsoluteMoveObject cameraCommandAbsoluteMoveObject ) throws SQLException {
        Guid id = cameraCommandAbsoluteMoveObject.getId();
        long rowVersion = cameraCommandAbsoluteMoveObject.getRowVersion();
        Guid reply = cameraCommandAbsoluteMoveObject.getReply();
        var result = update2CameraCommandAbsoluteMove( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandAbsoluteMoveObject.setRowVersion(result.getRowVersion());
            cameraCommandAbsoluteMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandAbsoluteMove( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandAbsoluteMoveDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandAbsoluteMove( CameraCommandAbsoluteMoveObject cameraCommandAbsoluteMoveObject ) throws SQLException {
        var id = cameraCommandAbsoluteMoveObject.getId( );
        var rowVersion = cameraCommandAbsoluteMoveObject.getRowVersion();
        var result = deleteCameraCommandAbsoluteMove( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandAdjustPanTiltZoom( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, Double x, Double y, Double z ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandAdjustPanTiltZoomInsert(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.setNullableDouble(7, x);
            callableStatement.setNullableDouble(8, y);
            callableStatement.setNullableDouble(9, z);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandAdjustPanTiltZoom( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Double x, Double y, Double z ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandAdjustPanTiltZoomInsert1(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableDouble(6, x);
            callableStatement.setNullableDouble(7, y);
            callableStatement.setNullableDouble(8, z);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandAdjustPanTiltZoom( CameraCommandAdjustPanTiltZoomObject cameraCommandAdjustPanTiltZoomObject ) throws SQLException {
        Guid id = cameraCommandAdjustPanTiltZoomObject.getId( );
        Guid camera = cameraCommandAdjustPanTiltZoomObject.getCamera( );
        DateTime timestamp = cameraCommandAdjustPanTiltZoomObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandAdjustPanTiltZoomObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandAdjustPanTiltZoomObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandAdjustPanTiltZoomObject.getReply( );
        Double x = cameraCommandAdjustPanTiltZoomObject.getX( );
        Double y = cameraCommandAdjustPanTiltZoomObject.getY( );
        Double z = cameraCommandAdjustPanTiltZoomObject.getZ( );
        var result = insertCameraCommandAdjustPanTiltZoom( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, x, y, z );
        if( result.isSuccess() ) {
            cameraCommandAdjustPanTiltZoomObject.setId(result.getId());
            cameraCommandAdjustPanTiltZoomObject.setRowVersion(0);
            cameraCommandAdjustPanTiltZoomObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandAdjustPanTiltZoom( CameraCommandAdjustPanTiltZoomObject cameraCommandAdjustPanTiltZoomObject ) throws SQLException {
        Guid id = cameraCommandAdjustPanTiltZoomObject.getId( );
        Guid camera = cameraCommandAdjustPanTiltZoomObject.getCamera( );
        DateTime timestamp = cameraCommandAdjustPanTiltZoomObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandAdjustPanTiltZoomObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandAdjustPanTiltZoomObject.getDeviceCommandSourceId( );
        Double x = cameraCommandAdjustPanTiltZoomObject.getX( );
        Double y = cameraCommandAdjustPanTiltZoomObject.getY( );
        Double z = cameraCommandAdjustPanTiltZoomObject.getZ( );
        var result = insert1CameraCommandAdjustPanTiltZoom( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, x, y, z );
        if( result.isSuccess( ) ) {
            cameraCommandAdjustPanTiltZoomObject.setId( result.getId( ) );
            cameraCommandAdjustPanTiltZoomObject.setRowVersion(0);
            cameraCommandAdjustPanTiltZoomObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandAdjustPanTiltZoom( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, Double x, Double y, Double z ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandAdjustPanTiltZoomUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.setNullableDouble(8, x);
            callableStatement.setNullableDouble(9, y);
            callableStatement.setNullableDouble(10, z);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandAdjustPanTiltZoom( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Double x, Double y, Double z ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandAdjustPanTiltZoomUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableDouble(7, x);
            callableStatement.setNullableDouble(8, y);
            callableStatement.setNullableDouble(9, z);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandAdjustPanTiltZoom( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandAdjustPanTiltZoomUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandAdjustPanTiltZoom( CameraCommandAdjustPanTiltZoomObject cameraCommandAdjustPanTiltZoomObject ) throws SQLException {
        Guid id = cameraCommandAdjustPanTiltZoomObject.getId();
        long rowVersion = cameraCommandAdjustPanTiltZoomObject.getRowVersion();
        Guid camera = cameraCommandAdjustPanTiltZoomObject.getCamera();
        DateTime timestamp = cameraCommandAdjustPanTiltZoomObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandAdjustPanTiltZoomObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandAdjustPanTiltZoomObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandAdjustPanTiltZoomObject.getReply();
        Double x = cameraCommandAdjustPanTiltZoomObject.getX();
        Double y = cameraCommandAdjustPanTiltZoomObject.getY();
        Double z = cameraCommandAdjustPanTiltZoomObject.getZ();
        var result = updateCameraCommandAdjustPanTiltZoom( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, x, y, z );
        if( result.isSuccess( ) ) {
            cameraCommandAdjustPanTiltZoomObject.setRowVersion(result.getRowVersion());
            cameraCommandAdjustPanTiltZoomObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandAdjustPanTiltZoom( CameraCommandAdjustPanTiltZoomObject cameraCommandAdjustPanTiltZoomObject ) throws SQLException {
        Guid id = cameraCommandAdjustPanTiltZoomObject.getId();
        long rowVersion = cameraCommandAdjustPanTiltZoomObject.getRowVersion();
        Guid camera = cameraCommandAdjustPanTiltZoomObject.getCamera();
        DateTime timestamp = cameraCommandAdjustPanTiltZoomObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandAdjustPanTiltZoomObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandAdjustPanTiltZoomObject.getDeviceCommandSourceId();
        Double x = cameraCommandAdjustPanTiltZoomObject.getX();
        Double y = cameraCommandAdjustPanTiltZoomObject.getY();
        Double z = cameraCommandAdjustPanTiltZoomObject.getZ();
        var result = update1CameraCommandAdjustPanTiltZoom( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, x, y, z );
        if( result.isSuccess( ) ) {
            cameraCommandAdjustPanTiltZoomObject.setRowVersion(result.getRowVersion());
            cameraCommandAdjustPanTiltZoomObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandAdjustPanTiltZoom( CameraCommandAdjustPanTiltZoomObject cameraCommandAdjustPanTiltZoomObject ) throws SQLException {
        Guid id = cameraCommandAdjustPanTiltZoomObject.getId();
        long rowVersion = cameraCommandAdjustPanTiltZoomObject.getRowVersion();
        Guid reply = cameraCommandAdjustPanTiltZoomObject.getReply();
        var result = update2CameraCommandAdjustPanTiltZoom( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandAdjustPanTiltZoomObject.setRowVersion(result.getRowVersion());
            cameraCommandAdjustPanTiltZoomObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandAdjustPanTiltZoom( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandAdjustPanTiltZoomDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandAdjustPanTiltZoom( CameraCommandAdjustPanTiltZoomObject cameraCommandAdjustPanTiltZoomObject ) throws SQLException {
        var id = cameraCommandAdjustPanTiltZoomObject.getId( );
        var rowVersion = cameraCommandAdjustPanTiltZoomObject.getRowVersion();
        var result = deleteCameraCommandAdjustPanTiltZoom( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandContinuousMove( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean normalized, Double panVelocity, Double tiltVelocity, Double zoomVelocity, TimeSpan duration ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandContinuousMoveInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.setBoolean(7, normalized);
            callableStatement.setNullableDouble(8, panVelocity);
            callableStatement.setNullableDouble(9, tiltVelocity);
            callableStatement.setNullableDouble(10, zoomVelocity);
            callableStatement.setNullableTimeSpan(11, duration);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandContinuousMove( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean normalized, Double panVelocity, Double tiltVelocity, Double zoomVelocity, TimeSpan duration ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandContinuousMoveInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setBoolean(6, normalized);
            callableStatement.setNullableDouble(7, panVelocity);
            callableStatement.setNullableDouble(8, tiltVelocity);
            callableStatement.setNullableDouble(9, zoomVelocity);
            callableStatement.setNullableTimeSpan(10, duration);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandContinuousMove( CameraCommandContinuousMoveObject cameraCommandContinuousMoveObject ) throws SQLException {
        Guid id = cameraCommandContinuousMoveObject.getId( );
        Guid camera = cameraCommandContinuousMoveObject.getCamera( );
        DateTime timestamp = cameraCommandContinuousMoveObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandContinuousMoveObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandContinuousMoveObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandContinuousMoveObject.getReply( );
        boolean normalized = cameraCommandContinuousMoveObject.getNormalized( );
        Double panVelocity = cameraCommandContinuousMoveObject.getPanVelocity( );
        Double tiltVelocity = cameraCommandContinuousMoveObject.getTiltVelocity( );
        Double zoomVelocity = cameraCommandContinuousMoveObject.getZoomVelocity( );
        TimeSpan duration = cameraCommandContinuousMoveObject.getDuration( );
        var result = insertCameraCommandContinuousMove( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, normalized, panVelocity, tiltVelocity, zoomVelocity, duration );
        if( result.isSuccess() ) {
            cameraCommandContinuousMoveObject.setId(result.getId());
            cameraCommandContinuousMoveObject.setRowVersion(0);
            cameraCommandContinuousMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandContinuousMove( CameraCommandContinuousMoveObject cameraCommandContinuousMoveObject ) throws SQLException {
        Guid id = cameraCommandContinuousMoveObject.getId( );
        Guid camera = cameraCommandContinuousMoveObject.getCamera( );
        DateTime timestamp = cameraCommandContinuousMoveObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandContinuousMoveObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandContinuousMoveObject.getDeviceCommandSourceId( );
        boolean normalized = cameraCommandContinuousMoveObject.getNormalized( );
        Double panVelocity = cameraCommandContinuousMoveObject.getPanVelocity( );
        Double tiltVelocity = cameraCommandContinuousMoveObject.getTiltVelocity( );
        Double zoomVelocity = cameraCommandContinuousMoveObject.getZoomVelocity( );
        TimeSpan duration = cameraCommandContinuousMoveObject.getDuration( );
        var result = insert1CameraCommandContinuousMove( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, normalized, panVelocity, tiltVelocity, zoomVelocity, duration );
        if( result.isSuccess( ) ) {
            cameraCommandContinuousMoveObject.setId( result.getId( ) );
            cameraCommandContinuousMoveObject.setRowVersion(0);
            cameraCommandContinuousMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandContinuousMove( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean normalized, Double panVelocity, Double tiltVelocity, Double zoomVelocity, TimeSpan duration ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandContinuousMoveUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.setBoolean(8, normalized);
            callableStatement.setNullableDouble(9, panVelocity);
            callableStatement.setNullableDouble(10, tiltVelocity);
            callableStatement.setNullableDouble(11, zoomVelocity);
            callableStatement.setNullableTimeSpan(12, duration);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandContinuousMove( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean normalized, Double panVelocity, Double tiltVelocity, Double zoomVelocity, TimeSpan duration ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandContinuousMoveUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setBoolean(7, normalized);
            callableStatement.setNullableDouble(8, panVelocity);
            callableStatement.setNullableDouble(9, tiltVelocity);
            callableStatement.setNullableDouble(10, zoomVelocity);
            callableStatement.setNullableTimeSpan(11, duration);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandContinuousMove( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandContinuousMoveUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandContinuousMove( CameraCommandContinuousMoveObject cameraCommandContinuousMoveObject ) throws SQLException {
        Guid id = cameraCommandContinuousMoveObject.getId();
        long rowVersion = cameraCommandContinuousMoveObject.getRowVersion();
        Guid camera = cameraCommandContinuousMoveObject.getCamera();
        DateTime timestamp = cameraCommandContinuousMoveObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandContinuousMoveObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandContinuousMoveObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandContinuousMoveObject.getReply();
        boolean normalized = cameraCommandContinuousMoveObject.getNormalized();
        Double panVelocity = cameraCommandContinuousMoveObject.getPanVelocity();
        Double tiltVelocity = cameraCommandContinuousMoveObject.getTiltVelocity();
        Double zoomVelocity = cameraCommandContinuousMoveObject.getZoomVelocity();
        TimeSpan duration = cameraCommandContinuousMoveObject.getDuration();
        var result = updateCameraCommandContinuousMove( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, normalized, panVelocity, tiltVelocity, zoomVelocity, duration );
        if( result.isSuccess( ) ) {
            cameraCommandContinuousMoveObject.setRowVersion(result.getRowVersion());
            cameraCommandContinuousMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandContinuousMove( CameraCommandContinuousMoveObject cameraCommandContinuousMoveObject ) throws SQLException {
        Guid id = cameraCommandContinuousMoveObject.getId();
        long rowVersion = cameraCommandContinuousMoveObject.getRowVersion();
        Guid camera = cameraCommandContinuousMoveObject.getCamera();
        DateTime timestamp = cameraCommandContinuousMoveObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandContinuousMoveObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandContinuousMoveObject.getDeviceCommandSourceId();
        boolean normalized = cameraCommandContinuousMoveObject.getNormalized();
        Double panVelocity = cameraCommandContinuousMoveObject.getPanVelocity();
        Double tiltVelocity = cameraCommandContinuousMoveObject.getTiltVelocity();
        Double zoomVelocity = cameraCommandContinuousMoveObject.getZoomVelocity();
        TimeSpan duration = cameraCommandContinuousMoveObject.getDuration();
        var result = update1CameraCommandContinuousMove( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, normalized, panVelocity, tiltVelocity, zoomVelocity, duration );
        if( result.isSuccess( ) ) {
            cameraCommandContinuousMoveObject.setRowVersion(result.getRowVersion());
            cameraCommandContinuousMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandContinuousMove( CameraCommandContinuousMoveObject cameraCommandContinuousMoveObject ) throws SQLException {
        Guid id = cameraCommandContinuousMoveObject.getId();
        long rowVersion = cameraCommandContinuousMoveObject.getRowVersion();
        Guid reply = cameraCommandContinuousMoveObject.getReply();
        var result = update2CameraCommandContinuousMove( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandContinuousMoveObject.setRowVersion(result.getRowVersion());
            cameraCommandContinuousMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandContinuousMove( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandContinuousMoveDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandContinuousMove( CameraCommandContinuousMoveObject cameraCommandContinuousMoveObject ) throws SQLException {
        var id = cameraCommandContinuousMoveObject.getId( );
        var rowVersion = cameraCommandContinuousMoveObject.getRowVersion();
        var result = deleteCameraCommandContinuousMove( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandGeoMove( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, double latitude, double longitude, Double altitude, Double viewportWidth, Double viewportHeight ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandGeoMoveInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.setDouble(7, latitude);
            callableStatement.setDouble(8, longitude);
            callableStatement.setNullableDouble(9, altitude);
            callableStatement.setNullableDouble(10, viewportWidth);
            callableStatement.setNullableDouble(11, viewportHeight);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandGeoMove( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, double latitude, double longitude, Double altitude, Double viewportWidth, Double viewportHeight ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandGeoMoveInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setDouble(6, latitude);
            callableStatement.setDouble(7, longitude);
            callableStatement.setNullableDouble(8, altitude);
            callableStatement.setNullableDouble(9, viewportWidth);
            callableStatement.setNullableDouble(10, viewportHeight);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandGeoMove( CameraCommandGeoMoveObject cameraCommandGeoMoveObject ) throws SQLException {
        Guid id = cameraCommandGeoMoveObject.getId( );
        Guid camera = cameraCommandGeoMoveObject.getCamera( );
        DateTime timestamp = cameraCommandGeoMoveObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandGeoMoveObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandGeoMoveObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandGeoMoveObject.getReply( );
        double latitude = cameraCommandGeoMoveObject.getLatitude( );
        double longitude = cameraCommandGeoMoveObject.getLongitude( );
        Double altitude = cameraCommandGeoMoveObject.getAltitude( );
        Double viewportWidth = cameraCommandGeoMoveObject.getViewportWidth( );
        Double viewportHeight = cameraCommandGeoMoveObject.getViewportHeight( );
        var result = insertCameraCommandGeoMove( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, latitude, longitude, altitude, viewportWidth, viewportHeight );
        if( result.isSuccess() ) {
            cameraCommandGeoMoveObject.setId(result.getId());
            cameraCommandGeoMoveObject.setRowVersion(0);
            cameraCommandGeoMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandGeoMove( CameraCommandGeoMoveObject cameraCommandGeoMoveObject ) throws SQLException {
        Guid id = cameraCommandGeoMoveObject.getId( );
        Guid camera = cameraCommandGeoMoveObject.getCamera( );
        DateTime timestamp = cameraCommandGeoMoveObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandGeoMoveObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandGeoMoveObject.getDeviceCommandSourceId( );
        double latitude = cameraCommandGeoMoveObject.getLatitude( );
        double longitude = cameraCommandGeoMoveObject.getLongitude( );
        Double altitude = cameraCommandGeoMoveObject.getAltitude( );
        Double viewportWidth = cameraCommandGeoMoveObject.getViewportWidth( );
        Double viewportHeight = cameraCommandGeoMoveObject.getViewportHeight( );
        var result = insert1CameraCommandGeoMove( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, latitude, longitude, altitude, viewportWidth, viewportHeight );
        if( result.isSuccess( ) ) {
            cameraCommandGeoMoveObject.setId( result.getId( ) );
            cameraCommandGeoMoveObject.setRowVersion(0);
            cameraCommandGeoMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandGeoMove( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, double latitude, double longitude, Double altitude, Double viewportWidth, Double viewportHeight ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandGeoMoveUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.setDouble(8, latitude);
            callableStatement.setDouble(9, longitude);
            callableStatement.setNullableDouble(10, altitude);
            callableStatement.setNullableDouble(11, viewportWidth);
            callableStatement.setNullableDouble(12, viewportHeight);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandGeoMove( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, double latitude, double longitude, Double altitude, Double viewportWidth, Double viewportHeight ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandGeoMoveUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setDouble(7, latitude);
            callableStatement.setDouble(8, longitude);
            callableStatement.setNullableDouble(9, altitude);
            callableStatement.setNullableDouble(10, viewportWidth);
            callableStatement.setNullableDouble(11, viewportHeight);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandGeoMove( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandGeoMoveUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandGeoMove( CameraCommandGeoMoveObject cameraCommandGeoMoveObject ) throws SQLException {
        Guid id = cameraCommandGeoMoveObject.getId();
        long rowVersion = cameraCommandGeoMoveObject.getRowVersion();
        Guid camera = cameraCommandGeoMoveObject.getCamera();
        DateTime timestamp = cameraCommandGeoMoveObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandGeoMoveObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandGeoMoveObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandGeoMoveObject.getReply();
        double latitude = cameraCommandGeoMoveObject.getLatitude();
        double longitude = cameraCommandGeoMoveObject.getLongitude();
        Double altitude = cameraCommandGeoMoveObject.getAltitude();
        Double viewportWidth = cameraCommandGeoMoveObject.getViewportWidth();
        Double viewportHeight = cameraCommandGeoMoveObject.getViewportHeight();
        var result = updateCameraCommandGeoMove( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, latitude, longitude, altitude, viewportWidth, viewportHeight );
        if( result.isSuccess( ) ) {
            cameraCommandGeoMoveObject.setRowVersion(result.getRowVersion());
            cameraCommandGeoMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandGeoMove( CameraCommandGeoMoveObject cameraCommandGeoMoveObject ) throws SQLException {
        Guid id = cameraCommandGeoMoveObject.getId();
        long rowVersion = cameraCommandGeoMoveObject.getRowVersion();
        Guid camera = cameraCommandGeoMoveObject.getCamera();
        DateTime timestamp = cameraCommandGeoMoveObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandGeoMoveObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandGeoMoveObject.getDeviceCommandSourceId();
        double latitude = cameraCommandGeoMoveObject.getLatitude();
        double longitude = cameraCommandGeoMoveObject.getLongitude();
        Double altitude = cameraCommandGeoMoveObject.getAltitude();
        Double viewportWidth = cameraCommandGeoMoveObject.getViewportWidth();
        Double viewportHeight = cameraCommandGeoMoveObject.getViewportHeight();
        var result = update1CameraCommandGeoMove( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, latitude, longitude, altitude, viewportWidth, viewportHeight );
        if( result.isSuccess( ) ) {
            cameraCommandGeoMoveObject.setRowVersion(result.getRowVersion());
            cameraCommandGeoMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandGeoMove( CameraCommandGeoMoveObject cameraCommandGeoMoveObject ) throws SQLException {
        Guid id = cameraCommandGeoMoveObject.getId();
        long rowVersion = cameraCommandGeoMoveObject.getRowVersion();
        Guid reply = cameraCommandGeoMoveObject.getReply();
        var result = update2CameraCommandGeoMove( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandGeoMoveObject.setRowVersion(result.getRowVersion());
            cameraCommandGeoMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandGeoMove( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandGeoMoveDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandGeoMove( CameraCommandGeoMoveObject cameraCommandGeoMoveObject ) throws SQLException {
        var id = cameraCommandGeoMoveObject.getId( );
        var rowVersion = cameraCommandGeoMoveObject.getRowVersion();
        var result = deleteCameraCommandGeoMove( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandRelativeMove( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean normalized, Double panAngle, Double tiltAngle, Double focalLength, Double panSpeed, Double tiltSpeed, Double zoomSpeed ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandRelativeMoveInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.setBoolean(7, normalized);
            callableStatement.setNullableDouble(8, panAngle);
            callableStatement.setNullableDouble(9, tiltAngle);
            callableStatement.setNullableDouble(10, focalLength);
            callableStatement.setNullableDouble(11, panSpeed);
            callableStatement.setNullableDouble(12, tiltSpeed);
            callableStatement.setNullableDouble(13, zoomSpeed);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandRelativeMove( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean normalized, Double panAngle, Double tiltAngle, Double focalLength, Double panSpeed, Double tiltSpeed, Double zoomSpeed ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandRelativeMoveInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setBoolean(6, normalized);
            callableStatement.setNullableDouble(7, panAngle);
            callableStatement.setNullableDouble(8, tiltAngle);
            callableStatement.setNullableDouble(9, focalLength);
            callableStatement.setNullableDouble(10, panSpeed);
            callableStatement.setNullableDouble(11, tiltSpeed);
            callableStatement.setNullableDouble(12, zoomSpeed);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandRelativeMove( CameraCommandRelativeMoveObject cameraCommandRelativeMoveObject ) throws SQLException {
        Guid id = cameraCommandRelativeMoveObject.getId( );
        Guid camera = cameraCommandRelativeMoveObject.getCamera( );
        DateTime timestamp = cameraCommandRelativeMoveObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandRelativeMoveObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandRelativeMoveObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandRelativeMoveObject.getReply( );
        boolean normalized = cameraCommandRelativeMoveObject.getNormalized( );
        Double panAngle = cameraCommandRelativeMoveObject.getPanAngle( );
        Double tiltAngle = cameraCommandRelativeMoveObject.getTiltAngle( );
        Double focalLength = cameraCommandRelativeMoveObject.getFocalLength( );
        Double panSpeed = cameraCommandRelativeMoveObject.getPanSpeed( );
        Double tiltSpeed = cameraCommandRelativeMoveObject.getTiltSpeed( );
        Double zoomSpeed = cameraCommandRelativeMoveObject.getZoomSpeed( );
        var result = insertCameraCommandRelativeMove( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, normalized, panAngle, tiltAngle, focalLength, panSpeed, tiltSpeed, zoomSpeed );
        if( result.isSuccess() ) {
            cameraCommandRelativeMoveObject.setId(result.getId());
            cameraCommandRelativeMoveObject.setRowVersion(0);
            cameraCommandRelativeMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandRelativeMove( CameraCommandRelativeMoveObject cameraCommandRelativeMoveObject ) throws SQLException {
        Guid id = cameraCommandRelativeMoveObject.getId( );
        Guid camera = cameraCommandRelativeMoveObject.getCamera( );
        DateTime timestamp = cameraCommandRelativeMoveObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandRelativeMoveObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandRelativeMoveObject.getDeviceCommandSourceId( );
        boolean normalized = cameraCommandRelativeMoveObject.getNormalized( );
        Double panAngle = cameraCommandRelativeMoveObject.getPanAngle( );
        Double tiltAngle = cameraCommandRelativeMoveObject.getTiltAngle( );
        Double focalLength = cameraCommandRelativeMoveObject.getFocalLength( );
        Double panSpeed = cameraCommandRelativeMoveObject.getPanSpeed( );
        Double tiltSpeed = cameraCommandRelativeMoveObject.getTiltSpeed( );
        Double zoomSpeed = cameraCommandRelativeMoveObject.getZoomSpeed( );
        var result = insert1CameraCommandRelativeMove( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, normalized, panAngle, tiltAngle, focalLength, panSpeed, tiltSpeed, zoomSpeed );
        if( result.isSuccess( ) ) {
            cameraCommandRelativeMoveObject.setId( result.getId( ) );
            cameraCommandRelativeMoveObject.setRowVersion(0);
            cameraCommandRelativeMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandRelativeMove( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean normalized, Double panAngle, Double tiltAngle, Double focalLength, Double panSpeed, Double tiltSpeed, Double zoomSpeed ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandRelativeMoveUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.setBoolean(8, normalized);
            callableStatement.setNullableDouble(9, panAngle);
            callableStatement.setNullableDouble(10, tiltAngle);
            callableStatement.setNullableDouble(11, focalLength);
            callableStatement.setNullableDouble(12, panSpeed);
            callableStatement.setNullableDouble(13, tiltSpeed);
            callableStatement.setNullableDouble(14, zoomSpeed);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandRelativeMove( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean normalized, Double panAngle, Double tiltAngle, Double focalLength, Double panSpeed, Double tiltSpeed, Double zoomSpeed ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandRelativeMoveUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setBoolean(7, normalized);
            callableStatement.setNullableDouble(8, panAngle);
            callableStatement.setNullableDouble(9, tiltAngle);
            callableStatement.setNullableDouble(10, focalLength);
            callableStatement.setNullableDouble(11, panSpeed);
            callableStatement.setNullableDouble(12, tiltSpeed);
            callableStatement.setNullableDouble(13, zoomSpeed);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandRelativeMove( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandRelativeMoveUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandRelativeMove( CameraCommandRelativeMoveObject cameraCommandRelativeMoveObject ) throws SQLException {
        Guid id = cameraCommandRelativeMoveObject.getId();
        long rowVersion = cameraCommandRelativeMoveObject.getRowVersion();
        Guid camera = cameraCommandRelativeMoveObject.getCamera();
        DateTime timestamp = cameraCommandRelativeMoveObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandRelativeMoveObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandRelativeMoveObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandRelativeMoveObject.getReply();
        boolean normalized = cameraCommandRelativeMoveObject.getNormalized();
        Double panAngle = cameraCommandRelativeMoveObject.getPanAngle();
        Double tiltAngle = cameraCommandRelativeMoveObject.getTiltAngle();
        Double focalLength = cameraCommandRelativeMoveObject.getFocalLength();
        Double panSpeed = cameraCommandRelativeMoveObject.getPanSpeed();
        Double tiltSpeed = cameraCommandRelativeMoveObject.getTiltSpeed();
        Double zoomSpeed = cameraCommandRelativeMoveObject.getZoomSpeed();
        var result = updateCameraCommandRelativeMove( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, normalized, panAngle, tiltAngle, focalLength, panSpeed, tiltSpeed, zoomSpeed );
        if( result.isSuccess( ) ) {
            cameraCommandRelativeMoveObject.setRowVersion(result.getRowVersion());
            cameraCommandRelativeMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandRelativeMove( CameraCommandRelativeMoveObject cameraCommandRelativeMoveObject ) throws SQLException {
        Guid id = cameraCommandRelativeMoveObject.getId();
        long rowVersion = cameraCommandRelativeMoveObject.getRowVersion();
        Guid camera = cameraCommandRelativeMoveObject.getCamera();
        DateTime timestamp = cameraCommandRelativeMoveObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandRelativeMoveObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandRelativeMoveObject.getDeviceCommandSourceId();
        boolean normalized = cameraCommandRelativeMoveObject.getNormalized();
        Double panAngle = cameraCommandRelativeMoveObject.getPanAngle();
        Double tiltAngle = cameraCommandRelativeMoveObject.getTiltAngle();
        Double focalLength = cameraCommandRelativeMoveObject.getFocalLength();
        Double panSpeed = cameraCommandRelativeMoveObject.getPanSpeed();
        Double tiltSpeed = cameraCommandRelativeMoveObject.getTiltSpeed();
        Double zoomSpeed = cameraCommandRelativeMoveObject.getZoomSpeed();
        var result = update1CameraCommandRelativeMove( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, normalized, panAngle, tiltAngle, focalLength, panSpeed, tiltSpeed, zoomSpeed );
        if( result.isSuccess( ) ) {
            cameraCommandRelativeMoveObject.setRowVersion(result.getRowVersion());
            cameraCommandRelativeMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandRelativeMove( CameraCommandRelativeMoveObject cameraCommandRelativeMoveObject ) throws SQLException {
        Guid id = cameraCommandRelativeMoveObject.getId();
        long rowVersion = cameraCommandRelativeMoveObject.getRowVersion();
        Guid reply = cameraCommandRelativeMoveObject.getReply();
        var result = update2CameraCommandRelativeMove( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandRelativeMoveObject.setRowVersion(result.getRowVersion());
            cameraCommandRelativeMoveObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandRelativeMove( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandRelativeMoveDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandRelativeMove( CameraCommandRelativeMoveObject cameraCommandRelativeMoveObject ) throws SQLException {
        var id = cameraCommandRelativeMoveObject.getId( );
        var rowVersion = cameraCommandRelativeMoveObject.getRowVersion();
        var result = deleteCameraCommandRelativeMove( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandReleasePTZOwnership( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandReleasePTZOwnershipInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandReleasePTZOwnership( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandReleasePTZOwnershipInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandReleasePTZOwnership( CameraCommandReleasePTZOwnershipObject cameraCommandReleasePTZOwnershipObject ) throws SQLException {
        Guid id = cameraCommandReleasePTZOwnershipObject.getId( );
        Guid camera = cameraCommandReleasePTZOwnershipObject.getCamera( );
        DateTime timestamp = cameraCommandReleasePTZOwnershipObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandReleasePTZOwnershipObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandReleasePTZOwnershipObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandReleasePTZOwnershipObject.getReply( );
        var result = insertCameraCommandReleasePTZOwnership( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            cameraCommandReleasePTZOwnershipObject.setId(result.getId());
            cameraCommandReleasePTZOwnershipObject.setRowVersion(0);
            cameraCommandReleasePTZOwnershipObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandReleasePTZOwnership( CameraCommandReleasePTZOwnershipObject cameraCommandReleasePTZOwnershipObject ) throws SQLException {
        Guid id = cameraCommandReleasePTZOwnershipObject.getId( );
        Guid camera = cameraCommandReleasePTZOwnershipObject.getCamera( );
        DateTime timestamp = cameraCommandReleasePTZOwnershipObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandReleasePTZOwnershipObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandReleasePTZOwnershipObject.getDeviceCommandSourceId( );
        var result = insert1CameraCommandReleasePTZOwnership( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            cameraCommandReleasePTZOwnershipObject.setId( result.getId( ) );
            cameraCommandReleasePTZOwnershipObject.setRowVersion(0);
            cameraCommandReleasePTZOwnershipObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandReleasePTZOwnership( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandReleasePTZOwnershipUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandReleasePTZOwnership( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandReleasePTZOwnershipUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandReleasePTZOwnership( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandReleasePTZOwnershipUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandReleasePTZOwnership( CameraCommandReleasePTZOwnershipObject cameraCommandReleasePTZOwnershipObject ) throws SQLException {
        Guid id = cameraCommandReleasePTZOwnershipObject.getId();
        long rowVersion = cameraCommandReleasePTZOwnershipObject.getRowVersion();
        Guid camera = cameraCommandReleasePTZOwnershipObject.getCamera();
        DateTime timestamp = cameraCommandReleasePTZOwnershipObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandReleasePTZOwnershipObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandReleasePTZOwnershipObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandReleasePTZOwnershipObject.getReply();
        var result = updateCameraCommandReleasePTZOwnership( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            cameraCommandReleasePTZOwnershipObject.setRowVersion(result.getRowVersion());
            cameraCommandReleasePTZOwnershipObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandReleasePTZOwnership( CameraCommandReleasePTZOwnershipObject cameraCommandReleasePTZOwnershipObject ) throws SQLException {
        Guid id = cameraCommandReleasePTZOwnershipObject.getId();
        long rowVersion = cameraCommandReleasePTZOwnershipObject.getRowVersion();
        Guid camera = cameraCommandReleasePTZOwnershipObject.getCamera();
        DateTime timestamp = cameraCommandReleasePTZOwnershipObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandReleasePTZOwnershipObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandReleasePTZOwnershipObject.getDeviceCommandSourceId();
        var result = update1CameraCommandReleasePTZOwnership( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            cameraCommandReleasePTZOwnershipObject.setRowVersion(result.getRowVersion());
            cameraCommandReleasePTZOwnershipObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandReleasePTZOwnership( CameraCommandReleasePTZOwnershipObject cameraCommandReleasePTZOwnershipObject ) throws SQLException {
        Guid id = cameraCommandReleasePTZOwnershipObject.getId();
        long rowVersion = cameraCommandReleasePTZOwnershipObject.getRowVersion();
        Guid reply = cameraCommandReleasePTZOwnershipObject.getReply();
        var result = update2CameraCommandReleasePTZOwnership( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandReleasePTZOwnershipObject.setRowVersion(result.getRowVersion());
            cameraCommandReleasePTZOwnershipObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandReleasePTZOwnership( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandReleasePTZOwnershipDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandReleasePTZOwnership( CameraCommandReleasePTZOwnershipObject cameraCommandReleasePTZOwnershipObject ) throws SQLException {
        var id = cameraCommandReleasePTZOwnershipObject.getId( );
        var rowVersion = cameraCommandReleasePTZOwnershipObject.getRowVersion();
        var result = deleteCameraCommandReleasePTZOwnership( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandRequestPTZOwnership( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandRequestPTZOwnershipInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandRequestPTZOwnership( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandRequestPTZOwnershipInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandRequestPTZOwnership( CameraCommandRequestPTZOwnershipObject cameraCommandRequestPTZOwnershipObject ) throws SQLException {
        Guid id = cameraCommandRequestPTZOwnershipObject.getId( );
        Guid camera = cameraCommandRequestPTZOwnershipObject.getCamera( );
        DateTime timestamp = cameraCommandRequestPTZOwnershipObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandRequestPTZOwnershipObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandRequestPTZOwnershipObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandRequestPTZOwnershipObject.getReply( );
        var result = insertCameraCommandRequestPTZOwnership( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            cameraCommandRequestPTZOwnershipObject.setId(result.getId());
            cameraCommandRequestPTZOwnershipObject.setRowVersion(0);
            cameraCommandRequestPTZOwnershipObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandRequestPTZOwnership( CameraCommandRequestPTZOwnershipObject cameraCommandRequestPTZOwnershipObject ) throws SQLException {
        Guid id = cameraCommandRequestPTZOwnershipObject.getId( );
        Guid camera = cameraCommandRequestPTZOwnershipObject.getCamera( );
        DateTime timestamp = cameraCommandRequestPTZOwnershipObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandRequestPTZOwnershipObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandRequestPTZOwnershipObject.getDeviceCommandSourceId( );
        var result = insert1CameraCommandRequestPTZOwnership( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            cameraCommandRequestPTZOwnershipObject.setId( result.getId( ) );
            cameraCommandRequestPTZOwnershipObject.setRowVersion(0);
            cameraCommandRequestPTZOwnershipObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandRequestPTZOwnership( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandRequestPTZOwnershipUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandRequestPTZOwnership( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandRequestPTZOwnershipUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandRequestPTZOwnership( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandRequestPTZOwnershipUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandRequestPTZOwnership( CameraCommandRequestPTZOwnershipObject cameraCommandRequestPTZOwnershipObject ) throws SQLException {
        Guid id = cameraCommandRequestPTZOwnershipObject.getId();
        long rowVersion = cameraCommandRequestPTZOwnershipObject.getRowVersion();
        Guid camera = cameraCommandRequestPTZOwnershipObject.getCamera();
        DateTime timestamp = cameraCommandRequestPTZOwnershipObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandRequestPTZOwnershipObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandRequestPTZOwnershipObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandRequestPTZOwnershipObject.getReply();
        var result = updateCameraCommandRequestPTZOwnership( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            cameraCommandRequestPTZOwnershipObject.setRowVersion(result.getRowVersion());
            cameraCommandRequestPTZOwnershipObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandRequestPTZOwnership( CameraCommandRequestPTZOwnershipObject cameraCommandRequestPTZOwnershipObject ) throws SQLException {
        Guid id = cameraCommandRequestPTZOwnershipObject.getId();
        long rowVersion = cameraCommandRequestPTZOwnershipObject.getRowVersion();
        Guid camera = cameraCommandRequestPTZOwnershipObject.getCamera();
        DateTime timestamp = cameraCommandRequestPTZOwnershipObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandRequestPTZOwnershipObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandRequestPTZOwnershipObject.getDeviceCommandSourceId();
        var result = update1CameraCommandRequestPTZOwnership( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            cameraCommandRequestPTZOwnershipObject.setRowVersion(result.getRowVersion());
            cameraCommandRequestPTZOwnershipObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandRequestPTZOwnership( CameraCommandRequestPTZOwnershipObject cameraCommandRequestPTZOwnershipObject ) throws SQLException {
        Guid id = cameraCommandRequestPTZOwnershipObject.getId();
        long rowVersion = cameraCommandRequestPTZOwnershipObject.getRowVersion();
        Guid reply = cameraCommandRequestPTZOwnershipObject.getReply();
        var result = update2CameraCommandRequestPTZOwnership( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandRequestPTZOwnershipObject.setRowVersion(result.getRowVersion());
            cameraCommandRequestPTZOwnershipObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandRequestPTZOwnership( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandRequestPTZOwnershipDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandRequestPTZOwnership( CameraCommandRequestPTZOwnershipObject cameraCommandRequestPTZOwnershipObject ) throws SQLException {
        var id = cameraCommandRequestPTZOwnershipObject.getId( );
        var rowVersion = cameraCommandRequestPTZOwnershipObject.getRowVersion();
        var result = deleteCameraCommandRequestPTZOwnership( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandSetAutoFocus( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean enabled ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandSetAutoFocusInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.setBoolean(7, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandSetAutoFocus( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean enabled ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandSetAutoFocusInsert1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setBoolean(6, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandSetAutoFocus( CameraCommandSetAutoFocusObject cameraCommandSetAutoFocusObject ) throws SQLException {
        Guid id = cameraCommandSetAutoFocusObject.getId( );
        Guid camera = cameraCommandSetAutoFocusObject.getCamera( );
        DateTime timestamp = cameraCommandSetAutoFocusObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandSetAutoFocusObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandSetAutoFocusObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandSetAutoFocusObject.getReply( );
        boolean enabled = cameraCommandSetAutoFocusObject.getEnabled( );
        var result = insertCameraCommandSetAutoFocus( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, enabled );
        if( result.isSuccess() ) {
            cameraCommandSetAutoFocusObject.setId(result.getId());
            cameraCommandSetAutoFocusObject.setRowVersion(0);
            cameraCommandSetAutoFocusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandSetAutoFocus( CameraCommandSetAutoFocusObject cameraCommandSetAutoFocusObject ) throws SQLException {
        Guid id = cameraCommandSetAutoFocusObject.getId( );
        Guid camera = cameraCommandSetAutoFocusObject.getCamera( );
        DateTime timestamp = cameraCommandSetAutoFocusObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandSetAutoFocusObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandSetAutoFocusObject.getDeviceCommandSourceId( );
        boolean enabled = cameraCommandSetAutoFocusObject.getEnabled( );
        var result = insert1CameraCommandSetAutoFocus( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetAutoFocusObject.setId( result.getId( ) );
            cameraCommandSetAutoFocusObject.setRowVersion(0);
            cameraCommandSetAutoFocusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandSetAutoFocus( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean enabled ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetAutoFocusUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.setBoolean(8, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandSetAutoFocus( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean enabled ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetAutoFocusUpdate1(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setBoolean(7, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandSetAutoFocus( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetAutoFocusUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandSetAutoFocus( CameraCommandSetAutoFocusObject cameraCommandSetAutoFocusObject ) throws SQLException {
        Guid id = cameraCommandSetAutoFocusObject.getId();
        long rowVersion = cameraCommandSetAutoFocusObject.getRowVersion();
        Guid camera = cameraCommandSetAutoFocusObject.getCamera();
        DateTime timestamp = cameraCommandSetAutoFocusObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandSetAutoFocusObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandSetAutoFocusObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandSetAutoFocusObject.getReply();
        boolean enabled = cameraCommandSetAutoFocusObject.getEnabled();
        var result = updateCameraCommandSetAutoFocus( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetAutoFocusObject.setRowVersion(result.getRowVersion());
            cameraCommandSetAutoFocusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandSetAutoFocus( CameraCommandSetAutoFocusObject cameraCommandSetAutoFocusObject ) throws SQLException {
        Guid id = cameraCommandSetAutoFocusObject.getId();
        long rowVersion = cameraCommandSetAutoFocusObject.getRowVersion();
        Guid camera = cameraCommandSetAutoFocusObject.getCamera();
        DateTime timestamp = cameraCommandSetAutoFocusObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandSetAutoFocusObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandSetAutoFocusObject.getDeviceCommandSourceId();
        boolean enabled = cameraCommandSetAutoFocusObject.getEnabled();
        var result = update1CameraCommandSetAutoFocus( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetAutoFocusObject.setRowVersion(result.getRowVersion());
            cameraCommandSetAutoFocusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandSetAutoFocus( CameraCommandSetAutoFocusObject cameraCommandSetAutoFocusObject ) throws SQLException {
        Guid id = cameraCommandSetAutoFocusObject.getId();
        long rowVersion = cameraCommandSetAutoFocusObject.getRowVersion();
        Guid reply = cameraCommandSetAutoFocusObject.getReply();
        var result = update2CameraCommandSetAutoFocus( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandSetAutoFocusObject.setRowVersion(result.getRowVersion());
            cameraCommandSetAutoFocusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandSetAutoFocus( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandSetAutoFocusDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandSetAutoFocus( CameraCommandSetAutoFocusObject cameraCommandSetAutoFocusObject ) throws SQLException {
        var id = cameraCommandSetAutoFocusObject.getId( );
        var rowVersion = cameraCommandSetAutoFocusObject.getRowVersion();
        var result = deleteCameraCommandSetAutoFocus( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandSetBlackAndWhite( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean enabled ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandSetBlackAndWhiteInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.setBoolean(7, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandSetBlackAndWhite( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean enabled ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandSetBlackAndWhiteInsert1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setBoolean(6, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandSetBlackAndWhite( CameraCommandSetBlackAndWhiteObject cameraCommandSetBlackAndWhiteObject ) throws SQLException {
        Guid id = cameraCommandSetBlackAndWhiteObject.getId( );
        Guid camera = cameraCommandSetBlackAndWhiteObject.getCamera( );
        DateTime timestamp = cameraCommandSetBlackAndWhiteObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandSetBlackAndWhiteObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandSetBlackAndWhiteObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandSetBlackAndWhiteObject.getReply( );
        boolean enabled = cameraCommandSetBlackAndWhiteObject.getEnabled( );
        var result = insertCameraCommandSetBlackAndWhite( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, enabled );
        if( result.isSuccess() ) {
            cameraCommandSetBlackAndWhiteObject.setId(result.getId());
            cameraCommandSetBlackAndWhiteObject.setRowVersion(0);
            cameraCommandSetBlackAndWhiteObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandSetBlackAndWhite( CameraCommandSetBlackAndWhiteObject cameraCommandSetBlackAndWhiteObject ) throws SQLException {
        Guid id = cameraCommandSetBlackAndWhiteObject.getId( );
        Guid camera = cameraCommandSetBlackAndWhiteObject.getCamera( );
        DateTime timestamp = cameraCommandSetBlackAndWhiteObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandSetBlackAndWhiteObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandSetBlackAndWhiteObject.getDeviceCommandSourceId( );
        boolean enabled = cameraCommandSetBlackAndWhiteObject.getEnabled( );
        var result = insert1CameraCommandSetBlackAndWhite( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetBlackAndWhiteObject.setId( result.getId( ) );
            cameraCommandSetBlackAndWhiteObject.setRowVersion(0);
            cameraCommandSetBlackAndWhiteObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandSetBlackAndWhite( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean enabled ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetBlackAndWhiteUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.setBoolean(8, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandSetBlackAndWhite( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean enabled ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetBlackAndWhiteUpdate1(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setBoolean(7, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandSetBlackAndWhite( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetBlackAndWhiteUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandSetBlackAndWhite( CameraCommandSetBlackAndWhiteObject cameraCommandSetBlackAndWhiteObject ) throws SQLException {
        Guid id = cameraCommandSetBlackAndWhiteObject.getId();
        long rowVersion = cameraCommandSetBlackAndWhiteObject.getRowVersion();
        Guid camera = cameraCommandSetBlackAndWhiteObject.getCamera();
        DateTime timestamp = cameraCommandSetBlackAndWhiteObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandSetBlackAndWhiteObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandSetBlackAndWhiteObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandSetBlackAndWhiteObject.getReply();
        boolean enabled = cameraCommandSetBlackAndWhiteObject.getEnabled();
        var result = updateCameraCommandSetBlackAndWhite( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetBlackAndWhiteObject.setRowVersion(result.getRowVersion());
            cameraCommandSetBlackAndWhiteObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandSetBlackAndWhite( CameraCommandSetBlackAndWhiteObject cameraCommandSetBlackAndWhiteObject ) throws SQLException {
        Guid id = cameraCommandSetBlackAndWhiteObject.getId();
        long rowVersion = cameraCommandSetBlackAndWhiteObject.getRowVersion();
        Guid camera = cameraCommandSetBlackAndWhiteObject.getCamera();
        DateTime timestamp = cameraCommandSetBlackAndWhiteObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandSetBlackAndWhiteObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandSetBlackAndWhiteObject.getDeviceCommandSourceId();
        boolean enabled = cameraCommandSetBlackAndWhiteObject.getEnabled();
        var result = update1CameraCommandSetBlackAndWhite( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetBlackAndWhiteObject.setRowVersion(result.getRowVersion());
            cameraCommandSetBlackAndWhiteObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandSetBlackAndWhite( CameraCommandSetBlackAndWhiteObject cameraCommandSetBlackAndWhiteObject ) throws SQLException {
        Guid id = cameraCommandSetBlackAndWhiteObject.getId();
        long rowVersion = cameraCommandSetBlackAndWhiteObject.getRowVersion();
        Guid reply = cameraCommandSetBlackAndWhiteObject.getReply();
        var result = update2CameraCommandSetBlackAndWhite( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandSetBlackAndWhiteObject.setRowVersion(result.getRowVersion());
            cameraCommandSetBlackAndWhiteObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandSetBlackAndWhite( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandSetBlackAndWhiteDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandSetBlackAndWhite( CameraCommandSetBlackAndWhiteObject cameraCommandSetBlackAndWhiteObject ) throws SQLException {
        var id = cameraCommandSetBlackAndWhiteObject.getId( );
        var rowVersion = cameraCommandSetBlackAndWhiteObject.getRowVersion();
        var result = deleteCameraCommandSetBlackAndWhite( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandSetFollowed( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, Guid trackId, int reason ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandSetFollowedInsert(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.setGuid(7, trackId);
            callableStatement.setInt32(8, reason);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandSetFollowed( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid trackId, int reason ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandSetFollowedInsert1(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setGuid(6, trackId);
            callableStatement.setInt32(7, reason);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandSetFollowed( CameraCommandSetFollowedObject cameraCommandSetFollowedObject ) throws SQLException {
        Guid id = cameraCommandSetFollowedObject.getId( );
        Guid camera = cameraCommandSetFollowedObject.getCamera( );
        DateTime timestamp = cameraCommandSetFollowedObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandSetFollowedObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandSetFollowedObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandSetFollowedObject.getReply( );
        Guid trackId = cameraCommandSetFollowedObject.getTrackId( );
        int reason = cameraCommandSetFollowedObject.getReason( );
        var result = insertCameraCommandSetFollowed( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, trackId, reason );
        if( result.isSuccess() ) {
            cameraCommandSetFollowedObject.setId(result.getId());
            cameraCommandSetFollowedObject.setRowVersion(0);
            cameraCommandSetFollowedObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandSetFollowed( CameraCommandSetFollowedObject cameraCommandSetFollowedObject ) throws SQLException {
        Guid id = cameraCommandSetFollowedObject.getId( );
        Guid camera = cameraCommandSetFollowedObject.getCamera( );
        DateTime timestamp = cameraCommandSetFollowedObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandSetFollowedObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandSetFollowedObject.getDeviceCommandSourceId( );
        Guid trackId = cameraCommandSetFollowedObject.getTrackId( );
        int reason = cameraCommandSetFollowedObject.getReason( );
        var result = insert1CameraCommandSetFollowed( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, trackId, reason );
        if( result.isSuccess( ) ) {
            cameraCommandSetFollowedObject.setId( result.getId( ) );
            cameraCommandSetFollowedObject.setRowVersion(0);
            cameraCommandSetFollowedObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandSetFollowed( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, Guid trackId, int reason ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetFollowedUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.setGuid(8, trackId);
            callableStatement.setInt32(9, reason);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandSetFollowed( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid trackId, int reason ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetFollowedUpdate1(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setGuid(7, trackId);
            callableStatement.setInt32(8, reason);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandSetFollowed( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetFollowedUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandSetFollowed( CameraCommandSetFollowedObject cameraCommandSetFollowedObject ) throws SQLException {
        Guid id = cameraCommandSetFollowedObject.getId();
        long rowVersion = cameraCommandSetFollowedObject.getRowVersion();
        Guid camera = cameraCommandSetFollowedObject.getCamera();
        DateTime timestamp = cameraCommandSetFollowedObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandSetFollowedObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandSetFollowedObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandSetFollowedObject.getReply();
        Guid trackId = cameraCommandSetFollowedObject.getTrackId();
        int reason = cameraCommandSetFollowedObject.getReason();
        var result = updateCameraCommandSetFollowed( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, trackId, reason );
        if( result.isSuccess( ) ) {
            cameraCommandSetFollowedObject.setRowVersion(result.getRowVersion());
            cameraCommandSetFollowedObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandSetFollowed( CameraCommandSetFollowedObject cameraCommandSetFollowedObject ) throws SQLException {
        Guid id = cameraCommandSetFollowedObject.getId();
        long rowVersion = cameraCommandSetFollowedObject.getRowVersion();
        Guid camera = cameraCommandSetFollowedObject.getCamera();
        DateTime timestamp = cameraCommandSetFollowedObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandSetFollowedObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandSetFollowedObject.getDeviceCommandSourceId();
        Guid trackId = cameraCommandSetFollowedObject.getTrackId();
        int reason = cameraCommandSetFollowedObject.getReason();
        var result = update1CameraCommandSetFollowed( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, trackId, reason );
        if( result.isSuccess( ) ) {
            cameraCommandSetFollowedObject.setRowVersion(result.getRowVersion());
            cameraCommandSetFollowedObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandSetFollowed( CameraCommandSetFollowedObject cameraCommandSetFollowedObject ) throws SQLException {
        Guid id = cameraCommandSetFollowedObject.getId();
        long rowVersion = cameraCommandSetFollowedObject.getRowVersion();
        Guid reply = cameraCommandSetFollowedObject.getReply();
        var result = update2CameraCommandSetFollowed( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandSetFollowedObject.setRowVersion(result.getRowVersion());
            cameraCommandSetFollowedObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandSetFollowed( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandSetFollowedDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandSetFollowed( CameraCommandSetFollowedObject cameraCommandSetFollowedObject ) throws SQLException {
        var id = cameraCommandSetFollowedObject.getId( );
        var rowVersion = cameraCommandSetFollowedObject.getRowVersion();
        var result = deleteCameraCommandSetFollowed( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandSetInfraRedLamp( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean enabled ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandSetInfraRedLampInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.setBoolean(7, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandSetInfraRedLamp( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean enabled ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandSetInfraRedLampInsert1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setBoolean(6, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandSetInfraRedLamp( CameraCommandSetInfraRedLampObject cameraCommandSetInfraRedLampObject ) throws SQLException {
        Guid id = cameraCommandSetInfraRedLampObject.getId( );
        Guid camera = cameraCommandSetInfraRedLampObject.getCamera( );
        DateTime timestamp = cameraCommandSetInfraRedLampObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandSetInfraRedLampObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandSetInfraRedLampObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandSetInfraRedLampObject.getReply( );
        boolean enabled = cameraCommandSetInfraRedLampObject.getEnabled( );
        var result = insertCameraCommandSetInfraRedLamp( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, enabled );
        if( result.isSuccess() ) {
            cameraCommandSetInfraRedLampObject.setId(result.getId());
            cameraCommandSetInfraRedLampObject.setRowVersion(0);
            cameraCommandSetInfraRedLampObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandSetInfraRedLamp( CameraCommandSetInfraRedLampObject cameraCommandSetInfraRedLampObject ) throws SQLException {
        Guid id = cameraCommandSetInfraRedLampObject.getId( );
        Guid camera = cameraCommandSetInfraRedLampObject.getCamera( );
        DateTime timestamp = cameraCommandSetInfraRedLampObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandSetInfraRedLampObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandSetInfraRedLampObject.getDeviceCommandSourceId( );
        boolean enabled = cameraCommandSetInfraRedLampObject.getEnabled( );
        var result = insert1CameraCommandSetInfraRedLamp( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetInfraRedLampObject.setId( result.getId( ) );
            cameraCommandSetInfraRedLampObject.setRowVersion(0);
            cameraCommandSetInfraRedLampObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandSetInfraRedLamp( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean enabled ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetInfraRedLampUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.setBoolean(8, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandSetInfraRedLamp( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean enabled ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetInfraRedLampUpdate1(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setBoolean(7, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandSetInfraRedLamp( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetInfraRedLampUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandSetInfraRedLamp( CameraCommandSetInfraRedLampObject cameraCommandSetInfraRedLampObject ) throws SQLException {
        Guid id = cameraCommandSetInfraRedLampObject.getId();
        long rowVersion = cameraCommandSetInfraRedLampObject.getRowVersion();
        Guid camera = cameraCommandSetInfraRedLampObject.getCamera();
        DateTime timestamp = cameraCommandSetInfraRedLampObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandSetInfraRedLampObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandSetInfraRedLampObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandSetInfraRedLampObject.getReply();
        boolean enabled = cameraCommandSetInfraRedLampObject.getEnabled();
        var result = updateCameraCommandSetInfraRedLamp( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetInfraRedLampObject.setRowVersion(result.getRowVersion());
            cameraCommandSetInfraRedLampObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandSetInfraRedLamp( CameraCommandSetInfraRedLampObject cameraCommandSetInfraRedLampObject ) throws SQLException {
        Guid id = cameraCommandSetInfraRedLampObject.getId();
        long rowVersion = cameraCommandSetInfraRedLampObject.getRowVersion();
        Guid camera = cameraCommandSetInfraRedLampObject.getCamera();
        DateTime timestamp = cameraCommandSetInfraRedLampObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandSetInfraRedLampObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandSetInfraRedLampObject.getDeviceCommandSourceId();
        boolean enabled = cameraCommandSetInfraRedLampObject.getEnabled();
        var result = update1CameraCommandSetInfraRedLamp( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetInfraRedLampObject.setRowVersion(result.getRowVersion());
            cameraCommandSetInfraRedLampObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandSetInfraRedLamp( CameraCommandSetInfraRedLampObject cameraCommandSetInfraRedLampObject ) throws SQLException {
        Guid id = cameraCommandSetInfraRedLampObject.getId();
        long rowVersion = cameraCommandSetInfraRedLampObject.getRowVersion();
        Guid reply = cameraCommandSetInfraRedLampObject.getReply();
        var result = update2CameraCommandSetInfraRedLamp( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandSetInfraRedLampObject.setRowVersion(result.getRowVersion());
            cameraCommandSetInfraRedLampObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandSetInfraRedLamp( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandSetInfraRedLampDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandSetInfraRedLamp( CameraCommandSetInfraRedLampObject cameraCommandSetInfraRedLampObject ) throws SQLException {
        var id = cameraCommandSetInfraRedLampObject.getId( );
        var rowVersion = cameraCommandSetInfraRedLampObject.getRowVersion();
        var result = deleteCameraCommandSetInfraRedLamp( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandSetWasher( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean enabled ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandSetWasherInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.setBoolean(7, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandSetWasher( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean enabled ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandSetWasherInsert1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setBoolean(6, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandSetWasher( CameraCommandSetWasherObject cameraCommandSetWasherObject ) throws SQLException {
        Guid id = cameraCommandSetWasherObject.getId( );
        Guid camera = cameraCommandSetWasherObject.getCamera( );
        DateTime timestamp = cameraCommandSetWasherObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandSetWasherObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandSetWasherObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandSetWasherObject.getReply( );
        boolean enabled = cameraCommandSetWasherObject.getEnabled( );
        var result = insertCameraCommandSetWasher( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, enabled );
        if( result.isSuccess() ) {
            cameraCommandSetWasherObject.setId(result.getId());
            cameraCommandSetWasherObject.setRowVersion(0);
            cameraCommandSetWasherObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandSetWasher( CameraCommandSetWasherObject cameraCommandSetWasherObject ) throws SQLException {
        Guid id = cameraCommandSetWasherObject.getId( );
        Guid camera = cameraCommandSetWasherObject.getCamera( );
        DateTime timestamp = cameraCommandSetWasherObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandSetWasherObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandSetWasherObject.getDeviceCommandSourceId( );
        boolean enabled = cameraCommandSetWasherObject.getEnabled( );
        var result = insert1CameraCommandSetWasher( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetWasherObject.setId( result.getId( ) );
            cameraCommandSetWasherObject.setRowVersion(0);
            cameraCommandSetWasherObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandSetWasher( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean enabled ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetWasherUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.setBoolean(8, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandSetWasher( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean enabled ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetWasherUpdate1(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setBoolean(7, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandSetWasher( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetWasherUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandSetWasher( CameraCommandSetWasherObject cameraCommandSetWasherObject ) throws SQLException {
        Guid id = cameraCommandSetWasherObject.getId();
        long rowVersion = cameraCommandSetWasherObject.getRowVersion();
        Guid camera = cameraCommandSetWasherObject.getCamera();
        DateTime timestamp = cameraCommandSetWasherObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandSetWasherObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandSetWasherObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandSetWasherObject.getReply();
        boolean enabled = cameraCommandSetWasherObject.getEnabled();
        var result = updateCameraCommandSetWasher( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetWasherObject.setRowVersion(result.getRowVersion());
            cameraCommandSetWasherObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandSetWasher( CameraCommandSetWasherObject cameraCommandSetWasherObject ) throws SQLException {
        Guid id = cameraCommandSetWasherObject.getId();
        long rowVersion = cameraCommandSetWasherObject.getRowVersion();
        Guid camera = cameraCommandSetWasherObject.getCamera();
        DateTime timestamp = cameraCommandSetWasherObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandSetWasherObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandSetWasherObject.getDeviceCommandSourceId();
        boolean enabled = cameraCommandSetWasherObject.getEnabled();
        var result = update1CameraCommandSetWasher( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetWasherObject.setRowVersion(result.getRowVersion());
            cameraCommandSetWasherObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandSetWasher( CameraCommandSetWasherObject cameraCommandSetWasherObject ) throws SQLException {
        Guid id = cameraCommandSetWasherObject.getId();
        long rowVersion = cameraCommandSetWasherObject.getRowVersion();
        Guid reply = cameraCommandSetWasherObject.getReply();
        var result = update2CameraCommandSetWasher( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandSetWasherObject.setRowVersion(result.getRowVersion());
            cameraCommandSetWasherObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandSetWasher( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandSetWasherDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandSetWasher( CameraCommandSetWasherObject cameraCommandSetWasherObject ) throws SQLException {
        var id = cameraCommandSetWasherObject.getId( );
        var rowVersion = cameraCommandSetWasherObject.getRowVersion();
        var result = deleteCameraCommandSetWasher( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandSetWiper( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean enabled ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandSetWiperInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.setBoolean(7, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandSetWiper( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean enabled ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandSetWiperInsert1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setBoolean(6, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandSetWiper( CameraCommandSetWiperObject cameraCommandSetWiperObject ) throws SQLException {
        Guid id = cameraCommandSetWiperObject.getId( );
        Guid camera = cameraCommandSetWiperObject.getCamera( );
        DateTime timestamp = cameraCommandSetWiperObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandSetWiperObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandSetWiperObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandSetWiperObject.getReply( );
        boolean enabled = cameraCommandSetWiperObject.getEnabled( );
        var result = insertCameraCommandSetWiper( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, enabled );
        if( result.isSuccess() ) {
            cameraCommandSetWiperObject.setId(result.getId());
            cameraCommandSetWiperObject.setRowVersion(0);
            cameraCommandSetWiperObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandSetWiper( CameraCommandSetWiperObject cameraCommandSetWiperObject ) throws SQLException {
        Guid id = cameraCommandSetWiperObject.getId( );
        Guid camera = cameraCommandSetWiperObject.getCamera( );
        DateTime timestamp = cameraCommandSetWiperObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandSetWiperObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandSetWiperObject.getDeviceCommandSourceId( );
        boolean enabled = cameraCommandSetWiperObject.getEnabled( );
        var result = insert1CameraCommandSetWiper( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetWiperObject.setId( result.getId( ) );
            cameraCommandSetWiperObject.setRowVersion(0);
            cameraCommandSetWiperObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandSetWiper( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean enabled ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetWiperUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.setBoolean(8, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandSetWiper( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean enabled ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetWiperUpdate1(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setBoolean(7, enabled);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandSetWiper( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandSetWiperUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandSetWiper( CameraCommandSetWiperObject cameraCommandSetWiperObject ) throws SQLException {
        Guid id = cameraCommandSetWiperObject.getId();
        long rowVersion = cameraCommandSetWiperObject.getRowVersion();
        Guid camera = cameraCommandSetWiperObject.getCamera();
        DateTime timestamp = cameraCommandSetWiperObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandSetWiperObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandSetWiperObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandSetWiperObject.getReply();
        boolean enabled = cameraCommandSetWiperObject.getEnabled();
        var result = updateCameraCommandSetWiper( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetWiperObject.setRowVersion(result.getRowVersion());
            cameraCommandSetWiperObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandSetWiper( CameraCommandSetWiperObject cameraCommandSetWiperObject ) throws SQLException {
        Guid id = cameraCommandSetWiperObject.getId();
        long rowVersion = cameraCommandSetWiperObject.getRowVersion();
        Guid camera = cameraCommandSetWiperObject.getCamera();
        DateTime timestamp = cameraCommandSetWiperObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandSetWiperObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandSetWiperObject.getDeviceCommandSourceId();
        boolean enabled = cameraCommandSetWiperObject.getEnabled();
        var result = update1CameraCommandSetWiper( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, enabled );
        if( result.isSuccess( ) ) {
            cameraCommandSetWiperObject.setRowVersion(result.getRowVersion());
            cameraCommandSetWiperObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandSetWiper( CameraCommandSetWiperObject cameraCommandSetWiperObject ) throws SQLException {
        Guid id = cameraCommandSetWiperObject.getId();
        long rowVersion = cameraCommandSetWiperObject.getRowVersion();
        Guid reply = cameraCommandSetWiperObject.getReply();
        var result = update2CameraCommandSetWiper( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandSetWiperObject.setRowVersion(result.getRowVersion());
            cameraCommandSetWiperObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandSetWiper( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandSetWiperDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandSetWiper( CameraCommandSetWiperObject cameraCommandSetWiperObject ) throws SQLException {
        var id = cameraCommandSetWiperObject.getId( );
        var rowVersion = cameraCommandSetWiperObject.getRowVersion();
        var result = deleteCameraCommandSetWiper( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandStop( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean panTilt, boolean zoom ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandStopInsert(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.setBoolean(7, panTilt);
            callableStatement.setBoolean(8, zoom);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandStop( Guid id, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean panTilt, boolean zoom ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandStopInsert1(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setBoolean(6, panTilt);
            callableStatement.setBoolean(7, zoom);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandStop( CameraCommandStopObject cameraCommandStopObject ) throws SQLException {
        Guid id = cameraCommandStopObject.getId( );
        Guid camera = cameraCommandStopObject.getCamera( );
        DateTime timestamp = cameraCommandStopObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandStopObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandStopObject.getDeviceCommandSourceId( );
        Guid reply = cameraCommandStopObject.getReply( );
        boolean panTilt = cameraCommandStopObject.getPanTilt( );
        boolean zoom = cameraCommandStopObject.getZoom( );
        var result = insertCameraCommandStop( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, panTilt, zoom );
        if( result.isSuccess() ) {
            cameraCommandStopObject.setId(result.getId());
            cameraCommandStopObject.setRowVersion(0);
            cameraCommandStopObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandStop( CameraCommandStopObject cameraCommandStopObject ) throws SQLException {
        Guid id = cameraCommandStopObject.getId( );
        Guid camera = cameraCommandStopObject.getCamera( );
        DateTime timestamp = cameraCommandStopObject.getTimestamp( );
        int deviceCommandSourceType = cameraCommandStopObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = cameraCommandStopObject.getDeviceCommandSourceId( );
        boolean panTilt = cameraCommandStopObject.getPanTilt( );
        boolean zoom = cameraCommandStopObject.getZoom( );
        var result = insert1CameraCommandStop( id, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, panTilt, zoom );
        if( result.isSuccess( ) ) {
            cameraCommandStopObject.setId( result.getId( ) );
            cameraCommandStopObject.setRowVersion(0);
            cameraCommandStopObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandStop( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply, boolean panTilt, boolean zoom ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandStopUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.setBoolean(8, panTilt);
            callableStatement.setBoolean(9, zoom);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandStop( Guid id, long rowVersion, Guid camera, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, boolean panTilt, boolean zoom ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandStopUpdate1(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setBoolean(7, panTilt);
            callableStatement.setBoolean(8, zoom);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandStop( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandStopUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandStop( CameraCommandStopObject cameraCommandStopObject ) throws SQLException {
        Guid id = cameraCommandStopObject.getId();
        long rowVersion = cameraCommandStopObject.getRowVersion();
        Guid camera = cameraCommandStopObject.getCamera();
        DateTime timestamp = cameraCommandStopObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandStopObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandStopObject.getDeviceCommandSourceId();
        Guid reply = cameraCommandStopObject.getReply();
        boolean panTilt = cameraCommandStopObject.getPanTilt();
        boolean zoom = cameraCommandStopObject.getZoom();
        var result = updateCameraCommandStop( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply, panTilt, zoom );
        if( result.isSuccess( ) ) {
            cameraCommandStopObject.setRowVersion(result.getRowVersion());
            cameraCommandStopObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandStop( CameraCommandStopObject cameraCommandStopObject ) throws SQLException {
        Guid id = cameraCommandStopObject.getId();
        long rowVersion = cameraCommandStopObject.getRowVersion();
        Guid camera = cameraCommandStopObject.getCamera();
        DateTime timestamp = cameraCommandStopObject.getTimestamp();
        int deviceCommandSourceType = cameraCommandStopObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = cameraCommandStopObject.getDeviceCommandSourceId();
        boolean panTilt = cameraCommandStopObject.getPanTilt();
        boolean zoom = cameraCommandStopObject.getZoom();
        var result = update1CameraCommandStop( id, rowVersion, camera, timestamp, deviceCommandSourceType, deviceCommandSourceId, panTilt, zoom );
        if( result.isSuccess( ) ) {
            cameraCommandStopObject.setRowVersion(result.getRowVersion());
            cameraCommandStopObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandStop( CameraCommandStopObject cameraCommandStopObject ) throws SQLException {
        Guid id = cameraCommandStopObject.getId();
        long rowVersion = cameraCommandStopObject.getRowVersion();
        Guid reply = cameraCommandStopObject.getReply();
        var result = update2CameraCommandStop( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            cameraCommandStopObject.setRowVersion(result.getRowVersion());
            cameraCommandStopObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandStop( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandStopDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandStop( CameraCommandStopObject cameraCommandStopObject ) throws SQLException {
        var id = cameraCommandStopObject.getId( );
        var rowVersion = cameraCommandStopObject.getRowVersion();
        var result = deleteCameraCommandStop( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraCommandReply( Guid id, Guid camera, DateTime timestamp, Guid command, int status, String message, double panAngle, double tiltAngle, double focalLength ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandReplyInsert(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableGuid(4, command);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.setDouble(7, panAngle);
            callableStatement.setDouble(8, tiltAngle);
            callableStatement.setDouble(9, focalLength);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraCommandReply( Guid id, Guid camera, DateTime timestamp, int status, String message, double panAngle, double tiltAngle, double focalLength ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraCommandReplyInsert1(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, status);
            callableStatement.setString(5, message);
            callableStatement.setDouble(6, panAngle);
            callableStatement.setDouble(7, tiltAngle);
            callableStatement.setDouble(8, focalLength);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraCommandReply( CameraCommandReplyObject cameraCommandReplyObject ) throws SQLException {
        Guid id = cameraCommandReplyObject.getId( );
        Guid camera = cameraCommandReplyObject.getCamera( );
        DateTime timestamp = cameraCommandReplyObject.getTimestamp( );
        Guid command = cameraCommandReplyObject.getCommand( );
        int status = cameraCommandReplyObject.getStatus( );
        String message = cameraCommandReplyObject.getMessage( );
        double panAngle = cameraCommandReplyObject.getPanAngle( );
        double tiltAngle = cameraCommandReplyObject.getTiltAngle( );
        double focalLength = cameraCommandReplyObject.getFocalLength( );
        var result = insertCameraCommandReply( id, camera, timestamp, command, status, message, panAngle, tiltAngle, focalLength );
        if( result.isSuccess() ) {
            cameraCommandReplyObject.setId(result.getId());
            cameraCommandReplyObject.setRowVersion(0);
            cameraCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraCommandReply( CameraCommandReplyObject cameraCommandReplyObject ) throws SQLException {
        Guid id = cameraCommandReplyObject.getId( );
        Guid camera = cameraCommandReplyObject.getCamera( );
        DateTime timestamp = cameraCommandReplyObject.getTimestamp( );
        int status = cameraCommandReplyObject.getStatus( );
        String message = cameraCommandReplyObject.getMessage( );
        double panAngle = cameraCommandReplyObject.getPanAngle( );
        double tiltAngle = cameraCommandReplyObject.getTiltAngle( );
        double focalLength = cameraCommandReplyObject.getFocalLength( );
        var result = insert1CameraCommandReply( id, camera, timestamp, status, message, panAngle, tiltAngle, focalLength );
        if( result.isSuccess( ) ) {
            cameraCommandReplyObject.setId( result.getId( ) );
            cameraCommandReplyObject.setRowVersion(0);
            cameraCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraCommandReply( Guid id, long rowVersion, Guid camera, DateTime timestamp, Guid command, int status, String message, double panAngle, double tiltAngle, double focalLength ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandReplyUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableGuid(5, command);
            callableStatement.setInt32(6, status);
            callableStatement.setString(7, message);
            callableStatement.setDouble(8, panAngle);
            callableStatement.setDouble(9, tiltAngle);
            callableStatement.setDouble(10, focalLength);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraCommandReply( Guid id, long rowVersion, Guid camera, DateTime timestamp, int status, String message, double panAngle, double tiltAngle, double focalLength ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandReplyUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.setDouble(7, panAngle);
            callableStatement.setDouble(8, tiltAngle);
            callableStatement.setDouble(9, focalLength);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraCommandReply( Guid id, long rowVersion, Guid command ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraCommandReplyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, command);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraCommandReply( CameraCommandReplyObject cameraCommandReplyObject ) throws SQLException {
        Guid id = cameraCommandReplyObject.getId();
        long rowVersion = cameraCommandReplyObject.getRowVersion();
        Guid camera = cameraCommandReplyObject.getCamera();
        DateTime timestamp = cameraCommandReplyObject.getTimestamp();
        Guid command = cameraCommandReplyObject.getCommand();
        int status = cameraCommandReplyObject.getStatus();
        String message = cameraCommandReplyObject.getMessage();
        double panAngle = cameraCommandReplyObject.getPanAngle();
        double tiltAngle = cameraCommandReplyObject.getTiltAngle();
        double focalLength = cameraCommandReplyObject.getFocalLength();
        var result = updateCameraCommandReply( id, rowVersion, camera, timestamp, command, status, message, panAngle, tiltAngle, focalLength );
        if( result.isSuccess( ) ) {
            cameraCommandReplyObject.setRowVersion(result.getRowVersion());
            cameraCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraCommandReply( CameraCommandReplyObject cameraCommandReplyObject ) throws SQLException {
        Guid id = cameraCommandReplyObject.getId();
        long rowVersion = cameraCommandReplyObject.getRowVersion();
        Guid camera = cameraCommandReplyObject.getCamera();
        DateTime timestamp = cameraCommandReplyObject.getTimestamp();
        int status = cameraCommandReplyObject.getStatus();
        String message = cameraCommandReplyObject.getMessage();
        double panAngle = cameraCommandReplyObject.getPanAngle();
        double tiltAngle = cameraCommandReplyObject.getTiltAngle();
        double focalLength = cameraCommandReplyObject.getFocalLength();
        var result = update1CameraCommandReply( id, rowVersion, camera, timestamp, status, message, panAngle, tiltAngle, focalLength );
        if( result.isSuccess( ) ) {
            cameraCommandReplyObject.setRowVersion(result.getRowVersion());
            cameraCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraCommandReply( CameraCommandReplyObject cameraCommandReplyObject ) throws SQLException {
        Guid id = cameraCommandReplyObject.getId();
        long rowVersion = cameraCommandReplyObject.getRowVersion();
        Guid command = cameraCommandReplyObject.getCommand();
        var result = update2CameraCommandReply( id, rowVersion, command );
        if( result.isSuccess( ) ) {
            cameraCommandReplyObject.setRowVersion(result.getRowVersion());
            cameraCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraCommandReply( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraCommandReplyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraCommandReply( CameraCommandReplyObject cameraCommandReplyObject ) throws SQLException {
        var id = cameraCommandReplyObject.getId( );
        var rowVersion = cameraCommandReplyObject.getRowVersion();
        var result = deleteCameraCommandReply( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraConfiguration( Guid id, Guid camera, DateTime timestamp, int cameraControlProtocol, String cameraURL, String configurationURL, String userName, String password, boolean useRtspUriOverride, String rtspUriOverride, double latitude, double longitude, double altitude, boolean useRelativePosition, int panTiltMode, double minTiltAngle, double maxTiltAngle, double minTiltScaleAngle, double maxTiltScaleAngle, boolean useReverseTiltAngle, boolean useReverseNormalizedTiltAngle, double minTiltVelocity, double maxTiltVelocity, double minTiltSpeed, double maxTiltSpeed, double minPanAngle, double maxPanAngle, double minPanScaleAngle, double maxPanScaleAngle, boolean useReversePanAngle, boolean useReverseNormalizedPanAngle, double minPanVelocity, double maxPanVelocity, double minPanSpeed, double maxPanSpeed, int focalLengthMode, double minFocalLength, double maxFocalLength, double minFocalLengthScale, double maxFocalLengthScale, double minZoomVelocity, double maxZoomVelocity, double minZoomSpeed, double maxZoomSpeed, double imageSensorWidth, double imageSensorHeight, double homePanAngle, double homeTiltAngle, double homeFocalLength, double panOffset, double tiltOffset, double aimAltitude, double minimumTargetWidth, TimeSpan targetLockTimeout, TimeSpan updateStatusInterval, TimeSpan readTimeout, TimeSpan moveCommandStatusDelay, String ptzProfileName, String ptzConfigurationToken, String videoSourceToken ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, cameraControlProtocol);
            callableStatement.setString(5, cameraURL);
            callableStatement.setString(6, configurationURL);
            callableStatement.setString(7, userName);
            callableStatement.setString(8, password);
            callableStatement.setBoolean(9, useRtspUriOverride);
            callableStatement.setString(10, rtspUriOverride);
            callableStatement.setDouble(11, latitude);
            callableStatement.setDouble(12, longitude);
            callableStatement.setDouble(13, altitude);
            callableStatement.setBoolean(14, useRelativePosition);
            callableStatement.setInt32(15, panTiltMode);
            callableStatement.setDouble(16, minTiltAngle);
            callableStatement.setDouble(17, maxTiltAngle);
            callableStatement.setDouble(18, minTiltScaleAngle);
            callableStatement.setDouble(19, maxTiltScaleAngle);
            callableStatement.setBoolean(20, useReverseTiltAngle);
            callableStatement.setBoolean(21, useReverseNormalizedTiltAngle);
            callableStatement.setDouble(22, minTiltVelocity);
            callableStatement.setDouble(23, maxTiltVelocity);
            callableStatement.setDouble(24, minTiltSpeed);
            callableStatement.setDouble(25, maxTiltSpeed);
            callableStatement.setDouble(26, minPanAngle);
            callableStatement.setDouble(27, maxPanAngle);
            callableStatement.setDouble(28, minPanScaleAngle);
            callableStatement.setDouble(29, maxPanScaleAngle);
            callableStatement.setBoolean(30, useReversePanAngle);
            callableStatement.setBoolean(31, useReverseNormalizedPanAngle);
            callableStatement.setDouble(32, minPanVelocity);
            callableStatement.setDouble(33, maxPanVelocity);
            callableStatement.setDouble(34, minPanSpeed);
            callableStatement.setDouble(35, maxPanSpeed);
            callableStatement.setInt32(36, focalLengthMode);
            callableStatement.setDouble(37, minFocalLength);
            callableStatement.setDouble(38, maxFocalLength);
            callableStatement.setDouble(39, minFocalLengthScale);
            callableStatement.setDouble(40, maxFocalLengthScale);
            callableStatement.setDouble(41, minZoomVelocity);
            callableStatement.setDouble(42, maxZoomVelocity);
            callableStatement.setDouble(43, minZoomSpeed);
            callableStatement.setDouble(44, maxZoomSpeed);
            callableStatement.setDouble(45, imageSensorWidth);
            callableStatement.setDouble(46, imageSensorHeight);
            callableStatement.setDouble(47, homePanAngle);
            callableStatement.setDouble(48, homeTiltAngle);
            callableStatement.setDouble(49, homeFocalLength);
            callableStatement.setDouble(50, panOffset);
            callableStatement.setDouble(51, tiltOffset);
            callableStatement.setDouble(52, aimAltitude);
            callableStatement.setDouble(53, minimumTargetWidth);
            callableStatement.setTimeSpan(54, targetLockTimeout);
            callableStatement.setTimeSpan(55, updateStatusInterval);
            callableStatement.setTimeSpan(56, readTimeout);
            callableStatement.setTimeSpan(57, moveCommandStatusDelay);
            callableStatement.setString(58, ptzProfileName);
            callableStatement.setString(59, ptzConfigurationToken);
            callableStatement.setString(60, videoSourceToken);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraConfiguration( CameraConfigurationObject cameraConfigurationObject ) throws SQLException {
        Guid id = cameraConfigurationObject.getId( );
        Guid camera = cameraConfigurationObject.getCamera( );
        DateTime timestamp = cameraConfigurationObject.getTimestamp( );
        int cameraControlProtocol = cameraConfigurationObject.getCameraControlProtocol( );
        String cameraURL = cameraConfigurationObject.getCameraURL( );
        String configurationURL = cameraConfigurationObject.getConfigurationURL( );
        String userName = cameraConfigurationObject.getUserName( );
        String password = cameraConfigurationObject.getPassword( );
        boolean useRtspUriOverride = cameraConfigurationObject.getUseRtspUriOverride( );
        String rtspUriOverride = cameraConfigurationObject.getRtspUriOverride( );
        double latitude = cameraConfigurationObject.getLatitude( );
        double longitude = cameraConfigurationObject.getLongitude( );
        double altitude = cameraConfigurationObject.getAltitude( );
        boolean useRelativePosition = cameraConfigurationObject.getUseRelativePosition( );
        int panTiltMode = cameraConfigurationObject.getPanTiltMode( );
        double minTiltAngle = cameraConfigurationObject.getMinTiltAngle( );
        double maxTiltAngle = cameraConfigurationObject.getMaxTiltAngle( );
        double minTiltScaleAngle = cameraConfigurationObject.getMinTiltScaleAngle( );
        double maxTiltScaleAngle = cameraConfigurationObject.getMaxTiltScaleAngle( );
        boolean useReverseTiltAngle = cameraConfigurationObject.getUseReverseTiltAngle( );
        boolean useReverseNormalizedTiltAngle = cameraConfigurationObject.getUseReverseNormalizedTiltAngle( );
        double minTiltVelocity = cameraConfigurationObject.getMinTiltVelocity( );
        double maxTiltVelocity = cameraConfigurationObject.getMaxTiltVelocity( );
        double minTiltSpeed = cameraConfigurationObject.getMinTiltSpeed( );
        double maxTiltSpeed = cameraConfigurationObject.getMaxTiltSpeed( );
        double minPanAngle = cameraConfigurationObject.getMinPanAngle( );
        double maxPanAngle = cameraConfigurationObject.getMaxPanAngle( );
        double minPanScaleAngle = cameraConfigurationObject.getMinPanScaleAngle( );
        double maxPanScaleAngle = cameraConfigurationObject.getMaxPanScaleAngle( );
        boolean useReversePanAngle = cameraConfigurationObject.getUseReversePanAngle( );
        boolean useReverseNormalizedPanAngle = cameraConfigurationObject.getUseReverseNormalizedPanAngle( );
        double minPanVelocity = cameraConfigurationObject.getMinPanVelocity( );
        double maxPanVelocity = cameraConfigurationObject.getMaxPanVelocity( );
        double minPanSpeed = cameraConfigurationObject.getMinPanSpeed( );
        double maxPanSpeed = cameraConfigurationObject.getMaxPanSpeed( );
        int focalLengthMode = cameraConfigurationObject.getFocalLengthMode( );
        double minFocalLength = cameraConfigurationObject.getMinFocalLength( );
        double maxFocalLength = cameraConfigurationObject.getMaxFocalLength( );
        double minFocalLengthScale = cameraConfigurationObject.getMinFocalLengthScale( );
        double maxFocalLengthScale = cameraConfigurationObject.getMaxFocalLengthScale( );
        double minZoomVelocity = cameraConfigurationObject.getMinZoomVelocity( );
        double maxZoomVelocity = cameraConfigurationObject.getMaxZoomVelocity( );
        double minZoomSpeed = cameraConfigurationObject.getMinZoomSpeed( );
        double maxZoomSpeed = cameraConfigurationObject.getMaxZoomSpeed( );
        double imageSensorWidth = cameraConfigurationObject.getImageSensorWidth( );
        double imageSensorHeight = cameraConfigurationObject.getImageSensorHeight( );
        double homePanAngle = cameraConfigurationObject.getHomePanAngle( );
        double homeTiltAngle = cameraConfigurationObject.getHomeTiltAngle( );
        double homeFocalLength = cameraConfigurationObject.getHomeFocalLength( );
        double panOffset = cameraConfigurationObject.getPanOffset( );
        double tiltOffset = cameraConfigurationObject.getTiltOffset( );
        double aimAltitude = cameraConfigurationObject.getAimAltitude( );
        double minimumTargetWidth = cameraConfigurationObject.getMinimumTargetWidth( );
        TimeSpan targetLockTimeout = cameraConfigurationObject.getTargetLockTimeout( );
        TimeSpan updateStatusInterval = cameraConfigurationObject.getUpdateStatusInterval( );
        TimeSpan readTimeout = cameraConfigurationObject.getReadTimeout( );
        TimeSpan moveCommandStatusDelay = cameraConfigurationObject.getMoveCommandStatusDelay( );
        String ptzProfileName = cameraConfigurationObject.getPtzProfileName( );
        String ptzConfigurationToken = cameraConfigurationObject.getPtzConfigurationToken( );
        String videoSourceToken = cameraConfigurationObject.getVideoSourceToken( );
        var result = insertCameraConfiguration( id, camera, timestamp, cameraControlProtocol, cameraURL, configurationURL, userName, password, useRtspUriOverride, rtspUriOverride, latitude, longitude, altitude, useRelativePosition, panTiltMode, minTiltAngle, maxTiltAngle, minTiltScaleAngle, maxTiltScaleAngle, useReverseTiltAngle, useReverseNormalizedTiltAngle, minTiltVelocity, maxTiltVelocity, minTiltSpeed, maxTiltSpeed, minPanAngle, maxPanAngle, minPanScaleAngle, maxPanScaleAngle, useReversePanAngle, useReverseNormalizedPanAngle, minPanVelocity, maxPanVelocity, minPanSpeed, maxPanSpeed, focalLengthMode, minFocalLength, maxFocalLength, minFocalLengthScale, maxFocalLengthScale, minZoomVelocity, maxZoomVelocity, minZoomSpeed, maxZoomSpeed, imageSensorWidth, imageSensorHeight, homePanAngle, homeTiltAngle, homeFocalLength, panOffset, tiltOffset, aimAltitude, minimumTargetWidth, targetLockTimeout, updateStatusInterval, readTimeout, moveCommandStatusDelay, ptzProfileName, ptzConfigurationToken, videoSourceToken );
        if( result.isSuccess() ) {
            cameraConfigurationObject.setId(result.getId());
            cameraConfigurationObject.setRowVersion(0);
            cameraConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateCameraConfiguration( Guid id, long rowVersion, Guid camera, DateTime timestamp, int cameraControlProtocol, String cameraURL, String configurationURL, String userName, String password, boolean useRtspUriOverride, String rtspUriOverride, double latitude, double longitude, double altitude, boolean useRelativePosition, int panTiltMode, double minTiltAngle, double maxTiltAngle, double minTiltScaleAngle, double maxTiltScaleAngle, boolean useReverseTiltAngle, boolean useReverseNormalizedTiltAngle, double minTiltVelocity, double maxTiltVelocity, double minTiltSpeed, double maxTiltSpeed, double minPanAngle, double maxPanAngle, double minPanScaleAngle, double maxPanScaleAngle, boolean useReversePanAngle, boolean useReverseNormalizedPanAngle, double minPanVelocity, double maxPanVelocity, double minPanSpeed, double maxPanSpeed, int focalLengthMode, double minFocalLength, double maxFocalLength, double minFocalLengthScale, double maxFocalLengthScale, double minZoomVelocity, double maxZoomVelocity, double minZoomSpeed, double maxZoomSpeed, double imageSensorWidth, double imageSensorHeight, double homePanAngle, double homeTiltAngle, double homeFocalLength, double panOffset, double tiltOffset, double aimAltitude, double minimumTargetWidth, TimeSpan targetLockTimeout, TimeSpan updateStatusInterval, TimeSpan readTimeout, TimeSpan moveCommandStatusDelay, String ptzProfileName, String ptzConfigurationToken, String videoSourceToken ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, cameraControlProtocol);
            callableStatement.setString(6, cameraURL);
            callableStatement.setString(7, configurationURL);
            callableStatement.setString(8, userName);
            callableStatement.setString(9, password);
            callableStatement.setBoolean(10, useRtspUriOverride);
            callableStatement.setString(11, rtspUriOverride);
            callableStatement.setDouble(12, latitude);
            callableStatement.setDouble(13, longitude);
            callableStatement.setDouble(14, altitude);
            callableStatement.setBoolean(15, useRelativePosition);
            callableStatement.setInt32(16, panTiltMode);
            callableStatement.setDouble(17, minTiltAngle);
            callableStatement.setDouble(18, maxTiltAngle);
            callableStatement.setDouble(19, minTiltScaleAngle);
            callableStatement.setDouble(20, maxTiltScaleAngle);
            callableStatement.setBoolean(21, useReverseTiltAngle);
            callableStatement.setBoolean(22, useReverseNormalizedTiltAngle);
            callableStatement.setDouble(23, minTiltVelocity);
            callableStatement.setDouble(24, maxTiltVelocity);
            callableStatement.setDouble(25, minTiltSpeed);
            callableStatement.setDouble(26, maxTiltSpeed);
            callableStatement.setDouble(27, minPanAngle);
            callableStatement.setDouble(28, maxPanAngle);
            callableStatement.setDouble(29, minPanScaleAngle);
            callableStatement.setDouble(30, maxPanScaleAngle);
            callableStatement.setBoolean(31, useReversePanAngle);
            callableStatement.setBoolean(32, useReverseNormalizedPanAngle);
            callableStatement.setDouble(33, minPanVelocity);
            callableStatement.setDouble(34, maxPanVelocity);
            callableStatement.setDouble(35, minPanSpeed);
            callableStatement.setDouble(36, maxPanSpeed);
            callableStatement.setInt32(37, focalLengthMode);
            callableStatement.setDouble(38, minFocalLength);
            callableStatement.setDouble(39, maxFocalLength);
            callableStatement.setDouble(40, minFocalLengthScale);
            callableStatement.setDouble(41, maxFocalLengthScale);
            callableStatement.setDouble(42, minZoomVelocity);
            callableStatement.setDouble(43, maxZoomVelocity);
            callableStatement.setDouble(44, minZoomSpeed);
            callableStatement.setDouble(45, maxZoomSpeed);
            callableStatement.setDouble(46, imageSensorWidth);
            callableStatement.setDouble(47, imageSensorHeight);
            callableStatement.setDouble(48, homePanAngle);
            callableStatement.setDouble(49, homeTiltAngle);
            callableStatement.setDouble(50, homeFocalLength);
            callableStatement.setDouble(51, panOffset);
            callableStatement.setDouble(52, tiltOffset);
            callableStatement.setDouble(53, aimAltitude);
            callableStatement.setDouble(54, minimumTargetWidth);
            callableStatement.setTimeSpan(55, targetLockTimeout);
            callableStatement.setTimeSpan(56, updateStatusInterval);
            callableStatement.setTimeSpan(57, readTimeout);
            callableStatement.setTimeSpan(58, moveCommandStatusDelay);
            callableStatement.setString(59, ptzProfileName);
            callableStatement.setString(60, ptzConfigurationToken);
            callableStatement.setString(61, videoSourceToken);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraConfiguration( CameraConfigurationObject cameraConfigurationObject ) throws SQLException {
        Guid id = cameraConfigurationObject.getId();
        long rowVersion = cameraConfigurationObject.getRowVersion();
        Guid camera = cameraConfigurationObject.getCamera();
        DateTime timestamp = cameraConfigurationObject.getTimestamp();
        int cameraControlProtocol = cameraConfigurationObject.getCameraControlProtocol();
        String cameraURL = cameraConfigurationObject.getCameraURL();
        String configurationURL = cameraConfigurationObject.getConfigurationURL();
        String userName = cameraConfigurationObject.getUserName();
        String password = cameraConfigurationObject.getPassword();
        boolean useRtspUriOverride = cameraConfigurationObject.getUseRtspUriOverride();
        String rtspUriOverride = cameraConfigurationObject.getRtspUriOverride();
        double latitude = cameraConfigurationObject.getLatitude();
        double longitude = cameraConfigurationObject.getLongitude();
        double altitude = cameraConfigurationObject.getAltitude();
        boolean useRelativePosition = cameraConfigurationObject.getUseRelativePosition();
        int panTiltMode = cameraConfigurationObject.getPanTiltMode();
        double minTiltAngle = cameraConfigurationObject.getMinTiltAngle();
        double maxTiltAngle = cameraConfigurationObject.getMaxTiltAngle();
        double minTiltScaleAngle = cameraConfigurationObject.getMinTiltScaleAngle();
        double maxTiltScaleAngle = cameraConfigurationObject.getMaxTiltScaleAngle();
        boolean useReverseTiltAngle = cameraConfigurationObject.getUseReverseTiltAngle();
        boolean useReverseNormalizedTiltAngle = cameraConfigurationObject.getUseReverseNormalizedTiltAngle();
        double minTiltVelocity = cameraConfigurationObject.getMinTiltVelocity();
        double maxTiltVelocity = cameraConfigurationObject.getMaxTiltVelocity();
        double minTiltSpeed = cameraConfigurationObject.getMinTiltSpeed();
        double maxTiltSpeed = cameraConfigurationObject.getMaxTiltSpeed();
        double minPanAngle = cameraConfigurationObject.getMinPanAngle();
        double maxPanAngle = cameraConfigurationObject.getMaxPanAngle();
        double minPanScaleAngle = cameraConfigurationObject.getMinPanScaleAngle();
        double maxPanScaleAngle = cameraConfigurationObject.getMaxPanScaleAngle();
        boolean useReversePanAngle = cameraConfigurationObject.getUseReversePanAngle();
        boolean useReverseNormalizedPanAngle = cameraConfigurationObject.getUseReverseNormalizedPanAngle();
        double minPanVelocity = cameraConfigurationObject.getMinPanVelocity();
        double maxPanVelocity = cameraConfigurationObject.getMaxPanVelocity();
        double minPanSpeed = cameraConfigurationObject.getMinPanSpeed();
        double maxPanSpeed = cameraConfigurationObject.getMaxPanSpeed();
        int focalLengthMode = cameraConfigurationObject.getFocalLengthMode();
        double minFocalLength = cameraConfigurationObject.getMinFocalLength();
        double maxFocalLength = cameraConfigurationObject.getMaxFocalLength();
        double minFocalLengthScale = cameraConfigurationObject.getMinFocalLengthScale();
        double maxFocalLengthScale = cameraConfigurationObject.getMaxFocalLengthScale();
        double minZoomVelocity = cameraConfigurationObject.getMinZoomVelocity();
        double maxZoomVelocity = cameraConfigurationObject.getMaxZoomVelocity();
        double minZoomSpeed = cameraConfigurationObject.getMinZoomSpeed();
        double maxZoomSpeed = cameraConfigurationObject.getMaxZoomSpeed();
        double imageSensorWidth = cameraConfigurationObject.getImageSensorWidth();
        double imageSensorHeight = cameraConfigurationObject.getImageSensorHeight();
        double homePanAngle = cameraConfigurationObject.getHomePanAngle();
        double homeTiltAngle = cameraConfigurationObject.getHomeTiltAngle();
        double homeFocalLength = cameraConfigurationObject.getHomeFocalLength();
        double panOffset = cameraConfigurationObject.getPanOffset();
        double tiltOffset = cameraConfigurationObject.getTiltOffset();
        double aimAltitude = cameraConfigurationObject.getAimAltitude();
        double minimumTargetWidth = cameraConfigurationObject.getMinimumTargetWidth();
        TimeSpan targetLockTimeout = cameraConfigurationObject.getTargetLockTimeout();
        TimeSpan updateStatusInterval = cameraConfigurationObject.getUpdateStatusInterval();
        TimeSpan readTimeout = cameraConfigurationObject.getReadTimeout();
        TimeSpan moveCommandStatusDelay = cameraConfigurationObject.getMoveCommandStatusDelay();
        String ptzProfileName = cameraConfigurationObject.getPtzProfileName();
        String ptzConfigurationToken = cameraConfigurationObject.getPtzConfigurationToken();
        String videoSourceToken = cameraConfigurationObject.getVideoSourceToken();
        var result = updateCameraConfiguration( id, rowVersion, camera, timestamp, cameraControlProtocol, cameraURL, configurationURL, userName, password, useRtspUriOverride, rtspUriOverride, latitude, longitude, altitude, useRelativePosition, panTiltMode, minTiltAngle, maxTiltAngle, minTiltScaleAngle, maxTiltScaleAngle, useReverseTiltAngle, useReverseNormalizedTiltAngle, minTiltVelocity, maxTiltVelocity, minTiltSpeed, maxTiltSpeed, minPanAngle, maxPanAngle, minPanScaleAngle, maxPanScaleAngle, useReversePanAngle, useReverseNormalizedPanAngle, minPanVelocity, maxPanVelocity, minPanSpeed, maxPanSpeed, focalLengthMode, minFocalLength, maxFocalLength, minFocalLengthScale, maxFocalLengthScale, minZoomVelocity, maxZoomVelocity, minZoomSpeed, maxZoomSpeed, imageSensorWidth, imageSensorHeight, homePanAngle, homeTiltAngle, homeFocalLength, panOffset, tiltOffset, aimAltitude, minimumTargetWidth, targetLockTimeout, updateStatusInterval, readTimeout, moveCommandStatusDelay, ptzProfileName, ptzConfigurationToken, videoSourceToken );
        if( result.isSuccess( ) ) {
            cameraConfigurationObject.setRowVersion(result.getRowVersion());
            cameraConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraConfiguration( CameraConfigurationObject cameraConfigurationObject ) throws SQLException {
        var id = cameraConfigurationObject.getId( );
        var rowVersion = cameraConfigurationObject.getRowVersion();
        var result = deleteCameraConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraPanCalibration( Guid id, Guid camera, DateTime timestamp ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraPanCalibrationInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraPanCalibration( CameraPanCalibrationObject cameraPanCalibrationObject ) throws SQLException {
        Guid id = cameraPanCalibrationObject.getId( );
        Guid camera = cameraPanCalibrationObject.getCamera( );
        DateTime timestamp = cameraPanCalibrationObject.getTimestamp( );
        var result = insertCameraPanCalibration( id, camera, timestamp );
        if( result.isSuccess() ) {
            cameraPanCalibrationObject.setId(result.getId());
            cameraPanCalibrationObject.setRowVersion(0);
            cameraPanCalibrationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateCameraPanCalibration( Guid id, long rowVersion, Guid camera, DateTime timestamp ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraPanCalibrationUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraPanCalibration( CameraPanCalibrationObject cameraPanCalibrationObject ) throws SQLException {
        Guid id = cameraPanCalibrationObject.getId();
        long rowVersion = cameraPanCalibrationObject.getRowVersion();
        Guid camera = cameraPanCalibrationObject.getCamera();
        DateTime timestamp = cameraPanCalibrationObject.getTimestamp();
        var result = updateCameraPanCalibration( id, rowVersion, camera, timestamp );
        if( result.isSuccess( ) ) {
            cameraPanCalibrationObject.setRowVersion(result.getRowVersion());
            cameraPanCalibrationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraPanCalibration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraPanCalibrationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraPanCalibration( CameraPanCalibrationObject cameraPanCalibrationObject ) throws SQLException {
        var id = cameraPanCalibrationObject.getId( );
        var rowVersion = cameraPanCalibrationObject.getRowVersion();
        var result = deleteCameraPanCalibration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraPanCalibrationValue( Guid id, Guid panCalibration, double panAngle, double panOffset ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraPanCalibrationValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, panCalibration);
            callableStatement.setDouble(3, panAngle);
            callableStatement.setDouble(4, panOffset);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraPanCalibrationValue( CameraPanCalibrationValueObject cameraPanCalibrationValueObject ) throws SQLException {
        Guid id = cameraPanCalibrationValueObject.getId( );
        Guid panCalibration = cameraPanCalibrationValueObject.getPanCalibration( );
        double panAngle = cameraPanCalibrationValueObject.getPanAngle( );
        double panOffset = cameraPanCalibrationValueObject.getPanOffset( );
        var result = insertCameraPanCalibrationValue( id, panCalibration, panAngle, panOffset );
        if( result.isSuccess() ) {
            cameraPanCalibrationValueObject.setId(result.getId());
            cameraPanCalibrationValueObject.setRowVersion(0);
            cameraPanCalibrationValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateCameraPanCalibrationValue( Guid id, long rowVersion, Guid panCalibration, double panAngle, double panOffset ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraPanCalibrationValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, panCalibration);
            callableStatement.setDouble(4, panAngle);
            callableStatement.setDouble(5, panOffset);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraPanCalibrationValue( CameraPanCalibrationValueObject cameraPanCalibrationValueObject ) throws SQLException {
        Guid id = cameraPanCalibrationValueObject.getId();
        long rowVersion = cameraPanCalibrationValueObject.getRowVersion();
        Guid panCalibration = cameraPanCalibrationValueObject.getPanCalibration();
        double panAngle = cameraPanCalibrationValueObject.getPanAngle();
        double panOffset = cameraPanCalibrationValueObject.getPanOffset();
        var result = updateCameraPanCalibrationValue( id, rowVersion, panCalibration, panAngle, panOffset );
        if( result.isSuccess( ) ) {
            cameraPanCalibrationValueObject.setRowVersion(result.getRowVersion());
            cameraPanCalibrationValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraPanCalibrationValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraPanCalibrationValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraPanCalibrationValue( CameraPanCalibrationValueObject cameraPanCalibrationValueObject ) throws SQLException {
        var id = cameraPanCalibrationValueObject.getId( );
        var rowVersion = cameraPanCalibrationValueObject.getRowVersion();
        var result = deleteCameraPanCalibrationValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraStatus( Guid id, Guid camera, Guid track, DateTime timestamp, int positionPanTiltMode, double panAngle, double tiltAngle, int positionFocalLengthMode, double focalLength, int panTiltMoveStatus, int zoomMoveStatus, int velocityPanTiltMode, Double panVelocity, Double tiltVelocity, int velocityFocalLengthMode, Double zoomVelocity, int activeFeatures, String error ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraStatusInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setNullableGuid(3, track);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, positionPanTiltMode);
            callableStatement.setDouble(6, panAngle);
            callableStatement.setDouble(7, tiltAngle);
            callableStatement.setInt32(8, positionFocalLengthMode);
            callableStatement.setDouble(9, focalLength);
            callableStatement.setInt32(10, panTiltMoveStatus);
            callableStatement.setInt32(11, zoomMoveStatus);
            callableStatement.setInt32(12, velocityPanTiltMode);
            callableStatement.setNullableDouble(13, panVelocity);
            callableStatement.setNullableDouble(14, tiltVelocity);
            callableStatement.setInt32(15, velocityFocalLengthMode);
            callableStatement.setNullableDouble(16, zoomVelocity);
            callableStatement.setInt32(17, activeFeatures);
            callableStatement.setString(18, error);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraStatus( Guid id, Guid camera, DateTime timestamp, int positionPanTiltMode, double panAngle, double tiltAngle, int positionFocalLengthMode, double focalLength, int panTiltMoveStatus, int zoomMoveStatus, int velocityPanTiltMode, Double panVelocity, Double tiltVelocity, int velocityFocalLengthMode, Double zoomVelocity, int activeFeatures, String error ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraStatusInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, positionPanTiltMode);
            callableStatement.setDouble(5, panAngle);
            callableStatement.setDouble(6, tiltAngle);
            callableStatement.setInt32(7, positionFocalLengthMode);
            callableStatement.setDouble(8, focalLength);
            callableStatement.setInt32(9, panTiltMoveStatus);
            callableStatement.setInt32(10, zoomMoveStatus);
            callableStatement.setInt32(11, velocityPanTiltMode);
            callableStatement.setNullableDouble(12, panVelocity);
            callableStatement.setNullableDouble(13, tiltVelocity);
            callableStatement.setInt32(14, velocityFocalLengthMode);
            callableStatement.setNullableDouble(15, zoomVelocity);
            callableStatement.setInt32(16, activeFeatures);
            callableStatement.setString(17, error);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraStatus( CameraStatusObject cameraStatusObject ) throws SQLException {
        Guid id = cameraStatusObject.getId( );
        Guid camera = cameraStatusObject.getCamera( );
        Guid track = cameraStatusObject.getTrack( );
        DateTime timestamp = cameraStatusObject.getTimestamp( );
        int positionPanTiltMode = cameraStatusObject.getPositionPanTiltMode( );
        double panAngle = cameraStatusObject.getPanAngle( );
        double tiltAngle = cameraStatusObject.getTiltAngle( );
        int positionFocalLengthMode = cameraStatusObject.getPositionFocalLengthMode( );
        double focalLength = cameraStatusObject.getFocalLength( );
        int panTiltMoveStatus = cameraStatusObject.getPanTiltMoveStatus( );
        int zoomMoveStatus = cameraStatusObject.getZoomMoveStatus( );
        int velocityPanTiltMode = cameraStatusObject.getVelocityPanTiltMode( );
        Double panVelocity = cameraStatusObject.getPanVelocity( );
        Double tiltVelocity = cameraStatusObject.getTiltVelocity( );
        int velocityFocalLengthMode = cameraStatusObject.getVelocityFocalLengthMode( );
        Double zoomVelocity = cameraStatusObject.getZoomVelocity( );
        int activeFeatures = cameraStatusObject.getActiveFeatures( );
        String error = cameraStatusObject.getError( );
        var result = insertCameraStatus( id, camera, track, timestamp, positionPanTiltMode, panAngle, tiltAngle, positionFocalLengthMode, focalLength, panTiltMoveStatus, zoomMoveStatus, velocityPanTiltMode, panVelocity, tiltVelocity, velocityFocalLengthMode, zoomVelocity, activeFeatures, error );
        if( result.isSuccess() ) {
            cameraStatusObject.setId(result.getId());
            cameraStatusObject.setRowVersion(0);
            cameraStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraStatus( CameraStatusObject cameraStatusObject ) throws SQLException {
        Guid id = cameraStatusObject.getId( );
        Guid camera = cameraStatusObject.getCamera( );
        DateTime timestamp = cameraStatusObject.getTimestamp( );
        int positionPanTiltMode = cameraStatusObject.getPositionPanTiltMode( );
        double panAngle = cameraStatusObject.getPanAngle( );
        double tiltAngle = cameraStatusObject.getTiltAngle( );
        int positionFocalLengthMode = cameraStatusObject.getPositionFocalLengthMode( );
        double focalLength = cameraStatusObject.getFocalLength( );
        int panTiltMoveStatus = cameraStatusObject.getPanTiltMoveStatus( );
        int zoomMoveStatus = cameraStatusObject.getZoomMoveStatus( );
        int velocityPanTiltMode = cameraStatusObject.getVelocityPanTiltMode( );
        Double panVelocity = cameraStatusObject.getPanVelocity( );
        Double tiltVelocity = cameraStatusObject.getTiltVelocity( );
        int velocityFocalLengthMode = cameraStatusObject.getVelocityFocalLengthMode( );
        Double zoomVelocity = cameraStatusObject.getZoomVelocity( );
        int activeFeatures = cameraStatusObject.getActiveFeatures( );
        String error = cameraStatusObject.getError( );
        var result = insert1CameraStatus( id, camera, timestamp, positionPanTiltMode, panAngle, tiltAngle, positionFocalLengthMode, focalLength, panTiltMoveStatus, zoomMoveStatus, velocityPanTiltMode, panVelocity, tiltVelocity, velocityFocalLengthMode, zoomVelocity, activeFeatures, error );
        if( result.isSuccess( ) ) {
            cameraStatusObject.setId( result.getId( ) );
            cameraStatusObject.setRowVersion(0);
            cameraStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraStatus( Guid id, long rowVersion, Guid camera, Guid track, DateTime timestamp, int positionPanTiltMode, double panAngle, double tiltAngle, int positionFocalLengthMode, double focalLength, int panTiltMoveStatus, int zoomMoveStatus, int velocityPanTiltMode, Double panVelocity, Double tiltVelocity, int velocityFocalLengthMode, Double zoomVelocity, int activeFeatures, String error ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraStatusUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setNullableGuid(4, track);
            callableStatement.setLongFromDateTime(5, timestamp);
            callableStatement.setInt32(6, positionPanTiltMode);
            callableStatement.setDouble(7, panAngle);
            callableStatement.setDouble(8, tiltAngle);
            callableStatement.setInt32(9, positionFocalLengthMode);
            callableStatement.setDouble(10, focalLength);
            callableStatement.setInt32(11, panTiltMoveStatus);
            callableStatement.setInt32(12, zoomMoveStatus);
            callableStatement.setInt32(13, velocityPanTiltMode);
            callableStatement.setNullableDouble(14, panVelocity);
            callableStatement.setNullableDouble(15, tiltVelocity);
            callableStatement.setInt32(16, velocityFocalLengthMode);
            callableStatement.setNullableDouble(17, zoomVelocity);
            callableStatement.setInt32(18, activeFeatures);
            callableStatement.setString(19, error);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraStatus( Guid id, long rowVersion, Guid camera, DateTime timestamp, int positionPanTiltMode, double panAngle, double tiltAngle, int positionFocalLengthMode, double focalLength, int panTiltMoveStatus, int zoomMoveStatus, int velocityPanTiltMode, Double panVelocity, Double tiltVelocity, int velocityFocalLengthMode, Double zoomVelocity, int activeFeatures, String error ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraStatusUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, positionPanTiltMode);
            callableStatement.setDouble(6, panAngle);
            callableStatement.setDouble(7, tiltAngle);
            callableStatement.setInt32(8, positionFocalLengthMode);
            callableStatement.setDouble(9, focalLength);
            callableStatement.setInt32(10, panTiltMoveStatus);
            callableStatement.setInt32(11, zoomMoveStatus);
            callableStatement.setInt32(12, velocityPanTiltMode);
            callableStatement.setNullableDouble(13, panVelocity);
            callableStatement.setNullableDouble(14, tiltVelocity);
            callableStatement.setInt32(15, velocityFocalLengthMode);
            callableStatement.setNullableDouble(16, zoomVelocity);
            callableStatement.setInt32(17, activeFeatures);
            callableStatement.setString(18, error);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraStatus( Guid id, long rowVersion, Guid track ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraStatusUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, track);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraStatus( CameraStatusObject cameraStatusObject ) throws SQLException {
        Guid id = cameraStatusObject.getId();
        long rowVersion = cameraStatusObject.getRowVersion();
        Guid camera = cameraStatusObject.getCamera();
        Guid track = cameraStatusObject.getTrack();
        DateTime timestamp = cameraStatusObject.getTimestamp();
        int positionPanTiltMode = cameraStatusObject.getPositionPanTiltMode();
        double panAngle = cameraStatusObject.getPanAngle();
        double tiltAngle = cameraStatusObject.getTiltAngle();
        int positionFocalLengthMode = cameraStatusObject.getPositionFocalLengthMode();
        double focalLength = cameraStatusObject.getFocalLength();
        int panTiltMoveStatus = cameraStatusObject.getPanTiltMoveStatus();
        int zoomMoveStatus = cameraStatusObject.getZoomMoveStatus();
        int velocityPanTiltMode = cameraStatusObject.getVelocityPanTiltMode();
        Double panVelocity = cameraStatusObject.getPanVelocity();
        Double tiltVelocity = cameraStatusObject.getTiltVelocity();
        int velocityFocalLengthMode = cameraStatusObject.getVelocityFocalLengthMode();
        Double zoomVelocity = cameraStatusObject.getZoomVelocity();
        int activeFeatures = cameraStatusObject.getActiveFeatures();
        String error = cameraStatusObject.getError();
        var result = updateCameraStatus( id, rowVersion, camera, track, timestamp, positionPanTiltMode, panAngle, tiltAngle, positionFocalLengthMode, focalLength, panTiltMoveStatus, zoomMoveStatus, velocityPanTiltMode, panVelocity, tiltVelocity, velocityFocalLengthMode, zoomVelocity, activeFeatures, error );
        if( result.isSuccess( ) ) {
            cameraStatusObject.setRowVersion(result.getRowVersion());
            cameraStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraStatus( CameraStatusObject cameraStatusObject ) throws SQLException {
        Guid id = cameraStatusObject.getId();
        long rowVersion = cameraStatusObject.getRowVersion();
        Guid camera = cameraStatusObject.getCamera();
        DateTime timestamp = cameraStatusObject.getTimestamp();
        int positionPanTiltMode = cameraStatusObject.getPositionPanTiltMode();
        double panAngle = cameraStatusObject.getPanAngle();
        double tiltAngle = cameraStatusObject.getTiltAngle();
        int positionFocalLengthMode = cameraStatusObject.getPositionFocalLengthMode();
        double focalLength = cameraStatusObject.getFocalLength();
        int panTiltMoveStatus = cameraStatusObject.getPanTiltMoveStatus();
        int zoomMoveStatus = cameraStatusObject.getZoomMoveStatus();
        int velocityPanTiltMode = cameraStatusObject.getVelocityPanTiltMode();
        Double panVelocity = cameraStatusObject.getPanVelocity();
        Double tiltVelocity = cameraStatusObject.getTiltVelocity();
        int velocityFocalLengthMode = cameraStatusObject.getVelocityFocalLengthMode();
        Double zoomVelocity = cameraStatusObject.getZoomVelocity();
        int activeFeatures = cameraStatusObject.getActiveFeatures();
        String error = cameraStatusObject.getError();
        var result = update1CameraStatus( id, rowVersion, camera, timestamp, positionPanTiltMode, panAngle, tiltAngle, positionFocalLengthMode, focalLength, panTiltMoveStatus, zoomMoveStatus, velocityPanTiltMode, panVelocity, tiltVelocity, velocityFocalLengthMode, zoomVelocity, activeFeatures, error );
        if( result.isSuccess( ) ) {
            cameraStatusObject.setRowVersion(result.getRowVersion());
            cameraStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraStatus( CameraStatusObject cameraStatusObject ) throws SQLException {
        Guid id = cameraStatusObject.getId();
        long rowVersion = cameraStatusObject.getRowVersion();
        Guid track = cameraStatusObject.getTrack();
        var result = update2CameraStatus( id, rowVersion, track );
        if( result.isSuccess( ) ) {
            cameraStatusObject.setRowVersion(result.getRowVersion());
            cameraStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraStatus( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraStatusDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraStatus( CameraStatusObject cameraStatusObject ) throws SQLException {
        var id = cameraStatusObject.getId( );
        var rowVersion = cameraStatusObject.getRowVersion();
        var result = deleteCameraStatus( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraTiltCalibration( Guid id, Guid camera, DateTime timestamp ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraTiltCalibrationInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraTiltCalibration( CameraTiltCalibrationObject cameraTiltCalibrationObject ) throws SQLException {
        Guid id = cameraTiltCalibrationObject.getId( );
        Guid camera = cameraTiltCalibrationObject.getCamera( );
        DateTime timestamp = cameraTiltCalibrationObject.getTimestamp( );
        var result = insertCameraTiltCalibration( id, camera, timestamp );
        if( result.isSuccess() ) {
            cameraTiltCalibrationObject.setId(result.getId());
            cameraTiltCalibrationObject.setRowVersion(0);
            cameraTiltCalibrationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateCameraTiltCalibration( Guid id, long rowVersion, Guid camera, DateTime timestamp ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraTiltCalibrationUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraTiltCalibration( CameraTiltCalibrationObject cameraTiltCalibrationObject ) throws SQLException {
        Guid id = cameraTiltCalibrationObject.getId();
        long rowVersion = cameraTiltCalibrationObject.getRowVersion();
        Guid camera = cameraTiltCalibrationObject.getCamera();
        DateTime timestamp = cameraTiltCalibrationObject.getTimestamp();
        var result = updateCameraTiltCalibration( id, rowVersion, camera, timestamp );
        if( result.isSuccess( ) ) {
            cameraTiltCalibrationObject.setRowVersion(result.getRowVersion());
            cameraTiltCalibrationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraTiltCalibration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraTiltCalibrationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraTiltCalibration( CameraTiltCalibrationObject cameraTiltCalibrationObject ) throws SQLException {
        var id = cameraTiltCalibrationObject.getId( );
        var rowVersion = cameraTiltCalibrationObject.getRowVersion();
        var result = deleteCameraTiltCalibration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraTiltCalibrationValue( Guid id, Guid tiltCalibration, double panAngle, double tiltOffset ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraTiltCalibrationValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, tiltCalibration);
            callableStatement.setDouble(3, panAngle);
            callableStatement.setDouble(4, tiltOffset);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraTiltCalibrationValue( CameraTiltCalibrationValueObject cameraTiltCalibrationValueObject ) throws SQLException {
        Guid id = cameraTiltCalibrationValueObject.getId( );
        Guid tiltCalibration = cameraTiltCalibrationValueObject.getTiltCalibration( );
        double panAngle = cameraTiltCalibrationValueObject.getPanAngle( );
        double tiltOffset = cameraTiltCalibrationValueObject.getTiltOffset( );
        var result = insertCameraTiltCalibrationValue( id, tiltCalibration, panAngle, tiltOffset );
        if( result.isSuccess() ) {
            cameraTiltCalibrationValueObject.setId(result.getId());
            cameraTiltCalibrationValueObject.setRowVersion(0);
            cameraTiltCalibrationValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateCameraTiltCalibrationValue( Guid id, long rowVersion, Guid tiltCalibration, double panAngle, double tiltOffset ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraTiltCalibrationValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, tiltCalibration);
            callableStatement.setDouble(4, panAngle);
            callableStatement.setDouble(5, tiltOffset);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraTiltCalibrationValue( CameraTiltCalibrationValueObject cameraTiltCalibrationValueObject ) throws SQLException {
        Guid id = cameraTiltCalibrationValueObject.getId();
        long rowVersion = cameraTiltCalibrationValueObject.getRowVersion();
        Guid tiltCalibration = cameraTiltCalibrationValueObject.getTiltCalibration();
        double panAngle = cameraTiltCalibrationValueObject.getPanAngle();
        double tiltOffset = cameraTiltCalibrationValueObject.getTiltOffset();
        var result = updateCameraTiltCalibrationValue( id, rowVersion, tiltCalibration, panAngle, tiltOffset );
        if( result.isSuccess( ) ) {
            cameraTiltCalibrationValueObject.setRowVersion(result.getRowVersion());
            cameraTiltCalibrationValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraTiltCalibrationValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraTiltCalibrationValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraTiltCalibrationValue( CameraTiltCalibrationValueObject cameraTiltCalibrationValueObject ) throws SQLException {
        var id = cameraTiltCalibrationValueObject.getId( );
        var rowVersion = cameraTiltCalibrationValueObject.getRowVersion();
        var result = deleteCameraTiltCalibrationValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraZoomCalibration( Guid id, Guid camera, DateTime timestamp ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraZoomCalibrationInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, camera);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraZoomCalibration( CameraZoomCalibrationObject cameraZoomCalibrationObject ) throws SQLException {
        Guid id = cameraZoomCalibrationObject.getId( );
        Guid camera = cameraZoomCalibrationObject.getCamera( );
        DateTime timestamp = cameraZoomCalibrationObject.getTimestamp( );
        var result = insertCameraZoomCalibration( id, camera, timestamp );
        if( result.isSuccess() ) {
            cameraZoomCalibrationObject.setId(result.getId());
            cameraZoomCalibrationObject.setRowVersion(0);
            cameraZoomCalibrationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateCameraZoomCalibration( Guid id, long rowVersion, Guid camera, DateTime timestamp ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraZoomCalibrationUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraZoomCalibration( CameraZoomCalibrationObject cameraZoomCalibrationObject ) throws SQLException {
        Guid id = cameraZoomCalibrationObject.getId();
        long rowVersion = cameraZoomCalibrationObject.getRowVersion();
        Guid camera = cameraZoomCalibrationObject.getCamera();
        DateTime timestamp = cameraZoomCalibrationObject.getTimestamp();
        var result = updateCameraZoomCalibration( id, rowVersion, camera, timestamp );
        if( result.isSuccess( ) ) {
            cameraZoomCalibrationObject.setRowVersion(result.getRowVersion());
            cameraZoomCalibrationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraZoomCalibration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraZoomCalibrationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraZoomCalibration( CameraZoomCalibrationObject cameraZoomCalibrationObject ) throws SQLException {
        var id = cameraZoomCalibrationObject.getId( );
        var rowVersion = cameraZoomCalibrationObject.getRowVersion();
        var result = deleteCameraZoomCalibration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraZoomCalibrationValue( Guid id, Guid zoomCalibration, double focalLength, double focalLengthOffset ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraZoomCalibrationValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, zoomCalibration);
            callableStatement.setDouble(3, focalLength);
            callableStatement.setDouble(4, focalLengthOffset);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraZoomCalibrationValue( CameraZoomCalibrationValueObject cameraZoomCalibrationValueObject ) throws SQLException {
        Guid id = cameraZoomCalibrationValueObject.getId( );
        Guid zoomCalibration = cameraZoomCalibrationValueObject.getZoomCalibration( );
        double focalLength = cameraZoomCalibrationValueObject.getFocalLength( );
        double focalLengthOffset = cameraZoomCalibrationValueObject.getFocalLengthOffset( );
        var result = insertCameraZoomCalibrationValue( id, zoomCalibration, focalLength, focalLengthOffset );
        if( result.isSuccess() ) {
            cameraZoomCalibrationValueObject.setId(result.getId());
            cameraZoomCalibrationValueObject.setRowVersion(0);
            cameraZoomCalibrationValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateCameraZoomCalibrationValue( Guid id, long rowVersion, Guid zoomCalibration, double focalLength, double focalLengthOffset ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraZoomCalibrationValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, zoomCalibration);
            callableStatement.setDouble(4, focalLength);
            callableStatement.setDouble(5, focalLengthOffset);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraZoomCalibrationValue( CameraZoomCalibrationValueObject cameraZoomCalibrationValueObject ) throws SQLException {
        Guid id = cameraZoomCalibrationValueObject.getId();
        long rowVersion = cameraZoomCalibrationValueObject.getRowVersion();
        Guid zoomCalibration = cameraZoomCalibrationValueObject.getZoomCalibration();
        double focalLength = cameraZoomCalibrationValueObject.getFocalLength();
        double focalLengthOffset = cameraZoomCalibrationValueObject.getFocalLengthOffset();
        var result = updateCameraZoomCalibrationValue( id, rowVersion, zoomCalibration, focalLength, focalLengthOffset );
        if( result.isSuccess( ) ) {
            cameraZoomCalibrationValueObject.setRowVersion(result.getRowVersion());
            cameraZoomCalibrationValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraZoomCalibrationValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraZoomCalibrationValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraZoomCalibrationValue( CameraZoomCalibrationValueObject cameraZoomCalibrationValueObject ) throws SQLException {
        var id = cameraZoomCalibrationValueObject.getId( );
        var rowVersion = cameraZoomCalibrationValueObject.getRowVersion();
        var result = deleteCameraZoomCalibrationValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCatalog( Guid id, Guid catalog, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CatalogInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Catalog( Guid id, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CatalogInsert1(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCatalog( CatalogObject catalogObject ) throws SQLException {
        Guid id = catalogObject.getId( );
        Guid catalog = catalogObject.getCatalog( );
        String name = catalogObject.getName( );
        var result = insertCatalog( id, catalog, name );
        if( result.isSuccess() ) {
            catalogObject.setId(result.getId());
            catalogObject.setRowVersion(0);
            catalogObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Catalog( CatalogObject catalogObject ) throws SQLException {
        Guid id = catalogObject.getId( );
        String name = catalogObject.getName( );
        var result = insert1Catalog( id, name );
        if( result.isSuccess( ) ) {
            catalogObject.setId( result.getId( ) );
            catalogObject.setRowVersion(0);
            catalogObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCatalog( Guid id, long rowVersion, Guid catalog, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CatalogUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Catalog( Guid id, long rowVersion, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CatalogUpdate1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Catalog( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CatalogUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCatalog( CatalogObject catalogObject ) throws SQLException {
        Guid id = catalogObject.getId();
        long rowVersion = catalogObject.getRowVersion();
        Guid catalog = catalogObject.getCatalog();
        String name = catalogObject.getName();
        var result = updateCatalog( id, rowVersion, catalog, name );
        if( result.isSuccess( ) ) {
            catalogObject.setRowVersion(result.getRowVersion());
            catalogObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Catalog( CatalogObject catalogObject ) throws SQLException {
        Guid id = catalogObject.getId();
        long rowVersion = catalogObject.getRowVersion();
        String name = catalogObject.getName();
        var result = update1Catalog( id, rowVersion, name );
        if( result.isSuccess( ) ) {
            catalogObject.setRowVersion(result.getRowVersion());
            catalogObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Catalog( CatalogObject catalogObject ) throws SQLException {
        Guid id = catalogObject.getId();
        long rowVersion = catalogObject.getRowVersion();
        Guid catalog = catalogObject.getCatalog();
        var result = update2Catalog( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            catalogObject.setRowVersion(result.getRowVersion());
            catalogObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCatalog( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CatalogDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCatalog( CatalogObject catalogObject ) throws SQLException {
        var id = catalogObject.getId( );
        var rowVersion = catalogObject.getRowVersion();
        var result = deleteCatalog( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertElement( Guid id, Guid catalog, String name, Guid elementType ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ElementInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setNullableGuid(4, elementType);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Element( Guid id, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ElementInsert1(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertElement( ElementObject elementObject ) throws SQLException {
        Guid id = elementObject.getId( );
        Guid catalog = elementObject.getCatalog( );
        String name = elementObject.getName( );
        Guid elementType = elementObject.getElementType( );
        var result = insertElement( id, catalog, name, elementType );
        if( result.isSuccess() ) {
            elementObject.setId(result.getId());
            elementObject.setRowVersion(0);
            elementObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Element( ElementObject elementObject ) throws SQLException {
        Guid id = elementObject.getId( );
        String name = elementObject.getName( );
        var result = insert1Element( id, name );
        if( result.isSuccess( ) ) {
            elementObject.setId( result.getId( ) );
            elementObject.setRowVersion(0);
            elementObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateElement( Guid id, long rowVersion, Guid catalog, String name, Guid elementType ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ElementUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setNullableGuid(5, elementType);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Element( Guid id, long rowVersion, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ElementUpdate1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Element( Guid id, long rowVersion, Guid catalog, Guid elementType ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ElementUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, elementType);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateElement( ElementObject elementObject ) throws SQLException {
        Guid id = elementObject.getId();
        long rowVersion = elementObject.getRowVersion();
        Guid catalog = elementObject.getCatalog();
        String name = elementObject.getName();
        Guid elementType = elementObject.getElementType();
        var result = updateElement( id, rowVersion, catalog, name, elementType );
        if( result.isSuccess( ) ) {
            elementObject.setRowVersion(result.getRowVersion());
            elementObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Element( ElementObject elementObject ) throws SQLException {
        Guid id = elementObject.getId();
        long rowVersion = elementObject.getRowVersion();
        String name = elementObject.getName();
        var result = update1Element( id, rowVersion, name );
        if( result.isSuccess( ) ) {
            elementObject.setRowVersion(result.getRowVersion());
            elementObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Element( ElementObject elementObject ) throws SQLException {
        Guid id = elementObject.getId();
        long rowVersion = elementObject.getRowVersion();
        Guid catalog = elementObject.getCatalog();
        Guid elementType = elementObject.getElementType();
        var result = update2Element( id, rowVersion, catalog, elementType );
        if( result.isSuccess( ) ) {
            elementObject.setRowVersion(result.getRowVersion());
            elementObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteElement( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ElementDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteElement( ElementObject elementObject ) throws SQLException {
        var id = elementObject.getId( );
        var rowVersion = elementObject.getRowVersion();
        var result = deleteElement( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCollectionInfo( Guid id, long count ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CollectionInfoInsert(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setInt64(2, count);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCollectionInfo( CollectionInfoObject collectionInfoObject ) throws SQLException {
        Guid id = collectionInfoObject.getId( );
        long count = collectionInfoObject.getCount( );
        var result = insertCollectionInfo( id, count );
        if( result.isSuccess() ) {
            collectionInfoObject.setId(result.getId());
            collectionInfoObject.setRowVersion(0);
            collectionInfoObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateCollectionInfo( Guid id, long rowVersion, long count ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CollectionInfoUpdate(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setInt64(3, count);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCollectionInfo( CollectionInfoObject collectionInfoObject ) throws SQLException {
        Guid id = collectionInfoObject.getId();
        long rowVersion = collectionInfoObject.getRowVersion();
        long count = collectionInfoObject.getCount();
        var result = updateCollectionInfo( id, rowVersion, count );
        if( result.isSuccess( ) ) {
            collectionInfoObject.setRowVersion(result.getRowVersion());
            collectionInfoObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCollectionInfo( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CollectionInfoDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCollectionInfo( CollectionInfoObject collectionInfoObject ) throws SQLException {
        var id = collectionInfoObject.getId( );
        var rowVersion = collectionInfoObject.getRowVersion();
        var result = deleteCollectionInfo( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCountry( Guid id, String name, int code, String alpha2, String alpha3 ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CountryInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setInt32(3, code);
            callableStatement.setString(4, alpha2);
            callableStatement.setString(5, alpha3);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCountry( CountryObject countryObject ) throws SQLException {
        Guid id = countryObject.getId( );
        String name = countryObject.getName( );
        int code = countryObject.getCode( );
        String alpha2 = countryObject.getAlpha2( );
        String alpha3 = countryObject.getAlpha3( );
        var result = insertCountry( id, name, code, alpha2, alpha3 );
        if( result.isSuccess() ) {
            countryObject.setId(result.getId());
            countryObject.setRowVersion(0);
            countryObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateCountry( Guid id, long rowVersion, String name, int code, String alpha2, String alpha3 ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CountryUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setInt32(4, code);
            callableStatement.setString(5, alpha2);
            callableStatement.setString(6, alpha3);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCountry( CountryObject countryObject ) throws SQLException {
        Guid id = countryObject.getId();
        long rowVersion = countryObject.getRowVersion();
        String name = countryObject.getName();
        int code = countryObject.getCode();
        String alpha2 = countryObject.getAlpha2();
        String alpha3 = countryObject.getAlpha3();
        var result = updateCountry( id, rowVersion, name, code, alpha2, alpha3 );
        if( result.isSuccess( ) ) {
            countryObject.setRowVersion(result.getRowVersion());
            countryObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCountry( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CountryDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCountry( CountryObject countryObject ) throws SQLException {
        var id = countryObject.getId( );
        var rowVersion = countryObject.getRowVersion();
        var result = deleteCountry( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCursorInfo( Guid id, int typeCode ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CursorInfoInsert(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setInt32(2, typeCode);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCursorInfo( CursorInfoObject cursorInfoObject ) throws SQLException {
        Guid id = cursorInfoObject.getId( );
        int typeCode = cursorInfoObject.getTypeCode( );
        var result = insertCursorInfo( id, typeCode );
        if( result.isSuccess() ) {
            cursorInfoObject.setId(result.getId());
            cursorInfoObject.setRowVersion(0);
            cursorInfoObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateCursorInfo( Guid id, long rowVersion, int typeCode ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CursorInfoUpdate(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setInt32(3, typeCode);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCursorInfo( CursorInfoObject cursorInfoObject ) throws SQLException {
        Guid id = cursorInfoObject.getId();
        long rowVersion = cursorInfoObject.getRowVersion();
        int typeCode = cursorInfoObject.getTypeCode();
        var result = updateCursorInfo( id, rowVersion, typeCode );
        if( result.isSuccess( ) ) {
            cursorInfoObject.setRowVersion(result.getRowVersion());
            cursorInfoObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCursorInfo( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CursorInfoDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCursorInfo( CursorInfoObject cursorInfoObject ) throws SQLException {
        var id = cursorInfoObject.getId( );
        var rowVersion = cursorInfoObject.getRowVersion();
        var result = deleteCursorInfo( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDateTimeTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, DateTime value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DateTimeTimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setLongFromNullableDateTime(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDateTimeTimeseriesValue( DateTimeTimeseriesValueObject dateTimeTimeseriesValueObject ) throws SQLException {
        Guid id = dateTimeTimeseriesValueObject.getId( );
        Guid timeseries = dateTimeTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = dateTimeTimeseriesValueObject.getTimestamp( );
        DateTime value = dateTimeTimeseriesValueObject.getValue( );
        var result = insertDateTimeTimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            dateTimeTimeseriesValueObject.setId(result.getId());
            dateTimeTimeseriesValueObject.setRowVersion(0);
            dateTimeTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateDateTimeTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, DateTime value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DateTimeTimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setLongFromNullableDateTime(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDateTimeTimeseriesValue( DateTimeTimeseriesValueObject dateTimeTimeseriesValueObject ) throws SQLException {
        Guid id = dateTimeTimeseriesValueObject.getId();
        long rowVersion = dateTimeTimeseriesValueObject.getRowVersion();
        Guid timeseries = dateTimeTimeseriesValueObject.getTimeseries();
        DateTime timestamp = dateTimeTimeseriesValueObject.getTimestamp();
        DateTime value = dateTimeTimeseriesValueObject.getValue();
        var result = updateDateTimeTimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            dateTimeTimeseriesValueObject.setRowVersion(result.getRowVersion());
            dateTimeTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDateTimeTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DateTimeTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDateTimeTimeseriesValue( DateTimeTimeseriesValueObject dateTimeTimeseriesValueObject ) throws SQLException {
        var id = dateTimeTimeseriesValueObject.getId( );
        var rowVersion = dateTimeTimeseriesValueObject.getRowVersion();
        var result = deleteDateTimeTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDeviceHost( Guid id, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DeviceHostInsert(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDeviceHost( DeviceHostObject deviceHostObject ) throws SQLException {
        Guid id = deviceHostObject.getId( );
        String name = deviceHostObject.getName( );
        var result = insertDeviceHost( id, name );
        if( result.isSuccess() ) {
            deviceHostObject.setId(result.getId());
            deviceHostObject.setRowVersion(0);
            deviceHostObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateDeviceHost( Guid id, long rowVersion, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DeviceHostUpdate(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDeviceHost( DeviceHostObject deviceHostObject ) throws SQLException {
        Guid id = deviceHostObject.getId();
        long rowVersion = deviceHostObject.getRowVersion();
        String name = deviceHostObject.getName();
        var result = updateDeviceHost( id, rowVersion, name );
        if( result.isSuccess( ) ) {
            deviceHostObject.setRowVersion(result.getRowVersion());
            deviceHostObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDeviceHost( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DeviceHostDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDeviceHost( DeviceHostObject deviceHostObject ) throws SQLException {
        var id = deviceHostObject.getId( );
        var rowVersion = deviceHostObject.getRowVersion();
        var result = deleteDeviceHost( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDeviceHostConfiguration( Guid id, Guid host, DateTime timestamp, String hostname, int port, String queueName ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DeviceHostConfigurationInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setString(4, hostname);
            callableStatement.setInt32(5, port);
            callableStatement.setString(6, queueName);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDeviceHostConfiguration( DeviceHostConfigurationObject deviceHostConfigurationObject ) throws SQLException {
        Guid id = deviceHostConfigurationObject.getId( );
        Guid host = deviceHostConfigurationObject.getHost( );
        DateTime timestamp = deviceHostConfigurationObject.getTimestamp( );
        String hostname = deviceHostConfigurationObject.getHostname( );
        int port = deviceHostConfigurationObject.getPort( );
        String queueName = deviceHostConfigurationObject.getQueueName( );
        var result = insertDeviceHostConfiguration( id, host, timestamp, hostname, port, queueName );
        if( result.isSuccess() ) {
            deviceHostConfigurationObject.setId(result.getId());
            deviceHostConfigurationObject.setRowVersion(0);
            deviceHostConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateDeviceHostConfiguration( Guid id, long rowVersion, Guid host, DateTime timestamp, String hostname, int port, String queueName ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DeviceHostConfigurationUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setString(5, hostname);
            callableStatement.setInt32(6, port);
            callableStatement.setString(7, queueName);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDeviceHostConfiguration( DeviceHostConfigurationObject deviceHostConfigurationObject ) throws SQLException {
        Guid id = deviceHostConfigurationObject.getId();
        long rowVersion = deviceHostConfigurationObject.getRowVersion();
        Guid host = deviceHostConfigurationObject.getHost();
        DateTime timestamp = deviceHostConfigurationObject.getTimestamp();
        String hostname = deviceHostConfigurationObject.getHostname();
        int port = deviceHostConfigurationObject.getPort();
        String queueName = deviceHostConfigurationObject.getQueueName();
        var result = updateDeviceHostConfiguration( id, rowVersion, host, timestamp, hostname, port, queueName );
        if( result.isSuccess( ) ) {
            deviceHostConfigurationObject.setRowVersion(result.getRowVersion());
            deviceHostConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDeviceHostConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DeviceHostConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDeviceHostConfiguration( DeviceHostConfigurationObject deviceHostConfigurationObject ) throws SQLException {
        var id = deviceHostConfigurationObject.getId( );
        var rowVersion = deviceHostConfigurationObject.getRowVersion();
        var result = deleteDeviceHostConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDoubleTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Double value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DoubleTimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableDouble(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDoubleTimeseriesValue( DoubleTimeseriesValueObject doubleTimeseriesValueObject ) throws SQLException {
        Guid id = doubleTimeseriesValueObject.getId( );
        Guid timeseries = doubleTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = doubleTimeseriesValueObject.getTimestamp( );
        Double value = doubleTimeseriesValueObject.getValue( );
        var result = insertDoubleTimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            doubleTimeseriesValueObject.setId(result.getId());
            doubleTimeseriesValueObject.setRowVersion(0);
            doubleTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateDoubleTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Double value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DoubleTimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableDouble(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDoubleTimeseriesValue( DoubleTimeseriesValueObject doubleTimeseriesValueObject ) throws SQLException {
        Guid id = doubleTimeseriesValueObject.getId();
        long rowVersion = doubleTimeseriesValueObject.getRowVersion();
        Guid timeseries = doubleTimeseriesValueObject.getTimeseries();
        DateTime timestamp = doubleTimeseriesValueObject.getTimestamp();
        Double value = doubleTimeseriesValueObject.getValue();
        var result = updateDoubleTimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            doubleTimeseriesValueObject.setRowVersion(result.getRowVersion());
            doubleTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDoubleTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DoubleTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDoubleTimeseriesValue( DoubleTimeseriesValueObject doubleTimeseriesValueObject ) throws SQLException {
        var id = doubleTimeseriesValueObject.getId( );
        var rowVersion = doubleTimeseriesValueObject.getRowVersion();
        var result = deleteDoubleTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertFacilityType( Guid id, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call FacilityTypeInsert(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertFacilityType( FacilityTypeObject facilityTypeObject ) throws SQLException {
        Guid id = facilityTypeObject.getId( );
        String name = facilityTypeObject.getName( );
        var result = insertFacilityType( id, name );
        if( result.isSuccess() ) {
            facilityTypeObject.setId(result.getId());
            facilityTypeObject.setRowVersion(0);
            facilityTypeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateFacilityType( Guid id, long rowVersion, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call FacilityTypeUpdate(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateFacilityType( FacilityTypeObject facilityTypeObject ) throws SQLException {
        Guid id = facilityTypeObject.getId();
        long rowVersion = facilityTypeObject.getRowVersion();
        String name = facilityTypeObject.getName();
        var result = updateFacilityType( id, rowVersion, name );
        if( result.isSuccess( ) ) {
            facilityTypeObject.setRowVersion(result.getRowVersion());
            facilityTypeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteFacilityType( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call FacilityTypeDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteFacilityType( FacilityTypeObject facilityTypeObject ) throws SQLException {
        var id = facilityTypeObject.getId( );
        var rowVersion = facilityTypeObject.getRowVersion();
        var result = deleteFacilityType( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGeoPosition2DTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Double latitude, Double longitude ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GeoPosition2DTimeseriesValueInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableDouble(4, latitude);
            callableStatement.setNullableDouble(5, longitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGeoPosition2DTimeseriesValue( GeoPosition2DTimeseriesValueObject geoPosition2DTimeseriesValueObject ) throws SQLException {
        Guid id = geoPosition2DTimeseriesValueObject.getId( );
        Guid timeseries = geoPosition2DTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = geoPosition2DTimeseriesValueObject.getTimestamp( );
        Double latitude = geoPosition2DTimeseriesValueObject.getLatitude( );
        Double longitude = geoPosition2DTimeseriesValueObject.getLongitude( );
        var result = insertGeoPosition2DTimeseriesValue( id, timeseries, timestamp, latitude, longitude );
        if( result.isSuccess() ) {
            geoPosition2DTimeseriesValueObject.setId(result.getId());
            geoPosition2DTimeseriesValueObject.setRowVersion(0);
            geoPosition2DTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateGeoPosition2DTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Double latitude, Double longitude ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GeoPosition2DTimeseriesValueUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableDouble(5, latitude);
            callableStatement.setNullableDouble(6, longitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGeoPosition2DTimeseriesValue( GeoPosition2DTimeseriesValueObject geoPosition2DTimeseriesValueObject ) throws SQLException {
        Guid id = geoPosition2DTimeseriesValueObject.getId();
        long rowVersion = geoPosition2DTimeseriesValueObject.getRowVersion();
        Guid timeseries = geoPosition2DTimeseriesValueObject.getTimeseries();
        DateTime timestamp = geoPosition2DTimeseriesValueObject.getTimestamp();
        Double latitude = geoPosition2DTimeseriesValueObject.getLatitude();
        Double longitude = geoPosition2DTimeseriesValueObject.getLongitude();
        var result = updateGeoPosition2DTimeseriesValue( id, rowVersion, timeseries, timestamp, latitude, longitude );
        if( result.isSuccess( ) ) {
            geoPosition2DTimeseriesValueObject.setRowVersion(result.getRowVersion());
            geoPosition2DTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGeoPosition2DTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GeoPosition2DTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGeoPosition2DTimeseriesValue( GeoPosition2DTimeseriesValueObject geoPosition2DTimeseriesValueObject ) throws SQLException {
        var id = geoPosition2DTimeseriesValueObject.getId( );
        var rowVersion = geoPosition2DTimeseriesValueObject.getRowVersion();
        var result = deleteGeoPosition2DTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGeoPosition3DTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Double latitude, Double longitude, Double altitude ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GeoPosition3DTimeseriesValueInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableDouble(4, latitude);
            callableStatement.setNullableDouble(5, longitude);
            callableStatement.setNullableDouble(6, altitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGeoPosition3DTimeseriesValue( GeoPosition3DTimeseriesValueObject geoPosition3DTimeseriesValueObject ) throws SQLException {
        Guid id = geoPosition3DTimeseriesValueObject.getId( );
        Guid timeseries = geoPosition3DTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = geoPosition3DTimeseriesValueObject.getTimestamp( );
        Double latitude = geoPosition3DTimeseriesValueObject.getLatitude( );
        Double longitude = geoPosition3DTimeseriesValueObject.getLongitude( );
        Double altitude = geoPosition3DTimeseriesValueObject.getAltitude( );
        var result = insertGeoPosition3DTimeseriesValue( id, timeseries, timestamp, latitude, longitude, altitude );
        if( result.isSuccess() ) {
            geoPosition3DTimeseriesValueObject.setId(result.getId());
            geoPosition3DTimeseriesValueObject.setRowVersion(0);
            geoPosition3DTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateGeoPosition3DTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Double latitude, Double longitude, Double altitude ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GeoPosition3DTimeseriesValueUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableDouble(5, latitude);
            callableStatement.setNullableDouble(6, longitude);
            callableStatement.setNullableDouble(7, altitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGeoPosition3DTimeseriesValue( GeoPosition3DTimeseriesValueObject geoPosition3DTimeseriesValueObject ) throws SQLException {
        Guid id = geoPosition3DTimeseriesValueObject.getId();
        long rowVersion = geoPosition3DTimeseriesValueObject.getRowVersion();
        Guid timeseries = geoPosition3DTimeseriesValueObject.getTimeseries();
        DateTime timestamp = geoPosition3DTimeseriesValueObject.getTimestamp();
        Double latitude = geoPosition3DTimeseriesValueObject.getLatitude();
        Double longitude = geoPosition3DTimeseriesValueObject.getLongitude();
        Double altitude = geoPosition3DTimeseriesValueObject.getAltitude();
        var result = updateGeoPosition3DTimeseriesValue( id, rowVersion, timeseries, timestamp, latitude, longitude, altitude );
        if( result.isSuccess( ) ) {
            geoPosition3DTimeseriesValueObject.setRowVersion(result.getRowVersion());
            geoPosition3DTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGeoPosition3DTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GeoPosition3DTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGeoPosition3DTimeseriesValue( GeoPosition3DTimeseriesValueObject geoPosition3DTimeseriesValueObject ) throws SQLException {
        var id = geoPosition3DTimeseriesValueObject.getId( );
        var rowVersion = geoPosition3DTimeseriesValueObject.getRowVersion();
        var result = deleteGeoPosition3DTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGNSSDeviceCommand( Guid id, Guid gNSSDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSDeviceCommandInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, gNSSDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GNSSDeviceCommand( Guid id, Guid gNSSDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSDeviceCommandInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, gNSSDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGNSSDeviceCommand( GNSSDeviceCommandObject gNSSDeviceCommandObject ) throws SQLException {
        Guid id = gNSSDeviceCommandObject.getId( );
        Guid gNSSDevice = gNSSDeviceCommandObject.getGNSSDevice( );
        DateTime timestamp = gNSSDeviceCommandObject.getTimestamp( );
        int deviceCommandSourceType = gNSSDeviceCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = gNSSDeviceCommandObject.getDeviceCommandSourceId( );
        Guid reply = gNSSDeviceCommandObject.getReply( );
        var result = insertGNSSDeviceCommand( id, gNSSDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            gNSSDeviceCommandObject.setId(result.getId());
            gNSSDeviceCommandObject.setRowVersion(0);
            gNSSDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GNSSDeviceCommand( GNSSDeviceCommandObject gNSSDeviceCommandObject ) throws SQLException {
        Guid id = gNSSDeviceCommandObject.getId( );
        Guid gNSSDevice = gNSSDeviceCommandObject.getGNSSDevice( );
        DateTime timestamp = gNSSDeviceCommandObject.getTimestamp( );
        int deviceCommandSourceType = gNSSDeviceCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = gNSSDeviceCommandObject.getDeviceCommandSourceId( );
        var result = insert1GNSSDeviceCommand( id, gNSSDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            gNSSDeviceCommandObject.setId( result.getId( ) );
            gNSSDeviceCommandObject.setRowVersion(0);
            gNSSDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGNSSDeviceCommand( Guid id, long rowVersion, Guid gNSSDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSDeviceCommandUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, gNSSDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GNSSDeviceCommand( Guid id, long rowVersion, Guid gNSSDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSDeviceCommandUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, gNSSDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GNSSDeviceCommand( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSDeviceCommandUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGNSSDeviceCommand( GNSSDeviceCommandObject gNSSDeviceCommandObject ) throws SQLException {
        Guid id = gNSSDeviceCommandObject.getId();
        long rowVersion = gNSSDeviceCommandObject.getRowVersion();
        Guid gNSSDevice = gNSSDeviceCommandObject.getGNSSDevice();
        DateTime timestamp = gNSSDeviceCommandObject.getTimestamp();
        int deviceCommandSourceType = gNSSDeviceCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = gNSSDeviceCommandObject.getDeviceCommandSourceId();
        Guid reply = gNSSDeviceCommandObject.getReply();
        var result = updateGNSSDeviceCommand( id, rowVersion, gNSSDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            gNSSDeviceCommandObject.setRowVersion(result.getRowVersion());
            gNSSDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GNSSDeviceCommand( GNSSDeviceCommandObject gNSSDeviceCommandObject ) throws SQLException {
        Guid id = gNSSDeviceCommandObject.getId();
        long rowVersion = gNSSDeviceCommandObject.getRowVersion();
        Guid gNSSDevice = gNSSDeviceCommandObject.getGNSSDevice();
        DateTime timestamp = gNSSDeviceCommandObject.getTimestamp();
        int deviceCommandSourceType = gNSSDeviceCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = gNSSDeviceCommandObject.getDeviceCommandSourceId();
        var result = update1GNSSDeviceCommand( id, rowVersion, gNSSDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            gNSSDeviceCommandObject.setRowVersion(result.getRowVersion());
            gNSSDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GNSSDeviceCommand( GNSSDeviceCommandObject gNSSDeviceCommandObject ) throws SQLException {
        Guid id = gNSSDeviceCommandObject.getId();
        long rowVersion = gNSSDeviceCommandObject.getRowVersion();
        Guid reply = gNSSDeviceCommandObject.getReply();
        var result = update2GNSSDeviceCommand( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            gNSSDeviceCommandObject.setRowVersion(result.getRowVersion());
            gNSSDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGNSSDeviceCommand( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GNSSDeviceCommandDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGNSSDeviceCommand( GNSSDeviceCommandObject gNSSDeviceCommandObject ) throws SQLException {
        var id = gNSSDeviceCommandObject.getId( );
        var rowVersion = gNSSDeviceCommandObject.getRowVersion();
        var result = deleteGNSSDeviceCommand( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGNSSDeviceCommandReply( Guid id, Guid gNSSDevice, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSDeviceCommandReplyInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, gNSSDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableGuid(4, command);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GNSSDeviceCommandReply( Guid id, Guid gNSSDevice, DateTime timestamp, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSDeviceCommandReplyInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, gNSSDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, status);
            callableStatement.setString(5, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGNSSDeviceCommandReply( GNSSDeviceCommandReplyObject gNSSDeviceCommandReplyObject ) throws SQLException {
        Guid id = gNSSDeviceCommandReplyObject.getId( );
        Guid gNSSDevice = gNSSDeviceCommandReplyObject.getGNSSDevice( );
        DateTime timestamp = gNSSDeviceCommandReplyObject.getTimestamp( );
        Guid command = gNSSDeviceCommandReplyObject.getCommand( );
        int status = gNSSDeviceCommandReplyObject.getStatus( );
        String message = gNSSDeviceCommandReplyObject.getMessage( );
        var result = insertGNSSDeviceCommandReply( id, gNSSDevice, timestamp, command, status, message );
        if( result.isSuccess() ) {
            gNSSDeviceCommandReplyObject.setId(result.getId());
            gNSSDeviceCommandReplyObject.setRowVersion(0);
            gNSSDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GNSSDeviceCommandReply( GNSSDeviceCommandReplyObject gNSSDeviceCommandReplyObject ) throws SQLException {
        Guid id = gNSSDeviceCommandReplyObject.getId( );
        Guid gNSSDevice = gNSSDeviceCommandReplyObject.getGNSSDevice( );
        DateTime timestamp = gNSSDeviceCommandReplyObject.getTimestamp( );
        int status = gNSSDeviceCommandReplyObject.getStatus( );
        String message = gNSSDeviceCommandReplyObject.getMessage( );
        var result = insert1GNSSDeviceCommandReply( id, gNSSDevice, timestamp, status, message );
        if( result.isSuccess( ) ) {
            gNSSDeviceCommandReplyObject.setId( result.getId( ) );
            gNSSDeviceCommandReplyObject.setRowVersion(0);
            gNSSDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGNSSDeviceCommandReply( Guid id, long rowVersion, Guid gNSSDevice, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSDeviceCommandReplyUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, gNSSDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableGuid(5, command);
            callableStatement.setInt32(6, status);
            callableStatement.setString(7, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GNSSDeviceCommandReply( Guid id, long rowVersion, Guid gNSSDevice, DateTime timestamp, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSDeviceCommandReplyUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, gNSSDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GNSSDeviceCommandReply( Guid id, long rowVersion, Guid command ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSDeviceCommandReplyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, command);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGNSSDeviceCommandReply( GNSSDeviceCommandReplyObject gNSSDeviceCommandReplyObject ) throws SQLException {
        Guid id = gNSSDeviceCommandReplyObject.getId();
        long rowVersion = gNSSDeviceCommandReplyObject.getRowVersion();
        Guid gNSSDevice = gNSSDeviceCommandReplyObject.getGNSSDevice();
        DateTime timestamp = gNSSDeviceCommandReplyObject.getTimestamp();
        Guid command = gNSSDeviceCommandReplyObject.getCommand();
        int status = gNSSDeviceCommandReplyObject.getStatus();
        String message = gNSSDeviceCommandReplyObject.getMessage();
        var result = updateGNSSDeviceCommandReply( id, rowVersion, gNSSDevice, timestamp, command, status, message );
        if( result.isSuccess( ) ) {
            gNSSDeviceCommandReplyObject.setRowVersion(result.getRowVersion());
            gNSSDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GNSSDeviceCommandReply( GNSSDeviceCommandReplyObject gNSSDeviceCommandReplyObject ) throws SQLException {
        Guid id = gNSSDeviceCommandReplyObject.getId();
        long rowVersion = gNSSDeviceCommandReplyObject.getRowVersion();
        Guid gNSSDevice = gNSSDeviceCommandReplyObject.getGNSSDevice();
        DateTime timestamp = gNSSDeviceCommandReplyObject.getTimestamp();
        int status = gNSSDeviceCommandReplyObject.getStatus();
        String message = gNSSDeviceCommandReplyObject.getMessage();
        var result = update1GNSSDeviceCommandReply( id, rowVersion, gNSSDevice, timestamp, status, message );
        if( result.isSuccess( ) ) {
            gNSSDeviceCommandReplyObject.setRowVersion(result.getRowVersion());
            gNSSDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GNSSDeviceCommandReply( GNSSDeviceCommandReplyObject gNSSDeviceCommandReplyObject ) throws SQLException {
        Guid id = gNSSDeviceCommandReplyObject.getId();
        long rowVersion = gNSSDeviceCommandReplyObject.getRowVersion();
        Guid command = gNSSDeviceCommandReplyObject.getCommand();
        var result = update2GNSSDeviceCommandReply( id, rowVersion, command );
        if( result.isSuccess( ) ) {
            gNSSDeviceCommandReplyObject.setRowVersion(result.getRowVersion());
            gNSSDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGNSSDeviceCommandReply( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GNSSDeviceCommandReplyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGNSSDeviceCommandReply( GNSSDeviceCommandReplyObject gNSSDeviceCommandReplyObject ) throws SQLException {
        var id = gNSSDeviceCommandReplyObject.getId( );
        var rowVersion = gNSSDeviceCommandReplyObject.getRowVersion();
        var result = deleteGNSSDeviceCommandReply( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGNSSDeviceConfiguration( Guid id, Guid gNSSDevice, DateTime timestamp, double defaultLatitude, double defaultLongitude, double defaultAltitude, double latitudeOffset, double longitudeOffset, double altitudeOffset ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSDeviceConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, gNSSDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setDouble(4, defaultLatitude);
            callableStatement.setDouble(5, defaultLongitude);
            callableStatement.setDouble(6, defaultAltitude);
            callableStatement.setDouble(7, latitudeOffset);
            callableStatement.setDouble(8, longitudeOffset);
            callableStatement.setDouble(9, altitudeOffset);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGNSSDeviceConfiguration( GNSSDeviceConfigurationObject gNSSDeviceConfigurationObject ) throws SQLException {
        Guid id = gNSSDeviceConfigurationObject.getId( );
        Guid gNSSDevice = gNSSDeviceConfigurationObject.getGNSSDevice( );
        DateTime timestamp = gNSSDeviceConfigurationObject.getTimestamp( );
        double defaultLatitude = gNSSDeviceConfigurationObject.getDefaultLatitude( );
        double defaultLongitude = gNSSDeviceConfigurationObject.getDefaultLongitude( );
        double defaultAltitude = gNSSDeviceConfigurationObject.getDefaultAltitude( );
        double latitudeOffset = gNSSDeviceConfigurationObject.getLatitudeOffset( );
        double longitudeOffset = gNSSDeviceConfigurationObject.getLongitudeOffset( );
        double altitudeOffset = gNSSDeviceConfigurationObject.getAltitudeOffset( );
        var result = insertGNSSDeviceConfiguration( id, gNSSDevice, timestamp, defaultLatitude, defaultLongitude, defaultAltitude, latitudeOffset, longitudeOffset, altitudeOffset );
        if( result.isSuccess() ) {
            gNSSDeviceConfigurationObject.setId(result.getId());
            gNSSDeviceConfigurationObject.setRowVersion(0);
            gNSSDeviceConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateGNSSDeviceConfiguration( Guid id, long rowVersion, Guid gNSSDevice, DateTime timestamp, double defaultLatitude, double defaultLongitude, double defaultAltitude, double latitudeOffset, double longitudeOffset, double altitudeOffset ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSDeviceConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, gNSSDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setDouble(5, defaultLatitude);
            callableStatement.setDouble(6, defaultLongitude);
            callableStatement.setDouble(7, defaultAltitude);
            callableStatement.setDouble(8, latitudeOffset);
            callableStatement.setDouble(9, longitudeOffset);
            callableStatement.setDouble(10, altitudeOffset);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGNSSDeviceConfiguration( GNSSDeviceConfigurationObject gNSSDeviceConfigurationObject ) throws SQLException {
        Guid id = gNSSDeviceConfigurationObject.getId();
        long rowVersion = gNSSDeviceConfigurationObject.getRowVersion();
        Guid gNSSDevice = gNSSDeviceConfigurationObject.getGNSSDevice();
        DateTime timestamp = gNSSDeviceConfigurationObject.getTimestamp();
        double defaultLatitude = gNSSDeviceConfigurationObject.getDefaultLatitude();
        double defaultLongitude = gNSSDeviceConfigurationObject.getDefaultLongitude();
        double defaultAltitude = gNSSDeviceConfigurationObject.getDefaultAltitude();
        double latitudeOffset = gNSSDeviceConfigurationObject.getLatitudeOffset();
        double longitudeOffset = gNSSDeviceConfigurationObject.getLongitudeOffset();
        double altitudeOffset = gNSSDeviceConfigurationObject.getAltitudeOffset();
        var result = updateGNSSDeviceConfiguration( id, rowVersion, gNSSDevice, timestamp, defaultLatitude, defaultLongitude, defaultAltitude, latitudeOffset, longitudeOffset, altitudeOffset );
        if( result.isSuccess( ) ) {
            gNSSDeviceConfigurationObject.setRowVersion(result.getRowVersion());
            gNSSDeviceConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGNSSDeviceConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GNSSDeviceConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGNSSDeviceConfiguration( GNSSDeviceConfigurationObject gNSSDeviceConfigurationObject ) throws SQLException {
        var id = gNSSDeviceConfigurationObject.getId( );
        var rowVersion = gNSSDeviceConfigurationObject.getRowVersion();
        var result = deleteGNSSDeviceConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGuidTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Guid value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GuidTimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableGuid(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGuidTimeseriesValue( GuidTimeseriesValueObject guidTimeseriesValueObject ) throws SQLException {
        Guid id = guidTimeseriesValueObject.getId( );
        Guid timeseries = guidTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = guidTimeseriesValueObject.getTimestamp( );
        Guid value = guidTimeseriesValueObject.getValue( );
        var result = insertGuidTimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            guidTimeseriesValueObject.setId(result.getId());
            guidTimeseriesValueObject.setRowVersion(0);
            guidTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateGuidTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Guid value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GuidTimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableGuid(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGuidTimeseriesValue( GuidTimeseriesValueObject guidTimeseriesValueObject ) throws SQLException {
        Guid id = guidTimeseriesValueObject.getId();
        long rowVersion = guidTimeseriesValueObject.getRowVersion();
        Guid timeseries = guidTimeseriesValueObject.getTimeseries();
        DateTime timestamp = guidTimeseriesValueObject.getTimestamp();
        Guid value = guidTimeseriesValueObject.getValue();
        var result = updateGuidTimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            guidTimeseriesValueObject.setRowVersion(result.getRowVersion());
            guidTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGuidTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GuidTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGuidTimeseriesValue( GuidTimeseriesValueObject guidTimeseriesValueObject ) throws SQLException {
        var id = guidTimeseriesValueObject.getId( );
        var rowVersion = guidTimeseriesValueObject.getRowVersion();
        var result = deleteGuidTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGyroDeviceCommand( Guid id, Guid gyroDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroDeviceCommandInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, gyroDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GyroDeviceCommand( Guid id, Guid gyroDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroDeviceCommandInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, gyroDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGyroDeviceCommand( GyroDeviceCommandObject gyroDeviceCommandObject ) throws SQLException {
        Guid id = gyroDeviceCommandObject.getId( );
        Guid gyroDevice = gyroDeviceCommandObject.getGyroDevice( );
        DateTime timestamp = gyroDeviceCommandObject.getTimestamp( );
        int deviceCommandSourceType = gyroDeviceCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = gyroDeviceCommandObject.getDeviceCommandSourceId( );
        Guid reply = gyroDeviceCommandObject.getReply( );
        var result = insertGyroDeviceCommand( id, gyroDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            gyroDeviceCommandObject.setId(result.getId());
            gyroDeviceCommandObject.setRowVersion(0);
            gyroDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GyroDeviceCommand( GyroDeviceCommandObject gyroDeviceCommandObject ) throws SQLException {
        Guid id = gyroDeviceCommandObject.getId( );
        Guid gyroDevice = gyroDeviceCommandObject.getGyroDevice( );
        DateTime timestamp = gyroDeviceCommandObject.getTimestamp( );
        int deviceCommandSourceType = gyroDeviceCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = gyroDeviceCommandObject.getDeviceCommandSourceId( );
        var result = insert1GyroDeviceCommand( id, gyroDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            gyroDeviceCommandObject.setId( result.getId( ) );
            gyroDeviceCommandObject.setRowVersion(0);
            gyroDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGyroDeviceCommand( Guid id, long rowVersion, Guid gyroDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroDeviceCommandUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, gyroDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GyroDeviceCommand( Guid id, long rowVersion, Guid gyroDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroDeviceCommandUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, gyroDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GyroDeviceCommand( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroDeviceCommandUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGyroDeviceCommand( GyroDeviceCommandObject gyroDeviceCommandObject ) throws SQLException {
        Guid id = gyroDeviceCommandObject.getId();
        long rowVersion = gyroDeviceCommandObject.getRowVersion();
        Guid gyroDevice = gyroDeviceCommandObject.getGyroDevice();
        DateTime timestamp = gyroDeviceCommandObject.getTimestamp();
        int deviceCommandSourceType = gyroDeviceCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = gyroDeviceCommandObject.getDeviceCommandSourceId();
        Guid reply = gyroDeviceCommandObject.getReply();
        var result = updateGyroDeviceCommand( id, rowVersion, gyroDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            gyroDeviceCommandObject.setRowVersion(result.getRowVersion());
            gyroDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GyroDeviceCommand( GyroDeviceCommandObject gyroDeviceCommandObject ) throws SQLException {
        Guid id = gyroDeviceCommandObject.getId();
        long rowVersion = gyroDeviceCommandObject.getRowVersion();
        Guid gyroDevice = gyroDeviceCommandObject.getGyroDevice();
        DateTime timestamp = gyroDeviceCommandObject.getTimestamp();
        int deviceCommandSourceType = gyroDeviceCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = gyroDeviceCommandObject.getDeviceCommandSourceId();
        var result = update1GyroDeviceCommand( id, rowVersion, gyroDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            gyroDeviceCommandObject.setRowVersion(result.getRowVersion());
            gyroDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GyroDeviceCommand( GyroDeviceCommandObject gyroDeviceCommandObject ) throws SQLException {
        Guid id = gyroDeviceCommandObject.getId();
        long rowVersion = gyroDeviceCommandObject.getRowVersion();
        Guid reply = gyroDeviceCommandObject.getReply();
        var result = update2GyroDeviceCommand( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            gyroDeviceCommandObject.setRowVersion(result.getRowVersion());
            gyroDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGyroDeviceCommand( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GyroDeviceCommandDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGyroDeviceCommand( GyroDeviceCommandObject gyroDeviceCommandObject ) throws SQLException {
        var id = gyroDeviceCommandObject.getId( );
        var rowVersion = gyroDeviceCommandObject.getRowVersion();
        var result = deleteGyroDeviceCommand( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGyroDeviceCommandReply( Guid id, Guid gyroDevice, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroDeviceCommandReplyInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, gyroDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableGuid(4, command);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GyroDeviceCommandReply( Guid id, Guid gyroDevice, DateTime timestamp, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroDeviceCommandReplyInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, gyroDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, status);
            callableStatement.setString(5, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGyroDeviceCommandReply( GyroDeviceCommandReplyObject gyroDeviceCommandReplyObject ) throws SQLException {
        Guid id = gyroDeviceCommandReplyObject.getId( );
        Guid gyroDevice = gyroDeviceCommandReplyObject.getGyroDevice( );
        DateTime timestamp = gyroDeviceCommandReplyObject.getTimestamp( );
        Guid command = gyroDeviceCommandReplyObject.getCommand( );
        int status = gyroDeviceCommandReplyObject.getStatus( );
        String message = gyroDeviceCommandReplyObject.getMessage( );
        var result = insertGyroDeviceCommandReply( id, gyroDevice, timestamp, command, status, message );
        if( result.isSuccess() ) {
            gyroDeviceCommandReplyObject.setId(result.getId());
            gyroDeviceCommandReplyObject.setRowVersion(0);
            gyroDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GyroDeviceCommandReply( GyroDeviceCommandReplyObject gyroDeviceCommandReplyObject ) throws SQLException {
        Guid id = gyroDeviceCommandReplyObject.getId( );
        Guid gyroDevice = gyroDeviceCommandReplyObject.getGyroDevice( );
        DateTime timestamp = gyroDeviceCommandReplyObject.getTimestamp( );
        int status = gyroDeviceCommandReplyObject.getStatus( );
        String message = gyroDeviceCommandReplyObject.getMessage( );
        var result = insert1GyroDeviceCommandReply( id, gyroDevice, timestamp, status, message );
        if( result.isSuccess( ) ) {
            gyroDeviceCommandReplyObject.setId( result.getId( ) );
            gyroDeviceCommandReplyObject.setRowVersion(0);
            gyroDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGyroDeviceCommandReply( Guid id, long rowVersion, Guid gyroDevice, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroDeviceCommandReplyUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, gyroDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableGuid(5, command);
            callableStatement.setInt32(6, status);
            callableStatement.setString(7, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GyroDeviceCommandReply( Guid id, long rowVersion, Guid gyroDevice, DateTime timestamp, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroDeviceCommandReplyUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, gyroDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GyroDeviceCommandReply( Guid id, long rowVersion, Guid command ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroDeviceCommandReplyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, command);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGyroDeviceCommandReply( GyroDeviceCommandReplyObject gyroDeviceCommandReplyObject ) throws SQLException {
        Guid id = gyroDeviceCommandReplyObject.getId();
        long rowVersion = gyroDeviceCommandReplyObject.getRowVersion();
        Guid gyroDevice = gyroDeviceCommandReplyObject.getGyroDevice();
        DateTime timestamp = gyroDeviceCommandReplyObject.getTimestamp();
        Guid command = gyroDeviceCommandReplyObject.getCommand();
        int status = gyroDeviceCommandReplyObject.getStatus();
        String message = gyroDeviceCommandReplyObject.getMessage();
        var result = updateGyroDeviceCommandReply( id, rowVersion, gyroDevice, timestamp, command, status, message );
        if( result.isSuccess( ) ) {
            gyroDeviceCommandReplyObject.setRowVersion(result.getRowVersion());
            gyroDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GyroDeviceCommandReply( GyroDeviceCommandReplyObject gyroDeviceCommandReplyObject ) throws SQLException {
        Guid id = gyroDeviceCommandReplyObject.getId();
        long rowVersion = gyroDeviceCommandReplyObject.getRowVersion();
        Guid gyroDevice = gyroDeviceCommandReplyObject.getGyroDevice();
        DateTime timestamp = gyroDeviceCommandReplyObject.getTimestamp();
        int status = gyroDeviceCommandReplyObject.getStatus();
        String message = gyroDeviceCommandReplyObject.getMessage();
        var result = update1GyroDeviceCommandReply( id, rowVersion, gyroDevice, timestamp, status, message );
        if( result.isSuccess( ) ) {
            gyroDeviceCommandReplyObject.setRowVersion(result.getRowVersion());
            gyroDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GyroDeviceCommandReply( GyroDeviceCommandReplyObject gyroDeviceCommandReplyObject ) throws SQLException {
        Guid id = gyroDeviceCommandReplyObject.getId();
        long rowVersion = gyroDeviceCommandReplyObject.getRowVersion();
        Guid command = gyroDeviceCommandReplyObject.getCommand();
        var result = update2GyroDeviceCommandReply( id, rowVersion, command );
        if( result.isSuccess( ) ) {
            gyroDeviceCommandReplyObject.setRowVersion(result.getRowVersion());
            gyroDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGyroDeviceCommandReply( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GyroDeviceCommandReplyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGyroDeviceCommandReply( GyroDeviceCommandReplyObject gyroDeviceCommandReplyObject ) throws SQLException {
        var id = gyroDeviceCommandReplyObject.getId( );
        var rowVersion = gyroDeviceCommandReplyObject.getRowVersion();
        var result = deleteGyroDeviceCommandReply( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGyroDeviceConfiguration( Guid id, Guid gyroDevice, DateTime timestamp, double defaultHeadingTrueNorth, double defaultMagneticTrueNorth, double headingTrueNorthOffset, double headingMagneticNorthOffset, String pitchTransducerName, String rollTransducerName ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroDeviceConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, gyroDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setDouble(4, defaultHeadingTrueNorth);
            callableStatement.setDouble(5, defaultMagneticTrueNorth);
            callableStatement.setDouble(6, headingTrueNorthOffset);
            callableStatement.setDouble(7, headingMagneticNorthOffset);
            callableStatement.setString(8, pitchTransducerName);
            callableStatement.setString(9, rollTransducerName);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGyroDeviceConfiguration( GyroDeviceConfigurationObject gyroDeviceConfigurationObject ) throws SQLException {
        Guid id = gyroDeviceConfigurationObject.getId( );
        Guid gyroDevice = gyroDeviceConfigurationObject.getGyroDevice( );
        DateTime timestamp = gyroDeviceConfigurationObject.getTimestamp( );
        double defaultHeadingTrueNorth = gyroDeviceConfigurationObject.getDefaultHeadingTrueNorth( );
        double defaultMagneticTrueNorth = gyroDeviceConfigurationObject.getDefaultMagneticTrueNorth( );
        double headingTrueNorthOffset = gyroDeviceConfigurationObject.getHeadingTrueNorthOffset( );
        double headingMagneticNorthOffset = gyroDeviceConfigurationObject.getHeadingMagneticNorthOffset( );
        String pitchTransducerName = gyroDeviceConfigurationObject.getPitchTransducerName( );
        String rollTransducerName = gyroDeviceConfigurationObject.getRollTransducerName( );
        var result = insertGyroDeviceConfiguration( id, gyroDevice, timestamp, defaultHeadingTrueNorth, defaultMagneticTrueNorth, headingTrueNorthOffset, headingMagneticNorthOffset, pitchTransducerName, rollTransducerName );
        if( result.isSuccess() ) {
            gyroDeviceConfigurationObject.setId(result.getId());
            gyroDeviceConfigurationObject.setRowVersion(0);
            gyroDeviceConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateGyroDeviceConfiguration( Guid id, long rowVersion, Guid gyroDevice, DateTime timestamp, double defaultHeadingTrueNorth, double defaultMagneticTrueNorth, double headingTrueNorthOffset, double headingMagneticNorthOffset, String pitchTransducerName, String rollTransducerName ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroDeviceConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, gyroDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setDouble(5, defaultHeadingTrueNorth);
            callableStatement.setDouble(6, defaultMagneticTrueNorth);
            callableStatement.setDouble(7, headingTrueNorthOffset);
            callableStatement.setDouble(8, headingMagneticNorthOffset);
            callableStatement.setString(9, pitchTransducerName);
            callableStatement.setString(10, rollTransducerName);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGyroDeviceConfiguration( GyroDeviceConfigurationObject gyroDeviceConfigurationObject ) throws SQLException {
        Guid id = gyroDeviceConfigurationObject.getId();
        long rowVersion = gyroDeviceConfigurationObject.getRowVersion();
        Guid gyroDevice = gyroDeviceConfigurationObject.getGyroDevice();
        DateTime timestamp = gyroDeviceConfigurationObject.getTimestamp();
        double defaultHeadingTrueNorth = gyroDeviceConfigurationObject.getDefaultHeadingTrueNorth();
        double defaultMagneticTrueNorth = gyroDeviceConfigurationObject.getDefaultMagneticTrueNorth();
        double headingTrueNorthOffset = gyroDeviceConfigurationObject.getHeadingTrueNorthOffset();
        double headingMagneticNorthOffset = gyroDeviceConfigurationObject.getHeadingMagneticNorthOffset();
        String pitchTransducerName = gyroDeviceConfigurationObject.getPitchTransducerName();
        String rollTransducerName = gyroDeviceConfigurationObject.getRollTransducerName();
        var result = updateGyroDeviceConfiguration( id, rowVersion, gyroDevice, timestamp, defaultHeadingTrueNorth, defaultMagneticTrueNorth, headingTrueNorthOffset, headingMagneticNorthOffset, pitchTransducerName, rollTransducerName );
        if( result.isSuccess( ) ) {
            gyroDeviceConfigurationObject.setRowVersion(result.getRowVersion());
            gyroDeviceConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGyroDeviceConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GyroDeviceConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGyroDeviceConfiguration( GyroDeviceConfigurationObject gyroDeviceConfigurationObject ) throws SQLException {
        var id = gyroDeviceConfigurationObject.getId( );
        var rowVersion = gyroDeviceConfigurationObject.getRowVersion();
        var result = deleteGyroDeviceConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCallsign( Guid id, String identifier ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CallsignInsert(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, identifier);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCallsign( CallsignObject callsignObject ) throws SQLException {
        Guid id = callsignObject.getId( );
        String identifier = callsignObject.getIdentifier( );
        var result = insertCallsign( id, identifier );
        if( result.isSuccess() ) {
            callsignObject.setId(result.getId());
            callsignObject.setRowVersion(0);
            callsignObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateCallsign( Guid id, long rowVersion, String identifier ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CallsignUpdate(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, identifier);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCallsign( CallsignObject callsignObject ) throws SQLException {
        Guid id = callsignObject.getId();
        long rowVersion = callsignObject.getRowVersion();
        String identifier = callsignObject.getIdentifier();
        var result = updateCallsign( id, rowVersion, identifier );
        if( result.isSuccess( ) ) {
            callsignObject.setRowVersion(result.getRowVersion());
            callsignObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCallsign( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CallsignDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCallsign( CallsignObject callsignObject ) throws SQLException {
        var id = callsignObject.getId( );
        var rowVersion = callsignObject.getRowVersion();
        var result = deleteCallsign( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInternationalMaritimeOrganizationNumber( Guid id, long identifier ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call InternationalMaritimeOrganizationNumberInsert(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setInt64(2, identifier);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInternationalMaritimeOrganizationNumber( InternationalMaritimeOrganizationNumberObject internationalMaritimeOrganizationNumberObject ) throws SQLException {
        Guid id = internationalMaritimeOrganizationNumberObject.getId( );
        long identifier = internationalMaritimeOrganizationNumberObject.getIdentifier( );
        var result = insertInternationalMaritimeOrganizationNumber( id, identifier );
        if( result.isSuccess() ) {
            internationalMaritimeOrganizationNumberObject.setId(result.getId());
            internationalMaritimeOrganizationNumberObject.setRowVersion(0);
            internationalMaritimeOrganizationNumberObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInternationalMaritimeOrganizationNumber( Guid id, long rowVersion, long identifier ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call InternationalMaritimeOrganizationNumberUpdate(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setInt64(3, identifier);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInternationalMaritimeOrganizationNumber( InternationalMaritimeOrganizationNumberObject internationalMaritimeOrganizationNumberObject ) throws SQLException {
        Guid id = internationalMaritimeOrganizationNumberObject.getId();
        long rowVersion = internationalMaritimeOrganizationNumberObject.getRowVersion();
        long identifier = internationalMaritimeOrganizationNumberObject.getIdentifier();
        var result = updateInternationalMaritimeOrganizationNumber( id, rowVersion, identifier );
        if( result.isSuccess( ) ) {
            internationalMaritimeOrganizationNumberObject.setRowVersion(result.getRowVersion());
            internationalMaritimeOrganizationNumberObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInternationalMaritimeOrganizationNumber( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call InternationalMaritimeOrganizationNumberDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInternationalMaritimeOrganizationNumber( InternationalMaritimeOrganizationNumberObject internationalMaritimeOrganizationNumberObject ) throws SQLException {
        var id = internationalMaritimeOrganizationNumberObject.getId( );
        var rowVersion = internationalMaritimeOrganizationNumberObject.getRowVersion();
        var result = deleteInternationalMaritimeOrganizationNumber( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertMaritimeMobileServiceIdentity( Guid id, long identifier ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MaritimeMobileServiceIdentityInsert(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setInt64(2, identifier);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertMaritimeMobileServiceIdentity( MaritimeMobileServiceIdentityObject maritimeMobileServiceIdentityObject ) throws SQLException {
        Guid id = maritimeMobileServiceIdentityObject.getId( );
        long identifier = maritimeMobileServiceIdentityObject.getIdentifier( );
        var result = insertMaritimeMobileServiceIdentity( id, identifier );
        if( result.isSuccess() ) {
            maritimeMobileServiceIdentityObject.setId(result.getId());
            maritimeMobileServiceIdentityObject.setRowVersion(0);
            maritimeMobileServiceIdentityObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateMaritimeMobileServiceIdentity( Guid id, long rowVersion, long identifier ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MaritimeMobileServiceIdentityUpdate(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setInt64(3, identifier);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateMaritimeMobileServiceIdentity( MaritimeMobileServiceIdentityObject maritimeMobileServiceIdentityObject ) throws SQLException {
        Guid id = maritimeMobileServiceIdentityObject.getId();
        long rowVersion = maritimeMobileServiceIdentityObject.getRowVersion();
        long identifier = maritimeMobileServiceIdentityObject.getIdentifier();
        var result = updateMaritimeMobileServiceIdentity( id, rowVersion, identifier );
        if( result.isSuccess( ) ) {
            maritimeMobileServiceIdentityObject.setRowVersion(result.getRowVersion());
            maritimeMobileServiceIdentityObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteMaritimeMobileServiceIdentity( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call MaritimeMobileServiceIdentityDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteMaritimeMobileServiceIdentity( MaritimeMobileServiceIdentityObject maritimeMobileServiceIdentityObject ) throws SQLException {
        var id = maritimeMobileServiceIdentityObject.getId( );
        var rowVersion = maritimeMobileServiceIdentityObject.getRowVersion();
        var result = deleteMaritimeMobileServiceIdentity( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertName( Guid id, String text ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call NameInsert(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, text);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertName( NameObject nameObject ) throws SQLException {
        Guid id = nameObject.getId( );
        String text = nameObject.getText( );
        var result = insertName( id, text );
        if( result.isSuccess() ) {
            nameObject.setId(result.getId());
            nameObject.setRowVersion(0);
            nameObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateName( Guid id, long rowVersion, String text ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call NameUpdate(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, text);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateName( NameObject nameObject ) throws SQLException {
        Guid id = nameObject.getId();
        long rowVersion = nameObject.getRowVersion();
        String text = nameObject.getText();
        var result = updateName( id, rowVersion, text );
        if( result.isSuccess( ) ) {
            nameObject.setRowVersion(result.getRowVersion());
            nameObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteName( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call NameDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteName( NameObject nameObject ) throws SQLException {
        var id = nameObject.getId( );
        var rowVersion = nameObject.getRowVersion();
        var result = deleteName( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt16TimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Short value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int16TimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableInt16(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt16TimeseriesValue( Int16TimeseriesValueObject int16TimeseriesValueObject ) throws SQLException {
        Guid id = int16TimeseriesValueObject.getId( );
        Guid timeseries = int16TimeseriesValueObject.getTimeseries( );
        DateTime timestamp = int16TimeseriesValueObject.getTimestamp( );
        Short value = int16TimeseriesValueObject.getValue( );
        var result = insertInt16TimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            int16TimeseriesValueObject.setId(result.getId());
            int16TimeseriesValueObject.setRowVersion(0);
            int16TimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInt16TimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Short value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int16TimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableInt16(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt16TimeseriesValue( Int16TimeseriesValueObject int16TimeseriesValueObject ) throws SQLException {
        Guid id = int16TimeseriesValueObject.getId();
        long rowVersion = int16TimeseriesValueObject.getRowVersion();
        Guid timeseries = int16TimeseriesValueObject.getTimeseries();
        DateTime timestamp = int16TimeseriesValueObject.getTimestamp();
        Short value = int16TimeseriesValueObject.getValue();
        var result = updateInt16TimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            int16TimeseriesValueObject.setRowVersion(result.getRowVersion());
            int16TimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt16TimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int16TimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt16TimeseriesValue( Int16TimeseriesValueObject int16TimeseriesValueObject ) throws SQLException {
        var id = int16TimeseriesValueObject.getId( );
        var rowVersion = int16TimeseriesValueObject.getRowVersion();
        var result = deleteInt16TimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt32TimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Integer value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int32TimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableInt32(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt32TimeseriesValue( Int32TimeseriesValueObject int32TimeseriesValueObject ) throws SQLException {
        Guid id = int32TimeseriesValueObject.getId( );
        Guid timeseries = int32TimeseriesValueObject.getTimeseries( );
        DateTime timestamp = int32TimeseriesValueObject.getTimestamp( );
        Integer value = int32TimeseriesValueObject.getValue( );
        var result = insertInt32TimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            int32TimeseriesValueObject.setId(result.getId());
            int32TimeseriesValueObject.setRowVersion(0);
            int32TimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInt32TimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Integer value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int32TimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableInt32(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt32TimeseriesValue( Int32TimeseriesValueObject int32TimeseriesValueObject ) throws SQLException {
        Guid id = int32TimeseriesValueObject.getId();
        long rowVersion = int32TimeseriesValueObject.getRowVersion();
        Guid timeseries = int32TimeseriesValueObject.getTimeseries();
        DateTime timestamp = int32TimeseriesValueObject.getTimestamp();
        Integer value = int32TimeseriesValueObject.getValue();
        var result = updateInt32TimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            int32TimeseriesValueObject.setRowVersion(result.getRowVersion());
            int32TimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt32TimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int32TimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt32TimeseriesValue( Int32TimeseriesValueObject int32TimeseriesValueObject ) throws SQLException {
        var id = int32TimeseriesValueObject.getId( );
        var rowVersion = int32TimeseriesValueObject.getRowVersion();
        var result = deleteInt32TimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt64TimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Long value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int64TimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableInt64(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt64TimeseriesValue( Int64TimeseriesValueObject int64TimeseriesValueObject ) throws SQLException {
        Guid id = int64TimeseriesValueObject.getId( );
        Guid timeseries = int64TimeseriesValueObject.getTimeseries( );
        DateTime timestamp = int64TimeseriesValueObject.getTimestamp( );
        Long value = int64TimeseriesValueObject.getValue( );
        var result = insertInt64TimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            int64TimeseriesValueObject.setId(result.getId());
            int64TimeseriesValueObject.setRowVersion(0);
            int64TimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInt64TimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Long value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int64TimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableInt64(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt64TimeseriesValue( Int64TimeseriesValueObject int64TimeseriesValueObject ) throws SQLException {
        Guid id = int64TimeseriesValueObject.getId();
        long rowVersion = int64TimeseriesValueObject.getRowVersion();
        Guid timeseries = int64TimeseriesValueObject.getTimeseries();
        DateTime timestamp = int64TimeseriesValueObject.getTimestamp();
        Long value = int64TimeseriesValueObject.getValue();
        var result = updateInt64TimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            int64TimeseriesValueObject.setRowVersion(result.getRowVersion());
            int64TimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt64TimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int64TimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt64TimeseriesValue( Int64TimeseriesValueObject int64TimeseriesValueObject ) throws SQLException {
        var id = int64TimeseriesValueObject.getId( );
        var rowVersion = int64TimeseriesValueObject.getRowVersion();
        var result = deleteInt64TimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBaseStation( Guid id, String name, Guid type ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BaseStationInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setNullableGuid(3, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1BaseStation( Guid id, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BaseStationInsert1(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBaseStation( BaseStationObject baseStationObject ) throws SQLException {
        Guid id = baseStationObject.getId( );
        String name = baseStationObject.getName( );
        Guid type = baseStationObject.getType( );
        var result = insertBaseStation( id, name, type );
        if( result.isSuccess() ) {
            baseStationObject.setId(result.getId());
            baseStationObject.setRowVersion(0);
            baseStationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1BaseStation( BaseStationObject baseStationObject ) throws SQLException {
        Guid id = baseStationObject.getId( );
        String name = baseStationObject.getName( );
        var result = insert1BaseStation( id, name );
        if( result.isSuccess( ) ) {
            baseStationObject.setId( result.getId( ) );
            baseStationObject.setRowVersion(0);
            baseStationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateBaseStation( Guid id, long rowVersion, String name, Guid type ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BaseStationUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setNullableGuid(4, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1BaseStation( Guid id, long rowVersion, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BaseStationUpdate1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2BaseStation( Guid id, long rowVersion, Guid type ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BaseStationUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBaseStation( BaseStationObject baseStationObject ) throws SQLException {
        Guid id = baseStationObject.getId();
        long rowVersion = baseStationObject.getRowVersion();
        String name = baseStationObject.getName();
        Guid type = baseStationObject.getType();
        var result = updateBaseStation( id, rowVersion, name, type );
        if( result.isSuccess( ) ) {
            baseStationObject.setRowVersion(result.getRowVersion());
            baseStationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1BaseStation( BaseStationObject baseStationObject ) throws SQLException {
        Guid id = baseStationObject.getId();
        long rowVersion = baseStationObject.getRowVersion();
        String name = baseStationObject.getName();
        var result = update1BaseStation( id, rowVersion, name );
        if( result.isSuccess( ) ) {
            baseStationObject.setRowVersion(result.getRowVersion());
            baseStationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2BaseStation( BaseStationObject baseStationObject ) throws SQLException {
        Guid id = baseStationObject.getId();
        long rowVersion = baseStationObject.getRowVersion();
        Guid type = baseStationObject.getType();
        var result = update2BaseStation( id, rowVersion, type );
        if( result.isSuccess( ) ) {
            baseStationObject.setRowVersion(result.getRowVersion());
            baseStationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBaseStation( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BaseStationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBaseStation( BaseStationObject baseStationObject ) throws SQLException {
        var id = baseStationObject.getId( );
        var rowVersion = baseStationObject.getRowVersion();
        var result = deleteBaseStation( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCameraDevice( Guid id, Guid host, String name, String description, Guid enabledTimeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraDeviceInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setNullableGuid(5, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1CameraDevice( Guid id, Guid host, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CameraDeviceInsert1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCameraDevice( CameraDeviceObject cameraDeviceObject ) throws SQLException {
        Guid id = cameraDeviceObject.getId( );
        Guid host = cameraDeviceObject.getHost( );
        String name = cameraDeviceObject.getName( );
        String description = cameraDeviceObject.getDescription( );
        Guid enabledTimeseries = cameraDeviceObject.getEnabledTimeseries( );
        var result = insertCameraDevice( id, host, name, description, enabledTimeseries );
        if( result.isSuccess() ) {
            cameraDeviceObject.setId(result.getId());
            cameraDeviceObject.setRowVersion(0);
            cameraDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1CameraDevice( CameraDeviceObject cameraDeviceObject ) throws SQLException {
        Guid id = cameraDeviceObject.getId( );
        Guid host = cameraDeviceObject.getHost( );
        String name = cameraDeviceObject.getName( );
        String description = cameraDeviceObject.getDescription( );
        var result = insert1CameraDevice( id, host, name, description );
        if( result.isSuccess( ) ) {
            cameraDeviceObject.setId( result.getId( ) );
            cameraDeviceObject.setRowVersion(0);
            cameraDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateCameraDevice( Guid id, long rowVersion, Guid host, String name, String description, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraDeviceUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setNullableGuid(6, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1CameraDevice( Guid id, long rowVersion, Guid host, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraDeviceUpdate1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2CameraDevice( Guid id, long rowVersion, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CameraDeviceUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCameraDevice( CameraDeviceObject cameraDeviceObject ) throws SQLException {
        Guid id = cameraDeviceObject.getId();
        long rowVersion = cameraDeviceObject.getRowVersion();
        Guid host = cameraDeviceObject.getHost();
        String name = cameraDeviceObject.getName();
        String description = cameraDeviceObject.getDescription();
        Guid enabledTimeseries = cameraDeviceObject.getEnabledTimeseries();
        var result = updateCameraDevice( id, rowVersion, host, name, description, enabledTimeseries );
        if( result.isSuccess( ) ) {
            cameraDeviceObject.setRowVersion(result.getRowVersion());
            cameraDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1CameraDevice( CameraDeviceObject cameraDeviceObject ) throws SQLException {
        Guid id = cameraDeviceObject.getId();
        long rowVersion = cameraDeviceObject.getRowVersion();
        Guid host = cameraDeviceObject.getHost();
        String name = cameraDeviceObject.getName();
        String description = cameraDeviceObject.getDescription();
        var result = update1CameraDevice( id, rowVersion, host, name, description );
        if( result.isSuccess( ) ) {
            cameraDeviceObject.setRowVersion(result.getRowVersion());
            cameraDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2CameraDevice( CameraDeviceObject cameraDeviceObject ) throws SQLException {
        Guid id = cameraDeviceObject.getId();
        long rowVersion = cameraDeviceObject.getRowVersion();
        Guid enabledTimeseries = cameraDeviceObject.getEnabledTimeseries();
        var result = update2CameraDevice( id, rowVersion, enabledTimeseries );
        if( result.isSuccess( ) ) {
            cameraDeviceObject.setRowVersion(result.getRowVersion());
            cameraDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCameraDevice( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CameraDeviceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCameraDevice( CameraDeviceObject cameraDeviceObject ) throws SQLException {
        var id = cameraDeviceObject.getId( );
        var rowVersion = cameraDeviceObject.getRowVersion();
        var result = deleteCameraDevice( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGNSSDevice( Guid id, Guid host, String name, String description, Guid enabledTimeseries, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid altitudeTimeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSDeviceInsert(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setNullableGuid(5, enabledTimeseries);
            callableStatement.setNullableGuid(6, latitudeTimeseries);
            callableStatement.setNullableGuid(7, longitudeTimeseries);
            callableStatement.setNullableGuid(8, altitudeTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GNSSDevice( Guid id, Guid host, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSDeviceInsert1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGNSSDevice( GNSSDeviceObject gNSSDeviceObject ) throws SQLException {
        Guid id = gNSSDeviceObject.getId( );
        Guid host = gNSSDeviceObject.getHost( );
        String name = gNSSDeviceObject.getName( );
        String description = gNSSDeviceObject.getDescription( );
        Guid enabledTimeseries = gNSSDeviceObject.getEnabledTimeseries( );
        Guid latitudeTimeseries = gNSSDeviceObject.getLatitudeTimeseries( );
        Guid longitudeTimeseries = gNSSDeviceObject.getLongitudeTimeseries( );
        Guid altitudeTimeseries = gNSSDeviceObject.getAltitudeTimeseries( );
        var result = insertGNSSDevice( id, host, name, description, enabledTimeseries, latitudeTimeseries, longitudeTimeseries, altitudeTimeseries );
        if( result.isSuccess() ) {
            gNSSDeviceObject.setId(result.getId());
            gNSSDeviceObject.setRowVersion(0);
            gNSSDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GNSSDevice( GNSSDeviceObject gNSSDeviceObject ) throws SQLException {
        Guid id = gNSSDeviceObject.getId( );
        Guid host = gNSSDeviceObject.getHost( );
        String name = gNSSDeviceObject.getName( );
        String description = gNSSDeviceObject.getDescription( );
        var result = insert1GNSSDevice( id, host, name, description );
        if( result.isSuccess( ) ) {
            gNSSDeviceObject.setId( result.getId( ) );
            gNSSDeviceObject.setRowVersion(0);
            gNSSDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGNSSDevice( Guid id, long rowVersion, Guid host, String name, String description, Guid enabledTimeseries, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid altitudeTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSDeviceUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setNullableGuid(6, enabledTimeseries);
            callableStatement.setNullableGuid(7, latitudeTimeseries);
            callableStatement.setNullableGuid(8, longitudeTimeseries);
            callableStatement.setNullableGuid(9, altitudeTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GNSSDevice( Guid id, long rowVersion, Guid host, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSDeviceUpdate1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GNSSDevice( Guid id, long rowVersion, Guid enabledTimeseries, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid altitudeTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSDeviceUpdate2(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.setNullableGuid(4, latitudeTimeseries);
            callableStatement.setNullableGuid(5, longitudeTimeseries);
            callableStatement.setNullableGuid(6, altitudeTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGNSSDevice( GNSSDeviceObject gNSSDeviceObject ) throws SQLException {
        Guid id = gNSSDeviceObject.getId();
        long rowVersion = gNSSDeviceObject.getRowVersion();
        Guid host = gNSSDeviceObject.getHost();
        String name = gNSSDeviceObject.getName();
        String description = gNSSDeviceObject.getDescription();
        Guid enabledTimeseries = gNSSDeviceObject.getEnabledTimeseries();
        Guid latitudeTimeseries = gNSSDeviceObject.getLatitudeTimeseries();
        Guid longitudeTimeseries = gNSSDeviceObject.getLongitudeTimeseries();
        Guid altitudeTimeseries = gNSSDeviceObject.getAltitudeTimeseries();
        var result = updateGNSSDevice( id, rowVersion, host, name, description, enabledTimeseries, latitudeTimeseries, longitudeTimeseries, altitudeTimeseries );
        if( result.isSuccess( ) ) {
            gNSSDeviceObject.setRowVersion(result.getRowVersion());
            gNSSDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GNSSDevice( GNSSDeviceObject gNSSDeviceObject ) throws SQLException {
        Guid id = gNSSDeviceObject.getId();
        long rowVersion = gNSSDeviceObject.getRowVersion();
        Guid host = gNSSDeviceObject.getHost();
        String name = gNSSDeviceObject.getName();
        String description = gNSSDeviceObject.getDescription();
        var result = update1GNSSDevice( id, rowVersion, host, name, description );
        if( result.isSuccess( ) ) {
            gNSSDeviceObject.setRowVersion(result.getRowVersion());
            gNSSDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GNSSDevice( GNSSDeviceObject gNSSDeviceObject ) throws SQLException {
        Guid id = gNSSDeviceObject.getId();
        long rowVersion = gNSSDeviceObject.getRowVersion();
        Guid enabledTimeseries = gNSSDeviceObject.getEnabledTimeseries();
        Guid latitudeTimeseries = gNSSDeviceObject.getLatitudeTimeseries();
        Guid longitudeTimeseries = gNSSDeviceObject.getLongitudeTimeseries();
        Guid altitudeTimeseries = gNSSDeviceObject.getAltitudeTimeseries();
        var result = update2GNSSDevice( id, rowVersion, enabledTimeseries, latitudeTimeseries, longitudeTimeseries, altitudeTimeseries );
        if( result.isSuccess( ) ) {
            gNSSDeviceObject.setRowVersion(result.getRowVersion());
            gNSSDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGNSSDevice( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GNSSDeviceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGNSSDevice( GNSSDeviceObject gNSSDeviceObject ) throws SQLException {
        var id = gNSSDeviceObject.getId( );
        var rowVersion = gNSSDeviceObject.getRowVersion();
        var result = deleteGNSSDevice( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGyroDevice( Guid id, Guid host, String name, String description, Guid enabledTimeseries, Guid headingTrueNorthTimeseries, Guid headingMagneticNorthTimeseries, Guid pitchTimeseries, Guid rateOfTurnTimeseries, Guid rollTimeseries, Guid courseTimeseries, Guid speedTimeseries, Guid gNSSDevice ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroDeviceInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setNullableGuid(5, enabledTimeseries);
            callableStatement.setNullableGuid(6, headingTrueNorthTimeseries);
            callableStatement.setNullableGuid(7, headingMagneticNorthTimeseries);
            callableStatement.setNullableGuid(8, pitchTimeseries);
            callableStatement.setNullableGuid(9, rateOfTurnTimeseries);
            callableStatement.setNullableGuid(10, rollTimeseries);
            callableStatement.setNullableGuid(11, courseTimeseries);
            callableStatement.setNullableGuid(12, speedTimeseries);
            callableStatement.setNullableGuid(13, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GyroDevice( Guid id, Guid host, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroDeviceInsert1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGyroDevice( GyroDeviceObject gyroDeviceObject ) throws SQLException {
        Guid id = gyroDeviceObject.getId( );
        Guid host = gyroDeviceObject.getHost( );
        String name = gyroDeviceObject.getName( );
        String description = gyroDeviceObject.getDescription( );
        Guid enabledTimeseries = gyroDeviceObject.getEnabledTimeseries( );
        Guid headingTrueNorthTimeseries = gyroDeviceObject.getHeadingTrueNorthTimeseries( );
        Guid headingMagneticNorthTimeseries = gyroDeviceObject.getHeadingMagneticNorthTimeseries( );
        Guid pitchTimeseries = gyroDeviceObject.getPitchTimeseries( );
        Guid rateOfTurnTimeseries = gyroDeviceObject.getRateOfTurnTimeseries( );
        Guid rollTimeseries = gyroDeviceObject.getRollTimeseries( );
        Guid courseTimeseries = gyroDeviceObject.getCourseTimeseries( );
        Guid speedTimeseries = gyroDeviceObject.getSpeedTimeseries( );
        Guid gNSSDevice = gyroDeviceObject.getGNSSDevice( );
        var result = insertGyroDevice( id, host, name, description, enabledTimeseries, headingTrueNorthTimeseries, headingMagneticNorthTimeseries, pitchTimeseries, rateOfTurnTimeseries, rollTimeseries, courseTimeseries, speedTimeseries, gNSSDevice );
        if( result.isSuccess() ) {
            gyroDeviceObject.setId(result.getId());
            gyroDeviceObject.setRowVersion(0);
            gyroDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GyroDevice( GyroDeviceObject gyroDeviceObject ) throws SQLException {
        Guid id = gyroDeviceObject.getId( );
        Guid host = gyroDeviceObject.getHost( );
        String name = gyroDeviceObject.getName( );
        String description = gyroDeviceObject.getDescription( );
        var result = insert1GyroDevice( id, host, name, description );
        if( result.isSuccess( ) ) {
            gyroDeviceObject.setId( result.getId( ) );
            gyroDeviceObject.setRowVersion(0);
            gyroDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGyroDevice( Guid id, long rowVersion, Guid host, String name, String description, Guid enabledTimeseries, Guid headingTrueNorthTimeseries, Guid headingMagneticNorthTimeseries, Guid pitchTimeseries, Guid rateOfTurnTimeseries, Guid rollTimeseries, Guid courseTimeseries, Guid speedTimeseries, Guid gNSSDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroDeviceUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setNullableGuid(6, enabledTimeseries);
            callableStatement.setNullableGuid(7, headingTrueNorthTimeseries);
            callableStatement.setNullableGuid(8, headingMagneticNorthTimeseries);
            callableStatement.setNullableGuid(9, pitchTimeseries);
            callableStatement.setNullableGuid(10, rateOfTurnTimeseries);
            callableStatement.setNullableGuid(11, rollTimeseries);
            callableStatement.setNullableGuid(12, courseTimeseries);
            callableStatement.setNullableGuid(13, speedTimeseries);
            callableStatement.setNullableGuid(14, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GyroDevice( Guid id, long rowVersion, Guid host, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroDeviceUpdate1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GyroDevice( Guid id, long rowVersion, Guid enabledTimeseries, Guid headingTrueNorthTimeseries, Guid headingMagneticNorthTimeseries, Guid pitchTimeseries, Guid rateOfTurnTimeseries, Guid rollTimeseries, Guid courseTimeseries, Guid speedTimeseries, Guid gNSSDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroDeviceUpdate2(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.setNullableGuid(4, headingTrueNorthTimeseries);
            callableStatement.setNullableGuid(5, headingMagneticNorthTimeseries);
            callableStatement.setNullableGuid(6, pitchTimeseries);
            callableStatement.setNullableGuid(7, rateOfTurnTimeseries);
            callableStatement.setNullableGuid(8, rollTimeseries);
            callableStatement.setNullableGuid(9, courseTimeseries);
            callableStatement.setNullableGuid(10, speedTimeseries);
            callableStatement.setNullableGuid(11, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGyroDevice( GyroDeviceObject gyroDeviceObject ) throws SQLException {
        Guid id = gyroDeviceObject.getId();
        long rowVersion = gyroDeviceObject.getRowVersion();
        Guid host = gyroDeviceObject.getHost();
        String name = gyroDeviceObject.getName();
        String description = gyroDeviceObject.getDescription();
        Guid enabledTimeseries = gyroDeviceObject.getEnabledTimeseries();
        Guid headingTrueNorthTimeseries = gyroDeviceObject.getHeadingTrueNorthTimeseries();
        Guid headingMagneticNorthTimeseries = gyroDeviceObject.getHeadingMagneticNorthTimeseries();
        Guid pitchTimeseries = gyroDeviceObject.getPitchTimeseries();
        Guid rateOfTurnTimeseries = gyroDeviceObject.getRateOfTurnTimeseries();
        Guid rollTimeseries = gyroDeviceObject.getRollTimeseries();
        Guid courseTimeseries = gyroDeviceObject.getCourseTimeseries();
        Guid speedTimeseries = gyroDeviceObject.getSpeedTimeseries();
        Guid gNSSDevice = gyroDeviceObject.getGNSSDevice();
        var result = updateGyroDevice( id, rowVersion, host, name, description, enabledTimeseries, headingTrueNorthTimeseries, headingMagneticNorthTimeseries, pitchTimeseries, rateOfTurnTimeseries, rollTimeseries, courseTimeseries, speedTimeseries, gNSSDevice );
        if( result.isSuccess( ) ) {
            gyroDeviceObject.setRowVersion(result.getRowVersion());
            gyroDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GyroDevice( GyroDeviceObject gyroDeviceObject ) throws SQLException {
        Guid id = gyroDeviceObject.getId();
        long rowVersion = gyroDeviceObject.getRowVersion();
        Guid host = gyroDeviceObject.getHost();
        String name = gyroDeviceObject.getName();
        String description = gyroDeviceObject.getDescription();
        var result = update1GyroDevice( id, rowVersion, host, name, description );
        if( result.isSuccess( ) ) {
            gyroDeviceObject.setRowVersion(result.getRowVersion());
            gyroDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GyroDevice( GyroDeviceObject gyroDeviceObject ) throws SQLException {
        Guid id = gyroDeviceObject.getId();
        long rowVersion = gyroDeviceObject.getRowVersion();
        Guid enabledTimeseries = gyroDeviceObject.getEnabledTimeseries();
        Guid headingTrueNorthTimeseries = gyroDeviceObject.getHeadingTrueNorthTimeseries();
        Guid headingMagneticNorthTimeseries = gyroDeviceObject.getHeadingMagneticNorthTimeseries();
        Guid pitchTimeseries = gyroDeviceObject.getPitchTimeseries();
        Guid rateOfTurnTimeseries = gyroDeviceObject.getRateOfTurnTimeseries();
        Guid rollTimeseries = gyroDeviceObject.getRollTimeseries();
        Guid courseTimeseries = gyroDeviceObject.getCourseTimeseries();
        Guid speedTimeseries = gyroDeviceObject.getSpeedTimeseries();
        Guid gNSSDevice = gyroDeviceObject.getGNSSDevice();
        var result = update2GyroDevice( id, rowVersion, enabledTimeseries, headingTrueNorthTimeseries, headingMagneticNorthTimeseries, pitchTimeseries, rateOfTurnTimeseries, rollTimeseries, courseTimeseries, speedTimeseries, gNSSDevice );
        if( result.isSuccess( ) ) {
            gyroDeviceObject.setRowVersion(result.getRowVersion());
            gyroDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGyroDevice( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GyroDeviceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGyroDevice( GyroDeviceObject gyroDeviceObject ) throws SQLException {
        var id = gyroDeviceObject.getId( );
        var rowVersion = gyroDeviceObject.getRowVersion();
        var result = deleteGyroDevice( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLineInputDevice( Guid id, Guid host, String name, String description, Guid enabledTimeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LineInputDeviceInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setNullableGuid(5, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1LineInputDevice( Guid id, Guid host, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LineInputDeviceInsert1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLineInputDevice( LineInputDeviceObject lineInputDeviceObject ) throws SQLException {
        Guid id = lineInputDeviceObject.getId( );
        Guid host = lineInputDeviceObject.getHost( );
        String name = lineInputDeviceObject.getName( );
        String description = lineInputDeviceObject.getDescription( );
        Guid enabledTimeseries = lineInputDeviceObject.getEnabledTimeseries( );
        var result = insertLineInputDevice( id, host, name, description, enabledTimeseries );
        if( result.isSuccess() ) {
            lineInputDeviceObject.setId(result.getId());
            lineInputDeviceObject.setRowVersion(0);
            lineInputDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1LineInputDevice( LineInputDeviceObject lineInputDeviceObject ) throws SQLException {
        Guid id = lineInputDeviceObject.getId( );
        Guid host = lineInputDeviceObject.getHost( );
        String name = lineInputDeviceObject.getName( );
        String description = lineInputDeviceObject.getDescription( );
        var result = insert1LineInputDevice( id, host, name, description );
        if( result.isSuccess( ) ) {
            lineInputDeviceObject.setId( result.getId( ) );
            lineInputDeviceObject.setRowVersion(0);
            lineInputDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateLineInputDevice( Guid id, long rowVersion, Guid host, String name, String description, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputDeviceUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setNullableGuid(6, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1LineInputDevice( Guid id, long rowVersion, Guid host, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputDeviceUpdate1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2LineInputDevice( Guid id, long rowVersion, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputDeviceUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLineInputDevice( LineInputDeviceObject lineInputDeviceObject ) throws SQLException {
        Guid id = lineInputDeviceObject.getId();
        long rowVersion = lineInputDeviceObject.getRowVersion();
        Guid host = lineInputDeviceObject.getHost();
        String name = lineInputDeviceObject.getName();
        String description = lineInputDeviceObject.getDescription();
        Guid enabledTimeseries = lineInputDeviceObject.getEnabledTimeseries();
        var result = updateLineInputDevice( id, rowVersion, host, name, description, enabledTimeseries );
        if( result.isSuccess( ) ) {
            lineInputDeviceObject.setRowVersion(result.getRowVersion());
            lineInputDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1LineInputDevice( LineInputDeviceObject lineInputDeviceObject ) throws SQLException {
        Guid id = lineInputDeviceObject.getId();
        long rowVersion = lineInputDeviceObject.getRowVersion();
        Guid host = lineInputDeviceObject.getHost();
        String name = lineInputDeviceObject.getName();
        String description = lineInputDeviceObject.getDescription();
        var result = update1LineInputDevice( id, rowVersion, host, name, description );
        if( result.isSuccess( ) ) {
            lineInputDeviceObject.setRowVersion(result.getRowVersion());
            lineInputDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2LineInputDevice( LineInputDeviceObject lineInputDeviceObject ) throws SQLException {
        Guid id = lineInputDeviceObject.getId();
        long rowVersion = lineInputDeviceObject.getRowVersion();
        Guid enabledTimeseries = lineInputDeviceObject.getEnabledTimeseries();
        var result = update2LineInputDevice( id, rowVersion, enabledTimeseries );
        if( result.isSuccess( ) ) {
            lineInputDeviceObject.setRowVersion(result.getRowVersion());
            lineInputDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLineInputDevice( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LineInputDeviceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLineInputDevice( LineInputDeviceObject lineInputDeviceObject ) throws SQLException {
        var id = lineInputDeviceObject.getId( );
        var rowVersion = lineInputDeviceObject.getRowVersion();
        var result = deleteLineInputDevice( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertOilSpillDetectorDevice( Guid id, Guid host, String name, String description, Guid enabledTimeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call OilSpillDetectorDeviceInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setNullableGuid(5, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1OilSpillDetectorDevice( Guid id, Guid host, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call OilSpillDetectorDeviceInsert1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertOilSpillDetectorDevice( OilSpillDetectorDeviceObject oilSpillDetectorDeviceObject ) throws SQLException {
        Guid id = oilSpillDetectorDeviceObject.getId( );
        Guid host = oilSpillDetectorDeviceObject.getHost( );
        String name = oilSpillDetectorDeviceObject.getName( );
        String description = oilSpillDetectorDeviceObject.getDescription( );
        Guid enabledTimeseries = oilSpillDetectorDeviceObject.getEnabledTimeseries( );
        var result = insertOilSpillDetectorDevice( id, host, name, description, enabledTimeseries );
        if( result.isSuccess() ) {
            oilSpillDetectorDeviceObject.setId(result.getId());
            oilSpillDetectorDeviceObject.setRowVersion(0);
            oilSpillDetectorDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1OilSpillDetectorDevice( OilSpillDetectorDeviceObject oilSpillDetectorDeviceObject ) throws SQLException {
        Guid id = oilSpillDetectorDeviceObject.getId( );
        Guid host = oilSpillDetectorDeviceObject.getHost( );
        String name = oilSpillDetectorDeviceObject.getName( );
        String description = oilSpillDetectorDeviceObject.getDescription( );
        var result = insert1OilSpillDetectorDevice( id, host, name, description );
        if( result.isSuccess( ) ) {
            oilSpillDetectorDeviceObject.setId( result.getId( ) );
            oilSpillDetectorDeviceObject.setRowVersion(0);
            oilSpillDetectorDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateOilSpillDetectorDevice( Guid id, long rowVersion, Guid host, String name, String description, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillDetectorDeviceUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setNullableGuid(6, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1OilSpillDetectorDevice( Guid id, long rowVersion, Guid host, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillDetectorDeviceUpdate1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2OilSpillDetectorDevice( Guid id, long rowVersion, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillDetectorDeviceUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateOilSpillDetectorDevice( OilSpillDetectorDeviceObject oilSpillDetectorDeviceObject ) throws SQLException {
        Guid id = oilSpillDetectorDeviceObject.getId();
        long rowVersion = oilSpillDetectorDeviceObject.getRowVersion();
        Guid host = oilSpillDetectorDeviceObject.getHost();
        String name = oilSpillDetectorDeviceObject.getName();
        String description = oilSpillDetectorDeviceObject.getDescription();
        Guid enabledTimeseries = oilSpillDetectorDeviceObject.getEnabledTimeseries();
        var result = updateOilSpillDetectorDevice( id, rowVersion, host, name, description, enabledTimeseries );
        if( result.isSuccess( ) ) {
            oilSpillDetectorDeviceObject.setRowVersion(result.getRowVersion());
            oilSpillDetectorDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1OilSpillDetectorDevice( OilSpillDetectorDeviceObject oilSpillDetectorDeviceObject ) throws SQLException {
        Guid id = oilSpillDetectorDeviceObject.getId();
        long rowVersion = oilSpillDetectorDeviceObject.getRowVersion();
        Guid host = oilSpillDetectorDeviceObject.getHost();
        String name = oilSpillDetectorDeviceObject.getName();
        String description = oilSpillDetectorDeviceObject.getDescription();
        var result = update1OilSpillDetectorDevice( id, rowVersion, host, name, description );
        if( result.isSuccess( ) ) {
            oilSpillDetectorDeviceObject.setRowVersion(result.getRowVersion());
            oilSpillDetectorDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2OilSpillDetectorDevice( OilSpillDetectorDeviceObject oilSpillDetectorDeviceObject ) throws SQLException {
        Guid id = oilSpillDetectorDeviceObject.getId();
        long rowVersion = oilSpillDetectorDeviceObject.getRowVersion();
        Guid enabledTimeseries = oilSpillDetectorDeviceObject.getEnabledTimeseries();
        var result = update2OilSpillDetectorDevice( id, rowVersion, enabledTimeseries );
        if( result.isSuccess( ) ) {
            oilSpillDetectorDeviceObject.setRowVersion(result.getRowVersion());
            oilSpillDetectorDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteOilSpillDetectorDevice( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call OilSpillDetectorDeviceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteOilSpillDetectorDevice( OilSpillDetectorDeviceObject oilSpillDetectorDeviceObject ) throws SQLException {
        var id = oilSpillDetectorDeviceObject.getId( );
        var rowVersion = oilSpillDetectorDeviceObject.getRowVersion();
        var result = deleteOilSpillDetectorDevice( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadioDevice( Guid id, Guid host, String name, String description, Guid enabledTimeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadioDeviceInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setNullableGuid(5, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadioDevice( Guid id, Guid host, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadioDeviceInsert1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadioDevice( RadioDeviceObject radioDeviceObject ) throws SQLException {
        Guid id = radioDeviceObject.getId( );
        Guid host = radioDeviceObject.getHost( );
        String name = radioDeviceObject.getName( );
        String description = radioDeviceObject.getDescription( );
        Guid enabledTimeseries = radioDeviceObject.getEnabledTimeseries( );
        var result = insertRadioDevice( id, host, name, description, enabledTimeseries );
        if( result.isSuccess() ) {
            radioDeviceObject.setId(result.getId());
            radioDeviceObject.setRowVersion(0);
            radioDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadioDevice( RadioDeviceObject radioDeviceObject ) throws SQLException {
        Guid id = radioDeviceObject.getId( );
        Guid host = radioDeviceObject.getHost( );
        String name = radioDeviceObject.getName( );
        String description = radioDeviceObject.getDescription( );
        var result = insert1RadioDevice( id, host, name, description );
        if( result.isSuccess( ) ) {
            radioDeviceObject.setId( result.getId( ) );
            radioDeviceObject.setRowVersion(0);
            radioDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadioDevice( Guid id, long rowVersion, Guid host, String name, String description, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadioDeviceUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setNullableGuid(6, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadioDevice( Guid id, long rowVersion, Guid host, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadioDeviceUpdate1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadioDevice( Guid id, long rowVersion, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadioDeviceUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadioDevice( RadioDeviceObject radioDeviceObject ) throws SQLException {
        Guid id = radioDeviceObject.getId();
        long rowVersion = radioDeviceObject.getRowVersion();
        Guid host = radioDeviceObject.getHost();
        String name = radioDeviceObject.getName();
        String description = radioDeviceObject.getDescription();
        Guid enabledTimeseries = radioDeviceObject.getEnabledTimeseries();
        var result = updateRadioDevice( id, rowVersion, host, name, description, enabledTimeseries );
        if( result.isSuccess( ) ) {
            radioDeviceObject.setRowVersion(result.getRowVersion());
            radioDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadioDevice( RadioDeviceObject radioDeviceObject ) throws SQLException {
        Guid id = radioDeviceObject.getId();
        long rowVersion = radioDeviceObject.getRowVersion();
        Guid host = radioDeviceObject.getHost();
        String name = radioDeviceObject.getName();
        String description = radioDeviceObject.getDescription();
        var result = update1RadioDevice( id, rowVersion, host, name, description );
        if( result.isSuccess( ) ) {
            radioDeviceObject.setRowVersion(result.getRowVersion());
            radioDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadioDevice( RadioDeviceObject radioDeviceObject ) throws SQLException {
        Guid id = radioDeviceObject.getId();
        long rowVersion = radioDeviceObject.getRowVersion();
        Guid enabledTimeseries = radioDeviceObject.getEnabledTimeseries();
        var result = update2RadioDevice( id, rowVersion, enabledTimeseries );
        if( result.isSuccess( ) ) {
            radioDeviceObject.setRowVersion(result.getRowVersion());
            radioDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadioDevice( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadioDeviceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadioDevice( RadioDeviceObject radioDeviceObject ) throws SQLException {
        var id = radioDeviceObject.getId( );
        var rowVersion = radioDeviceObject.getRowVersion();
        var result = deleteRadioDevice( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadomeDevice( Guid id, Guid host, String name, String description, Guid enabledTimeseries, Guid radar, Guid pressureTimeseries, Guid temperatureTimeseries, Guid dewPointTimeseries, Guid statusTimeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeDeviceInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setNullableGuid(5, enabledTimeseries);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.setNullableGuid(7, pressureTimeseries);
            callableStatement.setNullableGuid(8, temperatureTimeseries);
            callableStatement.setNullableGuid(9, dewPointTimeseries);
            callableStatement.setNullableGuid(10, statusTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadomeDevice( Guid id, Guid host, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeDeviceInsert1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadomeDevice( RadomeDeviceObject radomeDeviceObject ) throws SQLException {
        Guid id = radomeDeviceObject.getId( );
        Guid host = radomeDeviceObject.getHost( );
        String name = radomeDeviceObject.getName( );
        String description = radomeDeviceObject.getDescription( );
        Guid enabledTimeseries = radomeDeviceObject.getEnabledTimeseries( );
        Guid radar = radomeDeviceObject.getRadar( );
        Guid pressureTimeseries = radomeDeviceObject.getPressureTimeseries( );
        Guid temperatureTimeseries = radomeDeviceObject.getTemperatureTimeseries( );
        Guid dewPointTimeseries = radomeDeviceObject.getDewPointTimeseries( );
        Guid statusTimeseries = radomeDeviceObject.getStatusTimeseries( );
        var result = insertRadomeDevice( id, host, name, description, enabledTimeseries, radar, pressureTimeseries, temperatureTimeseries, dewPointTimeseries, statusTimeseries );
        if( result.isSuccess() ) {
            radomeDeviceObject.setId(result.getId());
            radomeDeviceObject.setRowVersion(0);
            radomeDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadomeDevice( RadomeDeviceObject radomeDeviceObject ) throws SQLException {
        Guid id = radomeDeviceObject.getId( );
        Guid host = radomeDeviceObject.getHost( );
        String name = radomeDeviceObject.getName( );
        String description = radomeDeviceObject.getDescription( );
        var result = insert1RadomeDevice( id, host, name, description );
        if( result.isSuccess( ) ) {
            radomeDeviceObject.setId( result.getId( ) );
            radomeDeviceObject.setRowVersion(0);
            radomeDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadomeDevice( Guid id, long rowVersion, Guid host, String name, String description, Guid enabledTimeseries, Guid radar, Guid pressureTimeseries, Guid temperatureTimeseries, Guid dewPointTimeseries, Guid statusTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeDeviceUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setNullableGuid(6, enabledTimeseries);
            callableStatement.setNullableGuid(7, radar);
            callableStatement.setNullableGuid(8, pressureTimeseries);
            callableStatement.setNullableGuid(9, temperatureTimeseries);
            callableStatement.setNullableGuid(10, dewPointTimeseries);
            callableStatement.setNullableGuid(11, statusTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadomeDevice( Guid id, long rowVersion, Guid host, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeDeviceUpdate1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadomeDevice( Guid id, long rowVersion, Guid enabledTimeseries, Guid radar, Guid pressureTimeseries, Guid temperatureTimeseries, Guid dewPointTimeseries, Guid statusTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeDeviceUpdate2(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.setNullableGuid(5, pressureTimeseries);
            callableStatement.setNullableGuid(6, temperatureTimeseries);
            callableStatement.setNullableGuid(7, dewPointTimeseries);
            callableStatement.setNullableGuid(8, statusTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadomeDevice( RadomeDeviceObject radomeDeviceObject ) throws SQLException {
        Guid id = radomeDeviceObject.getId();
        long rowVersion = radomeDeviceObject.getRowVersion();
        Guid host = radomeDeviceObject.getHost();
        String name = radomeDeviceObject.getName();
        String description = radomeDeviceObject.getDescription();
        Guid enabledTimeseries = radomeDeviceObject.getEnabledTimeseries();
        Guid radar = radomeDeviceObject.getRadar();
        Guid pressureTimeseries = radomeDeviceObject.getPressureTimeseries();
        Guid temperatureTimeseries = radomeDeviceObject.getTemperatureTimeseries();
        Guid dewPointTimeseries = radomeDeviceObject.getDewPointTimeseries();
        Guid statusTimeseries = radomeDeviceObject.getStatusTimeseries();
        var result = updateRadomeDevice( id, rowVersion, host, name, description, enabledTimeseries, radar, pressureTimeseries, temperatureTimeseries, dewPointTimeseries, statusTimeseries );
        if( result.isSuccess( ) ) {
            radomeDeviceObject.setRowVersion(result.getRowVersion());
            radomeDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadomeDevice( RadomeDeviceObject radomeDeviceObject ) throws SQLException {
        Guid id = radomeDeviceObject.getId();
        long rowVersion = radomeDeviceObject.getRowVersion();
        Guid host = radomeDeviceObject.getHost();
        String name = radomeDeviceObject.getName();
        String description = radomeDeviceObject.getDescription();
        var result = update1RadomeDevice( id, rowVersion, host, name, description );
        if( result.isSuccess( ) ) {
            radomeDeviceObject.setRowVersion(result.getRowVersion());
            radomeDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadomeDevice( RadomeDeviceObject radomeDeviceObject ) throws SQLException {
        Guid id = radomeDeviceObject.getId();
        long rowVersion = radomeDeviceObject.getRowVersion();
        Guid enabledTimeseries = radomeDeviceObject.getEnabledTimeseries();
        Guid radar = radomeDeviceObject.getRadar();
        Guid pressureTimeseries = radomeDeviceObject.getPressureTimeseries();
        Guid temperatureTimeseries = radomeDeviceObject.getTemperatureTimeseries();
        Guid dewPointTimeseries = radomeDeviceObject.getDewPointTimeseries();
        Guid statusTimeseries = radomeDeviceObject.getStatusTimeseries();
        var result = update2RadomeDevice( id, rowVersion, enabledTimeseries, radar, pressureTimeseries, temperatureTimeseries, dewPointTimeseries, statusTimeseries );
        if( result.isSuccess( ) ) {
            radomeDeviceObject.setRowVersion(result.getRowVersion());
            radomeDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadomeDevice( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadomeDeviceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadomeDevice( RadomeDeviceObject radomeDeviceObject ) throws SQLException {
        var id = radomeDeviceObject.getId( );
        var rowVersion = radomeDeviceObject.getRowVersion();
        var result = deleteRadomeDevice( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisDevice( Guid id, Guid host, String name, String description, Guid enabledTimeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisDeviceInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setNullableGuid(5, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisDevice( Guid id, Guid host, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisDeviceInsert1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisDevice( AisDeviceObject aisDeviceObject ) throws SQLException {
        Guid id = aisDeviceObject.getId( );
        Guid host = aisDeviceObject.getHost( );
        String name = aisDeviceObject.getName( );
        String description = aisDeviceObject.getDescription( );
        Guid enabledTimeseries = aisDeviceObject.getEnabledTimeseries( );
        var result = insertAisDevice( id, host, name, description, enabledTimeseries );
        if( result.isSuccess() ) {
            aisDeviceObject.setId(result.getId());
            aisDeviceObject.setRowVersion(0);
            aisDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisDevice( AisDeviceObject aisDeviceObject ) throws SQLException {
        Guid id = aisDeviceObject.getId( );
        Guid host = aisDeviceObject.getHost( );
        String name = aisDeviceObject.getName( );
        String description = aisDeviceObject.getDescription( );
        var result = insert1AisDevice( id, host, name, description );
        if( result.isSuccess( ) ) {
            aisDeviceObject.setId( result.getId( ) );
            aisDeviceObject.setRowVersion(0);
            aisDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisDevice( Guid id, long rowVersion, Guid host, String name, String description, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDeviceUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setNullableGuid(6, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisDevice( Guid id, long rowVersion, Guid host, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDeviceUpdate1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisDevice( Guid id, long rowVersion, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisDeviceUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisDevice( AisDeviceObject aisDeviceObject ) throws SQLException {
        Guid id = aisDeviceObject.getId();
        long rowVersion = aisDeviceObject.getRowVersion();
        Guid host = aisDeviceObject.getHost();
        String name = aisDeviceObject.getName();
        String description = aisDeviceObject.getDescription();
        Guid enabledTimeseries = aisDeviceObject.getEnabledTimeseries();
        var result = updateAisDevice( id, rowVersion, host, name, description, enabledTimeseries );
        if( result.isSuccess( ) ) {
            aisDeviceObject.setRowVersion(result.getRowVersion());
            aisDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisDevice( AisDeviceObject aisDeviceObject ) throws SQLException {
        Guid id = aisDeviceObject.getId();
        long rowVersion = aisDeviceObject.getRowVersion();
        Guid host = aisDeviceObject.getHost();
        String name = aisDeviceObject.getName();
        String description = aisDeviceObject.getDescription();
        var result = update1AisDevice( id, rowVersion, host, name, description );
        if( result.isSuccess( ) ) {
            aisDeviceObject.setRowVersion(result.getRowVersion());
            aisDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisDevice( AisDeviceObject aisDeviceObject ) throws SQLException {
        Guid id = aisDeviceObject.getId();
        long rowVersion = aisDeviceObject.getRowVersion();
        Guid enabledTimeseries = aisDeviceObject.getEnabledTimeseries();
        var result = update2AisDevice( id, rowVersion, enabledTimeseries );
        if( result.isSuccess( ) ) {
            aisDeviceObject.setRowVersion(result.getRowVersion());
            aisDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisDevice( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisDeviceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisDevice( AisDeviceObject aisDeviceObject ) throws SQLException {
        var id = aisDeviceObject.getId( );
        var rowVersion = aisDeviceObject.getRowVersion();
        var result = deleteAisDevice( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarDevice( Guid id, Guid host, String name, String description, Guid enabledTimeseries, Guid saveSettingsTimeseries, Guid powerOnTimeseries, Guid trackingOnTimeseries, Guid radarPulseTimeseries, Guid tuningTimeseries, Guid blankSector1Timeseries, Guid sector1StartTimeseries, Guid sector1EndTimeseries, Guid blankSector2Timeseries, Guid sector2StartTimeseries, Guid sector2EndTimeseries, Guid enableAutomaticFrequencyControlTimeseries, Guid azimuthOffsetTimeseries, Guid enableSensitivityTimeControlTimeseries, Guid automaticSensitivityTimeControlTimeseries, Guid sensitivityTimeControlLevelTimeseries, Guid enableFastTimeConstantTimeseries, Guid fastTimeConstantLevelTimeseries, Guid fastTimeConstantModeTimeseries, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid radome, Guid gNSSDevice ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarDeviceInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setNullableGuid(5, enabledTimeseries);
            callableStatement.setNullableGuid(6, saveSettingsTimeseries);
            callableStatement.setNullableGuid(7, powerOnTimeseries);
            callableStatement.setNullableGuid(8, trackingOnTimeseries);
            callableStatement.setNullableGuid(9, radarPulseTimeseries);
            callableStatement.setNullableGuid(10, tuningTimeseries);
            callableStatement.setNullableGuid(11, blankSector1Timeseries);
            callableStatement.setNullableGuid(12, sector1StartTimeseries);
            callableStatement.setNullableGuid(13, sector1EndTimeseries);
            callableStatement.setNullableGuid(14, blankSector2Timeseries);
            callableStatement.setNullableGuid(15, sector2StartTimeseries);
            callableStatement.setNullableGuid(16, sector2EndTimeseries);
            callableStatement.setNullableGuid(17, enableAutomaticFrequencyControlTimeseries);
            callableStatement.setNullableGuid(18, azimuthOffsetTimeseries);
            callableStatement.setNullableGuid(19, enableSensitivityTimeControlTimeseries);
            callableStatement.setNullableGuid(20, automaticSensitivityTimeControlTimeseries);
            callableStatement.setNullableGuid(21, sensitivityTimeControlLevelTimeseries);
            callableStatement.setNullableGuid(22, enableFastTimeConstantTimeseries);
            callableStatement.setNullableGuid(23, fastTimeConstantLevelTimeseries);
            callableStatement.setNullableGuid(24, fastTimeConstantModeTimeseries);
            callableStatement.setNullableGuid(25, latitudeTimeseries);
            callableStatement.setNullableGuid(26, longitudeTimeseries);
            callableStatement.setNullableGuid(27, radome);
            callableStatement.setNullableGuid(28, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarDevice( Guid id, Guid host, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarDeviceInsert1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarDevice( RadarDeviceObject radarDeviceObject ) throws SQLException {
        Guid id = radarDeviceObject.getId( );
        Guid host = radarDeviceObject.getHost( );
        String name = radarDeviceObject.getName( );
        String description = radarDeviceObject.getDescription( );
        Guid enabledTimeseries = radarDeviceObject.getEnabledTimeseries( );
        Guid saveSettingsTimeseries = radarDeviceObject.getSaveSettingsTimeseries( );
        Guid powerOnTimeseries = radarDeviceObject.getPowerOnTimeseries( );
        Guid trackingOnTimeseries = radarDeviceObject.getTrackingOnTimeseries( );
        Guid radarPulseTimeseries = radarDeviceObject.getRadarPulseTimeseries( );
        Guid tuningTimeseries = radarDeviceObject.getTuningTimeseries( );
        Guid blankSector1Timeseries = radarDeviceObject.getBlankSector1Timeseries( );
        Guid sector1StartTimeseries = radarDeviceObject.getSector1StartTimeseries( );
        Guid sector1EndTimeseries = radarDeviceObject.getSector1EndTimeseries( );
        Guid blankSector2Timeseries = radarDeviceObject.getBlankSector2Timeseries( );
        Guid sector2StartTimeseries = radarDeviceObject.getSector2StartTimeseries( );
        Guid sector2EndTimeseries = radarDeviceObject.getSector2EndTimeseries( );
        Guid enableAutomaticFrequencyControlTimeseries = radarDeviceObject.getEnableAutomaticFrequencyControlTimeseries( );
        Guid azimuthOffsetTimeseries = radarDeviceObject.getAzimuthOffsetTimeseries( );
        Guid enableSensitivityTimeControlTimeseries = radarDeviceObject.getEnableSensitivityTimeControlTimeseries( );
        Guid automaticSensitivityTimeControlTimeseries = radarDeviceObject.getAutomaticSensitivityTimeControlTimeseries( );
        Guid sensitivityTimeControlLevelTimeseries = radarDeviceObject.getSensitivityTimeControlLevelTimeseries( );
        Guid enableFastTimeConstantTimeseries = radarDeviceObject.getEnableFastTimeConstantTimeseries( );
        Guid fastTimeConstantLevelTimeseries = radarDeviceObject.getFastTimeConstantLevelTimeseries( );
        Guid fastTimeConstantModeTimeseries = radarDeviceObject.getFastTimeConstantModeTimeseries( );
        Guid latitudeTimeseries = radarDeviceObject.getLatitudeTimeseries( );
        Guid longitudeTimeseries = radarDeviceObject.getLongitudeTimeseries( );
        Guid radome = radarDeviceObject.getRadome( );
        Guid gNSSDevice = radarDeviceObject.getGNSSDevice( );
        var result = insertRadarDevice( id, host, name, description, enabledTimeseries, saveSettingsTimeseries, powerOnTimeseries, trackingOnTimeseries, radarPulseTimeseries, tuningTimeseries, blankSector1Timeseries, sector1StartTimeseries, sector1EndTimeseries, blankSector2Timeseries, sector2StartTimeseries, sector2EndTimeseries, enableAutomaticFrequencyControlTimeseries, azimuthOffsetTimeseries, enableSensitivityTimeControlTimeseries, automaticSensitivityTimeControlTimeseries, sensitivityTimeControlLevelTimeseries, enableFastTimeConstantTimeseries, fastTimeConstantLevelTimeseries, fastTimeConstantModeTimeseries, latitudeTimeseries, longitudeTimeseries, radome, gNSSDevice );
        if( result.isSuccess() ) {
            radarDeviceObject.setId(result.getId());
            radarDeviceObject.setRowVersion(0);
            radarDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarDevice( RadarDeviceObject radarDeviceObject ) throws SQLException {
        Guid id = radarDeviceObject.getId( );
        Guid host = radarDeviceObject.getHost( );
        String name = radarDeviceObject.getName( );
        String description = radarDeviceObject.getDescription( );
        var result = insert1RadarDevice( id, host, name, description );
        if( result.isSuccess( ) ) {
            radarDeviceObject.setId( result.getId( ) );
            radarDeviceObject.setRowVersion(0);
            radarDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarDevice( Guid id, long rowVersion, Guid host, String name, String description, Guid enabledTimeseries, Guid saveSettingsTimeseries, Guid powerOnTimeseries, Guid trackingOnTimeseries, Guid radarPulseTimeseries, Guid tuningTimeseries, Guid blankSector1Timeseries, Guid sector1StartTimeseries, Guid sector1EndTimeseries, Guid blankSector2Timeseries, Guid sector2StartTimeseries, Guid sector2EndTimeseries, Guid enableAutomaticFrequencyControlTimeseries, Guid azimuthOffsetTimeseries, Guid enableSensitivityTimeControlTimeseries, Guid automaticSensitivityTimeControlTimeseries, Guid sensitivityTimeControlLevelTimeseries, Guid enableFastTimeConstantTimeseries, Guid fastTimeConstantLevelTimeseries, Guid fastTimeConstantModeTimeseries, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid radome, Guid gNSSDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarDeviceUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setNullableGuid(6, enabledTimeseries);
            callableStatement.setNullableGuid(7, saveSettingsTimeseries);
            callableStatement.setNullableGuid(8, powerOnTimeseries);
            callableStatement.setNullableGuid(9, trackingOnTimeseries);
            callableStatement.setNullableGuid(10, radarPulseTimeseries);
            callableStatement.setNullableGuid(11, tuningTimeseries);
            callableStatement.setNullableGuid(12, blankSector1Timeseries);
            callableStatement.setNullableGuid(13, sector1StartTimeseries);
            callableStatement.setNullableGuid(14, sector1EndTimeseries);
            callableStatement.setNullableGuid(15, blankSector2Timeseries);
            callableStatement.setNullableGuid(16, sector2StartTimeseries);
            callableStatement.setNullableGuid(17, sector2EndTimeseries);
            callableStatement.setNullableGuid(18, enableAutomaticFrequencyControlTimeseries);
            callableStatement.setNullableGuid(19, azimuthOffsetTimeseries);
            callableStatement.setNullableGuid(20, enableSensitivityTimeControlTimeseries);
            callableStatement.setNullableGuid(21, automaticSensitivityTimeControlTimeseries);
            callableStatement.setNullableGuid(22, sensitivityTimeControlLevelTimeseries);
            callableStatement.setNullableGuid(23, enableFastTimeConstantTimeseries);
            callableStatement.setNullableGuid(24, fastTimeConstantLevelTimeseries);
            callableStatement.setNullableGuid(25, fastTimeConstantModeTimeseries);
            callableStatement.setNullableGuid(26, latitudeTimeseries);
            callableStatement.setNullableGuid(27, longitudeTimeseries);
            callableStatement.setNullableGuid(28, radome);
            callableStatement.setNullableGuid(29, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarDevice( Guid id, long rowVersion, Guid host, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarDeviceUpdate1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarDevice( Guid id, long rowVersion, Guid enabledTimeseries, Guid saveSettingsTimeseries, Guid powerOnTimeseries, Guid trackingOnTimeseries, Guid radarPulseTimeseries, Guid tuningTimeseries, Guid blankSector1Timeseries, Guid sector1StartTimeseries, Guid sector1EndTimeseries, Guid blankSector2Timeseries, Guid sector2StartTimeseries, Guid sector2EndTimeseries, Guid enableAutomaticFrequencyControlTimeseries, Guid azimuthOffsetTimeseries, Guid enableSensitivityTimeControlTimeseries, Guid automaticSensitivityTimeControlTimeseries, Guid sensitivityTimeControlLevelTimeseries, Guid enableFastTimeConstantTimeseries, Guid fastTimeConstantLevelTimeseries, Guid fastTimeConstantModeTimeseries, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid radome, Guid gNSSDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarDeviceUpdate2(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.setNullableGuid(4, saveSettingsTimeseries);
            callableStatement.setNullableGuid(5, powerOnTimeseries);
            callableStatement.setNullableGuid(6, trackingOnTimeseries);
            callableStatement.setNullableGuid(7, radarPulseTimeseries);
            callableStatement.setNullableGuid(8, tuningTimeseries);
            callableStatement.setNullableGuid(9, blankSector1Timeseries);
            callableStatement.setNullableGuid(10, sector1StartTimeseries);
            callableStatement.setNullableGuid(11, sector1EndTimeseries);
            callableStatement.setNullableGuid(12, blankSector2Timeseries);
            callableStatement.setNullableGuid(13, sector2StartTimeseries);
            callableStatement.setNullableGuid(14, sector2EndTimeseries);
            callableStatement.setNullableGuid(15, enableAutomaticFrequencyControlTimeseries);
            callableStatement.setNullableGuid(16, azimuthOffsetTimeseries);
            callableStatement.setNullableGuid(17, enableSensitivityTimeControlTimeseries);
            callableStatement.setNullableGuid(18, automaticSensitivityTimeControlTimeseries);
            callableStatement.setNullableGuid(19, sensitivityTimeControlLevelTimeseries);
            callableStatement.setNullableGuid(20, enableFastTimeConstantTimeseries);
            callableStatement.setNullableGuid(21, fastTimeConstantLevelTimeseries);
            callableStatement.setNullableGuid(22, fastTimeConstantModeTimeseries);
            callableStatement.setNullableGuid(23, latitudeTimeseries);
            callableStatement.setNullableGuid(24, longitudeTimeseries);
            callableStatement.setNullableGuid(25, radome);
            callableStatement.setNullableGuid(26, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarDevice( RadarDeviceObject radarDeviceObject ) throws SQLException {
        Guid id = radarDeviceObject.getId();
        long rowVersion = radarDeviceObject.getRowVersion();
        Guid host = radarDeviceObject.getHost();
        String name = radarDeviceObject.getName();
        String description = radarDeviceObject.getDescription();
        Guid enabledTimeseries = radarDeviceObject.getEnabledTimeseries();
        Guid saveSettingsTimeseries = radarDeviceObject.getSaveSettingsTimeseries();
        Guid powerOnTimeseries = radarDeviceObject.getPowerOnTimeseries();
        Guid trackingOnTimeseries = radarDeviceObject.getTrackingOnTimeseries();
        Guid radarPulseTimeseries = radarDeviceObject.getRadarPulseTimeseries();
        Guid tuningTimeseries = radarDeviceObject.getTuningTimeseries();
        Guid blankSector1Timeseries = radarDeviceObject.getBlankSector1Timeseries();
        Guid sector1StartTimeseries = radarDeviceObject.getSector1StartTimeseries();
        Guid sector1EndTimeseries = radarDeviceObject.getSector1EndTimeseries();
        Guid blankSector2Timeseries = radarDeviceObject.getBlankSector2Timeseries();
        Guid sector2StartTimeseries = radarDeviceObject.getSector2StartTimeseries();
        Guid sector2EndTimeseries = radarDeviceObject.getSector2EndTimeseries();
        Guid enableAutomaticFrequencyControlTimeseries = radarDeviceObject.getEnableAutomaticFrequencyControlTimeseries();
        Guid azimuthOffsetTimeseries = radarDeviceObject.getAzimuthOffsetTimeseries();
        Guid enableSensitivityTimeControlTimeseries = radarDeviceObject.getEnableSensitivityTimeControlTimeseries();
        Guid automaticSensitivityTimeControlTimeseries = radarDeviceObject.getAutomaticSensitivityTimeControlTimeseries();
        Guid sensitivityTimeControlLevelTimeseries = radarDeviceObject.getSensitivityTimeControlLevelTimeseries();
        Guid enableFastTimeConstantTimeseries = radarDeviceObject.getEnableFastTimeConstantTimeseries();
        Guid fastTimeConstantLevelTimeseries = radarDeviceObject.getFastTimeConstantLevelTimeseries();
        Guid fastTimeConstantModeTimeseries = radarDeviceObject.getFastTimeConstantModeTimeseries();
        Guid latitudeTimeseries = radarDeviceObject.getLatitudeTimeseries();
        Guid longitudeTimeseries = radarDeviceObject.getLongitudeTimeseries();
        Guid radome = radarDeviceObject.getRadome();
        Guid gNSSDevice = radarDeviceObject.getGNSSDevice();
        var result = updateRadarDevice( id, rowVersion, host, name, description, enabledTimeseries, saveSettingsTimeseries, powerOnTimeseries, trackingOnTimeseries, radarPulseTimeseries, tuningTimeseries, blankSector1Timeseries, sector1StartTimeseries, sector1EndTimeseries, blankSector2Timeseries, sector2StartTimeseries, sector2EndTimeseries, enableAutomaticFrequencyControlTimeseries, azimuthOffsetTimeseries, enableSensitivityTimeControlTimeseries, automaticSensitivityTimeControlTimeseries, sensitivityTimeControlLevelTimeseries, enableFastTimeConstantTimeseries, fastTimeConstantLevelTimeseries, fastTimeConstantModeTimeseries, latitudeTimeseries, longitudeTimeseries, radome, gNSSDevice );
        if( result.isSuccess( ) ) {
            radarDeviceObject.setRowVersion(result.getRowVersion());
            radarDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarDevice( RadarDeviceObject radarDeviceObject ) throws SQLException {
        Guid id = radarDeviceObject.getId();
        long rowVersion = radarDeviceObject.getRowVersion();
        Guid host = radarDeviceObject.getHost();
        String name = radarDeviceObject.getName();
        String description = radarDeviceObject.getDescription();
        var result = update1RadarDevice( id, rowVersion, host, name, description );
        if( result.isSuccess( ) ) {
            radarDeviceObject.setRowVersion(result.getRowVersion());
            radarDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarDevice( RadarDeviceObject radarDeviceObject ) throws SQLException {
        Guid id = radarDeviceObject.getId();
        long rowVersion = radarDeviceObject.getRowVersion();
        Guid enabledTimeseries = radarDeviceObject.getEnabledTimeseries();
        Guid saveSettingsTimeseries = radarDeviceObject.getSaveSettingsTimeseries();
        Guid powerOnTimeseries = radarDeviceObject.getPowerOnTimeseries();
        Guid trackingOnTimeseries = radarDeviceObject.getTrackingOnTimeseries();
        Guid radarPulseTimeseries = radarDeviceObject.getRadarPulseTimeseries();
        Guid tuningTimeseries = radarDeviceObject.getTuningTimeseries();
        Guid blankSector1Timeseries = radarDeviceObject.getBlankSector1Timeseries();
        Guid sector1StartTimeseries = radarDeviceObject.getSector1StartTimeseries();
        Guid sector1EndTimeseries = radarDeviceObject.getSector1EndTimeseries();
        Guid blankSector2Timeseries = radarDeviceObject.getBlankSector2Timeseries();
        Guid sector2StartTimeseries = radarDeviceObject.getSector2StartTimeseries();
        Guid sector2EndTimeseries = radarDeviceObject.getSector2EndTimeseries();
        Guid enableAutomaticFrequencyControlTimeseries = radarDeviceObject.getEnableAutomaticFrequencyControlTimeseries();
        Guid azimuthOffsetTimeseries = radarDeviceObject.getAzimuthOffsetTimeseries();
        Guid enableSensitivityTimeControlTimeseries = radarDeviceObject.getEnableSensitivityTimeControlTimeseries();
        Guid automaticSensitivityTimeControlTimeseries = radarDeviceObject.getAutomaticSensitivityTimeControlTimeseries();
        Guid sensitivityTimeControlLevelTimeseries = radarDeviceObject.getSensitivityTimeControlLevelTimeseries();
        Guid enableFastTimeConstantTimeseries = radarDeviceObject.getEnableFastTimeConstantTimeseries();
        Guid fastTimeConstantLevelTimeseries = radarDeviceObject.getFastTimeConstantLevelTimeseries();
        Guid fastTimeConstantModeTimeseries = radarDeviceObject.getFastTimeConstantModeTimeseries();
        Guid latitudeTimeseries = radarDeviceObject.getLatitudeTimeseries();
        Guid longitudeTimeseries = radarDeviceObject.getLongitudeTimeseries();
        Guid radome = radarDeviceObject.getRadome();
        Guid gNSSDevice = radarDeviceObject.getGNSSDevice();
        var result = update2RadarDevice( id, rowVersion, enabledTimeseries, saveSettingsTimeseries, powerOnTimeseries, trackingOnTimeseries, radarPulseTimeseries, tuningTimeseries, blankSector1Timeseries, sector1StartTimeseries, sector1EndTimeseries, blankSector2Timeseries, sector2StartTimeseries, sector2EndTimeseries, enableAutomaticFrequencyControlTimeseries, azimuthOffsetTimeseries, enableSensitivityTimeControlTimeseries, automaticSensitivityTimeControlTimeseries, sensitivityTimeControlLevelTimeseries, enableFastTimeConstantTimeseries, fastTimeConstantLevelTimeseries, fastTimeConstantModeTimeseries, latitudeTimeseries, longitudeTimeseries, radome, gNSSDevice );
        if( result.isSuccess( ) ) {
            radarDeviceObject.setRowVersion(result.getRowVersion());
            radarDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarDevice( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarDeviceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarDevice( RadarDeviceObject radarDeviceObject ) throws SQLException {
        var id = radarDeviceObject.getId( );
        var rowVersion = radarDeviceObject.getRowVersion();
        var result = deleteRadarDevice( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertWeatherStationDevice( Guid id, Guid host, String name, String description, Guid enabledTimeseries, Guid barometricPressureTimeseries, Guid airTemperatureTimeseries, Guid waterTemperatureTimeseries, Guid relativeHumidityTimeseries, Guid absoluteHumidityTimeseries, Guid dewPointTimeseries, Guid windDirectionTimeseries, Guid windSpeedTimeseries, Guid gyro ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationDeviceInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setNullableGuid(5, enabledTimeseries);
            callableStatement.setNullableGuid(6, barometricPressureTimeseries);
            callableStatement.setNullableGuid(7, airTemperatureTimeseries);
            callableStatement.setNullableGuid(8, waterTemperatureTimeseries);
            callableStatement.setNullableGuid(9, relativeHumidityTimeseries);
            callableStatement.setNullableGuid(10, absoluteHumidityTimeseries);
            callableStatement.setNullableGuid(11, dewPointTimeseries);
            callableStatement.setNullableGuid(12, windDirectionTimeseries);
            callableStatement.setNullableGuid(13, windSpeedTimeseries);
            callableStatement.setNullableGuid(14, gyro);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1WeatherStationDevice( Guid id, Guid host, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationDeviceInsert1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertWeatherStationDevice( WeatherStationDeviceObject weatherStationDeviceObject ) throws SQLException {
        Guid id = weatherStationDeviceObject.getId( );
        Guid host = weatherStationDeviceObject.getHost( );
        String name = weatherStationDeviceObject.getName( );
        String description = weatherStationDeviceObject.getDescription( );
        Guid enabledTimeseries = weatherStationDeviceObject.getEnabledTimeseries( );
        Guid barometricPressureTimeseries = weatherStationDeviceObject.getBarometricPressureTimeseries( );
        Guid airTemperatureTimeseries = weatherStationDeviceObject.getAirTemperatureTimeseries( );
        Guid waterTemperatureTimeseries = weatherStationDeviceObject.getWaterTemperatureTimeseries( );
        Guid relativeHumidityTimeseries = weatherStationDeviceObject.getRelativeHumidityTimeseries( );
        Guid absoluteHumidityTimeseries = weatherStationDeviceObject.getAbsoluteHumidityTimeseries( );
        Guid dewPointTimeseries = weatherStationDeviceObject.getDewPointTimeseries( );
        Guid windDirectionTimeseries = weatherStationDeviceObject.getWindDirectionTimeseries( );
        Guid windSpeedTimeseries = weatherStationDeviceObject.getWindSpeedTimeseries( );
        Guid gyro = weatherStationDeviceObject.getGyro( );
        var result = insertWeatherStationDevice( id, host, name, description, enabledTimeseries, barometricPressureTimeseries, airTemperatureTimeseries, waterTemperatureTimeseries, relativeHumidityTimeseries, absoluteHumidityTimeseries, dewPointTimeseries, windDirectionTimeseries, windSpeedTimeseries, gyro );
        if( result.isSuccess() ) {
            weatherStationDeviceObject.setId(result.getId());
            weatherStationDeviceObject.setRowVersion(0);
            weatherStationDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1WeatherStationDevice( WeatherStationDeviceObject weatherStationDeviceObject ) throws SQLException {
        Guid id = weatherStationDeviceObject.getId( );
        Guid host = weatherStationDeviceObject.getHost( );
        String name = weatherStationDeviceObject.getName( );
        String description = weatherStationDeviceObject.getDescription( );
        var result = insert1WeatherStationDevice( id, host, name, description );
        if( result.isSuccess( ) ) {
            weatherStationDeviceObject.setId( result.getId( ) );
            weatherStationDeviceObject.setRowVersion(0);
            weatherStationDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateWeatherStationDevice( Guid id, long rowVersion, Guid host, String name, String description, Guid enabledTimeseries, Guid barometricPressureTimeseries, Guid airTemperatureTimeseries, Guid waterTemperatureTimeseries, Guid relativeHumidityTimeseries, Guid absoluteHumidityTimeseries, Guid dewPointTimeseries, Guid windDirectionTimeseries, Guid windSpeedTimeseries, Guid gyro ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationDeviceUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setNullableGuid(6, enabledTimeseries);
            callableStatement.setNullableGuid(7, barometricPressureTimeseries);
            callableStatement.setNullableGuid(8, airTemperatureTimeseries);
            callableStatement.setNullableGuid(9, waterTemperatureTimeseries);
            callableStatement.setNullableGuid(10, relativeHumidityTimeseries);
            callableStatement.setNullableGuid(11, absoluteHumidityTimeseries);
            callableStatement.setNullableGuid(12, dewPointTimeseries);
            callableStatement.setNullableGuid(13, windDirectionTimeseries);
            callableStatement.setNullableGuid(14, windSpeedTimeseries);
            callableStatement.setNullableGuid(15, gyro);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1WeatherStationDevice( Guid id, long rowVersion, Guid host, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationDeviceUpdate1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2WeatherStationDevice( Guid id, long rowVersion, Guid enabledTimeseries, Guid barometricPressureTimeseries, Guid airTemperatureTimeseries, Guid waterTemperatureTimeseries, Guid relativeHumidityTimeseries, Guid absoluteHumidityTimeseries, Guid dewPointTimeseries, Guid windDirectionTimeseries, Guid windSpeedTimeseries, Guid gyro ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationDeviceUpdate2(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.setNullableGuid(4, barometricPressureTimeseries);
            callableStatement.setNullableGuid(5, airTemperatureTimeseries);
            callableStatement.setNullableGuid(6, waterTemperatureTimeseries);
            callableStatement.setNullableGuid(7, relativeHumidityTimeseries);
            callableStatement.setNullableGuid(8, absoluteHumidityTimeseries);
            callableStatement.setNullableGuid(9, dewPointTimeseries);
            callableStatement.setNullableGuid(10, windDirectionTimeseries);
            callableStatement.setNullableGuid(11, windSpeedTimeseries);
            callableStatement.setNullableGuid(12, gyro);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateWeatherStationDevice( WeatherStationDeviceObject weatherStationDeviceObject ) throws SQLException {
        Guid id = weatherStationDeviceObject.getId();
        long rowVersion = weatherStationDeviceObject.getRowVersion();
        Guid host = weatherStationDeviceObject.getHost();
        String name = weatherStationDeviceObject.getName();
        String description = weatherStationDeviceObject.getDescription();
        Guid enabledTimeseries = weatherStationDeviceObject.getEnabledTimeseries();
        Guid barometricPressureTimeseries = weatherStationDeviceObject.getBarometricPressureTimeseries();
        Guid airTemperatureTimeseries = weatherStationDeviceObject.getAirTemperatureTimeseries();
        Guid waterTemperatureTimeseries = weatherStationDeviceObject.getWaterTemperatureTimeseries();
        Guid relativeHumidityTimeseries = weatherStationDeviceObject.getRelativeHumidityTimeseries();
        Guid absoluteHumidityTimeseries = weatherStationDeviceObject.getAbsoluteHumidityTimeseries();
        Guid dewPointTimeseries = weatherStationDeviceObject.getDewPointTimeseries();
        Guid windDirectionTimeseries = weatherStationDeviceObject.getWindDirectionTimeseries();
        Guid windSpeedTimeseries = weatherStationDeviceObject.getWindSpeedTimeseries();
        Guid gyro = weatherStationDeviceObject.getGyro();
        var result = updateWeatherStationDevice( id, rowVersion, host, name, description, enabledTimeseries, barometricPressureTimeseries, airTemperatureTimeseries, waterTemperatureTimeseries, relativeHumidityTimeseries, absoluteHumidityTimeseries, dewPointTimeseries, windDirectionTimeseries, windSpeedTimeseries, gyro );
        if( result.isSuccess( ) ) {
            weatherStationDeviceObject.setRowVersion(result.getRowVersion());
            weatherStationDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1WeatherStationDevice( WeatherStationDeviceObject weatherStationDeviceObject ) throws SQLException {
        Guid id = weatherStationDeviceObject.getId();
        long rowVersion = weatherStationDeviceObject.getRowVersion();
        Guid host = weatherStationDeviceObject.getHost();
        String name = weatherStationDeviceObject.getName();
        String description = weatherStationDeviceObject.getDescription();
        var result = update1WeatherStationDevice( id, rowVersion, host, name, description );
        if( result.isSuccess( ) ) {
            weatherStationDeviceObject.setRowVersion(result.getRowVersion());
            weatherStationDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2WeatherStationDevice( WeatherStationDeviceObject weatherStationDeviceObject ) throws SQLException {
        Guid id = weatherStationDeviceObject.getId();
        long rowVersion = weatherStationDeviceObject.getRowVersion();
        Guid enabledTimeseries = weatherStationDeviceObject.getEnabledTimeseries();
        Guid barometricPressureTimeseries = weatherStationDeviceObject.getBarometricPressureTimeseries();
        Guid airTemperatureTimeseries = weatherStationDeviceObject.getAirTemperatureTimeseries();
        Guid waterTemperatureTimeseries = weatherStationDeviceObject.getWaterTemperatureTimeseries();
        Guid relativeHumidityTimeseries = weatherStationDeviceObject.getRelativeHumidityTimeseries();
        Guid absoluteHumidityTimeseries = weatherStationDeviceObject.getAbsoluteHumidityTimeseries();
        Guid dewPointTimeseries = weatherStationDeviceObject.getDewPointTimeseries();
        Guid windDirectionTimeseries = weatherStationDeviceObject.getWindDirectionTimeseries();
        Guid windSpeedTimeseries = weatherStationDeviceObject.getWindSpeedTimeseries();
        Guid gyro = weatherStationDeviceObject.getGyro();
        var result = update2WeatherStationDevice( id, rowVersion, enabledTimeseries, barometricPressureTimeseries, airTemperatureTimeseries, waterTemperatureTimeseries, relativeHumidityTimeseries, absoluteHumidityTimeseries, dewPointTimeseries, windDirectionTimeseries, windSpeedTimeseries, gyro );
        if( result.isSuccess( ) ) {
            weatherStationDeviceObject.setRowVersion(result.getRowVersion());
            weatherStationDeviceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteWeatherStationDevice( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call WeatherStationDeviceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteWeatherStationDevice( WeatherStationDeviceObject weatherStationDeviceObject ) throws SQLException {
        var id = weatherStationDeviceObject.getId( );
        var rowVersion = weatherStationDeviceObject.getRowVersion();
        var result = deleteWeatherStationDevice( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertFacility( Guid id, String name, Guid type, double longitude, double latitude, double altitude ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call FacilityInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setNullableGuid(3, type);
            callableStatement.setDouble(4, longitude);
            callableStatement.setDouble(5, latitude);
            callableStatement.setDouble(6, altitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Facility( Guid id, String name, double longitude, double latitude, double altitude ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call FacilityInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setDouble(3, longitude);
            callableStatement.setDouble(4, latitude);
            callableStatement.setDouble(5, altitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertFacility( FacilityObject facilityObject ) throws SQLException {
        Guid id = facilityObject.getId( );
        String name = facilityObject.getName( );
        Guid type = facilityObject.getType( );
        double longitude = facilityObject.getLongitude( );
        double latitude = facilityObject.getLatitude( );
        double altitude = facilityObject.getAltitude( );
        var result = insertFacility( id, name, type, longitude, latitude, altitude );
        if( result.isSuccess() ) {
            facilityObject.setId(result.getId());
            facilityObject.setRowVersion(0);
            facilityObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Facility( FacilityObject facilityObject ) throws SQLException {
        Guid id = facilityObject.getId( );
        String name = facilityObject.getName( );
        double longitude = facilityObject.getLongitude( );
        double latitude = facilityObject.getLatitude( );
        double altitude = facilityObject.getAltitude( );
        var result = insert1Facility( id, name, longitude, latitude, altitude );
        if( result.isSuccess( ) ) {
            facilityObject.setId( result.getId( ) );
            facilityObject.setRowVersion(0);
            facilityObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateFacility( Guid id, long rowVersion, String name, Guid type, double longitude, double latitude, double altitude ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call FacilityUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setNullableGuid(4, type);
            callableStatement.setDouble(5, longitude);
            callableStatement.setDouble(6, latitude);
            callableStatement.setDouble(7, altitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Facility( Guid id, long rowVersion, String name, double longitude, double latitude, double altitude ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call FacilityUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setDouble(4, longitude);
            callableStatement.setDouble(5, latitude);
            callableStatement.setDouble(6, altitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Facility( Guid id, long rowVersion, Guid type ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call FacilityUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateFacility( FacilityObject facilityObject ) throws SQLException {
        Guid id = facilityObject.getId();
        long rowVersion = facilityObject.getRowVersion();
        String name = facilityObject.getName();
        Guid type = facilityObject.getType();
        double longitude = facilityObject.getLongitude();
        double latitude = facilityObject.getLatitude();
        double altitude = facilityObject.getAltitude();
        var result = updateFacility( id, rowVersion, name, type, longitude, latitude, altitude );
        if( result.isSuccess( ) ) {
            facilityObject.setRowVersion(result.getRowVersion());
            facilityObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Facility( FacilityObject facilityObject ) throws SQLException {
        Guid id = facilityObject.getId();
        long rowVersion = facilityObject.getRowVersion();
        String name = facilityObject.getName();
        double longitude = facilityObject.getLongitude();
        double latitude = facilityObject.getLatitude();
        double altitude = facilityObject.getAltitude();
        var result = update1Facility( id, rowVersion, name, longitude, latitude, altitude );
        if( result.isSuccess( ) ) {
            facilityObject.setRowVersion(result.getRowVersion());
            facilityObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Facility( FacilityObject facilityObject ) throws SQLException {
        Guid id = facilityObject.getId();
        long rowVersion = facilityObject.getRowVersion();
        Guid type = facilityObject.getType();
        var result = update2Facility( id, rowVersion, type );
        if( result.isSuccess( ) ) {
            facilityObject.setRowVersion(result.getRowVersion());
            facilityObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteFacility( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call FacilityDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteFacility( FacilityObject facilityObject ) throws SQLException {
        var id = facilityObject.getId( );
        var rowVersion = facilityObject.getRowVersion();
        var result = deleteFacility( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAircraft( Guid id, String name, Guid type ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AircraftInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setNullableGuid(3, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Aircraft( Guid id, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AircraftInsert1(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAircraft( AircraftObject aircraftObject ) throws SQLException {
        Guid id = aircraftObject.getId( );
        String name = aircraftObject.getName( );
        Guid type = aircraftObject.getType( );
        var result = insertAircraft( id, name, type );
        if( result.isSuccess() ) {
            aircraftObject.setId(result.getId());
            aircraftObject.setRowVersion(0);
            aircraftObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Aircraft( AircraftObject aircraftObject ) throws SQLException {
        Guid id = aircraftObject.getId( );
        String name = aircraftObject.getName( );
        var result = insert1Aircraft( id, name );
        if( result.isSuccess( ) ) {
            aircraftObject.setId( result.getId( ) );
            aircraftObject.setRowVersion(0);
            aircraftObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAircraft( Guid id, long rowVersion, String name, Guid type ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AircraftUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setNullableGuid(4, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Aircraft( Guid id, long rowVersion, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AircraftUpdate1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Aircraft( Guid id, long rowVersion, Guid type ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AircraftUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAircraft( AircraftObject aircraftObject ) throws SQLException {
        Guid id = aircraftObject.getId();
        long rowVersion = aircraftObject.getRowVersion();
        String name = aircraftObject.getName();
        Guid type = aircraftObject.getType();
        var result = updateAircraft( id, rowVersion, name, type );
        if( result.isSuccess( ) ) {
            aircraftObject.setRowVersion(result.getRowVersion());
            aircraftObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Aircraft( AircraftObject aircraftObject ) throws SQLException {
        Guid id = aircraftObject.getId();
        long rowVersion = aircraftObject.getRowVersion();
        String name = aircraftObject.getName();
        var result = update1Aircraft( id, rowVersion, name );
        if( result.isSuccess( ) ) {
            aircraftObject.setRowVersion(result.getRowVersion());
            aircraftObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Aircraft( AircraftObject aircraftObject ) throws SQLException {
        Guid id = aircraftObject.getId();
        long rowVersion = aircraftObject.getRowVersion();
        Guid type = aircraftObject.getType();
        var result = update2Aircraft( id, rowVersion, type );
        if( result.isSuccess( ) ) {
            aircraftObject.setRowVersion(result.getRowVersion());
            aircraftObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAircraft( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AircraftDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAircraft( AircraftObject aircraftObject ) throws SQLException {
        var id = aircraftObject.getId( );
        var rowVersion = aircraftObject.getRowVersion();
        var result = deleteAircraft( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisAidToNavigation( Guid id, String name, Guid mMSI, int navigationalAidType, Guid position, boolean isVirtual, int toBow, int toStern, int toPort, int toStarboard, Guid offPositionTimeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisAidToNavigationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setNullableGuid(3, mMSI);
            callableStatement.setInt32(4, navigationalAidType);
            callableStatement.setNullableGuid(5, position);
            callableStatement.setBoolean(6, isVirtual);
            callableStatement.setInt32(7, toBow);
            callableStatement.setInt32(8, toStern);
            callableStatement.setInt32(9, toPort);
            callableStatement.setInt32(10, toStarboard);
            callableStatement.setNullableGuid(11, offPositionTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisAidToNavigation( Guid id, String name, int navigationalAidType, boolean isVirtual, int toBow, int toStern, int toPort, int toStarboard ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisAidToNavigationInsert1(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setInt32(3, navigationalAidType);
            callableStatement.setBoolean(4, isVirtual);
            callableStatement.setInt32(5, toBow);
            callableStatement.setInt32(6, toStern);
            callableStatement.setInt32(7, toPort);
            callableStatement.setInt32(8, toStarboard);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisAidToNavigation( AisAidToNavigationObject aisAidToNavigationObject ) throws SQLException {
        Guid id = aisAidToNavigationObject.getId( );
        String name = aisAidToNavigationObject.getName( );
        Guid mMSI = aisAidToNavigationObject.getMMSI( );
        int navigationalAidType = aisAidToNavigationObject.getNavigationalAidType( );
        Guid position = aisAidToNavigationObject.getPosition( );
        boolean isVirtual = aisAidToNavigationObject.getIsVirtual( );
        int toBow = aisAidToNavigationObject.getToBow( );
        int toStern = aisAidToNavigationObject.getToStern( );
        int toPort = aisAidToNavigationObject.getToPort( );
        int toStarboard = aisAidToNavigationObject.getToStarboard( );
        Guid offPositionTimeseries = aisAidToNavigationObject.getOffPositionTimeseries( );
        var result = insertAisAidToNavigation( id, name, mMSI, navigationalAidType, position, isVirtual, toBow, toStern, toPort, toStarboard, offPositionTimeseries );
        if( result.isSuccess() ) {
            aisAidToNavigationObject.setId(result.getId());
            aisAidToNavigationObject.setRowVersion(0);
            aisAidToNavigationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisAidToNavigation( AisAidToNavigationObject aisAidToNavigationObject ) throws SQLException {
        Guid id = aisAidToNavigationObject.getId( );
        String name = aisAidToNavigationObject.getName( );
        int navigationalAidType = aisAidToNavigationObject.getNavigationalAidType( );
        boolean isVirtual = aisAidToNavigationObject.getIsVirtual( );
        int toBow = aisAidToNavigationObject.getToBow( );
        int toStern = aisAidToNavigationObject.getToStern( );
        int toPort = aisAidToNavigationObject.getToPort( );
        int toStarboard = aisAidToNavigationObject.getToStarboard( );
        var result = insert1AisAidToNavigation( id, name, navigationalAidType, isVirtual, toBow, toStern, toPort, toStarboard );
        if( result.isSuccess( ) ) {
            aisAidToNavigationObject.setId( result.getId( ) );
            aisAidToNavigationObject.setRowVersion(0);
            aisAidToNavigationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisAidToNavigation( Guid id, long rowVersion, String name, Guid mMSI, int navigationalAidType, Guid position, boolean isVirtual, int toBow, int toStern, int toPort, int toStarboard, Guid offPositionTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisAidToNavigationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setNullableGuid(4, mMSI);
            callableStatement.setInt32(5, navigationalAidType);
            callableStatement.setNullableGuid(6, position);
            callableStatement.setBoolean(7, isVirtual);
            callableStatement.setInt32(8, toBow);
            callableStatement.setInt32(9, toStern);
            callableStatement.setInt32(10, toPort);
            callableStatement.setInt32(11, toStarboard);
            callableStatement.setNullableGuid(12, offPositionTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisAidToNavigation( Guid id, long rowVersion, String name, int navigationalAidType, boolean isVirtual, int toBow, int toStern, int toPort, int toStarboard ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisAidToNavigationUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setInt32(4, navigationalAidType);
            callableStatement.setBoolean(5, isVirtual);
            callableStatement.setInt32(6, toBow);
            callableStatement.setInt32(7, toStern);
            callableStatement.setInt32(8, toPort);
            callableStatement.setInt32(9, toStarboard);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisAidToNavigation( Guid id, long rowVersion, Guid mMSI, Guid position, Guid offPositionTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisAidToNavigationUpdate2(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, mMSI);
            callableStatement.setNullableGuid(4, position);
            callableStatement.setNullableGuid(5, offPositionTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisAidToNavigation( AisAidToNavigationObject aisAidToNavigationObject ) throws SQLException {
        Guid id = aisAidToNavigationObject.getId();
        long rowVersion = aisAidToNavigationObject.getRowVersion();
        String name = aisAidToNavigationObject.getName();
        Guid mMSI = aisAidToNavigationObject.getMMSI();
        int navigationalAidType = aisAidToNavigationObject.getNavigationalAidType();
        Guid position = aisAidToNavigationObject.getPosition();
        boolean isVirtual = aisAidToNavigationObject.getIsVirtual();
        int toBow = aisAidToNavigationObject.getToBow();
        int toStern = aisAidToNavigationObject.getToStern();
        int toPort = aisAidToNavigationObject.getToPort();
        int toStarboard = aisAidToNavigationObject.getToStarboard();
        Guid offPositionTimeseries = aisAidToNavigationObject.getOffPositionTimeseries();
        var result = updateAisAidToNavigation( id, rowVersion, name, mMSI, navigationalAidType, position, isVirtual, toBow, toStern, toPort, toStarboard, offPositionTimeseries );
        if( result.isSuccess( ) ) {
            aisAidToNavigationObject.setRowVersion(result.getRowVersion());
            aisAidToNavigationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisAidToNavigation( AisAidToNavigationObject aisAidToNavigationObject ) throws SQLException {
        Guid id = aisAidToNavigationObject.getId();
        long rowVersion = aisAidToNavigationObject.getRowVersion();
        String name = aisAidToNavigationObject.getName();
        int navigationalAidType = aisAidToNavigationObject.getNavigationalAidType();
        boolean isVirtual = aisAidToNavigationObject.getIsVirtual();
        int toBow = aisAidToNavigationObject.getToBow();
        int toStern = aisAidToNavigationObject.getToStern();
        int toPort = aisAidToNavigationObject.getToPort();
        int toStarboard = aisAidToNavigationObject.getToStarboard();
        var result = update1AisAidToNavigation( id, rowVersion, name, navigationalAidType, isVirtual, toBow, toStern, toPort, toStarboard );
        if( result.isSuccess( ) ) {
            aisAidToNavigationObject.setRowVersion(result.getRowVersion());
            aisAidToNavigationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisAidToNavigation( AisAidToNavigationObject aisAidToNavigationObject ) throws SQLException {
        Guid id = aisAidToNavigationObject.getId();
        long rowVersion = aisAidToNavigationObject.getRowVersion();
        Guid mMSI = aisAidToNavigationObject.getMMSI();
        Guid position = aisAidToNavigationObject.getPosition();
        Guid offPositionTimeseries = aisAidToNavigationObject.getOffPositionTimeseries();
        var result = update2AisAidToNavigation( id, rowVersion, mMSI, position, offPositionTimeseries );
        if( result.isSuccess( ) ) {
            aisAidToNavigationObject.setRowVersion(result.getRowVersion());
            aisAidToNavigationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisAidToNavigation( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisAidToNavigationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisAidToNavigation( AisAidToNavigationObject aisAidToNavigationObject ) throws SQLException {
        var id = aisAidToNavigationObject.getId( );
        var rowVersion = aisAidToNavigationObject.getRowVersion();
        var result = deleteAisAidToNavigation( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertVehicle( Guid id, String name, Guid type ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call VehicleInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setNullableGuid(3, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Vehicle( Guid id, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call VehicleInsert1(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertVehicle( VehicleObject vehicleObject ) throws SQLException {
        Guid id = vehicleObject.getId( );
        String name = vehicleObject.getName( );
        Guid type = vehicleObject.getType( );
        var result = insertVehicle( id, name, type );
        if( result.isSuccess() ) {
            vehicleObject.setId(result.getId());
            vehicleObject.setRowVersion(0);
            vehicleObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Vehicle( VehicleObject vehicleObject ) throws SQLException {
        Guid id = vehicleObject.getId( );
        String name = vehicleObject.getName( );
        var result = insert1Vehicle( id, name );
        if( result.isSuccess( ) ) {
            vehicleObject.setId( result.getId( ) );
            vehicleObject.setRowVersion(0);
            vehicleObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateVehicle( Guid id, long rowVersion, String name, Guid type ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VehicleUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setNullableGuid(4, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Vehicle( Guid id, long rowVersion, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VehicleUpdate1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Vehicle( Guid id, long rowVersion, Guid type ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VehicleUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateVehicle( VehicleObject vehicleObject ) throws SQLException {
        Guid id = vehicleObject.getId();
        long rowVersion = vehicleObject.getRowVersion();
        String name = vehicleObject.getName();
        Guid type = vehicleObject.getType();
        var result = updateVehicle( id, rowVersion, name, type );
        if( result.isSuccess( ) ) {
            vehicleObject.setRowVersion(result.getRowVersion());
            vehicleObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Vehicle( VehicleObject vehicleObject ) throws SQLException {
        Guid id = vehicleObject.getId();
        long rowVersion = vehicleObject.getRowVersion();
        String name = vehicleObject.getName();
        var result = update1Vehicle( id, rowVersion, name );
        if( result.isSuccess( ) ) {
            vehicleObject.setRowVersion(result.getRowVersion());
            vehicleObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Vehicle( VehicleObject vehicleObject ) throws SQLException {
        Guid id = vehicleObject.getId();
        long rowVersion = vehicleObject.getRowVersion();
        Guid type = vehicleObject.getType();
        var result = update2Vehicle( id, rowVersion, type );
        if( result.isSuccess( ) ) {
            vehicleObject.setRowVersion(result.getRowVersion());
            vehicleObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteVehicle( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call VehicleDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteVehicle( VehicleObject vehicleObject ) throws SQLException {
        var id = vehicleObject.getId( );
        var rowVersion = vehicleObject.getRowVersion();
        var result = deleteVehicle( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertVessel( Guid id, String name, Guid type, int toBow, int toStern, int toPort, int toStarboard, Guid draughtTimeseries, Guid personsOnBoardTimeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call VesselInsert(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setNullableGuid(3, type);
            callableStatement.setInt32(4, toBow);
            callableStatement.setInt32(5, toStern);
            callableStatement.setInt32(6, toPort);
            callableStatement.setInt32(7, toStarboard);
            callableStatement.setNullableGuid(8, draughtTimeseries);
            callableStatement.setNullableGuid(9, personsOnBoardTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Vessel( Guid id, String name, int toBow, int toStern, int toPort, int toStarboard ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call VesselInsert1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setInt32(3, toBow);
            callableStatement.setInt32(4, toStern);
            callableStatement.setInt32(5, toPort);
            callableStatement.setInt32(6, toStarboard);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertVessel( VesselObject vesselObject ) throws SQLException {
        Guid id = vesselObject.getId( );
        String name = vesselObject.getName( );
        Guid type = vesselObject.getType( );
        int toBow = vesselObject.getToBow( );
        int toStern = vesselObject.getToStern( );
        int toPort = vesselObject.getToPort( );
        int toStarboard = vesselObject.getToStarboard( );
        Guid draughtTimeseries = vesselObject.getDraughtTimeseries( );
        Guid personsOnBoardTimeseries = vesselObject.getPersonsOnBoardTimeseries( );
        var result = insertVessel( id, name, type, toBow, toStern, toPort, toStarboard, draughtTimeseries, personsOnBoardTimeseries );
        if( result.isSuccess() ) {
            vesselObject.setId(result.getId());
            vesselObject.setRowVersion(0);
            vesselObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Vessel( VesselObject vesselObject ) throws SQLException {
        Guid id = vesselObject.getId( );
        String name = vesselObject.getName( );
        int toBow = vesselObject.getToBow( );
        int toStern = vesselObject.getToStern( );
        int toPort = vesselObject.getToPort( );
        int toStarboard = vesselObject.getToStarboard( );
        var result = insert1Vessel( id, name, toBow, toStern, toPort, toStarboard );
        if( result.isSuccess( ) ) {
            vesselObject.setId( result.getId( ) );
            vesselObject.setRowVersion(0);
            vesselObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateVessel( Guid id, long rowVersion, String name, Guid type, int toBow, int toStern, int toPort, int toStarboard, Guid draughtTimeseries, Guid personsOnBoardTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VesselUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setNullableGuid(4, type);
            callableStatement.setInt32(5, toBow);
            callableStatement.setInt32(6, toStern);
            callableStatement.setInt32(7, toPort);
            callableStatement.setInt32(8, toStarboard);
            callableStatement.setNullableGuid(9, draughtTimeseries);
            callableStatement.setNullableGuid(10, personsOnBoardTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Vessel( Guid id, long rowVersion, String name, int toBow, int toStern, int toPort, int toStarboard ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VesselUpdate1(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setInt32(4, toBow);
            callableStatement.setInt32(5, toStern);
            callableStatement.setInt32(6, toPort);
            callableStatement.setInt32(7, toStarboard);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Vessel( Guid id, long rowVersion, Guid type, Guid draughtTimeseries, Guid personsOnBoardTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VesselUpdate2(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, type);
            callableStatement.setNullableGuid(4, draughtTimeseries);
            callableStatement.setNullableGuid(5, personsOnBoardTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateVessel( VesselObject vesselObject ) throws SQLException {
        Guid id = vesselObject.getId();
        long rowVersion = vesselObject.getRowVersion();
        String name = vesselObject.getName();
        Guid type = vesselObject.getType();
        int toBow = vesselObject.getToBow();
        int toStern = vesselObject.getToStern();
        int toPort = vesselObject.getToPort();
        int toStarboard = vesselObject.getToStarboard();
        Guid draughtTimeseries = vesselObject.getDraughtTimeseries();
        Guid personsOnBoardTimeseries = vesselObject.getPersonsOnBoardTimeseries();
        var result = updateVessel( id, rowVersion, name, type, toBow, toStern, toPort, toStarboard, draughtTimeseries, personsOnBoardTimeseries );
        if( result.isSuccess( ) ) {
            vesselObject.setRowVersion(result.getRowVersion());
            vesselObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Vessel( VesselObject vesselObject ) throws SQLException {
        Guid id = vesselObject.getId();
        long rowVersion = vesselObject.getRowVersion();
        String name = vesselObject.getName();
        int toBow = vesselObject.getToBow();
        int toStern = vesselObject.getToStern();
        int toPort = vesselObject.getToPort();
        int toStarboard = vesselObject.getToStarboard();
        var result = update1Vessel( id, rowVersion, name, toBow, toStern, toPort, toStarboard );
        if( result.isSuccess( ) ) {
            vesselObject.setRowVersion(result.getRowVersion());
            vesselObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Vessel( VesselObject vesselObject ) throws SQLException {
        Guid id = vesselObject.getId();
        long rowVersion = vesselObject.getRowVersion();
        Guid type = vesselObject.getType();
        Guid draughtTimeseries = vesselObject.getDraughtTimeseries();
        Guid personsOnBoardTimeseries = vesselObject.getPersonsOnBoardTimeseries();
        var result = update2Vessel( id, rowVersion, type, draughtTimeseries, personsOnBoardTimeseries );
        if( result.isSuccess( ) ) {
            vesselObject.setRowVersion(result.getRowVersion());
            vesselObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteVessel( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call VesselDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteVessel( VesselObject vesselObject ) throws SQLException {
        var id = vesselObject.getId( );
        var rowVersion = vesselObject.getRowVersion();
        var result = deleteVessel( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertItemIdentityLink( Guid id, Guid item, Guid identity, DateTime start, DateTime end ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ItemIdentityLinkInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, item);
            callableStatement.setGuid(3, identity);
            callableStatement.setLongFromDateTime(4, start);
            callableStatement.setLongFromNullableDateTime(5, end);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertItemIdentityLink( ItemIdentityLinkObject itemIdentityLinkObject ) throws SQLException {
        Guid id = itemIdentityLinkObject.getId( );
        Guid item = itemIdentityLinkObject.getItem( );
        Guid identity = itemIdentityLinkObject.getIdentity( );
        DateTime start = itemIdentityLinkObject.getStart( );
        DateTime end = itemIdentityLinkObject.getEnd( );
        var result = insertItemIdentityLink( id, item, identity, start, end );
        if( result.isSuccess() ) {
            itemIdentityLinkObject.setId(result.getId());
            itemIdentityLinkObject.setRowVersion(0);
            itemIdentityLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateItemIdentityLink( Guid id, long rowVersion, Guid item, Guid identity, DateTime start, DateTime end ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ItemIdentityLinkUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, item);
            callableStatement.setGuid(4, identity);
            callableStatement.setLongFromDateTime(5, start);
            callableStatement.setLongFromNullableDateTime(6, end);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateItemIdentityLink( ItemIdentityLinkObject itemIdentityLinkObject ) throws SQLException {
        Guid id = itemIdentityLinkObject.getId();
        long rowVersion = itemIdentityLinkObject.getRowVersion();
        Guid item = itemIdentityLinkObject.getItem();
        Guid identity = itemIdentityLinkObject.getIdentity();
        DateTime start = itemIdentityLinkObject.getStart();
        DateTime end = itemIdentityLinkObject.getEnd();
        var result = updateItemIdentityLink( id, rowVersion, item, identity, start, end );
        if( result.isSuccess( ) ) {
            itemIdentityLinkObject.setRowVersion(result.getRowVersion());
            itemIdentityLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteItemIdentityLink( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ItemIdentityLinkDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteItemIdentityLink( ItemIdentityLinkObject itemIdentityLinkObject ) throws SQLException {
        var id = itemIdentityLinkObject.getId( );
        var rowVersion = itemIdentityLinkObject.getRowVersion();
        var result = deleteItemIdentityLink( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertItemParentChildLink( Guid id, Guid parent, Guid child, DateTime timestamp ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ItemParentChildLinkInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, parent);
            callableStatement.setGuid(3, child);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertItemParentChildLink( ItemParentChildLinkObject itemParentChildLinkObject ) throws SQLException {
        Guid id = itemParentChildLinkObject.getId( );
        Guid parent = itemParentChildLinkObject.getParent( );
        Guid child = itemParentChildLinkObject.getChild( );
        DateTime timestamp = itemParentChildLinkObject.getTimestamp( );
        var result = insertItemParentChildLink( id, parent, child, timestamp );
        if( result.isSuccess() ) {
            itemParentChildLinkObject.setId(result.getId());
            itemParentChildLinkObject.setRowVersion(0);
            itemParentChildLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateItemParentChildLink( Guid id, long rowVersion, Guid parent, Guid child, DateTime timestamp ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ItemParentChildLinkUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, parent);
            callableStatement.setGuid(4, child);
            callableStatement.setLongFromDateTime(5, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateItemParentChildLink( ItemParentChildLinkObject itemParentChildLinkObject ) throws SQLException {
        Guid id = itemParentChildLinkObject.getId();
        long rowVersion = itemParentChildLinkObject.getRowVersion();
        Guid parent = itemParentChildLinkObject.getParent();
        Guid child = itemParentChildLinkObject.getChild();
        DateTime timestamp = itemParentChildLinkObject.getTimestamp();
        var result = updateItemParentChildLink( id, rowVersion, parent, child, timestamp );
        if( result.isSuccess( ) ) {
            itemParentChildLinkObject.setRowVersion(result.getRowVersion());
            itemParentChildLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteItemParentChildLink( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ItemParentChildLinkDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteItemParentChildLink( ItemParentChildLinkObject itemParentChildLinkObject ) throws SQLException {
        var id = itemParentChildLinkObject.getId( );
        var rowVersion = itemParentChildLinkObject.getRowVersion();
        var result = deleteItemParentChildLink( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLineInputDeviceCommand( Guid id, Guid lineInputDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LineInputDeviceCommandInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, lineInputDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1LineInputDeviceCommand( Guid id, Guid lineInputDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LineInputDeviceCommandInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, lineInputDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLineInputDeviceCommand( LineInputDeviceCommandObject lineInputDeviceCommandObject ) throws SQLException {
        Guid id = lineInputDeviceCommandObject.getId( );
        Guid lineInputDevice = lineInputDeviceCommandObject.getLineInputDevice( );
        DateTime timestamp = lineInputDeviceCommandObject.getTimestamp( );
        int deviceCommandSourceType = lineInputDeviceCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = lineInputDeviceCommandObject.getDeviceCommandSourceId( );
        Guid reply = lineInputDeviceCommandObject.getReply( );
        var result = insertLineInputDeviceCommand( id, lineInputDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            lineInputDeviceCommandObject.setId(result.getId());
            lineInputDeviceCommandObject.setRowVersion(0);
            lineInputDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1LineInputDeviceCommand( LineInputDeviceCommandObject lineInputDeviceCommandObject ) throws SQLException {
        Guid id = lineInputDeviceCommandObject.getId( );
        Guid lineInputDevice = lineInputDeviceCommandObject.getLineInputDevice( );
        DateTime timestamp = lineInputDeviceCommandObject.getTimestamp( );
        int deviceCommandSourceType = lineInputDeviceCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = lineInputDeviceCommandObject.getDeviceCommandSourceId( );
        var result = insert1LineInputDeviceCommand( id, lineInputDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            lineInputDeviceCommandObject.setId( result.getId( ) );
            lineInputDeviceCommandObject.setRowVersion(0);
            lineInputDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateLineInputDeviceCommand( Guid id, long rowVersion, Guid lineInputDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputDeviceCommandUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, lineInputDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1LineInputDeviceCommand( Guid id, long rowVersion, Guid lineInputDevice, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputDeviceCommandUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, lineInputDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2LineInputDeviceCommand( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputDeviceCommandUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLineInputDeviceCommand( LineInputDeviceCommandObject lineInputDeviceCommandObject ) throws SQLException {
        Guid id = lineInputDeviceCommandObject.getId();
        long rowVersion = lineInputDeviceCommandObject.getRowVersion();
        Guid lineInputDevice = lineInputDeviceCommandObject.getLineInputDevice();
        DateTime timestamp = lineInputDeviceCommandObject.getTimestamp();
        int deviceCommandSourceType = lineInputDeviceCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = lineInputDeviceCommandObject.getDeviceCommandSourceId();
        Guid reply = lineInputDeviceCommandObject.getReply();
        var result = updateLineInputDeviceCommand( id, rowVersion, lineInputDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            lineInputDeviceCommandObject.setRowVersion(result.getRowVersion());
            lineInputDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1LineInputDeviceCommand( LineInputDeviceCommandObject lineInputDeviceCommandObject ) throws SQLException {
        Guid id = lineInputDeviceCommandObject.getId();
        long rowVersion = lineInputDeviceCommandObject.getRowVersion();
        Guid lineInputDevice = lineInputDeviceCommandObject.getLineInputDevice();
        DateTime timestamp = lineInputDeviceCommandObject.getTimestamp();
        int deviceCommandSourceType = lineInputDeviceCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = lineInputDeviceCommandObject.getDeviceCommandSourceId();
        var result = update1LineInputDeviceCommand( id, rowVersion, lineInputDevice, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            lineInputDeviceCommandObject.setRowVersion(result.getRowVersion());
            lineInputDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2LineInputDeviceCommand( LineInputDeviceCommandObject lineInputDeviceCommandObject ) throws SQLException {
        Guid id = lineInputDeviceCommandObject.getId();
        long rowVersion = lineInputDeviceCommandObject.getRowVersion();
        Guid reply = lineInputDeviceCommandObject.getReply();
        var result = update2LineInputDeviceCommand( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            lineInputDeviceCommandObject.setRowVersion(result.getRowVersion());
            lineInputDeviceCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLineInputDeviceCommand( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LineInputDeviceCommandDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLineInputDeviceCommand( LineInputDeviceCommandObject lineInputDeviceCommandObject ) throws SQLException {
        var id = lineInputDeviceCommandObject.getId( );
        var rowVersion = lineInputDeviceCommandObject.getRowVersion();
        var result = deleteLineInputDeviceCommand( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLineInputDeviceCommandReply( Guid id, Guid lineInputDevice, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LineInputDeviceCommandReplyInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, lineInputDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableGuid(4, command);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1LineInputDeviceCommandReply( Guid id, Guid lineInputDevice, DateTime timestamp, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LineInputDeviceCommandReplyInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, lineInputDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, status);
            callableStatement.setString(5, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLineInputDeviceCommandReply( LineInputDeviceCommandReplyObject lineInputDeviceCommandReplyObject ) throws SQLException {
        Guid id = lineInputDeviceCommandReplyObject.getId( );
        Guid lineInputDevice = lineInputDeviceCommandReplyObject.getLineInputDevice( );
        DateTime timestamp = lineInputDeviceCommandReplyObject.getTimestamp( );
        Guid command = lineInputDeviceCommandReplyObject.getCommand( );
        int status = lineInputDeviceCommandReplyObject.getStatus( );
        String message = lineInputDeviceCommandReplyObject.getMessage( );
        var result = insertLineInputDeviceCommandReply( id, lineInputDevice, timestamp, command, status, message );
        if( result.isSuccess() ) {
            lineInputDeviceCommandReplyObject.setId(result.getId());
            lineInputDeviceCommandReplyObject.setRowVersion(0);
            lineInputDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1LineInputDeviceCommandReply( LineInputDeviceCommandReplyObject lineInputDeviceCommandReplyObject ) throws SQLException {
        Guid id = lineInputDeviceCommandReplyObject.getId( );
        Guid lineInputDevice = lineInputDeviceCommandReplyObject.getLineInputDevice( );
        DateTime timestamp = lineInputDeviceCommandReplyObject.getTimestamp( );
        int status = lineInputDeviceCommandReplyObject.getStatus( );
        String message = lineInputDeviceCommandReplyObject.getMessage( );
        var result = insert1LineInputDeviceCommandReply( id, lineInputDevice, timestamp, status, message );
        if( result.isSuccess( ) ) {
            lineInputDeviceCommandReplyObject.setId( result.getId( ) );
            lineInputDeviceCommandReplyObject.setRowVersion(0);
            lineInputDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateLineInputDeviceCommandReply( Guid id, long rowVersion, Guid lineInputDevice, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputDeviceCommandReplyUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, lineInputDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableGuid(5, command);
            callableStatement.setInt32(6, status);
            callableStatement.setString(7, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1LineInputDeviceCommandReply( Guid id, long rowVersion, Guid lineInputDevice, DateTime timestamp, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputDeviceCommandReplyUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, lineInputDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2LineInputDeviceCommandReply( Guid id, long rowVersion, Guid command ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputDeviceCommandReplyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, command);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLineInputDeviceCommandReply( LineInputDeviceCommandReplyObject lineInputDeviceCommandReplyObject ) throws SQLException {
        Guid id = lineInputDeviceCommandReplyObject.getId();
        long rowVersion = lineInputDeviceCommandReplyObject.getRowVersion();
        Guid lineInputDevice = lineInputDeviceCommandReplyObject.getLineInputDevice();
        DateTime timestamp = lineInputDeviceCommandReplyObject.getTimestamp();
        Guid command = lineInputDeviceCommandReplyObject.getCommand();
        int status = lineInputDeviceCommandReplyObject.getStatus();
        String message = lineInputDeviceCommandReplyObject.getMessage();
        var result = updateLineInputDeviceCommandReply( id, rowVersion, lineInputDevice, timestamp, command, status, message );
        if( result.isSuccess( ) ) {
            lineInputDeviceCommandReplyObject.setRowVersion(result.getRowVersion());
            lineInputDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1LineInputDeviceCommandReply( LineInputDeviceCommandReplyObject lineInputDeviceCommandReplyObject ) throws SQLException {
        Guid id = lineInputDeviceCommandReplyObject.getId();
        long rowVersion = lineInputDeviceCommandReplyObject.getRowVersion();
        Guid lineInputDevice = lineInputDeviceCommandReplyObject.getLineInputDevice();
        DateTime timestamp = lineInputDeviceCommandReplyObject.getTimestamp();
        int status = lineInputDeviceCommandReplyObject.getStatus();
        String message = lineInputDeviceCommandReplyObject.getMessage();
        var result = update1LineInputDeviceCommandReply( id, rowVersion, lineInputDevice, timestamp, status, message );
        if( result.isSuccess( ) ) {
            lineInputDeviceCommandReplyObject.setRowVersion(result.getRowVersion());
            lineInputDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2LineInputDeviceCommandReply( LineInputDeviceCommandReplyObject lineInputDeviceCommandReplyObject ) throws SQLException {
        Guid id = lineInputDeviceCommandReplyObject.getId();
        long rowVersion = lineInputDeviceCommandReplyObject.getRowVersion();
        Guid command = lineInputDeviceCommandReplyObject.getCommand();
        var result = update2LineInputDeviceCommandReply( id, rowVersion, command );
        if( result.isSuccess( ) ) {
            lineInputDeviceCommandReplyObject.setRowVersion(result.getRowVersion());
            lineInputDeviceCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLineInputDeviceCommandReply( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LineInputDeviceCommandReplyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLineInputDeviceCommandReply( LineInputDeviceCommandReplyObject lineInputDeviceCommandReplyObject ) throws SQLException {
        var id = lineInputDeviceCommandReplyObject.getId( );
        var rowVersion = lineInputDeviceCommandReplyObject.getRowVersion();
        var result = deleteLineInputDeviceCommandReply( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLineInputDeviceConfiguration( Guid id, Guid lineInputDevice, DateTime timestamp, boolean storeReceivedSentences, boolean storeSentMessages, boolean storeUnsentMessages, boolean nMEA, boolean strictNMEA, int connectionType, int udpReceivePort, String udpSendHostname, int udpSendPort, String tcpHostname, int tcpPort, boolean useHttpLogin, String loginHostname, int loginPort, String userName, String password, String comPort, int baudRate, int dataBits, boolean discardNull, boolean dtrEnable, int handshake, String newLine, int parity, byte parityReplace, int readBufferSize, TimeSpan readTimeout, int receivedBytesThreshold, boolean rtsEnable, int stopBits, int writeBufferSize, TimeSpan writeTimeout, String pairedComPort ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LineInputDeviceConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, lineInputDevice);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setBoolean(4, storeReceivedSentences);
            callableStatement.setBoolean(5, storeSentMessages);
            callableStatement.setBoolean(6, storeUnsentMessages);
            callableStatement.setBoolean(7, nMEA);
            callableStatement.setBoolean(8, strictNMEA);
            callableStatement.setInt32(9, connectionType);
            callableStatement.setInt32(10, udpReceivePort);
            callableStatement.setString(11, udpSendHostname);
            callableStatement.setInt32(12, udpSendPort);
            callableStatement.setString(13, tcpHostname);
            callableStatement.setInt32(14, tcpPort);
            callableStatement.setBoolean(15, useHttpLogin);
            callableStatement.setString(16, loginHostname);
            callableStatement.setInt32(17, loginPort);
            callableStatement.setString(18, userName);
            callableStatement.setString(19, password);
            callableStatement.setString(20, comPort);
            callableStatement.setInt32(21, baudRate);
            callableStatement.setInt32(22, dataBits);
            callableStatement.setBoolean(23, discardNull);
            callableStatement.setBoolean(24, dtrEnable);
            callableStatement.setInt32(25, handshake);
            callableStatement.setString(26, newLine);
            callableStatement.setInt32(27, parity);
            callableStatement.setUInt8(28, parityReplace);
            callableStatement.setInt32(29, readBufferSize);
            callableStatement.setTimeSpan(30, readTimeout);
            callableStatement.setInt32(31, receivedBytesThreshold);
            callableStatement.setBoolean(32, rtsEnable);
            callableStatement.setInt32(33, stopBits);
            callableStatement.setInt32(34, writeBufferSize);
            callableStatement.setTimeSpan(35, writeTimeout);
            callableStatement.setString(36, pairedComPort);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLineInputDeviceConfiguration( LineInputDeviceConfigurationObject lineInputDeviceConfigurationObject ) throws SQLException {
        Guid id = lineInputDeviceConfigurationObject.getId( );
        Guid lineInputDevice = lineInputDeviceConfigurationObject.getLineInputDevice( );
        DateTime timestamp = lineInputDeviceConfigurationObject.getTimestamp( );
        boolean storeReceivedSentences = lineInputDeviceConfigurationObject.getStoreReceivedSentences( );
        boolean storeSentMessages = lineInputDeviceConfigurationObject.getStoreSentMessages( );
        boolean storeUnsentMessages = lineInputDeviceConfigurationObject.getStoreUnsentMessages( );
        boolean nMEA = lineInputDeviceConfigurationObject.getNMEA( );
        boolean strictNMEA = lineInputDeviceConfigurationObject.getStrictNMEA( );
        int connectionType = lineInputDeviceConfigurationObject.getConnectionType( );
        int udpReceivePort = lineInputDeviceConfigurationObject.getUdpReceivePort( );
        String udpSendHostname = lineInputDeviceConfigurationObject.getUdpSendHostname( );
        int udpSendPort = lineInputDeviceConfigurationObject.getUdpSendPort( );
        String tcpHostname = lineInputDeviceConfigurationObject.getTcpHostname( );
        int tcpPort = lineInputDeviceConfigurationObject.getTcpPort( );
        boolean useHttpLogin = lineInputDeviceConfigurationObject.getUseHttpLogin( );
        String loginHostname = lineInputDeviceConfigurationObject.getLoginHostname( );
        int loginPort = lineInputDeviceConfigurationObject.getLoginPort( );
        String userName = lineInputDeviceConfigurationObject.getUserName( );
        String password = lineInputDeviceConfigurationObject.getPassword( );
        String comPort = lineInputDeviceConfigurationObject.getComPort( );
        int baudRate = lineInputDeviceConfigurationObject.getBaudRate( );
        int dataBits = lineInputDeviceConfigurationObject.getDataBits( );
        boolean discardNull = lineInputDeviceConfigurationObject.getDiscardNull( );
        boolean dtrEnable = lineInputDeviceConfigurationObject.getDtrEnable( );
        int handshake = lineInputDeviceConfigurationObject.getHandshake( );
        String newLine = lineInputDeviceConfigurationObject.getNewLine( );
        int parity = lineInputDeviceConfigurationObject.getParity( );
        byte parityReplace = lineInputDeviceConfigurationObject.getParityReplace( );
        int readBufferSize = lineInputDeviceConfigurationObject.getReadBufferSize( );
        TimeSpan readTimeout = lineInputDeviceConfigurationObject.getReadTimeout( );
        int receivedBytesThreshold = lineInputDeviceConfigurationObject.getReceivedBytesThreshold( );
        boolean rtsEnable = lineInputDeviceConfigurationObject.getRtsEnable( );
        int stopBits = lineInputDeviceConfigurationObject.getStopBits( );
        int writeBufferSize = lineInputDeviceConfigurationObject.getWriteBufferSize( );
        TimeSpan writeTimeout = lineInputDeviceConfigurationObject.getWriteTimeout( );
        String pairedComPort = lineInputDeviceConfigurationObject.getPairedComPort( );
        var result = insertLineInputDeviceConfiguration( id, lineInputDevice, timestamp, storeReceivedSentences, storeSentMessages, storeUnsentMessages, nMEA, strictNMEA, connectionType, udpReceivePort, udpSendHostname, udpSendPort, tcpHostname, tcpPort, useHttpLogin, loginHostname, loginPort, userName, password, comPort, baudRate, dataBits, discardNull, dtrEnable, handshake, newLine, parity, parityReplace, readBufferSize, readTimeout, receivedBytesThreshold, rtsEnable, stopBits, writeBufferSize, writeTimeout, pairedComPort );
        if( result.isSuccess() ) {
            lineInputDeviceConfigurationObject.setId(result.getId());
            lineInputDeviceConfigurationObject.setRowVersion(0);
            lineInputDeviceConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateLineInputDeviceConfiguration( Guid id, long rowVersion, Guid lineInputDevice, DateTime timestamp, boolean storeReceivedSentences, boolean storeSentMessages, boolean storeUnsentMessages, boolean nMEA, boolean strictNMEA, int connectionType, int udpReceivePort, String udpSendHostname, int udpSendPort, String tcpHostname, int tcpPort, boolean useHttpLogin, String loginHostname, int loginPort, String userName, String password, String comPort, int baudRate, int dataBits, boolean discardNull, boolean dtrEnable, int handshake, String newLine, int parity, byte parityReplace, int readBufferSize, TimeSpan readTimeout, int receivedBytesThreshold, boolean rtsEnable, int stopBits, int writeBufferSize, TimeSpan writeTimeout, String pairedComPort ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputDeviceConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, lineInputDevice);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setBoolean(5, storeReceivedSentences);
            callableStatement.setBoolean(6, storeSentMessages);
            callableStatement.setBoolean(7, storeUnsentMessages);
            callableStatement.setBoolean(8, nMEA);
            callableStatement.setBoolean(9, strictNMEA);
            callableStatement.setInt32(10, connectionType);
            callableStatement.setInt32(11, udpReceivePort);
            callableStatement.setString(12, udpSendHostname);
            callableStatement.setInt32(13, udpSendPort);
            callableStatement.setString(14, tcpHostname);
            callableStatement.setInt32(15, tcpPort);
            callableStatement.setBoolean(16, useHttpLogin);
            callableStatement.setString(17, loginHostname);
            callableStatement.setInt32(18, loginPort);
            callableStatement.setString(19, userName);
            callableStatement.setString(20, password);
            callableStatement.setString(21, comPort);
            callableStatement.setInt32(22, baudRate);
            callableStatement.setInt32(23, dataBits);
            callableStatement.setBoolean(24, discardNull);
            callableStatement.setBoolean(25, dtrEnable);
            callableStatement.setInt32(26, handshake);
            callableStatement.setString(27, newLine);
            callableStatement.setInt32(28, parity);
            callableStatement.setUInt8(29, parityReplace);
            callableStatement.setInt32(30, readBufferSize);
            callableStatement.setTimeSpan(31, readTimeout);
            callableStatement.setInt32(32, receivedBytesThreshold);
            callableStatement.setBoolean(33, rtsEnable);
            callableStatement.setInt32(34, stopBits);
            callableStatement.setInt32(35, writeBufferSize);
            callableStatement.setTimeSpan(36, writeTimeout);
            callableStatement.setString(37, pairedComPort);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLineInputDeviceConfiguration( LineInputDeviceConfigurationObject lineInputDeviceConfigurationObject ) throws SQLException {
        Guid id = lineInputDeviceConfigurationObject.getId();
        long rowVersion = lineInputDeviceConfigurationObject.getRowVersion();
        Guid lineInputDevice = lineInputDeviceConfigurationObject.getLineInputDevice();
        DateTime timestamp = lineInputDeviceConfigurationObject.getTimestamp();
        boolean storeReceivedSentences = lineInputDeviceConfigurationObject.getStoreReceivedSentences();
        boolean storeSentMessages = lineInputDeviceConfigurationObject.getStoreSentMessages();
        boolean storeUnsentMessages = lineInputDeviceConfigurationObject.getStoreUnsentMessages();
        boolean nMEA = lineInputDeviceConfigurationObject.getNMEA();
        boolean strictNMEA = lineInputDeviceConfigurationObject.getStrictNMEA();
        int connectionType = lineInputDeviceConfigurationObject.getConnectionType();
        int udpReceivePort = lineInputDeviceConfigurationObject.getUdpReceivePort();
        String udpSendHostname = lineInputDeviceConfigurationObject.getUdpSendHostname();
        int udpSendPort = lineInputDeviceConfigurationObject.getUdpSendPort();
        String tcpHostname = lineInputDeviceConfigurationObject.getTcpHostname();
        int tcpPort = lineInputDeviceConfigurationObject.getTcpPort();
        boolean useHttpLogin = lineInputDeviceConfigurationObject.getUseHttpLogin();
        String loginHostname = lineInputDeviceConfigurationObject.getLoginHostname();
        int loginPort = lineInputDeviceConfigurationObject.getLoginPort();
        String userName = lineInputDeviceConfigurationObject.getUserName();
        String password = lineInputDeviceConfigurationObject.getPassword();
        String comPort = lineInputDeviceConfigurationObject.getComPort();
        int baudRate = lineInputDeviceConfigurationObject.getBaudRate();
        int dataBits = lineInputDeviceConfigurationObject.getDataBits();
        boolean discardNull = lineInputDeviceConfigurationObject.getDiscardNull();
        boolean dtrEnable = lineInputDeviceConfigurationObject.getDtrEnable();
        int handshake = lineInputDeviceConfigurationObject.getHandshake();
        String newLine = lineInputDeviceConfigurationObject.getNewLine();
        int parity = lineInputDeviceConfigurationObject.getParity();
        byte parityReplace = lineInputDeviceConfigurationObject.getParityReplace();
        int readBufferSize = lineInputDeviceConfigurationObject.getReadBufferSize();
        TimeSpan readTimeout = lineInputDeviceConfigurationObject.getReadTimeout();
        int receivedBytesThreshold = lineInputDeviceConfigurationObject.getReceivedBytesThreshold();
        boolean rtsEnable = lineInputDeviceConfigurationObject.getRtsEnable();
        int stopBits = lineInputDeviceConfigurationObject.getStopBits();
        int writeBufferSize = lineInputDeviceConfigurationObject.getWriteBufferSize();
        TimeSpan writeTimeout = lineInputDeviceConfigurationObject.getWriteTimeout();
        String pairedComPort = lineInputDeviceConfigurationObject.getPairedComPort();
        var result = updateLineInputDeviceConfiguration( id, rowVersion, lineInputDevice, timestamp, storeReceivedSentences, storeSentMessages, storeUnsentMessages, nMEA, strictNMEA, connectionType, udpReceivePort, udpSendHostname, udpSendPort, tcpHostname, tcpPort, useHttpLogin, loginHostname, loginPort, userName, password, comPort, baudRate, dataBits, discardNull, dtrEnable, handshake, newLine, parity, parityReplace, readBufferSize, readTimeout, receivedBytesThreshold, rtsEnable, stopBits, writeBufferSize, writeTimeout, pairedComPort );
        if( result.isSuccess( ) ) {
            lineInputDeviceConfigurationObject.setRowVersion(result.getRowVersion());
            lineInputDeviceConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLineInputDeviceConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LineInputDeviceConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLineInputDeviceConfiguration( LineInputDeviceConfigurationObject lineInputDeviceConfigurationObject ) throws SQLException {
        var id = lineInputDeviceConfigurationObject.getId( );
        var rowVersion = lineInputDeviceConfigurationObject.getRowVersion();
        var result = deleteLineInputDeviceConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLineInputMessageRouting( Guid id, Guid lineInputDevice, String type ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LineInputMessageRoutingInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, lineInputDevice);
            callableStatement.setString(3, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLineInputMessageRouting( LineInputMessageRoutingObject lineInputMessageRoutingObject ) throws SQLException {
        Guid id = lineInputMessageRoutingObject.getId( );
        Guid lineInputDevice = lineInputMessageRoutingObject.getLineInputDevice( );
        String type = lineInputMessageRoutingObject.getType( );
        var result = insertLineInputMessageRouting( id, lineInputDevice, type );
        if( result.isSuccess() ) {
            lineInputMessageRoutingObject.setId(result.getId());
            lineInputMessageRoutingObject.setRowVersion(0);
            lineInputMessageRoutingObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateLineInputMessageRouting( Guid id, long rowVersion, Guid lineInputDevice, String type ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputMessageRoutingUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, lineInputDevice);
            callableStatement.setString(4, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLineInputMessageRouting( LineInputMessageRoutingObject lineInputMessageRoutingObject ) throws SQLException {
        Guid id = lineInputMessageRoutingObject.getId();
        long rowVersion = lineInputMessageRoutingObject.getRowVersion();
        Guid lineInputDevice = lineInputMessageRoutingObject.getLineInputDevice();
        String type = lineInputMessageRoutingObject.getType();
        var result = updateLineInputMessageRouting( id, rowVersion, lineInputDevice, type );
        if( result.isSuccess( ) ) {
            lineInputMessageRoutingObject.setRowVersion(result.getRowVersion());
            lineInputMessageRoutingObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLineInputMessageRouting( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LineInputMessageRoutingDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLineInputMessageRouting( LineInputMessageRoutingObject lineInputMessageRoutingObject ) throws SQLException {
        var id = lineInputMessageRoutingObject.getId( );
        var rowVersion = lineInputMessageRoutingObject.getRowVersion();
        var result = deleteLineInputMessageRouting( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLineInputMessageRoutingDestination( Guid id, Guid routing, Guid listener ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LineInputMessageRoutingDestinationInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, routing);
            callableStatement.setNullableGuid(3, listener);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1LineInputMessageRoutingDestination( Guid id, Guid routing ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LineInputMessageRoutingDestinationInsert1(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, routing);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLineInputMessageRoutingDestination( LineInputMessageRoutingDestinationObject lineInputMessageRoutingDestinationObject ) throws SQLException {
        Guid id = lineInputMessageRoutingDestinationObject.getId( );
        Guid routing = lineInputMessageRoutingDestinationObject.getRouting( );
        Guid listener = lineInputMessageRoutingDestinationObject.getListener( );
        var result = insertLineInputMessageRoutingDestination( id, routing, listener );
        if( result.isSuccess() ) {
            lineInputMessageRoutingDestinationObject.setId(result.getId());
            lineInputMessageRoutingDestinationObject.setRowVersion(0);
            lineInputMessageRoutingDestinationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1LineInputMessageRoutingDestination( LineInputMessageRoutingDestinationObject lineInputMessageRoutingDestinationObject ) throws SQLException {
        Guid id = lineInputMessageRoutingDestinationObject.getId( );
        Guid routing = lineInputMessageRoutingDestinationObject.getRouting( );
        var result = insert1LineInputMessageRoutingDestination( id, routing );
        if( result.isSuccess( ) ) {
            lineInputMessageRoutingDestinationObject.setId( result.getId( ) );
            lineInputMessageRoutingDestinationObject.setRowVersion(0);
            lineInputMessageRoutingDestinationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateLineInputMessageRoutingDestination( Guid id, long rowVersion, Guid routing, Guid listener ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputMessageRoutingDestinationUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, routing);
            callableStatement.setNullableGuid(4, listener);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1LineInputMessageRoutingDestination( Guid id, long rowVersion, Guid routing ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputMessageRoutingDestinationUpdate1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, routing);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2LineInputMessageRoutingDestination( Guid id, long rowVersion, Guid listener ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputMessageRoutingDestinationUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, listener);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLineInputMessageRoutingDestination( LineInputMessageRoutingDestinationObject lineInputMessageRoutingDestinationObject ) throws SQLException {
        Guid id = lineInputMessageRoutingDestinationObject.getId();
        long rowVersion = lineInputMessageRoutingDestinationObject.getRowVersion();
        Guid routing = lineInputMessageRoutingDestinationObject.getRouting();
        Guid listener = lineInputMessageRoutingDestinationObject.getListener();
        var result = updateLineInputMessageRoutingDestination( id, rowVersion, routing, listener );
        if( result.isSuccess( ) ) {
            lineInputMessageRoutingDestinationObject.setRowVersion(result.getRowVersion());
            lineInputMessageRoutingDestinationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1LineInputMessageRoutingDestination( LineInputMessageRoutingDestinationObject lineInputMessageRoutingDestinationObject ) throws SQLException {
        Guid id = lineInputMessageRoutingDestinationObject.getId();
        long rowVersion = lineInputMessageRoutingDestinationObject.getRowVersion();
        Guid routing = lineInputMessageRoutingDestinationObject.getRouting();
        var result = update1LineInputMessageRoutingDestination( id, rowVersion, routing );
        if( result.isSuccess( ) ) {
            lineInputMessageRoutingDestinationObject.setRowVersion(result.getRowVersion());
            lineInputMessageRoutingDestinationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2LineInputMessageRoutingDestination( LineInputMessageRoutingDestinationObject lineInputMessageRoutingDestinationObject ) throws SQLException {
        Guid id = lineInputMessageRoutingDestinationObject.getId();
        long rowVersion = lineInputMessageRoutingDestinationObject.getRowVersion();
        Guid listener = lineInputMessageRoutingDestinationObject.getListener();
        var result = update2LineInputMessageRoutingDestination( id, rowVersion, listener );
        if( result.isSuccess( ) ) {
            lineInputMessageRoutingDestinationObject.setRowVersion(result.getRowVersion());
            lineInputMessageRoutingDestinationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLineInputMessageRoutingDestination( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LineInputMessageRoutingDestinationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLineInputMessageRoutingDestination( LineInputMessageRoutingDestinationObject lineInputMessageRoutingDestinationObject ) throws SQLException {
        var id = lineInputMessageRoutingDestinationObject.getId( );
        var rowVersion = lineInputMessageRoutingDestinationObject.getRowVersion();
        var result = deleteLineInputMessageRoutingDestination( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLineInputWhiteListEntry( Guid id, Guid lineInputDevice, String hostName, int port ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LineInputWhiteListEntryInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, lineInputDevice);
            callableStatement.setString(3, hostName);
            callableStatement.setInt32(4, port);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLineInputWhiteListEntry( LineInputWhiteListEntryObject lineInputWhiteListEntryObject ) throws SQLException {
        Guid id = lineInputWhiteListEntryObject.getId( );
        Guid lineInputDevice = lineInputWhiteListEntryObject.getLineInputDevice( );
        String hostName = lineInputWhiteListEntryObject.getHostName( );
        int port = lineInputWhiteListEntryObject.getPort( );
        var result = insertLineInputWhiteListEntry( id, lineInputDevice, hostName, port );
        if( result.isSuccess() ) {
            lineInputWhiteListEntryObject.setId(result.getId());
            lineInputWhiteListEntryObject.setRowVersion(0);
            lineInputWhiteListEntryObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateLineInputWhiteListEntry( Guid id, long rowVersion, Guid lineInputDevice, String hostName, int port ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LineInputWhiteListEntryUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, lineInputDevice);
            callableStatement.setString(4, hostName);
            callableStatement.setInt32(5, port);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLineInputWhiteListEntry( LineInputWhiteListEntryObject lineInputWhiteListEntryObject ) throws SQLException {
        Guid id = lineInputWhiteListEntryObject.getId();
        long rowVersion = lineInputWhiteListEntryObject.getRowVersion();
        Guid lineInputDevice = lineInputWhiteListEntryObject.getLineInputDevice();
        String hostName = lineInputWhiteListEntryObject.getHostName();
        int port = lineInputWhiteListEntryObject.getPort();
        var result = updateLineInputWhiteListEntry( id, rowVersion, lineInputDevice, hostName, port );
        if( result.isSuccess( ) ) {
            lineInputWhiteListEntryObject.setRowVersion(result.getRowVersion());
            lineInputWhiteListEntryObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLineInputWhiteListEntry( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LineInputWhiteListEntryDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLineInputWhiteListEntry( LineInputWhiteListEntryObject lineInputWhiteListEntryObject ) throws SQLException {
        var id = lineInputWhiteListEntryObject.getId( );
        var rowVersion = lineInputWhiteListEntryObject.getRowVersion();
        var result = deleteLineInputWhiteListEntry( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLogApplication( Guid id, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LogApplicationInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setString(3, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLogApplication( LogApplicationObject logApplicationObject ) throws SQLException {
        Guid id = logApplicationObject.getId( );
        String name = logApplicationObject.getName( );
        String description = logApplicationObject.getDescription( );
        var result = insertLogApplication( id, name, description );
        if( result.isSuccess() ) {
            logApplicationObject.setId(result.getId());
            logApplicationObject.setRowVersion(0);
            logApplicationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateLogApplication( Guid id, long rowVersion, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LogApplicationUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLogApplication( LogApplicationObject logApplicationObject ) throws SQLException {
        Guid id = logApplicationObject.getId();
        long rowVersion = logApplicationObject.getRowVersion();
        String name = logApplicationObject.getName();
        String description = logApplicationObject.getDescription();
        var result = updateLogApplication( id, rowVersion, name, description );
        if( result.isSuccess( ) ) {
            logApplicationObject.setRowVersion(result.getRowVersion());
            logApplicationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLogApplication( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LogApplicationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLogApplication( LogApplicationObject logApplicationObject ) throws SQLException {
        var id = logApplicationObject.getId( );
        var rowVersion = logApplicationObject.getRowVersion();
        var result = deleteLogApplication( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLogApplicationConfiguration( Guid id, Guid application, DateTime timestamp, boolean finest, boolean finer, boolean fine, boolean info, boolean notice, boolean warn, boolean error, boolean severe, boolean critical, boolean alert, boolean fatal, boolean emergency ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LogApplicationConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, application);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setBoolean(4, finest);
            callableStatement.setBoolean(5, finer);
            callableStatement.setBoolean(6, fine);
            callableStatement.setBoolean(7, info);
            callableStatement.setBoolean(8, notice);
            callableStatement.setBoolean(9, warn);
            callableStatement.setBoolean(10, error);
            callableStatement.setBoolean(11, severe);
            callableStatement.setBoolean(12, critical);
            callableStatement.setBoolean(13, alert);
            callableStatement.setBoolean(14, fatal);
            callableStatement.setBoolean(15, emergency);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLogApplicationConfiguration( LogApplicationConfigurationObject logApplicationConfigurationObject ) throws SQLException {
        Guid id = logApplicationConfigurationObject.getId( );
        Guid application = logApplicationConfigurationObject.getApplication( );
        DateTime timestamp = logApplicationConfigurationObject.getTimestamp( );
        boolean finest = logApplicationConfigurationObject.getFinest( );
        boolean finer = logApplicationConfigurationObject.getFiner( );
        boolean fine = logApplicationConfigurationObject.getFine( );
        boolean info = logApplicationConfigurationObject.getInfo( );
        boolean notice = logApplicationConfigurationObject.getNotice( );
        boolean warn = logApplicationConfigurationObject.getWarn( );
        boolean error = logApplicationConfigurationObject.getError( );
        boolean severe = logApplicationConfigurationObject.getSevere( );
        boolean critical = logApplicationConfigurationObject.getCritical( );
        boolean alert = logApplicationConfigurationObject.getAlert( );
        boolean fatal = logApplicationConfigurationObject.getFatal( );
        boolean emergency = logApplicationConfigurationObject.getEmergency( );
        var result = insertLogApplicationConfiguration( id, application, timestamp, finest, finer, fine, info, notice, warn, error, severe, critical, alert, fatal, emergency );
        if( result.isSuccess() ) {
            logApplicationConfigurationObject.setId(result.getId());
            logApplicationConfigurationObject.setRowVersion(0);
            logApplicationConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateLogApplicationConfiguration( Guid id, long rowVersion, Guid application, DateTime timestamp, boolean finest, boolean finer, boolean fine, boolean info, boolean notice, boolean warn, boolean error, boolean severe, boolean critical, boolean alert, boolean fatal, boolean emergency ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LogApplicationConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, application);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setBoolean(5, finest);
            callableStatement.setBoolean(6, finer);
            callableStatement.setBoolean(7, fine);
            callableStatement.setBoolean(8, info);
            callableStatement.setBoolean(9, notice);
            callableStatement.setBoolean(10, warn);
            callableStatement.setBoolean(11, error);
            callableStatement.setBoolean(12, severe);
            callableStatement.setBoolean(13, critical);
            callableStatement.setBoolean(14, alert);
            callableStatement.setBoolean(15, fatal);
            callableStatement.setBoolean(16, emergency);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLogApplicationConfiguration( LogApplicationConfigurationObject logApplicationConfigurationObject ) throws SQLException {
        Guid id = logApplicationConfigurationObject.getId();
        long rowVersion = logApplicationConfigurationObject.getRowVersion();
        Guid application = logApplicationConfigurationObject.getApplication();
        DateTime timestamp = logApplicationConfigurationObject.getTimestamp();
        boolean finest = logApplicationConfigurationObject.getFinest();
        boolean finer = logApplicationConfigurationObject.getFiner();
        boolean fine = logApplicationConfigurationObject.getFine();
        boolean info = logApplicationConfigurationObject.getInfo();
        boolean notice = logApplicationConfigurationObject.getNotice();
        boolean warn = logApplicationConfigurationObject.getWarn();
        boolean error = logApplicationConfigurationObject.getError();
        boolean severe = logApplicationConfigurationObject.getSevere();
        boolean critical = logApplicationConfigurationObject.getCritical();
        boolean alert = logApplicationConfigurationObject.getAlert();
        boolean fatal = logApplicationConfigurationObject.getFatal();
        boolean emergency = logApplicationConfigurationObject.getEmergency();
        var result = updateLogApplicationConfiguration( id, rowVersion, application, timestamp, finest, finer, fine, info, notice, warn, error, severe, critical, alert, fatal, emergency );
        if( result.isSuccess( ) ) {
            logApplicationConfigurationObject.setRowVersion(result.getRowVersion());
            logApplicationConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLogApplicationConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LogApplicationConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLogApplicationConfiguration( LogApplicationConfigurationObject logApplicationConfigurationObject ) throws SQLException {
        var id = logApplicationConfigurationObject.getId( );
        var rowVersion = logApplicationConfigurationObject.getRowVersion();
        var result = deleteLogApplicationConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLogHost( Guid id, String computerName, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LogHostInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, computerName);
            callableStatement.setString(3, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLogHost( LogHostObject logHostObject ) throws SQLException {
        Guid id = logHostObject.getId( );
        String computerName = logHostObject.getComputerName( );
        String description = logHostObject.getDescription( );
        var result = insertLogHost( id, computerName, description );
        if( result.isSuccess() ) {
            logHostObject.setId(result.getId());
            logHostObject.setRowVersion(0);
            logHostObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateLogHost( Guid id, long rowVersion, String computerName, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LogHostUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, computerName);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLogHost( LogHostObject logHostObject ) throws SQLException {
        Guid id = logHostObject.getId();
        long rowVersion = logHostObject.getRowVersion();
        String computerName = logHostObject.getComputerName();
        String description = logHostObject.getDescription();
        var result = updateLogHost( id, rowVersion, computerName, description );
        if( result.isSuccess( ) ) {
            logHostObject.setRowVersion(result.getRowVersion());
            logHostObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLogHost( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LogHostDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLogHost( LogHostObject logHostObject ) throws SQLException {
        var id = logHostObject.getId( );
        var rowVersion = logHostObject.getRowVersion();
        var result = deleteLogHost( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLogHostConfiguration( Guid id, Guid host, DateTime timestamp, boolean finest, boolean finer, boolean fine, boolean info, boolean notice, boolean warn, boolean error, boolean severe, boolean critical, boolean alert, boolean fatal, boolean emergency ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LogHostConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, host);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setBoolean(4, finest);
            callableStatement.setBoolean(5, finer);
            callableStatement.setBoolean(6, fine);
            callableStatement.setBoolean(7, info);
            callableStatement.setBoolean(8, notice);
            callableStatement.setBoolean(9, warn);
            callableStatement.setBoolean(10, error);
            callableStatement.setBoolean(11, severe);
            callableStatement.setBoolean(12, critical);
            callableStatement.setBoolean(13, alert);
            callableStatement.setBoolean(14, fatal);
            callableStatement.setBoolean(15, emergency);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLogHostConfiguration( LogHostConfigurationObject logHostConfigurationObject ) throws SQLException {
        Guid id = logHostConfigurationObject.getId( );
        Guid host = logHostConfigurationObject.getHost( );
        DateTime timestamp = logHostConfigurationObject.getTimestamp( );
        boolean finest = logHostConfigurationObject.getFinest( );
        boolean finer = logHostConfigurationObject.getFiner( );
        boolean fine = logHostConfigurationObject.getFine( );
        boolean info = logHostConfigurationObject.getInfo( );
        boolean notice = logHostConfigurationObject.getNotice( );
        boolean warn = logHostConfigurationObject.getWarn( );
        boolean error = logHostConfigurationObject.getError( );
        boolean severe = logHostConfigurationObject.getSevere( );
        boolean critical = logHostConfigurationObject.getCritical( );
        boolean alert = logHostConfigurationObject.getAlert( );
        boolean fatal = logHostConfigurationObject.getFatal( );
        boolean emergency = logHostConfigurationObject.getEmergency( );
        var result = insertLogHostConfiguration( id, host, timestamp, finest, finer, fine, info, notice, warn, error, severe, critical, alert, fatal, emergency );
        if( result.isSuccess() ) {
            logHostConfigurationObject.setId(result.getId());
            logHostConfigurationObject.setRowVersion(0);
            logHostConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateLogHostConfiguration( Guid id, long rowVersion, Guid host, DateTime timestamp, boolean finest, boolean finer, boolean fine, boolean info, boolean notice, boolean warn, boolean error, boolean severe, boolean critical, boolean alert, boolean fatal, boolean emergency ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LogHostConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, host);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setBoolean(5, finest);
            callableStatement.setBoolean(6, finer);
            callableStatement.setBoolean(7, fine);
            callableStatement.setBoolean(8, info);
            callableStatement.setBoolean(9, notice);
            callableStatement.setBoolean(10, warn);
            callableStatement.setBoolean(11, error);
            callableStatement.setBoolean(12, severe);
            callableStatement.setBoolean(13, critical);
            callableStatement.setBoolean(14, alert);
            callableStatement.setBoolean(15, fatal);
            callableStatement.setBoolean(16, emergency);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLogHostConfiguration( LogHostConfigurationObject logHostConfigurationObject ) throws SQLException {
        Guid id = logHostConfigurationObject.getId();
        long rowVersion = logHostConfigurationObject.getRowVersion();
        Guid host = logHostConfigurationObject.getHost();
        DateTime timestamp = logHostConfigurationObject.getTimestamp();
        boolean finest = logHostConfigurationObject.getFinest();
        boolean finer = logHostConfigurationObject.getFiner();
        boolean fine = logHostConfigurationObject.getFine();
        boolean info = logHostConfigurationObject.getInfo();
        boolean notice = logHostConfigurationObject.getNotice();
        boolean warn = logHostConfigurationObject.getWarn();
        boolean error = logHostConfigurationObject.getError();
        boolean severe = logHostConfigurationObject.getSevere();
        boolean critical = logHostConfigurationObject.getCritical();
        boolean alert = logHostConfigurationObject.getAlert();
        boolean fatal = logHostConfigurationObject.getFatal();
        boolean emergency = logHostConfigurationObject.getEmergency();
        var result = updateLogHostConfiguration( id, rowVersion, host, timestamp, finest, finer, fine, info, notice, warn, error, severe, critical, alert, fatal, emergency );
        if( result.isSuccess( ) ) {
            logHostConfigurationObject.setRowVersion(result.getRowVersion());
            logHostConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLogHostConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LogHostConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLogHostConfiguration( LogHostConfigurationObject logHostConfigurationObject ) throws SQLException {
        var id = logHostConfigurationObject.getId( );
        var rowVersion = logHostConfigurationObject.getRowVersion();
        var result = deleteLogHostConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLogLocation( Guid id, String fileName, int lineNumber, String namespace, String className, String methodName ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LogLocationInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, fileName);
            callableStatement.setInt32(3, lineNumber);
            callableStatement.setString(4, namespace);
            callableStatement.setString(5, className);
            callableStatement.setString(6, methodName);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLogLocation( LogLocationObject logLocationObject ) throws SQLException {
        Guid id = logLocationObject.getId( );
        String fileName = logLocationObject.getFileName( );
        int lineNumber = logLocationObject.getLineNumber( );
        String namespace = logLocationObject.getNamespace( );
        String className = logLocationObject.getClassName( );
        String methodName = logLocationObject.getMethodName( );
        var result = insertLogLocation( id, fileName, lineNumber, namespace, className, methodName );
        if( result.isSuccess() ) {
            logLocationObject.setId(result.getId());
            logLocationObject.setRowVersion(0);
            logLocationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateLogLocation( Guid id, long rowVersion, String fileName, int lineNumber, String namespace, String className, String methodName ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LogLocationUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, fileName);
            callableStatement.setInt32(4, lineNumber);
            callableStatement.setString(5, namespace);
            callableStatement.setString(6, className);
            callableStatement.setString(7, methodName);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLogLocation( LogLocationObject logLocationObject ) throws SQLException {
        Guid id = logLocationObject.getId();
        long rowVersion = logLocationObject.getRowVersion();
        String fileName = logLocationObject.getFileName();
        int lineNumber = logLocationObject.getLineNumber();
        String namespace = logLocationObject.getNamespace();
        String className = logLocationObject.getClassName();
        String methodName = logLocationObject.getMethodName();
        var result = updateLogLocation( id, rowVersion, fileName, lineNumber, namespace, className, methodName );
        if( result.isSuccess( ) ) {
            logLocationObject.setRowVersion(result.getRowVersion());
            logLocationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLogLocation( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LogLocationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLogLocation( LogLocationObject logLocationObject ) throws SQLException {
        var id = logLocationObject.getId( );
        var rowVersion = logLocationObject.getRowVersion();
        var result = deleteLogLocation( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLogProcess( Guid id, Guid application, Guid host, DateTime started, DateTime stopped, long processId, String path, String identity ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LogProcessInsert(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, application);
            callableStatement.setNullableGuid(3, host);
            callableStatement.setLongFromDateTime(4, started);
            callableStatement.setLongFromNullableDateTime(5, stopped);
            callableStatement.setInt64(6, processId);
            callableStatement.setString(7, path);
            callableStatement.setString(8, identity);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1LogProcess( Guid id, Guid application, DateTime started, DateTime stopped, long processId, String path, String identity ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LogProcessInsert1(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, application);
            callableStatement.setLongFromDateTime(3, started);
            callableStatement.setLongFromNullableDateTime(4, stopped);
            callableStatement.setInt64(5, processId);
            callableStatement.setString(6, path);
            callableStatement.setString(7, identity);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLogProcess( LogProcessObject logProcessObject ) throws SQLException {
        Guid id = logProcessObject.getId( );
        Guid application = logProcessObject.getApplication( );
        Guid host = logProcessObject.getHost( );
        DateTime started = logProcessObject.getStarted( );
        DateTime stopped = logProcessObject.getStopped( );
        long processId = logProcessObject.getProcessId( );
        String path = logProcessObject.getPath( );
        String identity = logProcessObject.getIdentity( );
        var result = insertLogProcess( id, application, host, started, stopped, processId, path, identity );
        if( result.isSuccess() ) {
            logProcessObject.setId(result.getId());
            logProcessObject.setRowVersion(0);
            logProcessObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1LogProcess( LogProcessObject logProcessObject ) throws SQLException {
        Guid id = logProcessObject.getId( );
        Guid application = logProcessObject.getApplication( );
        DateTime started = logProcessObject.getStarted( );
        DateTime stopped = logProcessObject.getStopped( );
        long processId = logProcessObject.getProcessId( );
        String path = logProcessObject.getPath( );
        String identity = logProcessObject.getIdentity( );
        var result = insert1LogProcess( id, application, started, stopped, processId, path, identity );
        if( result.isSuccess( ) ) {
            logProcessObject.setId( result.getId( ) );
            logProcessObject.setRowVersion(0);
            logProcessObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateLogProcess( Guid id, long rowVersion, Guid application, Guid host, DateTime started, DateTime stopped, long processId, String path, String identity ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LogProcessUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, application);
            callableStatement.setNullableGuid(4, host);
            callableStatement.setLongFromDateTime(5, started);
            callableStatement.setLongFromNullableDateTime(6, stopped);
            callableStatement.setInt64(7, processId);
            callableStatement.setString(8, path);
            callableStatement.setString(9, identity);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1LogProcess( Guid id, long rowVersion, Guid application, DateTime started, DateTime stopped, long processId, String path, String identity ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LogProcessUpdate1(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, application);
            callableStatement.setLongFromDateTime(4, started);
            callableStatement.setLongFromNullableDateTime(5, stopped);
            callableStatement.setInt64(6, processId);
            callableStatement.setString(7, path);
            callableStatement.setString(8, identity);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2LogProcess( Guid id, long rowVersion, Guid host ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LogProcessUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, host);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLogProcess( LogProcessObject logProcessObject ) throws SQLException {
        Guid id = logProcessObject.getId();
        long rowVersion = logProcessObject.getRowVersion();
        Guid application = logProcessObject.getApplication();
        Guid host = logProcessObject.getHost();
        DateTime started = logProcessObject.getStarted();
        DateTime stopped = logProcessObject.getStopped();
        long processId = logProcessObject.getProcessId();
        String path = logProcessObject.getPath();
        String identity = logProcessObject.getIdentity();
        var result = updateLogProcess( id, rowVersion, application, host, started, stopped, processId, path, identity );
        if( result.isSuccess( ) ) {
            logProcessObject.setRowVersion(result.getRowVersion());
            logProcessObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1LogProcess( LogProcessObject logProcessObject ) throws SQLException {
        Guid id = logProcessObject.getId();
        long rowVersion = logProcessObject.getRowVersion();
        Guid application = logProcessObject.getApplication();
        DateTime started = logProcessObject.getStarted();
        DateTime stopped = logProcessObject.getStopped();
        long processId = logProcessObject.getProcessId();
        String path = logProcessObject.getPath();
        String identity = logProcessObject.getIdentity();
        var result = update1LogProcess( id, rowVersion, application, started, stopped, processId, path, identity );
        if( result.isSuccess( ) ) {
            logProcessObject.setRowVersion(result.getRowVersion());
            logProcessObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2LogProcess( LogProcessObject logProcessObject ) throws SQLException {
        Guid id = logProcessObject.getId();
        long rowVersion = logProcessObject.getRowVersion();
        Guid host = logProcessObject.getHost();
        var result = update2LogProcess( id, rowVersion, host );
        if( result.isSuccess( ) ) {
            logProcessObject.setRowVersion(result.getRowVersion());
            logProcessObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLogProcess( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LogProcessDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLogProcess( LogProcessObject logProcessObject ) throws SQLException {
        var id = logProcessObject.getId( );
        var rowVersion = logProcessObject.getRowVersion();
        var result = deleteLogProcess( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLogRecord( Guid id, Guid thread, long sequenceNumber, int level, DateTime timestamp, int depth, Guid location, String message, String exceptionString, byte[] propertiesData ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LogRecordInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, thread);
            callableStatement.setInt64(3, sequenceNumber);
            callableStatement.setInt32(4, level);
            callableStatement.setLongFromDateTime(5, timestamp);
            callableStatement.setInt32(6, depth);
            callableStatement.setGuid(7, location);
            callableStatement.setString(8, message);
            callableStatement.setString(9, exceptionString);
            callableStatement.setBinary(10, propertiesData);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLogRecord( LogRecordObject logRecordObject ) throws SQLException {
        Guid id = logRecordObject.getId( );
        Guid thread = logRecordObject.getThread( );
        long sequenceNumber = logRecordObject.getSequenceNumber( );
        int level = logRecordObject.getLevel( );
        DateTime timestamp = logRecordObject.getTimestamp( );
        int depth = logRecordObject.getDepth( );
        Guid location = logRecordObject.getLocation( );
        String message = logRecordObject.getMessage( );
        String exceptionString = logRecordObject.getExceptionString( );
        byte[] propertiesData = logRecordObject.getPropertiesData( );
        var result = insertLogRecord( id, thread, sequenceNumber, level, timestamp, depth, location, message, exceptionString, propertiesData );
        if( result.isSuccess() ) {
            logRecordObject.setId(result.getId());
            logRecordObject.setRowVersion(0);
            logRecordObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateLogRecord( Guid id, long rowVersion, Guid thread, long sequenceNumber, int level, DateTime timestamp, int depth, Guid location, String message, String exceptionString, byte[] propertiesData ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LogRecordUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, thread);
            callableStatement.setInt64(4, sequenceNumber);
            callableStatement.setInt32(5, level);
            callableStatement.setLongFromDateTime(6, timestamp);
            callableStatement.setInt32(7, depth);
            callableStatement.setGuid(8, location);
            callableStatement.setString(9, message);
            callableStatement.setString(10, exceptionString);
            callableStatement.setBinary(11, propertiesData);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLogRecord( LogRecordObject logRecordObject ) throws SQLException {
        Guid id = logRecordObject.getId();
        long rowVersion = logRecordObject.getRowVersion();
        Guid thread = logRecordObject.getThread();
        long sequenceNumber = logRecordObject.getSequenceNumber();
        int level = logRecordObject.getLevel();
        DateTime timestamp = logRecordObject.getTimestamp();
        int depth = logRecordObject.getDepth();
        Guid location = logRecordObject.getLocation();
        String message = logRecordObject.getMessage();
        String exceptionString = logRecordObject.getExceptionString();
        byte[] propertiesData = logRecordObject.getPropertiesData();
        var result = updateLogRecord( id, rowVersion, thread, sequenceNumber, level, timestamp, depth, location, message, exceptionString, propertiesData );
        if( result.isSuccess( ) ) {
            logRecordObject.setRowVersion(result.getRowVersion());
            logRecordObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLogRecord( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LogRecordDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLogRecord( LogRecordObject logRecordObject ) throws SQLException {
        var id = logRecordObject.getId( );
        var rowVersion = logRecordObject.getRowVersion();
        var result = deleteLogRecord( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLogThread( Guid id, Guid process, DateTime started, DateTime stopped, long threadId, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LogThreadInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, process);
            callableStatement.setLongFromDateTime(3, started);
            callableStatement.setLongFromNullableDateTime(4, stopped);
            callableStatement.setInt64(5, threadId);
            callableStatement.setString(6, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLogThread( LogThreadObject logThreadObject ) throws SQLException {
        Guid id = logThreadObject.getId( );
        Guid process = logThreadObject.getProcess( );
        DateTime started = logThreadObject.getStarted( );
        DateTime stopped = logThreadObject.getStopped( );
        long threadId = logThreadObject.getThreadId( );
        String name = logThreadObject.getName( );
        var result = insertLogThread( id, process, started, stopped, threadId, name );
        if( result.isSuccess() ) {
            logThreadObject.setId(result.getId());
            logThreadObject.setRowVersion(0);
            logThreadObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateLogThread( Guid id, long rowVersion, Guid process, DateTime started, DateTime stopped, long threadId, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LogThreadUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, process);
            callableStatement.setLongFromDateTime(4, started);
            callableStatement.setLongFromNullableDateTime(5, stopped);
            callableStatement.setInt64(6, threadId);
            callableStatement.setString(7, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLogThread( LogThreadObject logThreadObject ) throws SQLException {
        Guid id = logThreadObject.getId();
        long rowVersion = logThreadObject.getRowVersion();
        Guid process = logThreadObject.getProcess();
        DateTime started = logThreadObject.getStarted();
        DateTime stopped = logThreadObject.getStopped();
        long threadId = logThreadObject.getThreadId();
        String name = logThreadObject.getName();
        var result = updateLogThread( id, rowVersion, process, started, stopped, threadId, name );
        if( result.isSuccess( ) ) {
            logThreadObject.setRowVersion(result.getRowVersion());
            logThreadObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLogThread( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LogThreadDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLogThread( LogThreadObject logThreadObject ) throws SQLException {
        var id = logThreadObject.getId( );
        var rowVersion = logThreadObject.getRowVersion();
        var result = deleteLogThread( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertLogTraceEntry( Guid id, Guid thread, long sequenceNumber, Guid location, int depth, DateTime entered, DateTime ended ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call LogTraceEntryInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, thread);
            callableStatement.setInt64(3, sequenceNumber);
            callableStatement.setGuid(4, location);
            callableStatement.setInt32(5, depth);
            callableStatement.setLongFromDateTime(6, entered);
            callableStatement.setLongFromNullableDateTime(7, ended);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertLogTraceEntry( LogTraceEntryObject logTraceEntryObject ) throws SQLException {
        Guid id = logTraceEntryObject.getId( );
        Guid thread = logTraceEntryObject.getThread( );
        long sequenceNumber = logTraceEntryObject.getSequenceNumber( );
        Guid location = logTraceEntryObject.getLocation( );
        int depth = logTraceEntryObject.getDepth( );
        DateTime entered = logTraceEntryObject.getEntered( );
        DateTime ended = logTraceEntryObject.getEnded( );
        var result = insertLogTraceEntry( id, thread, sequenceNumber, location, depth, entered, ended );
        if( result.isSuccess() ) {
            logTraceEntryObject.setId(result.getId());
            logTraceEntryObject.setRowVersion(0);
            logTraceEntryObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateLogTraceEntry( Guid id, long rowVersion, Guid thread, long sequenceNumber, Guid location, int depth, DateTime entered, DateTime ended ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call LogTraceEntryUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, thread);
            callableStatement.setInt64(4, sequenceNumber);
            callableStatement.setGuid(5, location);
            callableStatement.setInt32(6, depth);
            callableStatement.setLongFromDateTime(7, entered);
            callableStatement.setLongFromNullableDateTime(8, ended);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateLogTraceEntry( LogTraceEntryObject logTraceEntryObject ) throws SQLException {
        Guid id = logTraceEntryObject.getId();
        long rowVersion = logTraceEntryObject.getRowVersion();
        Guid thread = logTraceEntryObject.getThread();
        long sequenceNumber = logTraceEntryObject.getSequenceNumber();
        Guid location = logTraceEntryObject.getLocation();
        int depth = logTraceEntryObject.getDepth();
        DateTime entered = logTraceEntryObject.getEntered();
        DateTime ended = logTraceEntryObject.getEnded();
        var result = updateLogTraceEntry( id, rowVersion, thread, sequenceNumber, location, depth, entered, ended );
        if( result.isSuccess( ) ) {
            logTraceEntryObject.setRowVersion(result.getRowVersion());
            logTraceEntryObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteLogTraceEntry( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call LogTraceEntryDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteLogTraceEntry( LogTraceEntryObject logTraceEntryObject ) throws SQLException {
        var id = logTraceEntryObject.getId( );
        var rowVersion = logTraceEntryObject.getRowVersion();
        var result = deleteLogTraceEntry( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertMapElement( Guid id, Guid item, int elementType, double latitude, double longitude, double angle, double left, double top, double width, double height, String label, byte[] data ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MapElementInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, item);
            callableStatement.setInt32(3, elementType);
            callableStatement.setDouble(4, latitude);
            callableStatement.setDouble(5, longitude);
            callableStatement.setDouble(6, angle);
            callableStatement.setDouble(7, left);
            callableStatement.setDouble(8, top);
            callableStatement.setDouble(9, width);
            callableStatement.setDouble(10, height);
            callableStatement.setString(11, label);
            callableStatement.setBinary(12, data);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertMapElement( MapElementObject mapElementObject ) throws SQLException {
        Guid id = mapElementObject.getId( );
        Guid item = mapElementObject.getItem( );
        int elementType = mapElementObject.getElementType( );
        double latitude = mapElementObject.getLatitude( );
        double longitude = mapElementObject.getLongitude( );
        double angle = mapElementObject.getAngle( );
        double left = mapElementObject.getLeft( );
        double top = mapElementObject.getTop( );
        double width = mapElementObject.getWidth( );
        double height = mapElementObject.getHeight( );
        String label = mapElementObject.getLabel( );
        byte[] data = mapElementObject.getData( );
        var result = insertMapElement( id, item, elementType, latitude, longitude, angle, left, top, width, height, label, data );
        if( result.isSuccess() ) {
            mapElementObject.setId(result.getId());
            mapElementObject.setRowVersion(0);
            mapElementObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateMapElement( Guid id, long rowVersion, Guid item, int elementType, double latitude, double longitude, double angle, double left, double top, double width, double height, String label, byte[] data ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MapElementUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, item);
            callableStatement.setInt32(4, elementType);
            callableStatement.setDouble(5, latitude);
            callableStatement.setDouble(6, longitude);
            callableStatement.setDouble(7, angle);
            callableStatement.setDouble(8, left);
            callableStatement.setDouble(9, top);
            callableStatement.setDouble(10, width);
            callableStatement.setDouble(11, height);
            callableStatement.setString(12, label);
            callableStatement.setBinary(13, data);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateMapElement( MapElementObject mapElementObject ) throws SQLException {
        Guid id = mapElementObject.getId();
        long rowVersion = mapElementObject.getRowVersion();
        Guid item = mapElementObject.getItem();
        int elementType = mapElementObject.getElementType();
        double latitude = mapElementObject.getLatitude();
        double longitude = mapElementObject.getLongitude();
        double angle = mapElementObject.getAngle();
        double left = mapElementObject.getLeft();
        double top = mapElementObject.getTop();
        double width = mapElementObject.getWidth();
        double height = mapElementObject.getHeight();
        String label = mapElementObject.getLabel();
        byte[] data = mapElementObject.getData();
        var result = updateMapElement( id, rowVersion, item, elementType, latitude, longitude, angle, left, top, width, height, label, data );
        if( result.isSuccess( ) ) {
            mapElementObject.setRowVersion(result.getRowVersion());
            mapElementObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteMapElement( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call MapElementDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteMapElement( MapElementObject mapElementObject ) throws SQLException {
        var id = mapElementObject.getId( );
        var rowVersion = mapElementObject.getRowVersion();
        var result = deleteMapElement( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertMapInfo( Guid id, int scale, double latitude, double longitude, double northWestLatitude, double northWestLongitude, double southEastLatitude, double southEastLongitude, byte[] image ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MapInfoInsert(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setInt32(2, scale);
            callableStatement.setDouble(3, latitude);
            callableStatement.setDouble(4, longitude);
            callableStatement.setDouble(5, northWestLatitude);
            callableStatement.setDouble(6, northWestLongitude);
            callableStatement.setDouble(7, southEastLatitude);
            callableStatement.setDouble(8, southEastLongitude);
            callableStatement.setBinary(9, image);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertMapInfo( MapInfoObject mapInfoObject ) throws SQLException {
        Guid id = mapInfoObject.getId( );
        int scale = mapInfoObject.getScale( );
        double latitude = mapInfoObject.getLatitude( );
        double longitude = mapInfoObject.getLongitude( );
        double northWestLatitude = mapInfoObject.getNorthWestLatitude( );
        double northWestLongitude = mapInfoObject.getNorthWestLongitude( );
        double southEastLatitude = mapInfoObject.getSouthEastLatitude( );
        double southEastLongitude = mapInfoObject.getSouthEastLongitude( );
        byte[] image = mapInfoObject.getImage( );
        var result = insertMapInfo( id, scale, latitude, longitude, northWestLatitude, northWestLongitude, southEastLatitude, southEastLongitude, image );
        if( result.isSuccess() ) {
            mapInfoObject.setId(result.getId());
            mapInfoObject.setRowVersion(0);
            mapInfoObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateMapInfo( Guid id, long rowVersion, int scale, double latitude, double longitude, double northWestLatitude, double northWestLongitude, double southEastLatitude, double southEastLongitude, byte[] image ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MapInfoUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setInt32(3, scale);
            callableStatement.setDouble(4, latitude);
            callableStatement.setDouble(5, longitude);
            callableStatement.setDouble(6, northWestLatitude);
            callableStatement.setDouble(7, northWestLongitude);
            callableStatement.setDouble(8, southEastLatitude);
            callableStatement.setDouble(9, southEastLongitude);
            callableStatement.setBinary(10, image);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateMapInfo( MapInfoObject mapInfoObject ) throws SQLException {
        Guid id = mapInfoObject.getId();
        long rowVersion = mapInfoObject.getRowVersion();
        int scale = mapInfoObject.getScale();
        double latitude = mapInfoObject.getLatitude();
        double longitude = mapInfoObject.getLongitude();
        double northWestLatitude = mapInfoObject.getNorthWestLatitude();
        double northWestLongitude = mapInfoObject.getNorthWestLongitude();
        double southEastLatitude = mapInfoObject.getSouthEastLatitude();
        double southEastLongitude = mapInfoObject.getSouthEastLongitude();
        byte[] image = mapInfoObject.getImage();
        var result = updateMapInfo( id, rowVersion, scale, latitude, longitude, northWestLatitude, northWestLongitude, southEastLatitude, southEastLongitude, image );
        if( result.isSuccess( ) ) {
            mapInfoObject.setRowVersion(result.getRowVersion());
            mapInfoObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteMapInfo( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call MapInfoDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteMapInfo( MapInfoObject mapInfoObject ) throws SQLException {
        var id = mapInfoObject.getId( );
        var rowVersion = mapInfoObject.getRowVersion();
        var result = deleteMapInfo( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertMapServiceOptions( Guid id, DateTime timestamp, String ipAddress, int port, double imageScaleFactorX, double imageOffsetX, double imageScaleFactorY, double imageOffsetY ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MapServiceOptionsInsert(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setLongFromDateTime(2, timestamp);
            callableStatement.setString(3, ipAddress);
            callableStatement.setInt32(4, port);
            callableStatement.setDouble(5, imageScaleFactorX);
            callableStatement.setDouble(6, imageOffsetX);
            callableStatement.setDouble(7, imageScaleFactorY);
            callableStatement.setDouble(8, imageOffsetY);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertMapServiceOptions( MapServiceOptionsObject mapServiceOptionsObject ) throws SQLException {
        Guid id = mapServiceOptionsObject.getId( );
        DateTime timestamp = mapServiceOptionsObject.getTimestamp( );
        String ipAddress = mapServiceOptionsObject.getIpAddress( );
        int port = mapServiceOptionsObject.getPort( );
        double imageScaleFactorX = mapServiceOptionsObject.getImageScaleFactorX( );
        double imageOffsetX = mapServiceOptionsObject.getImageOffsetX( );
        double imageScaleFactorY = mapServiceOptionsObject.getImageScaleFactorY( );
        double imageOffsetY = mapServiceOptionsObject.getImageOffsetY( );
        var result = insertMapServiceOptions( id, timestamp, ipAddress, port, imageScaleFactorX, imageOffsetX, imageScaleFactorY, imageOffsetY );
        if( result.isSuccess() ) {
            mapServiceOptionsObject.setId(result.getId());
            mapServiceOptionsObject.setRowVersion(0);
            mapServiceOptionsObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateMapServiceOptions( Guid id, long rowVersion, DateTime timestamp, String ipAddress, int port, double imageScaleFactorX, double imageOffsetX, double imageScaleFactorY, double imageOffsetY ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MapServiceOptionsUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setString(4, ipAddress);
            callableStatement.setInt32(5, port);
            callableStatement.setDouble(6, imageScaleFactorX);
            callableStatement.setDouble(7, imageOffsetX);
            callableStatement.setDouble(8, imageScaleFactorY);
            callableStatement.setDouble(9, imageOffsetY);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateMapServiceOptions( MapServiceOptionsObject mapServiceOptionsObject ) throws SQLException {
        Guid id = mapServiceOptionsObject.getId();
        long rowVersion = mapServiceOptionsObject.getRowVersion();
        DateTime timestamp = mapServiceOptionsObject.getTimestamp();
        String ipAddress = mapServiceOptionsObject.getIpAddress();
        int port = mapServiceOptionsObject.getPort();
        double imageScaleFactorX = mapServiceOptionsObject.getImageScaleFactorX();
        double imageOffsetX = mapServiceOptionsObject.getImageOffsetX();
        double imageScaleFactorY = mapServiceOptionsObject.getImageScaleFactorY();
        double imageOffsetY = mapServiceOptionsObject.getImageOffsetY();
        var result = updateMapServiceOptions( id, rowVersion, timestamp, ipAddress, port, imageScaleFactorX, imageOffsetX, imageScaleFactorY, imageOffsetY );
        if( result.isSuccess( ) ) {
            mapServiceOptionsObject.setRowVersion(result.getRowVersion());
            mapServiceOptionsObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteMapServiceOptions( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call MapServiceOptionsDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteMapServiceOptions( MapServiceOptionsObject mapServiceOptionsObject ) throws SQLException {
        var id = mapServiceOptionsObject.getId( );
        var rowVersion = mapServiceOptionsObject.getRowVersion();
        var result = deleteMapServiceOptions( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertMaritimeIdentificationDigits( Guid id, int code, Guid country ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MaritimeIdentificationDigitsInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setInt32(2, code);
            callableStatement.setGuid(3, country);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertMaritimeIdentificationDigits( MaritimeIdentificationDigitsObject maritimeIdentificationDigitsObject ) throws SQLException {
        Guid id = maritimeIdentificationDigitsObject.getId( );
        int code = maritimeIdentificationDigitsObject.getCode( );
        Guid country = maritimeIdentificationDigitsObject.getCountry( );
        var result = insertMaritimeIdentificationDigits( id, code, country );
        if( result.isSuccess() ) {
            maritimeIdentificationDigitsObject.setId(result.getId());
            maritimeIdentificationDigitsObject.setRowVersion(0);
            maritimeIdentificationDigitsObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateMaritimeIdentificationDigits( Guid id, long rowVersion, int code, Guid country ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MaritimeIdentificationDigitsUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setInt32(3, code);
            callableStatement.setGuid(4, country);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateMaritimeIdentificationDigits( MaritimeIdentificationDigitsObject maritimeIdentificationDigitsObject ) throws SQLException {
        Guid id = maritimeIdentificationDigitsObject.getId();
        long rowVersion = maritimeIdentificationDigitsObject.getRowVersion();
        int code = maritimeIdentificationDigitsObject.getCode();
        Guid country = maritimeIdentificationDigitsObject.getCountry();
        var result = updateMaritimeIdentificationDigits( id, rowVersion, code, country );
        if( result.isSuccess( ) ) {
            maritimeIdentificationDigitsObject.setRowVersion(result.getRowVersion());
            maritimeIdentificationDigitsObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteMaritimeIdentificationDigits( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call MaritimeIdentificationDigitsDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteMaritimeIdentificationDigits( MaritimeIdentificationDigitsObject maritimeIdentificationDigitsObject ) throws SQLException {
        var id = maritimeIdentificationDigitsObject.getId( );
        var rowVersion = maritimeIdentificationDigitsObject.getRowVersion();
        var result = deleteMaritimeIdentificationDigits( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertMediaProxySession( Guid id, Guid service, String name, Guid enabledTimeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MediaProxySessionInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, service);
            callableStatement.setString(3, name);
            callableStatement.setNullableGuid(4, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1MediaProxySession( Guid id, Guid service, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MediaProxySessionInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, service);
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertMediaProxySession( MediaProxySessionObject mediaProxySessionObject ) throws SQLException {
        Guid id = mediaProxySessionObject.getId( );
        Guid service = mediaProxySessionObject.getService( );
        String name = mediaProxySessionObject.getName( );
        Guid enabledTimeseries = mediaProxySessionObject.getEnabledTimeseries( );
        var result = insertMediaProxySession( id, service, name, enabledTimeseries );
        if( result.isSuccess() ) {
            mediaProxySessionObject.setId(result.getId());
            mediaProxySessionObject.setRowVersion(0);
            mediaProxySessionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1MediaProxySession( MediaProxySessionObject mediaProxySessionObject ) throws SQLException {
        Guid id = mediaProxySessionObject.getId( );
        Guid service = mediaProxySessionObject.getService( );
        String name = mediaProxySessionObject.getName( );
        var result = insert1MediaProxySession( id, service, name );
        if( result.isSuccess( ) ) {
            mediaProxySessionObject.setId( result.getId( ) );
            mediaProxySessionObject.setRowVersion(0);
            mediaProxySessionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateMediaProxySession( Guid id, long rowVersion, Guid service, String name, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaProxySessionUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, service);
            callableStatement.setString(4, name);
            callableStatement.setNullableGuid(5, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1MediaProxySession( Guid id, long rowVersion, Guid service, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaProxySessionUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, service);
            callableStatement.setString(4, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2MediaProxySession( Guid id, long rowVersion, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaProxySessionUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateMediaProxySession( MediaProxySessionObject mediaProxySessionObject ) throws SQLException {
        Guid id = mediaProxySessionObject.getId();
        long rowVersion = mediaProxySessionObject.getRowVersion();
        Guid service = mediaProxySessionObject.getService();
        String name = mediaProxySessionObject.getName();
        Guid enabledTimeseries = mediaProxySessionObject.getEnabledTimeseries();
        var result = updateMediaProxySession( id, rowVersion, service, name, enabledTimeseries );
        if( result.isSuccess( ) ) {
            mediaProxySessionObject.setRowVersion(result.getRowVersion());
            mediaProxySessionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1MediaProxySession( MediaProxySessionObject mediaProxySessionObject ) throws SQLException {
        Guid id = mediaProxySessionObject.getId();
        long rowVersion = mediaProxySessionObject.getRowVersion();
        Guid service = mediaProxySessionObject.getService();
        String name = mediaProxySessionObject.getName();
        var result = update1MediaProxySession( id, rowVersion, service, name );
        if( result.isSuccess( ) ) {
            mediaProxySessionObject.setRowVersion(result.getRowVersion());
            mediaProxySessionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2MediaProxySession( MediaProxySessionObject mediaProxySessionObject ) throws SQLException {
        Guid id = mediaProxySessionObject.getId();
        long rowVersion = mediaProxySessionObject.getRowVersion();
        Guid enabledTimeseries = mediaProxySessionObject.getEnabledTimeseries();
        var result = update2MediaProxySession( id, rowVersion, enabledTimeseries );
        if( result.isSuccess( ) ) {
            mediaProxySessionObject.setRowVersion(result.getRowVersion());
            mediaProxySessionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteMediaProxySession( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call MediaProxySessionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteMediaProxySession( MediaProxySessionObject mediaProxySessionObject ) throws SQLException {
        var id = mediaProxySessionObject.getId( );
        var rowVersion = mediaProxySessionObject.getRowVersion();
        var result = deleteMediaProxySession( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertMediaProxySessionFile( Guid id, Guid proxySession, DateTime timestamp, String streamName ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MediaProxySessionFileInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, proxySession);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setString(4, streamName);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertMediaProxySessionFile( MediaProxySessionFileObject mediaProxySessionFileObject ) throws SQLException {
        Guid id = mediaProxySessionFileObject.getId( );
        Guid proxySession = mediaProxySessionFileObject.getProxySession( );
        DateTime timestamp = mediaProxySessionFileObject.getTimestamp( );
        String streamName = mediaProxySessionFileObject.getStreamName( );
        var result = insertMediaProxySessionFile( id, proxySession, timestamp, streamName );
        if( result.isSuccess() ) {
            mediaProxySessionFileObject.setId(result.getId());
            mediaProxySessionFileObject.setRowVersion(0);
            mediaProxySessionFileObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateMediaProxySessionFile( Guid id, long rowVersion, Guid proxySession, DateTime timestamp, String streamName ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaProxySessionFileUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, proxySession);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setString(5, streamName);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateMediaProxySessionFile( MediaProxySessionFileObject mediaProxySessionFileObject ) throws SQLException {
        Guid id = mediaProxySessionFileObject.getId();
        long rowVersion = mediaProxySessionFileObject.getRowVersion();
        Guid proxySession = mediaProxySessionFileObject.getProxySession();
        DateTime timestamp = mediaProxySessionFileObject.getTimestamp();
        String streamName = mediaProxySessionFileObject.getStreamName();
        var result = updateMediaProxySessionFile( id, rowVersion, proxySession, timestamp, streamName );
        if( result.isSuccess( ) ) {
            mediaProxySessionFileObject.setRowVersion(result.getRowVersion());
            mediaProxySessionFileObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteMediaProxySessionFile( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call MediaProxySessionFileDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteMediaProxySessionFile( MediaProxySessionFileObject mediaProxySessionFileObject ) throws SQLException {
        var id = mediaProxySessionFileObject.getId( );
        var rowVersion = mediaProxySessionFileObject.getRowVersion();
        var result = deleteMediaProxySessionFile( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertMediaProxySessionOptions( Guid id, Guid proxySession, DateTime timestamp, String sourceStreamUrl, String streamName, int mode, int tunnelOverHTTPPortNumber, String username, String password, int recorderPortNumber, int sessionType, TimeSpan maxFileTime, TimeSpan maxFileRetention, String videoDirectory ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MediaProxySessionOptionsInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, proxySession);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setString(4, sourceStreamUrl);
            callableStatement.setString(5, streamName);
            callableStatement.setInt32(6, mode);
            callableStatement.setInt32(7, tunnelOverHTTPPortNumber);
            callableStatement.setString(8, username);
            callableStatement.setString(9, password);
            callableStatement.setInt32(10, recorderPortNumber);
            callableStatement.setInt32(11, sessionType);
            callableStatement.setTimeSpan(12, maxFileTime);
            callableStatement.setTimeSpan(13, maxFileRetention);
            callableStatement.setString(14, videoDirectory);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertMediaProxySessionOptions( MediaProxySessionOptionsObject mediaProxySessionOptionsObject ) throws SQLException {
        Guid id = mediaProxySessionOptionsObject.getId( );
        Guid proxySession = mediaProxySessionOptionsObject.getProxySession( );
        DateTime timestamp = mediaProxySessionOptionsObject.getTimestamp( );
        String sourceStreamUrl = mediaProxySessionOptionsObject.getSourceStreamUrl( );
        String streamName = mediaProxySessionOptionsObject.getStreamName( );
        int mode = mediaProxySessionOptionsObject.getMode( );
        int tunnelOverHTTPPortNumber = mediaProxySessionOptionsObject.getTunnelOverHTTPPortNumber( );
        String username = mediaProxySessionOptionsObject.getUsername( );
        String password = mediaProxySessionOptionsObject.getPassword( );
        int recorderPortNumber = mediaProxySessionOptionsObject.getRecorderPortNumber( );
        int sessionType = mediaProxySessionOptionsObject.getSessionType( );
        TimeSpan maxFileTime = mediaProxySessionOptionsObject.getMaxFileTime( );
        TimeSpan maxFileRetention = mediaProxySessionOptionsObject.getMaxFileRetention( );
        String videoDirectory = mediaProxySessionOptionsObject.getVideoDirectory( );
        var result = insertMediaProxySessionOptions( id, proxySession, timestamp, sourceStreamUrl, streamName, mode, tunnelOverHTTPPortNumber, username, password, recorderPortNumber, sessionType, maxFileTime, maxFileRetention, videoDirectory );
        if( result.isSuccess() ) {
            mediaProxySessionOptionsObject.setId(result.getId());
            mediaProxySessionOptionsObject.setRowVersion(0);
            mediaProxySessionOptionsObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateMediaProxySessionOptions( Guid id, long rowVersion, Guid proxySession, DateTime timestamp, String sourceStreamUrl, String streamName, int mode, int tunnelOverHTTPPortNumber, String username, String password, int recorderPortNumber, int sessionType, TimeSpan maxFileTime, TimeSpan maxFileRetention, String videoDirectory ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaProxySessionOptionsUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, proxySession);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setString(5, sourceStreamUrl);
            callableStatement.setString(6, streamName);
            callableStatement.setInt32(7, mode);
            callableStatement.setInt32(8, tunnelOverHTTPPortNumber);
            callableStatement.setString(9, username);
            callableStatement.setString(10, password);
            callableStatement.setInt32(11, recorderPortNumber);
            callableStatement.setInt32(12, sessionType);
            callableStatement.setTimeSpan(13, maxFileTime);
            callableStatement.setTimeSpan(14, maxFileRetention);
            callableStatement.setString(15, videoDirectory);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateMediaProxySessionOptions( MediaProxySessionOptionsObject mediaProxySessionOptionsObject ) throws SQLException {
        Guid id = mediaProxySessionOptionsObject.getId();
        long rowVersion = mediaProxySessionOptionsObject.getRowVersion();
        Guid proxySession = mediaProxySessionOptionsObject.getProxySession();
        DateTime timestamp = mediaProxySessionOptionsObject.getTimestamp();
        String sourceStreamUrl = mediaProxySessionOptionsObject.getSourceStreamUrl();
        String streamName = mediaProxySessionOptionsObject.getStreamName();
        int mode = mediaProxySessionOptionsObject.getMode();
        int tunnelOverHTTPPortNumber = mediaProxySessionOptionsObject.getTunnelOverHTTPPortNumber();
        String username = mediaProxySessionOptionsObject.getUsername();
        String password = mediaProxySessionOptionsObject.getPassword();
        int recorderPortNumber = mediaProxySessionOptionsObject.getRecorderPortNumber();
        int sessionType = mediaProxySessionOptionsObject.getSessionType();
        TimeSpan maxFileTime = mediaProxySessionOptionsObject.getMaxFileTime();
        TimeSpan maxFileRetention = mediaProxySessionOptionsObject.getMaxFileRetention();
        String videoDirectory = mediaProxySessionOptionsObject.getVideoDirectory();
        var result = updateMediaProxySessionOptions( id, rowVersion, proxySession, timestamp, sourceStreamUrl, streamName, mode, tunnelOverHTTPPortNumber, username, password, recorderPortNumber, sessionType, maxFileTime, maxFileRetention, videoDirectory );
        if( result.isSuccess( ) ) {
            mediaProxySessionOptionsObject.setRowVersion(result.getRowVersion());
            mediaProxySessionOptionsObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteMediaProxySessionOptions( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call MediaProxySessionOptionsDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteMediaProxySessionOptions( MediaProxySessionOptionsObject mediaProxySessionOptionsObject ) throws SQLException {
        var id = mediaProxySessionOptionsObject.getId( );
        var rowVersion = mediaProxySessionOptionsObject.getRowVersion();
        var result = deleteMediaProxySessionOptions( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertMediaService( Guid id, Guid enabledTimeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MediaServiceInsert(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1MediaService( Guid id ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MediaServiceInsert1(?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertMediaService( MediaServiceObject mediaServiceObject ) throws SQLException {
        Guid id = mediaServiceObject.getId( );
        Guid enabledTimeseries = mediaServiceObject.getEnabledTimeseries( );
        var result = insertMediaService( id, enabledTimeseries );
        if( result.isSuccess() ) {
            mediaServiceObject.setId(result.getId());
            mediaServiceObject.setRowVersion(0);
            mediaServiceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1MediaService( MediaServiceObject mediaServiceObject ) throws SQLException {
        Guid id = mediaServiceObject.getId( );
        var result = insert1MediaService( id );
        if( result.isSuccess( ) ) {
            mediaServiceObject.setId( result.getId( ) );
            mediaServiceObject.setRowVersion(0);
            mediaServiceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateMediaService( Guid id, long rowVersion, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaServiceUpdate(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1MediaService( Guid id, long rowVersion ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaServiceUpdate1(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2MediaService( Guid id, long rowVersion, Guid enabledTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaServiceUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, enabledTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateMediaService( MediaServiceObject mediaServiceObject ) throws SQLException {
        Guid id = mediaServiceObject.getId();
        long rowVersion = mediaServiceObject.getRowVersion();
        Guid enabledTimeseries = mediaServiceObject.getEnabledTimeseries();
        var result = updateMediaService( id, rowVersion, enabledTimeseries );
        if( result.isSuccess( ) ) {
            mediaServiceObject.setRowVersion(result.getRowVersion());
            mediaServiceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1MediaService( MediaServiceObject mediaServiceObject ) throws SQLException {
        Guid id = mediaServiceObject.getId();
        long rowVersion = mediaServiceObject.getRowVersion();
        var result = update1MediaService( id, rowVersion );
        if( result.isSuccess( ) ) {
            mediaServiceObject.setRowVersion(result.getRowVersion());
            mediaServiceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2MediaService( MediaServiceObject mediaServiceObject ) throws SQLException {
        Guid id = mediaServiceObject.getId();
        long rowVersion = mediaServiceObject.getRowVersion();
        Guid enabledTimeseries = mediaServiceObject.getEnabledTimeseries();
        var result = update2MediaService( id, rowVersion, enabledTimeseries );
        if( result.isSuccess( ) ) {
            mediaServiceObject.setRowVersion(result.getRowVersion());
            mediaServiceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteMediaService( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call MediaServiceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteMediaService( MediaServiceObject mediaServiceObject ) throws SQLException {
        var id = mediaServiceObject.getId( );
        var rowVersion = mediaServiceObject.getRowVersion();
        var result = deleteMediaService( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertMediaServiceOptions( Guid id, Guid mediaService, DateTime timestamp, int rtspPortNumber, int httpPortNumber ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MediaServiceOptionsInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, mediaService);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, rtspPortNumber);
            callableStatement.setInt32(5, httpPortNumber);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertMediaServiceOptions( MediaServiceOptionsObject mediaServiceOptionsObject ) throws SQLException {
        Guid id = mediaServiceOptionsObject.getId( );
        Guid mediaService = mediaServiceOptionsObject.getMediaService( );
        DateTime timestamp = mediaServiceOptionsObject.getTimestamp( );
        int rtspPortNumber = mediaServiceOptionsObject.getRtspPortNumber( );
        int httpPortNumber = mediaServiceOptionsObject.getHttpPortNumber( );
        var result = insertMediaServiceOptions( id, mediaService, timestamp, rtspPortNumber, httpPortNumber );
        if( result.isSuccess() ) {
            mediaServiceOptionsObject.setId(result.getId());
            mediaServiceOptionsObject.setRowVersion(0);
            mediaServiceOptionsObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateMediaServiceOptions( Guid id, long rowVersion, Guid mediaService, DateTime timestamp, int rtspPortNumber, int httpPortNumber ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaServiceOptionsUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, mediaService);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, rtspPortNumber);
            callableStatement.setInt32(6, httpPortNumber);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateMediaServiceOptions( MediaServiceOptionsObject mediaServiceOptionsObject ) throws SQLException {
        Guid id = mediaServiceOptionsObject.getId();
        long rowVersion = mediaServiceOptionsObject.getRowVersion();
        Guid mediaService = mediaServiceOptionsObject.getMediaService();
        DateTime timestamp = mediaServiceOptionsObject.getTimestamp();
        int rtspPortNumber = mediaServiceOptionsObject.getRtspPortNumber();
        int httpPortNumber = mediaServiceOptionsObject.getHttpPortNumber();
        var result = updateMediaServiceOptions( id, rowVersion, mediaService, timestamp, rtspPortNumber, httpPortNumber );
        if( result.isSuccess( ) ) {
            mediaServiceOptionsObject.setRowVersion(result.getRowVersion());
            mediaServiceOptionsObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteMediaServiceOptions( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call MediaServiceOptionsDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteMediaServiceOptions( MediaServiceOptionsObject mediaServiceOptionsObject ) throws SQLException {
        var id = mediaServiceOptionsObject.getId( );
        var rowVersion = mediaServiceOptionsObject.getRowVersion();
        var result = deleteMediaServiceOptions( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertElementType( Guid id, Guid namespace, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ElementTypeInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, namespace);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertElementType( ElementTypeObject elementTypeObject ) throws SQLException {
        Guid id = elementTypeObject.getId( );
        Guid namespace = elementTypeObject.getNamespace( );
        String name = elementTypeObject.getName( );
        String description = elementTypeObject.getDescription( );
        var result = insertElementType( id, namespace, name, description );
        if( result.isSuccess() ) {
            elementTypeObject.setId(result.getId());
            elementTypeObject.setRowVersion(0);
            elementTypeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateElementType( Guid id, long rowVersion, Guid namespace, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ElementTypeUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, namespace);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateElementType( ElementTypeObject elementTypeObject ) throws SQLException {
        Guid id = elementTypeObject.getId();
        long rowVersion = elementTypeObject.getRowVersion();
        Guid namespace = elementTypeObject.getNamespace();
        String name = elementTypeObject.getName();
        String description = elementTypeObject.getDescription();
        var result = updateElementType( id, rowVersion, namespace, name, description );
        if( result.isSuccess( ) ) {
            elementTypeObject.setRowVersion(result.getRowVersion());
            elementTypeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteElementType( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ElementTypeDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteElementType( ElementTypeObject elementTypeObject ) throws SQLException {
        var id = elementTypeObject.getId( );
        var rowVersion = elementTypeObject.getRowVersion();
        var result = deleteElementType( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertNamespace( Guid id, Guid namespace, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call NamespaceInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, namespace);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertNamespace( NamespaceObject namespaceObject ) throws SQLException {
        Guid id = namespaceObject.getId( );
        Guid namespace = namespaceObject.getNamespace( );
        String name = namespaceObject.getName( );
        String description = namespaceObject.getDescription( );
        var result = insertNamespace( id, namespace, name, description );
        if( result.isSuccess() ) {
            namespaceObject.setId(result.getId());
            namespaceObject.setRowVersion(0);
            namespaceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateNamespace( Guid id, long rowVersion, Guid namespace, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call NamespaceUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, namespace);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateNamespace( NamespaceObject namespaceObject ) throws SQLException {
        Guid id = namespaceObject.getId();
        long rowVersion = namespaceObject.getRowVersion();
        Guid namespace = namespaceObject.getNamespace();
        String name = namespaceObject.getName();
        String description = namespaceObject.getDescription();
        var result = updateNamespace( id, rowVersion, namespace, name, description );
        if( result.isSuccess( ) ) {
            namespaceObject.setRowVersion(result.getRowVersion());
            namespaceObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteNamespace( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call NamespaceDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteNamespace( NamespaceObject namespaceObject ) throws SQLException {
        var id = namespaceObject.getId( );
        var rowVersion = namespaceObject.getRowVersion();
        var result = deleteNamespace( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertOilSpill( Guid id, Guid oilSpillDetector, DateTime timestamp, double oilArea, byte[] shape, byte[] bSI, byte[] oil, byte[] trace ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call OilSpillInsert(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, oilSpillDetector);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setDouble(4, oilArea);
            callableStatement.setBinary(5, shape);
            callableStatement.setBinary(6, bSI);
            callableStatement.setBinary(7, oil);
            callableStatement.setBinary(8, trace);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertOilSpill( OilSpillObject oilSpillObject ) throws SQLException {
        Guid id = oilSpillObject.getId( );
        Guid oilSpillDetector = oilSpillObject.getOilSpillDetector( );
        DateTime timestamp = oilSpillObject.getTimestamp( );
        double oilArea = oilSpillObject.getOilArea( );
        byte[] shape = oilSpillObject.getShape( );
        byte[] bSI = oilSpillObject.getBSI( );
        byte[] oil = oilSpillObject.getOil( );
        byte[] trace = oilSpillObject.getTrace( );
        var result = insertOilSpill( id, oilSpillDetector, timestamp, oilArea, shape, bSI, oil, trace );
        if( result.isSuccess() ) {
            oilSpillObject.setId(result.getId());
            oilSpillObject.setRowVersion(0);
            oilSpillObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateOilSpill( Guid id, long rowVersion, Guid oilSpillDetector, DateTime timestamp, double oilArea, byte[] shape, byte[] bSI, byte[] oil, byte[] trace ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, oilSpillDetector);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setDouble(5, oilArea);
            callableStatement.setBinary(6, shape);
            callableStatement.setBinary(7, bSI);
            callableStatement.setBinary(8, oil);
            callableStatement.setBinary(9, trace);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateOilSpill( OilSpillObject oilSpillObject ) throws SQLException {
        Guid id = oilSpillObject.getId();
        long rowVersion = oilSpillObject.getRowVersion();
        Guid oilSpillDetector = oilSpillObject.getOilSpillDetector();
        DateTime timestamp = oilSpillObject.getTimestamp();
        double oilArea = oilSpillObject.getOilArea();
        byte[] shape = oilSpillObject.getShape();
        byte[] bSI = oilSpillObject.getBSI();
        byte[] oil = oilSpillObject.getOil();
        byte[] trace = oilSpillObject.getTrace();
        var result = updateOilSpill( id, rowVersion, oilSpillDetector, timestamp, oilArea, shape, bSI, oil, trace );
        if( result.isSuccess( ) ) {
            oilSpillObject.setRowVersion(result.getRowVersion());
            oilSpillObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteOilSpill( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call OilSpillDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteOilSpill( OilSpillObject oilSpillObject ) throws SQLException {
        var id = oilSpillObject.getId( );
        var rowVersion = oilSpillObject.getRowVersion();
        var result = deleteOilSpill( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertOilSpillDetectorCommand( Guid id, Guid oilSpillDetector, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call OilSpillDetectorCommandInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, oilSpillDetector);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1OilSpillDetectorCommand( Guid id, Guid oilSpillDetector, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call OilSpillDetectorCommandInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, oilSpillDetector);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertOilSpillDetectorCommand( OilSpillDetectorCommandObject oilSpillDetectorCommandObject ) throws SQLException {
        Guid id = oilSpillDetectorCommandObject.getId( );
        Guid oilSpillDetector = oilSpillDetectorCommandObject.getOilSpillDetector( );
        DateTime timestamp = oilSpillDetectorCommandObject.getTimestamp( );
        int deviceCommandSourceType = oilSpillDetectorCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = oilSpillDetectorCommandObject.getDeviceCommandSourceId( );
        Guid reply = oilSpillDetectorCommandObject.getReply( );
        var result = insertOilSpillDetectorCommand( id, oilSpillDetector, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            oilSpillDetectorCommandObject.setId(result.getId());
            oilSpillDetectorCommandObject.setRowVersion(0);
            oilSpillDetectorCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1OilSpillDetectorCommand( OilSpillDetectorCommandObject oilSpillDetectorCommandObject ) throws SQLException {
        Guid id = oilSpillDetectorCommandObject.getId( );
        Guid oilSpillDetector = oilSpillDetectorCommandObject.getOilSpillDetector( );
        DateTime timestamp = oilSpillDetectorCommandObject.getTimestamp( );
        int deviceCommandSourceType = oilSpillDetectorCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = oilSpillDetectorCommandObject.getDeviceCommandSourceId( );
        var result = insert1OilSpillDetectorCommand( id, oilSpillDetector, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            oilSpillDetectorCommandObject.setId( result.getId( ) );
            oilSpillDetectorCommandObject.setRowVersion(0);
            oilSpillDetectorCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateOilSpillDetectorCommand( Guid id, long rowVersion, Guid oilSpillDetector, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillDetectorCommandUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, oilSpillDetector);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1OilSpillDetectorCommand( Guid id, long rowVersion, Guid oilSpillDetector, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillDetectorCommandUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, oilSpillDetector);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2OilSpillDetectorCommand( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillDetectorCommandUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateOilSpillDetectorCommand( OilSpillDetectorCommandObject oilSpillDetectorCommandObject ) throws SQLException {
        Guid id = oilSpillDetectorCommandObject.getId();
        long rowVersion = oilSpillDetectorCommandObject.getRowVersion();
        Guid oilSpillDetector = oilSpillDetectorCommandObject.getOilSpillDetector();
        DateTime timestamp = oilSpillDetectorCommandObject.getTimestamp();
        int deviceCommandSourceType = oilSpillDetectorCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = oilSpillDetectorCommandObject.getDeviceCommandSourceId();
        Guid reply = oilSpillDetectorCommandObject.getReply();
        var result = updateOilSpillDetectorCommand( id, rowVersion, oilSpillDetector, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            oilSpillDetectorCommandObject.setRowVersion(result.getRowVersion());
            oilSpillDetectorCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1OilSpillDetectorCommand( OilSpillDetectorCommandObject oilSpillDetectorCommandObject ) throws SQLException {
        Guid id = oilSpillDetectorCommandObject.getId();
        long rowVersion = oilSpillDetectorCommandObject.getRowVersion();
        Guid oilSpillDetector = oilSpillDetectorCommandObject.getOilSpillDetector();
        DateTime timestamp = oilSpillDetectorCommandObject.getTimestamp();
        int deviceCommandSourceType = oilSpillDetectorCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = oilSpillDetectorCommandObject.getDeviceCommandSourceId();
        var result = update1OilSpillDetectorCommand( id, rowVersion, oilSpillDetector, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            oilSpillDetectorCommandObject.setRowVersion(result.getRowVersion());
            oilSpillDetectorCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2OilSpillDetectorCommand( OilSpillDetectorCommandObject oilSpillDetectorCommandObject ) throws SQLException {
        Guid id = oilSpillDetectorCommandObject.getId();
        long rowVersion = oilSpillDetectorCommandObject.getRowVersion();
        Guid reply = oilSpillDetectorCommandObject.getReply();
        var result = update2OilSpillDetectorCommand( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            oilSpillDetectorCommandObject.setRowVersion(result.getRowVersion());
            oilSpillDetectorCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteOilSpillDetectorCommand( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call OilSpillDetectorCommandDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteOilSpillDetectorCommand( OilSpillDetectorCommandObject oilSpillDetectorCommandObject ) throws SQLException {
        var id = oilSpillDetectorCommandObject.getId( );
        var rowVersion = oilSpillDetectorCommandObject.getRowVersion();
        var result = deleteOilSpillDetectorCommand( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertOilSpillDetectorCommandReply( Guid id, Guid oilSpillDetector, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call OilSpillDetectorCommandReplyInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, oilSpillDetector);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableGuid(4, command);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1OilSpillDetectorCommandReply( Guid id, Guid oilSpillDetector, DateTime timestamp, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call OilSpillDetectorCommandReplyInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, oilSpillDetector);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, status);
            callableStatement.setString(5, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertOilSpillDetectorCommandReply( OilSpillDetectorCommandReplyObject oilSpillDetectorCommandReplyObject ) throws SQLException {
        Guid id = oilSpillDetectorCommandReplyObject.getId( );
        Guid oilSpillDetector = oilSpillDetectorCommandReplyObject.getOilSpillDetector( );
        DateTime timestamp = oilSpillDetectorCommandReplyObject.getTimestamp( );
        Guid command = oilSpillDetectorCommandReplyObject.getCommand( );
        int status = oilSpillDetectorCommandReplyObject.getStatus( );
        String message = oilSpillDetectorCommandReplyObject.getMessage( );
        var result = insertOilSpillDetectorCommandReply( id, oilSpillDetector, timestamp, command, status, message );
        if( result.isSuccess() ) {
            oilSpillDetectorCommandReplyObject.setId(result.getId());
            oilSpillDetectorCommandReplyObject.setRowVersion(0);
            oilSpillDetectorCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1OilSpillDetectorCommandReply( OilSpillDetectorCommandReplyObject oilSpillDetectorCommandReplyObject ) throws SQLException {
        Guid id = oilSpillDetectorCommandReplyObject.getId( );
        Guid oilSpillDetector = oilSpillDetectorCommandReplyObject.getOilSpillDetector( );
        DateTime timestamp = oilSpillDetectorCommandReplyObject.getTimestamp( );
        int status = oilSpillDetectorCommandReplyObject.getStatus( );
        String message = oilSpillDetectorCommandReplyObject.getMessage( );
        var result = insert1OilSpillDetectorCommandReply( id, oilSpillDetector, timestamp, status, message );
        if( result.isSuccess( ) ) {
            oilSpillDetectorCommandReplyObject.setId( result.getId( ) );
            oilSpillDetectorCommandReplyObject.setRowVersion(0);
            oilSpillDetectorCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateOilSpillDetectorCommandReply( Guid id, long rowVersion, Guid oilSpillDetector, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillDetectorCommandReplyUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, oilSpillDetector);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableGuid(5, command);
            callableStatement.setInt32(6, status);
            callableStatement.setString(7, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1OilSpillDetectorCommandReply( Guid id, long rowVersion, Guid oilSpillDetector, DateTime timestamp, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillDetectorCommandReplyUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, oilSpillDetector);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2OilSpillDetectorCommandReply( Guid id, long rowVersion, Guid command ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillDetectorCommandReplyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, command);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateOilSpillDetectorCommandReply( OilSpillDetectorCommandReplyObject oilSpillDetectorCommandReplyObject ) throws SQLException {
        Guid id = oilSpillDetectorCommandReplyObject.getId();
        long rowVersion = oilSpillDetectorCommandReplyObject.getRowVersion();
        Guid oilSpillDetector = oilSpillDetectorCommandReplyObject.getOilSpillDetector();
        DateTime timestamp = oilSpillDetectorCommandReplyObject.getTimestamp();
        Guid command = oilSpillDetectorCommandReplyObject.getCommand();
        int status = oilSpillDetectorCommandReplyObject.getStatus();
        String message = oilSpillDetectorCommandReplyObject.getMessage();
        var result = updateOilSpillDetectorCommandReply( id, rowVersion, oilSpillDetector, timestamp, command, status, message );
        if( result.isSuccess( ) ) {
            oilSpillDetectorCommandReplyObject.setRowVersion(result.getRowVersion());
            oilSpillDetectorCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1OilSpillDetectorCommandReply( OilSpillDetectorCommandReplyObject oilSpillDetectorCommandReplyObject ) throws SQLException {
        Guid id = oilSpillDetectorCommandReplyObject.getId();
        long rowVersion = oilSpillDetectorCommandReplyObject.getRowVersion();
        Guid oilSpillDetector = oilSpillDetectorCommandReplyObject.getOilSpillDetector();
        DateTime timestamp = oilSpillDetectorCommandReplyObject.getTimestamp();
        int status = oilSpillDetectorCommandReplyObject.getStatus();
        String message = oilSpillDetectorCommandReplyObject.getMessage();
        var result = update1OilSpillDetectorCommandReply( id, rowVersion, oilSpillDetector, timestamp, status, message );
        if( result.isSuccess( ) ) {
            oilSpillDetectorCommandReplyObject.setRowVersion(result.getRowVersion());
            oilSpillDetectorCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2OilSpillDetectorCommandReply( OilSpillDetectorCommandReplyObject oilSpillDetectorCommandReplyObject ) throws SQLException {
        Guid id = oilSpillDetectorCommandReplyObject.getId();
        long rowVersion = oilSpillDetectorCommandReplyObject.getRowVersion();
        Guid command = oilSpillDetectorCommandReplyObject.getCommand();
        var result = update2OilSpillDetectorCommandReply( id, rowVersion, command );
        if( result.isSuccess( ) ) {
            oilSpillDetectorCommandReplyObject.setRowVersion(result.getRowVersion());
            oilSpillDetectorCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteOilSpillDetectorCommandReply( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call OilSpillDetectorCommandReplyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteOilSpillDetectorCommandReply( OilSpillDetectorCommandReplyObject oilSpillDetectorCommandReplyObject ) throws SQLException {
        var id = oilSpillDetectorCommandReplyObject.getId( );
        var rowVersion = oilSpillDetectorCommandReplyObject.getRowVersion();
        var result = deleteOilSpillDetectorCommandReply( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertOilSpillDetectorConfiguration( Guid id, Guid oilSpillDetector, DateTime timestamp, double range, double startAngle, double endAngle, double startRange, double endRange, int updateRate, TimeSpan statusSendTime, boolean drawBorder, byte[] colors, boolean sendToServer, String directory, boolean transparentWater, boolean savePictures, boolean sendAsTarget, boolean writeLog, String targetFilePrefix, Guid targetMMSI, double latitude, double longitude, boolean testSourceEnabled, String proxyServer, boolean useProxyServer ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call OilSpillDetectorConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, oilSpillDetector);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setDouble(4, range);
            callableStatement.setDouble(5, startAngle);
            callableStatement.setDouble(6, endAngle);
            callableStatement.setDouble(7, startRange);
            callableStatement.setDouble(8, endRange);
            callableStatement.setInt32(9, updateRate);
            callableStatement.setTimeSpan(10, statusSendTime);
            callableStatement.setBoolean(11, drawBorder);
            callableStatement.setBinary(12, colors);
            callableStatement.setBoolean(13, sendToServer);
            callableStatement.setString(14, directory);
            callableStatement.setBoolean(15, transparentWater);
            callableStatement.setBoolean(16, savePictures);
            callableStatement.setBoolean(17, sendAsTarget);
            callableStatement.setBoolean(18, writeLog);
            callableStatement.setString(19, targetFilePrefix);
            callableStatement.setNullableGuid(20, targetMMSI);
            callableStatement.setDouble(21, latitude);
            callableStatement.setDouble(22, longitude);
            callableStatement.setBoolean(23, testSourceEnabled);
            callableStatement.setString(24, proxyServer);
            callableStatement.setBoolean(25, useProxyServer);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1OilSpillDetectorConfiguration( Guid id, Guid oilSpillDetector, DateTime timestamp, double range, double startAngle, double endAngle, double startRange, double endRange, int updateRate, TimeSpan statusSendTime, boolean drawBorder, byte[] colors, boolean sendToServer, String directory, boolean transparentWater, boolean savePictures, boolean sendAsTarget, boolean writeLog, String targetFilePrefix, double latitude, double longitude, boolean testSourceEnabled, String proxyServer, boolean useProxyServer ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call OilSpillDetectorConfigurationInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, oilSpillDetector);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setDouble(4, range);
            callableStatement.setDouble(5, startAngle);
            callableStatement.setDouble(6, endAngle);
            callableStatement.setDouble(7, startRange);
            callableStatement.setDouble(8, endRange);
            callableStatement.setInt32(9, updateRate);
            callableStatement.setTimeSpan(10, statusSendTime);
            callableStatement.setBoolean(11, drawBorder);
            callableStatement.setBinary(12, colors);
            callableStatement.setBoolean(13, sendToServer);
            callableStatement.setString(14, directory);
            callableStatement.setBoolean(15, transparentWater);
            callableStatement.setBoolean(16, savePictures);
            callableStatement.setBoolean(17, sendAsTarget);
            callableStatement.setBoolean(18, writeLog);
            callableStatement.setString(19, targetFilePrefix);
            callableStatement.setDouble(20, latitude);
            callableStatement.setDouble(21, longitude);
            callableStatement.setBoolean(22, testSourceEnabled);
            callableStatement.setString(23, proxyServer);
            callableStatement.setBoolean(24, useProxyServer);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertOilSpillDetectorConfiguration( OilSpillDetectorConfigurationObject oilSpillDetectorConfigurationObject ) throws SQLException {
        Guid id = oilSpillDetectorConfigurationObject.getId( );
        Guid oilSpillDetector = oilSpillDetectorConfigurationObject.getOilSpillDetector( );
        DateTime timestamp = oilSpillDetectorConfigurationObject.getTimestamp( );
        double range = oilSpillDetectorConfigurationObject.getRange( );
        double startAngle = oilSpillDetectorConfigurationObject.getStartAngle( );
        double endAngle = oilSpillDetectorConfigurationObject.getEndAngle( );
        double startRange = oilSpillDetectorConfigurationObject.getStartRange( );
        double endRange = oilSpillDetectorConfigurationObject.getEndRange( );
        int updateRate = oilSpillDetectorConfigurationObject.getUpdateRate( );
        TimeSpan statusSendTime = oilSpillDetectorConfigurationObject.getStatusSendTime( );
        boolean drawBorder = oilSpillDetectorConfigurationObject.getDrawBorder( );
        byte[] colors = oilSpillDetectorConfigurationObject.getColors( );
        boolean sendToServer = oilSpillDetectorConfigurationObject.getSendToServer( );
        String directory = oilSpillDetectorConfigurationObject.getDirectory( );
        boolean transparentWater = oilSpillDetectorConfigurationObject.getTransparentWater( );
        boolean savePictures = oilSpillDetectorConfigurationObject.getSavePictures( );
        boolean sendAsTarget = oilSpillDetectorConfigurationObject.getSendAsTarget( );
        boolean writeLog = oilSpillDetectorConfigurationObject.getWriteLog( );
        String targetFilePrefix = oilSpillDetectorConfigurationObject.getTargetFilePrefix( );
        Guid targetMMSI = oilSpillDetectorConfigurationObject.getTargetMMSI( );
        double latitude = oilSpillDetectorConfigurationObject.getLatitude( );
        double longitude = oilSpillDetectorConfigurationObject.getLongitude( );
        boolean testSourceEnabled = oilSpillDetectorConfigurationObject.getTestSourceEnabled( );
        String proxyServer = oilSpillDetectorConfigurationObject.getProxyServer( );
        boolean useProxyServer = oilSpillDetectorConfigurationObject.getUseProxyServer( );
        var result = insertOilSpillDetectorConfiguration( id, oilSpillDetector, timestamp, range, startAngle, endAngle, startRange, endRange, updateRate, statusSendTime, drawBorder, colors, sendToServer, directory, transparentWater, savePictures, sendAsTarget, writeLog, targetFilePrefix, targetMMSI, latitude, longitude, testSourceEnabled, proxyServer, useProxyServer );
        if( result.isSuccess() ) {
            oilSpillDetectorConfigurationObject.setId(result.getId());
            oilSpillDetectorConfigurationObject.setRowVersion(0);
            oilSpillDetectorConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1OilSpillDetectorConfiguration( OilSpillDetectorConfigurationObject oilSpillDetectorConfigurationObject ) throws SQLException {
        Guid id = oilSpillDetectorConfigurationObject.getId( );
        Guid oilSpillDetector = oilSpillDetectorConfigurationObject.getOilSpillDetector( );
        DateTime timestamp = oilSpillDetectorConfigurationObject.getTimestamp( );
        double range = oilSpillDetectorConfigurationObject.getRange( );
        double startAngle = oilSpillDetectorConfigurationObject.getStartAngle( );
        double endAngle = oilSpillDetectorConfigurationObject.getEndAngle( );
        double startRange = oilSpillDetectorConfigurationObject.getStartRange( );
        double endRange = oilSpillDetectorConfigurationObject.getEndRange( );
        int updateRate = oilSpillDetectorConfigurationObject.getUpdateRate( );
        TimeSpan statusSendTime = oilSpillDetectorConfigurationObject.getStatusSendTime( );
        boolean drawBorder = oilSpillDetectorConfigurationObject.getDrawBorder( );
        byte[] colors = oilSpillDetectorConfigurationObject.getColors( );
        boolean sendToServer = oilSpillDetectorConfigurationObject.getSendToServer( );
        String directory = oilSpillDetectorConfigurationObject.getDirectory( );
        boolean transparentWater = oilSpillDetectorConfigurationObject.getTransparentWater( );
        boolean savePictures = oilSpillDetectorConfigurationObject.getSavePictures( );
        boolean sendAsTarget = oilSpillDetectorConfigurationObject.getSendAsTarget( );
        boolean writeLog = oilSpillDetectorConfigurationObject.getWriteLog( );
        String targetFilePrefix = oilSpillDetectorConfigurationObject.getTargetFilePrefix( );
        double latitude = oilSpillDetectorConfigurationObject.getLatitude( );
        double longitude = oilSpillDetectorConfigurationObject.getLongitude( );
        boolean testSourceEnabled = oilSpillDetectorConfigurationObject.getTestSourceEnabled( );
        String proxyServer = oilSpillDetectorConfigurationObject.getProxyServer( );
        boolean useProxyServer = oilSpillDetectorConfigurationObject.getUseProxyServer( );
        var result = insert1OilSpillDetectorConfiguration( id, oilSpillDetector, timestamp, range, startAngle, endAngle, startRange, endRange, updateRate, statusSendTime, drawBorder, colors, sendToServer, directory, transparentWater, savePictures, sendAsTarget, writeLog, targetFilePrefix, latitude, longitude, testSourceEnabled, proxyServer, useProxyServer );
        if( result.isSuccess( ) ) {
            oilSpillDetectorConfigurationObject.setId( result.getId( ) );
            oilSpillDetectorConfigurationObject.setRowVersion(0);
            oilSpillDetectorConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateOilSpillDetectorConfiguration( Guid id, long rowVersion, Guid oilSpillDetector, DateTime timestamp, double range, double startAngle, double endAngle, double startRange, double endRange, int updateRate, TimeSpan statusSendTime, boolean drawBorder, byte[] colors, boolean sendToServer, String directory, boolean transparentWater, boolean savePictures, boolean sendAsTarget, boolean writeLog, String targetFilePrefix, Guid targetMMSI, double latitude, double longitude, boolean testSourceEnabled, String proxyServer, boolean useProxyServer ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillDetectorConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, oilSpillDetector);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setDouble(5, range);
            callableStatement.setDouble(6, startAngle);
            callableStatement.setDouble(7, endAngle);
            callableStatement.setDouble(8, startRange);
            callableStatement.setDouble(9, endRange);
            callableStatement.setInt32(10, updateRate);
            callableStatement.setTimeSpan(11, statusSendTime);
            callableStatement.setBoolean(12, drawBorder);
            callableStatement.setBinary(13, colors);
            callableStatement.setBoolean(14, sendToServer);
            callableStatement.setString(15, directory);
            callableStatement.setBoolean(16, transparentWater);
            callableStatement.setBoolean(17, savePictures);
            callableStatement.setBoolean(18, sendAsTarget);
            callableStatement.setBoolean(19, writeLog);
            callableStatement.setString(20, targetFilePrefix);
            callableStatement.setNullableGuid(21, targetMMSI);
            callableStatement.setDouble(22, latitude);
            callableStatement.setDouble(23, longitude);
            callableStatement.setBoolean(24, testSourceEnabled);
            callableStatement.setString(25, proxyServer);
            callableStatement.setBoolean(26, useProxyServer);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1OilSpillDetectorConfiguration( Guid id, long rowVersion, Guid oilSpillDetector, DateTime timestamp, double range, double startAngle, double endAngle, double startRange, double endRange, int updateRate, TimeSpan statusSendTime, boolean drawBorder, byte[] colors, boolean sendToServer, String directory, boolean transparentWater, boolean savePictures, boolean sendAsTarget, boolean writeLog, String targetFilePrefix, double latitude, double longitude, boolean testSourceEnabled, String proxyServer, boolean useProxyServer ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillDetectorConfigurationUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, oilSpillDetector);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setDouble(5, range);
            callableStatement.setDouble(6, startAngle);
            callableStatement.setDouble(7, endAngle);
            callableStatement.setDouble(8, startRange);
            callableStatement.setDouble(9, endRange);
            callableStatement.setInt32(10, updateRate);
            callableStatement.setTimeSpan(11, statusSendTime);
            callableStatement.setBoolean(12, drawBorder);
            callableStatement.setBinary(13, colors);
            callableStatement.setBoolean(14, sendToServer);
            callableStatement.setString(15, directory);
            callableStatement.setBoolean(16, transparentWater);
            callableStatement.setBoolean(17, savePictures);
            callableStatement.setBoolean(18, sendAsTarget);
            callableStatement.setBoolean(19, writeLog);
            callableStatement.setString(20, targetFilePrefix);
            callableStatement.setDouble(21, latitude);
            callableStatement.setDouble(22, longitude);
            callableStatement.setBoolean(23, testSourceEnabled);
            callableStatement.setString(24, proxyServer);
            callableStatement.setBoolean(25, useProxyServer);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2OilSpillDetectorConfiguration( Guid id, long rowVersion, Guid targetMMSI ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call OilSpillDetectorConfigurationUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, targetMMSI);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateOilSpillDetectorConfiguration( OilSpillDetectorConfigurationObject oilSpillDetectorConfigurationObject ) throws SQLException {
        Guid id = oilSpillDetectorConfigurationObject.getId();
        long rowVersion = oilSpillDetectorConfigurationObject.getRowVersion();
        Guid oilSpillDetector = oilSpillDetectorConfigurationObject.getOilSpillDetector();
        DateTime timestamp = oilSpillDetectorConfigurationObject.getTimestamp();
        double range = oilSpillDetectorConfigurationObject.getRange();
        double startAngle = oilSpillDetectorConfigurationObject.getStartAngle();
        double endAngle = oilSpillDetectorConfigurationObject.getEndAngle();
        double startRange = oilSpillDetectorConfigurationObject.getStartRange();
        double endRange = oilSpillDetectorConfigurationObject.getEndRange();
        int updateRate = oilSpillDetectorConfigurationObject.getUpdateRate();
        TimeSpan statusSendTime = oilSpillDetectorConfigurationObject.getStatusSendTime();
        boolean drawBorder = oilSpillDetectorConfigurationObject.getDrawBorder();
        byte[] colors = oilSpillDetectorConfigurationObject.getColors();
        boolean sendToServer = oilSpillDetectorConfigurationObject.getSendToServer();
        String directory = oilSpillDetectorConfigurationObject.getDirectory();
        boolean transparentWater = oilSpillDetectorConfigurationObject.getTransparentWater();
        boolean savePictures = oilSpillDetectorConfigurationObject.getSavePictures();
        boolean sendAsTarget = oilSpillDetectorConfigurationObject.getSendAsTarget();
        boolean writeLog = oilSpillDetectorConfigurationObject.getWriteLog();
        String targetFilePrefix = oilSpillDetectorConfigurationObject.getTargetFilePrefix();
        Guid targetMMSI = oilSpillDetectorConfigurationObject.getTargetMMSI();
        double latitude = oilSpillDetectorConfigurationObject.getLatitude();
        double longitude = oilSpillDetectorConfigurationObject.getLongitude();
        boolean testSourceEnabled = oilSpillDetectorConfigurationObject.getTestSourceEnabled();
        String proxyServer = oilSpillDetectorConfigurationObject.getProxyServer();
        boolean useProxyServer = oilSpillDetectorConfigurationObject.getUseProxyServer();
        var result = updateOilSpillDetectorConfiguration( id, rowVersion, oilSpillDetector, timestamp, range, startAngle, endAngle, startRange, endRange, updateRate, statusSendTime, drawBorder, colors, sendToServer, directory, transparentWater, savePictures, sendAsTarget, writeLog, targetFilePrefix, targetMMSI, latitude, longitude, testSourceEnabled, proxyServer, useProxyServer );
        if( result.isSuccess( ) ) {
            oilSpillDetectorConfigurationObject.setRowVersion(result.getRowVersion());
            oilSpillDetectorConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1OilSpillDetectorConfiguration( OilSpillDetectorConfigurationObject oilSpillDetectorConfigurationObject ) throws SQLException {
        Guid id = oilSpillDetectorConfigurationObject.getId();
        long rowVersion = oilSpillDetectorConfigurationObject.getRowVersion();
        Guid oilSpillDetector = oilSpillDetectorConfigurationObject.getOilSpillDetector();
        DateTime timestamp = oilSpillDetectorConfigurationObject.getTimestamp();
        double range = oilSpillDetectorConfigurationObject.getRange();
        double startAngle = oilSpillDetectorConfigurationObject.getStartAngle();
        double endAngle = oilSpillDetectorConfigurationObject.getEndAngle();
        double startRange = oilSpillDetectorConfigurationObject.getStartRange();
        double endRange = oilSpillDetectorConfigurationObject.getEndRange();
        int updateRate = oilSpillDetectorConfigurationObject.getUpdateRate();
        TimeSpan statusSendTime = oilSpillDetectorConfigurationObject.getStatusSendTime();
        boolean drawBorder = oilSpillDetectorConfigurationObject.getDrawBorder();
        byte[] colors = oilSpillDetectorConfigurationObject.getColors();
        boolean sendToServer = oilSpillDetectorConfigurationObject.getSendToServer();
        String directory = oilSpillDetectorConfigurationObject.getDirectory();
        boolean transparentWater = oilSpillDetectorConfigurationObject.getTransparentWater();
        boolean savePictures = oilSpillDetectorConfigurationObject.getSavePictures();
        boolean sendAsTarget = oilSpillDetectorConfigurationObject.getSendAsTarget();
        boolean writeLog = oilSpillDetectorConfigurationObject.getWriteLog();
        String targetFilePrefix = oilSpillDetectorConfigurationObject.getTargetFilePrefix();
        double latitude = oilSpillDetectorConfigurationObject.getLatitude();
        double longitude = oilSpillDetectorConfigurationObject.getLongitude();
        boolean testSourceEnabled = oilSpillDetectorConfigurationObject.getTestSourceEnabled();
        String proxyServer = oilSpillDetectorConfigurationObject.getProxyServer();
        boolean useProxyServer = oilSpillDetectorConfigurationObject.getUseProxyServer();
        var result = update1OilSpillDetectorConfiguration( id, rowVersion, oilSpillDetector, timestamp, range, startAngle, endAngle, startRange, endRange, updateRate, statusSendTime, drawBorder, colors, sendToServer, directory, transparentWater, savePictures, sendAsTarget, writeLog, targetFilePrefix, latitude, longitude, testSourceEnabled, proxyServer, useProxyServer );
        if( result.isSuccess( ) ) {
            oilSpillDetectorConfigurationObject.setRowVersion(result.getRowVersion());
            oilSpillDetectorConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2OilSpillDetectorConfiguration( OilSpillDetectorConfigurationObject oilSpillDetectorConfigurationObject ) throws SQLException {
        Guid id = oilSpillDetectorConfigurationObject.getId();
        long rowVersion = oilSpillDetectorConfigurationObject.getRowVersion();
        Guid targetMMSI = oilSpillDetectorConfigurationObject.getTargetMMSI();
        var result = update2OilSpillDetectorConfiguration( id, rowVersion, targetMMSI );
        if( result.isSuccess( ) ) {
            oilSpillDetectorConfigurationObject.setRowVersion(result.getRowVersion());
            oilSpillDetectorConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteOilSpillDetectorConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call OilSpillDetectorConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteOilSpillDetectorConfiguration( OilSpillDetectorConfigurationObject oilSpillDetectorConfigurationObject ) throws SQLException {
        var id = oilSpillDetectorConfigurationObject.getId( );
        var rowVersion = oilSpillDetectorConfigurationObject.getRowVersion();
        var result = deleteOilSpillDetectorConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertPosition2DTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Double x, Double y ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Position2DTimeseriesValueInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableDouble(4, x);
            callableStatement.setNullableDouble(5, y);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertPosition2DTimeseriesValue( Position2DTimeseriesValueObject position2DTimeseriesValueObject ) throws SQLException {
        Guid id = position2DTimeseriesValueObject.getId( );
        Guid timeseries = position2DTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = position2DTimeseriesValueObject.getTimestamp( );
        Double x = position2DTimeseriesValueObject.getX( );
        Double y = position2DTimeseriesValueObject.getY( );
        var result = insertPosition2DTimeseriesValue( id, timeseries, timestamp, x, y );
        if( result.isSuccess() ) {
            position2DTimeseriesValueObject.setId(result.getId());
            position2DTimeseriesValueObject.setRowVersion(0);
            position2DTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updatePosition2DTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Double x, Double y ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Position2DTimeseriesValueUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableDouble(5, x);
            callableStatement.setNullableDouble(6, y);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updatePosition2DTimeseriesValue( Position2DTimeseriesValueObject position2DTimeseriesValueObject ) throws SQLException {
        Guid id = position2DTimeseriesValueObject.getId();
        long rowVersion = position2DTimeseriesValueObject.getRowVersion();
        Guid timeseries = position2DTimeseriesValueObject.getTimeseries();
        DateTime timestamp = position2DTimeseriesValueObject.getTimestamp();
        Double x = position2DTimeseriesValueObject.getX();
        Double y = position2DTimeseriesValueObject.getY();
        var result = updatePosition2DTimeseriesValue( id, rowVersion, timeseries, timestamp, x, y );
        if( result.isSuccess( ) ) {
            position2DTimeseriesValueObject.setRowVersion(result.getRowVersion());
            position2DTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deletePosition2DTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Position2DTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deletePosition2DTimeseriesValue( Position2DTimeseriesValueObject position2DTimeseriesValueObject ) throws SQLException {
        var id = position2DTimeseriesValueObject.getId( );
        var rowVersion = position2DTimeseriesValueObject.getRowVersion();
        var result = deletePosition2DTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertPosition3DTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Double x, Double y, Double z ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Position3DTimeseriesValueInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableDouble(4, x);
            callableStatement.setNullableDouble(5, y);
            callableStatement.setNullableDouble(6, z);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertPosition3DTimeseriesValue( Position3DTimeseriesValueObject position3DTimeseriesValueObject ) throws SQLException {
        Guid id = position3DTimeseriesValueObject.getId( );
        Guid timeseries = position3DTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = position3DTimeseriesValueObject.getTimestamp( );
        Double x = position3DTimeseriesValueObject.getX( );
        Double y = position3DTimeseriesValueObject.getY( );
        Double z = position3DTimeseriesValueObject.getZ( );
        var result = insertPosition3DTimeseriesValue( id, timeseries, timestamp, x, y, z );
        if( result.isSuccess() ) {
            position3DTimeseriesValueObject.setId(result.getId());
            position3DTimeseriesValueObject.setRowVersion(0);
            position3DTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updatePosition3DTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Double x, Double y, Double z ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Position3DTimeseriesValueUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableDouble(5, x);
            callableStatement.setNullableDouble(6, y);
            callableStatement.setNullableDouble(7, z);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updatePosition3DTimeseriesValue( Position3DTimeseriesValueObject position3DTimeseriesValueObject ) throws SQLException {
        Guid id = position3DTimeseriesValueObject.getId();
        long rowVersion = position3DTimeseriesValueObject.getRowVersion();
        Guid timeseries = position3DTimeseriesValueObject.getTimeseries();
        DateTime timestamp = position3DTimeseriesValueObject.getTimestamp();
        Double x = position3DTimeseriesValueObject.getX();
        Double y = position3DTimeseriesValueObject.getY();
        Double z = position3DTimeseriesValueObject.getZ();
        var result = updatePosition3DTimeseriesValue( id, rowVersion, timeseries, timestamp, x, y, z );
        if( result.isSuccess( ) ) {
            position3DTimeseriesValueObject.setRowVersion(result.getRowVersion());
            position3DTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deletePosition3DTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Position3DTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deletePosition3DTimeseriesValue( Position3DTimeseriesValueObject position3DTimeseriesValueObject ) throws SQLException {
        var id = position3DTimeseriesValueObject.getId( );
        var rowVersion = position3DTimeseriesValueObject.getRowVersion();
        var result = deletePosition3DTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertProcessTrackValueResult( Guid id, boolean createdNewTrack, Guid trackId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ProcessTrackValueResultInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setBoolean(2, createdNewTrack);
            callableStatement.setGuid(3, trackId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertProcessTrackValueResult( ProcessTrackValueResultObject processTrackValueResultObject ) throws SQLException {
        Guid id = processTrackValueResultObject.getId( );
        boolean createdNewTrack = processTrackValueResultObject.getCreatedNewTrack( );
        Guid trackId = processTrackValueResultObject.getTrackId( );
        var result = insertProcessTrackValueResult( id, createdNewTrack, trackId );
        if( result.isSuccess() ) {
            processTrackValueResultObject.setId(result.getId());
            processTrackValueResultObject.setRowVersion(0);
            processTrackValueResultObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateProcessTrackValueResult( Guid id, long rowVersion, boolean createdNewTrack, Guid trackId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ProcessTrackValueResultUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setBoolean(3, createdNewTrack);
            callableStatement.setGuid(4, trackId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateProcessTrackValueResult( ProcessTrackValueResultObject processTrackValueResultObject ) throws SQLException {
        Guid id = processTrackValueResultObject.getId();
        long rowVersion = processTrackValueResultObject.getRowVersion();
        boolean createdNewTrack = processTrackValueResultObject.getCreatedNewTrack();
        Guid trackId = processTrackValueResultObject.getTrackId();
        var result = updateProcessTrackValueResult( id, rowVersion, createdNewTrack, trackId );
        if( result.isSuccess( ) ) {
            processTrackValueResultObject.setRowVersion(result.getRowVersion());
            processTrackValueResultObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteProcessTrackValueResult( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ProcessTrackValueResultDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteProcessTrackValueResult( ProcessTrackValueResultObject processTrackValueResultObject ) throws SQLException {
        var id = processTrackValueResultObject.getId( );
        var rowVersion = processTrackValueResultObject.getRowVersion();
        var result = deleteProcessTrackValueResult( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBinaryProperty( Guid id, Guid element, Guid definition, byte[] value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BinaryPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setBinary(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBinaryProperty( BinaryPropertyObject binaryPropertyObject ) throws SQLException {
        Guid id = binaryPropertyObject.getId( );
        Guid element = binaryPropertyObject.getElement( );
        Guid definition = binaryPropertyObject.getDefinition( );
        byte[] value = binaryPropertyObject.getValue( );
        var result = insertBinaryProperty( id, element, definition, value );
        if( result.isSuccess() ) {
            binaryPropertyObject.setId(result.getId());
            binaryPropertyObject.setRowVersion(0);
            binaryPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateBinaryProperty( Guid id, long rowVersion, Guid element, Guid definition, byte[] value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BinaryPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setBinary(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBinaryProperty( BinaryPropertyObject binaryPropertyObject ) throws SQLException {
        Guid id = binaryPropertyObject.getId();
        long rowVersion = binaryPropertyObject.getRowVersion();
        Guid element = binaryPropertyObject.getElement();
        Guid definition = binaryPropertyObject.getDefinition();
        byte[] value = binaryPropertyObject.getValue();
        var result = updateBinaryProperty( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            binaryPropertyObject.setRowVersion(result.getRowVersion());
            binaryPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBinaryProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BinaryPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBinaryProperty( BinaryPropertyObject binaryPropertyObject ) throws SQLException {
        var id = binaryPropertyObject.getId( );
        var rowVersion = binaryPropertyObject.getRowVersion();
        var result = deleteBinaryProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBooleanProperty( Guid id, Guid element, Guid definition, boolean value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BooleanPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setBoolean(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBooleanProperty( BooleanPropertyObject booleanPropertyObject ) throws SQLException {
        Guid id = booleanPropertyObject.getId( );
        Guid element = booleanPropertyObject.getElement( );
        Guid definition = booleanPropertyObject.getDefinition( );
        boolean value = booleanPropertyObject.getValue( );
        var result = insertBooleanProperty( id, element, definition, value );
        if( result.isSuccess() ) {
            booleanPropertyObject.setId(result.getId());
            booleanPropertyObject.setRowVersion(0);
            booleanPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateBooleanProperty( Guid id, long rowVersion, Guid element, Guid definition, boolean value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BooleanPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setBoolean(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBooleanProperty( BooleanPropertyObject booleanPropertyObject ) throws SQLException {
        Guid id = booleanPropertyObject.getId();
        long rowVersion = booleanPropertyObject.getRowVersion();
        Guid element = booleanPropertyObject.getElement();
        Guid definition = booleanPropertyObject.getDefinition();
        boolean value = booleanPropertyObject.getValue();
        var result = updateBooleanProperty( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            booleanPropertyObject.setRowVersion(result.getRowVersion());
            booleanPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBooleanProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BooleanPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBooleanProperty( BooleanPropertyObject booleanPropertyObject ) throws SQLException {
        var id = booleanPropertyObject.getId( );
        var rowVersion = booleanPropertyObject.getRowVersion();
        var result = deleteBooleanProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertByteProperty( Guid id, Guid element, Guid definition, byte value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BytePropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setUInt8(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertByteProperty( BytePropertyObject bytePropertyObject ) throws SQLException {
        Guid id = bytePropertyObject.getId( );
        Guid element = bytePropertyObject.getElement( );
        Guid definition = bytePropertyObject.getDefinition( );
        byte value = bytePropertyObject.getValue( );
        var result = insertByteProperty( id, element, definition, value );
        if( result.isSuccess() ) {
            bytePropertyObject.setId(result.getId());
            bytePropertyObject.setRowVersion(0);
            bytePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateByteProperty( Guid id, long rowVersion, Guid element, Guid definition, byte value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BytePropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setUInt8(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateByteProperty( BytePropertyObject bytePropertyObject ) throws SQLException {
        Guid id = bytePropertyObject.getId();
        long rowVersion = bytePropertyObject.getRowVersion();
        Guid element = bytePropertyObject.getElement();
        Guid definition = bytePropertyObject.getDefinition();
        byte value = bytePropertyObject.getValue();
        var result = updateByteProperty( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            bytePropertyObject.setRowVersion(result.getRowVersion());
            bytePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteByteProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BytePropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteByteProperty( BytePropertyObject bytePropertyObject ) throws SQLException {
        var id = bytePropertyObject.getId( );
        var rowVersion = bytePropertyObject.getRowVersion();
        var result = deleteByteProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDateTimeProperty( Guid id, Guid element, Guid definition, DateTime value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DateTimePropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setLongFromDateTime(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDateTimeProperty( DateTimePropertyObject dateTimePropertyObject ) throws SQLException {
        Guid id = dateTimePropertyObject.getId( );
        Guid element = dateTimePropertyObject.getElement( );
        Guid definition = dateTimePropertyObject.getDefinition( );
        DateTime value = dateTimePropertyObject.getValue( );
        var result = insertDateTimeProperty( id, element, definition, value );
        if( result.isSuccess() ) {
            dateTimePropertyObject.setId(result.getId());
            dateTimePropertyObject.setRowVersion(0);
            dateTimePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateDateTimeProperty( Guid id, long rowVersion, Guid element, Guid definition, DateTime value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DateTimePropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setLongFromDateTime(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDateTimeProperty( DateTimePropertyObject dateTimePropertyObject ) throws SQLException {
        Guid id = dateTimePropertyObject.getId();
        long rowVersion = dateTimePropertyObject.getRowVersion();
        Guid element = dateTimePropertyObject.getElement();
        Guid definition = dateTimePropertyObject.getDefinition();
        DateTime value = dateTimePropertyObject.getValue();
        var result = updateDateTimeProperty( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            dateTimePropertyObject.setRowVersion(result.getRowVersion());
            dateTimePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDateTimeProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DateTimePropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDateTimeProperty( DateTimePropertyObject dateTimePropertyObject ) throws SQLException {
        var id = dateTimePropertyObject.getId( );
        var rowVersion = dateTimePropertyObject.getRowVersion();
        var result = deleteDateTimeProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDoubleProperty( Guid id, Guid element, Guid definition, double value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DoublePropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setDouble(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDoubleProperty( DoublePropertyObject doublePropertyObject ) throws SQLException {
        Guid id = doublePropertyObject.getId( );
        Guid element = doublePropertyObject.getElement( );
        Guid definition = doublePropertyObject.getDefinition( );
        double value = doublePropertyObject.getValue( );
        var result = insertDoubleProperty( id, element, definition, value );
        if( result.isSuccess() ) {
            doublePropertyObject.setId(result.getId());
            doublePropertyObject.setRowVersion(0);
            doublePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateDoubleProperty( Guid id, long rowVersion, Guid element, Guid definition, double value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DoublePropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setDouble(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDoubleProperty( DoublePropertyObject doublePropertyObject ) throws SQLException {
        Guid id = doublePropertyObject.getId();
        long rowVersion = doublePropertyObject.getRowVersion();
        Guid element = doublePropertyObject.getElement();
        Guid definition = doublePropertyObject.getDefinition();
        double value = doublePropertyObject.getValue();
        var result = updateDoubleProperty( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            doublePropertyObject.setRowVersion(result.getRowVersion());
            doublePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDoubleProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DoublePropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDoubleProperty( DoublePropertyObject doublePropertyObject ) throws SQLException {
        var id = doublePropertyObject.getId( );
        var rowVersion = doublePropertyObject.getRowVersion();
        var result = deleteDoubleProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGuidProperty( Guid id, Guid element, Guid definition, Guid value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GuidPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setGuid(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGuidProperty( GuidPropertyObject guidPropertyObject ) throws SQLException {
        Guid id = guidPropertyObject.getId( );
        Guid element = guidPropertyObject.getElement( );
        Guid definition = guidPropertyObject.getDefinition( );
        Guid value = guidPropertyObject.getValue( );
        var result = insertGuidProperty( id, element, definition, value );
        if( result.isSuccess() ) {
            guidPropertyObject.setId(result.getId());
            guidPropertyObject.setRowVersion(0);
            guidPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateGuidProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GuidPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setGuid(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGuidProperty( GuidPropertyObject guidPropertyObject ) throws SQLException {
        Guid id = guidPropertyObject.getId();
        long rowVersion = guidPropertyObject.getRowVersion();
        Guid element = guidPropertyObject.getElement();
        Guid definition = guidPropertyObject.getDefinition();
        Guid value = guidPropertyObject.getValue();
        var result = updateGuidProperty( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            guidPropertyObject.setRowVersion(result.getRowVersion());
            guidPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGuidProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GuidPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGuidProperty( GuidPropertyObject guidPropertyObject ) throws SQLException {
        var id = guidPropertyObject.getId( );
        var rowVersion = guidPropertyObject.getRowVersion();
        var result = deleteGuidProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt16Property( Guid id, Guid element, Guid definition, short value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int16PropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setInt16(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt16Property( Int16PropertyObject int16PropertyObject ) throws SQLException {
        Guid id = int16PropertyObject.getId( );
        Guid element = int16PropertyObject.getElement( );
        Guid definition = int16PropertyObject.getDefinition( );
        short value = int16PropertyObject.getValue( );
        var result = insertInt16Property( id, element, definition, value );
        if( result.isSuccess() ) {
            int16PropertyObject.setId(result.getId());
            int16PropertyObject.setRowVersion(0);
            int16PropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInt16Property( Guid id, long rowVersion, Guid element, Guid definition, short value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int16PropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setInt16(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt16Property( Int16PropertyObject int16PropertyObject ) throws SQLException {
        Guid id = int16PropertyObject.getId();
        long rowVersion = int16PropertyObject.getRowVersion();
        Guid element = int16PropertyObject.getElement();
        Guid definition = int16PropertyObject.getDefinition();
        short value = int16PropertyObject.getValue();
        var result = updateInt16Property( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            int16PropertyObject.setRowVersion(result.getRowVersion());
            int16PropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt16Property( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int16PropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt16Property( Int16PropertyObject int16PropertyObject ) throws SQLException {
        var id = int16PropertyObject.getId( );
        var rowVersion = int16PropertyObject.getRowVersion();
        var result = deleteInt16Property( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt32Property( Guid id, Guid element, Guid definition, int value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int32PropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setInt32(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt32Property( Int32PropertyObject int32PropertyObject ) throws SQLException {
        Guid id = int32PropertyObject.getId( );
        Guid element = int32PropertyObject.getElement( );
        Guid definition = int32PropertyObject.getDefinition( );
        int value = int32PropertyObject.getValue( );
        var result = insertInt32Property( id, element, definition, value );
        if( result.isSuccess() ) {
            int32PropertyObject.setId(result.getId());
            int32PropertyObject.setRowVersion(0);
            int32PropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInt32Property( Guid id, long rowVersion, Guid element, Guid definition, int value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int32PropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setInt32(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt32Property( Int32PropertyObject int32PropertyObject ) throws SQLException {
        Guid id = int32PropertyObject.getId();
        long rowVersion = int32PropertyObject.getRowVersion();
        Guid element = int32PropertyObject.getElement();
        Guid definition = int32PropertyObject.getDefinition();
        int value = int32PropertyObject.getValue();
        var result = updateInt32Property( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            int32PropertyObject.setRowVersion(result.getRowVersion());
            int32PropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt32Property( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int32PropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt32Property( Int32PropertyObject int32PropertyObject ) throws SQLException {
        var id = int32PropertyObject.getId( );
        var rowVersion = int32PropertyObject.getRowVersion();
        var result = deleteInt32Property( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt64Property( Guid id, Guid element, Guid definition, long value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int64PropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setInt64(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt64Property( Int64PropertyObject int64PropertyObject ) throws SQLException {
        Guid id = int64PropertyObject.getId( );
        Guid element = int64PropertyObject.getElement( );
        Guid definition = int64PropertyObject.getDefinition( );
        long value = int64PropertyObject.getValue( );
        var result = insertInt64Property( id, element, definition, value );
        if( result.isSuccess() ) {
            int64PropertyObject.setId(result.getId());
            int64PropertyObject.setRowVersion(0);
            int64PropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInt64Property( Guid id, long rowVersion, Guid element, Guid definition, long value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int64PropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setInt64(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt64Property( Int64PropertyObject int64PropertyObject ) throws SQLException {
        Guid id = int64PropertyObject.getId();
        long rowVersion = int64PropertyObject.getRowVersion();
        Guid element = int64PropertyObject.getElement();
        Guid definition = int64PropertyObject.getDefinition();
        long value = int64PropertyObject.getValue();
        var result = updateInt64Property( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            int64PropertyObject.setRowVersion(result.getRowVersion());
            int64PropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt64Property( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int64PropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt64Property( Int64PropertyObject int64PropertyObject ) throws SQLException {
        var id = int64PropertyObject.getId( );
        var rowVersion = int64PropertyObject.getRowVersion();
        var result = deleteInt64Property( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertReferenceProperty( Guid id, Guid element, Guid definition, Guid value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ReferencePropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1ReferenceProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ReferencePropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertReferenceProperty( ReferencePropertyObject referencePropertyObject ) throws SQLException {
        Guid id = referencePropertyObject.getId( );
        Guid element = referencePropertyObject.getElement( );
        Guid definition = referencePropertyObject.getDefinition( );
        Guid value = referencePropertyObject.getValue( );
        var result = insertReferenceProperty( id, element, definition, value );
        if( result.isSuccess() ) {
            referencePropertyObject.setId(result.getId());
            referencePropertyObject.setRowVersion(0);
            referencePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1ReferenceProperty( ReferencePropertyObject referencePropertyObject ) throws SQLException {
        Guid id = referencePropertyObject.getId( );
        Guid element = referencePropertyObject.getElement( );
        Guid definition = referencePropertyObject.getDefinition( );
        var result = insert1ReferenceProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            referencePropertyObject.setId( result.getId( ) );
            referencePropertyObject.setRowVersion(0);
            referencePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateReferenceProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferencePropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1ReferenceProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferencePropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2ReferenceProperty( Guid id, long rowVersion, Guid value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferencePropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateReferenceProperty( ReferencePropertyObject referencePropertyObject ) throws SQLException {
        Guid id = referencePropertyObject.getId();
        long rowVersion = referencePropertyObject.getRowVersion();
        Guid element = referencePropertyObject.getElement();
        Guid definition = referencePropertyObject.getDefinition();
        Guid value = referencePropertyObject.getValue();
        var result = updateReferenceProperty( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            referencePropertyObject.setRowVersion(result.getRowVersion());
            referencePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1ReferenceProperty( ReferencePropertyObject referencePropertyObject ) throws SQLException {
        Guid id = referencePropertyObject.getId();
        long rowVersion = referencePropertyObject.getRowVersion();
        Guid element = referencePropertyObject.getElement();
        Guid definition = referencePropertyObject.getDefinition();
        var result = update1ReferenceProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            referencePropertyObject.setRowVersion(result.getRowVersion());
            referencePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2ReferenceProperty( ReferencePropertyObject referencePropertyObject ) throws SQLException {
        Guid id = referencePropertyObject.getId();
        long rowVersion = referencePropertyObject.getRowVersion();
        Guid value = referencePropertyObject.getValue();
        var result = update2ReferenceProperty( id, rowVersion, value );
        if( result.isSuccess( ) ) {
            referencePropertyObject.setRowVersion(result.getRowVersion());
            referencePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteReferenceProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ReferencePropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteReferenceProperty( ReferencePropertyObject referencePropertyObject ) throws SQLException {
        var id = referencePropertyObject.getId( );
        var rowVersion = referencePropertyObject.getRowVersion();
        var result = deleteReferenceProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSByteProperty( Guid id, Guid element, Guid definition, byte value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SBytePropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setInt8(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSByteProperty( SBytePropertyObject sBytePropertyObject ) throws SQLException {
        Guid id = sBytePropertyObject.getId( );
        Guid element = sBytePropertyObject.getElement( );
        Guid definition = sBytePropertyObject.getDefinition( );
        byte value = sBytePropertyObject.getValue( );
        var result = insertSByteProperty( id, element, definition, value );
        if( result.isSuccess() ) {
            sBytePropertyObject.setId(result.getId());
            sBytePropertyObject.setRowVersion(0);
            sBytePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSByteProperty( Guid id, long rowVersion, Guid element, Guid definition, byte value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SBytePropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setInt8(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSByteProperty( SBytePropertyObject sBytePropertyObject ) throws SQLException {
        Guid id = sBytePropertyObject.getId();
        long rowVersion = sBytePropertyObject.getRowVersion();
        Guid element = sBytePropertyObject.getElement();
        Guid definition = sBytePropertyObject.getDefinition();
        byte value = sBytePropertyObject.getValue();
        var result = updateSByteProperty( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            sBytePropertyObject.setRowVersion(result.getRowVersion());
            sBytePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSByteProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SBytePropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSByteProperty( SBytePropertyObject sBytePropertyObject ) throws SQLException {
        var id = sBytePropertyObject.getId( );
        var rowVersion = sBytePropertyObject.getRowVersion();
        var result = deleteSByteProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSingleProperty( Guid id, Guid element, Guid definition, float value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SinglePropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setSingle(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSingleProperty( SinglePropertyObject singlePropertyObject ) throws SQLException {
        Guid id = singlePropertyObject.getId( );
        Guid element = singlePropertyObject.getElement( );
        Guid definition = singlePropertyObject.getDefinition( );
        float value = singlePropertyObject.getValue( );
        var result = insertSingleProperty( id, element, definition, value );
        if( result.isSuccess() ) {
            singlePropertyObject.setId(result.getId());
            singlePropertyObject.setRowVersion(0);
            singlePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSingleProperty( Guid id, long rowVersion, Guid element, Guid definition, float value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SinglePropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setSingle(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSingleProperty( SinglePropertyObject singlePropertyObject ) throws SQLException {
        Guid id = singlePropertyObject.getId();
        long rowVersion = singlePropertyObject.getRowVersion();
        Guid element = singlePropertyObject.getElement();
        Guid definition = singlePropertyObject.getDefinition();
        float value = singlePropertyObject.getValue();
        var result = updateSingleProperty( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            singlePropertyObject.setRowVersion(result.getRowVersion());
            singlePropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSingleProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SinglePropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSingleProperty( SinglePropertyObject singlePropertyObject ) throws SQLException {
        var id = singlePropertyObject.getId( );
        var rowVersion = singlePropertyObject.getRowVersion();
        var result = deleteSingleProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertStringProperty( Guid id, Guid element, Guid definition, String value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call StringPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setString(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertStringProperty( StringPropertyObject stringPropertyObject ) throws SQLException {
        Guid id = stringPropertyObject.getId( );
        Guid element = stringPropertyObject.getElement( );
        Guid definition = stringPropertyObject.getDefinition( );
        String value = stringPropertyObject.getValue( );
        var result = insertStringProperty( id, element, definition, value );
        if( result.isSuccess() ) {
            stringPropertyObject.setId(result.getId());
            stringPropertyObject.setRowVersion(0);
            stringPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateStringProperty( Guid id, long rowVersion, Guid element, Guid definition, String value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call StringPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setString(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateStringProperty( StringPropertyObject stringPropertyObject ) throws SQLException {
        Guid id = stringPropertyObject.getId();
        long rowVersion = stringPropertyObject.getRowVersion();
        Guid element = stringPropertyObject.getElement();
        Guid definition = stringPropertyObject.getDefinition();
        String value = stringPropertyObject.getValue();
        var result = updateStringProperty( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            stringPropertyObject.setRowVersion(result.getRowVersion());
            stringPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteStringProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call StringPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteStringProperty( StringPropertyObject stringPropertyObject ) throws SQLException {
        var id = stringPropertyObject.getId( );
        var rowVersion = stringPropertyObject.getRowVersion();
        var result = deleteStringProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBinaryTimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BinaryTimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1BinaryTimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BinaryTimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBinaryTimeseriesProperty( BinaryTimeseriesPropertyObject binaryTimeseriesPropertyObject ) throws SQLException {
        Guid id = binaryTimeseriesPropertyObject.getId( );
        Guid element = binaryTimeseriesPropertyObject.getElement( );
        Guid definition = binaryTimeseriesPropertyObject.getDefinition( );
        Guid timeseries = binaryTimeseriesPropertyObject.getTimeseries( );
        var result = insertBinaryTimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            binaryTimeseriesPropertyObject.setId(result.getId());
            binaryTimeseriesPropertyObject.setRowVersion(0);
            binaryTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1BinaryTimeseriesProperty( BinaryTimeseriesPropertyObject binaryTimeseriesPropertyObject ) throws SQLException {
        Guid id = binaryTimeseriesPropertyObject.getId( );
        Guid element = binaryTimeseriesPropertyObject.getElement( );
        Guid definition = binaryTimeseriesPropertyObject.getDefinition( );
        var result = insert1BinaryTimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            binaryTimeseriesPropertyObject.setId( result.getId( ) );
            binaryTimeseriesPropertyObject.setRowVersion(0);
            binaryTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateBinaryTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BinaryTimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1BinaryTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BinaryTimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2BinaryTimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BinaryTimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBinaryTimeseriesProperty( BinaryTimeseriesPropertyObject binaryTimeseriesPropertyObject ) throws SQLException {
        Guid id = binaryTimeseriesPropertyObject.getId();
        long rowVersion = binaryTimeseriesPropertyObject.getRowVersion();
        Guid element = binaryTimeseriesPropertyObject.getElement();
        Guid definition = binaryTimeseriesPropertyObject.getDefinition();
        Guid timeseries = binaryTimeseriesPropertyObject.getTimeseries();
        var result = updateBinaryTimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            binaryTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            binaryTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1BinaryTimeseriesProperty( BinaryTimeseriesPropertyObject binaryTimeseriesPropertyObject ) throws SQLException {
        Guid id = binaryTimeseriesPropertyObject.getId();
        long rowVersion = binaryTimeseriesPropertyObject.getRowVersion();
        Guid element = binaryTimeseriesPropertyObject.getElement();
        Guid definition = binaryTimeseriesPropertyObject.getDefinition();
        var result = update1BinaryTimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            binaryTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            binaryTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2BinaryTimeseriesProperty( BinaryTimeseriesPropertyObject binaryTimeseriesPropertyObject ) throws SQLException {
        Guid id = binaryTimeseriesPropertyObject.getId();
        long rowVersion = binaryTimeseriesPropertyObject.getRowVersion();
        Guid timeseries = binaryTimeseriesPropertyObject.getTimeseries();
        var result = update2BinaryTimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            binaryTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            binaryTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBinaryTimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BinaryTimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBinaryTimeseriesProperty( BinaryTimeseriesPropertyObject binaryTimeseriesPropertyObject ) throws SQLException {
        var id = binaryTimeseriesPropertyObject.getId( );
        var rowVersion = binaryTimeseriesPropertyObject.getRowVersion();
        var result = deleteBinaryTimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBooleanTimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BooleanTimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1BooleanTimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BooleanTimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBooleanTimeseriesProperty( BooleanTimeseriesPropertyObject booleanTimeseriesPropertyObject ) throws SQLException {
        Guid id = booleanTimeseriesPropertyObject.getId( );
        Guid element = booleanTimeseriesPropertyObject.getElement( );
        Guid definition = booleanTimeseriesPropertyObject.getDefinition( );
        Guid timeseries = booleanTimeseriesPropertyObject.getTimeseries( );
        var result = insertBooleanTimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            booleanTimeseriesPropertyObject.setId(result.getId());
            booleanTimeseriesPropertyObject.setRowVersion(0);
            booleanTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1BooleanTimeseriesProperty( BooleanTimeseriesPropertyObject booleanTimeseriesPropertyObject ) throws SQLException {
        Guid id = booleanTimeseriesPropertyObject.getId( );
        Guid element = booleanTimeseriesPropertyObject.getElement( );
        Guid definition = booleanTimeseriesPropertyObject.getDefinition( );
        var result = insert1BooleanTimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            booleanTimeseriesPropertyObject.setId( result.getId( ) );
            booleanTimeseriesPropertyObject.setRowVersion(0);
            booleanTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateBooleanTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BooleanTimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1BooleanTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BooleanTimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2BooleanTimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BooleanTimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBooleanTimeseriesProperty( BooleanTimeseriesPropertyObject booleanTimeseriesPropertyObject ) throws SQLException {
        Guid id = booleanTimeseriesPropertyObject.getId();
        long rowVersion = booleanTimeseriesPropertyObject.getRowVersion();
        Guid element = booleanTimeseriesPropertyObject.getElement();
        Guid definition = booleanTimeseriesPropertyObject.getDefinition();
        Guid timeseries = booleanTimeseriesPropertyObject.getTimeseries();
        var result = updateBooleanTimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            booleanTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            booleanTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1BooleanTimeseriesProperty( BooleanTimeseriesPropertyObject booleanTimeseriesPropertyObject ) throws SQLException {
        Guid id = booleanTimeseriesPropertyObject.getId();
        long rowVersion = booleanTimeseriesPropertyObject.getRowVersion();
        Guid element = booleanTimeseriesPropertyObject.getElement();
        Guid definition = booleanTimeseriesPropertyObject.getDefinition();
        var result = update1BooleanTimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            booleanTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            booleanTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2BooleanTimeseriesProperty( BooleanTimeseriesPropertyObject booleanTimeseriesPropertyObject ) throws SQLException {
        Guid id = booleanTimeseriesPropertyObject.getId();
        long rowVersion = booleanTimeseriesPropertyObject.getRowVersion();
        Guid timeseries = booleanTimeseriesPropertyObject.getTimeseries();
        var result = update2BooleanTimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            booleanTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            booleanTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBooleanTimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BooleanTimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBooleanTimeseriesProperty( BooleanTimeseriesPropertyObject booleanTimeseriesPropertyObject ) throws SQLException {
        var id = booleanTimeseriesPropertyObject.getId( );
        var rowVersion = booleanTimeseriesPropertyObject.getRowVersion();
        var result = deleteBooleanTimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertByteTimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ByteTimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1ByteTimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ByteTimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertByteTimeseriesProperty( ByteTimeseriesPropertyObject byteTimeseriesPropertyObject ) throws SQLException {
        Guid id = byteTimeseriesPropertyObject.getId( );
        Guid element = byteTimeseriesPropertyObject.getElement( );
        Guid definition = byteTimeseriesPropertyObject.getDefinition( );
        Guid timeseries = byteTimeseriesPropertyObject.getTimeseries( );
        var result = insertByteTimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            byteTimeseriesPropertyObject.setId(result.getId());
            byteTimeseriesPropertyObject.setRowVersion(0);
            byteTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1ByteTimeseriesProperty( ByteTimeseriesPropertyObject byteTimeseriesPropertyObject ) throws SQLException {
        Guid id = byteTimeseriesPropertyObject.getId( );
        Guid element = byteTimeseriesPropertyObject.getElement( );
        Guid definition = byteTimeseriesPropertyObject.getDefinition( );
        var result = insert1ByteTimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            byteTimeseriesPropertyObject.setId( result.getId( ) );
            byteTimeseriesPropertyObject.setRowVersion(0);
            byteTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateByteTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ByteTimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1ByteTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ByteTimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2ByteTimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ByteTimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateByteTimeseriesProperty( ByteTimeseriesPropertyObject byteTimeseriesPropertyObject ) throws SQLException {
        Guid id = byteTimeseriesPropertyObject.getId();
        long rowVersion = byteTimeseriesPropertyObject.getRowVersion();
        Guid element = byteTimeseriesPropertyObject.getElement();
        Guid definition = byteTimeseriesPropertyObject.getDefinition();
        Guid timeseries = byteTimeseriesPropertyObject.getTimeseries();
        var result = updateByteTimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            byteTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            byteTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1ByteTimeseriesProperty( ByteTimeseriesPropertyObject byteTimeseriesPropertyObject ) throws SQLException {
        Guid id = byteTimeseriesPropertyObject.getId();
        long rowVersion = byteTimeseriesPropertyObject.getRowVersion();
        Guid element = byteTimeseriesPropertyObject.getElement();
        Guid definition = byteTimeseriesPropertyObject.getDefinition();
        var result = update1ByteTimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            byteTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            byteTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2ByteTimeseriesProperty( ByteTimeseriesPropertyObject byteTimeseriesPropertyObject ) throws SQLException {
        Guid id = byteTimeseriesPropertyObject.getId();
        long rowVersion = byteTimeseriesPropertyObject.getRowVersion();
        Guid timeseries = byteTimeseriesPropertyObject.getTimeseries();
        var result = update2ByteTimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            byteTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            byteTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteByteTimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ByteTimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteByteTimeseriesProperty( ByteTimeseriesPropertyObject byteTimeseriesPropertyObject ) throws SQLException {
        var id = byteTimeseriesPropertyObject.getId( );
        var rowVersion = byteTimeseriesPropertyObject.getRowVersion();
        var result = deleteByteTimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDateTimeTimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DateTimeTimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1DateTimeTimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DateTimeTimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDateTimeTimeseriesProperty( DateTimeTimeseriesPropertyObject dateTimeTimeseriesPropertyObject ) throws SQLException {
        Guid id = dateTimeTimeseriesPropertyObject.getId( );
        Guid element = dateTimeTimeseriesPropertyObject.getElement( );
        Guid definition = dateTimeTimeseriesPropertyObject.getDefinition( );
        Guid timeseries = dateTimeTimeseriesPropertyObject.getTimeseries( );
        var result = insertDateTimeTimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            dateTimeTimeseriesPropertyObject.setId(result.getId());
            dateTimeTimeseriesPropertyObject.setRowVersion(0);
            dateTimeTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1DateTimeTimeseriesProperty( DateTimeTimeseriesPropertyObject dateTimeTimeseriesPropertyObject ) throws SQLException {
        Guid id = dateTimeTimeseriesPropertyObject.getId( );
        Guid element = dateTimeTimeseriesPropertyObject.getElement( );
        Guid definition = dateTimeTimeseriesPropertyObject.getDefinition( );
        var result = insert1DateTimeTimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            dateTimeTimeseriesPropertyObject.setId( result.getId( ) );
            dateTimeTimeseriesPropertyObject.setRowVersion(0);
            dateTimeTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateDateTimeTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DateTimeTimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1DateTimeTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DateTimeTimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2DateTimeTimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DateTimeTimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDateTimeTimeseriesProperty( DateTimeTimeseriesPropertyObject dateTimeTimeseriesPropertyObject ) throws SQLException {
        Guid id = dateTimeTimeseriesPropertyObject.getId();
        long rowVersion = dateTimeTimeseriesPropertyObject.getRowVersion();
        Guid element = dateTimeTimeseriesPropertyObject.getElement();
        Guid definition = dateTimeTimeseriesPropertyObject.getDefinition();
        Guid timeseries = dateTimeTimeseriesPropertyObject.getTimeseries();
        var result = updateDateTimeTimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            dateTimeTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            dateTimeTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1DateTimeTimeseriesProperty( DateTimeTimeseriesPropertyObject dateTimeTimeseriesPropertyObject ) throws SQLException {
        Guid id = dateTimeTimeseriesPropertyObject.getId();
        long rowVersion = dateTimeTimeseriesPropertyObject.getRowVersion();
        Guid element = dateTimeTimeseriesPropertyObject.getElement();
        Guid definition = dateTimeTimeseriesPropertyObject.getDefinition();
        var result = update1DateTimeTimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            dateTimeTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            dateTimeTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2DateTimeTimeseriesProperty( DateTimeTimeseriesPropertyObject dateTimeTimeseriesPropertyObject ) throws SQLException {
        Guid id = dateTimeTimeseriesPropertyObject.getId();
        long rowVersion = dateTimeTimeseriesPropertyObject.getRowVersion();
        Guid timeseries = dateTimeTimeseriesPropertyObject.getTimeseries();
        var result = update2DateTimeTimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            dateTimeTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            dateTimeTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDateTimeTimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DateTimeTimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDateTimeTimeseriesProperty( DateTimeTimeseriesPropertyObject dateTimeTimeseriesPropertyObject ) throws SQLException {
        var id = dateTimeTimeseriesPropertyObject.getId( );
        var rowVersion = dateTimeTimeseriesPropertyObject.getRowVersion();
        var result = deleteDateTimeTimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDoubleTimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DoubleTimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1DoubleTimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DoubleTimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDoubleTimeseriesProperty( DoubleTimeseriesPropertyObject doubleTimeseriesPropertyObject ) throws SQLException {
        Guid id = doubleTimeseriesPropertyObject.getId( );
        Guid element = doubleTimeseriesPropertyObject.getElement( );
        Guid definition = doubleTimeseriesPropertyObject.getDefinition( );
        Guid timeseries = doubleTimeseriesPropertyObject.getTimeseries( );
        var result = insertDoubleTimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            doubleTimeseriesPropertyObject.setId(result.getId());
            doubleTimeseriesPropertyObject.setRowVersion(0);
            doubleTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1DoubleTimeseriesProperty( DoubleTimeseriesPropertyObject doubleTimeseriesPropertyObject ) throws SQLException {
        Guid id = doubleTimeseriesPropertyObject.getId( );
        Guid element = doubleTimeseriesPropertyObject.getElement( );
        Guid definition = doubleTimeseriesPropertyObject.getDefinition( );
        var result = insert1DoubleTimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            doubleTimeseriesPropertyObject.setId( result.getId( ) );
            doubleTimeseriesPropertyObject.setRowVersion(0);
            doubleTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateDoubleTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DoubleTimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1DoubleTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DoubleTimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2DoubleTimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DoubleTimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDoubleTimeseriesProperty( DoubleTimeseriesPropertyObject doubleTimeseriesPropertyObject ) throws SQLException {
        Guid id = doubleTimeseriesPropertyObject.getId();
        long rowVersion = doubleTimeseriesPropertyObject.getRowVersion();
        Guid element = doubleTimeseriesPropertyObject.getElement();
        Guid definition = doubleTimeseriesPropertyObject.getDefinition();
        Guid timeseries = doubleTimeseriesPropertyObject.getTimeseries();
        var result = updateDoubleTimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            doubleTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            doubleTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1DoubleTimeseriesProperty( DoubleTimeseriesPropertyObject doubleTimeseriesPropertyObject ) throws SQLException {
        Guid id = doubleTimeseriesPropertyObject.getId();
        long rowVersion = doubleTimeseriesPropertyObject.getRowVersion();
        Guid element = doubleTimeseriesPropertyObject.getElement();
        Guid definition = doubleTimeseriesPropertyObject.getDefinition();
        var result = update1DoubleTimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            doubleTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            doubleTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2DoubleTimeseriesProperty( DoubleTimeseriesPropertyObject doubleTimeseriesPropertyObject ) throws SQLException {
        Guid id = doubleTimeseriesPropertyObject.getId();
        long rowVersion = doubleTimeseriesPropertyObject.getRowVersion();
        Guid timeseries = doubleTimeseriesPropertyObject.getTimeseries();
        var result = update2DoubleTimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            doubleTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            doubleTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDoubleTimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DoubleTimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDoubleTimeseriesProperty( DoubleTimeseriesPropertyObject doubleTimeseriesPropertyObject ) throws SQLException {
        var id = doubleTimeseriesPropertyObject.getId( );
        var rowVersion = doubleTimeseriesPropertyObject.getRowVersion();
        var result = deleteDoubleTimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGuidTimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GuidTimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GuidTimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GuidTimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGuidTimeseriesProperty( GuidTimeseriesPropertyObject guidTimeseriesPropertyObject ) throws SQLException {
        Guid id = guidTimeseriesPropertyObject.getId( );
        Guid element = guidTimeseriesPropertyObject.getElement( );
        Guid definition = guidTimeseriesPropertyObject.getDefinition( );
        Guid timeseries = guidTimeseriesPropertyObject.getTimeseries( );
        var result = insertGuidTimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            guidTimeseriesPropertyObject.setId(result.getId());
            guidTimeseriesPropertyObject.setRowVersion(0);
            guidTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GuidTimeseriesProperty( GuidTimeseriesPropertyObject guidTimeseriesPropertyObject ) throws SQLException {
        Guid id = guidTimeseriesPropertyObject.getId( );
        Guid element = guidTimeseriesPropertyObject.getElement( );
        Guid definition = guidTimeseriesPropertyObject.getDefinition( );
        var result = insert1GuidTimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            guidTimeseriesPropertyObject.setId( result.getId( ) );
            guidTimeseriesPropertyObject.setRowVersion(0);
            guidTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGuidTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GuidTimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GuidTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GuidTimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GuidTimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GuidTimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGuidTimeseriesProperty( GuidTimeseriesPropertyObject guidTimeseriesPropertyObject ) throws SQLException {
        Guid id = guidTimeseriesPropertyObject.getId();
        long rowVersion = guidTimeseriesPropertyObject.getRowVersion();
        Guid element = guidTimeseriesPropertyObject.getElement();
        Guid definition = guidTimeseriesPropertyObject.getDefinition();
        Guid timeseries = guidTimeseriesPropertyObject.getTimeseries();
        var result = updateGuidTimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            guidTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            guidTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GuidTimeseriesProperty( GuidTimeseriesPropertyObject guidTimeseriesPropertyObject ) throws SQLException {
        Guid id = guidTimeseriesPropertyObject.getId();
        long rowVersion = guidTimeseriesPropertyObject.getRowVersion();
        Guid element = guidTimeseriesPropertyObject.getElement();
        Guid definition = guidTimeseriesPropertyObject.getDefinition();
        var result = update1GuidTimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            guidTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            guidTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GuidTimeseriesProperty( GuidTimeseriesPropertyObject guidTimeseriesPropertyObject ) throws SQLException {
        Guid id = guidTimeseriesPropertyObject.getId();
        long rowVersion = guidTimeseriesPropertyObject.getRowVersion();
        Guid timeseries = guidTimeseriesPropertyObject.getTimeseries();
        var result = update2GuidTimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            guidTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            guidTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGuidTimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GuidTimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGuidTimeseriesProperty( GuidTimeseriesPropertyObject guidTimeseriesPropertyObject ) throws SQLException {
        var id = guidTimeseriesPropertyObject.getId( );
        var rowVersion = guidTimeseriesPropertyObject.getRowVersion();
        var result = deleteGuidTimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt16TimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int16TimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Int16TimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int16TimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt16TimeseriesProperty( Int16TimeseriesPropertyObject int16TimeseriesPropertyObject ) throws SQLException {
        Guid id = int16TimeseriesPropertyObject.getId( );
        Guid element = int16TimeseriesPropertyObject.getElement( );
        Guid definition = int16TimeseriesPropertyObject.getDefinition( );
        Guid timeseries = int16TimeseriesPropertyObject.getTimeseries( );
        var result = insertInt16TimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            int16TimeseriesPropertyObject.setId(result.getId());
            int16TimeseriesPropertyObject.setRowVersion(0);
            int16TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Int16TimeseriesProperty( Int16TimeseriesPropertyObject int16TimeseriesPropertyObject ) throws SQLException {
        Guid id = int16TimeseriesPropertyObject.getId( );
        Guid element = int16TimeseriesPropertyObject.getElement( );
        Guid definition = int16TimeseriesPropertyObject.getDefinition( );
        var result = insert1Int16TimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            int16TimeseriesPropertyObject.setId( result.getId( ) );
            int16TimeseriesPropertyObject.setRowVersion(0);
            int16TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateInt16TimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int16TimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Int16TimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int16TimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Int16TimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int16TimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt16TimeseriesProperty( Int16TimeseriesPropertyObject int16TimeseriesPropertyObject ) throws SQLException {
        Guid id = int16TimeseriesPropertyObject.getId();
        long rowVersion = int16TimeseriesPropertyObject.getRowVersion();
        Guid element = int16TimeseriesPropertyObject.getElement();
        Guid definition = int16TimeseriesPropertyObject.getDefinition();
        Guid timeseries = int16TimeseriesPropertyObject.getTimeseries();
        var result = updateInt16TimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            int16TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            int16TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Int16TimeseriesProperty( Int16TimeseriesPropertyObject int16TimeseriesPropertyObject ) throws SQLException {
        Guid id = int16TimeseriesPropertyObject.getId();
        long rowVersion = int16TimeseriesPropertyObject.getRowVersion();
        Guid element = int16TimeseriesPropertyObject.getElement();
        Guid definition = int16TimeseriesPropertyObject.getDefinition();
        var result = update1Int16TimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            int16TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            int16TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Int16TimeseriesProperty( Int16TimeseriesPropertyObject int16TimeseriesPropertyObject ) throws SQLException {
        Guid id = int16TimeseriesPropertyObject.getId();
        long rowVersion = int16TimeseriesPropertyObject.getRowVersion();
        Guid timeseries = int16TimeseriesPropertyObject.getTimeseries();
        var result = update2Int16TimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            int16TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            int16TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt16TimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int16TimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt16TimeseriesProperty( Int16TimeseriesPropertyObject int16TimeseriesPropertyObject ) throws SQLException {
        var id = int16TimeseriesPropertyObject.getId( );
        var rowVersion = int16TimeseriesPropertyObject.getRowVersion();
        var result = deleteInt16TimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt32TimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int32TimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Int32TimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int32TimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt32TimeseriesProperty( Int32TimeseriesPropertyObject int32TimeseriesPropertyObject ) throws SQLException {
        Guid id = int32TimeseriesPropertyObject.getId( );
        Guid element = int32TimeseriesPropertyObject.getElement( );
        Guid definition = int32TimeseriesPropertyObject.getDefinition( );
        Guid timeseries = int32TimeseriesPropertyObject.getTimeseries( );
        var result = insertInt32TimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            int32TimeseriesPropertyObject.setId(result.getId());
            int32TimeseriesPropertyObject.setRowVersion(0);
            int32TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Int32TimeseriesProperty( Int32TimeseriesPropertyObject int32TimeseriesPropertyObject ) throws SQLException {
        Guid id = int32TimeseriesPropertyObject.getId( );
        Guid element = int32TimeseriesPropertyObject.getElement( );
        Guid definition = int32TimeseriesPropertyObject.getDefinition( );
        var result = insert1Int32TimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            int32TimeseriesPropertyObject.setId( result.getId( ) );
            int32TimeseriesPropertyObject.setRowVersion(0);
            int32TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateInt32TimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int32TimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Int32TimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int32TimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Int32TimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int32TimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt32TimeseriesProperty( Int32TimeseriesPropertyObject int32TimeseriesPropertyObject ) throws SQLException {
        Guid id = int32TimeseriesPropertyObject.getId();
        long rowVersion = int32TimeseriesPropertyObject.getRowVersion();
        Guid element = int32TimeseriesPropertyObject.getElement();
        Guid definition = int32TimeseriesPropertyObject.getDefinition();
        Guid timeseries = int32TimeseriesPropertyObject.getTimeseries();
        var result = updateInt32TimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            int32TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            int32TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Int32TimeseriesProperty( Int32TimeseriesPropertyObject int32TimeseriesPropertyObject ) throws SQLException {
        Guid id = int32TimeseriesPropertyObject.getId();
        long rowVersion = int32TimeseriesPropertyObject.getRowVersion();
        Guid element = int32TimeseriesPropertyObject.getElement();
        Guid definition = int32TimeseriesPropertyObject.getDefinition();
        var result = update1Int32TimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            int32TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            int32TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Int32TimeseriesProperty( Int32TimeseriesPropertyObject int32TimeseriesPropertyObject ) throws SQLException {
        Guid id = int32TimeseriesPropertyObject.getId();
        long rowVersion = int32TimeseriesPropertyObject.getRowVersion();
        Guid timeseries = int32TimeseriesPropertyObject.getTimeseries();
        var result = update2Int32TimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            int32TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            int32TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt32TimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int32TimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt32TimeseriesProperty( Int32TimeseriesPropertyObject int32TimeseriesPropertyObject ) throws SQLException {
        var id = int32TimeseriesPropertyObject.getId( );
        var rowVersion = int32TimeseriesPropertyObject.getRowVersion();
        var result = deleteInt32TimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt64TimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int64TimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Int64TimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int64TimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt64TimeseriesProperty( Int64TimeseriesPropertyObject int64TimeseriesPropertyObject ) throws SQLException {
        Guid id = int64TimeseriesPropertyObject.getId( );
        Guid element = int64TimeseriesPropertyObject.getElement( );
        Guid definition = int64TimeseriesPropertyObject.getDefinition( );
        Guid timeseries = int64TimeseriesPropertyObject.getTimeseries( );
        var result = insertInt64TimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            int64TimeseriesPropertyObject.setId(result.getId());
            int64TimeseriesPropertyObject.setRowVersion(0);
            int64TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Int64TimeseriesProperty( Int64TimeseriesPropertyObject int64TimeseriesPropertyObject ) throws SQLException {
        Guid id = int64TimeseriesPropertyObject.getId( );
        Guid element = int64TimeseriesPropertyObject.getElement( );
        Guid definition = int64TimeseriesPropertyObject.getDefinition( );
        var result = insert1Int64TimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            int64TimeseriesPropertyObject.setId( result.getId( ) );
            int64TimeseriesPropertyObject.setRowVersion(0);
            int64TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateInt64TimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int64TimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Int64TimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int64TimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Int64TimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int64TimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt64TimeseriesProperty( Int64TimeseriesPropertyObject int64TimeseriesPropertyObject ) throws SQLException {
        Guid id = int64TimeseriesPropertyObject.getId();
        long rowVersion = int64TimeseriesPropertyObject.getRowVersion();
        Guid element = int64TimeseriesPropertyObject.getElement();
        Guid definition = int64TimeseriesPropertyObject.getDefinition();
        Guid timeseries = int64TimeseriesPropertyObject.getTimeseries();
        var result = updateInt64TimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            int64TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            int64TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Int64TimeseriesProperty( Int64TimeseriesPropertyObject int64TimeseriesPropertyObject ) throws SQLException {
        Guid id = int64TimeseriesPropertyObject.getId();
        long rowVersion = int64TimeseriesPropertyObject.getRowVersion();
        Guid element = int64TimeseriesPropertyObject.getElement();
        Guid definition = int64TimeseriesPropertyObject.getDefinition();
        var result = update1Int64TimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            int64TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            int64TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Int64TimeseriesProperty( Int64TimeseriesPropertyObject int64TimeseriesPropertyObject ) throws SQLException {
        Guid id = int64TimeseriesPropertyObject.getId();
        long rowVersion = int64TimeseriesPropertyObject.getRowVersion();
        Guid timeseries = int64TimeseriesPropertyObject.getTimeseries();
        var result = update2Int64TimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            int64TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            int64TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt64TimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int64TimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt64TimeseriesProperty( Int64TimeseriesPropertyObject int64TimeseriesPropertyObject ) throws SQLException {
        var id = int64TimeseriesPropertyObject.getId( );
        var rowVersion = int64TimeseriesPropertyObject.getRowVersion();
        var result = deleteInt64TimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertReferenceTimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ReferenceTimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1ReferenceTimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ReferenceTimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertReferenceTimeseriesProperty( ReferenceTimeseriesPropertyObject referenceTimeseriesPropertyObject ) throws SQLException {
        Guid id = referenceTimeseriesPropertyObject.getId( );
        Guid element = referenceTimeseriesPropertyObject.getElement( );
        Guid definition = referenceTimeseriesPropertyObject.getDefinition( );
        Guid timeseries = referenceTimeseriesPropertyObject.getTimeseries( );
        var result = insertReferenceTimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            referenceTimeseriesPropertyObject.setId(result.getId());
            referenceTimeseriesPropertyObject.setRowVersion(0);
            referenceTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1ReferenceTimeseriesProperty( ReferenceTimeseriesPropertyObject referenceTimeseriesPropertyObject ) throws SQLException {
        Guid id = referenceTimeseriesPropertyObject.getId( );
        Guid element = referenceTimeseriesPropertyObject.getElement( );
        Guid definition = referenceTimeseriesPropertyObject.getDefinition( );
        var result = insert1ReferenceTimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            referenceTimeseriesPropertyObject.setId( result.getId( ) );
            referenceTimeseriesPropertyObject.setRowVersion(0);
            referenceTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateReferenceTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferenceTimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1ReferenceTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferenceTimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2ReferenceTimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferenceTimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateReferenceTimeseriesProperty( ReferenceTimeseriesPropertyObject referenceTimeseriesPropertyObject ) throws SQLException {
        Guid id = referenceTimeseriesPropertyObject.getId();
        long rowVersion = referenceTimeseriesPropertyObject.getRowVersion();
        Guid element = referenceTimeseriesPropertyObject.getElement();
        Guid definition = referenceTimeseriesPropertyObject.getDefinition();
        Guid timeseries = referenceTimeseriesPropertyObject.getTimeseries();
        var result = updateReferenceTimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            referenceTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            referenceTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1ReferenceTimeseriesProperty( ReferenceTimeseriesPropertyObject referenceTimeseriesPropertyObject ) throws SQLException {
        Guid id = referenceTimeseriesPropertyObject.getId();
        long rowVersion = referenceTimeseriesPropertyObject.getRowVersion();
        Guid element = referenceTimeseriesPropertyObject.getElement();
        Guid definition = referenceTimeseriesPropertyObject.getDefinition();
        var result = update1ReferenceTimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            referenceTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            referenceTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2ReferenceTimeseriesProperty( ReferenceTimeseriesPropertyObject referenceTimeseriesPropertyObject ) throws SQLException {
        Guid id = referenceTimeseriesPropertyObject.getId();
        long rowVersion = referenceTimeseriesPropertyObject.getRowVersion();
        Guid timeseries = referenceTimeseriesPropertyObject.getTimeseries();
        var result = update2ReferenceTimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            referenceTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            referenceTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteReferenceTimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ReferenceTimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteReferenceTimeseriesProperty( ReferenceTimeseriesPropertyObject referenceTimeseriesPropertyObject ) throws SQLException {
        var id = referenceTimeseriesPropertyObject.getId( );
        var rowVersion = referenceTimeseriesPropertyObject.getRowVersion();
        var result = deleteReferenceTimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSByteTimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SByteTimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1SByteTimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SByteTimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSByteTimeseriesProperty( SByteTimeseriesPropertyObject sByteTimeseriesPropertyObject ) throws SQLException {
        Guid id = sByteTimeseriesPropertyObject.getId( );
        Guid element = sByteTimeseriesPropertyObject.getElement( );
        Guid definition = sByteTimeseriesPropertyObject.getDefinition( );
        Guid timeseries = sByteTimeseriesPropertyObject.getTimeseries( );
        var result = insertSByteTimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            sByteTimeseriesPropertyObject.setId(result.getId());
            sByteTimeseriesPropertyObject.setRowVersion(0);
            sByteTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1SByteTimeseriesProperty( SByteTimeseriesPropertyObject sByteTimeseriesPropertyObject ) throws SQLException {
        Guid id = sByteTimeseriesPropertyObject.getId( );
        Guid element = sByteTimeseriesPropertyObject.getElement( );
        Guid definition = sByteTimeseriesPropertyObject.getDefinition( );
        var result = insert1SByteTimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            sByteTimeseriesPropertyObject.setId( result.getId( ) );
            sByteTimeseriesPropertyObject.setRowVersion(0);
            sByteTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateSByteTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SByteTimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1SByteTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SByteTimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2SByteTimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SByteTimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSByteTimeseriesProperty( SByteTimeseriesPropertyObject sByteTimeseriesPropertyObject ) throws SQLException {
        Guid id = sByteTimeseriesPropertyObject.getId();
        long rowVersion = sByteTimeseriesPropertyObject.getRowVersion();
        Guid element = sByteTimeseriesPropertyObject.getElement();
        Guid definition = sByteTimeseriesPropertyObject.getDefinition();
        Guid timeseries = sByteTimeseriesPropertyObject.getTimeseries();
        var result = updateSByteTimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            sByteTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            sByteTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1SByteTimeseriesProperty( SByteTimeseriesPropertyObject sByteTimeseriesPropertyObject ) throws SQLException {
        Guid id = sByteTimeseriesPropertyObject.getId();
        long rowVersion = sByteTimeseriesPropertyObject.getRowVersion();
        Guid element = sByteTimeseriesPropertyObject.getElement();
        Guid definition = sByteTimeseriesPropertyObject.getDefinition();
        var result = update1SByteTimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            sByteTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            sByteTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2SByteTimeseriesProperty( SByteTimeseriesPropertyObject sByteTimeseriesPropertyObject ) throws SQLException {
        Guid id = sByteTimeseriesPropertyObject.getId();
        long rowVersion = sByteTimeseriesPropertyObject.getRowVersion();
        Guid timeseries = sByteTimeseriesPropertyObject.getTimeseries();
        var result = update2SByteTimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            sByteTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            sByteTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSByteTimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SByteTimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSByteTimeseriesProperty( SByteTimeseriesPropertyObject sByteTimeseriesPropertyObject ) throws SQLException {
        var id = sByteTimeseriesPropertyObject.getId( );
        var rowVersion = sByteTimeseriesPropertyObject.getRowVersion();
        var result = deleteSByteTimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSingleTimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SingleTimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1SingleTimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SingleTimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSingleTimeseriesProperty( SingleTimeseriesPropertyObject singleTimeseriesPropertyObject ) throws SQLException {
        Guid id = singleTimeseriesPropertyObject.getId( );
        Guid element = singleTimeseriesPropertyObject.getElement( );
        Guid definition = singleTimeseriesPropertyObject.getDefinition( );
        Guid timeseries = singleTimeseriesPropertyObject.getTimeseries( );
        var result = insertSingleTimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            singleTimeseriesPropertyObject.setId(result.getId());
            singleTimeseriesPropertyObject.setRowVersion(0);
            singleTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1SingleTimeseriesProperty( SingleTimeseriesPropertyObject singleTimeseriesPropertyObject ) throws SQLException {
        Guid id = singleTimeseriesPropertyObject.getId( );
        Guid element = singleTimeseriesPropertyObject.getElement( );
        Guid definition = singleTimeseriesPropertyObject.getDefinition( );
        var result = insert1SingleTimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            singleTimeseriesPropertyObject.setId( result.getId( ) );
            singleTimeseriesPropertyObject.setRowVersion(0);
            singleTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateSingleTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SingleTimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1SingleTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SingleTimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2SingleTimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SingleTimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSingleTimeseriesProperty( SingleTimeseriesPropertyObject singleTimeseriesPropertyObject ) throws SQLException {
        Guid id = singleTimeseriesPropertyObject.getId();
        long rowVersion = singleTimeseriesPropertyObject.getRowVersion();
        Guid element = singleTimeseriesPropertyObject.getElement();
        Guid definition = singleTimeseriesPropertyObject.getDefinition();
        Guid timeseries = singleTimeseriesPropertyObject.getTimeseries();
        var result = updateSingleTimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            singleTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            singleTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1SingleTimeseriesProperty( SingleTimeseriesPropertyObject singleTimeseriesPropertyObject ) throws SQLException {
        Guid id = singleTimeseriesPropertyObject.getId();
        long rowVersion = singleTimeseriesPropertyObject.getRowVersion();
        Guid element = singleTimeseriesPropertyObject.getElement();
        Guid definition = singleTimeseriesPropertyObject.getDefinition();
        var result = update1SingleTimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            singleTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            singleTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2SingleTimeseriesProperty( SingleTimeseriesPropertyObject singleTimeseriesPropertyObject ) throws SQLException {
        Guid id = singleTimeseriesPropertyObject.getId();
        long rowVersion = singleTimeseriesPropertyObject.getRowVersion();
        Guid timeseries = singleTimeseriesPropertyObject.getTimeseries();
        var result = update2SingleTimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            singleTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            singleTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSingleTimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SingleTimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSingleTimeseriesProperty( SingleTimeseriesPropertyObject singleTimeseriesPropertyObject ) throws SQLException {
        var id = singleTimeseriesPropertyObject.getId( );
        var rowVersion = singleTimeseriesPropertyObject.getRowVersion();
        var result = deleteSingleTimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertStringTimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call StringTimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1StringTimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call StringTimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertStringTimeseriesProperty( StringTimeseriesPropertyObject stringTimeseriesPropertyObject ) throws SQLException {
        Guid id = stringTimeseriesPropertyObject.getId( );
        Guid element = stringTimeseriesPropertyObject.getElement( );
        Guid definition = stringTimeseriesPropertyObject.getDefinition( );
        Guid timeseries = stringTimeseriesPropertyObject.getTimeseries( );
        var result = insertStringTimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            stringTimeseriesPropertyObject.setId(result.getId());
            stringTimeseriesPropertyObject.setRowVersion(0);
            stringTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1StringTimeseriesProperty( StringTimeseriesPropertyObject stringTimeseriesPropertyObject ) throws SQLException {
        Guid id = stringTimeseriesPropertyObject.getId( );
        Guid element = stringTimeseriesPropertyObject.getElement( );
        Guid definition = stringTimeseriesPropertyObject.getDefinition( );
        var result = insert1StringTimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            stringTimeseriesPropertyObject.setId( result.getId( ) );
            stringTimeseriesPropertyObject.setRowVersion(0);
            stringTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateStringTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call StringTimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1StringTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call StringTimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2StringTimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call StringTimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateStringTimeseriesProperty( StringTimeseriesPropertyObject stringTimeseriesPropertyObject ) throws SQLException {
        Guid id = stringTimeseriesPropertyObject.getId();
        long rowVersion = stringTimeseriesPropertyObject.getRowVersion();
        Guid element = stringTimeseriesPropertyObject.getElement();
        Guid definition = stringTimeseriesPropertyObject.getDefinition();
        Guid timeseries = stringTimeseriesPropertyObject.getTimeseries();
        var result = updateStringTimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            stringTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            stringTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1StringTimeseriesProperty( StringTimeseriesPropertyObject stringTimeseriesPropertyObject ) throws SQLException {
        Guid id = stringTimeseriesPropertyObject.getId();
        long rowVersion = stringTimeseriesPropertyObject.getRowVersion();
        Guid element = stringTimeseriesPropertyObject.getElement();
        Guid definition = stringTimeseriesPropertyObject.getDefinition();
        var result = update1StringTimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            stringTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            stringTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2StringTimeseriesProperty( StringTimeseriesPropertyObject stringTimeseriesPropertyObject ) throws SQLException {
        Guid id = stringTimeseriesPropertyObject.getId();
        long rowVersion = stringTimeseriesPropertyObject.getRowVersion();
        Guid timeseries = stringTimeseriesPropertyObject.getTimeseries();
        var result = update2StringTimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            stringTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            stringTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteStringTimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call StringTimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteStringTimeseriesProperty( StringTimeseriesPropertyObject stringTimeseriesPropertyObject ) throws SQLException {
        var id = stringTimeseriesPropertyObject.getId( );
        var rowVersion = stringTimeseriesPropertyObject.getRowVersion();
        var result = deleteStringTimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTimeSpanTimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TimeSpanTimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1TimeSpanTimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TimeSpanTimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTimeSpanTimeseriesProperty( TimeSpanTimeseriesPropertyObject timeSpanTimeseriesPropertyObject ) throws SQLException {
        Guid id = timeSpanTimeseriesPropertyObject.getId( );
        Guid element = timeSpanTimeseriesPropertyObject.getElement( );
        Guid definition = timeSpanTimeseriesPropertyObject.getDefinition( );
        Guid timeseries = timeSpanTimeseriesPropertyObject.getTimeseries( );
        var result = insertTimeSpanTimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            timeSpanTimeseriesPropertyObject.setId(result.getId());
            timeSpanTimeseriesPropertyObject.setRowVersion(0);
            timeSpanTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1TimeSpanTimeseriesProperty( TimeSpanTimeseriesPropertyObject timeSpanTimeseriesPropertyObject ) throws SQLException {
        Guid id = timeSpanTimeseriesPropertyObject.getId( );
        Guid element = timeSpanTimeseriesPropertyObject.getElement( );
        Guid definition = timeSpanTimeseriesPropertyObject.getDefinition( );
        var result = insert1TimeSpanTimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            timeSpanTimeseriesPropertyObject.setId( result.getId( ) );
            timeSpanTimeseriesPropertyObject.setRowVersion(0);
            timeSpanTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateTimeSpanTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeSpanTimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1TimeSpanTimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeSpanTimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2TimeSpanTimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeSpanTimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTimeSpanTimeseriesProperty( TimeSpanTimeseriesPropertyObject timeSpanTimeseriesPropertyObject ) throws SQLException {
        Guid id = timeSpanTimeseriesPropertyObject.getId();
        long rowVersion = timeSpanTimeseriesPropertyObject.getRowVersion();
        Guid element = timeSpanTimeseriesPropertyObject.getElement();
        Guid definition = timeSpanTimeseriesPropertyObject.getDefinition();
        Guid timeseries = timeSpanTimeseriesPropertyObject.getTimeseries();
        var result = updateTimeSpanTimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            timeSpanTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            timeSpanTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1TimeSpanTimeseriesProperty( TimeSpanTimeseriesPropertyObject timeSpanTimeseriesPropertyObject ) throws SQLException {
        Guid id = timeSpanTimeseriesPropertyObject.getId();
        long rowVersion = timeSpanTimeseriesPropertyObject.getRowVersion();
        Guid element = timeSpanTimeseriesPropertyObject.getElement();
        Guid definition = timeSpanTimeseriesPropertyObject.getDefinition();
        var result = update1TimeSpanTimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            timeSpanTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            timeSpanTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2TimeSpanTimeseriesProperty( TimeSpanTimeseriesPropertyObject timeSpanTimeseriesPropertyObject ) throws SQLException {
        Guid id = timeSpanTimeseriesPropertyObject.getId();
        long rowVersion = timeSpanTimeseriesPropertyObject.getRowVersion();
        Guid timeseries = timeSpanTimeseriesPropertyObject.getTimeseries();
        var result = update2TimeSpanTimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            timeSpanTimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            timeSpanTimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTimeSpanTimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TimeSpanTimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTimeSpanTimeseriesProperty( TimeSpanTimeseriesPropertyObject timeSpanTimeseriesPropertyObject ) throws SQLException {
        var id = timeSpanTimeseriesPropertyObject.getId( );
        var rowVersion = timeSpanTimeseriesPropertyObject.getRowVersion();
        var result = deleteTimeSpanTimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt16TimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt16TimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1UInt16TimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt16TimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt16TimeseriesProperty( UInt16TimeseriesPropertyObject uInt16TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt16TimeseriesPropertyObject.getId( );
        Guid element = uInt16TimeseriesPropertyObject.getElement( );
        Guid definition = uInt16TimeseriesPropertyObject.getDefinition( );
        Guid timeseries = uInt16TimeseriesPropertyObject.getTimeseries( );
        var result = insertUInt16TimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            uInt16TimeseriesPropertyObject.setId(result.getId());
            uInt16TimeseriesPropertyObject.setRowVersion(0);
            uInt16TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1UInt16TimeseriesProperty( UInt16TimeseriesPropertyObject uInt16TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt16TimeseriesPropertyObject.getId( );
        Guid element = uInt16TimeseriesPropertyObject.getElement( );
        Guid definition = uInt16TimeseriesPropertyObject.getDefinition( );
        var result = insert1UInt16TimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            uInt16TimeseriesPropertyObject.setId( result.getId( ) );
            uInt16TimeseriesPropertyObject.setRowVersion(0);
            uInt16TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateUInt16TimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt16TimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1UInt16TimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt16TimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2UInt16TimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt16TimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt16TimeseriesProperty( UInt16TimeseriesPropertyObject uInt16TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt16TimeseriesPropertyObject.getId();
        long rowVersion = uInt16TimeseriesPropertyObject.getRowVersion();
        Guid element = uInt16TimeseriesPropertyObject.getElement();
        Guid definition = uInt16TimeseriesPropertyObject.getDefinition();
        Guid timeseries = uInt16TimeseriesPropertyObject.getTimeseries();
        var result = updateUInt16TimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            uInt16TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            uInt16TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1UInt16TimeseriesProperty( UInt16TimeseriesPropertyObject uInt16TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt16TimeseriesPropertyObject.getId();
        long rowVersion = uInt16TimeseriesPropertyObject.getRowVersion();
        Guid element = uInt16TimeseriesPropertyObject.getElement();
        Guid definition = uInt16TimeseriesPropertyObject.getDefinition();
        var result = update1UInt16TimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            uInt16TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            uInt16TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2UInt16TimeseriesProperty( UInt16TimeseriesPropertyObject uInt16TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt16TimeseriesPropertyObject.getId();
        long rowVersion = uInt16TimeseriesPropertyObject.getRowVersion();
        Guid timeseries = uInt16TimeseriesPropertyObject.getTimeseries();
        var result = update2UInt16TimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            uInt16TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            uInt16TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt16TimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt16TimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt16TimeseriesProperty( UInt16TimeseriesPropertyObject uInt16TimeseriesPropertyObject ) throws SQLException {
        var id = uInt16TimeseriesPropertyObject.getId( );
        var rowVersion = uInt16TimeseriesPropertyObject.getRowVersion();
        var result = deleteUInt16TimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt32TimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt32TimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1UInt32TimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt32TimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt32TimeseriesProperty( UInt32TimeseriesPropertyObject uInt32TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt32TimeseriesPropertyObject.getId( );
        Guid element = uInt32TimeseriesPropertyObject.getElement( );
        Guid definition = uInt32TimeseriesPropertyObject.getDefinition( );
        Guid timeseries = uInt32TimeseriesPropertyObject.getTimeseries( );
        var result = insertUInt32TimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            uInt32TimeseriesPropertyObject.setId(result.getId());
            uInt32TimeseriesPropertyObject.setRowVersion(0);
            uInt32TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1UInt32TimeseriesProperty( UInt32TimeseriesPropertyObject uInt32TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt32TimeseriesPropertyObject.getId( );
        Guid element = uInt32TimeseriesPropertyObject.getElement( );
        Guid definition = uInt32TimeseriesPropertyObject.getDefinition( );
        var result = insert1UInt32TimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            uInt32TimeseriesPropertyObject.setId( result.getId( ) );
            uInt32TimeseriesPropertyObject.setRowVersion(0);
            uInt32TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateUInt32TimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt32TimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1UInt32TimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt32TimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2UInt32TimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt32TimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt32TimeseriesProperty( UInt32TimeseriesPropertyObject uInt32TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt32TimeseriesPropertyObject.getId();
        long rowVersion = uInt32TimeseriesPropertyObject.getRowVersion();
        Guid element = uInt32TimeseriesPropertyObject.getElement();
        Guid definition = uInt32TimeseriesPropertyObject.getDefinition();
        Guid timeseries = uInt32TimeseriesPropertyObject.getTimeseries();
        var result = updateUInt32TimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            uInt32TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            uInt32TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1UInt32TimeseriesProperty( UInt32TimeseriesPropertyObject uInt32TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt32TimeseriesPropertyObject.getId();
        long rowVersion = uInt32TimeseriesPropertyObject.getRowVersion();
        Guid element = uInt32TimeseriesPropertyObject.getElement();
        Guid definition = uInt32TimeseriesPropertyObject.getDefinition();
        var result = update1UInt32TimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            uInt32TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            uInt32TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2UInt32TimeseriesProperty( UInt32TimeseriesPropertyObject uInt32TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt32TimeseriesPropertyObject.getId();
        long rowVersion = uInt32TimeseriesPropertyObject.getRowVersion();
        Guid timeseries = uInt32TimeseriesPropertyObject.getTimeseries();
        var result = update2UInt32TimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            uInt32TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            uInt32TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt32TimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt32TimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt32TimeseriesProperty( UInt32TimeseriesPropertyObject uInt32TimeseriesPropertyObject ) throws SQLException {
        var id = uInt32TimeseriesPropertyObject.getId( );
        var rowVersion = uInt32TimeseriesPropertyObject.getRowVersion();
        var result = deleteUInt32TimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt64TimeseriesProperty( Guid id, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt64TimeseriesPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setNullableGuid(4, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1UInt64TimeseriesProperty( Guid id, Guid element, Guid definition ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt64TimeseriesPropertyInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt64TimeseriesProperty( UInt64TimeseriesPropertyObject uInt64TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt64TimeseriesPropertyObject.getId( );
        Guid element = uInt64TimeseriesPropertyObject.getElement( );
        Guid definition = uInt64TimeseriesPropertyObject.getDefinition( );
        Guid timeseries = uInt64TimeseriesPropertyObject.getTimeseries( );
        var result = insertUInt64TimeseriesProperty( id, element, definition, timeseries );
        if( result.isSuccess() ) {
            uInt64TimeseriesPropertyObject.setId(result.getId());
            uInt64TimeseriesPropertyObject.setRowVersion(0);
            uInt64TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1UInt64TimeseriesProperty( UInt64TimeseriesPropertyObject uInt64TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt64TimeseriesPropertyObject.getId( );
        Guid element = uInt64TimeseriesPropertyObject.getElement( );
        Guid definition = uInt64TimeseriesPropertyObject.getDefinition( );
        var result = insert1UInt64TimeseriesProperty( id, element, definition );
        if( result.isSuccess( ) ) {
            uInt64TimeseriesPropertyObject.setId( result.getId( ) );
            uInt64TimeseriesPropertyObject.setRowVersion(0);
            uInt64TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateUInt64TimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt64TimeseriesPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setNullableGuid(5, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1UInt64TimeseriesProperty( Guid id, long rowVersion, Guid element, Guid definition ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt64TimeseriesPropertyUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2UInt64TimeseriesProperty( Guid id, long rowVersion, Guid timeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt64TimeseriesPropertyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, timeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt64TimeseriesProperty( UInt64TimeseriesPropertyObject uInt64TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt64TimeseriesPropertyObject.getId();
        long rowVersion = uInt64TimeseriesPropertyObject.getRowVersion();
        Guid element = uInt64TimeseriesPropertyObject.getElement();
        Guid definition = uInt64TimeseriesPropertyObject.getDefinition();
        Guid timeseries = uInt64TimeseriesPropertyObject.getTimeseries();
        var result = updateUInt64TimeseriesProperty( id, rowVersion, element, definition, timeseries );
        if( result.isSuccess( ) ) {
            uInt64TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            uInt64TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1UInt64TimeseriesProperty( UInt64TimeseriesPropertyObject uInt64TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt64TimeseriesPropertyObject.getId();
        long rowVersion = uInt64TimeseriesPropertyObject.getRowVersion();
        Guid element = uInt64TimeseriesPropertyObject.getElement();
        Guid definition = uInt64TimeseriesPropertyObject.getDefinition();
        var result = update1UInt64TimeseriesProperty( id, rowVersion, element, definition );
        if( result.isSuccess( ) ) {
            uInt64TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            uInt64TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2UInt64TimeseriesProperty( UInt64TimeseriesPropertyObject uInt64TimeseriesPropertyObject ) throws SQLException {
        Guid id = uInt64TimeseriesPropertyObject.getId();
        long rowVersion = uInt64TimeseriesPropertyObject.getRowVersion();
        Guid timeseries = uInt64TimeseriesPropertyObject.getTimeseries();
        var result = update2UInt64TimeseriesProperty( id, rowVersion, timeseries );
        if( result.isSuccess( ) ) {
            uInt64TimeseriesPropertyObject.setRowVersion(result.getRowVersion());
            uInt64TimeseriesPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt64TimeseriesProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt64TimeseriesPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt64TimeseriesProperty( UInt64TimeseriesPropertyObject uInt64TimeseriesPropertyObject ) throws SQLException {
        var id = uInt64TimeseriesPropertyObject.getId( );
        var rowVersion = uInt64TimeseriesPropertyObject.getRowVersion();
        var result = deleteUInt64TimeseriesProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTimeSpanProperty( Guid id, Guid element, Guid definition, TimeSpan value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TimeSpanPropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setTimeSpan(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTimeSpanProperty( TimeSpanPropertyObject timeSpanPropertyObject ) throws SQLException {
        Guid id = timeSpanPropertyObject.getId( );
        Guid element = timeSpanPropertyObject.getElement( );
        Guid definition = timeSpanPropertyObject.getDefinition( );
        TimeSpan value = timeSpanPropertyObject.getValue( );
        var result = insertTimeSpanProperty( id, element, definition, value );
        if( result.isSuccess() ) {
            timeSpanPropertyObject.setId(result.getId());
            timeSpanPropertyObject.setRowVersion(0);
            timeSpanPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTimeSpanProperty( Guid id, long rowVersion, Guid element, Guid definition, TimeSpan value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeSpanPropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setTimeSpan(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTimeSpanProperty( TimeSpanPropertyObject timeSpanPropertyObject ) throws SQLException {
        Guid id = timeSpanPropertyObject.getId();
        long rowVersion = timeSpanPropertyObject.getRowVersion();
        Guid element = timeSpanPropertyObject.getElement();
        Guid definition = timeSpanPropertyObject.getDefinition();
        TimeSpan value = timeSpanPropertyObject.getValue();
        var result = updateTimeSpanProperty( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            timeSpanPropertyObject.setRowVersion(result.getRowVersion());
            timeSpanPropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTimeSpanProperty( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TimeSpanPropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTimeSpanProperty( TimeSpanPropertyObject timeSpanPropertyObject ) throws SQLException {
        var id = timeSpanPropertyObject.getId( );
        var rowVersion = timeSpanPropertyObject.getRowVersion();
        var result = deleteTimeSpanProperty( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt16Property( Guid id, Guid element, Guid definition, short value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt16PropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setUInt16(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt16Property( UInt16PropertyObject uInt16PropertyObject ) throws SQLException {
        Guid id = uInt16PropertyObject.getId( );
        Guid element = uInt16PropertyObject.getElement( );
        Guid definition = uInt16PropertyObject.getDefinition( );
        short value = uInt16PropertyObject.getValue( );
        var result = insertUInt16Property( id, element, definition, value );
        if( result.isSuccess() ) {
            uInt16PropertyObject.setId(result.getId());
            uInt16PropertyObject.setRowVersion(0);
            uInt16PropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateUInt16Property( Guid id, long rowVersion, Guid element, Guid definition, short value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt16PropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setUInt16(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt16Property( UInt16PropertyObject uInt16PropertyObject ) throws SQLException {
        Guid id = uInt16PropertyObject.getId();
        long rowVersion = uInt16PropertyObject.getRowVersion();
        Guid element = uInt16PropertyObject.getElement();
        Guid definition = uInt16PropertyObject.getDefinition();
        short value = uInt16PropertyObject.getValue();
        var result = updateUInt16Property( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            uInt16PropertyObject.setRowVersion(result.getRowVersion());
            uInt16PropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt16Property( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt16PropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt16Property( UInt16PropertyObject uInt16PropertyObject ) throws SQLException {
        var id = uInt16PropertyObject.getId( );
        var rowVersion = uInt16PropertyObject.getRowVersion();
        var result = deleteUInt16Property( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt32Property( Guid id, Guid element, Guid definition, int value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt32PropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setUInt32(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt32Property( UInt32PropertyObject uInt32PropertyObject ) throws SQLException {
        Guid id = uInt32PropertyObject.getId( );
        Guid element = uInt32PropertyObject.getElement( );
        Guid definition = uInt32PropertyObject.getDefinition( );
        int value = uInt32PropertyObject.getValue( );
        var result = insertUInt32Property( id, element, definition, value );
        if( result.isSuccess() ) {
            uInt32PropertyObject.setId(result.getId());
            uInt32PropertyObject.setRowVersion(0);
            uInt32PropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateUInt32Property( Guid id, long rowVersion, Guid element, Guid definition, int value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt32PropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setUInt32(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt32Property( UInt32PropertyObject uInt32PropertyObject ) throws SQLException {
        Guid id = uInt32PropertyObject.getId();
        long rowVersion = uInt32PropertyObject.getRowVersion();
        Guid element = uInt32PropertyObject.getElement();
        Guid definition = uInt32PropertyObject.getDefinition();
        int value = uInt32PropertyObject.getValue();
        var result = updateUInt32Property( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            uInt32PropertyObject.setRowVersion(result.getRowVersion());
            uInt32PropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt32Property( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt32PropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt32Property( UInt32PropertyObject uInt32PropertyObject ) throws SQLException {
        var id = uInt32PropertyObject.getId( );
        var rowVersion = uInt32PropertyObject.getRowVersion();
        var result = deleteUInt32Property( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt64Property( Guid id, Guid element, Guid definition, long value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt64PropertyInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, element);
            callableStatement.setGuid(3, definition);
            callableStatement.setInt64(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt64Property( UInt64PropertyObject uInt64PropertyObject ) throws SQLException {
        Guid id = uInt64PropertyObject.getId( );
        Guid element = uInt64PropertyObject.getElement( );
        Guid definition = uInt64PropertyObject.getDefinition( );
        long value = uInt64PropertyObject.getValue( );
        var result = insertUInt64Property( id, element, definition, value );
        if( result.isSuccess() ) {
            uInt64PropertyObject.setId(result.getId());
            uInt64PropertyObject.setRowVersion(0);
            uInt64PropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateUInt64Property( Guid id, long rowVersion, Guid element, Guid definition, long value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt64PropertyUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, element);
            callableStatement.setGuid(4, definition);
            callableStatement.setInt64(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt64Property( UInt64PropertyObject uInt64PropertyObject ) throws SQLException {
        Guid id = uInt64PropertyObject.getId();
        long rowVersion = uInt64PropertyObject.getRowVersion();
        Guid element = uInt64PropertyObject.getElement();
        Guid definition = uInt64PropertyObject.getDefinition();
        long value = uInt64PropertyObject.getValue();
        var result = updateUInt64Property( id, rowVersion, element, definition, value );
        if( result.isSuccess( ) ) {
            uInt64PropertyObject.setRowVersion(result.getRowVersion());
            uInt64PropertyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt64Property( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt64PropertyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt64Property( UInt64PropertyObject uInt64PropertyObject ) throws SQLException {
        var id = uInt64PropertyObject.getId( );
        var rowVersion = uInt64PropertyObject.getRowVersion();
        var result = deleteUInt64Property( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBinaryPropertyDefinition( Guid id, Guid elementType, String name, String description, byte[] defaultValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BinaryPropertyDefinitionInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setBinary(5, defaultValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBinaryPropertyDefinition( BinaryPropertyDefinitionObject binaryPropertyDefinitionObject ) throws SQLException {
        Guid id = binaryPropertyDefinitionObject.getId( );
        Guid elementType = binaryPropertyDefinitionObject.getElementType( );
        String name = binaryPropertyDefinitionObject.getName( );
        String description = binaryPropertyDefinitionObject.getDescription( );
        byte[] defaultValue = binaryPropertyDefinitionObject.getDefaultValue( );
        var result = insertBinaryPropertyDefinition( id, elementType, name, description, defaultValue );
        if( result.isSuccess() ) {
            binaryPropertyDefinitionObject.setId(result.getId());
            binaryPropertyDefinitionObject.setRowVersion(0);
            binaryPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateBinaryPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, byte[] defaultValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BinaryPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setBinary(6, defaultValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBinaryPropertyDefinition( BinaryPropertyDefinitionObject binaryPropertyDefinitionObject ) throws SQLException {
        Guid id = binaryPropertyDefinitionObject.getId();
        long rowVersion = binaryPropertyDefinitionObject.getRowVersion();
        Guid elementType = binaryPropertyDefinitionObject.getElementType();
        String name = binaryPropertyDefinitionObject.getName();
        String description = binaryPropertyDefinitionObject.getDescription();
        byte[] defaultValue = binaryPropertyDefinitionObject.getDefaultValue();
        var result = updateBinaryPropertyDefinition( id, rowVersion, elementType, name, description, defaultValue );
        if( result.isSuccess( ) ) {
            binaryPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            binaryPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBinaryPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BinaryPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBinaryPropertyDefinition( BinaryPropertyDefinitionObject binaryPropertyDefinitionObject ) throws SQLException {
        var id = binaryPropertyDefinitionObject.getId( );
        var rowVersion = binaryPropertyDefinitionObject.getRowVersion();
        var result = deleteBinaryPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBooleanPropertyDefinition( Guid id, Guid elementType, String name, String description, boolean defaultValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BooleanPropertyDefinitionInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setBoolean(5, defaultValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBooleanPropertyDefinition( BooleanPropertyDefinitionObject booleanPropertyDefinitionObject ) throws SQLException {
        Guid id = booleanPropertyDefinitionObject.getId( );
        Guid elementType = booleanPropertyDefinitionObject.getElementType( );
        String name = booleanPropertyDefinitionObject.getName( );
        String description = booleanPropertyDefinitionObject.getDescription( );
        boolean defaultValue = booleanPropertyDefinitionObject.getDefaultValue( );
        var result = insertBooleanPropertyDefinition( id, elementType, name, description, defaultValue );
        if( result.isSuccess() ) {
            booleanPropertyDefinitionObject.setId(result.getId());
            booleanPropertyDefinitionObject.setRowVersion(0);
            booleanPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateBooleanPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, boolean defaultValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BooleanPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setBoolean(6, defaultValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBooleanPropertyDefinition( BooleanPropertyDefinitionObject booleanPropertyDefinitionObject ) throws SQLException {
        Guid id = booleanPropertyDefinitionObject.getId();
        long rowVersion = booleanPropertyDefinitionObject.getRowVersion();
        Guid elementType = booleanPropertyDefinitionObject.getElementType();
        String name = booleanPropertyDefinitionObject.getName();
        String description = booleanPropertyDefinitionObject.getDescription();
        boolean defaultValue = booleanPropertyDefinitionObject.getDefaultValue();
        var result = updateBooleanPropertyDefinition( id, rowVersion, elementType, name, description, defaultValue );
        if( result.isSuccess( ) ) {
            booleanPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            booleanPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBooleanPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BooleanPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBooleanPropertyDefinition( BooleanPropertyDefinitionObject booleanPropertyDefinitionObject ) throws SQLException {
        var id = booleanPropertyDefinitionObject.getId( );
        var rowVersion = booleanPropertyDefinitionObject.getRowVersion();
        var result = deleteBooleanPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBytePropertyDefinition( Guid id, Guid elementType, String name, String description, byte defaultValue, byte minValue, byte maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BytePropertyDefinitionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setUInt8(5, defaultValue);
            callableStatement.setUInt8(6, minValue);
            callableStatement.setUInt8(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBytePropertyDefinition( BytePropertyDefinitionObject bytePropertyDefinitionObject ) throws SQLException {
        Guid id = bytePropertyDefinitionObject.getId( );
        Guid elementType = bytePropertyDefinitionObject.getElementType( );
        String name = bytePropertyDefinitionObject.getName( );
        String description = bytePropertyDefinitionObject.getDescription( );
        byte defaultValue = bytePropertyDefinitionObject.getDefaultValue( );
        byte minValue = bytePropertyDefinitionObject.getMinValue( );
        byte maxValue = bytePropertyDefinitionObject.getMaxValue( );
        var result = insertBytePropertyDefinition( id, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess() ) {
            bytePropertyDefinitionObject.setId(result.getId());
            bytePropertyDefinitionObject.setRowVersion(0);
            bytePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateBytePropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, byte defaultValue, byte minValue, byte maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BytePropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setUInt8(6, defaultValue);
            callableStatement.setUInt8(7, minValue);
            callableStatement.setUInt8(8, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBytePropertyDefinition( BytePropertyDefinitionObject bytePropertyDefinitionObject ) throws SQLException {
        Guid id = bytePropertyDefinitionObject.getId();
        long rowVersion = bytePropertyDefinitionObject.getRowVersion();
        Guid elementType = bytePropertyDefinitionObject.getElementType();
        String name = bytePropertyDefinitionObject.getName();
        String description = bytePropertyDefinitionObject.getDescription();
        byte defaultValue = bytePropertyDefinitionObject.getDefaultValue();
        byte minValue = bytePropertyDefinitionObject.getMinValue();
        byte maxValue = bytePropertyDefinitionObject.getMaxValue();
        var result = updateBytePropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess( ) ) {
            bytePropertyDefinitionObject.setRowVersion(result.getRowVersion());
            bytePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBytePropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BytePropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBytePropertyDefinition( BytePropertyDefinitionObject bytePropertyDefinitionObject ) throws SQLException {
        var id = bytePropertyDefinitionObject.getId( );
        var rowVersion = bytePropertyDefinitionObject.getRowVersion();
        var result = deleteBytePropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDateTimePropertyDefinition( Guid id, Guid elementType, String name, String description, String defaultValue, String minValue, String maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DateTimePropertyDefinitionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setString(5, defaultValue);
            callableStatement.setString(6, minValue);
            callableStatement.setString(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDateTimePropertyDefinition( DateTimePropertyDefinitionObject dateTimePropertyDefinitionObject ) throws SQLException {
        Guid id = dateTimePropertyDefinitionObject.getId( );
        Guid elementType = dateTimePropertyDefinitionObject.getElementType( );
        String name = dateTimePropertyDefinitionObject.getName( );
        String description = dateTimePropertyDefinitionObject.getDescription( );
        String defaultValue = dateTimePropertyDefinitionObject.getDefaultValue( );
        String minValue = dateTimePropertyDefinitionObject.getMinValue( );
        String maxValue = dateTimePropertyDefinitionObject.getMaxValue( );
        var result = insertDateTimePropertyDefinition( id, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess() ) {
            dateTimePropertyDefinitionObject.setId(result.getId());
            dateTimePropertyDefinitionObject.setRowVersion(0);
            dateTimePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateDateTimePropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, String defaultValue, String minValue, String maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DateTimePropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setString(6, defaultValue);
            callableStatement.setString(7, minValue);
            callableStatement.setString(8, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDateTimePropertyDefinition( DateTimePropertyDefinitionObject dateTimePropertyDefinitionObject ) throws SQLException {
        Guid id = dateTimePropertyDefinitionObject.getId();
        long rowVersion = dateTimePropertyDefinitionObject.getRowVersion();
        Guid elementType = dateTimePropertyDefinitionObject.getElementType();
        String name = dateTimePropertyDefinitionObject.getName();
        String description = dateTimePropertyDefinitionObject.getDescription();
        String defaultValue = dateTimePropertyDefinitionObject.getDefaultValue();
        String minValue = dateTimePropertyDefinitionObject.getMinValue();
        String maxValue = dateTimePropertyDefinitionObject.getMaxValue();
        var result = updateDateTimePropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess( ) ) {
            dateTimePropertyDefinitionObject.setRowVersion(result.getRowVersion());
            dateTimePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDateTimePropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DateTimePropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDateTimePropertyDefinition( DateTimePropertyDefinitionObject dateTimePropertyDefinitionObject ) throws SQLException {
        var id = dateTimePropertyDefinitionObject.getId( );
        var rowVersion = dateTimePropertyDefinitionObject.getRowVersion();
        var result = deleteDateTimePropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDoublePropertyDefinition( Guid id, Guid elementType, String name, String description, double defaultValue, double minValue, double maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DoublePropertyDefinitionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setDouble(5, defaultValue);
            callableStatement.setDouble(6, minValue);
            callableStatement.setDouble(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDoublePropertyDefinition( DoublePropertyDefinitionObject doublePropertyDefinitionObject ) throws SQLException {
        Guid id = doublePropertyDefinitionObject.getId( );
        Guid elementType = doublePropertyDefinitionObject.getElementType( );
        String name = doublePropertyDefinitionObject.getName( );
        String description = doublePropertyDefinitionObject.getDescription( );
        double defaultValue = doublePropertyDefinitionObject.getDefaultValue( );
        double minValue = doublePropertyDefinitionObject.getMinValue( );
        double maxValue = doublePropertyDefinitionObject.getMaxValue( );
        var result = insertDoublePropertyDefinition( id, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess() ) {
            doublePropertyDefinitionObject.setId(result.getId());
            doublePropertyDefinitionObject.setRowVersion(0);
            doublePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateDoublePropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, double defaultValue, double minValue, double maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DoublePropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setDouble(6, defaultValue);
            callableStatement.setDouble(7, minValue);
            callableStatement.setDouble(8, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDoublePropertyDefinition( DoublePropertyDefinitionObject doublePropertyDefinitionObject ) throws SQLException {
        Guid id = doublePropertyDefinitionObject.getId();
        long rowVersion = doublePropertyDefinitionObject.getRowVersion();
        Guid elementType = doublePropertyDefinitionObject.getElementType();
        String name = doublePropertyDefinitionObject.getName();
        String description = doublePropertyDefinitionObject.getDescription();
        double defaultValue = doublePropertyDefinitionObject.getDefaultValue();
        double minValue = doublePropertyDefinitionObject.getMinValue();
        double maxValue = doublePropertyDefinitionObject.getMaxValue();
        var result = updateDoublePropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess( ) ) {
            doublePropertyDefinitionObject.setRowVersion(result.getRowVersion());
            doublePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDoublePropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DoublePropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDoublePropertyDefinition( DoublePropertyDefinitionObject doublePropertyDefinitionObject ) throws SQLException {
        var id = doublePropertyDefinitionObject.getId( );
        var rowVersion = doublePropertyDefinitionObject.getRowVersion();
        var result = deleteDoublePropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGuidPropertyDefinition( Guid id, Guid elementType, String name, String description, Guid defaultValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GuidPropertyDefinitionInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setGuid(5, defaultValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGuidPropertyDefinition( GuidPropertyDefinitionObject guidPropertyDefinitionObject ) throws SQLException {
        Guid id = guidPropertyDefinitionObject.getId( );
        Guid elementType = guidPropertyDefinitionObject.getElementType( );
        String name = guidPropertyDefinitionObject.getName( );
        String description = guidPropertyDefinitionObject.getDescription( );
        Guid defaultValue = guidPropertyDefinitionObject.getDefaultValue( );
        var result = insertGuidPropertyDefinition( id, elementType, name, description, defaultValue );
        if( result.isSuccess() ) {
            guidPropertyDefinitionObject.setId(result.getId());
            guidPropertyDefinitionObject.setRowVersion(0);
            guidPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateGuidPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, Guid defaultValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GuidPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setGuid(6, defaultValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGuidPropertyDefinition( GuidPropertyDefinitionObject guidPropertyDefinitionObject ) throws SQLException {
        Guid id = guidPropertyDefinitionObject.getId();
        long rowVersion = guidPropertyDefinitionObject.getRowVersion();
        Guid elementType = guidPropertyDefinitionObject.getElementType();
        String name = guidPropertyDefinitionObject.getName();
        String description = guidPropertyDefinitionObject.getDescription();
        Guid defaultValue = guidPropertyDefinitionObject.getDefaultValue();
        var result = updateGuidPropertyDefinition( id, rowVersion, elementType, name, description, defaultValue );
        if( result.isSuccess( ) ) {
            guidPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            guidPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGuidPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GuidPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGuidPropertyDefinition( GuidPropertyDefinitionObject guidPropertyDefinitionObject ) throws SQLException {
        var id = guidPropertyDefinitionObject.getId( );
        var rowVersion = guidPropertyDefinitionObject.getRowVersion();
        var result = deleteGuidPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt16PropertyDefinition( Guid id, Guid elementType, String name, String description, short defaultValue, short minValue, short maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int16PropertyDefinitionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setInt16(5, defaultValue);
            callableStatement.setInt16(6, minValue);
            callableStatement.setInt16(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt16PropertyDefinition( Int16PropertyDefinitionObject int16PropertyDefinitionObject ) throws SQLException {
        Guid id = int16PropertyDefinitionObject.getId( );
        Guid elementType = int16PropertyDefinitionObject.getElementType( );
        String name = int16PropertyDefinitionObject.getName( );
        String description = int16PropertyDefinitionObject.getDescription( );
        short defaultValue = int16PropertyDefinitionObject.getDefaultValue( );
        short minValue = int16PropertyDefinitionObject.getMinValue( );
        short maxValue = int16PropertyDefinitionObject.getMaxValue( );
        var result = insertInt16PropertyDefinition( id, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess() ) {
            int16PropertyDefinitionObject.setId(result.getId());
            int16PropertyDefinitionObject.setRowVersion(0);
            int16PropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInt16PropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, short defaultValue, short minValue, short maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int16PropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setInt16(6, defaultValue);
            callableStatement.setInt16(7, minValue);
            callableStatement.setInt16(8, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt16PropertyDefinition( Int16PropertyDefinitionObject int16PropertyDefinitionObject ) throws SQLException {
        Guid id = int16PropertyDefinitionObject.getId();
        long rowVersion = int16PropertyDefinitionObject.getRowVersion();
        Guid elementType = int16PropertyDefinitionObject.getElementType();
        String name = int16PropertyDefinitionObject.getName();
        String description = int16PropertyDefinitionObject.getDescription();
        short defaultValue = int16PropertyDefinitionObject.getDefaultValue();
        short minValue = int16PropertyDefinitionObject.getMinValue();
        short maxValue = int16PropertyDefinitionObject.getMaxValue();
        var result = updateInt16PropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess( ) ) {
            int16PropertyDefinitionObject.setRowVersion(result.getRowVersion());
            int16PropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt16PropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int16PropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt16PropertyDefinition( Int16PropertyDefinitionObject int16PropertyDefinitionObject ) throws SQLException {
        var id = int16PropertyDefinitionObject.getId( );
        var rowVersion = int16PropertyDefinitionObject.getRowVersion();
        var result = deleteInt16PropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt32PropertyDefinition( Guid id, Guid elementType, String name, String description, int defaultValue, int minValue, int maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int32PropertyDefinitionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setInt32(5, defaultValue);
            callableStatement.setInt32(6, minValue);
            callableStatement.setInt32(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt32PropertyDefinition( Int32PropertyDefinitionObject int32PropertyDefinitionObject ) throws SQLException {
        Guid id = int32PropertyDefinitionObject.getId( );
        Guid elementType = int32PropertyDefinitionObject.getElementType( );
        String name = int32PropertyDefinitionObject.getName( );
        String description = int32PropertyDefinitionObject.getDescription( );
        int defaultValue = int32PropertyDefinitionObject.getDefaultValue( );
        int minValue = int32PropertyDefinitionObject.getMinValue( );
        int maxValue = int32PropertyDefinitionObject.getMaxValue( );
        var result = insertInt32PropertyDefinition( id, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess() ) {
            int32PropertyDefinitionObject.setId(result.getId());
            int32PropertyDefinitionObject.setRowVersion(0);
            int32PropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInt32PropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, int defaultValue, int minValue, int maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int32PropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setInt32(6, defaultValue);
            callableStatement.setInt32(7, minValue);
            callableStatement.setInt32(8, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt32PropertyDefinition( Int32PropertyDefinitionObject int32PropertyDefinitionObject ) throws SQLException {
        Guid id = int32PropertyDefinitionObject.getId();
        long rowVersion = int32PropertyDefinitionObject.getRowVersion();
        Guid elementType = int32PropertyDefinitionObject.getElementType();
        String name = int32PropertyDefinitionObject.getName();
        String description = int32PropertyDefinitionObject.getDescription();
        int defaultValue = int32PropertyDefinitionObject.getDefaultValue();
        int minValue = int32PropertyDefinitionObject.getMinValue();
        int maxValue = int32PropertyDefinitionObject.getMaxValue();
        var result = updateInt32PropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess( ) ) {
            int32PropertyDefinitionObject.setRowVersion(result.getRowVersion());
            int32PropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt32PropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int32PropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt32PropertyDefinition( Int32PropertyDefinitionObject int32PropertyDefinitionObject ) throws SQLException {
        var id = int32PropertyDefinitionObject.getId( );
        var rowVersion = int32PropertyDefinitionObject.getRowVersion();
        var result = deleteInt32PropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt64PropertyDefinition( Guid id, Guid elementType, String name, String description, long defaultValue, long minValue, long maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int64PropertyDefinitionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setInt64(5, defaultValue);
            callableStatement.setInt64(6, minValue);
            callableStatement.setInt64(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt64PropertyDefinition( Int64PropertyDefinitionObject int64PropertyDefinitionObject ) throws SQLException {
        Guid id = int64PropertyDefinitionObject.getId( );
        Guid elementType = int64PropertyDefinitionObject.getElementType( );
        String name = int64PropertyDefinitionObject.getName( );
        String description = int64PropertyDefinitionObject.getDescription( );
        long defaultValue = int64PropertyDefinitionObject.getDefaultValue( );
        long minValue = int64PropertyDefinitionObject.getMinValue( );
        long maxValue = int64PropertyDefinitionObject.getMaxValue( );
        var result = insertInt64PropertyDefinition( id, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess() ) {
            int64PropertyDefinitionObject.setId(result.getId());
            int64PropertyDefinitionObject.setRowVersion(0);
            int64PropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInt64PropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, long defaultValue, long minValue, long maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int64PropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setInt64(6, defaultValue);
            callableStatement.setInt64(7, minValue);
            callableStatement.setInt64(8, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt64PropertyDefinition( Int64PropertyDefinitionObject int64PropertyDefinitionObject ) throws SQLException {
        Guid id = int64PropertyDefinitionObject.getId();
        long rowVersion = int64PropertyDefinitionObject.getRowVersion();
        Guid elementType = int64PropertyDefinitionObject.getElementType();
        String name = int64PropertyDefinitionObject.getName();
        String description = int64PropertyDefinitionObject.getDescription();
        long defaultValue = int64PropertyDefinitionObject.getDefaultValue();
        long minValue = int64PropertyDefinitionObject.getMinValue();
        long maxValue = int64PropertyDefinitionObject.getMaxValue();
        var result = updateInt64PropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess( ) ) {
            int64PropertyDefinitionObject.setRowVersion(result.getRowVersion());
            int64PropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt64PropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int64PropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt64PropertyDefinition( Int64PropertyDefinitionObject int64PropertyDefinitionObject ) throws SQLException {
        var id = int64PropertyDefinitionObject.getId( );
        var rowVersion = int64PropertyDefinitionObject.getRowVersion();
        var result = deleteInt64PropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertReferencePropertyDefinition( Guid id, Guid elementType, String name, String description, Guid defaultValue, Guid referencedElementType ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ReferencePropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setNullableGuid(5, defaultValue);
            callableStatement.setNullableGuid(6, referencedElementType);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1ReferencePropertyDefinition( Guid id, Guid elementType, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ReferencePropertyDefinitionInsert1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertReferencePropertyDefinition( ReferencePropertyDefinitionObject referencePropertyDefinitionObject ) throws SQLException {
        Guid id = referencePropertyDefinitionObject.getId( );
        Guid elementType = referencePropertyDefinitionObject.getElementType( );
        String name = referencePropertyDefinitionObject.getName( );
        String description = referencePropertyDefinitionObject.getDescription( );
        Guid defaultValue = referencePropertyDefinitionObject.getDefaultValue( );
        Guid referencedElementType = referencePropertyDefinitionObject.getReferencedElementType( );
        var result = insertReferencePropertyDefinition( id, elementType, name, description, defaultValue, referencedElementType );
        if( result.isSuccess() ) {
            referencePropertyDefinitionObject.setId(result.getId());
            referencePropertyDefinitionObject.setRowVersion(0);
            referencePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1ReferencePropertyDefinition( ReferencePropertyDefinitionObject referencePropertyDefinitionObject ) throws SQLException {
        Guid id = referencePropertyDefinitionObject.getId( );
        Guid elementType = referencePropertyDefinitionObject.getElementType( );
        String name = referencePropertyDefinitionObject.getName( );
        String description = referencePropertyDefinitionObject.getDescription( );
        var result = insert1ReferencePropertyDefinition( id, elementType, name, description );
        if( result.isSuccess( ) ) {
            referencePropertyDefinitionObject.setId( result.getId( ) );
            referencePropertyDefinitionObject.setRowVersion(0);
            referencePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateReferencePropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, Guid defaultValue, Guid referencedElementType ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferencePropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setNullableGuid(6, defaultValue);
            callableStatement.setNullableGuid(7, referencedElementType);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1ReferencePropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferencePropertyDefinitionUpdate1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2ReferencePropertyDefinition( Guid id, long rowVersion, Guid defaultValue, Guid referencedElementType ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferencePropertyDefinitionUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, defaultValue);
            callableStatement.setNullableGuid(4, referencedElementType);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateReferencePropertyDefinition( ReferencePropertyDefinitionObject referencePropertyDefinitionObject ) throws SQLException {
        Guid id = referencePropertyDefinitionObject.getId();
        long rowVersion = referencePropertyDefinitionObject.getRowVersion();
        Guid elementType = referencePropertyDefinitionObject.getElementType();
        String name = referencePropertyDefinitionObject.getName();
        String description = referencePropertyDefinitionObject.getDescription();
        Guid defaultValue = referencePropertyDefinitionObject.getDefaultValue();
        Guid referencedElementType = referencePropertyDefinitionObject.getReferencedElementType();
        var result = updateReferencePropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, referencedElementType );
        if( result.isSuccess( ) ) {
            referencePropertyDefinitionObject.setRowVersion(result.getRowVersion());
            referencePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1ReferencePropertyDefinition( ReferencePropertyDefinitionObject referencePropertyDefinitionObject ) throws SQLException {
        Guid id = referencePropertyDefinitionObject.getId();
        long rowVersion = referencePropertyDefinitionObject.getRowVersion();
        Guid elementType = referencePropertyDefinitionObject.getElementType();
        String name = referencePropertyDefinitionObject.getName();
        String description = referencePropertyDefinitionObject.getDescription();
        var result = update1ReferencePropertyDefinition( id, rowVersion, elementType, name, description );
        if( result.isSuccess( ) ) {
            referencePropertyDefinitionObject.setRowVersion(result.getRowVersion());
            referencePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2ReferencePropertyDefinition( ReferencePropertyDefinitionObject referencePropertyDefinitionObject ) throws SQLException {
        Guid id = referencePropertyDefinitionObject.getId();
        long rowVersion = referencePropertyDefinitionObject.getRowVersion();
        Guid defaultValue = referencePropertyDefinitionObject.getDefaultValue();
        Guid referencedElementType = referencePropertyDefinitionObject.getReferencedElementType();
        var result = update2ReferencePropertyDefinition( id, rowVersion, defaultValue, referencedElementType );
        if( result.isSuccess( ) ) {
            referencePropertyDefinitionObject.setRowVersion(result.getRowVersion());
            referencePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteReferencePropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ReferencePropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteReferencePropertyDefinition( ReferencePropertyDefinitionObject referencePropertyDefinitionObject ) throws SQLException {
        var id = referencePropertyDefinitionObject.getId( );
        var rowVersion = referencePropertyDefinitionObject.getRowVersion();
        var result = deleteReferencePropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSBytePropertyDefinition( Guid id, Guid elementType, String name, String description, byte defaultValue, byte minValue, byte maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SBytePropertyDefinitionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setInt8(5, defaultValue);
            callableStatement.setInt8(6, minValue);
            callableStatement.setInt8(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSBytePropertyDefinition( SBytePropertyDefinitionObject sBytePropertyDefinitionObject ) throws SQLException {
        Guid id = sBytePropertyDefinitionObject.getId( );
        Guid elementType = sBytePropertyDefinitionObject.getElementType( );
        String name = sBytePropertyDefinitionObject.getName( );
        String description = sBytePropertyDefinitionObject.getDescription( );
        byte defaultValue = sBytePropertyDefinitionObject.getDefaultValue( );
        byte minValue = sBytePropertyDefinitionObject.getMinValue( );
        byte maxValue = sBytePropertyDefinitionObject.getMaxValue( );
        var result = insertSBytePropertyDefinition( id, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess() ) {
            sBytePropertyDefinitionObject.setId(result.getId());
            sBytePropertyDefinitionObject.setRowVersion(0);
            sBytePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSBytePropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, byte defaultValue, byte minValue, byte maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SBytePropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setInt8(6, defaultValue);
            callableStatement.setInt8(7, minValue);
            callableStatement.setInt8(8, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSBytePropertyDefinition( SBytePropertyDefinitionObject sBytePropertyDefinitionObject ) throws SQLException {
        Guid id = sBytePropertyDefinitionObject.getId();
        long rowVersion = sBytePropertyDefinitionObject.getRowVersion();
        Guid elementType = sBytePropertyDefinitionObject.getElementType();
        String name = sBytePropertyDefinitionObject.getName();
        String description = sBytePropertyDefinitionObject.getDescription();
        byte defaultValue = sBytePropertyDefinitionObject.getDefaultValue();
        byte minValue = sBytePropertyDefinitionObject.getMinValue();
        byte maxValue = sBytePropertyDefinitionObject.getMaxValue();
        var result = updateSBytePropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess( ) ) {
            sBytePropertyDefinitionObject.setRowVersion(result.getRowVersion());
            sBytePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSBytePropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SBytePropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSBytePropertyDefinition( SBytePropertyDefinitionObject sBytePropertyDefinitionObject ) throws SQLException {
        var id = sBytePropertyDefinitionObject.getId( );
        var rowVersion = sBytePropertyDefinitionObject.getRowVersion();
        var result = deleteSBytePropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSinglePropertyDefinition( Guid id, Guid elementType, String name, String description, float defaultValue, float minValue, float maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SinglePropertyDefinitionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setSingle(5, defaultValue);
            callableStatement.setSingle(6, minValue);
            callableStatement.setSingle(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSinglePropertyDefinition( SinglePropertyDefinitionObject singlePropertyDefinitionObject ) throws SQLException {
        Guid id = singlePropertyDefinitionObject.getId( );
        Guid elementType = singlePropertyDefinitionObject.getElementType( );
        String name = singlePropertyDefinitionObject.getName( );
        String description = singlePropertyDefinitionObject.getDescription( );
        float defaultValue = singlePropertyDefinitionObject.getDefaultValue( );
        float minValue = singlePropertyDefinitionObject.getMinValue( );
        float maxValue = singlePropertyDefinitionObject.getMaxValue( );
        var result = insertSinglePropertyDefinition( id, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess() ) {
            singlePropertyDefinitionObject.setId(result.getId());
            singlePropertyDefinitionObject.setRowVersion(0);
            singlePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSinglePropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, float defaultValue, float minValue, float maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SinglePropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setSingle(6, defaultValue);
            callableStatement.setSingle(7, minValue);
            callableStatement.setSingle(8, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSinglePropertyDefinition( SinglePropertyDefinitionObject singlePropertyDefinitionObject ) throws SQLException {
        Guid id = singlePropertyDefinitionObject.getId();
        long rowVersion = singlePropertyDefinitionObject.getRowVersion();
        Guid elementType = singlePropertyDefinitionObject.getElementType();
        String name = singlePropertyDefinitionObject.getName();
        String description = singlePropertyDefinitionObject.getDescription();
        float defaultValue = singlePropertyDefinitionObject.getDefaultValue();
        float minValue = singlePropertyDefinitionObject.getMinValue();
        float maxValue = singlePropertyDefinitionObject.getMaxValue();
        var result = updateSinglePropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess( ) ) {
            singlePropertyDefinitionObject.setRowVersion(result.getRowVersion());
            singlePropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSinglePropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SinglePropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSinglePropertyDefinition( SinglePropertyDefinitionObject singlePropertyDefinitionObject ) throws SQLException {
        var id = singlePropertyDefinitionObject.getId( );
        var rowVersion = singlePropertyDefinitionObject.getRowVersion();
        var result = deleteSinglePropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertStringPropertyDefinition( Guid id, Guid elementType, String name, String description, String defaultValue, String pattern ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call StringPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setString(5, defaultValue);
            callableStatement.setString(6, pattern);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertStringPropertyDefinition( StringPropertyDefinitionObject stringPropertyDefinitionObject ) throws SQLException {
        Guid id = stringPropertyDefinitionObject.getId( );
        Guid elementType = stringPropertyDefinitionObject.getElementType( );
        String name = stringPropertyDefinitionObject.getName( );
        String description = stringPropertyDefinitionObject.getDescription( );
        String defaultValue = stringPropertyDefinitionObject.getDefaultValue( );
        String pattern = stringPropertyDefinitionObject.getPattern( );
        var result = insertStringPropertyDefinition( id, elementType, name, description, defaultValue, pattern );
        if( result.isSuccess() ) {
            stringPropertyDefinitionObject.setId(result.getId());
            stringPropertyDefinitionObject.setRowVersion(0);
            stringPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateStringPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, String defaultValue, String pattern ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call StringPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setString(6, defaultValue);
            callableStatement.setString(7, pattern);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateStringPropertyDefinition( StringPropertyDefinitionObject stringPropertyDefinitionObject ) throws SQLException {
        Guid id = stringPropertyDefinitionObject.getId();
        long rowVersion = stringPropertyDefinitionObject.getRowVersion();
        Guid elementType = stringPropertyDefinitionObject.getElementType();
        String name = stringPropertyDefinitionObject.getName();
        String description = stringPropertyDefinitionObject.getDescription();
        String defaultValue = stringPropertyDefinitionObject.getDefaultValue();
        String pattern = stringPropertyDefinitionObject.getPattern();
        var result = updateStringPropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, pattern );
        if( result.isSuccess( ) ) {
            stringPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            stringPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteStringPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call StringPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteStringPropertyDefinition( StringPropertyDefinitionObject stringPropertyDefinitionObject ) throws SQLException {
        var id = stringPropertyDefinitionObject.getId( );
        var rowVersion = stringPropertyDefinitionObject.getRowVersion();
        var result = deleteStringPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBinaryTimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BinaryTimeseriesPropertyDefinitionInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBinaryTimeseriesPropertyDefinition( BinaryTimeseriesPropertyDefinitionObject binaryTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = binaryTimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = binaryTimeseriesPropertyDefinitionObject.getElementType( );
        String name = binaryTimeseriesPropertyDefinitionObject.getName( );
        String description = binaryTimeseriesPropertyDefinitionObject.getDescription( );
        var result = insertBinaryTimeseriesPropertyDefinition( id, elementType, name, description );
        if( result.isSuccess() ) {
            binaryTimeseriesPropertyDefinitionObject.setId(result.getId());
            binaryTimeseriesPropertyDefinitionObject.setRowVersion(0);
            binaryTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateBinaryTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BinaryTimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBinaryTimeseriesPropertyDefinition( BinaryTimeseriesPropertyDefinitionObject binaryTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = binaryTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = binaryTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = binaryTimeseriesPropertyDefinitionObject.getElementType();
        String name = binaryTimeseriesPropertyDefinitionObject.getName();
        String description = binaryTimeseriesPropertyDefinitionObject.getDescription();
        var result = updateBinaryTimeseriesPropertyDefinition( id, rowVersion, elementType, name, description );
        if( result.isSuccess( ) ) {
            binaryTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            binaryTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBinaryTimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BinaryTimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBinaryTimeseriesPropertyDefinition( BinaryTimeseriesPropertyDefinitionObject binaryTimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = binaryTimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = binaryTimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteBinaryTimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBooleanTimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BooleanTimeseriesPropertyDefinitionInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBooleanTimeseriesPropertyDefinition( BooleanTimeseriesPropertyDefinitionObject booleanTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = booleanTimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = booleanTimeseriesPropertyDefinitionObject.getElementType( );
        String name = booleanTimeseriesPropertyDefinitionObject.getName( );
        String description = booleanTimeseriesPropertyDefinitionObject.getDescription( );
        var result = insertBooleanTimeseriesPropertyDefinition( id, elementType, name, description );
        if( result.isSuccess() ) {
            booleanTimeseriesPropertyDefinitionObject.setId(result.getId());
            booleanTimeseriesPropertyDefinitionObject.setRowVersion(0);
            booleanTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateBooleanTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BooleanTimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBooleanTimeseriesPropertyDefinition( BooleanTimeseriesPropertyDefinitionObject booleanTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = booleanTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = booleanTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = booleanTimeseriesPropertyDefinitionObject.getElementType();
        String name = booleanTimeseriesPropertyDefinitionObject.getName();
        String description = booleanTimeseriesPropertyDefinitionObject.getDescription();
        var result = updateBooleanTimeseriesPropertyDefinition( id, rowVersion, elementType, name, description );
        if( result.isSuccess( ) ) {
            booleanTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            booleanTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBooleanTimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BooleanTimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBooleanTimeseriesPropertyDefinition( BooleanTimeseriesPropertyDefinitionObject booleanTimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = booleanTimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = booleanTimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteBooleanTimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertByteTimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, byte minValue, byte maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ByteTimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setUInt8(5, minValue);
            callableStatement.setUInt8(6, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertByteTimeseriesPropertyDefinition( ByteTimeseriesPropertyDefinitionObject byteTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = byteTimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = byteTimeseriesPropertyDefinitionObject.getElementType( );
        String name = byteTimeseriesPropertyDefinitionObject.getName( );
        String description = byteTimeseriesPropertyDefinitionObject.getDescription( );
        byte minValue = byteTimeseriesPropertyDefinitionObject.getMinValue( );
        byte maxValue = byteTimeseriesPropertyDefinitionObject.getMaxValue( );
        var result = insertByteTimeseriesPropertyDefinition( id, elementType, name, description, minValue, maxValue );
        if( result.isSuccess() ) {
            byteTimeseriesPropertyDefinitionObject.setId(result.getId());
            byteTimeseriesPropertyDefinitionObject.setRowVersion(0);
            byteTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateByteTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, byte minValue, byte maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ByteTimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setUInt8(6, minValue);
            callableStatement.setUInt8(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateByteTimeseriesPropertyDefinition( ByteTimeseriesPropertyDefinitionObject byteTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = byteTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = byteTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = byteTimeseriesPropertyDefinitionObject.getElementType();
        String name = byteTimeseriesPropertyDefinitionObject.getName();
        String description = byteTimeseriesPropertyDefinitionObject.getDescription();
        byte minValue = byteTimeseriesPropertyDefinitionObject.getMinValue();
        byte maxValue = byteTimeseriesPropertyDefinitionObject.getMaxValue();
        var result = updateByteTimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, minValue, maxValue );
        if( result.isSuccess( ) ) {
            byteTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            byteTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteByteTimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ByteTimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteByteTimeseriesPropertyDefinition( ByteTimeseriesPropertyDefinitionObject byteTimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = byteTimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = byteTimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteByteTimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDateTimeTimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, String minValue, String maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DateTimeTimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setString(5, minValue);
            callableStatement.setString(6, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDateTimeTimeseriesPropertyDefinition( DateTimeTimeseriesPropertyDefinitionObject dateTimeTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = dateTimeTimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = dateTimeTimeseriesPropertyDefinitionObject.getElementType( );
        String name = dateTimeTimeseriesPropertyDefinitionObject.getName( );
        String description = dateTimeTimeseriesPropertyDefinitionObject.getDescription( );
        String minValue = dateTimeTimeseriesPropertyDefinitionObject.getMinValue( );
        String maxValue = dateTimeTimeseriesPropertyDefinitionObject.getMaxValue( );
        var result = insertDateTimeTimeseriesPropertyDefinition( id, elementType, name, description, minValue, maxValue );
        if( result.isSuccess() ) {
            dateTimeTimeseriesPropertyDefinitionObject.setId(result.getId());
            dateTimeTimeseriesPropertyDefinitionObject.setRowVersion(0);
            dateTimeTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateDateTimeTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, String minValue, String maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DateTimeTimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setString(6, minValue);
            callableStatement.setString(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDateTimeTimeseriesPropertyDefinition( DateTimeTimeseriesPropertyDefinitionObject dateTimeTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = dateTimeTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = dateTimeTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = dateTimeTimeseriesPropertyDefinitionObject.getElementType();
        String name = dateTimeTimeseriesPropertyDefinitionObject.getName();
        String description = dateTimeTimeseriesPropertyDefinitionObject.getDescription();
        String minValue = dateTimeTimeseriesPropertyDefinitionObject.getMinValue();
        String maxValue = dateTimeTimeseriesPropertyDefinitionObject.getMaxValue();
        var result = updateDateTimeTimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, minValue, maxValue );
        if( result.isSuccess( ) ) {
            dateTimeTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            dateTimeTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDateTimeTimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DateTimeTimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDateTimeTimeseriesPropertyDefinition( DateTimeTimeseriesPropertyDefinitionObject dateTimeTimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = dateTimeTimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = dateTimeTimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteDateTimeTimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDoubleTimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, double minValue, double maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DoubleTimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setDouble(5, minValue);
            callableStatement.setDouble(6, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDoubleTimeseriesPropertyDefinition( DoubleTimeseriesPropertyDefinitionObject doubleTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = doubleTimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = doubleTimeseriesPropertyDefinitionObject.getElementType( );
        String name = doubleTimeseriesPropertyDefinitionObject.getName( );
        String description = doubleTimeseriesPropertyDefinitionObject.getDescription( );
        double minValue = doubleTimeseriesPropertyDefinitionObject.getMinValue( );
        double maxValue = doubleTimeseriesPropertyDefinitionObject.getMaxValue( );
        var result = insertDoubleTimeseriesPropertyDefinition( id, elementType, name, description, minValue, maxValue );
        if( result.isSuccess() ) {
            doubleTimeseriesPropertyDefinitionObject.setId(result.getId());
            doubleTimeseriesPropertyDefinitionObject.setRowVersion(0);
            doubleTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateDoubleTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, double minValue, double maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DoubleTimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setDouble(6, minValue);
            callableStatement.setDouble(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDoubleTimeseriesPropertyDefinition( DoubleTimeseriesPropertyDefinitionObject doubleTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = doubleTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = doubleTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = doubleTimeseriesPropertyDefinitionObject.getElementType();
        String name = doubleTimeseriesPropertyDefinitionObject.getName();
        String description = doubleTimeseriesPropertyDefinitionObject.getDescription();
        double minValue = doubleTimeseriesPropertyDefinitionObject.getMinValue();
        double maxValue = doubleTimeseriesPropertyDefinitionObject.getMaxValue();
        var result = updateDoubleTimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, minValue, maxValue );
        if( result.isSuccess( ) ) {
            doubleTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            doubleTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDoubleTimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DoubleTimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDoubleTimeseriesPropertyDefinition( DoubleTimeseriesPropertyDefinitionObject doubleTimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = doubleTimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = doubleTimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteDoubleTimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGuidTimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GuidTimeseriesPropertyDefinitionInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGuidTimeseriesPropertyDefinition( GuidTimeseriesPropertyDefinitionObject guidTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = guidTimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = guidTimeseriesPropertyDefinitionObject.getElementType( );
        String name = guidTimeseriesPropertyDefinitionObject.getName( );
        String description = guidTimeseriesPropertyDefinitionObject.getDescription( );
        var result = insertGuidTimeseriesPropertyDefinition( id, elementType, name, description );
        if( result.isSuccess() ) {
            guidTimeseriesPropertyDefinitionObject.setId(result.getId());
            guidTimeseriesPropertyDefinitionObject.setRowVersion(0);
            guidTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateGuidTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GuidTimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGuidTimeseriesPropertyDefinition( GuidTimeseriesPropertyDefinitionObject guidTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = guidTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = guidTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = guidTimeseriesPropertyDefinitionObject.getElementType();
        String name = guidTimeseriesPropertyDefinitionObject.getName();
        String description = guidTimeseriesPropertyDefinitionObject.getDescription();
        var result = updateGuidTimeseriesPropertyDefinition( id, rowVersion, elementType, name, description );
        if( result.isSuccess( ) ) {
            guidTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            guidTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGuidTimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GuidTimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGuidTimeseriesPropertyDefinition( GuidTimeseriesPropertyDefinitionObject guidTimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = guidTimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = guidTimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteGuidTimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt16TimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, short minValue, short maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int16TimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setInt16(5, minValue);
            callableStatement.setInt16(6, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt16TimeseriesPropertyDefinition( Int16TimeseriesPropertyDefinitionObject int16TimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = int16TimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = int16TimeseriesPropertyDefinitionObject.getElementType( );
        String name = int16TimeseriesPropertyDefinitionObject.getName( );
        String description = int16TimeseriesPropertyDefinitionObject.getDescription( );
        short minValue = int16TimeseriesPropertyDefinitionObject.getMinValue( );
        short maxValue = int16TimeseriesPropertyDefinitionObject.getMaxValue( );
        var result = insertInt16TimeseriesPropertyDefinition( id, elementType, name, description, minValue, maxValue );
        if( result.isSuccess() ) {
            int16TimeseriesPropertyDefinitionObject.setId(result.getId());
            int16TimeseriesPropertyDefinitionObject.setRowVersion(0);
            int16TimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInt16TimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, short minValue, short maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int16TimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setInt16(6, minValue);
            callableStatement.setInt16(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt16TimeseriesPropertyDefinition( Int16TimeseriesPropertyDefinitionObject int16TimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = int16TimeseriesPropertyDefinitionObject.getId();
        long rowVersion = int16TimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = int16TimeseriesPropertyDefinitionObject.getElementType();
        String name = int16TimeseriesPropertyDefinitionObject.getName();
        String description = int16TimeseriesPropertyDefinitionObject.getDescription();
        short minValue = int16TimeseriesPropertyDefinitionObject.getMinValue();
        short maxValue = int16TimeseriesPropertyDefinitionObject.getMaxValue();
        var result = updateInt16TimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, minValue, maxValue );
        if( result.isSuccess( ) ) {
            int16TimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            int16TimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt16TimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int16TimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt16TimeseriesPropertyDefinition( Int16TimeseriesPropertyDefinitionObject int16TimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = int16TimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = int16TimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteInt16TimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt32TimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, int minValue, int maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int32TimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setInt32(5, minValue);
            callableStatement.setInt32(6, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt32TimeseriesPropertyDefinition( Int32TimeseriesPropertyDefinitionObject int32TimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = int32TimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = int32TimeseriesPropertyDefinitionObject.getElementType( );
        String name = int32TimeseriesPropertyDefinitionObject.getName( );
        String description = int32TimeseriesPropertyDefinitionObject.getDescription( );
        int minValue = int32TimeseriesPropertyDefinitionObject.getMinValue( );
        int maxValue = int32TimeseriesPropertyDefinitionObject.getMaxValue( );
        var result = insertInt32TimeseriesPropertyDefinition( id, elementType, name, description, minValue, maxValue );
        if( result.isSuccess() ) {
            int32TimeseriesPropertyDefinitionObject.setId(result.getId());
            int32TimeseriesPropertyDefinitionObject.setRowVersion(0);
            int32TimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInt32TimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, int minValue, int maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int32TimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setInt32(6, minValue);
            callableStatement.setInt32(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt32TimeseriesPropertyDefinition( Int32TimeseriesPropertyDefinitionObject int32TimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = int32TimeseriesPropertyDefinitionObject.getId();
        long rowVersion = int32TimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = int32TimeseriesPropertyDefinitionObject.getElementType();
        String name = int32TimeseriesPropertyDefinitionObject.getName();
        String description = int32TimeseriesPropertyDefinitionObject.getDescription();
        int minValue = int32TimeseriesPropertyDefinitionObject.getMinValue();
        int maxValue = int32TimeseriesPropertyDefinitionObject.getMaxValue();
        var result = updateInt32TimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, minValue, maxValue );
        if( result.isSuccess( ) ) {
            int32TimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            int32TimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt32TimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int32TimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt32TimeseriesPropertyDefinition( Int32TimeseriesPropertyDefinitionObject int32TimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = int32TimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = int32TimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteInt32TimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt64TimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, long minValue, long maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int64TimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setInt64(5, minValue);
            callableStatement.setInt64(6, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt64TimeseriesPropertyDefinition( Int64TimeseriesPropertyDefinitionObject int64TimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = int64TimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = int64TimeseriesPropertyDefinitionObject.getElementType( );
        String name = int64TimeseriesPropertyDefinitionObject.getName( );
        String description = int64TimeseriesPropertyDefinitionObject.getDescription( );
        long minValue = int64TimeseriesPropertyDefinitionObject.getMinValue( );
        long maxValue = int64TimeseriesPropertyDefinitionObject.getMaxValue( );
        var result = insertInt64TimeseriesPropertyDefinition( id, elementType, name, description, minValue, maxValue );
        if( result.isSuccess() ) {
            int64TimeseriesPropertyDefinitionObject.setId(result.getId());
            int64TimeseriesPropertyDefinitionObject.setRowVersion(0);
            int64TimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateInt64TimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, long minValue, long maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int64TimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setInt64(6, minValue);
            callableStatement.setInt64(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt64TimeseriesPropertyDefinition( Int64TimeseriesPropertyDefinitionObject int64TimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = int64TimeseriesPropertyDefinitionObject.getId();
        long rowVersion = int64TimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = int64TimeseriesPropertyDefinitionObject.getElementType();
        String name = int64TimeseriesPropertyDefinitionObject.getName();
        String description = int64TimeseriesPropertyDefinitionObject.getDescription();
        long minValue = int64TimeseriesPropertyDefinitionObject.getMinValue();
        long maxValue = int64TimeseriesPropertyDefinitionObject.getMaxValue();
        var result = updateInt64TimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, minValue, maxValue );
        if( result.isSuccess( ) ) {
            int64TimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            int64TimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt64TimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int64TimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt64TimeseriesPropertyDefinition( Int64TimeseriesPropertyDefinitionObject int64TimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = int64TimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = int64TimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteInt64TimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertReferenceTimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, Guid referencedElementType ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ReferenceTimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setNullableGuid(5, referencedElementType);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1ReferenceTimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ReferenceTimeseriesPropertyDefinitionInsert1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertReferenceTimeseriesPropertyDefinition( ReferenceTimeseriesPropertyDefinitionObject referenceTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = referenceTimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = referenceTimeseriesPropertyDefinitionObject.getElementType( );
        String name = referenceTimeseriesPropertyDefinitionObject.getName( );
        String description = referenceTimeseriesPropertyDefinitionObject.getDescription( );
        Guid referencedElementType = referenceTimeseriesPropertyDefinitionObject.getReferencedElementType( );
        var result = insertReferenceTimeseriesPropertyDefinition( id, elementType, name, description, referencedElementType );
        if( result.isSuccess() ) {
            referenceTimeseriesPropertyDefinitionObject.setId(result.getId());
            referenceTimeseriesPropertyDefinitionObject.setRowVersion(0);
            referenceTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1ReferenceTimeseriesPropertyDefinition( ReferenceTimeseriesPropertyDefinitionObject referenceTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = referenceTimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = referenceTimeseriesPropertyDefinitionObject.getElementType( );
        String name = referenceTimeseriesPropertyDefinitionObject.getName( );
        String description = referenceTimeseriesPropertyDefinitionObject.getDescription( );
        var result = insert1ReferenceTimeseriesPropertyDefinition( id, elementType, name, description );
        if( result.isSuccess( ) ) {
            referenceTimeseriesPropertyDefinitionObject.setId( result.getId( ) );
            referenceTimeseriesPropertyDefinitionObject.setRowVersion(0);
            referenceTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateReferenceTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, Guid referencedElementType ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferenceTimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setNullableGuid(6, referencedElementType);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1ReferenceTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferenceTimeseriesPropertyDefinitionUpdate1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2ReferenceTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid referencedElementType ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferenceTimeseriesPropertyDefinitionUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, referencedElementType);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateReferenceTimeseriesPropertyDefinition( ReferenceTimeseriesPropertyDefinitionObject referenceTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = referenceTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = referenceTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = referenceTimeseriesPropertyDefinitionObject.getElementType();
        String name = referenceTimeseriesPropertyDefinitionObject.getName();
        String description = referenceTimeseriesPropertyDefinitionObject.getDescription();
        Guid referencedElementType = referenceTimeseriesPropertyDefinitionObject.getReferencedElementType();
        var result = updateReferenceTimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, referencedElementType );
        if( result.isSuccess( ) ) {
            referenceTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            referenceTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1ReferenceTimeseriesPropertyDefinition( ReferenceTimeseriesPropertyDefinitionObject referenceTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = referenceTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = referenceTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = referenceTimeseriesPropertyDefinitionObject.getElementType();
        String name = referenceTimeseriesPropertyDefinitionObject.getName();
        String description = referenceTimeseriesPropertyDefinitionObject.getDescription();
        var result = update1ReferenceTimeseriesPropertyDefinition( id, rowVersion, elementType, name, description );
        if( result.isSuccess( ) ) {
            referenceTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            referenceTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2ReferenceTimeseriesPropertyDefinition( ReferenceTimeseriesPropertyDefinitionObject referenceTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = referenceTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = referenceTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid referencedElementType = referenceTimeseriesPropertyDefinitionObject.getReferencedElementType();
        var result = update2ReferenceTimeseriesPropertyDefinition( id, rowVersion, referencedElementType );
        if( result.isSuccess( ) ) {
            referenceTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            referenceTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteReferenceTimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ReferenceTimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteReferenceTimeseriesPropertyDefinition( ReferenceTimeseriesPropertyDefinitionObject referenceTimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = referenceTimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = referenceTimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteReferenceTimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSByteTimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, byte minValue, byte maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SByteTimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setInt8(5, minValue);
            callableStatement.setInt8(6, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSByteTimeseriesPropertyDefinition( SByteTimeseriesPropertyDefinitionObject sByteTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = sByteTimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = sByteTimeseriesPropertyDefinitionObject.getElementType( );
        String name = sByteTimeseriesPropertyDefinitionObject.getName( );
        String description = sByteTimeseriesPropertyDefinitionObject.getDescription( );
        byte minValue = sByteTimeseriesPropertyDefinitionObject.getMinValue( );
        byte maxValue = sByteTimeseriesPropertyDefinitionObject.getMaxValue( );
        var result = insertSByteTimeseriesPropertyDefinition( id, elementType, name, description, minValue, maxValue );
        if( result.isSuccess() ) {
            sByteTimeseriesPropertyDefinitionObject.setId(result.getId());
            sByteTimeseriesPropertyDefinitionObject.setRowVersion(0);
            sByteTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSByteTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, byte minValue, byte maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SByteTimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setInt8(6, minValue);
            callableStatement.setInt8(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSByteTimeseriesPropertyDefinition( SByteTimeseriesPropertyDefinitionObject sByteTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = sByteTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = sByteTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = sByteTimeseriesPropertyDefinitionObject.getElementType();
        String name = sByteTimeseriesPropertyDefinitionObject.getName();
        String description = sByteTimeseriesPropertyDefinitionObject.getDescription();
        byte minValue = sByteTimeseriesPropertyDefinitionObject.getMinValue();
        byte maxValue = sByteTimeseriesPropertyDefinitionObject.getMaxValue();
        var result = updateSByteTimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, minValue, maxValue );
        if( result.isSuccess( ) ) {
            sByteTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            sByteTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSByteTimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SByteTimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSByteTimeseriesPropertyDefinition( SByteTimeseriesPropertyDefinitionObject sByteTimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = sByteTimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = sByteTimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteSByteTimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSingleTimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, float minValue, float maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SingleTimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setSingle(5, minValue);
            callableStatement.setSingle(6, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSingleTimeseriesPropertyDefinition( SingleTimeseriesPropertyDefinitionObject singleTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = singleTimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = singleTimeseriesPropertyDefinitionObject.getElementType( );
        String name = singleTimeseriesPropertyDefinitionObject.getName( );
        String description = singleTimeseriesPropertyDefinitionObject.getDescription( );
        float minValue = singleTimeseriesPropertyDefinitionObject.getMinValue( );
        float maxValue = singleTimeseriesPropertyDefinitionObject.getMaxValue( );
        var result = insertSingleTimeseriesPropertyDefinition( id, elementType, name, description, minValue, maxValue );
        if( result.isSuccess() ) {
            singleTimeseriesPropertyDefinitionObject.setId(result.getId());
            singleTimeseriesPropertyDefinitionObject.setRowVersion(0);
            singleTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSingleTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, float minValue, float maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SingleTimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setSingle(6, minValue);
            callableStatement.setSingle(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSingleTimeseriesPropertyDefinition( SingleTimeseriesPropertyDefinitionObject singleTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = singleTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = singleTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = singleTimeseriesPropertyDefinitionObject.getElementType();
        String name = singleTimeseriesPropertyDefinitionObject.getName();
        String description = singleTimeseriesPropertyDefinitionObject.getDescription();
        float minValue = singleTimeseriesPropertyDefinitionObject.getMinValue();
        float maxValue = singleTimeseriesPropertyDefinitionObject.getMaxValue();
        var result = updateSingleTimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, minValue, maxValue );
        if( result.isSuccess( ) ) {
            singleTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            singleTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSingleTimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SingleTimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSingleTimeseriesPropertyDefinition( SingleTimeseriesPropertyDefinitionObject singleTimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = singleTimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = singleTimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteSingleTimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertStringTimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, String pattern ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call StringTimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setString(5, pattern);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertStringTimeseriesPropertyDefinition( StringTimeseriesPropertyDefinitionObject stringTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = stringTimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = stringTimeseriesPropertyDefinitionObject.getElementType( );
        String name = stringTimeseriesPropertyDefinitionObject.getName( );
        String description = stringTimeseriesPropertyDefinitionObject.getDescription( );
        String pattern = stringTimeseriesPropertyDefinitionObject.getPattern( );
        var result = insertStringTimeseriesPropertyDefinition( id, elementType, name, description, pattern );
        if( result.isSuccess() ) {
            stringTimeseriesPropertyDefinitionObject.setId(result.getId());
            stringTimeseriesPropertyDefinitionObject.setRowVersion(0);
            stringTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateStringTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, String pattern ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call StringTimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setString(6, pattern);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateStringTimeseriesPropertyDefinition( StringTimeseriesPropertyDefinitionObject stringTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = stringTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = stringTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = stringTimeseriesPropertyDefinitionObject.getElementType();
        String name = stringTimeseriesPropertyDefinitionObject.getName();
        String description = stringTimeseriesPropertyDefinitionObject.getDescription();
        String pattern = stringTimeseriesPropertyDefinitionObject.getPattern();
        var result = updateStringTimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, pattern );
        if( result.isSuccess( ) ) {
            stringTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            stringTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteStringTimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call StringTimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteStringTimeseriesPropertyDefinition( StringTimeseriesPropertyDefinitionObject stringTimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = stringTimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = stringTimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteStringTimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTimeSpanTimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, TimeSpan minValue, TimeSpan maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TimeSpanTimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setTimeSpan(5, minValue);
            callableStatement.setTimeSpan(6, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTimeSpanTimeseriesPropertyDefinition( TimeSpanTimeseriesPropertyDefinitionObject timeSpanTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = timeSpanTimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = timeSpanTimeseriesPropertyDefinitionObject.getElementType( );
        String name = timeSpanTimeseriesPropertyDefinitionObject.getName( );
        String description = timeSpanTimeseriesPropertyDefinitionObject.getDescription( );
        TimeSpan minValue = timeSpanTimeseriesPropertyDefinitionObject.getMinValue( );
        TimeSpan maxValue = timeSpanTimeseriesPropertyDefinitionObject.getMaxValue( );
        var result = insertTimeSpanTimeseriesPropertyDefinition( id, elementType, name, description, minValue, maxValue );
        if( result.isSuccess() ) {
            timeSpanTimeseriesPropertyDefinitionObject.setId(result.getId());
            timeSpanTimeseriesPropertyDefinitionObject.setRowVersion(0);
            timeSpanTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTimeSpanTimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, TimeSpan minValue, TimeSpan maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeSpanTimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setTimeSpan(6, minValue);
            callableStatement.setTimeSpan(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTimeSpanTimeseriesPropertyDefinition( TimeSpanTimeseriesPropertyDefinitionObject timeSpanTimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = timeSpanTimeseriesPropertyDefinitionObject.getId();
        long rowVersion = timeSpanTimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = timeSpanTimeseriesPropertyDefinitionObject.getElementType();
        String name = timeSpanTimeseriesPropertyDefinitionObject.getName();
        String description = timeSpanTimeseriesPropertyDefinitionObject.getDescription();
        TimeSpan minValue = timeSpanTimeseriesPropertyDefinitionObject.getMinValue();
        TimeSpan maxValue = timeSpanTimeseriesPropertyDefinitionObject.getMaxValue();
        var result = updateTimeSpanTimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, minValue, maxValue );
        if( result.isSuccess( ) ) {
            timeSpanTimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            timeSpanTimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTimeSpanTimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TimeSpanTimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTimeSpanTimeseriesPropertyDefinition( TimeSpanTimeseriesPropertyDefinitionObject timeSpanTimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = timeSpanTimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = timeSpanTimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteTimeSpanTimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt16TimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, short minValue, short maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt16TimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setUInt16(5, minValue);
            callableStatement.setUInt16(6, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt16TimeseriesPropertyDefinition( UInt16TimeseriesPropertyDefinitionObject uInt16TimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = uInt16TimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = uInt16TimeseriesPropertyDefinitionObject.getElementType( );
        String name = uInt16TimeseriesPropertyDefinitionObject.getName( );
        String description = uInt16TimeseriesPropertyDefinitionObject.getDescription( );
        short minValue = uInt16TimeseriesPropertyDefinitionObject.getMinValue( );
        short maxValue = uInt16TimeseriesPropertyDefinitionObject.getMaxValue( );
        var result = insertUInt16TimeseriesPropertyDefinition( id, elementType, name, description, minValue, maxValue );
        if( result.isSuccess() ) {
            uInt16TimeseriesPropertyDefinitionObject.setId(result.getId());
            uInt16TimeseriesPropertyDefinitionObject.setRowVersion(0);
            uInt16TimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateUInt16TimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, short minValue, short maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt16TimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setUInt16(6, minValue);
            callableStatement.setUInt16(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt16TimeseriesPropertyDefinition( UInt16TimeseriesPropertyDefinitionObject uInt16TimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = uInt16TimeseriesPropertyDefinitionObject.getId();
        long rowVersion = uInt16TimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = uInt16TimeseriesPropertyDefinitionObject.getElementType();
        String name = uInt16TimeseriesPropertyDefinitionObject.getName();
        String description = uInt16TimeseriesPropertyDefinitionObject.getDescription();
        short minValue = uInt16TimeseriesPropertyDefinitionObject.getMinValue();
        short maxValue = uInt16TimeseriesPropertyDefinitionObject.getMaxValue();
        var result = updateUInt16TimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, minValue, maxValue );
        if( result.isSuccess( ) ) {
            uInt16TimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            uInt16TimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt16TimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt16TimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt16TimeseriesPropertyDefinition( UInt16TimeseriesPropertyDefinitionObject uInt16TimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = uInt16TimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = uInt16TimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteUInt16TimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt32TimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, int minValue, int maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt32TimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setUInt32(5, minValue);
            callableStatement.setUInt32(6, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt32TimeseriesPropertyDefinition( UInt32TimeseriesPropertyDefinitionObject uInt32TimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = uInt32TimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = uInt32TimeseriesPropertyDefinitionObject.getElementType( );
        String name = uInt32TimeseriesPropertyDefinitionObject.getName( );
        String description = uInt32TimeseriesPropertyDefinitionObject.getDescription( );
        int minValue = uInt32TimeseriesPropertyDefinitionObject.getMinValue( );
        int maxValue = uInt32TimeseriesPropertyDefinitionObject.getMaxValue( );
        var result = insertUInt32TimeseriesPropertyDefinition( id, elementType, name, description, minValue, maxValue );
        if( result.isSuccess() ) {
            uInt32TimeseriesPropertyDefinitionObject.setId(result.getId());
            uInt32TimeseriesPropertyDefinitionObject.setRowVersion(0);
            uInt32TimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateUInt32TimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, int minValue, int maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt32TimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setUInt32(6, minValue);
            callableStatement.setUInt32(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt32TimeseriesPropertyDefinition( UInt32TimeseriesPropertyDefinitionObject uInt32TimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = uInt32TimeseriesPropertyDefinitionObject.getId();
        long rowVersion = uInt32TimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = uInt32TimeseriesPropertyDefinitionObject.getElementType();
        String name = uInt32TimeseriesPropertyDefinitionObject.getName();
        String description = uInt32TimeseriesPropertyDefinitionObject.getDescription();
        int minValue = uInt32TimeseriesPropertyDefinitionObject.getMinValue();
        int maxValue = uInt32TimeseriesPropertyDefinitionObject.getMaxValue();
        var result = updateUInt32TimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, minValue, maxValue );
        if( result.isSuccess( ) ) {
            uInt32TimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            uInt32TimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt32TimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt32TimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt32TimeseriesPropertyDefinition( UInt32TimeseriesPropertyDefinitionObject uInt32TimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = uInt32TimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = uInt32TimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteUInt32TimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt64TimeseriesPropertyDefinition( Guid id, Guid elementType, String name, String description, long minValue, long maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt64TimeseriesPropertyDefinitionInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setInt64(5, minValue);
            callableStatement.setInt64(6, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt64TimeseriesPropertyDefinition( UInt64TimeseriesPropertyDefinitionObject uInt64TimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = uInt64TimeseriesPropertyDefinitionObject.getId( );
        Guid elementType = uInt64TimeseriesPropertyDefinitionObject.getElementType( );
        String name = uInt64TimeseriesPropertyDefinitionObject.getName( );
        String description = uInt64TimeseriesPropertyDefinitionObject.getDescription( );
        long minValue = uInt64TimeseriesPropertyDefinitionObject.getMinValue( );
        long maxValue = uInt64TimeseriesPropertyDefinitionObject.getMaxValue( );
        var result = insertUInt64TimeseriesPropertyDefinition( id, elementType, name, description, minValue, maxValue );
        if( result.isSuccess() ) {
            uInt64TimeseriesPropertyDefinitionObject.setId(result.getId());
            uInt64TimeseriesPropertyDefinitionObject.setRowVersion(0);
            uInt64TimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateUInt64TimeseriesPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, long minValue, long maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt64TimeseriesPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setInt64(6, minValue);
            callableStatement.setInt64(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt64TimeseriesPropertyDefinition( UInt64TimeseriesPropertyDefinitionObject uInt64TimeseriesPropertyDefinitionObject ) throws SQLException {
        Guid id = uInt64TimeseriesPropertyDefinitionObject.getId();
        long rowVersion = uInt64TimeseriesPropertyDefinitionObject.getRowVersion();
        Guid elementType = uInt64TimeseriesPropertyDefinitionObject.getElementType();
        String name = uInt64TimeseriesPropertyDefinitionObject.getName();
        String description = uInt64TimeseriesPropertyDefinitionObject.getDescription();
        long minValue = uInt64TimeseriesPropertyDefinitionObject.getMinValue();
        long maxValue = uInt64TimeseriesPropertyDefinitionObject.getMaxValue();
        var result = updateUInt64TimeseriesPropertyDefinition( id, rowVersion, elementType, name, description, minValue, maxValue );
        if( result.isSuccess( ) ) {
            uInt64TimeseriesPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            uInt64TimeseriesPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt64TimeseriesPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt64TimeseriesPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt64TimeseriesPropertyDefinition( UInt64TimeseriesPropertyDefinitionObject uInt64TimeseriesPropertyDefinitionObject ) throws SQLException {
        var id = uInt64TimeseriesPropertyDefinitionObject.getId( );
        var rowVersion = uInt64TimeseriesPropertyDefinitionObject.getRowVersion();
        var result = deleteUInt64TimeseriesPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTimeSpanPropertyDefinition( Guid id, Guid elementType, String name, String description, TimeSpan defaultValue, TimeSpan minValue, TimeSpan maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TimeSpanPropertyDefinitionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setTimeSpan(5, defaultValue);
            callableStatement.setTimeSpan(6, minValue);
            callableStatement.setTimeSpan(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTimeSpanPropertyDefinition( TimeSpanPropertyDefinitionObject timeSpanPropertyDefinitionObject ) throws SQLException {
        Guid id = timeSpanPropertyDefinitionObject.getId( );
        Guid elementType = timeSpanPropertyDefinitionObject.getElementType( );
        String name = timeSpanPropertyDefinitionObject.getName( );
        String description = timeSpanPropertyDefinitionObject.getDescription( );
        TimeSpan defaultValue = timeSpanPropertyDefinitionObject.getDefaultValue( );
        TimeSpan minValue = timeSpanPropertyDefinitionObject.getMinValue( );
        TimeSpan maxValue = timeSpanPropertyDefinitionObject.getMaxValue( );
        var result = insertTimeSpanPropertyDefinition( id, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess() ) {
            timeSpanPropertyDefinitionObject.setId(result.getId());
            timeSpanPropertyDefinitionObject.setRowVersion(0);
            timeSpanPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTimeSpanPropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, TimeSpan defaultValue, TimeSpan minValue, TimeSpan maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeSpanPropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setTimeSpan(6, defaultValue);
            callableStatement.setTimeSpan(7, minValue);
            callableStatement.setTimeSpan(8, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTimeSpanPropertyDefinition( TimeSpanPropertyDefinitionObject timeSpanPropertyDefinitionObject ) throws SQLException {
        Guid id = timeSpanPropertyDefinitionObject.getId();
        long rowVersion = timeSpanPropertyDefinitionObject.getRowVersion();
        Guid elementType = timeSpanPropertyDefinitionObject.getElementType();
        String name = timeSpanPropertyDefinitionObject.getName();
        String description = timeSpanPropertyDefinitionObject.getDescription();
        TimeSpan defaultValue = timeSpanPropertyDefinitionObject.getDefaultValue();
        TimeSpan minValue = timeSpanPropertyDefinitionObject.getMinValue();
        TimeSpan maxValue = timeSpanPropertyDefinitionObject.getMaxValue();
        var result = updateTimeSpanPropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess( ) ) {
            timeSpanPropertyDefinitionObject.setRowVersion(result.getRowVersion());
            timeSpanPropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTimeSpanPropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TimeSpanPropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTimeSpanPropertyDefinition( TimeSpanPropertyDefinitionObject timeSpanPropertyDefinitionObject ) throws SQLException {
        var id = timeSpanPropertyDefinitionObject.getId( );
        var rowVersion = timeSpanPropertyDefinitionObject.getRowVersion();
        var result = deleteTimeSpanPropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt16PropertyDefinition( Guid id, Guid elementType, String name, String description, short defaultValue, short minValue, short maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt16PropertyDefinitionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setUInt16(5, defaultValue);
            callableStatement.setUInt16(6, minValue);
            callableStatement.setUInt16(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt16PropertyDefinition( UInt16PropertyDefinitionObject uInt16PropertyDefinitionObject ) throws SQLException {
        Guid id = uInt16PropertyDefinitionObject.getId( );
        Guid elementType = uInt16PropertyDefinitionObject.getElementType( );
        String name = uInt16PropertyDefinitionObject.getName( );
        String description = uInt16PropertyDefinitionObject.getDescription( );
        short defaultValue = uInt16PropertyDefinitionObject.getDefaultValue( );
        short minValue = uInt16PropertyDefinitionObject.getMinValue( );
        short maxValue = uInt16PropertyDefinitionObject.getMaxValue( );
        var result = insertUInt16PropertyDefinition( id, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess() ) {
            uInt16PropertyDefinitionObject.setId(result.getId());
            uInt16PropertyDefinitionObject.setRowVersion(0);
            uInt16PropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateUInt16PropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, short defaultValue, short minValue, short maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt16PropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setUInt16(6, defaultValue);
            callableStatement.setUInt16(7, minValue);
            callableStatement.setUInt16(8, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt16PropertyDefinition( UInt16PropertyDefinitionObject uInt16PropertyDefinitionObject ) throws SQLException {
        Guid id = uInt16PropertyDefinitionObject.getId();
        long rowVersion = uInt16PropertyDefinitionObject.getRowVersion();
        Guid elementType = uInt16PropertyDefinitionObject.getElementType();
        String name = uInt16PropertyDefinitionObject.getName();
        String description = uInt16PropertyDefinitionObject.getDescription();
        short defaultValue = uInt16PropertyDefinitionObject.getDefaultValue();
        short minValue = uInt16PropertyDefinitionObject.getMinValue();
        short maxValue = uInt16PropertyDefinitionObject.getMaxValue();
        var result = updateUInt16PropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess( ) ) {
            uInt16PropertyDefinitionObject.setRowVersion(result.getRowVersion());
            uInt16PropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt16PropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt16PropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt16PropertyDefinition( UInt16PropertyDefinitionObject uInt16PropertyDefinitionObject ) throws SQLException {
        var id = uInt16PropertyDefinitionObject.getId( );
        var rowVersion = uInt16PropertyDefinitionObject.getRowVersion();
        var result = deleteUInt16PropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt32PropertyDefinition( Guid id, Guid elementType, String name, String description, int defaultValue, int minValue, int maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt32PropertyDefinitionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setUInt32(5, defaultValue);
            callableStatement.setUInt32(6, minValue);
            callableStatement.setUInt32(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt32PropertyDefinition( UInt32PropertyDefinitionObject uInt32PropertyDefinitionObject ) throws SQLException {
        Guid id = uInt32PropertyDefinitionObject.getId( );
        Guid elementType = uInt32PropertyDefinitionObject.getElementType( );
        String name = uInt32PropertyDefinitionObject.getName( );
        String description = uInt32PropertyDefinitionObject.getDescription( );
        int defaultValue = uInt32PropertyDefinitionObject.getDefaultValue( );
        int minValue = uInt32PropertyDefinitionObject.getMinValue( );
        int maxValue = uInt32PropertyDefinitionObject.getMaxValue( );
        var result = insertUInt32PropertyDefinition( id, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess() ) {
            uInt32PropertyDefinitionObject.setId(result.getId());
            uInt32PropertyDefinitionObject.setRowVersion(0);
            uInt32PropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateUInt32PropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, int defaultValue, int minValue, int maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt32PropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setUInt32(6, defaultValue);
            callableStatement.setUInt32(7, minValue);
            callableStatement.setUInt32(8, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt32PropertyDefinition( UInt32PropertyDefinitionObject uInt32PropertyDefinitionObject ) throws SQLException {
        Guid id = uInt32PropertyDefinitionObject.getId();
        long rowVersion = uInt32PropertyDefinitionObject.getRowVersion();
        Guid elementType = uInt32PropertyDefinitionObject.getElementType();
        String name = uInt32PropertyDefinitionObject.getName();
        String description = uInt32PropertyDefinitionObject.getDescription();
        int defaultValue = uInt32PropertyDefinitionObject.getDefaultValue();
        int minValue = uInt32PropertyDefinitionObject.getMinValue();
        int maxValue = uInt32PropertyDefinitionObject.getMaxValue();
        var result = updateUInt32PropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess( ) ) {
            uInt32PropertyDefinitionObject.setRowVersion(result.getRowVersion());
            uInt32PropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt32PropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt32PropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt32PropertyDefinition( UInt32PropertyDefinitionObject uInt32PropertyDefinitionObject ) throws SQLException {
        var id = uInt32PropertyDefinitionObject.getId( );
        var rowVersion = uInt32PropertyDefinitionObject.getRowVersion();
        var result = deleteUInt32PropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt64PropertyDefinition( Guid id, Guid elementType, String name, String description, long defaultValue, long minValue, long maxValue ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt64PropertyDefinitionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, elementType);
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.setInt64(5, defaultValue);
            callableStatement.setInt64(6, minValue);
            callableStatement.setInt64(7, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt64PropertyDefinition( UInt64PropertyDefinitionObject uInt64PropertyDefinitionObject ) throws SQLException {
        Guid id = uInt64PropertyDefinitionObject.getId( );
        Guid elementType = uInt64PropertyDefinitionObject.getElementType( );
        String name = uInt64PropertyDefinitionObject.getName( );
        String description = uInt64PropertyDefinitionObject.getDescription( );
        long defaultValue = uInt64PropertyDefinitionObject.getDefaultValue( );
        long minValue = uInt64PropertyDefinitionObject.getMinValue( );
        long maxValue = uInt64PropertyDefinitionObject.getMaxValue( );
        var result = insertUInt64PropertyDefinition( id, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess() ) {
            uInt64PropertyDefinitionObject.setId(result.getId());
            uInt64PropertyDefinitionObject.setRowVersion(0);
            uInt64PropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateUInt64PropertyDefinition( Guid id, long rowVersion, Guid elementType, String name, String description, long defaultValue, long minValue, long maxValue ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt64PropertyDefinitionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, elementType);
            callableStatement.setString(4, name);
            callableStatement.setString(5, description);
            callableStatement.setInt64(6, defaultValue);
            callableStatement.setInt64(7, minValue);
            callableStatement.setInt64(8, maxValue);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt64PropertyDefinition( UInt64PropertyDefinitionObject uInt64PropertyDefinitionObject ) throws SQLException {
        Guid id = uInt64PropertyDefinitionObject.getId();
        long rowVersion = uInt64PropertyDefinitionObject.getRowVersion();
        Guid elementType = uInt64PropertyDefinitionObject.getElementType();
        String name = uInt64PropertyDefinitionObject.getName();
        String description = uInt64PropertyDefinitionObject.getDescription();
        long defaultValue = uInt64PropertyDefinitionObject.getDefaultValue();
        long minValue = uInt64PropertyDefinitionObject.getMinValue();
        long maxValue = uInt64PropertyDefinitionObject.getMaxValue();
        var result = updateUInt64PropertyDefinition( id, rowVersion, elementType, name, description, defaultValue, minValue, maxValue );
        if( result.isSuccess( ) ) {
            uInt64PropertyDefinitionObject.setRowVersion(result.getRowVersion());
            uInt64PropertyDefinitionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt64PropertyDefinition( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt64PropertyDefinitionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt64PropertyDefinition( UInt64PropertyDefinitionObject uInt64PropertyDefinitionObject ) throws SQLException {
        var id = uInt64PropertyDefinitionObject.getId( );
        var rowVersion = uInt64PropertyDefinitionObject.getRowVersion();
        var result = deleteUInt64PropertyDefinition( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarAlarmStatus( Guid id, Guid radar, DateTime timestamp, int type ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarAlarmStatusInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarAlarmStatus( RadarAlarmStatusObject radarAlarmStatusObject ) throws SQLException {
        Guid id = radarAlarmStatusObject.getId( );
        Guid radar = radarAlarmStatusObject.getRadar( );
        DateTime timestamp = radarAlarmStatusObject.getTimestamp( );
        int type = radarAlarmStatusObject.getType( );
        var result = insertRadarAlarmStatus( id, radar, timestamp, type );
        if( result.isSuccess() ) {
            radarAlarmStatusObject.setId(result.getId());
            radarAlarmStatusObject.setRowVersion(0);
            radarAlarmStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateRadarAlarmStatus( Guid id, long rowVersion, Guid radar, DateTime timestamp, int type ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarAlarmStatusUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, type);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarAlarmStatus( RadarAlarmStatusObject radarAlarmStatusObject ) throws SQLException {
        Guid id = radarAlarmStatusObject.getId();
        long rowVersion = radarAlarmStatusObject.getRowVersion();
        Guid radar = radarAlarmStatusObject.getRadar();
        DateTime timestamp = radarAlarmStatusObject.getTimestamp();
        int type = radarAlarmStatusObject.getType();
        var result = updateRadarAlarmStatus( id, rowVersion, radar, timestamp, type );
        if( result.isSuccess( ) ) {
            radarAlarmStatusObject.setRowVersion(result.getRowVersion());
            radarAlarmStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarAlarmStatus( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarAlarmStatusDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarAlarmStatus( RadarAlarmStatusObject radarAlarmStatusObject ) throws SQLException {
        var id = radarAlarmStatusObject.getId( );
        var rowVersion = radarAlarmStatusObject.getRowVersion();
        var result = deleteRadarAlarmStatus( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarCommand( Guid id, Guid radar, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarCommandInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarCommand( Guid id, Guid radar, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarCommandInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarCommand( RadarCommandObject radarCommandObject ) throws SQLException {
        Guid id = radarCommandObject.getId( );
        Guid radar = radarCommandObject.getRadar( );
        DateTime timestamp = radarCommandObject.getTimestamp( );
        int deviceCommandSourceType = radarCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = radarCommandObject.getDeviceCommandSourceId( );
        Guid reply = radarCommandObject.getReply( );
        var result = insertRadarCommand( id, radar, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            radarCommandObject.setId(result.getId());
            radarCommandObject.setRowVersion(0);
            radarCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarCommand( RadarCommandObject radarCommandObject ) throws SQLException {
        Guid id = radarCommandObject.getId( );
        Guid radar = radarCommandObject.getRadar( );
        DateTime timestamp = radarCommandObject.getTimestamp( );
        int deviceCommandSourceType = radarCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = radarCommandObject.getDeviceCommandSourceId( );
        var result = insert1RadarCommand( id, radar, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            radarCommandObject.setId( result.getId( ) );
            radarCommandObject.setRowVersion(0);
            radarCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarCommand( Guid id, long rowVersion, Guid radar, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarCommandUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarCommand( Guid id, long rowVersion, Guid radar, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarCommandUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarCommand( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarCommandUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarCommand( RadarCommandObject radarCommandObject ) throws SQLException {
        Guid id = radarCommandObject.getId();
        long rowVersion = radarCommandObject.getRowVersion();
        Guid radar = radarCommandObject.getRadar();
        DateTime timestamp = radarCommandObject.getTimestamp();
        int deviceCommandSourceType = radarCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = radarCommandObject.getDeviceCommandSourceId();
        Guid reply = radarCommandObject.getReply();
        var result = updateRadarCommand( id, rowVersion, radar, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            radarCommandObject.setRowVersion(result.getRowVersion());
            radarCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarCommand( RadarCommandObject radarCommandObject ) throws SQLException {
        Guid id = radarCommandObject.getId();
        long rowVersion = radarCommandObject.getRowVersion();
        Guid radar = radarCommandObject.getRadar();
        DateTime timestamp = radarCommandObject.getTimestamp();
        int deviceCommandSourceType = radarCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = radarCommandObject.getDeviceCommandSourceId();
        var result = update1RadarCommand( id, rowVersion, radar, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            radarCommandObject.setRowVersion(result.getRowVersion());
            radarCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarCommand( RadarCommandObject radarCommandObject ) throws SQLException {
        Guid id = radarCommandObject.getId();
        long rowVersion = radarCommandObject.getRowVersion();
        Guid reply = radarCommandObject.getReply();
        var result = update2RadarCommand( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            radarCommandObject.setRowVersion(result.getRowVersion());
            radarCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarCommand( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarCommandDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarCommand( RadarCommandObject radarCommandObject ) throws SQLException {
        var id = radarCommandObject.getId( );
        var rowVersion = radarCommandObject.getRowVersion();
        var result = deleteRadarCommand( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarCommandGetStatus( Guid id, Guid radar, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarCommandGetStatusInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarCommandGetStatus( Guid id, Guid radar, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarCommandGetStatusInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarCommandGetStatus( RadarCommandGetStatusObject radarCommandGetStatusObject ) throws SQLException {
        Guid id = radarCommandGetStatusObject.getId( );
        Guid radar = radarCommandGetStatusObject.getRadar( );
        DateTime timestamp = radarCommandGetStatusObject.getTimestamp( );
        int deviceCommandSourceType = radarCommandGetStatusObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = radarCommandGetStatusObject.getDeviceCommandSourceId( );
        Guid reply = radarCommandGetStatusObject.getReply( );
        var result = insertRadarCommandGetStatus( id, radar, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            radarCommandGetStatusObject.setId(result.getId());
            radarCommandGetStatusObject.setRowVersion(0);
            radarCommandGetStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarCommandGetStatus( RadarCommandGetStatusObject radarCommandGetStatusObject ) throws SQLException {
        Guid id = radarCommandGetStatusObject.getId( );
        Guid radar = radarCommandGetStatusObject.getRadar( );
        DateTime timestamp = radarCommandGetStatusObject.getTimestamp( );
        int deviceCommandSourceType = radarCommandGetStatusObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = radarCommandGetStatusObject.getDeviceCommandSourceId( );
        var result = insert1RadarCommandGetStatus( id, radar, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            radarCommandGetStatusObject.setId( result.getId( ) );
            radarCommandGetStatusObject.setRowVersion(0);
            radarCommandGetStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarCommandGetStatus( Guid id, long rowVersion, Guid radar, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarCommandGetStatusUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarCommandGetStatus( Guid id, long rowVersion, Guid radar, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarCommandGetStatusUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarCommandGetStatus( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarCommandGetStatusUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarCommandGetStatus( RadarCommandGetStatusObject radarCommandGetStatusObject ) throws SQLException {
        Guid id = radarCommandGetStatusObject.getId();
        long rowVersion = radarCommandGetStatusObject.getRowVersion();
        Guid radar = radarCommandGetStatusObject.getRadar();
        DateTime timestamp = radarCommandGetStatusObject.getTimestamp();
        int deviceCommandSourceType = radarCommandGetStatusObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = radarCommandGetStatusObject.getDeviceCommandSourceId();
        Guid reply = radarCommandGetStatusObject.getReply();
        var result = updateRadarCommandGetStatus( id, rowVersion, radar, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            radarCommandGetStatusObject.setRowVersion(result.getRowVersion());
            radarCommandGetStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarCommandGetStatus( RadarCommandGetStatusObject radarCommandGetStatusObject ) throws SQLException {
        Guid id = radarCommandGetStatusObject.getId();
        long rowVersion = radarCommandGetStatusObject.getRowVersion();
        Guid radar = radarCommandGetStatusObject.getRadar();
        DateTime timestamp = radarCommandGetStatusObject.getTimestamp();
        int deviceCommandSourceType = radarCommandGetStatusObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = radarCommandGetStatusObject.getDeviceCommandSourceId();
        var result = update1RadarCommandGetStatus( id, rowVersion, radar, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            radarCommandGetStatusObject.setRowVersion(result.getRowVersion());
            radarCommandGetStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarCommandGetStatus( RadarCommandGetStatusObject radarCommandGetStatusObject ) throws SQLException {
        Guid id = radarCommandGetStatusObject.getId();
        long rowVersion = radarCommandGetStatusObject.getRowVersion();
        Guid reply = radarCommandGetStatusObject.getReply();
        var result = update2RadarCommandGetStatus( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            radarCommandGetStatusObject.setRowVersion(result.getRowVersion());
            radarCommandGetStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarCommandGetStatus( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarCommandGetStatusDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarCommandGetStatus( RadarCommandGetStatusObject radarCommandGetStatusObject ) throws SQLException {
        var id = radarCommandGetStatusObject.getId( );
        var rowVersion = radarCommandGetStatusObject.getRowVersion();
        var result = deleteRadarCommandGetStatus( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarCommandReply( Guid id, Guid radar, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarCommandReplyInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableGuid(4, command);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarCommandReply( Guid id, Guid radar, DateTime timestamp, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarCommandReplyInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, status);
            callableStatement.setString(5, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarCommandReply( RadarCommandReplyObject radarCommandReplyObject ) throws SQLException {
        Guid id = radarCommandReplyObject.getId( );
        Guid radar = radarCommandReplyObject.getRadar( );
        DateTime timestamp = radarCommandReplyObject.getTimestamp( );
        Guid command = radarCommandReplyObject.getCommand( );
        int status = radarCommandReplyObject.getStatus( );
        String message = radarCommandReplyObject.getMessage( );
        var result = insertRadarCommandReply( id, radar, timestamp, command, status, message );
        if( result.isSuccess() ) {
            radarCommandReplyObject.setId(result.getId());
            radarCommandReplyObject.setRowVersion(0);
            radarCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarCommandReply( RadarCommandReplyObject radarCommandReplyObject ) throws SQLException {
        Guid id = radarCommandReplyObject.getId( );
        Guid radar = radarCommandReplyObject.getRadar( );
        DateTime timestamp = radarCommandReplyObject.getTimestamp( );
        int status = radarCommandReplyObject.getStatus( );
        String message = radarCommandReplyObject.getMessage( );
        var result = insert1RadarCommandReply( id, radar, timestamp, status, message );
        if( result.isSuccess( ) ) {
            radarCommandReplyObject.setId( result.getId( ) );
            radarCommandReplyObject.setRowVersion(0);
            radarCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarCommandReply( Guid id, long rowVersion, Guid radar, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarCommandReplyUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableGuid(5, command);
            callableStatement.setInt32(6, status);
            callableStatement.setString(7, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarCommandReply( Guid id, long rowVersion, Guid radar, DateTime timestamp, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarCommandReplyUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarCommandReply( Guid id, long rowVersion, Guid command ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarCommandReplyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, command);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarCommandReply( RadarCommandReplyObject radarCommandReplyObject ) throws SQLException {
        Guid id = radarCommandReplyObject.getId();
        long rowVersion = radarCommandReplyObject.getRowVersion();
        Guid radar = radarCommandReplyObject.getRadar();
        DateTime timestamp = radarCommandReplyObject.getTimestamp();
        Guid command = radarCommandReplyObject.getCommand();
        int status = radarCommandReplyObject.getStatus();
        String message = radarCommandReplyObject.getMessage();
        var result = updateRadarCommandReply( id, rowVersion, radar, timestamp, command, status, message );
        if( result.isSuccess( ) ) {
            radarCommandReplyObject.setRowVersion(result.getRowVersion());
            radarCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarCommandReply( RadarCommandReplyObject radarCommandReplyObject ) throws SQLException {
        Guid id = radarCommandReplyObject.getId();
        long rowVersion = radarCommandReplyObject.getRowVersion();
        Guid radar = radarCommandReplyObject.getRadar();
        DateTime timestamp = radarCommandReplyObject.getTimestamp();
        int status = radarCommandReplyObject.getStatus();
        String message = radarCommandReplyObject.getMessage();
        var result = update1RadarCommandReply( id, rowVersion, radar, timestamp, status, message );
        if( result.isSuccess( ) ) {
            radarCommandReplyObject.setRowVersion(result.getRowVersion());
            radarCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarCommandReply( RadarCommandReplyObject radarCommandReplyObject ) throws SQLException {
        Guid id = radarCommandReplyObject.getId();
        long rowVersion = radarCommandReplyObject.getRowVersion();
        Guid command = radarCommandReplyObject.getCommand();
        var result = update2RadarCommandReply( id, rowVersion, command );
        if( result.isSuccess( ) ) {
            radarCommandReplyObject.setRowVersion(result.getRowVersion());
            radarCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarCommandReply( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarCommandReplyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarCommandReply( RadarCommandReplyObject radarCommandReplyObject ) throws SQLException {
        var id = radarCommandReplyObject.getId( );
        var rowVersion = radarCommandReplyObject.getRowVersion();
        var result = deleteRadarCommandReply( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarCommandReplyGetStatus( Guid id, Guid radar, DateTime timestamp, Guid command, int status, String message, int azimuthCount, int triggerCount, TimeSpan rotationCount, int pulse, boolean tx ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarCommandReplyGetStatusInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableGuid(4, command);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.setInt32(7, azimuthCount);
            callableStatement.setInt32(8, triggerCount);
            callableStatement.setTimeSpan(9, rotationCount);
            callableStatement.setInt32(10, pulse);
            callableStatement.setBoolean(11, tx);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarCommandReplyGetStatus( Guid id, Guid radar, DateTime timestamp, int status, String message, int azimuthCount, int triggerCount, TimeSpan rotationCount, int pulse, boolean tx ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarCommandReplyGetStatusInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, status);
            callableStatement.setString(5, message);
            callableStatement.setInt32(6, azimuthCount);
            callableStatement.setInt32(7, triggerCount);
            callableStatement.setTimeSpan(8, rotationCount);
            callableStatement.setInt32(9, pulse);
            callableStatement.setBoolean(10, tx);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarCommandReplyGetStatus( RadarCommandReplyGetStatusObject radarCommandReplyGetStatusObject ) throws SQLException {
        Guid id = radarCommandReplyGetStatusObject.getId( );
        Guid radar = radarCommandReplyGetStatusObject.getRadar( );
        DateTime timestamp = radarCommandReplyGetStatusObject.getTimestamp( );
        Guid command = radarCommandReplyGetStatusObject.getCommand( );
        int status = radarCommandReplyGetStatusObject.getStatus( );
        String message = radarCommandReplyGetStatusObject.getMessage( );
        int azimuthCount = radarCommandReplyGetStatusObject.getAzimuthCount( );
        int triggerCount = radarCommandReplyGetStatusObject.getTriggerCount( );
        TimeSpan rotationCount = radarCommandReplyGetStatusObject.getRotationCount( );
        int pulse = radarCommandReplyGetStatusObject.getPulse( );
        boolean tx = radarCommandReplyGetStatusObject.getTx( );
        var result = insertRadarCommandReplyGetStatus( id, radar, timestamp, command, status, message, azimuthCount, triggerCount, rotationCount, pulse, tx );
        if( result.isSuccess() ) {
            radarCommandReplyGetStatusObject.setId(result.getId());
            radarCommandReplyGetStatusObject.setRowVersion(0);
            radarCommandReplyGetStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarCommandReplyGetStatus( RadarCommandReplyGetStatusObject radarCommandReplyGetStatusObject ) throws SQLException {
        Guid id = radarCommandReplyGetStatusObject.getId( );
        Guid radar = radarCommandReplyGetStatusObject.getRadar( );
        DateTime timestamp = radarCommandReplyGetStatusObject.getTimestamp( );
        int status = radarCommandReplyGetStatusObject.getStatus( );
        String message = radarCommandReplyGetStatusObject.getMessage( );
        int azimuthCount = radarCommandReplyGetStatusObject.getAzimuthCount( );
        int triggerCount = radarCommandReplyGetStatusObject.getTriggerCount( );
        TimeSpan rotationCount = radarCommandReplyGetStatusObject.getRotationCount( );
        int pulse = radarCommandReplyGetStatusObject.getPulse( );
        boolean tx = radarCommandReplyGetStatusObject.getTx( );
        var result = insert1RadarCommandReplyGetStatus( id, radar, timestamp, status, message, azimuthCount, triggerCount, rotationCount, pulse, tx );
        if( result.isSuccess( ) ) {
            radarCommandReplyGetStatusObject.setId( result.getId( ) );
            radarCommandReplyGetStatusObject.setRowVersion(0);
            radarCommandReplyGetStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarCommandReplyGetStatus( Guid id, long rowVersion, Guid radar, DateTime timestamp, Guid command, int status, String message, int azimuthCount, int triggerCount, TimeSpan rotationCount, int pulse, boolean tx ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarCommandReplyGetStatusUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableGuid(5, command);
            callableStatement.setInt32(6, status);
            callableStatement.setString(7, message);
            callableStatement.setInt32(8, azimuthCount);
            callableStatement.setInt32(9, triggerCount);
            callableStatement.setTimeSpan(10, rotationCount);
            callableStatement.setInt32(11, pulse);
            callableStatement.setBoolean(12, tx);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarCommandReplyGetStatus( Guid id, long rowVersion, Guid radar, DateTime timestamp, int status, String message, int azimuthCount, int triggerCount, TimeSpan rotationCount, int pulse, boolean tx ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarCommandReplyGetStatusUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.setInt32(7, azimuthCount);
            callableStatement.setInt32(8, triggerCount);
            callableStatement.setTimeSpan(9, rotationCount);
            callableStatement.setInt32(10, pulse);
            callableStatement.setBoolean(11, tx);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarCommandReplyGetStatus( Guid id, long rowVersion, Guid command ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarCommandReplyGetStatusUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, command);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarCommandReplyGetStatus( RadarCommandReplyGetStatusObject radarCommandReplyGetStatusObject ) throws SQLException {
        Guid id = radarCommandReplyGetStatusObject.getId();
        long rowVersion = radarCommandReplyGetStatusObject.getRowVersion();
        Guid radar = radarCommandReplyGetStatusObject.getRadar();
        DateTime timestamp = radarCommandReplyGetStatusObject.getTimestamp();
        Guid command = radarCommandReplyGetStatusObject.getCommand();
        int status = radarCommandReplyGetStatusObject.getStatus();
        String message = radarCommandReplyGetStatusObject.getMessage();
        int azimuthCount = radarCommandReplyGetStatusObject.getAzimuthCount();
        int triggerCount = radarCommandReplyGetStatusObject.getTriggerCount();
        TimeSpan rotationCount = radarCommandReplyGetStatusObject.getRotationCount();
        int pulse = radarCommandReplyGetStatusObject.getPulse();
        boolean tx = radarCommandReplyGetStatusObject.getTx();
        var result = updateRadarCommandReplyGetStatus( id, rowVersion, radar, timestamp, command, status, message, azimuthCount, triggerCount, rotationCount, pulse, tx );
        if( result.isSuccess( ) ) {
            radarCommandReplyGetStatusObject.setRowVersion(result.getRowVersion());
            radarCommandReplyGetStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarCommandReplyGetStatus( RadarCommandReplyGetStatusObject radarCommandReplyGetStatusObject ) throws SQLException {
        Guid id = radarCommandReplyGetStatusObject.getId();
        long rowVersion = radarCommandReplyGetStatusObject.getRowVersion();
        Guid radar = radarCommandReplyGetStatusObject.getRadar();
        DateTime timestamp = radarCommandReplyGetStatusObject.getTimestamp();
        int status = radarCommandReplyGetStatusObject.getStatus();
        String message = radarCommandReplyGetStatusObject.getMessage();
        int azimuthCount = radarCommandReplyGetStatusObject.getAzimuthCount();
        int triggerCount = radarCommandReplyGetStatusObject.getTriggerCount();
        TimeSpan rotationCount = radarCommandReplyGetStatusObject.getRotationCount();
        int pulse = radarCommandReplyGetStatusObject.getPulse();
        boolean tx = radarCommandReplyGetStatusObject.getTx();
        var result = update1RadarCommandReplyGetStatus( id, rowVersion, radar, timestamp, status, message, azimuthCount, triggerCount, rotationCount, pulse, tx );
        if( result.isSuccess( ) ) {
            radarCommandReplyGetStatusObject.setRowVersion(result.getRowVersion());
            radarCommandReplyGetStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarCommandReplyGetStatus( RadarCommandReplyGetStatusObject radarCommandReplyGetStatusObject ) throws SQLException {
        Guid id = radarCommandReplyGetStatusObject.getId();
        long rowVersion = radarCommandReplyGetStatusObject.getRowVersion();
        Guid command = radarCommandReplyGetStatusObject.getCommand();
        var result = update2RadarCommandReplyGetStatus( id, rowVersion, command );
        if( result.isSuccess( ) ) {
            radarCommandReplyGetStatusObject.setRowVersion(result.getRowVersion());
            radarCommandReplyGetStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarCommandReplyGetStatus( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarCommandReplyGetStatusDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarCommandReplyGetStatus( RadarCommandReplyGetStatusObject radarCommandReplyGetStatusObject ) throws SQLException {
        var id = radarCommandReplyGetStatusObject.getId( );
        var rowVersion = radarCommandReplyGetStatusObject.getRowVersion();
        var result = deleteRadarCommandReplyGetStatus( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarConfiguration( Guid id, Guid radar, DateTime timestamp, int radarProtocolVersion, String radarIPAddress, int radarPort, int radarConfigurationPort, TimeSpan skipMagicTimeout, TimeSpan readTimeout, TimeSpan synchronizationInterval, int targetsRefreshRate, int range, int sectorCount, int sectorOffset, int imageColor, Integer imageSubstitutionColor, int transparentColor, double imageScaleFactorX, double imageOffsetX, double imageScaleFactorY, double imageOffsetY, int radarImageType, int trackColor, int vectorColor, boolean enableNmea, String nmeaReceiverIPAddress, int nmeaReceiverPort, String nmeaReceiverSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, radarProtocolVersion);
            callableStatement.setString(5, radarIPAddress);
            callableStatement.setInt32(6, radarPort);
            callableStatement.setInt32(7, radarConfigurationPort);
            callableStatement.setTimeSpan(8, skipMagicTimeout);
            callableStatement.setTimeSpan(9, readTimeout);
            callableStatement.setTimeSpan(10, synchronizationInterval);
            callableStatement.setInt32(11, targetsRefreshRate);
            callableStatement.setInt32(12, range);
            callableStatement.setInt32(13, sectorCount);
            callableStatement.setInt32(14, sectorOffset);
            callableStatement.setUInt32(15, imageColor);
            callableStatement.setNullableUInt32(16, imageSubstitutionColor);
            callableStatement.setUInt32(17, transparentColor);
            callableStatement.setDouble(18, imageScaleFactorX);
            callableStatement.setDouble(19, imageOffsetX);
            callableStatement.setDouble(20, imageScaleFactorY);
            callableStatement.setDouble(21, imageOffsetY);
            callableStatement.setInt32(22, radarImageType);
            callableStatement.setUInt32(23, trackColor);
            callableStatement.setUInt32(24, vectorColor);
            callableStatement.setBoolean(25, enableNmea);
            callableStatement.setString(26, nmeaReceiverIPAddress);
            callableStatement.setInt32(27, nmeaReceiverPort);
            callableStatement.setString(28, nmeaReceiverSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarConfiguration( RadarConfigurationObject radarConfigurationObject ) throws SQLException {
        Guid id = radarConfigurationObject.getId( );
        Guid radar = radarConfigurationObject.getRadar( );
        DateTime timestamp = radarConfigurationObject.getTimestamp( );
        int radarProtocolVersion = radarConfigurationObject.getRadarProtocolVersion( );
        String radarIPAddress = radarConfigurationObject.getRadarIPAddress( );
        int radarPort = radarConfigurationObject.getRadarPort( );
        int radarConfigurationPort = radarConfigurationObject.getRadarConfigurationPort( );
        TimeSpan skipMagicTimeout = radarConfigurationObject.getSkipMagicTimeout( );
        TimeSpan readTimeout = radarConfigurationObject.getReadTimeout( );
        TimeSpan synchronizationInterval = radarConfigurationObject.getSynchronizationInterval( );
        int targetsRefreshRate = radarConfigurationObject.getTargetsRefreshRate( );
        int range = radarConfigurationObject.getRange( );
        int sectorCount = radarConfigurationObject.getSectorCount( );
        int sectorOffset = radarConfigurationObject.getSectorOffset( );
        int imageColor = radarConfigurationObject.getImageColor( );
        Integer imageSubstitutionColor = radarConfigurationObject.getImageSubstitutionColor( );
        int transparentColor = radarConfigurationObject.getTransparentColor( );
        double imageScaleFactorX = radarConfigurationObject.getImageScaleFactorX( );
        double imageOffsetX = radarConfigurationObject.getImageOffsetX( );
        double imageScaleFactorY = radarConfigurationObject.getImageScaleFactorY( );
        double imageOffsetY = radarConfigurationObject.getImageOffsetY( );
        int radarImageType = radarConfigurationObject.getRadarImageType( );
        int trackColor = radarConfigurationObject.getTrackColor( );
        int vectorColor = radarConfigurationObject.getVectorColor( );
        boolean enableNmea = radarConfigurationObject.getEnableNmea( );
        String nmeaReceiverIPAddress = radarConfigurationObject.getNmeaReceiverIPAddress( );
        int nmeaReceiverPort = radarConfigurationObject.getNmeaReceiverPort( );
        String nmeaReceiverSourceId = radarConfigurationObject.getNmeaReceiverSourceId( );
        var result = insertRadarConfiguration( id, radar, timestamp, radarProtocolVersion, radarIPAddress, radarPort, radarConfigurationPort, skipMagicTimeout, readTimeout, synchronizationInterval, targetsRefreshRate, range, sectorCount, sectorOffset, imageColor, imageSubstitutionColor, transparentColor, imageScaleFactorX, imageOffsetX, imageScaleFactorY, imageOffsetY, radarImageType, trackColor, vectorColor, enableNmea, nmeaReceiverIPAddress, nmeaReceiverPort, nmeaReceiverSourceId );
        if( result.isSuccess() ) {
            radarConfigurationObject.setId(result.getId());
            radarConfigurationObject.setRowVersion(0);
            radarConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateRadarConfiguration( Guid id, long rowVersion, Guid radar, DateTime timestamp, int radarProtocolVersion, String radarIPAddress, int radarPort, int radarConfigurationPort, TimeSpan skipMagicTimeout, TimeSpan readTimeout, TimeSpan synchronizationInterval, int targetsRefreshRate, int range, int sectorCount, int sectorOffset, int imageColor, Integer imageSubstitutionColor, int transparentColor, double imageScaleFactorX, double imageOffsetX, double imageScaleFactorY, double imageOffsetY, int radarImageType, int trackColor, int vectorColor, boolean enableNmea, String nmeaReceiverIPAddress, int nmeaReceiverPort, String nmeaReceiverSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, radarProtocolVersion);
            callableStatement.setString(6, radarIPAddress);
            callableStatement.setInt32(7, radarPort);
            callableStatement.setInt32(8, radarConfigurationPort);
            callableStatement.setTimeSpan(9, skipMagicTimeout);
            callableStatement.setTimeSpan(10, readTimeout);
            callableStatement.setTimeSpan(11, synchronizationInterval);
            callableStatement.setInt32(12, targetsRefreshRate);
            callableStatement.setInt32(13, range);
            callableStatement.setInt32(14, sectorCount);
            callableStatement.setInt32(15, sectorOffset);
            callableStatement.setUInt32(16, imageColor);
            callableStatement.setNullableUInt32(17, imageSubstitutionColor);
            callableStatement.setUInt32(18, transparentColor);
            callableStatement.setDouble(19, imageScaleFactorX);
            callableStatement.setDouble(20, imageOffsetX);
            callableStatement.setDouble(21, imageScaleFactorY);
            callableStatement.setDouble(22, imageOffsetY);
            callableStatement.setInt32(23, radarImageType);
            callableStatement.setUInt32(24, trackColor);
            callableStatement.setUInt32(25, vectorColor);
            callableStatement.setBoolean(26, enableNmea);
            callableStatement.setString(27, nmeaReceiverIPAddress);
            callableStatement.setInt32(28, nmeaReceiverPort);
            callableStatement.setString(29, nmeaReceiverSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarConfiguration( RadarConfigurationObject radarConfigurationObject ) throws SQLException {
        Guid id = radarConfigurationObject.getId();
        long rowVersion = radarConfigurationObject.getRowVersion();
        Guid radar = radarConfigurationObject.getRadar();
        DateTime timestamp = radarConfigurationObject.getTimestamp();
        int radarProtocolVersion = radarConfigurationObject.getRadarProtocolVersion();
        String radarIPAddress = radarConfigurationObject.getRadarIPAddress();
        int radarPort = radarConfigurationObject.getRadarPort();
        int radarConfigurationPort = radarConfigurationObject.getRadarConfigurationPort();
        TimeSpan skipMagicTimeout = radarConfigurationObject.getSkipMagicTimeout();
        TimeSpan readTimeout = radarConfigurationObject.getReadTimeout();
        TimeSpan synchronizationInterval = radarConfigurationObject.getSynchronizationInterval();
        int targetsRefreshRate = radarConfigurationObject.getTargetsRefreshRate();
        int range = radarConfigurationObject.getRange();
        int sectorCount = radarConfigurationObject.getSectorCount();
        int sectorOffset = radarConfigurationObject.getSectorOffset();
        int imageColor = radarConfigurationObject.getImageColor();
        Integer imageSubstitutionColor = radarConfigurationObject.getImageSubstitutionColor();
        int transparentColor = radarConfigurationObject.getTransparentColor();
        double imageScaleFactorX = radarConfigurationObject.getImageScaleFactorX();
        double imageOffsetX = radarConfigurationObject.getImageOffsetX();
        double imageScaleFactorY = radarConfigurationObject.getImageScaleFactorY();
        double imageOffsetY = radarConfigurationObject.getImageOffsetY();
        int radarImageType = radarConfigurationObject.getRadarImageType();
        int trackColor = radarConfigurationObject.getTrackColor();
        int vectorColor = radarConfigurationObject.getVectorColor();
        boolean enableNmea = radarConfigurationObject.getEnableNmea();
        String nmeaReceiverIPAddress = radarConfigurationObject.getNmeaReceiverIPAddress();
        int nmeaReceiverPort = radarConfigurationObject.getNmeaReceiverPort();
        String nmeaReceiverSourceId = radarConfigurationObject.getNmeaReceiverSourceId();
        var result = updateRadarConfiguration( id, rowVersion, radar, timestamp, radarProtocolVersion, radarIPAddress, radarPort, radarConfigurationPort, skipMagicTimeout, readTimeout, synchronizationInterval, targetsRefreshRate, range, sectorCount, sectorOffset, imageColor, imageSubstitutionColor, transparentColor, imageScaleFactorX, imageOffsetX, imageScaleFactorY, imageOffsetY, radarImageType, trackColor, vectorColor, enableNmea, nmeaReceiverIPAddress, nmeaReceiverPort, nmeaReceiverSourceId );
        if( result.isSuccess( ) ) {
            radarConfigurationObject.setRowVersion(result.getRowVersion());
            radarConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarConfiguration( RadarConfigurationObject radarConfigurationObject ) throws SQLException {
        var id = radarConfigurationObject.getId( );
        var rowVersion = radarConfigurationObject.getRowVersion();
        var result = deleteRadarConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarImage( Guid id, Guid radar, DateTime timestamp, int depth, int resolution, int range, byte[] image ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarImageInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setUInt32(4, depth);
            callableStatement.setInt32(5, resolution);
            callableStatement.setInt32(6, range);
            callableStatement.setBinary(7, image);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarImage( RadarImageObject radarImageObject ) throws SQLException {
        Guid id = radarImageObject.getId( );
        Guid radar = radarImageObject.getRadar( );
        DateTime timestamp = radarImageObject.getTimestamp( );
        int depth = radarImageObject.getDepth( );
        int resolution = radarImageObject.getResolution( );
        int range = radarImageObject.getRange( );
        byte[] image = radarImageObject.getImage( );
        var result = insertRadarImage( id, radar, timestamp, depth, resolution, range, image );
        if( result.isSuccess() ) {
            radarImageObject.setId(result.getId());
            radarImageObject.setRowVersion(0);
            radarImageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateRadarImage( Guid id, long rowVersion, Guid radar, DateTime timestamp, int depth, int resolution, int range, byte[] image ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarImageUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setUInt32(5, depth);
            callableStatement.setInt32(6, resolution);
            callableStatement.setInt32(7, range);
            callableStatement.setBinary(8, image);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarImage( RadarImageObject radarImageObject ) throws SQLException {
        Guid id = radarImageObject.getId();
        long rowVersion = radarImageObject.getRowVersion();
        Guid radar = radarImageObject.getRadar();
        DateTime timestamp = radarImageObject.getTimestamp();
        int depth = radarImageObject.getDepth();
        int resolution = radarImageObject.getResolution();
        int range = radarImageObject.getRange();
        byte[] image = radarImageObject.getImage();
        var result = updateRadarImage( id, rowVersion, radar, timestamp, depth, resolution, range, image );
        if( result.isSuccess( ) ) {
            radarImageObject.setRowVersion(result.getRowVersion());
            radarImageObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarImage( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarImageDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarImage( RadarImageObject radarImageObject ) throws SQLException {
        var id = radarImageObject.getId( );
        var rowVersion = radarImageObject.getRowVersion();
        var result = deleteRadarImage( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarRawTrackTable( Guid id, Guid radar, DateTime timestamp, int count, byte[] table ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarRawTrackTableInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, count);
            callableStatement.setBinary(5, table);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarRawTrackTable( RadarRawTrackTableObject radarRawTrackTableObject ) throws SQLException {
        Guid id = radarRawTrackTableObject.getId( );
        Guid radar = radarRawTrackTableObject.getRadar( );
        DateTime timestamp = radarRawTrackTableObject.getTimestamp( );
        int count = radarRawTrackTableObject.getCount( );
        byte[] table = radarRawTrackTableObject.getTable( );
        var result = insertRadarRawTrackTable( id, radar, timestamp, count, table );
        if( result.isSuccess() ) {
            radarRawTrackTableObject.setId(result.getId());
            radarRawTrackTableObject.setRowVersion(0);
            radarRawTrackTableObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateRadarRawTrackTable( Guid id, long rowVersion, Guid radar, DateTime timestamp, int count, byte[] table ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarRawTrackTableUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, count);
            callableStatement.setBinary(6, table);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarRawTrackTable( RadarRawTrackTableObject radarRawTrackTableObject ) throws SQLException {
        Guid id = radarRawTrackTableObject.getId();
        long rowVersion = radarRawTrackTableObject.getRowVersion();
        Guid radar = radarRawTrackTableObject.getRadar();
        DateTime timestamp = radarRawTrackTableObject.getTimestamp();
        int count = radarRawTrackTableObject.getCount();
        byte[] table = radarRawTrackTableObject.getTable();
        var result = updateRadarRawTrackTable( id, rowVersion, radar, timestamp, count, table );
        if( result.isSuccess( ) ) {
            radarRawTrackTableObject.setRowVersion(result.getRowVersion());
            radarRawTrackTableObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarRawTrackTable( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarRawTrackTableDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarRawTrackTable( RadarRawTrackTableObject radarRawTrackTableObject ) throws SQLException {
        var id = radarRawTrackTableObject.getId( );
        var rowVersion = radarRawTrackTableObject.getRowVersion();
        var result = deleteRadarRawTrackTable( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarStatus( Guid id, Guid radar, DateTime timestamp, int azimuthCount, int triggerCount, TimeSpan rotationTime, int pulse, boolean tx, boolean tracking ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarStatusInsert(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radar);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, azimuthCount);
            callableStatement.setInt32(5, triggerCount);
            callableStatement.setTimeSpan(6, rotationTime);
            callableStatement.setInt32(7, pulse);
            callableStatement.setBoolean(8, tx);
            callableStatement.setBoolean(9, tracking);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarStatus( RadarStatusObject radarStatusObject ) throws SQLException {
        Guid id = radarStatusObject.getId( );
        Guid radar = radarStatusObject.getRadar( );
        DateTime timestamp = radarStatusObject.getTimestamp( );
        int azimuthCount = radarStatusObject.getAzimuthCount( );
        int triggerCount = radarStatusObject.getTriggerCount( );
        TimeSpan rotationTime = radarStatusObject.getRotationTime( );
        int pulse = radarStatusObject.getPulse( );
        boolean tx = radarStatusObject.getTx( );
        boolean tracking = radarStatusObject.getTracking( );
        var result = insertRadarStatus( id, radar, timestamp, azimuthCount, triggerCount, rotationTime, pulse, tx, tracking );
        if( result.isSuccess() ) {
            radarStatusObject.setId(result.getId());
            radarStatusObject.setRowVersion(0);
            radarStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateRadarStatus( Guid id, long rowVersion, Guid radar, DateTime timestamp, int azimuthCount, int triggerCount, TimeSpan rotationTime, int pulse, boolean tx, boolean tracking ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarStatusUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radar);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, azimuthCount);
            callableStatement.setInt32(6, triggerCount);
            callableStatement.setTimeSpan(7, rotationTime);
            callableStatement.setInt32(8, pulse);
            callableStatement.setBoolean(9, tx);
            callableStatement.setBoolean(10, tracking);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarStatus( RadarStatusObject radarStatusObject ) throws SQLException {
        Guid id = radarStatusObject.getId();
        long rowVersion = radarStatusObject.getRowVersion();
        Guid radar = radarStatusObject.getRadar();
        DateTime timestamp = radarStatusObject.getTimestamp();
        int azimuthCount = radarStatusObject.getAzimuthCount();
        int triggerCount = radarStatusObject.getTriggerCount();
        TimeSpan rotationTime = radarStatusObject.getRotationTime();
        int pulse = radarStatusObject.getPulse();
        boolean tx = radarStatusObject.getTx();
        boolean tracking = radarStatusObject.getTracking();
        var result = updateRadarStatus( id, rowVersion, radar, timestamp, azimuthCount, triggerCount, rotationTime, pulse, tx, tracking );
        if( result.isSuccess( ) ) {
            radarStatusObject.setRowVersion(result.getRowVersion());
            radarStatusObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarStatus( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarStatusDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarStatus( RadarStatusObject radarStatusObject ) throws SQLException {
        var id = radarStatusObject.getId( );
        var rowVersion = radarStatusObject.getRowVersion();
        var result = deleteRadarStatus( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadioCommand( Guid id, Guid radio, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadioCommandInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radio);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadioCommand( Guid id, Guid radio, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadioCommandInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radio);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadioCommand( RadioCommandObject radioCommandObject ) throws SQLException {
        Guid id = radioCommandObject.getId( );
        Guid radio = radioCommandObject.getRadio( );
        DateTime timestamp = radioCommandObject.getTimestamp( );
        int deviceCommandSourceType = radioCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = radioCommandObject.getDeviceCommandSourceId( );
        Guid reply = radioCommandObject.getReply( );
        var result = insertRadioCommand( id, radio, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            radioCommandObject.setId(result.getId());
            radioCommandObject.setRowVersion(0);
            radioCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadioCommand( RadioCommandObject radioCommandObject ) throws SQLException {
        Guid id = radioCommandObject.getId( );
        Guid radio = radioCommandObject.getRadio( );
        DateTime timestamp = radioCommandObject.getTimestamp( );
        int deviceCommandSourceType = radioCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = radioCommandObject.getDeviceCommandSourceId( );
        var result = insert1RadioCommand( id, radio, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            radioCommandObject.setId( result.getId( ) );
            radioCommandObject.setRowVersion(0);
            radioCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadioCommand( Guid id, long rowVersion, Guid radio, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadioCommandUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radio);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadioCommand( Guid id, long rowVersion, Guid radio, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadioCommandUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radio);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadioCommand( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadioCommandUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadioCommand( RadioCommandObject radioCommandObject ) throws SQLException {
        Guid id = radioCommandObject.getId();
        long rowVersion = radioCommandObject.getRowVersion();
        Guid radio = radioCommandObject.getRadio();
        DateTime timestamp = radioCommandObject.getTimestamp();
        int deviceCommandSourceType = radioCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = radioCommandObject.getDeviceCommandSourceId();
        Guid reply = radioCommandObject.getReply();
        var result = updateRadioCommand( id, rowVersion, radio, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            radioCommandObject.setRowVersion(result.getRowVersion());
            radioCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadioCommand( RadioCommandObject radioCommandObject ) throws SQLException {
        Guid id = radioCommandObject.getId();
        long rowVersion = radioCommandObject.getRowVersion();
        Guid radio = radioCommandObject.getRadio();
        DateTime timestamp = radioCommandObject.getTimestamp();
        int deviceCommandSourceType = radioCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = radioCommandObject.getDeviceCommandSourceId();
        var result = update1RadioCommand( id, rowVersion, radio, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            radioCommandObject.setRowVersion(result.getRowVersion());
            radioCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadioCommand( RadioCommandObject radioCommandObject ) throws SQLException {
        Guid id = radioCommandObject.getId();
        long rowVersion = radioCommandObject.getRowVersion();
        Guid reply = radioCommandObject.getReply();
        var result = update2RadioCommand( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            radioCommandObject.setRowVersion(result.getRowVersion());
            radioCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadioCommand( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadioCommandDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadioCommand( RadioCommandObject radioCommandObject ) throws SQLException {
        var id = radioCommandObject.getId( );
        var rowVersion = radioCommandObject.getRowVersion();
        var result = deleteRadioCommand( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadioCommandReply( Guid id, Guid radio, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadioCommandReplyInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radio);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableGuid(4, command);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadioCommandReply( Guid id, Guid radio, DateTime timestamp, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadioCommandReplyInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radio);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, status);
            callableStatement.setString(5, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadioCommandReply( RadioCommandReplyObject radioCommandReplyObject ) throws SQLException {
        Guid id = radioCommandReplyObject.getId( );
        Guid radio = radioCommandReplyObject.getRadio( );
        DateTime timestamp = radioCommandReplyObject.getTimestamp( );
        Guid command = radioCommandReplyObject.getCommand( );
        int status = radioCommandReplyObject.getStatus( );
        String message = radioCommandReplyObject.getMessage( );
        var result = insertRadioCommandReply( id, radio, timestamp, command, status, message );
        if( result.isSuccess() ) {
            radioCommandReplyObject.setId(result.getId());
            radioCommandReplyObject.setRowVersion(0);
            radioCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadioCommandReply( RadioCommandReplyObject radioCommandReplyObject ) throws SQLException {
        Guid id = radioCommandReplyObject.getId( );
        Guid radio = radioCommandReplyObject.getRadio( );
        DateTime timestamp = radioCommandReplyObject.getTimestamp( );
        int status = radioCommandReplyObject.getStatus( );
        String message = radioCommandReplyObject.getMessage( );
        var result = insert1RadioCommandReply( id, radio, timestamp, status, message );
        if( result.isSuccess( ) ) {
            radioCommandReplyObject.setId( result.getId( ) );
            radioCommandReplyObject.setRowVersion(0);
            radioCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadioCommandReply( Guid id, long rowVersion, Guid radio, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadioCommandReplyUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radio);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableGuid(5, command);
            callableStatement.setInt32(6, status);
            callableStatement.setString(7, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadioCommandReply( Guid id, long rowVersion, Guid radio, DateTime timestamp, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadioCommandReplyUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radio);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadioCommandReply( Guid id, long rowVersion, Guid command ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadioCommandReplyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, command);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadioCommandReply( RadioCommandReplyObject radioCommandReplyObject ) throws SQLException {
        Guid id = radioCommandReplyObject.getId();
        long rowVersion = radioCommandReplyObject.getRowVersion();
        Guid radio = radioCommandReplyObject.getRadio();
        DateTime timestamp = radioCommandReplyObject.getTimestamp();
        Guid command = radioCommandReplyObject.getCommand();
        int status = radioCommandReplyObject.getStatus();
        String message = radioCommandReplyObject.getMessage();
        var result = updateRadioCommandReply( id, rowVersion, radio, timestamp, command, status, message );
        if( result.isSuccess( ) ) {
            radioCommandReplyObject.setRowVersion(result.getRowVersion());
            radioCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadioCommandReply( RadioCommandReplyObject radioCommandReplyObject ) throws SQLException {
        Guid id = radioCommandReplyObject.getId();
        long rowVersion = radioCommandReplyObject.getRowVersion();
        Guid radio = radioCommandReplyObject.getRadio();
        DateTime timestamp = radioCommandReplyObject.getTimestamp();
        int status = radioCommandReplyObject.getStatus();
        String message = radioCommandReplyObject.getMessage();
        var result = update1RadioCommandReply( id, rowVersion, radio, timestamp, status, message );
        if( result.isSuccess( ) ) {
            radioCommandReplyObject.setRowVersion(result.getRowVersion());
            radioCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadioCommandReply( RadioCommandReplyObject radioCommandReplyObject ) throws SQLException {
        Guid id = radioCommandReplyObject.getId();
        long rowVersion = radioCommandReplyObject.getRowVersion();
        Guid command = radioCommandReplyObject.getCommand();
        var result = update2RadioCommandReply( id, rowVersion, command );
        if( result.isSuccess( ) ) {
            radioCommandReplyObject.setRowVersion(result.getRowVersion());
            radioCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadioCommandReply( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadioCommandReplyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadioCommandReply( RadioCommandReplyObject radioCommandReplyObject ) throws SQLException {
        var id = radioCommandReplyObject.getId( );
        var rowVersion = radioCommandReplyObject.getRowVersion();
        var result = deleteRadioCommandReply( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadioConfiguration( Guid id, Guid radio, DateTime timestamp, double longitude, double latitude, String playbackUrl, String radioIPAddress, int radioPort, String ed137IPAddress, int ed137Port ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadioConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radio);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setDouble(4, longitude);
            callableStatement.setDouble(5, latitude);
            callableStatement.setString(6, playbackUrl);
            callableStatement.setString(7, radioIPAddress);
            callableStatement.setInt32(8, radioPort);
            callableStatement.setString(9, ed137IPAddress);
            callableStatement.setInt32(10, ed137Port);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadioConfiguration( RadioConfigurationObject radioConfigurationObject ) throws SQLException {
        Guid id = radioConfigurationObject.getId( );
        Guid radio = radioConfigurationObject.getRadio( );
        DateTime timestamp = radioConfigurationObject.getTimestamp( );
        double longitude = radioConfigurationObject.getLongitude( );
        double latitude = radioConfigurationObject.getLatitude( );
        String playbackUrl = radioConfigurationObject.getPlaybackUrl( );
        String radioIPAddress = radioConfigurationObject.getRadioIPAddress( );
        int radioPort = radioConfigurationObject.getRadioPort( );
        String ed137IPAddress = radioConfigurationObject.getEd137IPAddress( );
        int ed137Port = radioConfigurationObject.getEd137Port( );
        var result = insertRadioConfiguration( id, radio, timestamp, longitude, latitude, playbackUrl, radioIPAddress, radioPort, ed137IPAddress, ed137Port );
        if( result.isSuccess() ) {
            radioConfigurationObject.setId(result.getId());
            radioConfigurationObject.setRowVersion(0);
            radioConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateRadioConfiguration( Guid id, long rowVersion, Guid radio, DateTime timestamp, double longitude, double latitude, String playbackUrl, String radioIPAddress, int radioPort, String ed137IPAddress, int ed137Port ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadioConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radio);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setDouble(5, longitude);
            callableStatement.setDouble(6, latitude);
            callableStatement.setString(7, playbackUrl);
            callableStatement.setString(8, radioIPAddress);
            callableStatement.setInt32(9, radioPort);
            callableStatement.setString(10, ed137IPAddress);
            callableStatement.setInt32(11, ed137Port);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadioConfiguration( RadioConfigurationObject radioConfigurationObject ) throws SQLException {
        Guid id = radioConfigurationObject.getId();
        long rowVersion = radioConfigurationObject.getRowVersion();
        Guid radio = radioConfigurationObject.getRadio();
        DateTime timestamp = radioConfigurationObject.getTimestamp();
        double longitude = radioConfigurationObject.getLongitude();
        double latitude = radioConfigurationObject.getLatitude();
        String playbackUrl = radioConfigurationObject.getPlaybackUrl();
        String radioIPAddress = radioConfigurationObject.getRadioIPAddress();
        int radioPort = radioConfigurationObject.getRadioPort();
        String ed137IPAddress = radioConfigurationObject.getEd137IPAddress();
        int ed137Port = radioConfigurationObject.getEd137Port();
        var result = updateRadioConfiguration( id, rowVersion, radio, timestamp, longitude, latitude, playbackUrl, radioIPAddress, radioPort, ed137IPAddress, ed137Port );
        if( result.isSuccess( ) ) {
            radioConfigurationObject.setRowVersion(result.getRowVersion());
            radioConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadioConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadioConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadioConfiguration( RadioConfigurationObject radioConfigurationObject ) throws SQLException {
        var id = radioConfigurationObject.getId( );
        var rowVersion = radioConfigurationObject.getRowVersion();
        var result = deleteRadioConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadomeCommand( Guid id, Guid radome, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeCommandInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radome);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadomeCommand( Guid id, Guid radome, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeCommandInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radome);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadomeCommand( RadomeCommandObject radomeCommandObject ) throws SQLException {
        Guid id = radomeCommandObject.getId( );
        Guid radome = radomeCommandObject.getRadome( );
        DateTime timestamp = radomeCommandObject.getTimestamp( );
        int deviceCommandSourceType = radomeCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = radomeCommandObject.getDeviceCommandSourceId( );
        Guid reply = radomeCommandObject.getReply( );
        var result = insertRadomeCommand( id, radome, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            radomeCommandObject.setId(result.getId());
            radomeCommandObject.setRowVersion(0);
            radomeCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadomeCommand( RadomeCommandObject radomeCommandObject ) throws SQLException {
        Guid id = radomeCommandObject.getId( );
        Guid radome = radomeCommandObject.getRadome( );
        DateTime timestamp = radomeCommandObject.getTimestamp( );
        int deviceCommandSourceType = radomeCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = radomeCommandObject.getDeviceCommandSourceId( );
        var result = insert1RadomeCommand( id, radome, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            radomeCommandObject.setId( result.getId( ) );
            radomeCommandObject.setRowVersion(0);
            radomeCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadomeCommand( Guid id, long rowVersion, Guid radome, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeCommandUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radome);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadomeCommand( Guid id, long rowVersion, Guid radome, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeCommandUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radome);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadomeCommand( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeCommandUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadomeCommand( RadomeCommandObject radomeCommandObject ) throws SQLException {
        Guid id = radomeCommandObject.getId();
        long rowVersion = radomeCommandObject.getRowVersion();
        Guid radome = radomeCommandObject.getRadome();
        DateTime timestamp = radomeCommandObject.getTimestamp();
        int deviceCommandSourceType = radomeCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = radomeCommandObject.getDeviceCommandSourceId();
        Guid reply = radomeCommandObject.getReply();
        var result = updateRadomeCommand( id, rowVersion, radome, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            radomeCommandObject.setRowVersion(result.getRowVersion());
            radomeCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadomeCommand( RadomeCommandObject radomeCommandObject ) throws SQLException {
        Guid id = radomeCommandObject.getId();
        long rowVersion = radomeCommandObject.getRowVersion();
        Guid radome = radomeCommandObject.getRadome();
        DateTime timestamp = radomeCommandObject.getTimestamp();
        int deviceCommandSourceType = radomeCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = radomeCommandObject.getDeviceCommandSourceId();
        var result = update1RadomeCommand( id, rowVersion, radome, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            radomeCommandObject.setRowVersion(result.getRowVersion());
            radomeCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadomeCommand( RadomeCommandObject radomeCommandObject ) throws SQLException {
        Guid id = radomeCommandObject.getId();
        long rowVersion = radomeCommandObject.getRowVersion();
        Guid reply = radomeCommandObject.getReply();
        var result = update2RadomeCommand( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            radomeCommandObject.setRowVersion(result.getRowVersion());
            radomeCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadomeCommand( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadomeCommandDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadomeCommand( RadomeCommandObject radomeCommandObject ) throws SQLException {
        var id = radomeCommandObject.getId( );
        var rowVersion = radomeCommandObject.getRowVersion();
        var result = deleteRadomeCommand( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadomeCommandReply( Guid id, Guid radome, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeCommandReplyInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radome);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableGuid(4, command);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadomeCommandReply( Guid id, Guid radome, DateTime timestamp, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeCommandReplyInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radome);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, status);
            callableStatement.setString(5, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadomeCommandReply( RadomeCommandReplyObject radomeCommandReplyObject ) throws SQLException {
        Guid id = radomeCommandReplyObject.getId( );
        Guid radome = radomeCommandReplyObject.getRadome( );
        DateTime timestamp = radomeCommandReplyObject.getTimestamp( );
        Guid command = radomeCommandReplyObject.getCommand( );
        int status = radomeCommandReplyObject.getStatus( );
        String message = radomeCommandReplyObject.getMessage( );
        var result = insertRadomeCommandReply( id, radome, timestamp, command, status, message );
        if( result.isSuccess() ) {
            radomeCommandReplyObject.setId(result.getId());
            radomeCommandReplyObject.setRowVersion(0);
            radomeCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadomeCommandReply( RadomeCommandReplyObject radomeCommandReplyObject ) throws SQLException {
        Guid id = radomeCommandReplyObject.getId( );
        Guid radome = radomeCommandReplyObject.getRadome( );
        DateTime timestamp = radomeCommandReplyObject.getTimestamp( );
        int status = radomeCommandReplyObject.getStatus( );
        String message = radomeCommandReplyObject.getMessage( );
        var result = insert1RadomeCommandReply( id, radome, timestamp, status, message );
        if( result.isSuccess( ) ) {
            radomeCommandReplyObject.setId( result.getId( ) );
            radomeCommandReplyObject.setRowVersion(0);
            radomeCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadomeCommandReply( Guid id, long rowVersion, Guid radome, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeCommandReplyUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radome);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableGuid(5, command);
            callableStatement.setInt32(6, status);
            callableStatement.setString(7, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadomeCommandReply( Guid id, long rowVersion, Guid radome, DateTime timestamp, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeCommandReplyUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radome);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadomeCommandReply( Guid id, long rowVersion, Guid command ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeCommandReplyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, command);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadomeCommandReply( RadomeCommandReplyObject radomeCommandReplyObject ) throws SQLException {
        Guid id = radomeCommandReplyObject.getId();
        long rowVersion = radomeCommandReplyObject.getRowVersion();
        Guid radome = radomeCommandReplyObject.getRadome();
        DateTime timestamp = radomeCommandReplyObject.getTimestamp();
        Guid command = radomeCommandReplyObject.getCommand();
        int status = radomeCommandReplyObject.getStatus();
        String message = radomeCommandReplyObject.getMessage();
        var result = updateRadomeCommandReply( id, rowVersion, radome, timestamp, command, status, message );
        if( result.isSuccess( ) ) {
            radomeCommandReplyObject.setRowVersion(result.getRowVersion());
            radomeCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadomeCommandReply( RadomeCommandReplyObject radomeCommandReplyObject ) throws SQLException {
        Guid id = radomeCommandReplyObject.getId();
        long rowVersion = radomeCommandReplyObject.getRowVersion();
        Guid radome = radomeCommandReplyObject.getRadome();
        DateTime timestamp = radomeCommandReplyObject.getTimestamp();
        int status = radomeCommandReplyObject.getStatus();
        String message = radomeCommandReplyObject.getMessage();
        var result = update1RadomeCommandReply( id, rowVersion, radome, timestamp, status, message );
        if( result.isSuccess( ) ) {
            radomeCommandReplyObject.setRowVersion(result.getRowVersion());
            radomeCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadomeCommandReply( RadomeCommandReplyObject radomeCommandReplyObject ) throws SQLException {
        Guid id = radomeCommandReplyObject.getId();
        long rowVersion = radomeCommandReplyObject.getRowVersion();
        Guid command = radomeCommandReplyObject.getCommand();
        var result = update2RadomeCommandReply( id, rowVersion, command );
        if( result.isSuccess( ) ) {
            radomeCommandReplyObject.setRowVersion(result.getRowVersion());
            radomeCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadomeCommandReply( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadomeCommandReplyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadomeCommandReply( RadomeCommandReplyObject radomeCommandReplyObject ) throws SQLException {
        var id = radomeCommandReplyObject.getId( );
        var rowVersion = radomeCommandReplyObject.getRowVersion();
        var result = deleteRadomeCommandReply( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadomeConfiguration( Guid id, Guid radome, DateTime timestamp, TimeSpan interval, double lowPressureLimit, double highPressureLimit, double lowTemperatureLimit, double highTemperatureLimit ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, radome);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setTimeSpan(4, interval);
            callableStatement.setDouble(5, lowPressureLimit);
            callableStatement.setDouble(6, highPressureLimit);
            callableStatement.setDouble(7, lowTemperatureLimit);
            callableStatement.setDouble(8, highTemperatureLimit);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadomeConfiguration( RadomeConfigurationObject radomeConfigurationObject ) throws SQLException {
        Guid id = radomeConfigurationObject.getId( );
        Guid radome = radomeConfigurationObject.getRadome( );
        DateTime timestamp = radomeConfigurationObject.getTimestamp( );
        TimeSpan interval = radomeConfigurationObject.getInterval( );
        double lowPressureLimit = radomeConfigurationObject.getLowPressureLimit( );
        double highPressureLimit = radomeConfigurationObject.getHighPressureLimit( );
        double lowTemperatureLimit = radomeConfigurationObject.getLowTemperatureLimit( );
        double highTemperatureLimit = radomeConfigurationObject.getHighTemperatureLimit( );
        var result = insertRadomeConfiguration( id, radome, timestamp, interval, lowPressureLimit, highPressureLimit, lowTemperatureLimit, highTemperatureLimit );
        if( result.isSuccess() ) {
            radomeConfigurationObject.setId(result.getId());
            radomeConfigurationObject.setRowVersion(0);
            radomeConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateRadomeConfiguration( Guid id, long rowVersion, Guid radome, DateTime timestamp, TimeSpan interval, double lowPressureLimit, double highPressureLimit, double lowTemperatureLimit, double highTemperatureLimit ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, radome);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setTimeSpan(5, interval);
            callableStatement.setDouble(6, lowPressureLimit);
            callableStatement.setDouble(7, highPressureLimit);
            callableStatement.setDouble(8, lowTemperatureLimit);
            callableStatement.setDouble(9, highTemperatureLimit);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadomeConfiguration( RadomeConfigurationObject radomeConfigurationObject ) throws SQLException {
        Guid id = radomeConfigurationObject.getId();
        long rowVersion = radomeConfigurationObject.getRowVersion();
        Guid radome = radomeConfigurationObject.getRadome();
        DateTime timestamp = radomeConfigurationObject.getTimestamp();
        TimeSpan interval = radomeConfigurationObject.getInterval();
        double lowPressureLimit = radomeConfigurationObject.getLowPressureLimit();
        double highPressureLimit = radomeConfigurationObject.getHighPressureLimit();
        double lowTemperatureLimit = radomeConfigurationObject.getLowTemperatureLimit();
        double highTemperatureLimit = radomeConfigurationObject.getHighTemperatureLimit();
        var result = updateRadomeConfiguration( id, rowVersion, radome, timestamp, interval, lowPressureLimit, highPressureLimit, lowTemperatureLimit, highTemperatureLimit );
        if( result.isSuccess( ) ) {
            radomeConfigurationObject.setRowVersion(result.getRowVersion());
            radomeConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadomeConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadomeConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadomeConfiguration( RadomeConfigurationObject radomeConfigurationObject ) throws SQLException {
        var id = radomeConfigurationObject.getId( );
        var rowVersion = radomeConfigurationObject.getRowVersion();
        var result = deleteRadomeConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertReferenceTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Guid value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ReferenceTimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setGuid(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertReferenceTimeseriesValue( ReferenceTimeseriesValueObject referenceTimeseriesValueObject ) throws SQLException {
        Guid id = referenceTimeseriesValueObject.getId( );
        Guid timeseries = referenceTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = referenceTimeseriesValueObject.getTimestamp( );
        Guid value = referenceTimeseriesValueObject.getValue( );
        var result = insertReferenceTimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            referenceTimeseriesValueObject.setId(result.getId());
            referenceTimeseriesValueObject.setRowVersion(0);
            referenceTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateReferenceTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Guid value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferenceTimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setGuid(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateReferenceTimeseriesValue( ReferenceTimeseriesValueObject referenceTimeseriesValueObject ) throws SQLException {
        Guid id = referenceTimeseriesValueObject.getId();
        long rowVersion = referenceTimeseriesValueObject.getRowVersion();
        Guid timeseries = referenceTimeseriesValueObject.getTimeseries();
        DateTime timestamp = referenceTimeseriesValueObject.getTimestamp();
        Guid value = referenceTimeseriesValueObject.getValue();
        var result = updateReferenceTimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            referenceTimeseriesValueObject.setRowVersion(result.getRowVersion());
            referenceTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteReferenceTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ReferenceTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteReferenceTimeseriesValue( ReferenceTimeseriesValueObject referenceTimeseriesValueObject ) throws SQLException {
        var id = referenceTimeseriesValueObject.getId( );
        var rowVersion = referenceTimeseriesValueObject.getRowVersion();
        var result = deleteReferenceTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSByteTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Byte value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SByteTimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableInt8(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSByteTimeseriesValue( SByteTimeseriesValueObject sByteTimeseriesValueObject ) throws SQLException {
        Guid id = sByteTimeseriesValueObject.getId( );
        Guid timeseries = sByteTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = sByteTimeseriesValueObject.getTimestamp( );
        Byte value = sByteTimeseriesValueObject.getValue( );
        var result = insertSByteTimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            sByteTimeseriesValueObject.setId(result.getId());
            sByteTimeseriesValueObject.setRowVersion(0);
            sByteTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSByteTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Byte value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SByteTimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableInt8(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSByteTimeseriesValue( SByteTimeseriesValueObject sByteTimeseriesValueObject ) throws SQLException {
        Guid id = sByteTimeseriesValueObject.getId();
        long rowVersion = sByteTimeseriesValueObject.getRowVersion();
        Guid timeseries = sByteTimeseriesValueObject.getTimeseries();
        DateTime timestamp = sByteTimeseriesValueObject.getTimestamp();
        Byte value = sByteTimeseriesValueObject.getValue();
        var result = updateSByteTimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            sByteTimeseriesValueObject.setRowVersion(result.getRowVersion());
            sByteTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSByteTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SByteTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSByteTimeseriesValue( SByteTimeseriesValueObject sByteTimeseriesValueObject ) throws SQLException {
        var id = sByteTimeseriesValueObject.getId( );
        var rowVersion = sByteTimeseriesValueObject.getRowVersion();
        var result = deleteSByteTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSecurityDomain( Guid id, String name, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SecurityDomainInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setString(3, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSecurityDomain( SecurityDomainObject securityDomainObject ) throws SQLException {
        Guid id = securityDomainObject.getId( );
        String name = securityDomainObject.getName( );
        String description = securityDomainObject.getDescription( );
        var result = insertSecurityDomain( id, name, description );
        if( result.isSuccess() ) {
            securityDomainObject.setId(result.getId());
            securityDomainObject.setRowVersion(0);
            securityDomainObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSecurityDomain( Guid id, long rowVersion, String name, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SecurityDomainUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSecurityDomain( SecurityDomainObject securityDomainObject ) throws SQLException {
        Guid id = securityDomainObject.getId();
        long rowVersion = securityDomainObject.getRowVersion();
        String name = securityDomainObject.getName();
        String description = securityDomainObject.getDescription();
        var result = updateSecurityDomain( id, rowVersion, name, description );
        if( result.isSuccess( ) ) {
            securityDomainObject.setRowVersion(result.getRowVersion());
            securityDomainObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSecurityDomain( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SecurityDomainDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSecurityDomain( SecurityDomainObject securityDomainObject ) throws SQLException {
        var id = securityDomainObject.getId( );
        var rowVersion = securityDomainObject.getRowVersion();
        var result = deleteSecurityDomain( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSecurityLogin( Guid id, Guid domain, String identity, String description ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SecurityLoginInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, domain);
            callableStatement.setString(3, identity);
            callableStatement.setString(4, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSecurityLogin( SecurityLoginObject securityLoginObject ) throws SQLException {
        Guid id = securityLoginObject.getId( );
        Guid domain = securityLoginObject.getDomain( );
        String identity = securityLoginObject.getIdentity( );
        String description = securityLoginObject.getDescription( );
        var result = insertSecurityLogin( id, domain, identity, description );
        if( result.isSuccess() ) {
            securityLoginObject.setId(result.getId());
            securityLoginObject.setRowVersion(0);
            securityLoginObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSecurityLogin( Guid id, long rowVersion, Guid domain, String identity, String description ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SecurityLoginUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, domain);
            callableStatement.setString(4, identity);
            callableStatement.setString(5, description);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSecurityLogin( SecurityLoginObject securityLoginObject ) throws SQLException {
        Guid id = securityLoginObject.getId();
        long rowVersion = securityLoginObject.getRowVersion();
        Guid domain = securityLoginObject.getDomain();
        String identity = securityLoginObject.getIdentity();
        String description = securityLoginObject.getDescription();
        var result = updateSecurityLogin( id, rowVersion, domain, identity, description );
        if( result.isSuccess( ) ) {
            securityLoginObject.setRowVersion(result.getRowVersion());
            securityLoginObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSecurityLogin( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SecurityLoginDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSecurityLogin( SecurityLoginObject securityLoginObject ) throws SQLException {
        var id = securityLoginObject.getId( );
        var rowVersion = securityLoginObject.getRowVersion();
        var result = deleteSecurityLogin( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSecurityRole( Guid id, Guid domain, String identity, String description, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SecurityRoleInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, domain);
            callableStatement.setString(3, identity);
            callableStatement.setString(4, description);
            callableStatement.setString(5, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSecurityRole( SecurityRoleObject securityRoleObject ) throws SQLException {
        Guid id = securityRoleObject.getId( );
        Guid domain = securityRoleObject.getDomain( );
        String identity = securityRoleObject.getIdentity( );
        String description = securityRoleObject.getDescription( );
        String name = securityRoleObject.getName( );
        var result = insertSecurityRole( id, domain, identity, description, name );
        if( result.isSuccess() ) {
            securityRoleObject.setId(result.getId());
            securityRoleObject.setRowVersion(0);
            securityRoleObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSecurityRole( Guid id, long rowVersion, Guid domain, String identity, String description, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SecurityRoleUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, domain);
            callableStatement.setString(4, identity);
            callableStatement.setString(5, description);
            callableStatement.setString(6, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSecurityRole( SecurityRoleObject securityRoleObject ) throws SQLException {
        Guid id = securityRoleObject.getId();
        long rowVersion = securityRoleObject.getRowVersion();
        Guid domain = securityRoleObject.getDomain();
        String identity = securityRoleObject.getIdentity();
        String description = securityRoleObject.getDescription();
        String name = securityRoleObject.getName();
        var result = updateSecurityRole( id, rowVersion, domain, identity, description, name );
        if( result.isSuccess( ) ) {
            securityRoleObject.setRowVersion(result.getRowVersion());
            securityRoleObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSecurityRole( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SecurityRoleDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSecurityRole( SecurityRoleObject securityRoleObject ) throws SQLException {
        var id = securityRoleObject.getId( );
        var rowVersion = securityRoleObject.getRowVersion();
        var result = deleteSecurityRole( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSecurityIdentifierRoleLink( Guid id, Guid member, Guid role, DateTime start, DateTime end ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SecurityIdentifierRoleLinkInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, member);
            callableStatement.setGuid(3, role);
            callableStatement.setLongFromDateTime(4, start);
            callableStatement.setLongFromNullableDateTime(5, end);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSecurityIdentifierRoleLink( SecurityIdentifierRoleLinkObject securityIdentifierRoleLinkObject ) throws SQLException {
        Guid id = securityIdentifierRoleLinkObject.getId( );
        Guid member = securityIdentifierRoleLinkObject.getMember( );
        Guid role = securityIdentifierRoleLinkObject.getRole( );
        DateTime start = securityIdentifierRoleLinkObject.getStart( );
        DateTime end = securityIdentifierRoleLinkObject.getEnd( );
        var result = insertSecurityIdentifierRoleLink( id, member, role, start, end );
        if( result.isSuccess() ) {
            securityIdentifierRoleLinkObject.setId(result.getId());
            securityIdentifierRoleLinkObject.setRowVersion(0);
            securityIdentifierRoleLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSecurityIdentifierRoleLink( Guid id, long rowVersion, Guid member, Guid role, DateTime start, DateTime end ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SecurityIdentifierRoleLinkUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, member);
            callableStatement.setGuid(4, role);
            callableStatement.setLongFromDateTime(5, start);
            callableStatement.setLongFromNullableDateTime(6, end);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSecurityIdentifierRoleLink( SecurityIdentifierRoleLinkObject securityIdentifierRoleLinkObject ) throws SQLException {
        Guid id = securityIdentifierRoleLinkObject.getId();
        long rowVersion = securityIdentifierRoleLinkObject.getRowVersion();
        Guid member = securityIdentifierRoleLinkObject.getMember();
        Guid role = securityIdentifierRoleLinkObject.getRole();
        DateTime start = securityIdentifierRoleLinkObject.getStart();
        DateTime end = securityIdentifierRoleLinkObject.getEnd();
        var result = updateSecurityIdentifierRoleLink( id, rowVersion, member, role, start, end );
        if( result.isSuccess( ) ) {
            securityIdentifierRoleLinkObject.setRowVersion(result.getRowVersion());
            securityIdentifierRoleLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSecurityIdentifierRoleLink( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SecurityIdentifierRoleLinkDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSecurityIdentifierRoleLink( SecurityIdentifierRoleLinkObject securityIdentifierRoleLinkObject ) throws SQLException {
        var id = securityIdentifierRoleLinkObject.getId( );
        var rowVersion = securityIdentifierRoleLinkObject.getRowVersion();
        var result = deleteSecurityIdentifierRoleLink( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSecurityLoginSession( Guid id, Guid login, DateTime fromTime, DateTime throughTime, Guid clientSession, String notificationQueueName, String messageQueueName ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SecurityLoginSessionInsert(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, login);
            callableStatement.setLongFromDateTime(3, fromTime);
            callableStatement.setLongFromNullableDateTime(4, throughTime);
            callableStatement.setGuid(5, clientSession);
            callableStatement.setString(6, notificationQueueName);
            callableStatement.setString(7, messageQueueName);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSecurityLoginSession( SecurityLoginSessionObject securityLoginSessionObject ) throws SQLException {
        Guid id = securityLoginSessionObject.getId( );
        Guid login = securityLoginSessionObject.getLogin( );
        DateTime fromTime = securityLoginSessionObject.getFromTime( );
        DateTime throughTime = securityLoginSessionObject.getThroughTime( );
        Guid clientSession = securityLoginSessionObject.getClientSession( );
        String notificationQueueName = securityLoginSessionObject.getNotificationQueueName( );
        String messageQueueName = securityLoginSessionObject.getMessageQueueName( );
        var result = insertSecurityLoginSession( id, login, fromTime, throughTime, clientSession, notificationQueueName, messageQueueName );
        if( result.isSuccess() ) {
            securityLoginSessionObject.setId(result.getId());
            securityLoginSessionObject.setRowVersion(0);
            securityLoginSessionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSecurityLoginSession( Guid id, long rowVersion, Guid login, DateTime fromTime, DateTime throughTime, Guid clientSession, String notificationQueueName, String messageQueueName ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SecurityLoginSessionUpdate(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, login);
            callableStatement.setLongFromDateTime(4, fromTime);
            callableStatement.setLongFromNullableDateTime(5, throughTime);
            callableStatement.setGuid(6, clientSession);
            callableStatement.setString(7, notificationQueueName);
            callableStatement.setString(8, messageQueueName);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSecurityLoginSession( SecurityLoginSessionObject securityLoginSessionObject ) throws SQLException {
        Guid id = securityLoginSessionObject.getId();
        long rowVersion = securityLoginSessionObject.getRowVersion();
        Guid login = securityLoginSessionObject.getLogin();
        DateTime fromTime = securityLoginSessionObject.getFromTime();
        DateTime throughTime = securityLoginSessionObject.getThroughTime();
        Guid clientSession = securityLoginSessionObject.getClientSession();
        String notificationQueueName = securityLoginSessionObject.getNotificationQueueName();
        String messageQueueName = securityLoginSessionObject.getMessageQueueName();
        var result = updateSecurityLoginSession( id, rowVersion, login, fromTime, throughTime, clientSession, notificationQueueName, messageQueueName );
        if( result.isSuccess( ) ) {
            securityLoginSessionObject.setRowVersion(result.getRowVersion());
            securityLoginSessionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSecurityLoginSession( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SecurityLoginSessionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSecurityLoginSession( SecurityLoginSessionObject securityLoginSessionObject ) throws SQLException {
        var id = securityLoginSessionObject.getId( );
        var rowVersion = securityLoginSessionObject.getRowVersion();
        var result = deleteSecurityLoginSession( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSecurityPermission( Guid id, Guid identifier, DateTime timestamp, int typeCode, boolean canCreate, boolean canRead, boolean canUpdate, boolean canDelete ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SecurityPermissionInsert(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, identifier);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, typeCode);
            callableStatement.setBoolean(5, canCreate);
            callableStatement.setBoolean(6, canRead);
            callableStatement.setBoolean(7, canUpdate);
            callableStatement.setBoolean(8, canDelete);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSecurityPermission( SecurityPermissionObject securityPermissionObject ) throws SQLException {
        Guid id = securityPermissionObject.getId( );
        Guid identifier = securityPermissionObject.getIdentifier( );
        DateTime timestamp = securityPermissionObject.getTimestamp( );
        int typeCode = securityPermissionObject.getTypeCode( );
        boolean canCreate = securityPermissionObject.getCanCreate( );
        boolean canRead = securityPermissionObject.getCanRead( );
        boolean canUpdate = securityPermissionObject.getCanUpdate( );
        boolean canDelete = securityPermissionObject.getCanDelete( );
        var result = insertSecurityPermission( id, identifier, timestamp, typeCode, canCreate, canRead, canUpdate, canDelete );
        if( result.isSuccess() ) {
            securityPermissionObject.setId(result.getId());
            securityPermissionObject.setRowVersion(0);
            securityPermissionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSecurityPermission( Guid id, long rowVersion, Guid identifier, DateTime timestamp, int typeCode, boolean canCreate, boolean canRead, boolean canUpdate, boolean canDelete ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SecurityPermissionUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, identifier);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, typeCode);
            callableStatement.setBoolean(6, canCreate);
            callableStatement.setBoolean(7, canRead);
            callableStatement.setBoolean(8, canUpdate);
            callableStatement.setBoolean(9, canDelete);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSecurityPermission( SecurityPermissionObject securityPermissionObject ) throws SQLException {
        Guid id = securityPermissionObject.getId();
        long rowVersion = securityPermissionObject.getRowVersion();
        Guid identifier = securityPermissionObject.getIdentifier();
        DateTime timestamp = securityPermissionObject.getTimestamp();
        int typeCode = securityPermissionObject.getTypeCode();
        boolean canCreate = securityPermissionObject.getCanCreate();
        boolean canRead = securityPermissionObject.getCanRead();
        boolean canUpdate = securityPermissionObject.getCanUpdate();
        boolean canDelete = securityPermissionObject.getCanDelete();
        var result = updateSecurityPermission( id, rowVersion, identifier, timestamp, typeCode, canCreate, canRead, canUpdate, canDelete );
        if( result.isSuccess( ) ) {
            securityPermissionObject.setRowVersion(result.getRowVersion());
            securityPermissionObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSecurityPermission( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SecurityPermissionDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSecurityPermission( SecurityPermissionObject securityPermissionObject ) throws SQLException {
        var id = securityPermissionObject.getId( );
        var rowVersion = securityPermissionObject.getRowVersion();
        var result = deleteSecurityPermission( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSingleTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Float value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SingleTimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableSingle(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSingleTimeseriesValue( SingleTimeseriesValueObject singleTimeseriesValueObject ) throws SQLException {
        Guid id = singleTimeseriesValueObject.getId( );
        Guid timeseries = singleTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = singleTimeseriesValueObject.getTimestamp( );
        Float value = singleTimeseriesValueObject.getValue( );
        var result = insertSingleTimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            singleTimeseriesValueObject.setId(result.getId());
            singleTimeseriesValueObject.setRowVersion(0);
            singleTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateSingleTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Float value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SingleTimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableSingle(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSingleTimeseriesValue( SingleTimeseriesValueObject singleTimeseriesValueObject ) throws SQLException {
        Guid id = singleTimeseriesValueObject.getId();
        long rowVersion = singleTimeseriesValueObject.getRowVersion();
        Guid timeseries = singleTimeseriesValueObject.getTimeseries();
        DateTime timestamp = singleTimeseriesValueObject.getTimestamp();
        Float value = singleTimeseriesValueObject.getValue();
        var result = updateSingleTimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            singleTimeseriesValueObject.setRowVersion(result.getRowVersion());
            singleTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSingleTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SingleTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSingleTimeseriesValue( SingleTimeseriesValueObject singleTimeseriesValueObject ) throws SQLException {
        var id = singleTimeseriesValueObject.getId( );
        var rowVersion = singleTimeseriesValueObject.getRowVersion();
        var result = deleteSingleTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertStringTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, String value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call StringTimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setString(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertStringTimeseriesValue( StringTimeseriesValueObject stringTimeseriesValueObject ) throws SQLException {
        Guid id = stringTimeseriesValueObject.getId( );
        Guid timeseries = stringTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = stringTimeseriesValueObject.getTimestamp( );
        String value = stringTimeseriesValueObject.getValue( );
        var result = insertStringTimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            stringTimeseriesValueObject.setId(result.getId());
            stringTimeseriesValueObject.setRowVersion(0);
            stringTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateStringTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, String value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call StringTimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setString(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateStringTimeseriesValue( StringTimeseriesValueObject stringTimeseriesValueObject ) throws SQLException {
        Guid id = stringTimeseriesValueObject.getId();
        long rowVersion = stringTimeseriesValueObject.getRowVersion();
        Guid timeseries = stringTimeseriesValueObject.getTimeseries();
        DateTime timestamp = stringTimeseriesValueObject.getTimestamp();
        String value = stringTimeseriesValueObject.getValue();
        var result = updateStringTimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            stringTimeseriesValueObject.setRowVersion(result.getRowVersion());
            stringTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteStringTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call StringTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteStringTimeseriesValue( StringTimeseriesValueObject stringTimeseriesValueObject ) throws SQLException {
        var id = stringTimeseriesValueObject.getId( );
        var rowVersion = stringTimeseriesValueObject.getRowVersion();
        var result = deleteStringTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBinaryTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BinaryTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1BinaryTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BinaryTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBinaryTimeseries( BinaryTimeseriesObject binaryTimeseriesObject ) throws SQLException {
        Guid id = binaryTimeseriesObject.getId( );
        Guid catalog = binaryTimeseriesObject.getCatalog( );
        String name = binaryTimeseriesObject.getName( );
        TimeSpan maxRetention = binaryTimeseriesObject.getMaxRetention( );
        var result = insertBinaryTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            binaryTimeseriesObject.setId(result.getId());
            binaryTimeseriesObject.setRowVersion(0);
            binaryTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1BinaryTimeseries( BinaryTimeseriesObject binaryTimeseriesObject ) throws SQLException {
        Guid id = binaryTimeseriesObject.getId( );
        String name = binaryTimeseriesObject.getName( );
        TimeSpan maxRetention = binaryTimeseriesObject.getMaxRetention( );
        var result = insert1BinaryTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            binaryTimeseriesObject.setId( result.getId( ) );
            binaryTimeseriesObject.setRowVersion(0);
            binaryTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateBinaryTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BinaryTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1BinaryTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BinaryTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2BinaryTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BinaryTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBinaryTimeseries( BinaryTimeseriesObject binaryTimeseriesObject ) throws SQLException {
        Guid id = binaryTimeseriesObject.getId();
        long rowVersion = binaryTimeseriesObject.getRowVersion();
        Guid catalog = binaryTimeseriesObject.getCatalog();
        String name = binaryTimeseriesObject.getName();
        TimeSpan maxRetention = binaryTimeseriesObject.getMaxRetention();
        var result = updateBinaryTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            binaryTimeseriesObject.setRowVersion(result.getRowVersion());
            binaryTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1BinaryTimeseries( BinaryTimeseriesObject binaryTimeseriesObject ) throws SQLException {
        Guid id = binaryTimeseriesObject.getId();
        long rowVersion = binaryTimeseriesObject.getRowVersion();
        String name = binaryTimeseriesObject.getName();
        TimeSpan maxRetention = binaryTimeseriesObject.getMaxRetention();
        var result = update1BinaryTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            binaryTimeseriesObject.setRowVersion(result.getRowVersion());
            binaryTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2BinaryTimeseries( BinaryTimeseriesObject binaryTimeseriesObject ) throws SQLException {
        Guid id = binaryTimeseriesObject.getId();
        long rowVersion = binaryTimeseriesObject.getRowVersion();
        Guid catalog = binaryTimeseriesObject.getCatalog();
        var result = update2BinaryTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            binaryTimeseriesObject.setRowVersion(result.getRowVersion());
            binaryTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBinaryTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BinaryTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBinaryTimeseries( BinaryTimeseriesObject binaryTimeseriesObject ) throws SQLException {
        var id = binaryTimeseriesObject.getId( );
        var rowVersion = binaryTimeseriesObject.getRowVersion();
        var result = deleteBinaryTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertBooleanTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BooleanTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1BooleanTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call BooleanTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertBooleanTimeseries( BooleanTimeseriesObject booleanTimeseriesObject ) throws SQLException {
        Guid id = booleanTimeseriesObject.getId( );
        Guid catalog = booleanTimeseriesObject.getCatalog( );
        String name = booleanTimeseriesObject.getName( );
        TimeSpan maxRetention = booleanTimeseriesObject.getMaxRetention( );
        var result = insertBooleanTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            booleanTimeseriesObject.setId(result.getId());
            booleanTimeseriesObject.setRowVersion(0);
            booleanTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1BooleanTimeseries( BooleanTimeseriesObject booleanTimeseriesObject ) throws SQLException {
        Guid id = booleanTimeseriesObject.getId( );
        String name = booleanTimeseriesObject.getName( );
        TimeSpan maxRetention = booleanTimeseriesObject.getMaxRetention( );
        var result = insert1BooleanTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            booleanTimeseriesObject.setId( result.getId( ) );
            booleanTimeseriesObject.setRowVersion(0);
            booleanTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateBooleanTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BooleanTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1BooleanTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BooleanTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2BooleanTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call BooleanTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateBooleanTimeseries( BooleanTimeseriesObject booleanTimeseriesObject ) throws SQLException {
        Guid id = booleanTimeseriesObject.getId();
        long rowVersion = booleanTimeseriesObject.getRowVersion();
        Guid catalog = booleanTimeseriesObject.getCatalog();
        String name = booleanTimeseriesObject.getName();
        TimeSpan maxRetention = booleanTimeseriesObject.getMaxRetention();
        var result = updateBooleanTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            booleanTimeseriesObject.setRowVersion(result.getRowVersion());
            booleanTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1BooleanTimeseries( BooleanTimeseriesObject booleanTimeseriesObject ) throws SQLException {
        Guid id = booleanTimeseriesObject.getId();
        long rowVersion = booleanTimeseriesObject.getRowVersion();
        String name = booleanTimeseriesObject.getName();
        TimeSpan maxRetention = booleanTimeseriesObject.getMaxRetention();
        var result = update1BooleanTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            booleanTimeseriesObject.setRowVersion(result.getRowVersion());
            booleanTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2BooleanTimeseries( BooleanTimeseriesObject booleanTimeseriesObject ) throws SQLException {
        Guid id = booleanTimeseriesObject.getId();
        long rowVersion = booleanTimeseriesObject.getRowVersion();
        Guid catalog = booleanTimeseriesObject.getCatalog();
        var result = update2BooleanTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            booleanTimeseriesObject.setRowVersion(result.getRowVersion());
            booleanTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteBooleanTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call BooleanTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteBooleanTimeseries( BooleanTimeseriesObject booleanTimeseriesObject ) throws SQLException {
        var id = booleanTimeseriesObject.getId( );
        var rowVersion = booleanTimeseriesObject.getRowVersion();
        var result = deleteBooleanTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisAidToNavigationOffPositionTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid aidToNavigation ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisAidToNavigationOffPositionTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, aidToNavigation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisAidToNavigationOffPositionTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisAidToNavigationOffPositionTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisAidToNavigationOffPositionTimeseries( AisAidToNavigationOffPositionTimeseriesObject aisAidToNavigationOffPositionTimeseriesObject ) throws SQLException {
        Guid id = aisAidToNavigationOffPositionTimeseriesObject.getId( );
        Guid catalog = aisAidToNavigationOffPositionTimeseriesObject.getCatalog( );
        String name = aisAidToNavigationOffPositionTimeseriesObject.getName( );
        TimeSpan maxRetention = aisAidToNavigationOffPositionTimeseriesObject.getMaxRetention( );
        Guid aidToNavigation = aisAidToNavigationOffPositionTimeseriesObject.getAidToNavigation( );
        var result = insertAisAidToNavigationOffPositionTimeseries( id, catalog, name, maxRetention, aidToNavigation );
        if( result.isSuccess() ) {
            aisAidToNavigationOffPositionTimeseriesObject.setId(result.getId());
            aisAidToNavigationOffPositionTimeseriesObject.setRowVersion(0);
            aisAidToNavigationOffPositionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisAidToNavigationOffPositionTimeseries( AisAidToNavigationOffPositionTimeseriesObject aisAidToNavigationOffPositionTimeseriesObject ) throws SQLException {
        Guid id = aisAidToNavigationOffPositionTimeseriesObject.getId( );
        String name = aisAidToNavigationOffPositionTimeseriesObject.getName( );
        TimeSpan maxRetention = aisAidToNavigationOffPositionTimeseriesObject.getMaxRetention( );
        var result = insert1AisAidToNavigationOffPositionTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            aisAidToNavigationOffPositionTimeseriesObject.setId( result.getId( ) );
            aisAidToNavigationOffPositionTimeseriesObject.setRowVersion(0);
            aisAidToNavigationOffPositionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisAidToNavigationOffPositionTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid aidToNavigation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisAidToNavigationOffPositionTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, aidToNavigation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisAidToNavigationOffPositionTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisAidToNavigationOffPositionTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisAidToNavigationOffPositionTimeseries( Guid id, long rowVersion, Guid catalog, Guid aidToNavigation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisAidToNavigationOffPositionTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, aidToNavigation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisAidToNavigationOffPositionTimeseries( AisAidToNavigationOffPositionTimeseriesObject aisAidToNavigationOffPositionTimeseriesObject ) throws SQLException {
        Guid id = aisAidToNavigationOffPositionTimeseriesObject.getId();
        long rowVersion = aisAidToNavigationOffPositionTimeseriesObject.getRowVersion();
        Guid catalog = aisAidToNavigationOffPositionTimeseriesObject.getCatalog();
        String name = aisAidToNavigationOffPositionTimeseriesObject.getName();
        TimeSpan maxRetention = aisAidToNavigationOffPositionTimeseriesObject.getMaxRetention();
        Guid aidToNavigation = aisAidToNavigationOffPositionTimeseriesObject.getAidToNavigation();
        var result = updateAisAidToNavigationOffPositionTimeseries( id, rowVersion, catalog, name, maxRetention, aidToNavigation );
        if( result.isSuccess( ) ) {
            aisAidToNavigationOffPositionTimeseriesObject.setRowVersion(result.getRowVersion());
            aisAidToNavigationOffPositionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisAidToNavigationOffPositionTimeseries( AisAidToNavigationOffPositionTimeseriesObject aisAidToNavigationOffPositionTimeseriesObject ) throws SQLException {
        Guid id = aisAidToNavigationOffPositionTimeseriesObject.getId();
        long rowVersion = aisAidToNavigationOffPositionTimeseriesObject.getRowVersion();
        String name = aisAidToNavigationOffPositionTimeseriesObject.getName();
        TimeSpan maxRetention = aisAidToNavigationOffPositionTimeseriesObject.getMaxRetention();
        var result = update1AisAidToNavigationOffPositionTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            aisAidToNavigationOffPositionTimeseriesObject.setRowVersion(result.getRowVersion());
            aisAidToNavigationOffPositionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisAidToNavigationOffPositionTimeseries( AisAidToNavigationOffPositionTimeseriesObject aisAidToNavigationOffPositionTimeseriesObject ) throws SQLException {
        Guid id = aisAidToNavigationOffPositionTimeseriesObject.getId();
        long rowVersion = aisAidToNavigationOffPositionTimeseriesObject.getRowVersion();
        Guid catalog = aisAidToNavigationOffPositionTimeseriesObject.getCatalog();
        Guid aidToNavigation = aisAidToNavigationOffPositionTimeseriesObject.getAidToNavigation();
        var result = update2AisAidToNavigationOffPositionTimeseries( id, rowVersion, catalog, aidToNavigation );
        if( result.isSuccess( ) ) {
            aisAidToNavigationOffPositionTimeseriesObject.setRowVersion(result.getRowVersion());
            aisAidToNavigationOffPositionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisAidToNavigationOffPositionTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisAidToNavigationOffPositionTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisAidToNavigationOffPositionTimeseries( AisAidToNavigationOffPositionTimeseriesObject aisAidToNavigationOffPositionTimeseriesObject ) throws SQLException {
        var id = aisAidToNavigationOffPositionTimeseriesObject.getId( );
        var rowVersion = aisAidToNavigationOffPositionTimeseriesObject.getRowVersion();
        var result = deleteAisAidToNavigationOffPositionTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDeviceEnabledTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid device ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DeviceEnabledTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, device);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1DeviceEnabledTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DeviceEnabledTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDeviceEnabledTimeseries( DeviceEnabledTimeseriesObject deviceEnabledTimeseriesObject ) throws SQLException {
        Guid id = deviceEnabledTimeseriesObject.getId( );
        Guid catalog = deviceEnabledTimeseriesObject.getCatalog( );
        String name = deviceEnabledTimeseriesObject.getName( );
        TimeSpan maxRetention = deviceEnabledTimeseriesObject.getMaxRetention( );
        Guid device = deviceEnabledTimeseriesObject.getDevice( );
        var result = insertDeviceEnabledTimeseries( id, catalog, name, maxRetention, device );
        if( result.isSuccess() ) {
            deviceEnabledTimeseriesObject.setId(result.getId());
            deviceEnabledTimeseriesObject.setRowVersion(0);
            deviceEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1DeviceEnabledTimeseries( DeviceEnabledTimeseriesObject deviceEnabledTimeseriesObject ) throws SQLException {
        Guid id = deviceEnabledTimeseriesObject.getId( );
        String name = deviceEnabledTimeseriesObject.getName( );
        TimeSpan maxRetention = deviceEnabledTimeseriesObject.getMaxRetention( );
        var result = insert1DeviceEnabledTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            deviceEnabledTimeseriesObject.setId( result.getId( ) );
            deviceEnabledTimeseriesObject.setRowVersion(0);
            deviceEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateDeviceEnabledTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid device ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DeviceEnabledTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, device);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1DeviceEnabledTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DeviceEnabledTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2DeviceEnabledTimeseries( Guid id, long rowVersion, Guid catalog, Guid device ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DeviceEnabledTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, device);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDeviceEnabledTimeseries( DeviceEnabledTimeseriesObject deviceEnabledTimeseriesObject ) throws SQLException {
        Guid id = deviceEnabledTimeseriesObject.getId();
        long rowVersion = deviceEnabledTimeseriesObject.getRowVersion();
        Guid catalog = deviceEnabledTimeseriesObject.getCatalog();
        String name = deviceEnabledTimeseriesObject.getName();
        TimeSpan maxRetention = deviceEnabledTimeseriesObject.getMaxRetention();
        Guid device = deviceEnabledTimeseriesObject.getDevice();
        var result = updateDeviceEnabledTimeseries( id, rowVersion, catalog, name, maxRetention, device );
        if( result.isSuccess( ) ) {
            deviceEnabledTimeseriesObject.setRowVersion(result.getRowVersion());
            deviceEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1DeviceEnabledTimeseries( DeviceEnabledTimeseriesObject deviceEnabledTimeseriesObject ) throws SQLException {
        Guid id = deviceEnabledTimeseriesObject.getId();
        long rowVersion = deviceEnabledTimeseriesObject.getRowVersion();
        String name = deviceEnabledTimeseriesObject.getName();
        TimeSpan maxRetention = deviceEnabledTimeseriesObject.getMaxRetention();
        var result = update1DeviceEnabledTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            deviceEnabledTimeseriesObject.setRowVersion(result.getRowVersion());
            deviceEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2DeviceEnabledTimeseries( DeviceEnabledTimeseriesObject deviceEnabledTimeseriesObject ) throws SQLException {
        Guid id = deviceEnabledTimeseriesObject.getId();
        long rowVersion = deviceEnabledTimeseriesObject.getRowVersion();
        Guid catalog = deviceEnabledTimeseriesObject.getCatalog();
        Guid device = deviceEnabledTimeseriesObject.getDevice();
        var result = update2DeviceEnabledTimeseries( id, rowVersion, catalog, device );
        if( result.isSuccess( ) ) {
            deviceEnabledTimeseriesObject.setRowVersion(result.getRowVersion());
            deviceEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDeviceEnabledTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DeviceEnabledTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDeviceEnabledTimeseries( DeviceEnabledTimeseriesObject deviceEnabledTimeseriesObject ) throws SQLException {
        var id = deviceEnabledTimeseriesObject.getId( );
        var rowVersion = deviceEnabledTimeseriesObject.getRowVersion();
        var result = deleteDeviceEnabledTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarAutomaticSensitivityTimeControlTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarAutomaticSensitivityTimeControlTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarAutomaticSensitivityTimeControlTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarAutomaticSensitivityTimeControlTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarAutomaticSensitivityTimeControlTimeseries( RadarAutomaticSensitivityTimeControlTimeseriesObject radarAutomaticSensitivityTimeControlTimeseriesObject ) throws SQLException {
        Guid id = radarAutomaticSensitivityTimeControlTimeseriesObject.getId( );
        Guid catalog = radarAutomaticSensitivityTimeControlTimeseriesObject.getCatalog( );
        String name = radarAutomaticSensitivityTimeControlTimeseriesObject.getName( );
        TimeSpan maxRetention = radarAutomaticSensitivityTimeControlTimeseriesObject.getMaxRetention( );
        Guid radar = radarAutomaticSensitivityTimeControlTimeseriesObject.getRadar( );
        var result = insertRadarAutomaticSensitivityTimeControlTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarAutomaticSensitivityTimeControlTimeseriesObject.setId(result.getId());
            radarAutomaticSensitivityTimeControlTimeseriesObject.setRowVersion(0);
            radarAutomaticSensitivityTimeControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarAutomaticSensitivityTimeControlTimeseries( RadarAutomaticSensitivityTimeControlTimeseriesObject radarAutomaticSensitivityTimeControlTimeseriesObject ) throws SQLException {
        Guid id = radarAutomaticSensitivityTimeControlTimeseriesObject.getId( );
        String name = radarAutomaticSensitivityTimeControlTimeseriesObject.getName( );
        TimeSpan maxRetention = radarAutomaticSensitivityTimeControlTimeseriesObject.getMaxRetention( );
        var result = insert1RadarAutomaticSensitivityTimeControlTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarAutomaticSensitivityTimeControlTimeseriesObject.setId( result.getId( ) );
            radarAutomaticSensitivityTimeControlTimeseriesObject.setRowVersion(0);
            radarAutomaticSensitivityTimeControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarAutomaticSensitivityTimeControlTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarAutomaticSensitivityTimeControlTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarAutomaticSensitivityTimeControlTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarAutomaticSensitivityTimeControlTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarAutomaticSensitivityTimeControlTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarAutomaticSensitivityTimeControlTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarAutomaticSensitivityTimeControlTimeseries( RadarAutomaticSensitivityTimeControlTimeseriesObject radarAutomaticSensitivityTimeControlTimeseriesObject ) throws SQLException {
        Guid id = radarAutomaticSensitivityTimeControlTimeseriesObject.getId();
        long rowVersion = radarAutomaticSensitivityTimeControlTimeseriesObject.getRowVersion();
        Guid catalog = radarAutomaticSensitivityTimeControlTimeseriesObject.getCatalog();
        String name = radarAutomaticSensitivityTimeControlTimeseriesObject.getName();
        TimeSpan maxRetention = radarAutomaticSensitivityTimeControlTimeseriesObject.getMaxRetention();
        Guid radar = radarAutomaticSensitivityTimeControlTimeseriesObject.getRadar();
        var result = updateRadarAutomaticSensitivityTimeControlTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarAutomaticSensitivityTimeControlTimeseriesObject.setRowVersion(result.getRowVersion());
            radarAutomaticSensitivityTimeControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarAutomaticSensitivityTimeControlTimeseries( RadarAutomaticSensitivityTimeControlTimeseriesObject radarAutomaticSensitivityTimeControlTimeseriesObject ) throws SQLException {
        Guid id = radarAutomaticSensitivityTimeControlTimeseriesObject.getId();
        long rowVersion = radarAutomaticSensitivityTimeControlTimeseriesObject.getRowVersion();
        String name = radarAutomaticSensitivityTimeControlTimeseriesObject.getName();
        TimeSpan maxRetention = radarAutomaticSensitivityTimeControlTimeseriesObject.getMaxRetention();
        var result = update1RadarAutomaticSensitivityTimeControlTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarAutomaticSensitivityTimeControlTimeseriesObject.setRowVersion(result.getRowVersion());
            radarAutomaticSensitivityTimeControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarAutomaticSensitivityTimeControlTimeseries( RadarAutomaticSensitivityTimeControlTimeseriesObject radarAutomaticSensitivityTimeControlTimeseriesObject ) throws SQLException {
        Guid id = radarAutomaticSensitivityTimeControlTimeseriesObject.getId();
        long rowVersion = radarAutomaticSensitivityTimeControlTimeseriesObject.getRowVersion();
        Guid catalog = radarAutomaticSensitivityTimeControlTimeseriesObject.getCatalog();
        Guid radar = radarAutomaticSensitivityTimeControlTimeseriesObject.getRadar();
        var result = update2RadarAutomaticSensitivityTimeControlTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarAutomaticSensitivityTimeControlTimeseriesObject.setRowVersion(result.getRowVersion());
            radarAutomaticSensitivityTimeControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarAutomaticSensitivityTimeControlTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarAutomaticSensitivityTimeControlTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarAutomaticSensitivityTimeControlTimeseries( RadarAutomaticSensitivityTimeControlTimeseriesObject radarAutomaticSensitivityTimeControlTimeseriesObject ) throws SQLException {
        var id = radarAutomaticSensitivityTimeControlTimeseriesObject.getId( );
        var rowVersion = radarAutomaticSensitivityTimeControlTimeseriesObject.getRowVersion();
        var result = deleteRadarAutomaticSensitivityTimeControlTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarBlankSector1Timeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarBlankSector1TimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarBlankSector1Timeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarBlankSector1TimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarBlankSector1Timeseries( RadarBlankSector1TimeseriesObject radarBlankSector1TimeseriesObject ) throws SQLException {
        Guid id = radarBlankSector1TimeseriesObject.getId( );
        Guid catalog = radarBlankSector1TimeseriesObject.getCatalog( );
        String name = radarBlankSector1TimeseriesObject.getName( );
        TimeSpan maxRetention = radarBlankSector1TimeseriesObject.getMaxRetention( );
        Guid radar = radarBlankSector1TimeseriesObject.getRadar( );
        var result = insertRadarBlankSector1Timeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarBlankSector1TimeseriesObject.setId(result.getId());
            radarBlankSector1TimeseriesObject.setRowVersion(0);
            radarBlankSector1TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarBlankSector1Timeseries( RadarBlankSector1TimeseriesObject radarBlankSector1TimeseriesObject ) throws SQLException {
        Guid id = radarBlankSector1TimeseriesObject.getId( );
        String name = radarBlankSector1TimeseriesObject.getName( );
        TimeSpan maxRetention = radarBlankSector1TimeseriesObject.getMaxRetention( );
        var result = insert1RadarBlankSector1Timeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarBlankSector1TimeseriesObject.setId( result.getId( ) );
            radarBlankSector1TimeseriesObject.setRowVersion(0);
            radarBlankSector1TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarBlankSector1Timeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarBlankSector1TimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarBlankSector1Timeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarBlankSector1TimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarBlankSector1Timeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarBlankSector1TimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarBlankSector1Timeseries( RadarBlankSector1TimeseriesObject radarBlankSector1TimeseriesObject ) throws SQLException {
        Guid id = radarBlankSector1TimeseriesObject.getId();
        long rowVersion = radarBlankSector1TimeseriesObject.getRowVersion();
        Guid catalog = radarBlankSector1TimeseriesObject.getCatalog();
        String name = radarBlankSector1TimeseriesObject.getName();
        TimeSpan maxRetention = radarBlankSector1TimeseriesObject.getMaxRetention();
        Guid radar = radarBlankSector1TimeseriesObject.getRadar();
        var result = updateRadarBlankSector1Timeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarBlankSector1TimeseriesObject.setRowVersion(result.getRowVersion());
            radarBlankSector1TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarBlankSector1Timeseries( RadarBlankSector1TimeseriesObject radarBlankSector1TimeseriesObject ) throws SQLException {
        Guid id = radarBlankSector1TimeseriesObject.getId();
        long rowVersion = radarBlankSector1TimeseriesObject.getRowVersion();
        String name = radarBlankSector1TimeseriesObject.getName();
        TimeSpan maxRetention = radarBlankSector1TimeseriesObject.getMaxRetention();
        var result = update1RadarBlankSector1Timeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarBlankSector1TimeseriesObject.setRowVersion(result.getRowVersion());
            radarBlankSector1TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarBlankSector1Timeseries( RadarBlankSector1TimeseriesObject radarBlankSector1TimeseriesObject ) throws SQLException {
        Guid id = radarBlankSector1TimeseriesObject.getId();
        long rowVersion = radarBlankSector1TimeseriesObject.getRowVersion();
        Guid catalog = radarBlankSector1TimeseriesObject.getCatalog();
        Guid radar = radarBlankSector1TimeseriesObject.getRadar();
        var result = update2RadarBlankSector1Timeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarBlankSector1TimeseriesObject.setRowVersion(result.getRowVersion());
            radarBlankSector1TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarBlankSector1Timeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarBlankSector1TimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarBlankSector1Timeseries( RadarBlankSector1TimeseriesObject radarBlankSector1TimeseriesObject ) throws SQLException {
        var id = radarBlankSector1TimeseriesObject.getId( );
        var rowVersion = radarBlankSector1TimeseriesObject.getRowVersion();
        var result = deleteRadarBlankSector1Timeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarBlankSector2Timeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarBlankSector2TimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarBlankSector2Timeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarBlankSector2TimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarBlankSector2Timeseries( RadarBlankSector2TimeseriesObject radarBlankSector2TimeseriesObject ) throws SQLException {
        Guid id = radarBlankSector2TimeseriesObject.getId( );
        Guid catalog = radarBlankSector2TimeseriesObject.getCatalog( );
        String name = radarBlankSector2TimeseriesObject.getName( );
        TimeSpan maxRetention = radarBlankSector2TimeseriesObject.getMaxRetention( );
        Guid radar = radarBlankSector2TimeseriesObject.getRadar( );
        var result = insertRadarBlankSector2Timeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarBlankSector2TimeseriesObject.setId(result.getId());
            radarBlankSector2TimeseriesObject.setRowVersion(0);
            radarBlankSector2TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarBlankSector2Timeseries( RadarBlankSector2TimeseriesObject radarBlankSector2TimeseriesObject ) throws SQLException {
        Guid id = radarBlankSector2TimeseriesObject.getId( );
        String name = radarBlankSector2TimeseriesObject.getName( );
        TimeSpan maxRetention = radarBlankSector2TimeseriesObject.getMaxRetention( );
        var result = insert1RadarBlankSector2Timeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarBlankSector2TimeseriesObject.setId( result.getId( ) );
            radarBlankSector2TimeseriesObject.setRowVersion(0);
            radarBlankSector2TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarBlankSector2Timeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarBlankSector2TimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarBlankSector2Timeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarBlankSector2TimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarBlankSector2Timeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarBlankSector2TimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarBlankSector2Timeseries( RadarBlankSector2TimeseriesObject radarBlankSector2TimeseriesObject ) throws SQLException {
        Guid id = radarBlankSector2TimeseriesObject.getId();
        long rowVersion = radarBlankSector2TimeseriesObject.getRowVersion();
        Guid catalog = radarBlankSector2TimeseriesObject.getCatalog();
        String name = radarBlankSector2TimeseriesObject.getName();
        TimeSpan maxRetention = radarBlankSector2TimeseriesObject.getMaxRetention();
        Guid radar = radarBlankSector2TimeseriesObject.getRadar();
        var result = updateRadarBlankSector2Timeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarBlankSector2TimeseriesObject.setRowVersion(result.getRowVersion());
            radarBlankSector2TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarBlankSector2Timeseries( RadarBlankSector2TimeseriesObject radarBlankSector2TimeseriesObject ) throws SQLException {
        Guid id = radarBlankSector2TimeseriesObject.getId();
        long rowVersion = radarBlankSector2TimeseriesObject.getRowVersion();
        String name = radarBlankSector2TimeseriesObject.getName();
        TimeSpan maxRetention = radarBlankSector2TimeseriesObject.getMaxRetention();
        var result = update1RadarBlankSector2Timeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarBlankSector2TimeseriesObject.setRowVersion(result.getRowVersion());
            radarBlankSector2TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarBlankSector2Timeseries( RadarBlankSector2TimeseriesObject radarBlankSector2TimeseriesObject ) throws SQLException {
        Guid id = radarBlankSector2TimeseriesObject.getId();
        long rowVersion = radarBlankSector2TimeseriesObject.getRowVersion();
        Guid catalog = radarBlankSector2TimeseriesObject.getCatalog();
        Guid radar = radarBlankSector2TimeseriesObject.getRadar();
        var result = update2RadarBlankSector2Timeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarBlankSector2TimeseriesObject.setRowVersion(result.getRowVersion());
            radarBlankSector2TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarBlankSector2Timeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarBlankSector2TimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarBlankSector2Timeseries( RadarBlankSector2TimeseriesObject radarBlankSector2TimeseriesObject ) throws SQLException {
        var id = radarBlankSector2TimeseriesObject.getId( );
        var rowVersion = radarBlankSector2TimeseriesObject.getRowVersion();
        var result = deleteRadarBlankSector2Timeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarEnableAutomaticFrequencyControlTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarEnableAutomaticFrequencyControlTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarEnableAutomaticFrequencyControlTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarEnableAutomaticFrequencyControlTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarEnableAutomaticFrequencyControlTimeseries( RadarEnableAutomaticFrequencyControlTimeseriesObject radarEnableAutomaticFrequencyControlTimeseriesObject ) throws SQLException {
        Guid id = radarEnableAutomaticFrequencyControlTimeseriesObject.getId( );
        Guid catalog = radarEnableAutomaticFrequencyControlTimeseriesObject.getCatalog( );
        String name = radarEnableAutomaticFrequencyControlTimeseriesObject.getName( );
        TimeSpan maxRetention = radarEnableAutomaticFrequencyControlTimeseriesObject.getMaxRetention( );
        Guid radar = radarEnableAutomaticFrequencyControlTimeseriesObject.getRadar( );
        var result = insertRadarEnableAutomaticFrequencyControlTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarEnableAutomaticFrequencyControlTimeseriesObject.setId(result.getId());
            radarEnableAutomaticFrequencyControlTimeseriesObject.setRowVersion(0);
            radarEnableAutomaticFrequencyControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarEnableAutomaticFrequencyControlTimeseries( RadarEnableAutomaticFrequencyControlTimeseriesObject radarEnableAutomaticFrequencyControlTimeseriesObject ) throws SQLException {
        Guid id = radarEnableAutomaticFrequencyControlTimeseriesObject.getId( );
        String name = radarEnableAutomaticFrequencyControlTimeseriesObject.getName( );
        TimeSpan maxRetention = radarEnableAutomaticFrequencyControlTimeseriesObject.getMaxRetention( );
        var result = insert1RadarEnableAutomaticFrequencyControlTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarEnableAutomaticFrequencyControlTimeseriesObject.setId( result.getId( ) );
            radarEnableAutomaticFrequencyControlTimeseriesObject.setRowVersion(0);
            radarEnableAutomaticFrequencyControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarEnableAutomaticFrequencyControlTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarEnableAutomaticFrequencyControlTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarEnableAutomaticFrequencyControlTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarEnableAutomaticFrequencyControlTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarEnableAutomaticFrequencyControlTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarEnableAutomaticFrequencyControlTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarEnableAutomaticFrequencyControlTimeseries( RadarEnableAutomaticFrequencyControlTimeseriesObject radarEnableAutomaticFrequencyControlTimeseriesObject ) throws SQLException {
        Guid id = radarEnableAutomaticFrequencyControlTimeseriesObject.getId();
        long rowVersion = radarEnableAutomaticFrequencyControlTimeseriesObject.getRowVersion();
        Guid catalog = radarEnableAutomaticFrequencyControlTimeseriesObject.getCatalog();
        String name = radarEnableAutomaticFrequencyControlTimeseriesObject.getName();
        TimeSpan maxRetention = radarEnableAutomaticFrequencyControlTimeseriesObject.getMaxRetention();
        Guid radar = radarEnableAutomaticFrequencyControlTimeseriesObject.getRadar();
        var result = updateRadarEnableAutomaticFrequencyControlTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarEnableAutomaticFrequencyControlTimeseriesObject.setRowVersion(result.getRowVersion());
            radarEnableAutomaticFrequencyControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarEnableAutomaticFrequencyControlTimeseries( RadarEnableAutomaticFrequencyControlTimeseriesObject radarEnableAutomaticFrequencyControlTimeseriesObject ) throws SQLException {
        Guid id = radarEnableAutomaticFrequencyControlTimeseriesObject.getId();
        long rowVersion = radarEnableAutomaticFrequencyControlTimeseriesObject.getRowVersion();
        String name = radarEnableAutomaticFrequencyControlTimeseriesObject.getName();
        TimeSpan maxRetention = radarEnableAutomaticFrequencyControlTimeseriesObject.getMaxRetention();
        var result = update1RadarEnableAutomaticFrequencyControlTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarEnableAutomaticFrequencyControlTimeseriesObject.setRowVersion(result.getRowVersion());
            radarEnableAutomaticFrequencyControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarEnableAutomaticFrequencyControlTimeseries( RadarEnableAutomaticFrequencyControlTimeseriesObject radarEnableAutomaticFrequencyControlTimeseriesObject ) throws SQLException {
        Guid id = radarEnableAutomaticFrequencyControlTimeseriesObject.getId();
        long rowVersion = radarEnableAutomaticFrequencyControlTimeseriesObject.getRowVersion();
        Guid catalog = radarEnableAutomaticFrequencyControlTimeseriesObject.getCatalog();
        Guid radar = radarEnableAutomaticFrequencyControlTimeseriesObject.getRadar();
        var result = update2RadarEnableAutomaticFrequencyControlTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarEnableAutomaticFrequencyControlTimeseriesObject.setRowVersion(result.getRowVersion());
            radarEnableAutomaticFrequencyControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarEnableAutomaticFrequencyControlTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarEnableAutomaticFrequencyControlTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarEnableAutomaticFrequencyControlTimeseries( RadarEnableAutomaticFrequencyControlTimeseriesObject radarEnableAutomaticFrequencyControlTimeseriesObject ) throws SQLException {
        var id = radarEnableAutomaticFrequencyControlTimeseriesObject.getId( );
        var rowVersion = radarEnableAutomaticFrequencyControlTimeseriesObject.getRowVersion();
        var result = deleteRadarEnableAutomaticFrequencyControlTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarEnableFastTimeConstantTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarEnableFastTimeConstantTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarEnableFastTimeConstantTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarEnableFastTimeConstantTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarEnableFastTimeConstantTimeseries( RadarEnableFastTimeConstantTimeseriesObject radarEnableFastTimeConstantTimeseriesObject ) throws SQLException {
        Guid id = radarEnableFastTimeConstantTimeseriesObject.getId( );
        Guid catalog = radarEnableFastTimeConstantTimeseriesObject.getCatalog( );
        String name = radarEnableFastTimeConstantTimeseriesObject.getName( );
        TimeSpan maxRetention = radarEnableFastTimeConstantTimeseriesObject.getMaxRetention( );
        Guid radar = radarEnableFastTimeConstantTimeseriesObject.getRadar( );
        var result = insertRadarEnableFastTimeConstantTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarEnableFastTimeConstantTimeseriesObject.setId(result.getId());
            radarEnableFastTimeConstantTimeseriesObject.setRowVersion(0);
            radarEnableFastTimeConstantTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarEnableFastTimeConstantTimeseries( RadarEnableFastTimeConstantTimeseriesObject radarEnableFastTimeConstantTimeseriesObject ) throws SQLException {
        Guid id = radarEnableFastTimeConstantTimeseriesObject.getId( );
        String name = radarEnableFastTimeConstantTimeseriesObject.getName( );
        TimeSpan maxRetention = radarEnableFastTimeConstantTimeseriesObject.getMaxRetention( );
        var result = insert1RadarEnableFastTimeConstantTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarEnableFastTimeConstantTimeseriesObject.setId( result.getId( ) );
            radarEnableFastTimeConstantTimeseriesObject.setRowVersion(0);
            radarEnableFastTimeConstantTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarEnableFastTimeConstantTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarEnableFastTimeConstantTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarEnableFastTimeConstantTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarEnableFastTimeConstantTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarEnableFastTimeConstantTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarEnableFastTimeConstantTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarEnableFastTimeConstantTimeseries( RadarEnableFastTimeConstantTimeseriesObject radarEnableFastTimeConstantTimeseriesObject ) throws SQLException {
        Guid id = radarEnableFastTimeConstantTimeseriesObject.getId();
        long rowVersion = radarEnableFastTimeConstantTimeseriesObject.getRowVersion();
        Guid catalog = radarEnableFastTimeConstantTimeseriesObject.getCatalog();
        String name = radarEnableFastTimeConstantTimeseriesObject.getName();
        TimeSpan maxRetention = radarEnableFastTimeConstantTimeseriesObject.getMaxRetention();
        Guid radar = radarEnableFastTimeConstantTimeseriesObject.getRadar();
        var result = updateRadarEnableFastTimeConstantTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarEnableFastTimeConstantTimeseriesObject.setRowVersion(result.getRowVersion());
            radarEnableFastTimeConstantTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarEnableFastTimeConstantTimeseries( RadarEnableFastTimeConstantTimeseriesObject radarEnableFastTimeConstantTimeseriesObject ) throws SQLException {
        Guid id = radarEnableFastTimeConstantTimeseriesObject.getId();
        long rowVersion = radarEnableFastTimeConstantTimeseriesObject.getRowVersion();
        String name = radarEnableFastTimeConstantTimeseriesObject.getName();
        TimeSpan maxRetention = radarEnableFastTimeConstantTimeseriesObject.getMaxRetention();
        var result = update1RadarEnableFastTimeConstantTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarEnableFastTimeConstantTimeseriesObject.setRowVersion(result.getRowVersion());
            radarEnableFastTimeConstantTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarEnableFastTimeConstantTimeseries( RadarEnableFastTimeConstantTimeseriesObject radarEnableFastTimeConstantTimeseriesObject ) throws SQLException {
        Guid id = radarEnableFastTimeConstantTimeseriesObject.getId();
        long rowVersion = radarEnableFastTimeConstantTimeseriesObject.getRowVersion();
        Guid catalog = radarEnableFastTimeConstantTimeseriesObject.getCatalog();
        Guid radar = radarEnableFastTimeConstantTimeseriesObject.getRadar();
        var result = update2RadarEnableFastTimeConstantTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarEnableFastTimeConstantTimeseriesObject.setRowVersion(result.getRowVersion());
            radarEnableFastTimeConstantTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarEnableFastTimeConstantTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarEnableFastTimeConstantTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarEnableFastTimeConstantTimeseries( RadarEnableFastTimeConstantTimeseriesObject radarEnableFastTimeConstantTimeseriesObject ) throws SQLException {
        var id = radarEnableFastTimeConstantTimeseriesObject.getId( );
        var rowVersion = radarEnableFastTimeConstantTimeseriesObject.getRowVersion();
        var result = deleteRadarEnableFastTimeConstantTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarEnableSensitivityTimeControlTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarEnableSensitivityTimeControlTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarEnableSensitivityTimeControlTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarEnableSensitivityTimeControlTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarEnableSensitivityTimeControlTimeseries( RadarEnableSensitivityTimeControlTimeseriesObject radarEnableSensitivityTimeControlTimeseriesObject ) throws SQLException {
        Guid id = radarEnableSensitivityTimeControlTimeseriesObject.getId( );
        Guid catalog = radarEnableSensitivityTimeControlTimeseriesObject.getCatalog( );
        String name = radarEnableSensitivityTimeControlTimeseriesObject.getName( );
        TimeSpan maxRetention = radarEnableSensitivityTimeControlTimeseriesObject.getMaxRetention( );
        Guid radar = radarEnableSensitivityTimeControlTimeseriesObject.getRadar( );
        var result = insertRadarEnableSensitivityTimeControlTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarEnableSensitivityTimeControlTimeseriesObject.setId(result.getId());
            radarEnableSensitivityTimeControlTimeseriesObject.setRowVersion(0);
            radarEnableSensitivityTimeControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarEnableSensitivityTimeControlTimeseries( RadarEnableSensitivityTimeControlTimeseriesObject radarEnableSensitivityTimeControlTimeseriesObject ) throws SQLException {
        Guid id = radarEnableSensitivityTimeControlTimeseriesObject.getId( );
        String name = radarEnableSensitivityTimeControlTimeseriesObject.getName( );
        TimeSpan maxRetention = radarEnableSensitivityTimeControlTimeseriesObject.getMaxRetention( );
        var result = insert1RadarEnableSensitivityTimeControlTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarEnableSensitivityTimeControlTimeseriesObject.setId( result.getId( ) );
            radarEnableSensitivityTimeControlTimeseriesObject.setRowVersion(0);
            radarEnableSensitivityTimeControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarEnableSensitivityTimeControlTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarEnableSensitivityTimeControlTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarEnableSensitivityTimeControlTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarEnableSensitivityTimeControlTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarEnableSensitivityTimeControlTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarEnableSensitivityTimeControlTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarEnableSensitivityTimeControlTimeseries( RadarEnableSensitivityTimeControlTimeseriesObject radarEnableSensitivityTimeControlTimeseriesObject ) throws SQLException {
        Guid id = radarEnableSensitivityTimeControlTimeseriesObject.getId();
        long rowVersion = radarEnableSensitivityTimeControlTimeseriesObject.getRowVersion();
        Guid catalog = radarEnableSensitivityTimeControlTimeseriesObject.getCatalog();
        String name = radarEnableSensitivityTimeControlTimeseriesObject.getName();
        TimeSpan maxRetention = radarEnableSensitivityTimeControlTimeseriesObject.getMaxRetention();
        Guid radar = radarEnableSensitivityTimeControlTimeseriesObject.getRadar();
        var result = updateRadarEnableSensitivityTimeControlTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarEnableSensitivityTimeControlTimeseriesObject.setRowVersion(result.getRowVersion());
            radarEnableSensitivityTimeControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarEnableSensitivityTimeControlTimeseries( RadarEnableSensitivityTimeControlTimeseriesObject radarEnableSensitivityTimeControlTimeseriesObject ) throws SQLException {
        Guid id = radarEnableSensitivityTimeControlTimeseriesObject.getId();
        long rowVersion = radarEnableSensitivityTimeControlTimeseriesObject.getRowVersion();
        String name = radarEnableSensitivityTimeControlTimeseriesObject.getName();
        TimeSpan maxRetention = radarEnableSensitivityTimeControlTimeseriesObject.getMaxRetention();
        var result = update1RadarEnableSensitivityTimeControlTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarEnableSensitivityTimeControlTimeseriesObject.setRowVersion(result.getRowVersion());
            radarEnableSensitivityTimeControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarEnableSensitivityTimeControlTimeseries( RadarEnableSensitivityTimeControlTimeseriesObject radarEnableSensitivityTimeControlTimeseriesObject ) throws SQLException {
        Guid id = radarEnableSensitivityTimeControlTimeseriesObject.getId();
        long rowVersion = radarEnableSensitivityTimeControlTimeseriesObject.getRowVersion();
        Guid catalog = radarEnableSensitivityTimeControlTimeseriesObject.getCatalog();
        Guid radar = radarEnableSensitivityTimeControlTimeseriesObject.getRadar();
        var result = update2RadarEnableSensitivityTimeControlTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarEnableSensitivityTimeControlTimeseriesObject.setRowVersion(result.getRowVersion());
            radarEnableSensitivityTimeControlTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarEnableSensitivityTimeControlTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarEnableSensitivityTimeControlTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarEnableSensitivityTimeControlTimeseries( RadarEnableSensitivityTimeControlTimeseriesObject radarEnableSensitivityTimeControlTimeseriesObject ) throws SQLException {
        var id = radarEnableSensitivityTimeControlTimeseriesObject.getId( );
        var rowVersion = radarEnableSensitivityTimeControlTimeseriesObject.getRowVersion();
        var result = deleteRadarEnableSensitivityTimeControlTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarPowerOnTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarPowerOnTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarPowerOnTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarPowerOnTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarPowerOnTimeseries( RadarPowerOnTimeseriesObject radarPowerOnTimeseriesObject ) throws SQLException {
        Guid id = radarPowerOnTimeseriesObject.getId( );
        Guid catalog = radarPowerOnTimeseriesObject.getCatalog( );
        String name = radarPowerOnTimeseriesObject.getName( );
        TimeSpan maxRetention = radarPowerOnTimeseriesObject.getMaxRetention( );
        Guid radar = radarPowerOnTimeseriesObject.getRadar( );
        var result = insertRadarPowerOnTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarPowerOnTimeseriesObject.setId(result.getId());
            radarPowerOnTimeseriesObject.setRowVersion(0);
            radarPowerOnTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarPowerOnTimeseries( RadarPowerOnTimeseriesObject radarPowerOnTimeseriesObject ) throws SQLException {
        Guid id = radarPowerOnTimeseriesObject.getId( );
        String name = radarPowerOnTimeseriesObject.getName( );
        TimeSpan maxRetention = radarPowerOnTimeseriesObject.getMaxRetention( );
        var result = insert1RadarPowerOnTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarPowerOnTimeseriesObject.setId( result.getId( ) );
            radarPowerOnTimeseriesObject.setRowVersion(0);
            radarPowerOnTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarPowerOnTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarPowerOnTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarPowerOnTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarPowerOnTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarPowerOnTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarPowerOnTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarPowerOnTimeseries( RadarPowerOnTimeseriesObject radarPowerOnTimeseriesObject ) throws SQLException {
        Guid id = radarPowerOnTimeseriesObject.getId();
        long rowVersion = radarPowerOnTimeseriesObject.getRowVersion();
        Guid catalog = radarPowerOnTimeseriesObject.getCatalog();
        String name = radarPowerOnTimeseriesObject.getName();
        TimeSpan maxRetention = radarPowerOnTimeseriesObject.getMaxRetention();
        Guid radar = radarPowerOnTimeseriesObject.getRadar();
        var result = updateRadarPowerOnTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarPowerOnTimeseriesObject.setRowVersion(result.getRowVersion());
            radarPowerOnTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarPowerOnTimeseries( RadarPowerOnTimeseriesObject radarPowerOnTimeseriesObject ) throws SQLException {
        Guid id = radarPowerOnTimeseriesObject.getId();
        long rowVersion = radarPowerOnTimeseriesObject.getRowVersion();
        String name = radarPowerOnTimeseriesObject.getName();
        TimeSpan maxRetention = radarPowerOnTimeseriesObject.getMaxRetention();
        var result = update1RadarPowerOnTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarPowerOnTimeseriesObject.setRowVersion(result.getRowVersion());
            radarPowerOnTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarPowerOnTimeseries( RadarPowerOnTimeseriesObject radarPowerOnTimeseriesObject ) throws SQLException {
        Guid id = radarPowerOnTimeseriesObject.getId();
        long rowVersion = radarPowerOnTimeseriesObject.getRowVersion();
        Guid catalog = radarPowerOnTimeseriesObject.getCatalog();
        Guid radar = radarPowerOnTimeseriesObject.getRadar();
        var result = update2RadarPowerOnTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarPowerOnTimeseriesObject.setRowVersion(result.getRowVersion());
            radarPowerOnTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarPowerOnTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarPowerOnTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarPowerOnTimeseries( RadarPowerOnTimeseriesObject radarPowerOnTimeseriesObject ) throws SQLException {
        var id = radarPowerOnTimeseriesObject.getId( );
        var rowVersion = radarPowerOnTimeseriesObject.getRowVersion();
        var result = deleteRadarPowerOnTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarSaveSettingsTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarSaveSettingsTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarSaveSettingsTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarSaveSettingsTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarSaveSettingsTimeseries( RadarSaveSettingsTimeseriesObject radarSaveSettingsTimeseriesObject ) throws SQLException {
        Guid id = radarSaveSettingsTimeseriesObject.getId( );
        Guid catalog = radarSaveSettingsTimeseriesObject.getCatalog( );
        String name = radarSaveSettingsTimeseriesObject.getName( );
        TimeSpan maxRetention = radarSaveSettingsTimeseriesObject.getMaxRetention( );
        Guid radar = radarSaveSettingsTimeseriesObject.getRadar( );
        var result = insertRadarSaveSettingsTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarSaveSettingsTimeseriesObject.setId(result.getId());
            radarSaveSettingsTimeseriesObject.setRowVersion(0);
            radarSaveSettingsTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarSaveSettingsTimeseries( RadarSaveSettingsTimeseriesObject radarSaveSettingsTimeseriesObject ) throws SQLException {
        Guid id = radarSaveSettingsTimeseriesObject.getId( );
        String name = radarSaveSettingsTimeseriesObject.getName( );
        TimeSpan maxRetention = radarSaveSettingsTimeseriesObject.getMaxRetention( );
        var result = insert1RadarSaveSettingsTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarSaveSettingsTimeseriesObject.setId( result.getId( ) );
            radarSaveSettingsTimeseriesObject.setRowVersion(0);
            radarSaveSettingsTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarSaveSettingsTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSaveSettingsTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarSaveSettingsTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSaveSettingsTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarSaveSettingsTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSaveSettingsTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarSaveSettingsTimeseries( RadarSaveSettingsTimeseriesObject radarSaveSettingsTimeseriesObject ) throws SQLException {
        Guid id = radarSaveSettingsTimeseriesObject.getId();
        long rowVersion = radarSaveSettingsTimeseriesObject.getRowVersion();
        Guid catalog = radarSaveSettingsTimeseriesObject.getCatalog();
        String name = radarSaveSettingsTimeseriesObject.getName();
        TimeSpan maxRetention = radarSaveSettingsTimeseriesObject.getMaxRetention();
        Guid radar = radarSaveSettingsTimeseriesObject.getRadar();
        var result = updateRadarSaveSettingsTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarSaveSettingsTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSaveSettingsTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarSaveSettingsTimeseries( RadarSaveSettingsTimeseriesObject radarSaveSettingsTimeseriesObject ) throws SQLException {
        Guid id = radarSaveSettingsTimeseriesObject.getId();
        long rowVersion = radarSaveSettingsTimeseriesObject.getRowVersion();
        String name = radarSaveSettingsTimeseriesObject.getName();
        TimeSpan maxRetention = radarSaveSettingsTimeseriesObject.getMaxRetention();
        var result = update1RadarSaveSettingsTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarSaveSettingsTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSaveSettingsTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarSaveSettingsTimeseries( RadarSaveSettingsTimeseriesObject radarSaveSettingsTimeseriesObject ) throws SQLException {
        Guid id = radarSaveSettingsTimeseriesObject.getId();
        long rowVersion = radarSaveSettingsTimeseriesObject.getRowVersion();
        Guid catalog = radarSaveSettingsTimeseriesObject.getCatalog();
        Guid radar = radarSaveSettingsTimeseriesObject.getRadar();
        var result = update2RadarSaveSettingsTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarSaveSettingsTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSaveSettingsTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarSaveSettingsTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarSaveSettingsTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarSaveSettingsTimeseries( RadarSaveSettingsTimeseriesObject radarSaveSettingsTimeseriesObject ) throws SQLException {
        var id = radarSaveSettingsTimeseriesObject.getId( );
        var rowVersion = radarSaveSettingsTimeseriesObject.getRowVersion();
        var result = deleteRadarSaveSettingsTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarTrackingTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarTrackingTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarTrackingTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarTrackingTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarTrackingTimeseries( RadarTrackingTimeseriesObject radarTrackingTimeseriesObject ) throws SQLException {
        Guid id = radarTrackingTimeseriesObject.getId( );
        Guid catalog = radarTrackingTimeseriesObject.getCatalog( );
        String name = radarTrackingTimeseriesObject.getName( );
        TimeSpan maxRetention = radarTrackingTimeseriesObject.getMaxRetention( );
        Guid radar = radarTrackingTimeseriesObject.getRadar( );
        var result = insertRadarTrackingTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarTrackingTimeseriesObject.setId(result.getId());
            radarTrackingTimeseriesObject.setRowVersion(0);
            radarTrackingTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarTrackingTimeseries( RadarTrackingTimeseriesObject radarTrackingTimeseriesObject ) throws SQLException {
        Guid id = radarTrackingTimeseriesObject.getId( );
        String name = radarTrackingTimeseriesObject.getName( );
        TimeSpan maxRetention = radarTrackingTimeseriesObject.getMaxRetention( );
        var result = insert1RadarTrackingTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarTrackingTimeseriesObject.setId( result.getId( ) );
            radarTrackingTimeseriesObject.setRowVersion(0);
            radarTrackingTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarTrackingTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarTrackingTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarTrackingTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarTrackingTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarTrackingTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarTrackingTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarTrackingTimeseries( RadarTrackingTimeseriesObject radarTrackingTimeseriesObject ) throws SQLException {
        Guid id = radarTrackingTimeseriesObject.getId();
        long rowVersion = radarTrackingTimeseriesObject.getRowVersion();
        Guid catalog = radarTrackingTimeseriesObject.getCatalog();
        String name = radarTrackingTimeseriesObject.getName();
        TimeSpan maxRetention = radarTrackingTimeseriesObject.getMaxRetention();
        Guid radar = radarTrackingTimeseriesObject.getRadar();
        var result = updateRadarTrackingTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarTrackingTimeseriesObject.setRowVersion(result.getRowVersion());
            radarTrackingTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarTrackingTimeseries( RadarTrackingTimeseriesObject radarTrackingTimeseriesObject ) throws SQLException {
        Guid id = radarTrackingTimeseriesObject.getId();
        long rowVersion = radarTrackingTimeseriesObject.getRowVersion();
        String name = radarTrackingTimeseriesObject.getName();
        TimeSpan maxRetention = radarTrackingTimeseriesObject.getMaxRetention();
        var result = update1RadarTrackingTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarTrackingTimeseriesObject.setRowVersion(result.getRowVersion());
            radarTrackingTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarTrackingTimeseries( RadarTrackingTimeseriesObject radarTrackingTimeseriesObject ) throws SQLException {
        Guid id = radarTrackingTimeseriesObject.getId();
        long rowVersion = radarTrackingTimeseriesObject.getRowVersion();
        Guid catalog = radarTrackingTimeseriesObject.getCatalog();
        Guid radar = radarTrackingTimeseriesObject.getRadar();
        var result = update2RadarTrackingTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarTrackingTimeseriesObject.setRowVersion(result.getRowVersion());
            radarTrackingTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarTrackingTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarTrackingTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarTrackingTimeseries( RadarTrackingTimeseriesObject radarTrackingTimeseriesObject ) throws SQLException {
        var id = radarTrackingTimeseriesObject.getId( );
        var rowVersion = radarTrackingTimeseriesObject.getRowVersion();
        var result = deleteRadarTrackingTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertMediaProxySessionEnabledTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid proxySession ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MediaProxySessionEnabledTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, proxySession);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1MediaProxySessionEnabledTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MediaProxySessionEnabledTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertMediaProxySessionEnabledTimeseries( MediaProxySessionEnabledTimeseriesObject mediaProxySessionEnabledTimeseriesObject ) throws SQLException {
        Guid id = mediaProxySessionEnabledTimeseriesObject.getId( );
        Guid catalog = mediaProxySessionEnabledTimeseriesObject.getCatalog( );
        String name = mediaProxySessionEnabledTimeseriesObject.getName( );
        TimeSpan maxRetention = mediaProxySessionEnabledTimeseriesObject.getMaxRetention( );
        Guid proxySession = mediaProxySessionEnabledTimeseriesObject.getProxySession( );
        var result = insertMediaProxySessionEnabledTimeseries( id, catalog, name, maxRetention, proxySession );
        if( result.isSuccess() ) {
            mediaProxySessionEnabledTimeseriesObject.setId(result.getId());
            mediaProxySessionEnabledTimeseriesObject.setRowVersion(0);
            mediaProxySessionEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1MediaProxySessionEnabledTimeseries( MediaProxySessionEnabledTimeseriesObject mediaProxySessionEnabledTimeseriesObject ) throws SQLException {
        Guid id = mediaProxySessionEnabledTimeseriesObject.getId( );
        String name = mediaProxySessionEnabledTimeseriesObject.getName( );
        TimeSpan maxRetention = mediaProxySessionEnabledTimeseriesObject.getMaxRetention( );
        var result = insert1MediaProxySessionEnabledTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            mediaProxySessionEnabledTimeseriesObject.setId( result.getId( ) );
            mediaProxySessionEnabledTimeseriesObject.setRowVersion(0);
            mediaProxySessionEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateMediaProxySessionEnabledTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid proxySession ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaProxySessionEnabledTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, proxySession);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1MediaProxySessionEnabledTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaProxySessionEnabledTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2MediaProxySessionEnabledTimeseries( Guid id, long rowVersion, Guid catalog, Guid proxySession ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaProxySessionEnabledTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, proxySession);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateMediaProxySessionEnabledTimeseries( MediaProxySessionEnabledTimeseriesObject mediaProxySessionEnabledTimeseriesObject ) throws SQLException {
        Guid id = mediaProxySessionEnabledTimeseriesObject.getId();
        long rowVersion = mediaProxySessionEnabledTimeseriesObject.getRowVersion();
        Guid catalog = mediaProxySessionEnabledTimeseriesObject.getCatalog();
        String name = mediaProxySessionEnabledTimeseriesObject.getName();
        TimeSpan maxRetention = mediaProxySessionEnabledTimeseriesObject.getMaxRetention();
        Guid proxySession = mediaProxySessionEnabledTimeseriesObject.getProxySession();
        var result = updateMediaProxySessionEnabledTimeseries( id, rowVersion, catalog, name, maxRetention, proxySession );
        if( result.isSuccess( ) ) {
            mediaProxySessionEnabledTimeseriesObject.setRowVersion(result.getRowVersion());
            mediaProxySessionEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1MediaProxySessionEnabledTimeseries( MediaProxySessionEnabledTimeseriesObject mediaProxySessionEnabledTimeseriesObject ) throws SQLException {
        Guid id = mediaProxySessionEnabledTimeseriesObject.getId();
        long rowVersion = mediaProxySessionEnabledTimeseriesObject.getRowVersion();
        String name = mediaProxySessionEnabledTimeseriesObject.getName();
        TimeSpan maxRetention = mediaProxySessionEnabledTimeseriesObject.getMaxRetention();
        var result = update1MediaProxySessionEnabledTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            mediaProxySessionEnabledTimeseriesObject.setRowVersion(result.getRowVersion());
            mediaProxySessionEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2MediaProxySessionEnabledTimeseries( MediaProxySessionEnabledTimeseriesObject mediaProxySessionEnabledTimeseriesObject ) throws SQLException {
        Guid id = mediaProxySessionEnabledTimeseriesObject.getId();
        long rowVersion = mediaProxySessionEnabledTimeseriesObject.getRowVersion();
        Guid catalog = mediaProxySessionEnabledTimeseriesObject.getCatalog();
        Guid proxySession = mediaProxySessionEnabledTimeseriesObject.getProxySession();
        var result = update2MediaProxySessionEnabledTimeseries( id, rowVersion, catalog, proxySession );
        if( result.isSuccess( ) ) {
            mediaProxySessionEnabledTimeseriesObject.setRowVersion(result.getRowVersion());
            mediaProxySessionEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteMediaProxySessionEnabledTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call MediaProxySessionEnabledTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteMediaProxySessionEnabledTimeseries( MediaProxySessionEnabledTimeseriesObject mediaProxySessionEnabledTimeseriesObject ) throws SQLException {
        var id = mediaProxySessionEnabledTimeseriesObject.getId( );
        var rowVersion = mediaProxySessionEnabledTimeseriesObject.getRowVersion();
        var result = deleteMediaProxySessionEnabledTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertMediaServiceEnabledTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid service ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MediaServiceEnabledTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, service);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1MediaServiceEnabledTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call MediaServiceEnabledTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertMediaServiceEnabledTimeseries( MediaServiceEnabledTimeseriesObject mediaServiceEnabledTimeseriesObject ) throws SQLException {
        Guid id = mediaServiceEnabledTimeseriesObject.getId( );
        Guid catalog = mediaServiceEnabledTimeseriesObject.getCatalog( );
        String name = mediaServiceEnabledTimeseriesObject.getName( );
        TimeSpan maxRetention = mediaServiceEnabledTimeseriesObject.getMaxRetention( );
        Guid service = mediaServiceEnabledTimeseriesObject.getService( );
        var result = insertMediaServiceEnabledTimeseries( id, catalog, name, maxRetention, service );
        if( result.isSuccess() ) {
            mediaServiceEnabledTimeseriesObject.setId(result.getId());
            mediaServiceEnabledTimeseriesObject.setRowVersion(0);
            mediaServiceEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1MediaServiceEnabledTimeseries( MediaServiceEnabledTimeseriesObject mediaServiceEnabledTimeseriesObject ) throws SQLException {
        Guid id = mediaServiceEnabledTimeseriesObject.getId( );
        String name = mediaServiceEnabledTimeseriesObject.getName( );
        TimeSpan maxRetention = mediaServiceEnabledTimeseriesObject.getMaxRetention( );
        var result = insert1MediaServiceEnabledTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            mediaServiceEnabledTimeseriesObject.setId( result.getId( ) );
            mediaServiceEnabledTimeseriesObject.setRowVersion(0);
            mediaServiceEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateMediaServiceEnabledTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid service ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaServiceEnabledTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, service);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1MediaServiceEnabledTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaServiceEnabledTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2MediaServiceEnabledTimeseries( Guid id, long rowVersion, Guid catalog, Guid service ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call MediaServiceEnabledTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, service);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateMediaServiceEnabledTimeseries( MediaServiceEnabledTimeseriesObject mediaServiceEnabledTimeseriesObject ) throws SQLException {
        Guid id = mediaServiceEnabledTimeseriesObject.getId();
        long rowVersion = mediaServiceEnabledTimeseriesObject.getRowVersion();
        Guid catalog = mediaServiceEnabledTimeseriesObject.getCatalog();
        String name = mediaServiceEnabledTimeseriesObject.getName();
        TimeSpan maxRetention = mediaServiceEnabledTimeseriesObject.getMaxRetention();
        Guid service = mediaServiceEnabledTimeseriesObject.getService();
        var result = updateMediaServiceEnabledTimeseries( id, rowVersion, catalog, name, maxRetention, service );
        if( result.isSuccess( ) ) {
            mediaServiceEnabledTimeseriesObject.setRowVersion(result.getRowVersion());
            mediaServiceEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1MediaServiceEnabledTimeseries( MediaServiceEnabledTimeseriesObject mediaServiceEnabledTimeseriesObject ) throws SQLException {
        Guid id = mediaServiceEnabledTimeseriesObject.getId();
        long rowVersion = mediaServiceEnabledTimeseriesObject.getRowVersion();
        String name = mediaServiceEnabledTimeseriesObject.getName();
        TimeSpan maxRetention = mediaServiceEnabledTimeseriesObject.getMaxRetention();
        var result = update1MediaServiceEnabledTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            mediaServiceEnabledTimeseriesObject.setRowVersion(result.getRowVersion());
            mediaServiceEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2MediaServiceEnabledTimeseries( MediaServiceEnabledTimeseriesObject mediaServiceEnabledTimeseriesObject ) throws SQLException {
        Guid id = mediaServiceEnabledTimeseriesObject.getId();
        long rowVersion = mediaServiceEnabledTimeseriesObject.getRowVersion();
        Guid catalog = mediaServiceEnabledTimeseriesObject.getCatalog();
        Guid service = mediaServiceEnabledTimeseriesObject.getService();
        var result = update2MediaServiceEnabledTimeseries( id, rowVersion, catalog, service );
        if( result.isSuccess( ) ) {
            mediaServiceEnabledTimeseriesObject.setRowVersion(result.getRowVersion());
            mediaServiceEnabledTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteMediaServiceEnabledTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call MediaServiceEnabledTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteMediaServiceEnabledTimeseries( MediaServiceEnabledTimeseriesObject mediaServiceEnabledTimeseriesObject ) throws SQLException {
        var id = mediaServiceEnabledTimeseriesObject.getId( );
        var rowVersion = mediaServiceEnabledTimeseriesObject.getRowVersion();
        var result = deleteMediaServiceEnabledTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertByteTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ByteTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1ByteTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ByteTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertByteTimeseries( ByteTimeseriesObject byteTimeseriesObject ) throws SQLException {
        Guid id = byteTimeseriesObject.getId( );
        Guid catalog = byteTimeseriesObject.getCatalog( );
        String name = byteTimeseriesObject.getName( );
        TimeSpan maxRetention = byteTimeseriesObject.getMaxRetention( );
        var result = insertByteTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            byteTimeseriesObject.setId(result.getId());
            byteTimeseriesObject.setRowVersion(0);
            byteTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1ByteTimeseries( ByteTimeseriesObject byteTimeseriesObject ) throws SQLException {
        Guid id = byteTimeseriesObject.getId( );
        String name = byteTimeseriesObject.getName( );
        TimeSpan maxRetention = byteTimeseriesObject.getMaxRetention( );
        var result = insert1ByteTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            byteTimeseriesObject.setId( result.getId( ) );
            byteTimeseriesObject.setRowVersion(0);
            byteTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateByteTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ByteTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1ByteTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ByteTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2ByteTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ByteTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateByteTimeseries( ByteTimeseriesObject byteTimeseriesObject ) throws SQLException {
        Guid id = byteTimeseriesObject.getId();
        long rowVersion = byteTimeseriesObject.getRowVersion();
        Guid catalog = byteTimeseriesObject.getCatalog();
        String name = byteTimeseriesObject.getName();
        TimeSpan maxRetention = byteTimeseriesObject.getMaxRetention();
        var result = updateByteTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            byteTimeseriesObject.setRowVersion(result.getRowVersion());
            byteTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1ByteTimeseries( ByteTimeseriesObject byteTimeseriesObject ) throws SQLException {
        Guid id = byteTimeseriesObject.getId();
        long rowVersion = byteTimeseriesObject.getRowVersion();
        String name = byteTimeseriesObject.getName();
        TimeSpan maxRetention = byteTimeseriesObject.getMaxRetention();
        var result = update1ByteTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            byteTimeseriesObject.setRowVersion(result.getRowVersion());
            byteTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2ByteTimeseries( ByteTimeseriesObject byteTimeseriesObject ) throws SQLException {
        Guid id = byteTimeseriesObject.getId();
        long rowVersion = byteTimeseriesObject.getRowVersion();
        Guid catalog = byteTimeseriesObject.getCatalog();
        var result = update2ByteTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            byteTimeseriesObject.setRowVersion(result.getRowVersion());
            byteTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteByteTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ByteTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteByteTimeseries( ByteTimeseriesObject byteTimeseriesObject ) throws SQLException {
        var id = byteTimeseriesObject.getId( );
        var rowVersion = byteTimeseriesObject.getRowVersion();
        var result = deleteByteTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDateTimeTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DateTimeTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1DateTimeTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DateTimeTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDateTimeTimeseries( DateTimeTimeseriesObject dateTimeTimeseriesObject ) throws SQLException {
        Guid id = dateTimeTimeseriesObject.getId( );
        Guid catalog = dateTimeTimeseriesObject.getCatalog( );
        String name = dateTimeTimeseriesObject.getName( );
        TimeSpan maxRetention = dateTimeTimeseriesObject.getMaxRetention( );
        var result = insertDateTimeTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            dateTimeTimeseriesObject.setId(result.getId());
            dateTimeTimeseriesObject.setRowVersion(0);
            dateTimeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1DateTimeTimeseries( DateTimeTimeseriesObject dateTimeTimeseriesObject ) throws SQLException {
        Guid id = dateTimeTimeseriesObject.getId( );
        String name = dateTimeTimeseriesObject.getName( );
        TimeSpan maxRetention = dateTimeTimeseriesObject.getMaxRetention( );
        var result = insert1DateTimeTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            dateTimeTimeseriesObject.setId( result.getId( ) );
            dateTimeTimeseriesObject.setRowVersion(0);
            dateTimeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateDateTimeTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DateTimeTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1DateTimeTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DateTimeTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2DateTimeTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DateTimeTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDateTimeTimeseries( DateTimeTimeseriesObject dateTimeTimeseriesObject ) throws SQLException {
        Guid id = dateTimeTimeseriesObject.getId();
        long rowVersion = dateTimeTimeseriesObject.getRowVersion();
        Guid catalog = dateTimeTimeseriesObject.getCatalog();
        String name = dateTimeTimeseriesObject.getName();
        TimeSpan maxRetention = dateTimeTimeseriesObject.getMaxRetention();
        var result = updateDateTimeTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            dateTimeTimeseriesObject.setRowVersion(result.getRowVersion());
            dateTimeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1DateTimeTimeseries( DateTimeTimeseriesObject dateTimeTimeseriesObject ) throws SQLException {
        Guid id = dateTimeTimeseriesObject.getId();
        long rowVersion = dateTimeTimeseriesObject.getRowVersion();
        String name = dateTimeTimeseriesObject.getName();
        TimeSpan maxRetention = dateTimeTimeseriesObject.getMaxRetention();
        var result = update1DateTimeTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            dateTimeTimeseriesObject.setRowVersion(result.getRowVersion());
            dateTimeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2DateTimeTimeseries( DateTimeTimeseriesObject dateTimeTimeseriesObject ) throws SQLException {
        Guid id = dateTimeTimeseriesObject.getId();
        long rowVersion = dateTimeTimeseriesObject.getRowVersion();
        Guid catalog = dateTimeTimeseriesObject.getCatalog();
        var result = update2DateTimeTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            dateTimeTimeseriesObject.setRowVersion(result.getRowVersion());
            dateTimeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDateTimeTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DateTimeTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDateTimeTimeseries( DateTimeTimeseriesObject dateTimeTimeseriesObject ) throws SQLException {
        var id = dateTimeTimeseriesObject.getId( );
        var rowVersion = dateTimeTimeseriesObject.getRowVersion();
        var result = deleteDateTimeTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertDoubleTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DoubleTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1DoubleTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call DoubleTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertDoubleTimeseries( DoubleTimeseriesObject doubleTimeseriesObject ) throws SQLException {
        Guid id = doubleTimeseriesObject.getId( );
        Guid catalog = doubleTimeseriesObject.getCatalog( );
        String name = doubleTimeseriesObject.getName( );
        TimeSpan maxRetention = doubleTimeseriesObject.getMaxRetention( );
        var result = insertDoubleTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            doubleTimeseriesObject.setId(result.getId());
            doubleTimeseriesObject.setRowVersion(0);
            doubleTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1DoubleTimeseries( DoubleTimeseriesObject doubleTimeseriesObject ) throws SQLException {
        Guid id = doubleTimeseriesObject.getId( );
        String name = doubleTimeseriesObject.getName( );
        TimeSpan maxRetention = doubleTimeseriesObject.getMaxRetention( );
        var result = insert1DoubleTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            doubleTimeseriesObject.setId( result.getId( ) );
            doubleTimeseriesObject.setRowVersion(0);
            doubleTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateDoubleTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DoubleTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1DoubleTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DoubleTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2DoubleTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call DoubleTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateDoubleTimeseries( DoubleTimeseriesObject doubleTimeseriesObject ) throws SQLException {
        Guid id = doubleTimeseriesObject.getId();
        long rowVersion = doubleTimeseriesObject.getRowVersion();
        Guid catalog = doubleTimeseriesObject.getCatalog();
        String name = doubleTimeseriesObject.getName();
        TimeSpan maxRetention = doubleTimeseriesObject.getMaxRetention();
        var result = updateDoubleTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            doubleTimeseriesObject.setRowVersion(result.getRowVersion());
            doubleTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1DoubleTimeseries( DoubleTimeseriesObject doubleTimeseriesObject ) throws SQLException {
        Guid id = doubleTimeseriesObject.getId();
        long rowVersion = doubleTimeseriesObject.getRowVersion();
        String name = doubleTimeseriesObject.getName();
        TimeSpan maxRetention = doubleTimeseriesObject.getMaxRetention();
        var result = update1DoubleTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            doubleTimeseriesObject.setRowVersion(result.getRowVersion());
            doubleTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2DoubleTimeseries( DoubleTimeseriesObject doubleTimeseriesObject ) throws SQLException {
        Guid id = doubleTimeseriesObject.getId();
        long rowVersion = doubleTimeseriesObject.getRowVersion();
        Guid catalog = doubleTimeseriesObject.getCatalog();
        var result = update2DoubleTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            doubleTimeseriesObject.setRowVersion(result.getRowVersion());
            doubleTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteDoubleTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call DoubleTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteDoubleTimeseries( DoubleTimeseriesObject doubleTimeseriesObject ) throws SQLException {
        var id = doubleTimeseriesObject.getId( );
        var rowVersion = doubleTimeseriesObject.getRowVersion();
        var result = deleteDoubleTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGNSSAltitudeTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid gNSSDevice ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSAltitudeTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GNSSAltitudeTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSAltitudeTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGNSSAltitudeTimeseries( GNSSAltitudeTimeseriesObject gNSSAltitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSAltitudeTimeseriesObject.getId( );
        Guid catalog = gNSSAltitudeTimeseriesObject.getCatalog( );
        String name = gNSSAltitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = gNSSAltitudeTimeseriesObject.getMaxRetention( );
        Guid gNSSDevice = gNSSAltitudeTimeseriesObject.getGNSSDevice( );
        var result = insertGNSSAltitudeTimeseries( id, catalog, name, maxRetention, gNSSDevice );
        if( result.isSuccess() ) {
            gNSSAltitudeTimeseriesObject.setId(result.getId());
            gNSSAltitudeTimeseriesObject.setRowVersion(0);
            gNSSAltitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GNSSAltitudeTimeseries( GNSSAltitudeTimeseriesObject gNSSAltitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSAltitudeTimeseriesObject.getId( );
        String name = gNSSAltitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = gNSSAltitudeTimeseriesObject.getMaxRetention( );
        var result = insert1GNSSAltitudeTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            gNSSAltitudeTimeseriesObject.setId( result.getId( ) );
            gNSSAltitudeTimeseriesObject.setRowVersion(0);
            gNSSAltitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGNSSAltitudeTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid gNSSDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSAltitudeTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GNSSAltitudeTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSAltitudeTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GNSSAltitudeTimeseries( Guid id, long rowVersion, Guid catalog, Guid gNSSDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSAltitudeTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGNSSAltitudeTimeseries( GNSSAltitudeTimeseriesObject gNSSAltitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSAltitudeTimeseriesObject.getId();
        long rowVersion = gNSSAltitudeTimeseriesObject.getRowVersion();
        Guid catalog = gNSSAltitudeTimeseriesObject.getCatalog();
        String name = gNSSAltitudeTimeseriesObject.getName();
        TimeSpan maxRetention = gNSSAltitudeTimeseriesObject.getMaxRetention();
        Guid gNSSDevice = gNSSAltitudeTimeseriesObject.getGNSSDevice();
        var result = updateGNSSAltitudeTimeseries( id, rowVersion, catalog, name, maxRetention, gNSSDevice );
        if( result.isSuccess( ) ) {
            gNSSAltitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            gNSSAltitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GNSSAltitudeTimeseries( GNSSAltitudeTimeseriesObject gNSSAltitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSAltitudeTimeseriesObject.getId();
        long rowVersion = gNSSAltitudeTimeseriesObject.getRowVersion();
        String name = gNSSAltitudeTimeseriesObject.getName();
        TimeSpan maxRetention = gNSSAltitudeTimeseriesObject.getMaxRetention();
        var result = update1GNSSAltitudeTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            gNSSAltitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            gNSSAltitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GNSSAltitudeTimeseries( GNSSAltitudeTimeseriesObject gNSSAltitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSAltitudeTimeseriesObject.getId();
        long rowVersion = gNSSAltitudeTimeseriesObject.getRowVersion();
        Guid catalog = gNSSAltitudeTimeseriesObject.getCatalog();
        Guid gNSSDevice = gNSSAltitudeTimeseriesObject.getGNSSDevice();
        var result = update2GNSSAltitudeTimeseries( id, rowVersion, catalog, gNSSDevice );
        if( result.isSuccess( ) ) {
            gNSSAltitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            gNSSAltitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGNSSAltitudeTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GNSSAltitudeTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGNSSAltitudeTimeseries( GNSSAltitudeTimeseriesObject gNSSAltitudeTimeseriesObject ) throws SQLException {
        var id = gNSSAltitudeTimeseriesObject.getId( );
        var rowVersion = gNSSAltitudeTimeseriesObject.getRowVersion();
        var result = deleteGNSSAltitudeTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGNSSLatitudeTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid gNSSDevice ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSLatitudeTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GNSSLatitudeTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSLatitudeTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGNSSLatitudeTimeseries( GNSSLatitudeTimeseriesObject gNSSLatitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSLatitudeTimeseriesObject.getId( );
        Guid catalog = gNSSLatitudeTimeseriesObject.getCatalog( );
        String name = gNSSLatitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = gNSSLatitudeTimeseriesObject.getMaxRetention( );
        Guid gNSSDevice = gNSSLatitudeTimeseriesObject.getGNSSDevice( );
        var result = insertGNSSLatitudeTimeseries( id, catalog, name, maxRetention, gNSSDevice );
        if( result.isSuccess() ) {
            gNSSLatitudeTimeseriesObject.setId(result.getId());
            gNSSLatitudeTimeseriesObject.setRowVersion(0);
            gNSSLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GNSSLatitudeTimeseries( GNSSLatitudeTimeseriesObject gNSSLatitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSLatitudeTimeseriesObject.getId( );
        String name = gNSSLatitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = gNSSLatitudeTimeseriesObject.getMaxRetention( );
        var result = insert1GNSSLatitudeTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            gNSSLatitudeTimeseriesObject.setId( result.getId( ) );
            gNSSLatitudeTimeseriesObject.setRowVersion(0);
            gNSSLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGNSSLatitudeTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid gNSSDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSLatitudeTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GNSSLatitudeTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSLatitudeTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GNSSLatitudeTimeseries( Guid id, long rowVersion, Guid catalog, Guid gNSSDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSLatitudeTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGNSSLatitudeTimeseries( GNSSLatitudeTimeseriesObject gNSSLatitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSLatitudeTimeseriesObject.getId();
        long rowVersion = gNSSLatitudeTimeseriesObject.getRowVersion();
        Guid catalog = gNSSLatitudeTimeseriesObject.getCatalog();
        String name = gNSSLatitudeTimeseriesObject.getName();
        TimeSpan maxRetention = gNSSLatitudeTimeseriesObject.getMaxRetention();
        Guid gNSSDevice = gNSSLatitudeTimeseriesObject.getGNSSDevice();
        var result = updateGNSSLatitudeTimeseries( id, rowVersion, catalog, name, maxRetention, gNSSDevice );
        if( result.isSuccess( ) ) {
            gNSSLatitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            gNSSLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GNSSLatitudeTimeseries( GNSSLatitudeTimeseriesObject gNSSLatitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSLatitudeTimeseriesObject.getId();
        long rowVersion = gNSSLatitudeTimeseriesObject.getRowVersion();
        String name = gNSSLatitudeTimeseriesObject.getName();
        TimeSpan maxRetention = gNSSLatitudeTimeseriesObject.getMaxRetention();
        var result = update1GNSSLatitudeTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            gNSSLatitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            gNSSLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GNSSLatitudeTimeseries( GNSSLatitudeTimeseriesObject gNSSLatitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSLatitudeTimeseriesObject.getId();
        long rowVersion = gNSSLatitudeTimeseriesObject.getRowVersion();
        Guid catalog = gNSSLatitudeTimeseriesObject.getCatalog();
        Guid gNSSDevice = gNSSLatitudeTimeseriesObject.getGNSSDevice();
        var result = update2GNSSLatitudeTimeseries( id, rowVersion, catalog, gNSSDevice );
        if( result.isSuccess( ) ) {
            gNSSLatitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            gNSSLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGNSSLatitudeTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GNSSLatitudeTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGNSSLatitudeTimeseries( GNSSLatitudeTimeseriesObject gNSSLatitudeTimeseriesObject ) throws SQLException {
        var id = gNSSLatitudeTimeseriesObject.getId( );
        var rowVersion = gNSSLatitudeTimeseriesObject.getRowVersion();
        var result = deleteGNSSLatitudeTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGNSSLongitudeTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid gNSSDevice ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSLongitudeTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GNSSLongitudeTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GNSSLongitudeTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGNSSLongitudeTimeseries( GNSSLongitudeTimeseriesObject gNSSLongitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSLongitudeTimeseriesObject.getId( );
        Guid catalog = gNSSLongitudeTimeseriesObject.getCatalog( );
        String name = gNSSLongitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = gNSSLongitudeTimeseriesObject.getMaxRetention( );
        Guid gNSSDevice = gNSSLongitudeTimeseriesObject.getGNSSDevice( );
        var result = insertGNSSLongitudeTimeseries( id, catalog, name, maxRetention, gNSSDevice );
        if( result.isSuccess() ) {
            gNSSLongitudeTimeseriesObject.setId(result.getId());
            gNSSLongitudeTimeseriesObject.setRowVersion(0);
            gNSSLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GNSSLongitudeTimeseries( GNSSLongitudeTimeseriesObject gNSSLongitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSLongitudeTimeseriesObject.getId( );
        String name = gNSSLongitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = gNSSLongitudeTimeseriesObject.getMaxRetention( );
        var result = insert1GNSSLongitudeTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            gNSSLongitudeTimeseriesObject.setId( result.getId( ) );
            gNSSLongitudeTimeseriesObject.setRowVersion(0);
            gNSSLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGNSSLongitudeTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid gNSSDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSLongitudeTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GNSSLongitudeTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSLongitudeTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GNSSLongitudeTimeseries( Guid id, long rowVersion, Guid catalog, Guid gNSSDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GNSSLongitudeTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, gNSSDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGNSSLongitudeTimeseries( GNSSLongitudeTimeseriesObject gNSSLongitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSLongitudeTimeseriesObject.getId();
        long rowVersion = gNSSLongitudeTimeseriesObject.getRowVersion();
        Guid catalog = gNSSLongitudeTimeseriesObject.getCatalog();
        String name = gNSSLongitudeTimeseriesObject.getName();
        TimeSpan maxRetention = gNSSLongitudeTimeseriesObject.getMaxRetention();
        Guid gNSSDevice = gNSSLongitudeTimeseriesObject.getGNSSDevice();
        var result = updateGNSSLongitudeTimeseries( id, rowVersion, catalog, name, maxRetention, gNSSDevice );
        if( result.isSuccess( ) ) {
            gNSSLongitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            gNSSLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GNSSLongitudeTimeseries( GNSSLongitudeTimeseriesObject gNSSLongitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSLongitudeTimeseriesObject.getId();
        long rowVersion = gNSSLongitudeTimeseriesObject.getRowVersion();
        String name = gNSSLongitudeTimeseriesObject.getName();
        TimeSpan maxRetention = gNSSLongitudeTimeseriesObject.getMaxRetention();
        var result = update1GNSSLongitudeTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            gNSSLongitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            gNSSLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GNSSLongitudeTimeseries( GNSSLongitudeTimeseriesObject gNSSLongitudeTimeseriesObject ) throws SQLException {
        Guid id = gNSSLongitudeTimeseriesObject.getId();
        long rowVersion = gNSSLongitudeTimeseriesObject.getRowVersion();
        Guid catalog = gNSSLongitudeTimeseriesObject.getCatalog();
        Guid gNSSDevice = gNSSLongitudeTimeseriesObject.getGNSSDevice();
        var result = update2GNSSLongitudeTimeseries( id, rowVersion, catalog, gNSSDevice );
        if( result.isSuccess( ) ) {
            gNSSLongitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            gNSSLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGNSSLongitudeTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GNSSLongitudeTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGNSSLongitudeTimeseries( GNSSLongitudeTimeseriesObject gNSSLongitudeTimeseriesObject ) throws SQLException {
        var id = gNSSLongitudeTimeseriesObject.getId( );
        var rowVersion = gNSSLongitudeTimeseriesObject.getRowVersion();
        var result = deleteGNSSLongitudeTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGyroCourseTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroCourseTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GyroCourseTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroCourseTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGyroCourseTimeseries( GyroCourseTimeseriesObject gyroCourseTimeseriesObject ) throws SQLException {
        Guid id = gyroCourseTimeseriesObject.getId( );
        Guid catalog = gyroCourseTimeseriesObject.getCatalog( );
        String name = gyroCourseTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroCourseTimeseriesObject.getMaxRetention( );
        Guid gyroDevice = gyroCourseTimeseriesObject.getGyroDevice( );
        var result = insertGyroCourseTimeseries( id, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess() ) {
            gyroCourseTimeseriesObject.setId(result.getId());
            gyroCourseTimeseriesObject.setRowVersion(0);
            gyroCourseTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GyroCourseTimeseries( GyroCourseTimeseriesObject gyroCourseTimeseriesObject ) throws SQLException {
        Guid id = gyroCourseTimeseriesObject.getId( );
        String name = gyroCourseTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroCourseTimeseriesObject.getMaxRetention( );
        var result = insert1GyroCourseTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroCourseTimeseriesObject.setId( result.getId( ) );
            gyroCourseTimeseriesObject.setRowVersion(0);
            gyroCourseTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGyroCourseTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroCourseTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GyroCourseTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroCourseTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GyroCourseTimeseries( Guid id, long rowVersion, Guid catalog, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroCourseTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGyroCourseTimeseries( GyroCourseTimeseriesObject gyroCourseTimeseriesObject ) throws SQLException {
        Guid id = gyroCourseTimeseriesObject.getId();
        long rowVersion = gyroCourseTimeseriesObject.getRowVersion();
        Guid catalog = gyroCourseTimeseriesObject.getCatalog();
        String name = gyroCourseTimeseriesObject.getName();
        TimeSpan maxRetention = gyroCourseTimeseriesObject.getMaxRetention();
        Guid gyroDevice = gyroCourseTimeseriesObject.getGyroDevice();
        var result = updateGyroCourseTimeseries( id, rowVersion, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroCourseTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroCourseTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GyroCourseTimeseries( GyroCourseTimeseriesObject gyroCourseTimeseriesObject ) throws SQLException {
        Guid id = gyroCourseTimeseriesObject.getId();
        long rowVersion = gyroCourseTimeseriesObject.getRowVersion();
        String name = gyroCourseTimeseriesObject.getName();
        TimeSpan maxRetention = gyroCourseTimeseriesObject.getMaxRetention();
        var result = update1GyroCourseTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroCourseTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroCourseTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GyroCourseTimeseries( GyroCourseTimeseriesObject gyroCourseTimeseriesObject ) throws SQLException {
        Guid id = gyroCourseTimeseriesObject.getId();
        long rowVersion = gyroCourseTimeseriesObject.getRowVersion();
        Guid catalog = gyroCourseTimeseriesObject.getCatalog();
        Guid gyroDevice = gyroCourseTimeseriesObject.getGyroDevice();
        var result = update2GyroCourseTimeseries( id, rowVersion, catalog, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroCourseTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroCourseTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGyroCourseTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GyroCourseTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGyroCourseTimeseries( GyroCourseTimeseriesObject gyroCourseTimeseriesObject ) throws SQLException {
        var id = gyroCourseTimeseriesObject.getId( );
        var rowVersion = gyroCourseTimeseriesObject.getRowVersion();
        var result = deleteGyroCourseTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGyroHeadingMagneticNorthTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroHeadingMagneticNorthTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GyroHeadingMagneticNorthTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroHeadingMagneticNorthTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGyroHeadingMagneticNorthTimeseries( GyroHeadingMagneticNorthTimeseriesObject gyroHeadingMagneticNorthTimeseriesObject ) throws SQLException {
        Guid id = gyroHeadingMagneticNorthTimeseriesObject.getId( );
        Guid catalog = gyroHeadingMagneticNorthTimeseriesObject.getCatalog( );
        String name = gyroHeadingMagneticNorthTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroHeadingMagneticNorthTimeseriesObject.getMaxRetention( );
        Guid gyroDevice = gyroHeadingMagneticNorthTimeseriesObject.getGyroDevice( );
        var result = insertGyroHeadingMagneticNorthTimeseries( id, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess() ) {
            gyroHeadingMagneticNorthTimeseriesObject.setId(result.getId());
            gyroHeadingMagneticNorthTimeseriesObject.setRowVersion(0);
            gyroHeadingMagneticNorthTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GyroHeadingMagneticNorthTimeseries( GyroHeadingMagneticNorthTimeseriesObject gyroHeadingMagneticNorthTimeseriesObject ) throws SQLException {
        Guid id = gyroHeadingMagneticNorthTimeseriesObject.getId( );
        String name = gyroHeadingMagneticNorthTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroHeadingMagneticNorthTimeseriesObject.getMaxRetention( );
        var result = insert1GyroHeadingMagneticNorthTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroHeadingMagneticNorthTimeseriesObject.setId( result.getId( ) );
            gyroHeadingMagneticNorthTimeseriesObject.setRowVersion(0);
            gyroHeadingMagneticNorthTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGyroHeadingMagneticNorthTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroHeadingMagneticNorthTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GyroHeadingMagneticNorthTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroHeadingMagneticNorthTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GyroHeadingMagneticNorthTimeseries( Guid id, long rowVersion, Guid catalog, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroHeadingMagneticNorthTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGyroHeadingMagneticNorthTimeseries( GyroHeadingMagneticNorthTimeseriesObject gyroHeadingMagneticNorthTimeseriesObject ) throws SQLException {
        Guid id = gyroHeadingMagneticNorthTimeseriesObject.getId();
        long rowVersion = gyroHeadingMagneticNorthTimeseriesObject.getRowVersion();
        Guid catalog = gyroHeadingMagneticNorthTimeseriesObject.getCatalog();
        String name = gyroHeadingMagneticNorthTimeseriesObject.getName();
        TimeSpan maxRetention = gyroHeadingMagneticNorthTimeseriesObject.getMaxRetention();
        Guid gyroDevice = gyroHeadingMagneticNorthTimeseriesObject.getGyroDevice();
        var result = updateGyroHeadingMagneticNorthTimeseries( id, rowVersion, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroHeadingMagneticNorthTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroHeadingMagneticNorthTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GyroHeadingMagneticNorthTimeseries( GyroHeadingMagneticNorthTimeseriesObject gyroHeadingMagneticNorthTimeseriesObject ) throws SQLException {
        Guid id = gyroHeadingMagneticNorthTimeseriesObject.getId();
        long rowVersion = gyroHeadingMagneticNorthTimeseriesObject.getRowVersion();
        String name = gyroHeadingMagneticNorthTimeseriesObject.getName();
        TimeSpan maxRetention = gyroHeadingMagneticNorthTimeseriesObject.getMaxRetention();
        var result = update1GyroHeadingMagneticNorthTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroHeadingMagneticNorthTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroHeadingMagneticNorthTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GyroHeadingMagneticNorthTimeseries( GyroHeadingMagneticNorthTimeseriesObject gyroHeadingMagneticNorthTimeseriesObject ) throws SQLException {
        Guid id = gyroHeadingMagneticNorthTimeseriesObject.getId();
        long rowVersion = gyroHeadingMagneticNorthTimeseriesObject.getRowVersion();
        Guid catalog = gyroHeadingMagneticNorthTimeseriesObject.getCatalog();
        Guid gyroDevice = gyroHeadingMagneticNorthTimeseriesObject.getGyroDevice();
        var result = update2GyroHeadingMagneticNorthTimeseries( id, rowVersion, catalog, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroHeadingMagneticNorthTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroHeadingMagneticNorthTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGyroHeadingMagneticNorthTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GyroHeadingMagneticNorthTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGyroHeadingMagneticNorthTimeseries( GyroHeadingMagneticNorthTimeseriesObject gyroHeadingMagneticNorthTimeseriesObject ) throws SQLException {
        var id = gyroHeadingMagneticNorthTimeseriesObject.getId( );
        var rowVersion = gyroHeadingMagneticNorthTimeseriesObject.getRowVersion();
        var result = deleteGyroHeadingMagneticNorthTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGyroHeadingTrueNorthTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroHeadingTrueNorthTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GyroHeadingTrueNorthTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroHeadingTrueNorthTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGyroHeadingTrueNorthTimeseries( GyroHeadingTrueNorthTimeseriesObject gyroHeadingTrueNorthTimeseriesObject ) throws SQLException {
        Guid id = gyroHeadingTrueNorthTimeseriesObject.getId( );
        Guid catalog = gyroHeadingTrueNorthTimeseriesObject.getCatalog( );
        String name = gyroHeadingTrueNorthTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroHeadingTrueNorthTimeseriesObject.getMaxRetention( );
        Guid gyroDevice = gyroHeadingTrueNorthTimeseriesObject.getGyroDevice( );
        var result = insertGyroHeadingTrueNorthTimeseries( id, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess() ) {
            gyroHeadingTrueNorthTimeseriesObject.setId(result.getId());
            gyroHeadingTrueNorthTimeseriesObject.setRowVersion(0);
            gyroHeadingTrueNorthTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GyroHeadingTrueNorthTimeseries( GyroHeadingTrueNorthTimeseriesObject gyroHeadingTrueNorthTimeseriesObject ) throws SQLException {
        Guid id = gyroHeadingTrueNorthTimeseriesObject.getId( );
        String name = gyroHeadingTrueNorthTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroHeadingTrueNorthTimeseriesObject.getMaxRetention( );
        var result = insert1GyroHeadingTrueNorthTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroHeadingTrueNorthTimeseriesObject.setId( result.getId( ) );
            gyroHeadingTrueNorthTimeseriesObject.setRowVersion(0);
            gyroHeadingTrueNorthTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGyroHeadingTrueNorthTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroHeadingTrueNorthTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GyroHeadingTrueNorthTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroHeadingTrueNorthTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GyroHeadingTrueNorthTimeseries( Guid id, long rowVersion, Guid catalog, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroHeadingTrueNorthTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGyroHeadingTrueNorthTimeseries( GyroHeadingTrueNorthTimeseriesObject gyroHeadingTrueNorthTimeseriesObject ) throws SQLException {
        Guid id = gyroHeadingTrueNorthTimeseriesObject.getId();
        long rowVersion = gyroHeadingTrueNorthTimeseriesObject.getRowVersion();
        Guid catalog = gyroHeadingTrueNorthTimeseriesObject.getCatalog();
        String name = gyroHeadingTrueNorthTimeseriesObject.getName();
        TimeSpan maxRetention = gyroHeadingTrueNorthTimeseriesObject.getMaxRetention();
        Guid gyroDevice = gyroHeadingTrueNorthTimeseriesObject.getGyroDevice();
        var result = updateGyroHeadingTrueNorthTimeseries( id, rowVersion, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroHeadingTrueNorthTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroHeadingTrueNorthTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GyroHeadingTrueNorthTimeseries( GyroHeadingTrueNorthTimeseriesObject gyroHeadingTrueNorthTimeseriesObject ) throws SQLException {
        Guid id = gyroHeadingTrueNorthTimeseriesObject.getId();
        long rowVersion = gyroHeadingTrueNorthTimeseriesObject.getRowVersion();
        String name = gyroHeadingTrueNorthTimeseriesObject.getName();
        TimeSpan maxRetention = gyroHeadingTrueNorthTimeseriesObject.getMaxRetention();
        var result = update1GyroHeadingTrueNorthTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroHeadingTrueNorthTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroHeadingTrueNorthTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GyroHeadingTrueNorthTimeseries( GyroHeadingTrueNorthTimeseriesObject gyroHeadingTrueNorthTimeseriesObject ) throws SQLException {
        Guid id = gyroHeadingTrueNorthTimeseriesObject.getId();
        long rowVersion = gyroHeadingTrueNorthTimeseriesObject.getRowVersion();
        Guid catalog = gyroHeadingTrueNorthTimeseriesObject.getCatalog();
        Guid gyroDevice = gyroHeadingTrueNorthTimeseriesObject.getGyroDevice();
        var result = update2GyroHeadingTrueNorthTimeseries( id, rowVersion, catalog, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroHeadingTrueNorthTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroHeadingTrueNorthTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGyroHeadingTrueNorthTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GyroHeadingTrueNorthTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGyroHeadingTrueNorthTimeseries( GyroHeadingTrueNorthTimeseriesObject gyroHeadingTrueNorthTimeseriesObject ) throws SQLException {
        var id = gyroHeadingTrueNorthTimeseriesObject.getId( );
        var rowVersion = gyroHeadingTrueNorthTimeseriesObject.getRowVersion();
        var result = deleteGyroHeadingTrueNorthTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGyroPitchTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroPitchTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GyroPitchTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroPitchTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGyroPitchTimeseries( GyroPitchTimeseriesObject gyroPitchTimeseriesObject ) throws SQLException {
        Guid id = gyroPitchTimeseriesObject.getId( );
        Guid catalog = gyroPitchTimeseriesObject.getCatalog( );
        String name = gyroPitchTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroPitchTimeseriesObject.getMaxRetention( );
        Guid gyroDevice = gyroPitchTimeseriesObject.getGyroDevice( );
        var result = insertGyroPitchTimeseries( id, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess() ) {
            gyroPitchTimeseriesObject.setId(result.getId());
            gyroPitchTimeseriesObject.setRowVersion(0);
            gyroPitchTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GyroPitchTimeseries( GyroPitchTimeseriesObject gyroPitchTimeseriesObject ) throws SQLException {
        Guid id = gyroPitchTimeseriesObject.getId( );
        String name = gyroPitchTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroPitchTimeseriesObject.getMaxRetention( );
        var result = insert1GyroPitchTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroPitchTimeseriesObject.setId( result.getId( ) );
            gyroPitchTimeseriesObject.setRowVersion(0);
            gyroPitchTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGyroPitchTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroPitchTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GyroPitchTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroPitchTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GyroPitchTimeseries( Guid id, long rowVersion, Guid catalog, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroPitchTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGyroPitchTimeseries( GyroPitchTimeseriesObject gyroPitchTimeseriesObject ) throws SQLException {
        Guid id = gyroPitchTimeseriesObject.getId();
        long rowVersion = gyroPitchTimeseriesObject.getRowVersion();
        Guid catalog = gyroPitchTimeseriesObject.getCatalog();
        String name = gyroPitchTimeseriesObject.getName();
        TimeSpan maxRetention = gyroPitchTimeseriesObject.getMaxRetention();
        Guid gyroDevice = gyroPitchTimeseriesObject.getGyroDevice();
        var result = updateGyroPitchTimeseries( id, rowVersion, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroPitchTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroPitchTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GyroPitchTimeseries( GyroPitchTimeseriesObject gyroPitchTimeseriesObject ) throws SQLException {
        Guid id = gyroPitchTimeseriesObject.getId();
        long rowVersion = gyroPitchTimeseriesObject.getRowVersion();
        String name = gyroPitchTimeseriesObject.getName();
        TimeSpan maxRetention = gyroPitchTimeseriesObject.getMaxRetention();
        var result = update1GyroPitchTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroPitchTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroPitchTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GyroPitchTimeseries( GyroPitchTimeseriesObject gyroPitchTimeseriesObject ) throws SQLException {
        Guid id = gyroPitchTimeseriesObject.getId();
        long rowVersion = gyroPitchTimeseriesObject.getRowVersion();
        Guid catalog = gyroPitchTimeseriesObject.getCatalog();
        Guid gyroDevice = gyroPitchTimeseriesObject.getGyroDevice();
        var result = update2GyroPitchTimeseries( id, rowVersion, catalog, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroPitchTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroPitchTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGyroPitchTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GyroPitchTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGyroPitchTimeseries( GyroPitchTimeseriesObject gyroPitchTimeseriesObject ) throws SQLException {
        var id = gyroPitchTimeseriesObject.getId( );
        var rowVersion = gyroPitchTimeseriesObject.getRowVersion();
        var result = deleteGyroPitchTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGyroRateOfTurnTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroRateOfTurnTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GyroRateOfTurnTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroRateOfTurnTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGyroRateOfTurnTimeseries( GyroRateOfTurnTimeseriesObject gyroRateOfTurnTimeseriesObject ) throws SQLException {
        Guid id = gyroRateOfTurnTimeseriesObject.getId( );
        Guid catalog = gyroRateOfTurnTimeseriesObject.getCatalog( );
        String name = gyroRateOfTurnTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroRateOfTurnTimeseriesObject.getMaxRetention( );
        Guid gyroDevice = gyroRateOfTurnTimeseriesObject.getGyroDevice( );
        var result = insertGyroRateOfTurnTimeseries( id, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess() ) {
            gyroRateOfTurnTimeseriesObject.setId(result.getId());
            gyroRateOfTurnTimeseriesObject.setRowVersion(0);
            gyroRateOfTurnTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GyroRateOfTurnTimeseries( GyroRateOfTurnTimeseriesObject gyroRateOfTurnTimeseriesObject ) throws SQLException {
        Guid id = gyroRateOfTurnTimeseriesObject.getId( );
        String name = gyroRateOfTurnTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroRateOfTurnTimeseriesObject.getMaxRetention( );
        var result = insert1GyroRateOfTurnTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroRateOfTurnTimeseriesObject.setId( result.getId( ) );
            gyroRateOfTurnTimeseriesObject.setRowVersion(0);
            gyroRateOfTurnTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGyroRateOfTurnTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroRateOfTurnTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GyroRateOfTurnTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroRateOfTurnTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GyroRateOfTurnTimeseries( Guid id, long rowVersion, Guid catalog, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroRateOfTurnTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGyroRateOfTurnTimeseries( GyroRateOfTurnTimeseriesObject gyroRateOfTurnTimeseriesObject ) throws SQLException {
        Guid id = gyroRateOfTurnTimeseriesObject.getId();
        long rowVersion = gyroRateOfTurnTimeseriesObject.getRowVersion();
        Guid catalog = gyroRateOfTurnTimeseriesObject.getCatalog();
        String name = gyroRateOfTurnTimeseriesObject.getName();
        TimeSpan maxRetention = gyroRateOfTurnTimeseriesObject.getMaxRetention();
        Guid gyroDevice = gyroRateOfTurnTimeseriesObject.getGyroDevice();
        var result = updateGyroRateOfTurnTimeseries( id, rowVersion, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroRateOfTurnTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroRateOfTurnTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GyroRateOfTurnTimeseries( GyroRateOfTurnTimeseriesObject gyroRateOfTurnTimeseriesObject ) throws SQLException {
        Guid id = gyroRateOfTurnTimeseriesObject.getId();
        long rowVersion = gyroRateOfTurnTimeseriesObject.getRowVersion();
        String name = gyroRateOfTurnTimeseriesObject.getName();
        TimeSpan maxRetention = gyroRateOfTurnTimeseriesObject.getMaxRetention();
        var result = update1GyroRateOfTurnTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroRateOfTurnTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroRateOfTurnTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GyroRateOfTurnTimeseries( GyroRateOfTurnTimeseriesObject gyroRateOfTurnTimeseriesObject ) throws SQLException {
        Guid id = gyroRateOfTurnTimeseriesObject.getId();
        long rowVersion = gyroRateOfTurnTimeseriesObject.getRowVersion();
        Guid catalog = gyroRateOfTurnTimeseriesObject.getCatalog();
        Guid gyroDevice = gyroRateOfTurnTimeseriesObject.getGyroDevice();
        var result = update2GyroRateOfTurnTimeseries( id, rowVersion, catalog, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroRateOfTurnTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroRateOfTurnTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGyroRateOfTurnTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GyroRateOfTurnTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGyroRateOfTurnTimeseries( GyroRateOfTurnTimeseriesObject gyroRateOfTurnTimeseriesObject ) throws SQLException {
        var id = gyroRateOfTurnTimeseriesObject.getId( );
        var rowVersion = gyroRateOfTurnTimeseriesObject.getRowVersion();
        var result = deleteGyroRateOfTurnTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGyroRollTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroRollTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GyroRollTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroRollTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGyroRollTimeseries( GyroRollTimeseriesObject gyroRollTimeseriesObject ) throws SQLException {
        Guid id = gyroRollTimeseriesObject.getId( );
        Guid catalog = gyroRollTimeseriesObject.getCatalog( );
        String name = gyroRollTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroRollTimeseriesObject.getMaxRetention( );
        Guid gyroDevice = gyroRollTimeseriesObject.getGyroDevice( );
        var result = insertGyroRollTimeseries( id, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess() ) {
            gyroRollTimeseriesObject.setId(result.getId());
            gyroRollTimeseriesObject.setRowVersion(0);
            gyroRollTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GyroRollTimeseries( GyroRollTimeseriesObject gyroRollTimeseriesObject ) throws SQLException {
        Guid id = gyroRollTimeseriesObject.getId( );
        String name = gyroRollTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroRollTimeseriesObject.getMaxRetention( );
        var result = insert1GyroRollTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroRollTimeseriesObject.setId( result.getId( ) );
            gyroRollTimeseriesObject.setRowVersion(0);
            gyroRollTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGyroRollTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroRollTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GyroRollTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroRollTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GyroRollTimeseries( Guid id, long rowVersion, Guid catalog, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroRollTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGyroRollTimeseries( GyroRollTimeseriesObject gyroRollTimeseriesObject ) throws SQLException {
        Guid id = gyroRollTimeseriesObject.getId();
        long rowVersion = gyroRollTimeseriesObject.getRowVersion();
        Guid catalog = gyroRollTimeseriesObject.getCatalog();
        String name = gyroRollTimeseriesObject.getName();
        TimeSpan maxRetention = gyroRollTimeseriesObject.getMaxRetention();
        Guid gyroDevice = gyroRollTimeseriesObject.getGyroDevice();
        var result = updateGyroRollTimeseries( id, rowVersion, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroRollTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroRollTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GyroRollTimeseries( GyroRollTimeseriesObject gyroRollTimeseriesObject ) throws SQLException {
        Guid id = gyroRollTimeseriesObject.getId();
        long rowVersion = gyroRollTimeseriesObject.getRowVersion();
        String name = gyroRollTimeseriesObject.getName();
        TimeSpan maxRetention = gyroRollTimeseriesObject.getMaxRetention();
        var result = update1GyroRollTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroRollTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroRollTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GyroRollTimeseries( GyroRollTimeseriesObject gyroRollTimeseriesObject ) throws SQLException {
        Guid id = gyroRollTimeseriesObject.getId();
        long rowVersion = gyroRollTimeseriesObject.getRowVersion();
        Guid catalog = gyroRollTimeseriesObject.getCatalog();
        Guid gyroDevice = gyroRollTimeseriesObject.getGyroDevice();
        var result = update2GyroRollTimeseries( id, rowVersion, catalog, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroRollTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroRollTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGyroRollTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GyroRollTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGyroRollTimeseries( GyroRollTimeseriesObject gyroRollTimeseriesObject ) throws SQLException {
        var id = gyroRollTimeseriesObject.getId( );
        var rowVersion = gyroRollTimeseriesObject.getRowVersion();
        var result = deleteGyroRollTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGyroSpeedTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroSpeedTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GyroSpeedTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GyroSpeedTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGyroSpeedTimeseries( GyroSpeedTimeseriesObject gyroSpeedTimeseriesObject ) throws SQLException {
        Guid id = gyroSpeedTimeseriesObject.getId( );
        Guid catalog = gyroSpeedTimeseriesObject.getCatalog( );
        String name = gyroSpeedTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroSpeedTimeseriesObject.getMaxRetention( );
        Guid gyroDevice = gyroSpeedTimeseriesObject.getGyroDevice( );
        var result = insertGyroSpeedTimeseries( id, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess() ) {
            gyroSpeedTimeseriesObject.setId(result.getId());
            gyroSpeedTimeseriesObject.setRowVersion(0);
            gyroSpeedTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GyroSpeedTimeseries( GyroSpeedTimeseriesObject gyroSpeedTimeseriesObject ) throws SQLException {
        Guid id = gyroSpeedTimeseriesObject.getId( );
        String name = gyroSpeedTimeseriesObject.getName( );
        TimeSpan maxRetention = gyroSpeedTimeseriesObject.getMaxRetention( );
        var result = insert1GyroSpeedTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroSpeedTimeseriesObject.setId( result.getId( ) );
            gyroSpeedTimeseriesObject.setRowVersion(0);
            gyroSpeedTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGyroSpeedTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroSpeedTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GyroSpeedTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroSpeedTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GyroSpeedTimeseries( Guid id, long rowVersion, Guid catalog, Guid gyroDevice ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GyroSpeedTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, gyroDevice);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGyroSpeedTimeseries( GyroSpeedTimeseriesObject gyroSpeedTimeseriesObject ) throws SQLException {
        Guid id = gyroSpeedTimeseriesObject.getId();
        long rowVersion = gyroSpeedTimeseriesObject.getRowVersion();
        Guid catalog = gyroSpeedTimeseriesObject.getCatalog();
        String name = gyroSpeedTimeseriesObject.getName();
        TimeSpan maxRetention = gyroSpeedTimeseriesObject.getMaxRetention();
        Guid gyroDevice = gyroSpeedTimeseriesObject.getGyroDevice();
        var result = updateGyroSpeedTimeseries( id, rowVersion, catalog, name, maxRetention, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroSpeedTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroSpeedTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GyroSpeedTimeseries( GyroSpeedTimeseriesObject gyroSpeedTimeseriesObject ) throws SQLException {
        Guid id = gyroSpeedTimeseriesObject.getId();
        long rowVersion = gyroSpeedTimeseriesObject.getRowVersion();
        String name = gyroSpeedTimeseriesObject.getName();
        TimeSpan maxRetention = gyroSpeedTimeseriesObject.getMaxRetention();
        var result = update1GyroSpeedTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            gyroSpeedTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroSpeedTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GyroSpeedTimeseries( GyroSpeedTimeseriesObject gyroSpeedTimeseriesObject ) throws SQLException {
        Guid id = gyroSpeedTimeseriesObject.getId();
        long rowVersion = gyroSpeedTimeseriesObject.getRowVersion();
        Guid catalog = gyroSpeedTimeseriesObject.getCatalog();
        Guid gyroDevice = gyroSpeedTimeseriesObject.getGyroDevice();
        var result = update2GyroSpeedTimeseries( id, rowVersion, catalog, gyroDevice );
        if( result.isSuccess( ) ) {
            gyroSpeedTimeseriesObject.setRowVersion(result.getRowVersion());
            gyroSpeedTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGyroSpeedTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GyroSpeedTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGyroSpeedTimeseries( GyroSpeedTimeseriesObject gyroSpeedTimeseriesObject ) throws SQLException {
        var id = gyroSpeedTimeseriesObject.getId( );
        var rowVersion = gyroSpeedTimeseriesObject.getRowVersion();
        var result = deleteGyroSpeedTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarLatitudeTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarLatitudeTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarLatitudeTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarLatitudeTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarLatitudeTimeseries( RadarLatitudeTimeseriesObject radarLatitudeTimeseriesObject ) throws SQLException {
        Guid id = radarLatitudeTimeseriesObject.getId( );
        Guid catalog = radarLatitudeTimeseriesObject.getCatalog( );
        String name = radarLatitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = radarLatitudeTimeseriesObject.getMaxRetention( );
        Guid radar = radarLatitudeTimeseriesObject.getRadar( );
        var result = insertRadarLatitudeTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarLatitudeTimeseriesObject.setId(result.getId());
            radarLatitudeTimeseriesObject.setRowVersion(0);
            radarLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarLatitudeTimeseries( RadarLatitudeTimeseriesObject radarLatitudeTimeseriesObject ) throws SQLException {
        Guid id = radarLatitudeTimeseriesObject.getId( );
        String name = radarLatitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = radarLatitudeTimeseriesObject.getMaxRetention( );
        var result = insert1RadarLatitudeTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarLatitudeTimeseriesObject.setId( result.getId( ) );
            radarLatitudeTimeseriesObject.setRowVersion(0);
            radarLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarLatitudeTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarLatitudeTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarLatitudeTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarLatitudeTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarLatitudeTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarLatitudeTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarLatitudeTimeseries( RadarLatitudeTimeseriesObject radarLatitudeTimeseriesObject ) throws SQLException {
        Guid id = radarLatitudeTimeseriesObject.getId();
        long rowVersion = radarLatitudeTimeseriesObject.getRowVersion();
        Guid catalog = radarLatitudeTimeseriesObject.getCatalog();
        String name = radarLatitudeTimeseriesObject.getName();
        TimeSpan maxRetention = radarLatitudeTimeseriesObject.getMaxRetention();
        Guid radar = radarLatitudeTimeseriesObject.getRadar();
        var result = updateRadarLatitudeTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarLatitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            radarLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarLatitudeTimeseries( RadarLatitudeTimeseriesObject radarLatitudeTimeseriesObject ) throws SQLException {
        Guid id = radarLatitudeTimeseriesObject.getId();
        long rowVersion = radarLatitudeTimeseriesObject.getRowVersion();
        String name = radarLatitudeTimeseriesObject.getName();
        TimeSpan maxRetention = radarLatitudeTimeseriesObject.getMaxRetention();
        var result = update1RadarLatitudeTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarLatitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            radarLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarLatitudeTimeseries( RadarLatitudeTimeseriesObject radarLatitudeTimeseriesObject ) throws SQLException {
        Guid id = radarLatitudeTimeseriesObject.getId();
        long rowVersion = radarLatitudeTimeseriesObject.getRowVersion();
        Guid catalog = radarLatitudeTimeseriesObject.getCatalog();
        Guid radar = radarLatitudeTimeseriesObject.getRadar();
        var result = update2RadarLatitudeTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarLatitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            radarLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarLatitudeTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarLatitudeTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarLatitudeTimeseries( RadarLatitudeTimeseriesObject radarLatitudeTimeseriesObject ) throws SQLException {
        var id = radarLatitudeTimeseriesObject.getId( );
        var rowVersion = radarLatitudeTimeseriesObject.getRowVersion();
        var result = deleteRadarLatitudeTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarLongitudeTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarLongitudeTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarLongitudeTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarLongitudeTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarLongitudeTimeseries( RadarLongitudeTimeseriesObject radarLongitudeTimeseriesObject ) throws SQLException {
        Guid id = radarLongitudeTimeseriesObject.getId( );
        Guid catalog = radarLongitudeTimeseriesObject.getCatalog( );
        String name = radarLongitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = radarLongitudeTimeseriesObject.getMaxRetention( );
        Guid radar = radarLongitudeTimeseriesObject.getRadar( );
        var result = insertRadarLongitudeTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarLongitudeTimeseriesObject.setId(result.getId());
            radarLongitudeTimeseriesObject.setRowVersion(0);
            radarLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarLongitudeTimeseries( RadarLongitudeTimeseriesObject radarLongitudeTimeseriesObject ) throws SQLException {
        Guid id = radarLongitudeTimeseriesObject.getId( );
        String name = radarLongitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = radarLongitudeTimeseriesObject.getMaxRetention( );
        var result = insert1RadarLongitudeTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarLongitudeTimeseriesObject.setId( result.getId( ) );
            radarLongitudeTimeseriesObject.setRowVersion(0);
            radarLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarLongitudeTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarLongitudeTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarLongitudeTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarLongitudeTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarLongitudeTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarLongitudeTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarLongitudeTimeseries( RadarLongitudeTimeseriesObject radarLongitudeTimeseriesObject ) throws SQLException {
        Guid id = radarLongitudeTimeseriesObject.getId();
        long rowVersion = radarLongitudeTimeseriesObject.getRowVersion();
        Guid catalog = radarLongitudeTimeseriesObject.getCatalog();
        String name = radarLongitudeTimeseriesObject.getName();
        TimeSpan maxRetention = radarLongitudeTimeseriesObject.getMaxRetention();
        Guid radar = radarLongitudeTimeseriesObject.getRadar();
        var result = updateRadarLongitudeTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarLongitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            radarLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarLongitudeTimeseries( RadarLongitudeTimeseriesObject radarLongitudeTimeseriesObject ) throws SQLException {
        Guid id = radarLongitudeTimeseriesObject.getId();
        long rowVersion = radarLongitudeTimeseriesObject.getRowVersion();
        String name = radarLongitudeTimeseriesObject.getName();
        TimeSpan maxRetention = radarLongitudeTimeseriesObject.getMaxRetention();
        var result = update1RadarLongitudeTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarLongitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            radarLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarLongitudeTimeseries( RadarLongitudeTimeseriesObject radarLongitudeTimeseriesObject ) throws SQLException {
        Guid id = radarLongitudeTimeseriesObject.getId();
        long rowVersion = radarLongitudeTimeseriesObject.getRowVersion();
        Guid catalog = radarLongitudeTimeseriesObject.getCatalog();
        Guid radar = radarLongitudeTimeseriesObject.getRadar();
        var result = update2RadarLongitudeTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarLongitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            radarLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarLongitudeTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarLongitudeTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarLongitudeTimeseries( RadarLongitudeTimeseriesObject radarLongitudeTimeseriesObject ) throws SQLException {
        var id = radarLongitudeTimeseriesObject.getId( );
        var rowVersion = radarLongitudeTimeseriesObject.getRowVersion();
        var result = deleteRadarLongitudeTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadomeDewPointTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radome ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeDewPointTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radome);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadomeDewPointTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeDewPointTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadomeDewPointTimeseries( RadomeDewPointTimeseriesObject radomeDewPointTimeseriesObject ) throws SQLException {
        Guid id = radomeDewPointTimeseriesObject.getId( );
        Guid catalog = radomeDewPointTimeseriesObject.getCatalog( );
        String name = radomeDewPointTimeseriesObject.getName( );
        TimeSpan maxRetention = radomeDewPointTimeseriesObject.getMaxRetention( );
        Guid radome = radomeDewPointTimeseriesObject.getRadome( );
        var result = insertRadomeDewPointTimeseries( id, catalog, name, maxRetention, radome );
        if( result.isSuccess() ) {
            radomeDewPointTimeseriesObject.setId(result.getId());
            radomeDewPointTimeseriesObject.setRowVersion(0);
            radomeDewPointTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadomeDewPointTimeseries( RadomeDewPointTimeseriesObject radomeDewPointTimeseriesObject ) throws SQLException {
        Guid id = radomeDewPointTimeseriesObject.getId( );
        String name = radomeDewPointTimeseriesObject.getName( );
        TimeSpan maxRetention = radomeDewPointTimeseriesObject.getMaxRetention( );
        var result = insert1RadomeDewPointTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radomeDewPointTimeseriesObject.setId( result.getId( ) );
            radomeDewPointTimeseriesObject.setRowVersion(0);
            radomeDewPointTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadomeDewPointTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radome ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeDewPointTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radome);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadomeDewPointTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeDewPointTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadomeDewPointTimeseries( Guid id, long rowVersion, Guid catalog, Guid radome ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeDewPointTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radome);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadomeDewPointTimeseries( RadomeDewPointTimeseriesObject radomeDewPointTimeseriesObject ) throws SQLException {
        Guid id = radomeDewPointTimeseriesObject.getId();
        long rowVersion = radomeDewPointTimeseriesObject.getRowVersion();
        Guid catalog = radomeDewPointTimeseriesObject.getCatalog();
        String name = radomeDewPointTimeseriesObject.getName();
        TimeSpan maxRetention = radomeDewPointTimeseriesObject.getMaxRetention();
        Guid radome = radomeDewPointTimeseriesObject.getRadome();
        var result = updateRadomeDewPointTimeseries( id, rowVersion, catalog, name, maxRetention, radome );
        if( result.isSuccess( ) ) {
            radomeDewPointTimeseriesObject.setRowVersion(result.getRowVersion());
            radomeDewPointTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadomeDewPointTimeseries( RadomeDewPointTimeseriesObject radomeDewPointTimeseriesObject ) throws SQLException {
        Guid id = radomeDewPointTimeseriesObject.getId();
        long rowVersion = radomeDewPointTimeseriesObject.getRowVersion();
        String name = radomeDewPointTimeseriesObject.getName();
        TimeSpan maxRetention = radomeDewPointTimeseriesObject.getMaxRetention();
        var result = update1RadomeDewPointTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radomeDewPointTimeseriesObject.setRowVersion(result.getRowVersion());
            radomeDewPointTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadomeDewPointTimeseries( RadomeDewPointTimeseriesObject radomeDewPointTimeseriesObject ) throws SQLException {
        Guid id = radomeDewPointTimeseriesObject.getId();
        long rowVersion = radomeDewPointTimeseriesObject.getRowVersion();
        Guid catalog = radomeDewPointTimeseriesObject.getCatalog();
        Guid radome = radomeDewPointTimeseriesObject.getRadome();
        var result = update2RadomeDewPointTimeseries( id, rowVersion, catalog, radome );
        if( result.isSuccess( ) ) {
            radomeDewPointTimeseriesObject.setRowVersion(result.getRowVersion());
            radomeDewPointTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadomeDewPointTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadomeDewPointTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadomeDewPointTimeseries( RadomeDewPointTimeseriesObject radomeDewPointTimeseriesObject ) throws SQLException {
        var id = radomeDewPointTimeseriesObject.getId( );
        var rowVersion = radomeDewPointTimeseriesObject.getRowVersion();
        var result = deleteRadomeDewPointTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadomePressureTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radome ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomePressureTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radome);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadomePressureTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomePressureTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadomePressureTimeseries( RadomePressureTimeseriesObject radomePressureTimeseriesObject ) throws SQLException {
        Guid id = radomePressureTimeseriesObject.getId( );
        Guid catalog = radomePressureTimeseriesObject.getCatalog( );
        String name = radomePressureTimeseriesObject.getName( );
        TimeSpan maxRetention = radomePressureTimeseriesObject.getMaxRetention( );
        Guid radome = radomePressureTimeseriesObject.getRadome( );
        var result = insertRadomePressureTimeseries( id, catalog, name, maxRetention, radome );
        if( result.isSuccess() ) {
            radomePressureTimeseriesObject.setId(result.getId());
            radomePressureTimeseriesObject.setRowVersion(0);
            radomePressureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadomePressureTimeseries( RadomePressureTimeseriesObject radomePressureTimeseriesObject ) throws SQLException {
        Guid id = radomePressureTimeseriesObject.getId( );
        String name = radomePressureTimeseriesObject.getName( );
        TimeSpan maxRetention = radomePressureTimeseriesObject.getMaxRetention( );
        var result = insert1RadomePressureTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radomePressureTimeseriesObject.setId( result.getId( ) );
            radomePressureTimeseriesObject.setRowVersion(0);
            radomePressureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadomePressureTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radome ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomePressureTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radome);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadomePressureTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomePressureTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadomePressureTimeseries( Guid id, long rowVersion, Guid catalog, Guid radome ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomePressureTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radome);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadomePressureTimeseries( RadomePressureTimeseriesObject radomePressureTimeseriesObject ) throws SQLException {
        Guid id = radomePressureTimeseriesObject.getId();
        long rowVersion = radomePressureTimeseriesObject.getRowVersion();
        Guid catalog = radomePressureTimeseriesObject.getCatalog();
        String name = radomePressureTimeseriesObject.getName();
        TimeSpan maxRetention = radomePressureTimeseriesObject.getMaxRetention();
        Guid radome = radomePressureTimeseriesObject.getRadome();
        var result = updateRadomePressureTimeseries( id, rowVersion, catalog, name, maxRetention, radome );
        if( result.isSuccess( ) ) {
            radomePressureTimeseriesObject.setRowVersion(result.getRowVersion());
            radomePressureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadomePressureTimeseries( RadomePressureTimeseriesObject radomePressureTimeseriesObject ) throws SQLException {
        Guid id = radomePressureTimeseriesObject.getId();
        long rowVersion = radomePressureTimeseriesObject.getRowVersion();
        String name = radomePressureTimeseriesObject.getName();
        TimeSpan maxRetention = radomePressureTimeseriesObject.getMaxRetention();
        var result = update1RadomePressureTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radomePressureTimeseriesObject.setRowVersion(result.getRowVersion());
            radomePressureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadomePressureTimeseries( RadomePressureTimeseriesObject radomePressureTimeseriesObject ) throws SQLException {
        Guid id = radomePressureTimeseriesObject.getId();
        long rowVersion = radomePressureTimeseriesObject.getRowVersion();
        Guid catalog = radomePressureTimeseriesObject.getCatalog();
        Guid radome = radomePressureTimeseriesObject.getRadome();
        var result = update2RadomePressureTimeseries( id, rowVersion, catalog, radome );
        if( result.isSuccess( ) ) {
            radomePressureTimeseriesObject.setRowVersion(result.getRowVersion());
            radomePressureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadomePressureTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadomePressureTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadomePressureTimeseries( RadomePressureTimeseriesObject radomePressureTimeseriesObject ) throws SQLException {
        var id = radomePressureTimeseriesObject.getId( );
        var rowVersion = radomePressureTimeseriesObject.getRowVersion();
        var result = deleteRadomePressureTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadomeTemperatureTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radome ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeTemperatureTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radome);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadomeTemperatureTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeTemperatureTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadomeTemperatureTimeseries( RadomeTemperatureTimeseriesObject radomeTemperatureTimeseriesObject ) throws SQLException {
        Guid id = radomeTemperatureTimeseriesObject.getId( );
        Guid catalog = radomeTemperatureTimeseriesObject.getCatalog( );
        String name = radomeTemperatureTimeseriesObject.getName( );
        TimeSpan maxRetention = radomeTemperatureTimeseriesObject.getMaxRetention( );
        Guid radome = radomeTemperatureTimeseriesObject.getRadome( );
        var result = insertRadomeTemperatureTimeseries( id, catalog, name, maxRetention, radome );
        if( result.isSuccess() ) {
            radomeTemperatureTimeseriesObject.setId(result.getId());
            radomeTemperatureTimeseriesObject.setRowVersion(0);
            radomeTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadomeTemperatureTimeseries( RadomeTemperatureTimeseriesObject radomeTemperatureTimeseriesObject ) throws SQLException {
        Guid id = radomeTemperatureTimeseriesObject.getId( );
        String name = radomeTemperatureTimeseriesObject.getName( );
        TimeSpan maxRetention = radomeTemperatureTimeseriesObject.getMaxRetention( );
        var result = insert1RadomeTemperatureTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radomeTemperatureTimeseriesObject.setId( result.getId( ) );
            radomeTemperatureTimeseriesObject.setRowVersion(0);
            radomeTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadomeTemperatureTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radome ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeTemperatureTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radome);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadomeTemperatureTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeTemperatureTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadomeTemperatureTimeseries( Guid id, long rowVersion, Guid catalog, Guid radome ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeTemperatureTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radome);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadomeTemperatureTimeseries( RadomeTemperatureTimeseriesObject radomeTemperatureTimeseriesObject ) throws SQLException {
        Guid id = radomeTemperatureTimeseriesObject.getId();
        long rowVersion = radomeTemperatureTimeseriesObject.getRowVersion();
        Guid catalog = radomeTemperatureTimeseriesObject.getCatalog();
        String name = radomeTemperatureTimeseriesObject.getName();
        TimeSpan maxRetention = radomeTemperatureTimeseriesObject.getMaxRetention();
        Guid radome = radomeTemperatureTimeseriesObject.getRadome();
        var result = updateRadomeTemperatureTimeseries( id, rowVersion, catalog, name, maxRetention, radome );
        if( result.isSuccess( ) ) {
            radomeTemperatureTimeseriesObject.setRowVersion(result.getRowVersion());
            radomeTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadomeTemperatureTimeseries( RadomeTemperatureTimeseriesObject radomeTemperatureTimeseriesObject ) throws SQLException {
        Guid id = radomeTemperatureTimeseriesObject.getId();
        long rowVersion = radomeTemperatureTimeseriesObject.getRowVersion();
        String name = radomeTemperatureTimeseriesObject.getName();
        TimeSpan maxRetention = radomeTemperatureTimeseriesObject.getMaxRetention();
        var result = update1RadomeTemperatureTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radomeTemperatureTimeseriesObject.setRowVersion(result.getRowVersion());
            radomeTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadomeTemperatureTimeseries( RadomeTemperatureTimeseriesObject radomeTemperatureTimeseriesObject ) throws SQLException {
        Guid id = radomeTemperatureTimeseriesObject.getId();
        long rowVersion = radomeTemperatureTimeseriesObject.getRowVersion();
        Guid catalog = radomeTemperatureTimeseriesObject.getCatalog();
        Guid radome = radomeTemperatureTimeseriesObject.getRadome();
        var result = update2RadomeTemperatureTimeseries( id, rowVersion, catalog, radome );
        if( result.isSuccess( ) ) {
            radomeTemperatureTimeseriesObject.setRowVersion(result.getRowVersion());
            radomeTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadomeTemperatureTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadomeTemperatureTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadomeTemperatureTimeseries( RadomeTemperatureTimeseriesObject radomeTemperatureTimeseriesObject ) throws SQLException {
        var id = radomeTemperatureTimeseriesObject.getId( );
        var rowVersion = radomeTemperatureTimeseriesObject.getRowVersion();
        var result = deleteRadomeTemperatureTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertVesselDraughtTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid vessel ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call VesselDraughtTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, vessel);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1VesselDraughtTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call VesselDraughtTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertVesselDraughtTimeseries( VesselDraughtTimeseriesObject vesselDraughtTimeseriesObject ) throws SQLException {
        Guid id = vesselDraughtTimeseriesObject.getId( );
        Guid catalog = vesselDraughtTimeseriesObject.getCatalog( );
        String name = vesselDraughtTimeseriesObject.getName( );
        TimeSpan maxRetention = vesselDraughtTimeseriesObject.getMaxRetention( );
        Guid vessel = vesselDraughtTimeseriesObject.getVessel( );
        var result = insertVesselDraughtTimeseries( id, catalog, name, maxRetention, vessel );
        if( result.isSuccess() ) {
            vesselDraughtTimeseriesObject.setId(result.getId());
            vesselDraughtTimeseriesObject.setRowVersion(0);
            vesselDraughtTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1VesselDraughtTimeseries( VesselDraughtTimeseriesObject vesselDraughtTimeseriesObject ) throws SQLException {
        Guid id = vesselDraughtTimeseriesObject.getId( );
        String name = vesselDraughtTimeseriesObject.getName( );
        TimeSpan maxRetention = vesselDraughtTimeseriesObject.getMaxRetention( );
        var result = insert1VesselDraughtTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            vesselDraughtTimeseriesObject.setId( result.getId( ) );
            vesselDraughtTimeseriesObject.setRowVersion(0);
            vesselDraughtTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateVesselDraughtTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid vessel ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VesselDraughtTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, vessel);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1VesselDraughtTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VesselDraughtTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2VesselDraughtTimeseries( Guid id, long rowVersion, Guid catalog, Guid vessel ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VesselDraughtTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, vessel);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateVesselDraughtTimeseries( VesselDraughtTimeseriesObject vesselDraughtTimeseriesObject ) throws SQLException {
        Guid id = vesselDraughtTimeseriesObject.getId();
        long rowVersion = vesselDraughtTimeseriesObject.getRowVersion();
        Guid catalog = vesselDraughtTimeseriesObject.getCatalog();
        String name = vesselDraughtTimeseriesObject.getName();
        TimeSpan maxRetention = vesselDraughtTimeseriesObject.getMaxRetention();
        Guid vessel = vesselDraughtTimeseriesObject.getVessel();
        var result = updateVesselDraughtTimeseries( id, rowVersion, catalog, name, maxRetention, vessel );
        if( result.isSuccess( ) ) {
            vesselDraughtTimeseriesObject.setRowVersion(result.getRowVersion());
            vesselDraughtTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1VesselDraughtTimeseries( VesselDraughtTimeseriesObject vesselDraughtTimeseriesObject ) throws SQLException {
        Guid id = vesselDraughtTimeseriesObject.getId();
        long rowVersion = vesselDraughtTimeseriesObject.getRowVersion();
        String name = vesselDraughtTimeseriesObject.getName();
        TimeSpan maxRetention = vesselDraughtTimeseriesObject.getMaxRetention();
        var result = update1VesselDraughtTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            vesselDraughtTimeseriesObject.setRowVersion(result.getRowVersion());
            vesselDraughtTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2VesselDraughtTimeseries( VesselDraughtTimeseriesObject vesselDraughtTimeseriesObject ) throws SQLException {
        Guid id = vesselDraughtTimeseriesObject.getId();
        long rowVersion = vesselDraughtTimeseriesObject.getRowVersion();
        Guid catalog = vesselDraughtTimeseriesObject.getCatalog();
        Guid vessel = vesselDraughtTimeseriesObject.getVessel();
        var result = update2VesselDraughtTimeseries( id, rowVersion, catalog, vessel );
        if( result.isSuccess( ) ) {
            vesselDraughtTimeseriesObject.setRowVersion(result.getRowVersion());
            vesselDraughtTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteVesselDraughtTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call VesselDraughtTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteVesselDraughtTimeseries( VesselDraughtTimeseriesObject vesselDraughtTimeseriesObject ) throws SQLException {
        var id = vesselDraughtTimeseriesObject.getId( );
        var rowVersion = vesselDraughtTimeseriesObject.getRowVersion();
        var result = deleteVesselDraughtTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertViewLatitudeTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid view ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ViewLatitudeTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, view);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1ViewLatitudeTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ViewLatitudeTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertViewLatitudeTimeseries( ViewLatitudeTimeseriesObject viewLatitudeTimeseriesObject ) throws SQLException {
        Guid id = viewLatitudeTimeseriesObject.getId( );
        Guid catalog = viewLatitudeTimeseriesObject.getCatalog( );
        String name = viewLatitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = viewLatitudeTimeseriesObject.getMaxRetention( );
        Guid view = viewLatitudeTimeseriesObject.getView( );
        var result = insertViewLatitudeTimeseries( id, catalog, name, maxRetention, view );
        if( result.isSuccess() ) {
            viewLatitudeTimeseriesObject.setId(result.getId());
            viewLatitudeTimeseriesObject.setRowVersion(0);
            viewLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1ViewLatitudeTimeseries( ViewLatitudeTimeseriesObject viewLatitudeTimeseriesObject ) throws SQLException {
        Guid id = viewLatitudeTimeseriesObject.getId( );
        String name = viewLatitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = viewLatitudeTimeseriesObject.getMaxRetention( );
        var result = insert1ViewLatitudeTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            viewLatitudeTimeseriesObject.setId( result.getId( ) );
            viewLatitudeTimeseriesObject.setRowVersion(0);
            viewLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateViewLatitudeTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid view ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewLatitudeTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, view);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1ViewLatitudeTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewLatitudeTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2ViewLatitudeTimeseries( Guid id, long rowVersion, Guid catalog, Guid view ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewLatitudeTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, view);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateViewLatitudeTimeseries( ViewLatitudeTimeseriesObject viewLatitudeTimeseriesObject ) throws SQLException {
        Guid id = viewLatitudeTimeseriesObject.getId();
        long rowVersion = viewLatitudeTimeseriesObject.getRowVersion();
        Guid catalog = viewLatitudeTimeseriesObject.getCatalog();
        String name = viewLatitudeTimeseriesObject.getName();
        TimeSpan maxRetention = viewLatitudeTimeseriesObject.getMaxRetention();
        Guid view = viewLatitudeTimeseriesObject.getView();
        var result = updateViewLatitudeTimeseries( id, rowVersion, catalog, name, maxRetention, view );
        if( result.isSuccess( ) ) {
            viewLatitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            viewLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1ViewLatitudeTimeseries( ViewLatitudeTimeseriesObject viewLatitudeTimeseriesObject ) throws SQLException {
        Guid id = viewLatitudeTimeseriesObject.getId();
        long rowVersion = viewLatitudeTimeseriesObject.getRowVersion();
        String name = viewLatitudeTimeseriesObject.getName();
        TimeSpan maxRetention = viewLatitudeTimeseriesObject.getMaxRetention();
        var result = update1ViewLatitudeTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            viewLatitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            viewLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2ViewLatitudeTimeseries( ViewLatitudeTimeseriesObject viewLatitudeTimeseriesObject ) throws SQLException {
        Guid id = viewLatitudeTimeseriesObject.getId();
        long rowVersion = viewLatitudeTimeseriesObject.getRowVersion();
        Guid catalog = viewLatitudeTimeseriesObject.getCatalog();
        Guid view = viewLatitudeTimeseriesObject.getView();
        var result = update2ViewLatitudeTimeseries( id, rowVersion, catalog, view );
        if( result.isSuccess( ) ) {
            viewLatitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            viewLatitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteViewLatitudeTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ViewLatitudeTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteViewLatitudeTimeseries( ViewLatitudeTimeseriesObject viewLatitudeTimeseriesObject ) throws SQLException {
        var id = viewLatitudeTimeseriesObject.getId( );
        var rowVersion = viewLatitudeTimeseriesObject.getRowVersion();
        var result = deleteViewLatitudeTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertViewLongitudeTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid view ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ViewLongitudeTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, view);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1ViewLongitudeTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ViewLongitudeTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertViewLongitudeTimeseries( ViewLongitudeTimeseriesObject viewLongitudeTimeseriesObject ) throws SQLException {
        Guid id = viewLongitudeTimeseriesObject.getId( );
        Guid catalog = viewLongitudeTimeseriesObject.getCatalog( );
        String name = viewLongitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = viewLongitudeTimeseriesObject.getMaxRetention( );
        Guid view = viewLongitudeTimeseriesObject.getView( );
        var result = insertViewLongitudeTimeseries( id, catalog, name, maxRetention, view );
        if( result.isSuccess() ) {
            viewLongitudeTimeseriesObject.setId(result.getId());
            viewLongitudeTimeseriesObject.setRowVersion(0);
            viewLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1ViewLongitudeTimeseries( ViewLongitudeTimeseriesObject viewLongitudeTimeseriesObject ) throws SQLException {
        Guid id = viewLongitudeTimeseriesObject.getId( );
        String name = viewLongitudeTimeseriesObject.getName( );
        TimeSpan maxRetention = viewLongitudeTimeseriesObject.getMaxRetention( );
        var result = insert1ViewLongitudeTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            viewLongitudeTimeseriesObject.setId( result.getId( ) );
            viewLongitudeTimeseriesObject.setRowVersion(0);
            viewLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateViewLongitudeTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid view ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewLongitudeTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, view);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1ViewLongitudeTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewLongitudeTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2ViewLongitudeTimeseries( Guid id, long rowVersion, Guid catalog, Guid view ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewLongitudeTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, view);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateViewLongitudeTimeseries( ViewLongitudeTimeseriesObject viewLongitudeTimeseriesObject ) throws SQLException {
        Guid id = viewLongitudeTimeseriesObject.getId();
        long rowVersion = viewLongitudeTimeseriesObject.getRowVersion();
        Guid catalog = viewLongitudeTimeseriesObject.getCatalog();
        String name = viewLongitudeTimeseriesObject.getName();
        TimeSpan maxRetention = viewLongitudeTimeseriesObject.getMaxRetention();
        Guid view = viewLongitudeTimeseriesObject.getView();
        var result = updateViewLongitudeTimeseries( id, rowVersion, catalog, name, maxRetention, view );
        if( result.isSuccess( ) ) {
            viewLongitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            viewLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1ViewLongitudeTimeseries( ViewLongitudeTimeseriesObject viewLongitudeTimeseriesObject ) throws SQLException {
        Guid id = viewLongitudeTimeseriesObject.getId();
        long rowVersion = viewLongitudeTimeseriesObject.getRowVersion();
        String name = viewLongitudeTimeseriesObject.getName();
        TimeSpan maxRetention = viewLongitudeTimeseriesObject.getMaxRetention();
        var result = update1ViewLongitudeTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            viewLongitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            viewLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2ViewLongitudeTimeseries( ViewLongitudeTimeseriesObject viewLongitudeTimeseriesObject ) throws SQLException {
        Guid id = viewLongitudeTimeseriesObject.getId();
        long rowVersion = viewLongitudeTimeseriesObject.getRowVersion();
        Guid catalog = viewLongitudeTimeseriesObject.getCatalog();
        Guid view = viewLongitudeTimeseriesObject.getView();
        var result = update2ViewLongitudeTimeseries( id, rowVersion, catalog, view );
        if( result.isSuccess( ) ) {
            viewLongitudeTimeseriesObject.setRowVersion(result.getRowVersion());
            viewLongitudeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteViewLongitudeTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ViewLongitudeTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteViewLongitudeTimeseries( ViewLongitudeTimeseriesObject viewLongitudeTimeseriesObject ) throws SQLException {
        var id = viewLongitudeTimeseriesObject.getId( );
        var rowVersion = viewLongitudeTimeseriesObject.getRowVersion();
        var result = deleteViewLongitudeTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertViewZoomLevelTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid view ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ViewZoomLevelTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, view);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1ViewZoomLevelTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ViewZoomLevelTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertViewZoomLevelTimeseries( ViewZoomLevelTimeseriesObject viewZoomLevelTimeseriesObject ) throws SQLException {
        Guid id = viewZoomLevelTimeseriesObject.getId( );
        Guid catalog = viewZoomLevelTimeseriesObject.getCatalog( );
        String name = viewZoomLevelTimeseriesObject.getName( );
        TimeSpan maxRetention = viewZoomLevelTimeseriesObject.getMaxRetention( );
        Guid view = viewZoomLevelTimeseriesObject.getView( );
        var result = insertViewZoomLevelTimeseries( id, catalog, name, maxRetention, view );
        if( result.isSuccess() ) {
            viewZoomLevelTimeseriesObject.setId(result.getId());
            viewZoomLevelTimeseriesObject.setRowVersion(0);
            viewZoomLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1ViewZoomLevelTimeseries( ViewZoomLevelTimeseriesObject viewZoomLevelTimeseriesObject ) throws SQLException {
        Guid id = viewZoomLevelTimeseriesObject.getId( );
        String name = viewZoomLevelTimeseriesObject.getName( );
        TimeSpan maxRetention = viewZoomLevelTimeseriesObject.getMaxRetention( );
        var result = insert1ViewZoomLevelTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            viewZoomLevelTimeseriesObject.setId( result.getId( ) );
            viewZoomLevelTimeseriesObject.setRowVersion(0);
            viewZoomLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateViewZoomLevelTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid view ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewZoomLevelTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, view);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1ViewZoomLevelTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewZoomLevelTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2ViewZoomLevelTimeseries( Guid id, long rowVersion, Guid catalog, Guid view ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewZoomLevelTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, view);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateViewZoomLevelTimeseries( ViewZoomLevelTimeseriesObject viewZoomLevelTimeseriesObject ) throws SQLException {
        Guid id = viewZoomLevelTimeseriesObject.getId();
        long rowVersion = viewZoomLevelTimeseriesObject.getRowVersion();
        Guid catalog = viewZoomLevelTimeseriesObject.getCatalog();
        String name = viewZoomLevelTimeseriesObject.getName();
        TimeSpan maxRetention = viewZoomLevelTimeseriesObject.getMaxRetention();
        Guid view = viewZoomLevelTimeseriesObject.getView();
        var result = updateViewZoomLevelTimeseries( id, rowVersion, catalog, name, maxRetention, view );
        if( result.isSuccess( ) ) {
            viewZoomLevelTimeseriesObject.setRowVersion(result.getRowVersion());
            viewZoomLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1ViewZoomLevelTimeseries( ViewZoomLevelTimeseriesObject viewZoomLevelTimeseriesObject ) throws SQLException {
        Guid id = viewZoomLevelTimeseriesObject.getId();
        long rowVersion = viewZoomLevelTimeseriesObject.getRowVersion();
        String name = viewZoomLevelTimeseriesObject.getName();
        TimeSpan maxRetention = viewZoomLevelTimeseriesObject.getMaxRetention();
        var result = update1ViewZoomLevelTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            viewZoomLevelTimeseriesObject.setRowVersion(result.getRowVersion());
            viewZoomLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2ViewZoomLevelTimeseries( ViewZoomLevelTimeseriesObject viewZoomLevelTimeseriesObject ) throws SQLException {
        Guid id = viewZoomLevelTimeseriesObject.getId();
        long rowVersion = viewZoomLevelTimeseriesObject.getRowVersion();
        Guid catalog = viewZoomLevelTimeseriesObject.getCatalog();
        Guid view = viewZoomLevelTimeseriesObject.getView();
        var result = update2ViewZoomLevelTimeseries( id, rowVersion, catalog, view );
        if( result.isSuccess( ) ) {
            viewZoomLevelTimeseriesObject.setRowVersion(result.getRowVersion());
            viewZoomLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteViewZoomLevelTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ViewZoomLevelTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteViewZoomLevelTimeseries( ViewZoomLevelTimeseriesObject viewZoomLevelTimeseriesObject ) throws SQLException {
        var id = viewZoomLevelTimeseriesObject.getId( );
        var rowVersion = viewZoomLevelTimeseriesObject.getRowVersion();
        var result = deleteViewZoomLevelTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertWeatherStationAbsoluteHumidityTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationAbsoluteHumidityTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1WeatherStationAbsoluteHumidityTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationAbsoluteHumidityTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertWeatherStationAbsoluteHumidityTimeseries( WeatherStationAbsoluteHumidityTimeseriesObject weatherStationAbsoluteHumidityTimeseriesObject ) throws SQLException {
        Guid id = weatherStationAbsoluteHumidityTimeseriesObject.getId( );
        Guid catalog = weatherStationAbsoluteHumidityTimeseriesObject.getCatalog( );
        String name = weatherStationAbsoluteHumidityTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationAbsoluteHumidityTimeseriesObject.getMaxRetention( );
        Guid weatherStation = weatherStationAbsoluteHumidityTimeseriesObject.getWeatherStation( );
        var result = insertWeatherStationAbsoluteHumidityTimeseries( id, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess() ) {
            weatherStationAbsoluteHumidityTimeseriesObject.setId(result.getId());
            weatherStationAbsoluteHumidityTimeseriesObject.setRowVersion(0);
            weatherStationAbsoluteHumidityTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1WeatherStationAbsoluteHumidityTimeseries( WeatherStationAbsoluteHumidityTimeseriesObject weatherStationAbsoluteHumidityTimeseriesObject ) throws SQLException {
        Guid id = weatherStationAbsoluteHumidityTimeseriesObject.getId( );
        String name = weatherStationAbsoluteHumidityTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationAbsoluteHumidityTimeseriesObject.getMaxRetention( );
        var result = insert1WeatherStationAbsoluteHumidityTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationAbsoluteHumidityTimeseriesObject.setId( result.getId( ) );
            weatherStationAbsoluteHumidityTimeseriesObject.setRowVersion(0);
            weatherStationAbsoluteHumidityTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateWeatherStationAbsoluteHumidityTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationAbsoluteHumidityTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1WeatherStationAbsoluteHumidityTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationAbsoluteHumidityTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2WeatherStationAbsoluteHumidityTimeseries( Guid id, long rowVersion, Guid catalog, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationAbsoluteHumidityTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateWeatherStationAbsoluteHumidityTimeseries( WeatherStationAbsoluteHumidityTimeseriesObject weatherStationAbsoluteHumidityTimeseriesObject ) throws SQLException {
        Guid id = weatherStationAbsoluteHumidityTimeseriesObject.getId();
        long rowVersion = weatherStationAbsoluteHumidityTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationAbsoluteHumidityTimeseriesObject.getCatalog();
        String name = weatherStationAbsoluteHumidityTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationAbsoluteHumidityTimeseriesObject.getMaxRetention();
        Guid weatherStation = weatherStationAbsoluteHumidityTimeseriesObject.getWeatherStation();
        var result = updateWeatherStationAbsoluteHumidityTimeseries( id, rowVersion, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationAbsoluteHumidityTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationAbsoluteHumidityTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1WeatherStationAbsoluteHumidityTimeseries( WeatherStationAbsoluteHumidityTimeseriesObject weatherStationAbsoluteHumidityTimeseriesObject ) throws SQLException {
        Guid id = weatherStationAbsoluteHumidityTimeseriesObject.getId();
        long rowVersion = weatherStationAbsoluteHumidityTimeseriesObject.getRowVersion();
        String name = weatherStationAbsoluteHumidityTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationAbsoluteHumidityTimeseriesObject.getMaxRetention();
        var result = update1WeatherStationAbsoluteHumidityTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationAbsoluteHumidityTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationAbsoluteHumidityTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2WeatherStationAbsoluteHumidityTimeseries( WeatherStationAbsoluteHumidityTimeseriesObject weatherStationAbsoluteHumidityTimeseriesObject ) throws SQLException {
        Guid id = weatherStationAbsoluteHumidityTimeseriesObject.getId();
        long rowVersion = weatherStationAbsoluteHumidityTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationAbsoluteHumidityTimeseriesObject.getCatalog();
        Guid weatherStation = weatherStationAbsoluteHumidityTimeseriesObject.getWeatherStation();
        var result = update2WeatherStationAbsoluteHumidityTimeseries( id, rowVersion, catalog, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationAbsoluteHumidityTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationAbsoluteHumidityTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteWeatherStationAbsoluteHumidityTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call WeatherStationAbsoluteHumidityTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteWeatherStationAbsoluteHumidityTimeseries( WeatherStationAbsoluteHumidityTimeseriesObject weatherStationAbsoluteHumidityTimeseriesObject ) throws SQLException {
        var id = weatherStationAbsoluteHumidityTimeseriesObject.getId( );
        var rowVersion = weatherStationAbsoluteHumidityTimeseriesObject.getRowVersion();
        var result = deleteWeatherStationAbsoluteHumidityTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertWeatherStationAirTemperatureTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationAirTemperatureTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1WeatherStationAirTemperatureTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationAirTemperatureTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertWeatherStationAirTemperatureTimeseries( WeatherStationAirTemperatureTimeseriesObject weatherStationAirTemperatureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationAirTemperatureTimeseriesObject.getId( );
        Guid catalog = weatherStationAirTemperatureTimeseriesObject.getCatalog( );
        String name = weatherStationAirTemperatureTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationAirTemperatureTimeseriesObject.getMaxRetention( );
        Guid weatherStation = weatherStationAirTemperatureTimeseriesObject.getWeatherStation( );
        var result = insertWeatherStationAirTemperatureTimeseries( id, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess() ) {
            weatherStationAirTemperatureTimeseriesObject.setId(result.getId());
            weatherStationAirTemperatureTimeseriesObject.setRowVersion(0);
            weatherStationAirTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1WeatherStationAirTemperatureTimeseries( WeatherStationAirTemperatureTimeseriesObject weatherStationAirTemperatureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationAirTemperatureTimeseriesObject.getId( );
        String name = weatherStationAirTemperatureTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationAirTemperatureTimeseriesObject.getMaxRetention( );
        var result = insert1WeatherStationAirTemperatureTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationAirTemperatureTimeseriesObject.setId( result.getId( ) );
            weatherStationAirTemperatureTimeseriesObject.setRowVersion(0);
            weatherStationAirTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateWeatherStationAirTemperatureTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationAirTemperatureTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1WeatherStationAirTemperatureTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationAirTemperatureTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2WeatherStationAirTemperatureTimeseries( Guid id, long rowVersion, Guid catalog, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationAirTemperatureTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateWeatherStationAirTemperatureTimeseries( WeatherStationAirTemperatureTimeseriesObject weatherStationAirTemperatureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationAirTemperatureTimeseriesObject.getId();
        long rowVersion = weatherStationAirTemperatureTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationAirTemperatureTimeseriesObject.getCatalog();
        String name = weatherStationAirTemperatureTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationAirTemperatureTimeseriesObject.getMaxRetention();
        Guid weatherStation = weatherStationAirTemperatureTimeseriesObject.getWeatherStation();
        var result = updateWeatherStationAirTemperatureTimeseries( id, rowVersion, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationAirTemperatureTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationAirTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1WeatherStationAirTemperatureTimeseries( WeatherStationAirTemperatureTimeseriesObject weatherStationAirTemperatureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationAirTemperatureTimeseriesObject.getId();
        long rowVersion = weatherStationAirTemperatureTimeseriesObject.getRowVersion();
        String name = weatherStationAirTemperatureTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationAirTemperatureTimeseriesObject.getMaxRetention();
        var result = update1WeatherStationAirTemperatureTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationAirTemperatureTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationAirTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2WeatherStationAirTemperatureTimeseries( WeatherStationAirTemperatureTimeseriesObject weatherStationAirTemperatureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationAirTemperatureTimeseriesObject.getId();
        long rowVersion = weatherStationAirTemperatureTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationAirTemperatureTimeseriesObject.getCatalog();
        Guid weatherStation = weatherStationAirTemperatureTimeseriesObject.getWeatherStation();
        var result = update2WeatherStationAirTemperatureTimeseries( id, rowVersion, catalog, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationAirTemperatureTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationAirTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteWeatherStationAirTemperatureTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call WeatherStationAirTemperatureTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteWeatherStationAirTemperatureTimeseries( WeatherStationAirTemperatureTimeseriesObject weatherStationAirTemperatureTimeseriesObject ) throws SQLException {
        var id = weatherStationAirTemperatureTimeseriesObject.getId( );
        var rowVersion = weatherStationAirTemperatureTimeseriesObject.getRowVersion();
        var result = deleteWeatherStationAirTemperatureTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertWeatherStationBarometricPressureTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationBarometricPressureTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1WeatherStationBarometricPressureTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationBarometricPressureTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertWeatherStationBarometricPressureTimeseries( WeatherStationBarometricPressureTimeseriesObject weatherStationBarometricPressureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationBarometricPressureTimeseriesObject.getId( );
        Guid catalog = weatherStationBarometricPressureTimeseriesObject.getCatalog( );
        String name = weatherStationBarometricPressureTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationBarometricPressureTimeseriesObject.getMaxRetention( );
        Guid weatherStation = weatherStationBarometricPressureTimeseriesObject.getWeatherStation( );
        var result = insertWeatherStationBarometricPressureTimeseries( id, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess() ) {
            weatherStationBarometricPressureTimeseriesObject.setId(result.getId());
            weatherStationBarometricPressureTimeseriesObject.setRowVersion(0);
            weatherStationBarometricPressureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1WeatherStationBarometricPressureTimeseries( WeatherStationBarometricPressureTimeseriesObject weatherStationBarometricPressureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationBarometricPressureTimeseriesObject.getId( );
        String name = weatherStationBarometricPressureTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationBarometricPressureTimeseriesObject.getMaxRetention( );
        var result = insert1WeatherStationBarometricPressureTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationBarometricPressureTimeseriesObject.setId( result.getId( ) );
            weatherStationBarometricPressureTimeseriesObject.setRowVersion(0);
            weatherStationBarometricPressureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateWeatherStationBarometricPressureTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationBarometricPressureTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1WeatherStationBarometricPressureTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationBarometricPressureTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2WeatherStationBarometricPressureTimeseries( Guid id, long rowVersion, Guid catalog, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationBarometricPressureTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateWeatherStationBarometricPressureTimeseries( WeatherStationBarometricPressureTimeseriesObject weatherStationBarometricPressureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationBarometricPressureTimeseriesObject.getId();
        long rowVersion = weatherStationBarometricPressureTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationBarometricPressureTimeseriesObject.getCatalog();
        String name = weatherStationBarometricPressureTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationBarometricPressureTimeseriesObject.getMaxRetention();
        Guid weatherStation = weatherStationBarometricPressureTimeseriesObject.getWeatherStation();
        var result = updateWeatherStationBarometricPressureTimeseries( id, rowVersion, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationBarometricPressureTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationBarometricPressureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1WeatherStationBarometricPressureTimeseries( WeatherStationBarometricPressureTimeseriesObject weatherStationBarometricPressureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationBarometricPressureTimeseriesObject.getId();
        long rowVersion = weatherStationBarometricPressureTimeseriesObject.getRowVersion();
        String name = weatherStationBarometricPressureTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationBarometricPressureTimeseriesObject.getMaxRetention();
        var result = update1WeatherStationBarometricPressureTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationBarometricPressureTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationBarometricPressureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2WeatherStationBarometricPressureTimeseries( WeatherStationBarometricPressureTimeseriesObject weatherStationBarometricPressureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationBarometricPressureTimeseriesObject.getId();
        long rowVersion = weatherStationBarometricPressureTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationBarometricPressureTimeseriesObject.getCatalog();
        Guid weatherStation = weatherStationBarometricPressureTimeseriesObject.getWeatherStation();
        var result = update2WeatherStationBarometricPressureTimeseries( id, rowVersion, catalog, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationBarometricPressureTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationBarometricPressureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteWeatherStationBarometricPressureTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call WeatherStationBarometricPressureTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteWeatherStationBarometricPressureTimeseries( WeatherStationBarometricPressureTimeseriesObject weatherStationBarometricPressureTimeseriesObject ) throws SQLException {
        var id = weatherStationBarometricPressureTimeseriesObject.getId( );
        var rowVersion = weatherStationBarometricPressureTimeseriesObject.getRowVersion();
        var result = deleteWeatherStationBarometricPressureTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertWeatherStationDewPointTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationDewPointTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1WeatherStationDewPointTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationDewPointTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertWeatherStationDewPointTimeseries( WeatherStationDewPointTimeseriesObject weatherStationDewPointTimeseriesObject ) throws SQLException {
        Guid id = weatherStationDewPointTimeseriesObject.getId( );
        Guid catalog = weatherStationDewPointTimeseriesObject.getCatalog( );
        String name = weatherStationDewPointTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationDewPointTimeseriesObject.getMaxRetention( );
        Guid weatherStation = weatherStationDewPointTimeseriesObject.getWeatherStation( );
        var result = insertWeatherStationDewPointTimeseries( id, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess() ) {
            weatherStationDewPointTimeseriesObject.setId(result.getId());
            weatherStationDewPointTimeseriesObject.setRowVersion(0);
            weatherStationDewPointTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1WeatherStationDewPointTimeseries( WeatherStationDewPointTimeseriesObject weatherStationDewPointTimeseriesObject ) throws SQLException {
        Guid id = weatherStationDewPointTimeseriesObject.getId( );
        String name = weatherStationDewPointTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationDewPointTimeseriesObject.getMaxRetention( );
        var result = insert1WeatherStationDewPointTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationDewPointTimeseriesObject.setId( result.getId( ) );
            weatherStationDewPointTimeseriesObject.setRowVersion(0);
            weatherStationDewPointTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateWeatherStationDewPointTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationDewPointTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1WeatherStationDewPointTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationDewPointTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2WeatherStationDewPointTimeseries( Guid id, long rowVersion, Guid catalog, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationDewPointTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateWeatherStationDewPointTimeseries( WeatherStationDewPointTimeseriesObject weatherStationDewPointTimeseriesObject ) throws SQLException {
        Guid id = weatherStationDewPointTimeseriesObject.getId();
        long rowVersion = weatherStationDewPointTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationDewPointTimeseriesObject.getCatalog();
        String name = weatherStationDewPointTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationDewPointTimeseriesObject.getMaxRetention();
        Guid weatherStation = weatherStationDewPointTimeseriesObject.getWeatherStation();
        var result = updateWeatherStationDewPointTimeseries( id, rowVersion, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationDewPointTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationDewPointTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1WeatherStationDewPointTimeseries( WeatherStationDewPointTimeseriesObject weatherStationDewPointTimeseriesObject ) throws SQLException {
        Guid id = weatherStationDewPointTimeseriesObject.getId();
        long rowVersion = weatherStationDewPointTimeseriesObject.getRowVersion();
        String name = weatherStationDewPointTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationDewPointTimeseriesObject.getMaxRetention();
        var result = update1WeatherStationDewPointTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationDewPointTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationDewPointTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2WeatherStationDewPointTimeseries( WeatherStationDewPointTimeseriesObject weatherStationDewPointTimeseriesObject ) throws SQLException {
        Guid id = weatherStationDewPointTimeseriesObject.getId();
        long rowVersion = weatherStationDewPointTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationDewPointTimeseriesObject.getCatalog();
        Guid weatherStation = weatherStationDewPointTimeseriesObject.getWeatherStation();
        var result = update2WeatherStationDewPointTimeseries( id, rowVersion, catalog, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationDewPointTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationDewPointTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteWeatherStationDewPointTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call WeatherStationDewPointTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteWeatherStationDewPointTimeseries( WeatherStationDewPointTimeseriesObject weatherStationDewPointTimeseriesObject ) throws SQLException {
        var id = weatherStationDewPointTimeseriesObject.getId( );
        var rowVersion = weatherStationDewPointTimeseriesObject.getRowVersion();
        var result = deleteWeatherStationDewPointTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertWeatherStationRelativeHumidityTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationRelativeHumidityTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1WeatherStationRelativeHumidityTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationRelativeHumidityTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertWeatherStationRelativeHumidityTimeseries( WeatherStationRelativeHumidityTimeseriesObject weatherStationRelativeHumidityTimeseriesObject ) throws SQLException {
        Guid id = weatherStationRelativeHumidityTimeseriesObject.getId( );
        Guid catalog = weatherStationRelativeHumidityTimeseriesObject.getCatalog( );
        String name = weatherStationRelativeHumidityTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationRelativeHumidityTimeseriesObject.getMaxRetention( );
        Guid weatherStation = weatherStationRelativeHumidityTimeseriesObject.getWeatherStation( );
        var result = insertWeatherStationRelativeHumidityTimeseries( id, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess() ) {
            weatherStationRelativeHumidityTimeseriesObject.setId(result.getId());
            weatherStationRelativeHumidityTimeseriesObject.setRowVersion(0);
            weatherStationRelativeHumidityTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1WeatherStationRelativeHumidityTimeseries( WeatherStationRelativeHumidityTimeseriesObject weatherStationRelativeHumidityTimeseriesObject ) throws SQLException {
        Guid id = weatherStationRelativeHumidityTimeseriesObject.getId( );
        String name = weatherStationRelativeHumidityTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationRelativeHumidityTimeseriesObject.getMaxRetention( );
        var result = insert1WeatherStationRelativeHumidityTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationRelativeHumidityTimeseriesObject.setId( result.getId( ) );
            weatherStationRelativeHumidityTimeseriesObject.setRowVersion(0);
            weatherStationRelativeHumidityTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateWeatherStationRelativeHumidityTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationRelativeHumidityTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1WeatherStationRelativeHumidityTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationRelativeHumidityTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2WeatherStationRelativeHumidityTimeseries( Guid id, long rowVersion, Guid catalog, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationRelativeHumidityTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateWeatherStationRelativeHumidityTimeseries( WeatherStationRelativeHumidityTimeseriesObject weatherStationRelativeHumidityTimeseriesObject ) throws SQLException {
        Guid id = weatherStationRelativeHumidityTimeseriesObject.getId();
        long rowVersion = weatherStationRelativeHumidityTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationRelativeHumidityTimeseriesObject.getCatalog();
        String name = weatherStationRelativeHumidityTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationRelativeHumidityTimeseriesObject.getMaxRetention();
        Guid weatherStation = weatherStationRelativeHumidityTimeseriesObject.getWeatherStation();
        var result = updateWeatherStationRelativeHumidityTimeseries( id, rowVersion, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationRelativeHumidityTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationRelativeHumidityTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1WeatherStationRelativeHumidityTimeseries( WeatherStationRelativeHumidityTimeseriesObject weatherStationRelativeHumidityTimeseriesObject ) throws SQLException {
        Guid id = weatherStationRelativeHumidityTimeseriesObject.getId();
        long rowVersion = weatherStationRelativeHumidityTimeseriesObject.getRowVersion();
        String name = weatherStationRelativeHumidityTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationRelativeHumidityTimeseriesObject.getMaxRetention();
        var result = update1WeatherStationRelativeHumidityTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationRelativeHumidityTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationRelativeHumidityTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2WeatherStationRelativeHumidityTimeseries( WeatherStationRelativeHumidityTimeseriesObject weatherStationRelativeHumidityTimeseriesObject ) throws SQLException {
        Guid id = weatherStationRelativeHumidityTimeseriesObject.getId();
        long rowVersion = weatherStationRelativeHumidityTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationRelativeHumidityTimeseriesObject.getCatalog();
        Guid weatherStation = weatherStationRelativeHumidityTimeseriesObject.getWeatherStation();
        var result = update2WeatherStationRelativeHumidityTimeseries( id, rowVersion, catalog, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationRelativeHumidityTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationRelativeHumidityTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteWeatherStationRelativeHumidityTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call WeatherStationRelativeHumidityTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteWeatherStationRelativeHumidityTimeseries( WeatherStationRelativeHumidityTimeseriesObject weatherStationRelativeHumidityTimeseriesObject ) throws SQLException {
        var id = weatherStationRelativeHumidityTimeseriesObject.getId( );
        var rowVersion = weatherStationRelativeHumidityTimeseriesObject.getRowVersion();
        var result = deleteWeatherStationRelativeHumidityTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertWeatherStationWaterTemperatureTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationWaterTemperatureTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1WeatherStationWaterTemperatureTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationWaterTemperatureTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertWeatherStationWaterTemperatureTimeseries( WeatherStationWaterTemperatureTimeseriesObject weatherStationWaterTemperatureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWaterTemperatureTimeseriesObject.getId( );
        Guid catalog = weatherStationWaterTemperatureTimeseriesObject.getCatalog( );
        String name = weatherStationWaterTemperatureTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationWaterTemperatureTimeseriesObject.getMaxRetention( );
        Guid weatherStation = weatherStationWaterTemperatureTimeseriesObject.getWeatherStation( );
        var result = insertWeatherStationWaterTemperatureTimeseries( id, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess() ) {
            weatherStationWaterTemperatureTimeseriesObject.setId(result.getId());
            weatherStationWaterTemperatureTimeseriesObject.setRowVersion(0);
            weatherStationWaterTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1WeatherStationWaterTemperatureTimeseries( WeatherStationWaterTemperatureTimeseriesObject weatherStationWaterTemperatureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWaterTemperatureTimeseriesObject.getId( );
        String name = weatherStationWaterTemperatureTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationWaterTemperatureTimeseriesObject.getMaxRetention( );
        var result = insert1WeatherStationWaterTemperatureTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationWaterTemperatureTimeseriesObject.setId( result.getId( ) );
            weatherStationWaterTemperatureTimeseriesObject.setRowVersion(0);
            weatherStationWaterTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateWeatherStationWaterTemperatureTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationWaterTemperatureTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1WeatherStationWaterTemperatureTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationWaterTemperatureTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2WeatherStationWaterTemperatureTimeseries( Guid id, long rowVersion, Guid catalog, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationWaterTemperatureTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateWeatherStationWaterTemperatureTimeseries( WeatherStationWaterTemperatureTimeseriesObject weatherStationWaterTemperatureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWaterTemperatureTimeseriesObject.getId();
        long rowVersion = weatherStationWaterTemperatureTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationWaterTemperatureTimeseriesObject.getCatalog();
        String name = weatherStationWaterTemperatureTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationWaterTemperatureTimeseriesObject.getMaxRetention();
        Guid weatherStation = weatherStationWaterTemperatureTimeseriesObject.getWeatherStation();
        var result = updateWeatherStationWaterTemperatureTimeseries( id, rowVersion, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationWaterTemperatureTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationWaterTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1WeatherStationWaterTemperatureTimeseries( WeatherStationWaterTemperatureTimeseriesObject weatherStationWaterTemperatureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWaterTemperatureTimeseriesObject.getId();
        long rowVersion = weatherStationWaterTemperatureTimeseriesObject.getRowVersion();
        String name = weatherStationWaterTemperatureTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationWaterTemperatureTimeseriesObject.getMaxRetention();
        var result = update1WeatherStationWaterTemperatureTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationWaterTemperatureTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationWaterTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2WeatherStationWaterTemperatureTimeseries( WeatherStationWaterTemperatureTimeseriesObject weatherStationWaterTemperatureTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWaterTemperatureTimeseriesObject.getId();
        long rowVersion = weatherStationWaterTemperatureTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationWaterTemperatureTimeseriesObject.getCatalog();
        Guid weatherStation = weatherStationWaterTemperatureTimeseriesObject.getWeatherStation();
        var result = update2WeatherStationWaterTemperatureTimeseries( id, rowVersion, catalog, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationWaterTemperatureTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationWaterTemperatureTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteWeatherStationWaterTemperatureTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call WeatherStationWaterTemperatureTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteWeatherStationWaterTemperatureTimeseries( WeatherStationWaterTemperatureTimeseriesObject weatherStationWaterTemperatureTimeseriesObject ) throws SQLException {
        var id = weatherStationWaterTemperatureTimeseriesObject.getId( );
        var rowVersion = weatherStationWaterTemperatureTimeseriesObject.getRowVersion();
        var result = deleteWeatherStationWaterTemperatureTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertWeatherStationWindDirectionTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationWindDirectionTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1WeatherStationWindDirectionTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationWindDirectionTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertWeatherStationWindDirectionTimeseries( WeatherStationWindDirectionTimeseriesObject weatherStationWindDirectionTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWindDirectionTimeseriesObject.getId( );
        Guid catalog = weatherStationWindDirectionTimeseriesObject.getCatalog( );
        String name = weatherStationWindDirectionTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationWindDirectionTimeseriesObject.getMaxRetention( );
        Guid weatherStation = weatherStationWindDirectionTimeseriesObject.getWeatherStation( );
        var result = insertWeatherStationWindDirectionTimeseries( id, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess() ) {
            weatherStationWindDirectionTimeseriesObject.setId(result.getId());
            weatherStationWindDirectionTimeseriesObject.setRowVersion(0);
            weatherStationWindDirectionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1WeatherStationWindDirectionTimeseries( WeatherStationWindDirectionTimeseriesObject weatherStationWindDirectionTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWindDirectionTimeseriesObject.getId( );
        String name = weatherStationWindDirectionTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationWindDirectionTimeseriesObject.getMaxRetention( );
        var result = insert1WeatherStationWindDirectionTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationWindDirectionTimeseriesObject.setId( result.getId( ) );
            weatherStationWindDirectionTimeseriesObject.setRowVersion(0);
            weatherStationWindDirectionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateWeatherStationWindDirectionTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationWindDirectionTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1WeatherStationWindDirectionTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationWindDirectionTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2WeatherStationWindDirectionTimeseries( Guid id, long rowVersion, Guid catalog, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationWindDirectionTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateWeatherStationWindDirectionTimeseries( WeatherStationWindDirectionTimeseriesObject weatherStationWindDirectionTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWindDirectionTimeseriesObject.getId();
        long rowVersion = weatherStationWindDirectionTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationWindDirectionTimeseriesObject.getCatalog();
        String name = weatherStationWindDirectionTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationWindDirectionTimeseriesObject.getMaxRetention();
        Guid weatherStation = weatherStationWindDirectionTimeseriesObject.getWeatherStation();
        var result = updateWeatherStationWindDirectionTimeseries( id, rowVersion, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationWindDirectionTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationWindDirectionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1WeatherStationWindDirectionTimeseries( WeatherStationWindDirectionTimeseriesObject weatherStationWindDirectionTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWindDirectionTimeseriesObject.getId();
        long rowVersion = weatherStationWindDirectionTimeseriesObject.getRowVersion();
        String name = weatherStationWindDirectionTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationWindDirectionTimeseriesObject.getMaxRetention();
        var result = update1WeatherStationWindDirectionTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationWindDirectionTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationWindDirectionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2WeatherStationWindDirectionTimeseries( WeatherStationWindDirectionTimeseriesObject weatherStationWindDirectionTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWindDirectionTimeseriesObject.getId();
        long rowVersion = weatherStationWindDirectionTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationWindDirectionTimeseriesObject.getCatalog();
        Guid weatherStation = weatherStationWindDirectionTimeseriesObject.getWeatherStation();
        var result = update2WeatherStationWindDirectionTimeseries( id, rowVersion, catalog, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationWindDirectionTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationWindDirectionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteWeatherStationWindDirectionTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call WeatherStationWindDirectionTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteWeatherStationWindDirectionTimeseries( WeatherStationWindDirectionTimeseriesObject weatherStationWindDirectionTimeseriesObject ) throws SQLException {
        var id = weatherStationWindDirectionTimeseriesObject.getId( );
        var rowVersion = weatherStationWindDirectionTimeseriesObject.getRowVersion();
        var result = deleteWeatherStationWindDirectionTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertWeatherStationWindSpeedTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationWindSpeedTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1WeatherStationWindSpeedTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationWindSpeedTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertWeatherStationWindSpeedTimeseries( WeatherStationWindSpeedTimeseriesObject weatherStationWindSpeedTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWindSpeedTimeseriesObject.getId( );
        Guid catalog = weatherStationWindSpeedTimeseriesObject.getCatalog( );
        String name = weatherStationWindSpeedTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationWindSpeedTimeseriesObject.getMaxRetention( );
        Guid weatherStation = weatherStationWindSpeedTimeseriesObject.getWeatherStation( );
        var result = insertWeatherStationWindSpeedTimeseries( id, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess() ) {
            weatherStationWindSpeedTimeseriesObject.setId(result.getId());
            weatherStationWindSpeedTimeseriesObject.setRowVersion(0);
            weatherStationWindSpeedTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1WeatherStationWindSpeedTimeseries( WeatherStationWindSpeedTimeseriesObject weatherStationWindSpeedTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWindSpeedTimeseriesObject.getId( );
        String name = weatherStationWindSpeedTimeseriesObject.getName( );
        TimeSpan maxRetention = weatherStationWindSpeedTimeseriesObject.getMaxRetention( );
        var result = insert1WeatherStationWindSpeedTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationWindSpeedTimeseriesObject.setId( result.getId( ) );
            weatherStationWindSpeedTimeseriesObject.setRowVersion(0);
            weatherStationWindSpeedTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateWeatherStationWindSpeedTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationWindSpeedTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1WeatherStationWindSpeedTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationWindSpeedTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2WeatherStationWindSpeedTimeseries( Guid id, long rowVersion, Guid catalog, Guid weatherStation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationWindSpeedTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, weatherStation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateWeatherStationWindSpeedTimeseries( WeatherStationWindSpeedTimeseriesObject weatherStationWindSpeedTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWindSpeedTimeseriesObject.getId();
        long rowVersion = weatherStationWindSpeedTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationWindSpeedTimeseriesObject.getCatalog();
        String name = weatherStationWindSpeedTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationWindSpeedTimeseriesObject.getMaxRetention();
        Guid weatherStation = weatherStationWindSpeedTimeseriesObject.getWeatherStation();
        var result = updateWeatherStationWindSpeedTimeseries( id, rowVersion, catalog, name, maxRetention, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationWindSpeedTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationWindSpeedTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1WeatherStationWindSpeedTimeseries( WeatherStationWindSpeedTimeseriesObject weatherStationWindSpeedTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWindSpeedTimeseriesObject.getId();
        long rowVersion = weatherStationWindSpeedTimeseriesObject.getRowVersion();
        String name = weatherStationWindSpeedTimeseriesObject.getName();
        TimeSpan maxRetention = weatherStationWindSpeedTimeseriesObject.getMaxRetention();
        var result = update1WeatherStationWindSpeedTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            weatherStationWindSpeedTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationWindSpeedTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2WeatherStationWindSpeedTimeseries( WeatherStationWindSpeedTimeseriesObject weatherStationWindSpeedTimeseriesObject ) throws SQLException {
        Guid id = weatherStationWindSpeedTimeseriesObject.getId();
        long rowVersion = weatherStationWindSpeedTimeseriesObject.getRowVersion();
        Guid catalog = weatherStationWindSpeedTimeseriesObject.getCatalog();
        Guid weatherStation = weatherStationWindSpeedTimeseriesObject.getWeatherStation();
        var result = update2WeatherStationWindSpeedTimeseries( id, rowVersion, catalog, weatherStation );
        if( result.isSuccess( ) ) {
            weatherStationWindSpeedTimeseriesObject.setRowVersion(result.getRowVersion());
            weatherStationWindSpeedTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteWeatherStationWindSpeedTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call WeatherStationWindSpeedTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteWeatherStationWindSpeedTimeseries( WeatherStationWindSpeedTimeseriesObject weatherStationWindSpeedTimeseriesObject ) throws SQLException {
        var id = weatherStationWindSpeedTimeseriesObject.getId( );
        var rowVersion = weatherStationWindSpeedTimeseriesObject.getRowVersion();
        var result = deleteWeatherStationWindSpeedTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGeoPosition2DTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GeoPosition2DTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GeoPosition2DTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GeoPosition2DTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGeoPosition2DTimeseries( GeoPosition2DTimeseriesObject geoPosition2DTimeseriesObject ) throws SQLException {
        Guid id = geoPosition2DTimeseriesObject.getId( );
        Guid catalog = geoPosition2DTimeseriesObject.getCatalog( );
        String name = geoPosition2DTimeseriesObject.getName( );
        TimeSpan maxRetention = geoPosition2DTimeseriesObject.getMaxRetention( );
        var result = insertGeoPosition2DTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            geoPosition2DTimeseriesObject.setId(result.getId());
            geoPosition2DTimeseriesObject.setRowVersion(0);
            geoPosition2DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GeoPosition2DTimeseries( GeoPosition2DTimeseriesObject geoPosition2DTimeseriesObject ) throws SQLException {
        Guid id = geoPosition2DTimeseriesObject.getId( );
        String name = geoPosition2DTimeseriesObject.getName( );
        TimeSpan maxRetention = geoPosition2DTimeseriesObject.getMaxRetention( );
        var result = insert1GeoPosition2DTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            geoPosition2DTimeseriesObject.setId( result.getId( ) );
            geoPosition2DTimeseriesObject.setRowVersion(0);
            geoPosition2DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGeoPosition2DTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GeoPosition2DTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GeoPosition2DTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GeoPosition2DTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GeoPosition2DTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GeoPosition2DTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGeoPosition2DTimeseries( GeoPosition2DTimeseriesObject geoPosition2DTimeseriesObject ) throws SQLException {
        Guid id = geoPosition2DTimeseriesObject.getId();
        long rowVersion = geoPosition2DTimeseriesObject.getRowVersion();
        Guid catalog = geoPosition2DTimeseriesObject.getCatalog();
        String name = geoPosition2DTimeseriesObject.getName();
        TimeSpan maxRetention = geoPosition2DTimeseriesObject.getMaxRetention();
        var result = updateGeoPosition2DTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            geoPosition2DTimeseriesObject.setRowVersion(result.getRowVersion());
            geoPosition2DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GeoPosition2DTimeseries( GeoPosition2DTimeseriesObject geoPosition2DTimeseriesObject ) throws SQLException {
        Guid id = geoPosition2DTimeseriesObject.getId();
        long rowVersion = geoPosition2DTimeseriesObject.getRowVersion();
        String name = geoPosition2DTimeseriesObject.getName();
        TimeSpan maxRetention = geoPosition2DTimeseriesObject.getMaxRetention();
        var result = update1GeoPosition2DTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            geoPosition2DTimeseriesObject.setRowVersion(result.getRowVersion());
            geoPosition2DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GeoPosition2DTimeseries( GeoPosition2DTimeseriesObject geoPosition2DTimeseriesObject ) throws SQLException {
        Guid id = geoPosition2DTimeseriesObject.getId();
        long rowVersion = geoPosition2DTimeseriesObject.getRowVersion();
        Guid catalog = geoPosition2DTimeseriesObject.getCatalog();
        var result = update2GeoPosition2DTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            geoPosition2DTimeseriesObject.setRowVersion(result.getRowVersion());
            geoPosition2DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGeoPosition2DTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GeoPosition2DTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGeoPosition2DTimeseries( GeoPosition2DTimeseriesObject geoPosition2DTimeseriesObject ) throws SQLException {
        var id = geoPosition2DTimeseriesObject.getId( );
        var rowVersion = geoPosition2DTimeseriesObject.getRowVersion();
        var result = deleteGeoPosition2DTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertAisAidToNavigationPositionTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid aidToNavigation ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisAidToNavigationPositionTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, aidToNavigation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1AisAidToNavigationPositionTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call AisAidToNavigationPositionTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertAisAidToNavigationPositionTimeseries( AisAidToNavigationPositionTimeseriesObject aisAidToNavigationPositionTimeseriesObject ) throws SQLException {
        Guid id = aisAidToNavigationPositionTimeseriesObject.getId( );
        Guid catalog = aisAidToNavigationPositionTimeseriesObject.getCatalog( );
        String name = aisAidToNavigationPositionTimeseriesObject.getName( );
        TimeSpan maxRetention = aisAidToNavigationPositionTimeseriesObject.getMaxRetention( );
        Guid aidToNavigation = aisAidToNavigationPositionTimeseriesObject.getAidToNavigation( );
        var result = insertAisAidToNavigationPositionTimeseries( id, catalog, name, maxRetention, aidToNavigation );
        if( result.isSuccess() ) {
            aisAidToNavigationPositionTimeseriesObject.setId(result.getId());
            aisAidToNavigationPositionTimeseriesObject.setRowVersion(0);
            aisAidToNavigationPositionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1AisAidToNavigationPositionTimeseries( AisAidToNavigationPositionTimeseriesObject aisAidToNavigationPositionTimeseriesObject ) throws SQLException {
        Guid id = aisAidToNavigationPositionTimeseriesObject.getId( );
        String name = aisAidToNavigationPositionTimeseriesObject.getName( );
        TimeSpan maxRetention = aisAidToNavigationPositionTimeseriesObject.getMaxRetention( );
        var result = insert1AisAidToNavigationPositionTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            aisAidToNavigationPositionTimeseriesObject.setId( result.getId( ) );
            aisAidToNavigationPositionTimeseriesObject.setRowVersion(0);
            aisAidToNavigationPositionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateAisAidToNavigationPositionTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid aidToNavigation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisAidToNavigationPositionTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, aidToNavigation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1AisAidToNavigationPositionTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisAidToNavigationPositionTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2AisAidToNavigationPositionTimeseries( Guid id, long rowVersion, Guid catalog, Guid aidToNavigation ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call AisAidToNavigationPositionTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, aidToNavigation);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateAisAidToNavigationPositionTimeseries( AisAidToNavigationPositionTimeseriesObject aisAidToNavigationPositionTimeseriesObject ) throws SQLException {
        Guid id = aisAidToNavigationPositionTimeseriesObject.getId();
        long rowVersion = aisAidToNavigationPositionTimeseriesObject.getRowVersion();
        Guid catalog = aisAidToNavigationPositionTimeseriesObject.getCatalog();
        String name = aisAidToNavigationPositionTimeseriesObject.getName();
        TimeSpan maxRetention = aisAidToNavigationPositionTimeseriesObject.getMaxRetention();
        Guid aidToNavigation = aisAidToNavigationPositionTimeseriesObject.getAidToNavigation();
        var result = updateAisAidToNavigationPositionTimeseries( id, rowVersion, catalog, name, maxRetention, aidToNavigation );
        if( result.isSuccess( ) ) {
            aisAidToNavigationPositionTimeseriesObject.setRowVersion(result.getRowVersion());
            aisAidToNavigationPositionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1AisAidToNavigationPositionTimeseries( AisAidToNavigationPositionTimeseriesObject aisAidToNavigationPositionTimeseriesObject ) throws SQLException {
        Guid id = aisAidToNavigationPositionTimeseriesObject.getId();
        long rowVersion = aisAidToNavigationPositionTimeseriesObject.getRowVersion();
        String name = aisAidToNavigationPositionTimeseriesObject.getName();
        TimeSpan maxRetention = aisAidToNavigationPositionTimeseriesObject.getMaxRetention();
        var result = update1AisAidToNavigationPositionTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            aisAidToNavigationPositionTimeseriesObject.setRowVersion(result.getRowVersion());
            aisAidToNavigationPositionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2AisAidToNavigationPositionTimeseries( AisAidToNavigationPositionTimeseriesObject aisAidToNavigationPositionTimeseriesObject ) throws SQLException {
        Guid id = aisAidToNavigationPositionTimeseriesObject.getId();
        long rowVersion = aisAidToNavigationPositionTimeseriesObject.getRowVersion();
        Guid catalog = aisAidToNavigationPositionTimeseriesObject.getCatalog();
        Guid aidToNavigation = aisAidToNavigationPositionTimeseriesObject.getAidToNavigation();
        var result = update2AisAidToNavigationPositionTimeseries( id, rowVersion, catalog, aidToNavigation );
        if( result.isSuccess( ) ) {
            aisAidToNavigationPositionTimeseriesObject.setRowVersion(result.getRowVersion());
            aisAidToNavigationPositionTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteAisAidToNavigationPositionTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call AisAidToNavigationPositionTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteAisAidToNavigationPositionTimeseries( AisAidToNavigationPositionTimeseriesObject aisAidToNavigationPositionTimeseriesObject ) throws SQLException {
        var id = aisAidToNavigationPositionTimeseriesObject.getId( );
        var rowVersion = aisAidToNavigationPositionTimeseriesObject.getRowVersion();
        var result = deleteAisAidToNavigationPositionTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGeoPosition3DTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GeoPosition3DTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GeoPosition3DTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GeoPosition3DTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGeoPosition3DTimeseries( GeoPosition3DTimeseriesObject geoPosition3DTimeseriesObject ) throws SQLException {
        Guid id = geoPosition3DTimeseriesObject.getId( );
        Guid catalog = geoPosition3DTimeseriesObject.getCatalog( );
        String name = geoPosition3DTimeseriesObject.getName( );
        TimeSpan maxRetention = geoPosition3DTimeseriesObject.getMaxRetention( );
        var result = insertGeoPosition3DTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            geoPosition3DTimeseriesObject.setId(result.getId());
            geoPosition3DTimeseriesObject.setRowVersion(0);
            geoPosition3DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GeoPosition3DTimeseries( GeoPosition3DTimeseriesObject geoPosition3DTimeseriesObject ) throws SQLException {
        Guid id = geoPosition3DTimeseriesObject.getId( );
        String name = geoPosition3DTimeseriesObject.getName( );
        TimeSpan maxRetention = geoPosition3DTimeseriesObject.getMaxRetention( );
        var result = insert1GeoPosition3DTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            geoPosition3DTimeseriesObject.setId( result.getId( ) );
            geoPosition3DTimeseriesObject.setRowVersion(0);
            geoPosition3DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGeoPosition3DTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GeoPosition3DTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GeoPosition3DTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GeoPosition3DTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GeoPosition3DTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GeoPosition3DTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGeoPosition3DTimeseries( GeoPosition3DTimeseriesObject geoPosition3DTimeseriesObject ) throws SQLException {
        Guid id = geoPosition3DTimeseriesObject.getId();
        long rowVersion = geoPosition3DTimeseriesObject.getRowVersion();
        Guid catalog = geoPosition3DTimeseriesObject.getCatalog();
        String name = geoPosition3DTimeseriesObject.getName();
        TimeSpan maxRetention = geoPosition3DTimeseriesObject.getMaxRetention();
        var result = updateGeoPosition3DTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            geoPosition3DTimeseriesObject.setRowVersion(result.getRowVersion());
            geoPosition3DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GeoPosition3DTimeseries( GeoPosition3DTimeseriesObject geoPosition3DTimeseriesObject ) throws SQLException {
        Guid id = geoPosition3DTimeseriesObject.getId();
        long rowVersion = geoPosition3DTimeseriesObject.getRowVersion();
        String name = geoPosition3DTimeseriesObject.getName();
        TimeSpan maxRetention = geoPosition3DTimeseriesObject.getMaxRetention();
        var result = update1GeoPosition3DTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            geoPosition3DTimeseriesObject.setRowVersion(result.getRowVersion());
            geoPosition3DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GeoPosition3DTimeseries( GeoPosition3DTimeseriesObject geoPosition3DTimeseriesObject ) throws SQLException {
        Guid id = geoPosition3DTimeseriesObject.getId();
        long rowVersion = geoPosition3DTimeseriesObject.getRowVersion();
        Guid catalog = geoPosition3DTimeseriesObject.getCatalog();
        var result = update2GeoPosition3DTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            geoPosition3DTimeseriesObject.setRowVersion(result.getRowVersion());
            geoPosition3DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGeoPosition3DTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GeoPosition3DTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGeoPosition3DTimeseries( GeoPosition3DTimeseriesObject geoPosition3DTimeseriesObject ) throws SQLException {
        var id = geoPosition3DTimeseriesObject.getId( );
        var rowVersion = geoPosition3DTimeseriesObject.getRowVersion();
        var result = deleteGeoPosition3DTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertGuidTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GuidTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1GuidTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call GuidTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertGuidTimeseries( GuidTimeseriesObject guidTimeseriesObject ) throws SQLException {
        Guid id = guidTimeseriesObject.getId( );
        Guid catalog = guidTimeseriesObject.getCatalog( );
        String name = guidTimeseriesObject.getName( );
        TimeSpan maxRetention = guidTimeseriesObject.getMaxRetention( );
        var result = insertGuidTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            guidTimeseriesObject.setId(result.getId());
            guidTimeseriesObject.setRowVersion(0);
            guidTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1GuidTimeseries( GuidTimeseriesObject guidTimeseriesObject ) throws SQLException {
        Guid id = guidTimeseriesObject.getId( );
        String name = guidTimeseriesObject.getName( );
        TimeSpan maxRetention = guidTimeseriesObject.getMaxRetention( );
        var result = insert1GuidTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            guidTimeseriesObject.setId( result.getId( ) );
            guidTimeseriesObject.setRowVersion(0);
            guidTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateGuidTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GuidTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1GuidTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GuidTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2GuidTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call GuidTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateGuidTimeseries( GuidTimeseriesObject guidTimeseriesObject ) throws SQLException {
        Guid id = guidTimeseriesObject.getId();
        long rowVersion = guidTimeseriesObject.getRowVersion();
        Guid catalog = guidTimeseriesObject.getCatalog();
        String name = guidTimeseriesObject.getName();
        TimeSpan maxRetention = guidTimeseriesObject.getMaxRetention();
        var result = updateGuidTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            guidTimeseriesObject.setRowVersion(result.getRowVersion());
            guidTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1GuidTimeseries( GuidTimeseriesObject guidTimeseriesObject ) throws SQLException {
        Guid id = guidTimeseriesObject.getId();
        long rowVersion = guidTimeseriesObject.getRowVersion();
        String name = guidTimeseriesObject.getName();
        TimeSpan maxRetention = guidTimeseriesObject.getMaxRetention();
        var result = update1GuidTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            guidTimeseriesObject.setRowVersion(result.getRowVersion());
            guidTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2GuidTimeseries( GuidTimeseriesObject guidTimeseriesObject ) throws SQLException {
        Guid id = guidTimeseriesObject.getId();
        long rowVersion = guidTimeseriesObject.getRowVersion();
        Guid catalog = guidTimeseriesObject.getCatalog();
        var result = update2GuidTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            guidTimeseriesObject.setRowVersion(result.getRowVersion());
            guidTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteGuidTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call GuidTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteGuidTimeseries( GuidTimeseriesObject guidTimeseriesObject ) throws SQLException {
        var id = guidTimeseriesObject.getId( );
        var rowVersion = guidTimeseriesObject.getRowVersion();
        var result = deleteGuidTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt16Timeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int16TimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Int16Timeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int16TimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt16Timeseries( Int16TimeseriesObject int16TimeseriesObject ) throws SQLException {
        Guid id = int16TimeseriesObject.getId( );
        Guid catalog = int16TimeseriesObject.getCatalog( );
        String name = int16TimeseriesObject.getName( );
        TimeSpan maxRetention = int16TimeseriesObject.getMaxRetention( );
        var result = insertInt16Timeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            int16TimeseriesObject.setId(result.getId());
            int16TimeseriesObject.setRowVersion(0);
            int16TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Int16Timeseries( Int16TimeseriesObject int16TimeseriesObject ) throws SQLException {
        Guid id = int16TimeseriesObject.getId( );
        String name = int16TimeseriesObject.getName( );
        TimeSpan maxRetention = int16TimeseriesObject.getMaxRetention( );
        var result = insert1Int16Timeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            int16TimeseriesObject.setId( result.getId( ) );
            int16TimeseriesObject.setRowVersion(0);
            int16TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateInt16Timeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int16TimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Int16Timeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int16TimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Int16Timeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int16TimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt16Timeseries( Int16TimeseriesObject int16TimeseriesObject ) throws SQLException {
        Guid id = int16TimeseriesObject.getId();
        long rowVersion = int16TimeseriesObject.getRowVersion();
        Guid catalog = int16TimeseriesObject.getCatalog();
        String name = int16TimeseriesObject.getName();
        TimeSpan maxRetention = int16TimeseriesObject.getMaxRetention();
        var result = updateInt16Timeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            int16TimeseriesObject.setRowVersion(result.getRowVersion());
            int16TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Int16Timeseries( Int16TimeseriesObject int16TimeseriesObject ) throws SQLException {
        Guid id = int16TimeseriesObject.getId();
        long rowVersion = int16TimeseriesObject.getRowVersion();
        String name = int16TimeseriesObject.getName();
        TimeSpan maxRetention = int16TimeseriesObject.getMaxRetention();
        var result = update1Int16Timeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            int16TimeseriesObject.setRowVersion(result.getRowVersion());
            int16TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Int16Timeseries( Int16TimeseriesObject int16TimeseriesObject ) throws SQLException {
        Guid id = int16TimeseriesObject.getId();
        long rowVersion = int16TimeseriesObject.getRowVersion();
        Guid catalog = int16TimeseriesObject.getCatalog();
        var result = update2Int16Timeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            int16TimeseriesObject.setRowVersion(result.getRowVersion());
            int16TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt16Timeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int16TimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt16Timeseries( Int16TimeseriesObject int16TimeseriesObject ) throws SQLException {
        var id = int16TimeseriesObject.getId( );
        var rowVersion = int16TimeseriesObject.getRowVersion();
        var result = deleteInt16Timeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt32Timeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int32TimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Int32Timeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int32TimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt32Timeseries( Int32TimeseriesObject int32TimeseriesObject ) throws SQLException {
        Guid id = int32TimeseriesObject.getId( );
        Guid catalog = int32TimeseriesObject.getCatalog( );
        String name = int32TimeseriesObject.getName( );
        TimeSpan maxRetention = int32TimeseriesObject.getMaxRetention( );
        var result = insertInt32Timeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            int32TimeseriesObject.setId(result.getId());
            int32TimeseriesObject.setRowVersion(0);
            int32TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Int32Timeseries( Int32TimeseriesObject int32TimeseriesObject ) throws SQLException {
        Guid id = int32TimeseriesObject.getId( );
        String name = int32TimeseriesObject.getName( );
        TimeSpan maxRetention = int32TimeseriesObject.getMaxRetention( );
        var result = insert1Int32Timeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            int32TimeseriesObject.setId( result.getId( ) );
            int32TimeseriesObject.setRowVersion(0);
            int32TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateInt32Timeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int32TimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Int32Timeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int32TimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Int32Timeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int32TimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt32Timeseries( Int32TimeseriesObject int32TimeseriesObject ) throws SQLException {
        Guid id = int32TimeseriesObject.getId();
        long rowVersion = int32TimeseriesObject.getRowVersion();
        Guid catalog = int32TimeseriesObject.getCatalog();
        String name = int32TimeseriesObject.getName();
        TimeSpan maxRetention = int32TimeseriesObject.getMaxRetention();
        var result = updateInt32Timeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            int32TimeseriesObject.setRowVersion(result.getRowVersion());
            int32TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Int32Timeseries( Int32TimeseriesObject int32TimeseriesObject ) throws SQLException {
        Guid id = int32TimeseriesObject.getId();
        long rowVersion = int32TimeseriesObject.getRowVersion();
        String name = int32TimeseriesObject.getName();
        TimeSpan maxRetention = int32TimeseriesObject.getMaxRetention();
        var result = update1Int32Timeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            int32TimeseriesObject.setRowVersion(result.getRowVersion());
            int32TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Int32Timeseries( Int32TimeseriesObject int32TimeseriesObject ) throws SQLException {
        Guid id = int32TimeseriesObject.getId();
        long rowVersion = int32TimeseriesObject.getRowVersion();
        Guid catalog = int32TimeseriesObject.getCatalog();
        var result = update2Int32Timeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            int32TimeseriesObject.setRowVersion(result.getRowVersion());
            int32TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt32Timeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int32TimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt32Timeseries( Int32TimeseriesObject int32TimeseriesObject ) throws SQLException {
        var id = int32TimeseriesObject.getId( );
        var rowVersion = int32TimeseriesObject.getRowVersion();
        var result = deleteInt32Timeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarAzimuthOffsetTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarAzimuthOffsetTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarAzimuthOffsetTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarAzimuthOffsetTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarAzimuthOffsetTimeseries( RadarAzimuthOffsetTimeseriesObject radarAzimuthOffsetTimeseriesObject ) throws SQLException {
        Guid id = radarAzimuthOffsetTimeseriesObject.getId( );
        Guid catalog = radarAzimuthOffsetTimeseriesObject.getCatalog( );
        String name = radarAzimuthOffsetTimeseriesObject.getName( );
        TimeSpan maxRetention = radarAzimuthOffsetTimeseriesObject.getMaxRetention( );
        Guid radar = radarAzimuthOffsetTimeseriesObject.getRadar( );
        var result = insertRadarAzimuthOffsetTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarAzimuthOffsetTimeseriesObject.setId(result.getId());
            radarAzimuthOffsetTimeseriesObject.setRowVersion(0);
            radarAzimuthOffsetTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarAzimuthOffsetTimeseries( RadarAzimuthOffsetTimeseriesObject radarAzimuthOffsetTimeseriesObject ) throws SQLException {
        Guid id = radarAzimuthOffsetTimeseriesObject.getId( );
        String name = radarAzimuthOffsetTimeseriesObject.getName( );
        TimeSpan maxRetention = radarAzimuthOffsetTimeseriesObject.getMaxRetention( );
        var result = insert1RadarAzimuthOffsetTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarAzimuthOffsetTimeseriesObject.setId( result.getId( ) );
            radarAzimuthOffsetTimeseriesObject.setRowVersion(0);
            radarAzimuthOffsetTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarAzimuthOffsetTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarAzimuthOffsetTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarAzimuthOffsetTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarAzimuthOffsetTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarAzimuthOffsetTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarAzimuthOffsetTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarAzimuthOffsetTimeseries( RadarAzimuthOffsetTimeseriesObject radarAzimuthOffsetTimeseriesObject ) throws SQLException {
        Guid id = radarAzimuthOffsetTimeseriesObject.getId();
        long rowVersion = radarAzimuthOffsetTimeseriesObject.getRowVersion();
        Guid catalog = radarAzimuthOffsetTimeseriesObject.getCatalog();
        String name = radarAzimuthOffsetTimeseriesObject.getName();
        TimeSpan maxRetention = radarAzimuthOffsetTimeseriesObject.getMaxRetention();
        Guid radar = radarAzimuthOffsetTimeseriesObject.getRadar();
        var result = updateRadarAzimuthOffsetTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarAzimuthOffsetTimeseriesObject.setRowVersion(result.getRowVersion());
            radarAzimuthOffsetTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarAzimuthOffsetTimeseries( RadarAzimuthOffsetTimeseriesObject radarAzimuthOffsetTimeseriesObject ) throws SQLException {
        Guid id = radarAzimuthOffsetTimeseriesObject.getId();
        long rowVersion = radarAzimuthOffsetTimeseriesObject.getRowVersion();
        String name = radarAzimuthOffsetTimeseriesObject.getName();
        TimeSpan maxRetention = radarAzimuthOffsetTimeseriesObject.getMaxRetention();
        var result = update1RadarAzimuthOffsetTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarAzimuthOffsetTimeseriesObject.setRowVersion(result.getRowVersion());
            radarAzimuthOffsetTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarAzimuthOffsetTimeseries( RadarAzimuthOffsetTimeseriesObject radarAzimuthOffsetTimeseriesObject ) throws SQLException {
        Guid id = radarAzimuthOffsetTimeseriesObject.getId();
        long rowVersion = radarAzimuthOffsetTimeseriesObject.getRowVersion();
        Guid catalog = radarAzimuthOffsetTimeseriesObject.getCatalog();
        Guid radar = radarAzimuthOffsetTimeseriesObject.getRadar();
        var result = update2RadarAzimuthOffsetTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarAzimuthOffsetTimeseriesObject.setRowVersion(result.getRowVersion());
            radarAzimuthOffsetTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarAzimuthOffsetTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarAzimuthOffsetTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarAzimuthOffsetTimeseries( RadarAzimuthOffsetTimeseriesObject radarAzimuthOffsetTimeseriesObject ) throws SQLException {
        var id = radarAzimuthOffsetTimeseriesObject.getId( );
        var rowVersion = radarAzimuthOffsetTimeseriesObject.getRowVersion();
        var result = deleteRadarAzimuthOffsetTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarFastTimeConstantLevelTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarFastTimeConstantLevelTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarFastTimeConstantLevelTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarFastTimeConstantLevelTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarFastTimeConstantLevelTimeseries( RadarFastTimeConstantLevelTimeseriesObject radarFastTimeConstantLevelTimeseriesObject ) throws SQLException {
        Guid id = radarFastTimeConstantLevelTimeseriesObject.getId( );
        Guid catalog = radarFastTimeConstantLevelTimeseriesObject.getCatalog( );
        String name = radarFastTimeConstantLevelTimeseriesObject.getName( );
        TimeSpan maxRetention = radarFastTimeConstantLevelTimeseriesObject.getMaxRetention( );
        Guid radar = radarFastTimeConstantLevelTimeseriesObject.getRadar( );
        var result = insertRadarFastTimeConstantLevelTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarFastTimeConstantLevelTimeseriesObject.setId(result.getId());
            radarFastTimeConstantLevelTimeseriesObject.setRowVersion(0);
            radarFastTimeConstantLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarFastTimeConstantLevelTimeseries( RadarFastTimeConstantLevelTimeseriesObject radarFastTimeConstantLevelTimeseriesObject ) throws SQLException {
        Guid id = radarFastTimeConstantLevelTimeseriesObject.getId( );
        String name = radarFastTimeConstantLevelTimeseriesObject.getName( );
        TimeSpan maxRetention = radarFastTimeConstantLevelTimeseriesObject.getMaxRetention( );
        var result = insert1RadarFastTimeConstantLevelTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarFastTimeConstantLevelTimeseriesObject.setId( result.getId( ) );
            radarFastTimeConstantLevelTimeseriesObject.setRowVersion(0);
            radarFastTimeConstantLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarFastTimeConstantLevelTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarFastTimeConstantLevelTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarFastTimeConstantLevelTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarFastTimeConstantLevelTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarFastTimeConstantLevelTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarFastTimeConstantLevelTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarFastTimeConstantLevelTimeseries( RadarFastTimeConstantLevelTimeseriesObject radarFastTimeConstantLevelTimeseriesObject ) throws SQLException {
        Guid id = radarFastTimeConstantLevelTimeseriesObject.getId();
        long rowVersion = radarFastTimeConstantLevelTimeseriesObject.getRowVersion();
        Guid catalog = radarFastTimeConstantLevelTimeseriesObject.getCatalog();
        String name = radarFastTimeConstantLevelTimeseriesObject.getName();
        TimeSpan maxRetention = radarFastTimeConstantLevelTimeseriesObject.getMaxRetention();
        Guid radar = radarFastTimeConstantLevelTimeseriesObject.getRadar();
        var result = updateRadarFastTimeConstantLevelTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarFastTimeConstantLevelTimeseriesObject.setRowVersion(result.getRowVersion());
            radarFastTimeConstantLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarFastTimeConstantLevelTimeseries( RadarFastTimeConstantLevelTimeseriesObject radarFastTimeConstantLevelTimeseriesObject ) throws SQLException {
        Guid id = radarFastTimeConstantLevelTimeseriesObject.getId();
        long rowVersion = radarFastTimeConstantLevelTimeseriesObject.getRowVersion();
        String name = radarFastTimeConstantLevelTimeseriesObject.getName();
        TimeSpan maxRetention = radarFastTimeConstantLevelTimeseriesObject.getMaxRetention();
        var result = update1RadarFastTimeConstantLevelTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarFastTimeConstantLevelTimeseriesObject.setRowVersion(result.getRowVersion());
            radarFastTimeConstantLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarFastTimeConstantLevelTimeseries( RadarFastTimeConstantLevelTimeseriesObject radarFastTimeConstantLevelTimeseriesObject ) throws SQLException {
        Guid id = radarFastTimeConstantLevelTimeseriesObject.getId();
        long rowVersion = radarFastTimeConstantLevelTimeseriesObject.getRowVersion();
        Guid catalog = radarFastTimeConstantLevelTimeseriesObject.getCatalog();
        Guid radar = radarFastTimeConstantLevelTimeseriesObject.getRadar();
        var result = update2RadarFastTimeConstantLevelTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarFastTimeConstantLevelTimeseriesObject.setRowVersion(result.getRowVersion());
            radarFastTimeConstantLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarFastTimeConstantLevelTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarFastTimeConstantLevelTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarFastTimeConstantLevelTimeseries( RadarFastTimeConstantLevelTimeseriesObject radarFastTimeConstantLevelTimeseriesObject ) throws SQLException {
        var id = radarFastTimeConstantLevelTimeseriesObject.getId( );
        var rowVersion = radarFastTimeConstantLevelTimeseriesObject.getRowVersion();
        var result = deleteRadarFastTimeConstantLevelTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarFastTimeConstantModeTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarFastTimeConstantModeTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarFastTimeConstantModeTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarFastTimeConstantModeTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarFastTimeConstantModeTimeseries( RadarFastTimeConstantModeTimeseriesObject radarFastTimeConstantModeTimeseriesObject ) throws SQLException {
        Guid id = radarFastTimeConstantModeTimeseriesObject.getId( );
        Guid catalog = radarFastTimeConstantModeTimeseriesObject.getCatalog( );
        String name = radarFastTimeConstantModeTimeseriesObject.getName( );
        TimeSpan maxRetention = radarFastTimeConstantModeTimeseriesObject.getMaxRetention( );
        Guid radar = radarFastTimeConstantModeTimeseriesObject.getRadar( );
        var result = insertRadarFastTimeConstantModeTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarFastTimeConstantModeTimeseriesObject.setId(result.getId());
            radarFastTimeConstantModeTimeseriesObject.setRowVersion(0);
            radarFastTimeConstantModeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarFastTimeConstantModeTimeseries( RadarFastTimeConstantModeTimeseriesObject radarFastTimeConstantModeTimeseriesObject ) throws SQLException {
        Guid id = radarFastTimeConstantModeTimeseriesObject.getId( );
        String name = radarFastTimeConstantModeTimeseriesObject.getName( );
        TimeSpan maxRetention = radarFastTimeConstantModeTimeseriesObject.getMaxRetention( );
        var result = insert1RadarFastTimeConstantModeTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarFastTimeConstantModeTimeseriesObject.setId( result.getId( ) );
            radarFastTimeConstantModeTimeseriesObject.setRowVersion(0);
            radarFastTimeConstantModeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarFastTimeConstantModeTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarFastTimeConstantModeTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarFastTimeConstantModeTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarFastTimeConstantModeTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarFastTimeConstantModeTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarFastTimeConstantModeTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarFastTimeConstantModeTimeseries( RadarFastTimeConstantModeTimeseriesObject radarFastTimeConstantModeTimeseriesObject ) throws SQLException {
        Guid id = radarFastTimeConstantModeTimeseriesObject.getId();
        long rowVersion = radarFastTimeConstantModeTimeseriesObject.getRowVersion();
        Guid catalog = radarFastTimeConstantModeTimeseriesObject.getCatalog();
        String name = radarFastTimeConstantModeTimeseriesObject.getName();
        TimeSpan maxRetention = radarFastTimeConstantModeTimeseriesObject.getMaxRetention();
        Guid radar = radarFastTimeConstantModeTimeseriesObject.getRadar();
        var result = updateRadarFastTimeConstantModeTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarFastTimeConstantModeTimeseriesObject.setRowVersion(result.getRowVersion());
            radarFastTimeConstantModeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarFastTimeConstantModeTimeseries( RadarFastTimeConstantModeTimeseriesObject radarFastTimeConstantModeTimeseriesObject ) throws SQLException {
        Guid id = radarFastTimeConstantModeTimeseriesObject.getId();
        long rowVersion = radarFastTimeConstantModeTimeseriesObject.getRowVersion();
        String name = radarFastTimeConstantModeTimeseriesObject.getName();
        TimeSpan maxRetention = radarFastTimeConstantModeTimeseriesObject.getMaxRetention();
        var result = update1RadarFastTimeConstantModeTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarFastTimeConstantModeTimeseriesObject.setRowVersion(result.getRowVersion());
            radarFastTimeConstantModeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarFastTimeConstantModeTimeseries( RadarFastTimeConstantModeTimeseriesObject radarFastTimeConstantModeTimeseriesObject ) throws SQLException {
        Guid id = radarFastTimeConstantModeTimeseriesObject.getId();
        long rowVersion = radarFastTimeConstantModeTimeseriesObject.getRowVersion();
        Guid catalog = radarFastTimeConstantModeTimeseriesObject.getCatalog();
        Guid radar = radarFastTimeConstantModeTimeseriesObject.getRadar();
        var result = update2RadarFastTimeConstantModeTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarFastTimeConstantModeTimeseriesObject.setRowVersion(result.getRowVersion());
            radarFastTimeConstantModeTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarFastTimeConstantModeTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarFastTimeConstantModeTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarFastTimeConstantModeTimeseries( RadarFastTimeConstantModeTimeseriesObject radarFastTimeConstantModeTimeseriesObject ) throws SQLException {
        var id = radarFastTimeConstantModeTimeseriesObject.getId( );
        var rowVersion = radarFastTimeConstantModeTimeseriesObject.getRowVersion();
        var result = deleteRadarFastTimeConstantModeTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarPulseTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarPulseTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarPulseTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarPulseTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarPulseTimeseries( RadarPulseTimeseriesObject radarPulseTimeseriesObject ) throws SQLException {
        Guid id = radarPulseTimeseriesObject.getId( );
        Guid catalog = radarPulseTimeseriesObject.getCatalog( );
        String name = radarPulseTimeseriesObject.getName( );
        TimeSpan maxRetention = radarPulseTimeseriesObject.getMaxRetention( );
        Guid radar = radarPulseTimeseriesObject.getRadar( );
        var result = insertRadarPulseTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarPulseTimeseriesObject.setId(result.getId());
            radarPulseTimeseriesObject.setRowVersion(0);
            radarPulseTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarPulseTimeseries( RadarPulseTimeseriesObject radarPulseTimeseriesObject ) throws SQLException {
        Guid id = radarPulseTimeseriesObject.getId( );
        String name = radarPulseTimeseriesObject.getName( );
        TimeSpan maxRetention = radarPulseTimeseriesObject.getMaxRetention( );
        var result = insert1RadarPulseTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarPulseTimeseriesObject.setId( result.getId( ) );
            radarPulseTimeseriesObject.setRowVersion(0);
            radarPulseTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarPulseTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarPulseTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarPulseTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarPulseTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarPulseTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarPulseTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarPulseTimeseries( RadarPulseTimeseriesObject radarPulseTimeseriesObject ) throws SQLException {
        Guid id = radarPulseTimeseriesObject.getId();
        long rowVersion = radarPulseTimeseriesObject.getRowVersion();
        Guid catalog = radarPulseTimeseriesObject.getCatalog();
        String name = radarPulseTimeseriesObject.getName();
        TimeSpan maxRetention = radarPulseTimeseriesObject.getMaxRetention();
        Guid radar = radarPulseTimeseriesObject.getRadar();
        var result = updateRadarPulseTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarPulseTimeseriesObject.setRowVersion(result.getRowVersion());
            radarPulseTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarPulseTimeseries( RadarPulseTimeseriesObject radarPulseTimeseriesObject ) throws SQLException {
        Guid id = radarPulseTimeseriesObject.getId();
        long rowVersion = radarPulseTimeseriesObject.getRowVersion();
        String name = radarPulseTimeseriesObject.getName();
        TimeSpan maxRetention = radarPulseTimeseriesObject.getMaxRetention();
        var result = update1RadarPulseTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarPulseTimeseriesObject.setRowVersion(result.getRowVersion());
            radarPulseTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarPulseTimeseries( RadarPulseTimeseriesObject radarPulseTimeseriesObject ) throws SQLException {
        Guid id = radarPulseTimeseriesObject.getId();
        long rowVersion = radarPulseTimeseriesObject.getRowVersion();
        Guid catalog = radarPulseTimeseriesObject.getCatalog();
        Guid radar = radarPulseTimeseriesObject.getRadar();
        var result = update2RadarPulseTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarPulseTimeseriesObject.setRowVersion(result.getRowVersion());
            radarPulseTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarPulseTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarPulseTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarPulseTimeseries( RadarPulseTimeseriesObject radarPulseTimeseriesObject ) throws SQLException {
        var id = radarPulseTimeseriesObject.getId( );
        var rowVersion = radarPulseTimeseriesObject.getRowVersion();
        var result = deleteRadarPulseTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarSector1EndTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarSector1EndTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarSector1EndTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarSector1EndTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarSector1EndTimeseries( RadarSector1EndTimeseriesObject radarSector1EndTimeseriesObject ) throws SQLException {
        Guid id = radarSector1EndTimeseriesObject.getId( );
        Guid catalog = radarSector1EndTimeseriesObject.getCatalog( );
        String name = radarSector1EndTimeseriesObject.getName( );
        TimeSpan maxRetention = radarSector1EndTimeseriesObject.getMaxRetention( );
        Guid radar = radarSector1EndTimeseriesObject.getRadar( );
        var result = insertRadarSector1EndTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarSector1EndTimeseriesObject.setId(result.getId());
            radarSector1EndTimeseriesObject.setRowVersion(0);
            radarSector1EndTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarSector1EndTimeseries( RadarSector1EndTimeseriesObject radarSector1EndTimeseriesObject ) throws SQLException {
        Guid id = radarSector1EndTimeseriesObject.getId( );
        String name = radarSector1EndTimeseriesObject.getName( );
        TimeSpan maxRetention = radarSector1EndTimeseriesObject.getMaxRetention( );
        var result = insert1RadarSector1EndTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarSector1EndTimeseriesObject.setId( result.getId( ) );
            radarSector1EndTimeseriesObject.setRowVersion(0);
            radarSector1EndTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarSector1EndTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSector1EndTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarSector1EndTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSector1EndTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarSector1EndTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSector1EndTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarSector1EndTimeseries( RadarSector1EndTimeseriesObject radarSector1EndTimeseriesObject ) throws SQLException {
        Guid id = radarSector1EndTimeseriesObject.getId();
        long rowVersion = radarSector1EndTimeseriesObject.getRowVersion();
        Guid catalog = radarSector1EndTimeseriesObject.getCatalog();
        String name = radarSector1EndTimeseriesObject.getName();
        TimeSpan maxRetention = radarSector1EndTimeseriesObject.getMaxRetention();
        Guid radar = radarSector1EndTimeseriesObject.getRadar();
        var result = updateRadarSector1EndTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarSector1EndTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSector1EndTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarSector1EndTimeseries( RadarSector1EndTimeseriesObject radarSector1EndTimeseriesObject ) throws SQLException {
        Guid id = radarSector1EndTimeseriesObject.getId();
        long rowVersion = radarSector1EndTimeseriesObject.getRowVersion();
        String name = radarSector1EndTimeseriesObject.getName();
        TimeSpan maxRetention = radarSector1EndTimeseriesObject.getMaxRetention();
        var result = update1RadarSector1EndTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarSector1EndTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSector1EndTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarSector1EndTimeseries( RadarSector1EndTimeseriesObject radarSector1EndTimeseriesObject ) throws SQLException {
        Guid id = radarSector1EndTimeseriesObject.getId();
        long rowVersion = radarSector1EndTimeseriesObject.getRowVersion();
        Guid catalog = radarSector1EndTimeseriesObject.getCatalog();
        Guid radar = radarSector1EndTimeseriesObject.getRadar();
        var result = update2RadarSector1EndTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarSector1EndTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSector1EndTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarSector1EndTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarSector1EndTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarSector1EndTimeseries( RadarSector1EndTimeseriesObject radarSector1EndTimeseriesObject ) throws SQLException {
        var id = radarSector1EndTimeseriesObject.getId( );
        var rowVersion = radarSector1EndTimeseriesObject.getRowVersion();
        var result = deleteRadarSector1EndTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarSector1StartTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarSector1StartTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarSector1StartTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarSector1StartTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarSector1StartTimeseries( RadarSector1StartTimeseriesObject radarSector1StartTimeseriesObject ) throws SQLException {
        Guid id = radarSector1StartTimeseriesObject.getId( );
        Guid catalog = radarSector1StartTimeseriesObject.getCatalog( );
        String name = radarSector1StartTimeseriesObject.getName( );
        TimeSpan maxRetention = radarSector1StartTimeseriesObject.getMaxRetention( );
        Guid radar = radarSector1StartTimeseriesObject.getRadar( );
        var result = insertRadarSector1StartTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarSector1StartTimeseriesObject.setId(result.getId());
            radarSector1StartTimeseriesObject.setRowVersion(0);
            radarSector1StartTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarSector1StartTimeseries( RadarSector1StartTimeseriesObject radarSector1StartTimeseriesObject ) throws SQLException {
        Guid id = radarSector1StartTimeseriesObject.getId( );
        String name = radarSector1StartTimeseriesObject.getName( );
        TimeSpan maxRetention = radarSector1StartTimeseriesObject.getMaxRetention( );
        var result = insert1RadarSector1StartTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarSector1StartTimeseriesObject.setId( result.getId( ) );
            radarSector1StartTimeseriesObject.setRowVersion(0);
            radarSector1StartTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarSector1StartTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSector1StartTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarSector1StartTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSector1StartTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarSector1StartTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSector1StartTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarSector1StartTimeseries( RadarSector1StartTimeseriesObject radarSector1StartTimeseriesObject ) throws SQLException {
        Guid id = radarSector1StartTimeseriesObject.getId();
        long rowVersion = radarSector1StartTimeseriesObject.getRowVersion();
        Guid catalog = radarSector1StartTimeseriesObject.getCatalog();
        String name = radarSector1StartTimeseriesObject.getName();
        TimeSpan maxRetention = radarSector1StartTimeseriesObject.getMaxRetention();
        Guid radar = radarSector1StartTimeseriesObject.getRadar();
        var result = updateRadarSector1StartTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarSector1StartTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSector1StartTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarSector1StartTimeseries( RadarSector1StartTimeseriesObject radarSector1StartTimeseriesObject ) throws SQLException {
        Guid id = radarSector1StartTimeseriesObject.getId();
        long rowVersion = radarSector1StartTimeseriesObject.getRowVersion();
        String name = radarSector1StartTimeseriesObject.getName();
        TimeSpan maxRetention = radarSector1StartTimeseriesObject.getMaxRetention();
        var result = update1RadarSector1StartTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarSector1StartTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSector1StartTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarSector1StartTimeseries( RadarSector1StartTimeseriesObject radarSector1StartTimeseriesObject ) throws SQLException {
        Guid id = radarSector1StartTimeseriesObject.getId();
        long rowVersion = radarSector1StartTimeseriesObject.getRowVersion();
        Guid catalog = radarSector1StartTimeseriesObject.getCatalog();
        Guid radar = radarSector1StartTimeseriesObject.getRadar();
        var result = update2RadarSector1StartTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarSector1StartTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSector1StartTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarSector1StartTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarSector1StartTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarSector1StartTimeseries( RadarSector1StartTimeseriesObject radarSector1StartTimeseriesObject ) throws SQLException {
        var id = radarSector1StartTimeseriesObject.getId( );
        var rowVersion = radarSector1StartTimeseriesObject.getRowVersion();
        var result = deleteRadarSector1StartTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarSector2EndTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarSector2EndTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarSector2EndTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarSector2EndTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarSector2EndTimeseries( RadarSector2EndTimeseriesObject radarSector2EndTimeseriesObject ) throws SQLException {
        Guid id = radarSector2EndTimeseriesObject.getId( );
        Guid catalog = radarSector2EndTimeseriesObject.getCatalog( );
        String name = radarSector2EndTimeseriesObject.getName( );
        TimeSpan maxRetention = radarSector2EndTimeseriesObject.getMaxRetention( );
        Guid radar = radarSector2EndTimeseriesObject.getRadar( );
        var result = insertRadarSector2EndTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarSector2EndTimeseriesObject.setId(result.getId());
            radarSector2EndTimeseriesObject.setRowVersion(0);
            radarSector2EndTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarSector2EndTimeseries( RadarSector2EndTimeseriesObject radarSector2EndTimeseriesObject ) throws SQLException {
        Guid id = radarSector2EndTimeseriesObject.getId( );
        String name = radarSector2EndTimeseriesObject.getName( );
        TimeSpan maxRetention = radarSector2EndTimeseriesObject.getMaxRetention( );
        var result = insert1RadarSector2EndTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarSector2EndTimeseriesObject.setId( result.getId( ) );
            radarSector2EndTimeseriesObject.setRowVersion(0);
            radarSector2EndTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarSector2EndTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSector2EndTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarSector2EndTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSector2EndTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarSector2EndTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSector2EndTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarSector2EndTimeseries( RadarSector2EndTimeseriesObject radarSector2EndTimeseriesObject ) throws SQLException {
        Guid id = radarSector2EndTimeseriesObject.getId();
        long rowVersion = radarSector2EndTimeseriesObject.getRowVersion();
        Guid catalog = radarSector2EndTimeseriesObject.getCatalog();
        String name = radarSector2EndTimeseriesObject.getName();
        TimeSpan maxRetention = radarSector2EndTimeseriesObject.getMaxRetention();
        Guid radar = radarSector2EndTimeseriesObject.getRadar();
        var result = updateRadarSector2EndTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarSector2EndTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSector2EndTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarSector2EndTimeseries( RadarSector2EndTimeseriesObject radarSector2EndTimeseriesObject ) throws SQLException {
        Guid id = radarSector2EndTimeseriesObject.getId();
        long rowVersion = radarSector2EndTimeseriesObject.getRowVersion();
        String name = radarSector2EndTimeseriesObject.getName();
        TimeSpan maxRetention = radarSector2EndTimeseriesObject.getMaxRetention();
        var result = update1RadarSector2EndTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarSector2EndTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSector2EndTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarSector2EndTimeseries( RadarSector2EndTimeseriesObject radarSector2EndTimeseriesObject ) throws SQLException {
        Guid id = radarSector2EndTimeseriesObject.getId();
        long rowVersion = radarSector2EndTimeseriesObject.getRowVersion();
        Guid catalog = radarSector2EndTimeseriesObject.getCatalog();
        Guid radar = radarSector2EndTimeseriesObject.getRadar();
        var result = update2RadarSector2EndTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarSector2EndTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSector2EndTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarSector2EndTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarSector2EndTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarSector2EndTimeseries( RadarSector2EndTimeseriesObject radarSector2EndTimeseriesObject ) throws SQLException {
        var id = radarSector2EndTimeseriesObject.getId( );
        var rowVersion = radarSector2EndTimeseriesObject.getRowVersion();
        var result = deleteRadarSector2EndTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarSector2StartTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarSector2StartTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarSector2StartTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarSector2StartTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarSector2StartTimeseries( RadarSector2StartTimeseriesObject radarSector2StartTimeseriesObject ) throws SQLException {
        Guid id = radarSector2StartTimeseriesObject.getId( );
        Guid catalog = radarSector2StartTimeseriesObject.getCatalog( );
        String name = radarSector2StartTimeseriesObject.getName( );
        TimeSpan maxRetention = radarSector2StartTimeseriesObject.getMaxRetention( );
        Guid radar = radarSector2StartTimeseriesObject.getRadar( );
        var result = insertRadarSector2StartTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarSector2StartTimeseriesObject.setId(result.getId());
            radarSector2StartTimeseriesObject.setRowVersion(0);
            radarSector2StartTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarSector2StartTimeseries( RadarSector2StartTimeseriesObject radarSector2StartTimeseriesObject ) throws SQLException {
        Guid id = radarSector2StartTimeseriesObject.getId( );
        String name = radarSector2StartTimeseriesObject.getName( );
        TimeSpan maxRetention = radarSector2StartTimeseriesObject.getMaxRetention( );
        var result = insert1RadarSector2StartTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarSector2StartTimeseriesObject.setId( result.getId( ) );
            radarSector2StartTimeseriesObject.setRowVersion(0);
            radarSector2StartTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarSector2StartTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSector2StartTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarSector2StartTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSector2StartTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarSector2StartTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSector2StartTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarSector2StartTimeseries( RadarSector2StartTimeseriesObject radarSector2StartTimeseriesObject ) throws SQLException {
        Guid id = radarSector2StartTimeseriesObject.getId();
        long rowVersion = radarSector2StartTimeseriesObject.getRowVersion();
        Guid catalog = radarSector2StartTimeseriesObject.getCatalog();
        String name = radarSector2StartTimeseriesObject.getName();
        TimeSpan maxRetention = radarSector2StartTimeseriesObject.getMaxRetention();
        Guid radar = radarSector2StartTimeseriesObject.getRadar();
        var result = updateRadarSector2StartTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarSector2StartTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSector2StartTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarSector2StartTimeseries( RadarSector2StartTimeseriesObject radarSector2StartTimeseriesObject ) throws SQLException {
        Guid id = radarSector2StartTimeseriesObject.getId();
        long rowVersion = radarSector2StartTimeseriesObject.getRowVersion();
        String name = radarSector2StartTimeseriesObject.getName();
        TimeSpan maxRetention = radarSector2StartTimeseriesObject.getMaxRetention();
        var result = update1RadarSector2StartTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarSector2StartTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSector2StartTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarSector2StartTimeseries( RadarSector2StartTimeseriesObject radarSector2StartTimeseriesObject ) throws SQLException {
        Guid id = radarSector2StartTimeseriesObject.getId();
        long rowVersion = radarSector2StartTimeseriesObject.getRowVersion();
        Guid catalog = radarSector2StartTimeseriesObject.getCatalog();
        Guid radar = radarSector2StartTimeseriesObject.getRadar();
        var result = update2RadarSector2StartTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarSector2StartTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSector2StartTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarSector2StartTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarSector2StartTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarSector2StartTimeseries( RadarSector2StartTimeseriesObject radarSector2StartTimeseriesObject ) throws SQLException {
        var id = radarSector2StartTimeseriesObject.getId( );
        var rowVersion = radarSector2StartTimeseriesObject.getRowVersion();
        var result = deleteRadarSector2StartTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarSensitivityTimeControlLevelTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarSensitivityTimeControlLevelTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarSensitivityTimeControlLevelTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarSensitivityTimeControlLevelTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarSensitivityTimeControlLevelTimeseries( RadarSensitivityTimeControlLevelTimeseriesObject radarSensitivityTimeControlLevelTimeseriesObject ) throws SQLException {
        Guid id = radarSensitivityTimeControlLevelTimeseriesObject.getId( );
        Guid catalog = radarSensitivityTimeControlLevelTimeseriesObject.getCatalog( );
        String name = radarSensitivityTimeControlLevelTimeseriesObject.getName( );
        TimeSpan maxRetention = radarSensitivityTimeControlLevelTimeseriesObject.getMaxRetention( );
        Guid radar = radarSensitivityTimeControlLevelTimeseriesObject.getRadar( );
        var result = insertRadarSensitivityTimeControlLevelTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarSensitivityTimeControlLevelTimeseriesObject.setId(result.getId());
            radarSensitivityTimeControlLevelTimeseriesObject.setRowVersion(0);
            radarSensitivityTimeControlLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarSensitivityTimeControlLevelTimeseries( RadarSensitivityTimeControlLevelTimeseriesObject radarSensitivityTimeControlLevelTimeseriesObject ) throws SQLException {
        Guid id = radarSensitivityTimeControlLevelTimeseriesObject.getId( );
        String name = radarSensitivityTimeControlLevelTimeseriesObject.getName( );
        TimeSpan maxRetention = radarSensitivityTimeControlLevelTimeseriesObject.getMaxRetention( );
        var result = insert1RadarSensitivityTimeControlLevelTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarSensitivityTimeControlLevelTimeseriesObject.setId( result.getId( ) );
            radarSensitivityTimeControlLevelTimeseriesObject.setRowVersion(0);
            radarSensitivityTimeControlLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarSensitivityTimeControlLevelTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSensitivityTimeControlLevelTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarSensitivityTimeControlLevelTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSensitivityTimeControlLevelTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarSensitivityTimeControlLevelTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarSensitivityTimeControlLevelTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarSensitivityTimeControlLevelTimeseries( RadarSensitivityTimeControlLevelTimeseriesObject radarSensitivityTimeControlLevelTimeseriesObject ) throws SQLException {
        Guid id = radarSensitivityTimeControlLevelTimeseriesObject.getId();
        long rowVersion = radarSensitivityTimeControlLevelTimeseriesObject.getRowVersion();
        Guid catalog = radarSensitivityTimeControlLevelTimeseriesObject.getCatalog();
        String name = radarSensitivityTimeControlLevelTimeseriesObject.getName();
        TimeSpan maxRetention = radarSensitivityTimeControlLevelTimeseriesObject.getMaxRetention();
        Guid radar = radarSensitivityTimeControlLevelTimeseriesObject.getRadar();
        var result = updateRadarSensitivityTimeControlLevelTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarSensitivityTimeControlLevelTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSensitivityTimeControlLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarSensitivityTimeControlLevelTimeseries( RadarSensitivityTimeControlLevelTimeseriesObject radarSensitivityTimeControlLevelTimeseriesObject ) throws SQLException {
        Guid id = radarSensitivityTimeControlLevelTimeseriesObject.getId();
        long rowVersion = radarSensitivityTimeControlLevelTimeseriesObject.getRowVersion();
        String name = radarSensitivityTimeControlLevelTimeseriesObject.getName();
        TimeSpan maxRetention = radarSensitivityTimeControlLevelTimeseriesObject.getMaxRetention();
        var result = update1RadarSensitivityTimeControlLevelTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarSensitivityTimeControlLevelTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSensitivityTimeControlLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarSensitivityTimeControlLevelTimeseries( RadarSensitivityTimeControlLevelTimeseriesObject radarSensitivityTimeControlLevelTimeseriesObject ) throws SQLException {
        Guid id = radarSensitivityTimeControlLevelTimeseriesObject.getId();
        long rowVersion = radarSensitivityTimeControlLevelTimeseriesObject.getRowVersion();
        Guid catalog = radarSensitivityTimeControlLevelTimeseriesObject.getCatalog();
        Guid radar = radarSensitivityTimeControlLevelTimeseriesObject.getRadar();
        var result = update2RadarSensitivityTimeControlLevelTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarSensitivityTimeControlLevelTimeseriesObject.setRowVersion(result.getRowVersion());
            radarSensitivityTimeControlLevelTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarSensitivityTimeControlLevelTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarSensitivityTimeControlLevelTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarSensitivityTimeControlLevelTimeseries( RadarSensitivityTimeControlLevelTimeseriesObject radarSensitivityTimeControlLevelTimeseriesObject ) throws SQLException {
        var id = radarSensitivityTimeControlLevelTimeseriesObject.getId( );
        var rowVersion = radarSensitivityTimeControlLevelTimeseriesObject.getRowVersion();
        var result = deleteRadarSensitivityTimeControlLevelTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadarTuningTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarTuningTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadarTuningTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadarTuningTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadarTuningTimeseries( RadarTuningTimeseriesObject radarTuningTimeseriesObject ) throws SQLException {
        Guid id = radarTuningTimeseriesObject.getId( );
        Guid catalog = radarTuningTimeseriesObject.getCatalog( );
        String name = radarTuningTimeseriesObject.getName( );
        TimeSpan maxRetention = radarTuningTimeseriesObject.getMaxRetention( );
        Guid radar = radarTuningTimeseriesObject.getRadar( );
        var result = insertRadarTuningTimeseries( id, catalog, name, maxRetention, radar );
        if( result.isSuccess() ) {
            radarTuningTimeseriesObject.setId(result.getId());
            radarTuningTimeseriesObject.setRowVersion(0);
            radarTuningTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadarTuningTimeseries( RadarTuningTimeseriesObject radarTuningTimeseriesObject ) throws SQLException {
        Guid id = radarTuningTimeseriesObject.getId( );
        String name = radarTuningTimeseriesObject.getName( );
        TimeSpan maxRetention = radarTuningTimeseriesObject.getMaxRetention( );
        var result = insert1RadarTuningTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarTuningTimeseriesObject.setId( result.getId( ) );
            radarTuningTimeseriesObject.setRowVersion(0);
            radarTuningTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadarTuningTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarTuningTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadarTuningTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarTuningTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadarTuningTimeseries( Guid id, long rowVersion, Guid catalog, Guid radar ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadarTuningTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radar);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadarTuningTimeseries( RadarTuningTimeseriesObject radarTuningTimeseriesObject ) throws SQLException {
        Guid id = radarTuningTimeseriesObject.getId();
        long rowVersion = radarTuningTimeseriesObject.getRowVersion();
        Guid catalog = radarTuningTimeseriesObject.getCatalog();
        String name = radarTuningTimeseriesObject.getName();
        TimeSpan maxRetention = radarTuningTimeseriesObject.getMaxRetention();
        Guid radar = radarTuningTimeseriesObject.getRadar();
        var result = updateRadarTuningTimeseries( id, rowVersion, catalog, name, maxRetention, radar );
        if( result.isSuccess( ) ) {
            radarTuningTimeseriesObject.setRowVersion(result.getRowVersion());
            radarTuningTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadarTuningTimeseries( RadarTuningTimeseriesObject radarTuningTimeseriesObject ) throws SQLException {
        Guid id = radarTuningTimeseriesObject.getId();
        long rowVersion = radarTuningTimeseriesObject.getRowVersion();
        String name = radarTuningTimeseriesObject.getName();
        TimeSpan maxRetention = radarTuningTimeseriesObject.getMaxRetention();
        var result = update1RadarTuningTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radarTuningTimeseriesObject.setRowVersion(result.getRowVersion());
            radarTuningTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadarTuningTimeseries( RadarTuningTimeseriesObject radarTuningTimeseriesObject ) throws SQLException {
        Guid id = radarTuningTimeseriesObject.getId();
        long rowVersion = radarTuningTimeseriesObject.getRowVersion();
        Guid catalog = radarTuningTimeseriesObject.getCatalog();
        Guid radar = radarTuningTimeseriesObject.getRadar();
        var result = update2RadarTuningTimeseries( id, rowVersion, catalog, radar );
        if( result.isSuccess( ) ) {
            radarTuningTimeseriesObject.setRowVersion(result.getRowVersion());
            radarTuningTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadarTuningTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadarTuningTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadarTuningTimeseries( RadarTuningTimeseriesObject radarTuningTimeseriesObject ) throws SQLException {
        var id = radarTuningTimeseriesObject.getId( );
        var rowVersion = radarTuningTimeseriesObject.getRowVersion();
        var result = deleteRadarTuningTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertVesselPersonsOnBoardTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid vessel ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call VesselPersonsOnBoardTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, vessel);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1VesselPersonsOnBoardTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call VesselPersonsOnBoardTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertVesselPersonsOnBoardTimeseries( VesselPersonsOnBoardTimeseriesObject vesselPersonsOnBoardTimeseriesObject ) throws SQLException {
        Guid id = vesselPersonsOnBoardTimeseriesObject.getId( );
        Guid catalog = vesselPersonsOnBoardTimeseriesObject.getCatalog( );
        String name = vesselPersonsOnBoardTimeseriesObject.getName( );
        TimeSpan maxRetention = vesselPersonsOnBoardTimeseriesObject.getMaxRetention( );
        Guid vessel = vesselPersonsOnBoardTimeseriesObject.getVessel( );
        var result = insertVesselPersonsOnBoardTimeseries( id, catalog, name, maxRetention, vessel );
        if( result.isSuccess() ) {
            vesselPersonsOnBoardTimeseriesObject.setId(result.getId());
            vesselPersonsOnBoardTimeseriesObject.setRowVersion(0);
            vesselPersonsOnBoardTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1VesselPersonsOnBoardTimeseries( VesselPersonsOnBoardTimeseriesObject vesselPersonsOnBoardTimeseriesObject ) throws SQLException {
        Guid id = vesselPersonsOnBoardTimeseriesObject.getId( );
        String name = vesselPersonsOnBoardTimeseriesObject.getName( );
        TimeSpan maxRetention = vesselPersonsOnBoardTimeseriesObject.getMaxRetention( );
        var result = insert1VesselPersonsOnBoardTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            vesselPersonsOnBoardTimeseriesObject.setId( result.getId( ) );
            vesselPersonsOnBoardTimeseriesObject.setRowVersion(0);
            vesselPersonsOnBoardTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateVesselPersonsOnBoardTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid vessel ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VesselPersonsOnBoardTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, vessel);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1VesselPersonsOnBoardTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VesselPersonsOnBoardTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2VesselPersonsOnBoardTimeseries( Guid id, long rowVersion, Guid catalog, Guid vessel ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VesselPersonsOnBoardTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, vessel);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateVesselPersonsOnBoardTimeseries( VesselPersonsOnBoardTimeseriesObject vesselPersonsOnBoardTimeseriesObject ) throws SQLException {
        Guid id = vesselPersonsOnBoardTimeseriesObject.getId();
        long rowVersion = vesselPersonsOnBoardTimeseriesObject.getRowVersion();
        Guid catalog = vesselPersonsOnBoardTimeseriesObject.getCatalog();
        String name = vesselPersonsOnBoardTimeseriesObject.getName();
        TimeSpan maxRetention = vesselPersonsOnBoardTimeseriesObject.getMaxRetention();
        Guid vessel = vesselPersonsOnBoardTimeseriesObject.getVessel();
        var result = updateVesselPersonsOnBoardTimeseries( id, rowVersion, catalog, name, maxRetention, vessel );
        if( result.isSuccess( ) ) {
            vesselPersonsOnBoardTimeseriesObject.setRowVersion(result.getRowVersion());
            vesselPersonsOnBoardTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1VesselPersonsOnBoardTimeseries( VesselPersonsOnBoardTimeseriesObject vesselPersonsOnBoardTimeseriesObject ) throws SQLException {
        Guid id = vesselPersonsOnBoardTimeseriesObject.getId();
        long rowVersion = vesselPersonsOnBoardTimeseriesObject.getRowVersion();
        String name = vesselPersonsOnBoardTimeseriesObject.getName();
        TimeSpan maxRetention = vesselPersonsOnBoardTimeseriesObject.getMaxRetention();
        var result = update1VesselPersonsOnBoardTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            vesselPersonsOnBoardTimeseriesObject.setRowVersion(result.getRowVersion());
            vesselPersonsOnBoardTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2VesselPersonsOnBoardTimeseries( VesselPersonsOnBoardTimeseriesObject vesselPersonsOnBoardTimeseriesObject ) throws SQLException {
        Guid id = vesselPersonsOnBoardTimeseriesObject.getId();
        long rowVersion = vesselPersonsOnBoardTimeseriesObject.getRowVersion();
        Guid catalog = vesselPersonsOnBoardTimeseriesObject.getCatalog();
        Guid vessel = vesselPersonsOnBoardTimeseriesObject.getVessel();
        var result = update2VesselPersonsOnBoardTimeseries( id, rowVersion, catalog, vessel );
        if( result.isSuccess( ) ) {
            vesselPersonsOnBoardTimeseriesObject.setRowVersion(result.getRowVersion());
            vesselPersonsOnBoardTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteVesselPersonsOnBoardTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call VesselPersonsOnBoardTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteVesselPersonsOnBoardTimeseries( VesselPersonsOnBoardTimeseriesObject vesselPersonsOnBoardTimeseriesObject ) throws SQLException {
        var id = vesselPersonsOnBoardTimeseriesObject.getId( );
        var rowVersion = vesselPersonsOnBoardTimeseriesObject.getRowVersion();
        var result = deleteVesselPersonsOnBoardTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertInt64Timeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int64TimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Int64Timeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Int64TimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertInt64Timeseries( Int64TimeseriesObject int64TimeseriesObject ) throws SQLException {
        Guid id = int64TimeseriesObject.getId( );
        Guid catalog = int64TimeseriesObject.getCatalog( );
        String name = int64TimeseriesObject.getName( );
        TimeSpan maxRetention = int64TimeseriesObject.getMaxRetention( );
        var result = insertInt64Timeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            int64TimeseriesObject.setId(result.getId());
            int64TimeseriesObject.setRowVersion(0);
            int64TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Int64Timeseries( Int64TimeseriesObject int64TimeseriesObject ) throws SQLException {
        Guid id = int64TimeseriesObject.getId( );
        String name = int64TimeseriesObject.getName( );
        TimeSpan maxRetention = int64TimeseriesObject.getMaxRetention( );
        var result = insert1Int64Timeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            int64TimeseriesObject.setId( result.getId( ) );
            int64TimeseriesObject.setRowVersion(0);
            int64TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateInt64Timeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int64TimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Int64Timeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int64TimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Int64Timeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Int64TimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateInt64Timeseries( Int64TimeseriesObject int64TimeseriesObject ) throws SQLException {
        Guid id = int64TimeseriesObject.getId();
        long rowVersion = int64TimeseriesObject.getRowVersion();
        Guid catalog = int64TimeseriesObject.getCatalog();
        String name = int64TimeseriesObject.getName();
        TimeSpan maxRetention = int64TimeseriesObject.getMaxRetention();
        var result = updateInt64Timeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            int64TimeseriesObject.setRowVersion(result.getRowVersion());
            int64TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Int64Timeseries( Int64TimeseriesObject int64TimeseriesObject ) throws SQLException {
        Guid id = int64TimeseriesObject.getId();
        long rowVersion = int64TimeseriesObject.getRowVersion();
        String name = int64TimeseriesObject.getName();
        TimeSpan maxRetention = int64TimeseriesObject.getMaxRetention();
        var result = update1Int64Timeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            int64TimeseriesObject.setRowVersion(result.getRowVersion());
            int64TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Int64Timeseries( Int64TimeseriesObject int64TimeseriesObject ) throws SQLException {
        Guid id = int64TimeseriesObject.getId();
        long rowVersion = int64TimeseriesObject.getRowVersion();
        Guid catalog = int64TimeseriesObject.getCatalog();
        var result = update2Int64Timeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            int64TimeseriesObject.setRowVersion(result.getRowVersion());
            int64TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteInt64Timeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Int64TimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteInt64Timeseries( Int64TimeseriesObject int64TimeseriesObject ) throws SQLException {
        var id = int64TimeseriesObject.getId( );
        var rowVersion = int64TimeseriesObject.getRowVersion();
        var result = deleteInt64Timeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertPosition2DTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Position2DTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Position2DTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Position2DTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertPosition2DTimeseries( Position2DTimeseriesObject position2DTimeseriesObject ) throws SQLException {
        Guid id = position2DTimeseriesObject.getId( );
        Guid catalog = position2DTimeseriesObject.getCatalog( );
        String name = position2DTimeseriesObject.getName( );
        TimeSpan maxRetention = position2DTimeseriesObject.getMaxRetention( );
        var result = insertPosition2DTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            position2DTimeseriesObject.setId(result.getId());
            position2DTimeseriesObject.setRowVersion(0);
            position2DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Position2DTimeseries( Position2DTimeseriesObject position2DTimeseriesObject ) throws SQLException {
        Guid id = position2DTimeseriesObject.getId( );
        String name = position2DTimeseriesObject.getName( );
        TimeSpan maxRetention = position2DTimeseriesObject.getMaxRetention( );
        var result = insert1Position2DTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            position2DTimeseriesObject.setId( result.getId( ) );
            position2DTimeseriesObject.setRowVersion(0);
            position2DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updatePosition2DTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Position2DTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Position2DTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Position2DTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Position2DTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Position2DTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updatePosition2DTimeseries( Position2DTimeseriesObject position2DTimeseriesObject ) throws SQLException {
        Guid id = position2DTimeseriesObject.getId();
        long rowVersion = position2DTimeseriesObject.getRowVersion();
        Guid catalog = position2DTimeseriesObject.getCatalog();
        String name = position2DTimeseriesObject.getName();
        TimeSpan maxRetention = position2DTimeseriesObject.getMaxRetention();
        var result = updatePosition2DTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            position2DTimeseriesObject.setRowVersion(result.getRowVersion());
            position2DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Position2DTimeseries( Position2DTimeseriesObject position2DTimeseriesObject ) throws SQLException {
        Guid id = position2DTimeseriesObject.getId();
        long rowVersion = position2DTimeseriesObject.getRowVersion();
        String name = position2DTimeseriesObject.getName();
        TimeSpan maxRetention = position2DTimeseriesObject.getMaxRetention();
        var result = update1Position2DTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            position2DTimeseriesObject.setRowVersion(result.getRowVersion());
            position2DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Position2DTimeseries( Position2DTimeseriesObject position2DTimeseriesObject ) throws SQLException {
        Guid id = position2DTimeseriesObject.getId();
        long rowVersion = position2DTimeseriesObject.getRowVersion();
        Guid catalog = position2DTimeseriesObject.getCatalog();
        var result = update2Position2DTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            position2DTimeseriesObject.setRowVersion(result.getRowVersion());
            position2DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deletePosition2DTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Position2DTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deletePosition2DTimeseries( Position2DTimeseriesObject position2DTimeseriesObject ) throws SQLException {
        var id = position2DTimeseriesObject.getId( );
        var rowVersion = position2DTimeseriesObject.getRowVersion();
        var result = deletePosition2DTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertPosition3DTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Position3DTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1Position3DTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Position3DTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertPosition3DTimeseries( Position3DTimeseriesObject position3DTimeseriesObject ) throws SQLException {
        Guid id = position3DTimeseriesObject.getId( );
        Guid catalog = position3DTimeseriesObject.getCatalog( );
        String name = position3DTimeseriesObject.getName( );
        TimeSpan maxRetention = position3DTimeseriesObject.getMaxRetention( );
        var result = insertPosition3DTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            position3DTimeseriesObject.setId(result.getId());
            position3DTimeseriesObject.setRowVersion(0);
            position3DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1Position3DTimeseries( Position3DTimeseriesObject position3DTimeseriesObject ) throws SQLException {
        Guid id = position3DTimeseriesObject.getId( );
        String name = position3DTimeseriesObject.getName( );
        TimeSpan maxRetention = position3DTimeseriesObject.getMaxRetention( );
        var result = insert1Position3DTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            position3DTimeseriesObject.setId( result.getId( ) );
            position3DTimeseriesObject.setRowVersion(0);
            position3DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updatePosition3DTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Position3DTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1Position3DTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Position3DTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2Position3DTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Position3DTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updatePosition3DTimeseries( Position3DTimeseriesObject position3DTimeseriesObject ) throws SQLException {
        Guid id = position3DTimeseriesObject.getId();
        long rowVersion = position3DTimeseriesObject.getRowVersion();
        Guid catalog = position3DTimeseriesObject.getCatalog();
        String name = position3DTimeseriesObject.getName();
        TimeSpan maxRetention = position3DTimeseriesObject.getMaxRetention();
        var result = updatePosition3DTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            position3DTimeseriesObject.setRowVersion(result.getRowVersion());
            position3DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1Position3DTimeseries( Position3DTimeseriesObject position3DTimeseriesObject ) throws SQLException {
        Guid id = position3DTimeseriesObject.getId();
        long rowVersion = position3DTimeseriesObject.getRowVersion();
        String name = position3DTimeseriesObject.getName();
        TimeSpan maxRetention = position3DTimeseriesObject.getMaxRetention();
        var result = update1Position3DTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            position3DTimeseriesObject.setRowVersion(result.getRowVersion());
            position3DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2Position3DTimeseries( Position3DTimeseriesObject position3DTimeseriesObject ) throws SQLException {
        Guid id = position3DTimeseriesObject.getId();
        long rowVersion = position3DTimeseriesObject.getRowVersion();
        Guid catalog = position3DTimeseriesObject.getCatalog();
        var result = update2Position3DTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            position3DTimeseriesObject.setRowVersion(result.getRowVersion());
            position3DTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deletePosition3DTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Position3DTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deletePosition3DTimeseries( Position3DTimeseriesObject position3DTimeseriesObject ) throws SQLException {
        var id = position3DTimeseriesObject.getId( );
        var rowVersion = position3DTimeseriesObject.getRowVersion();
        var result = deletePosition3DTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertReferenceTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ReferenceTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1ReferenceTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ReferenceTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertReferenceTimeseries( ReferenceTimeseriesObject referenceTimeseriesObject ) throws SQLException {
        Guid id = referenceTimeseriesObject.getId( );
        Guid catalog = referenceTimeseriesObject.getCatalog( );
        String name = referenceTimeseriesObject.getName( );
        TimeSpan maxRetention = referenceTimeseriesObject.getMaxRetention( );
        var result = insertReferenceTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            referenceTimeseriesObject.setId(result.getId());
            referenceTimeseriesObject.setRowVersion(0);
            referenceTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1ReferenceTimeseries( ReferenceTimeseriesObject referenceTimeseriesObject ) throws SQLException {
        Guid id = referenceTimeseriesObject.getId( );
        String name = referenceTimeseriesObject.getName( );
        TimeSpan maxRetention = referenceTimeseriesObject.getMaxRetention( );
        var result = insert1ReferenceTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            referenceTimeseriesObject.setId( result.getId( ) );
            referenceTimeseriesObject.setRowVersion(0);
            referenceTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateReferenceTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferenceTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1ReferenceTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferenceTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2ReferenceTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ReferenceTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateReferenceTimeseries( ReferenceTimeseriesObject referenceTimeseriesObject ) throws SQLException {
        Guid id = referenceTimeseriesObject.getId();
        long rowVersion = referenceTimeseriesObject.getRowVersion();
        Guid catalog = referenceTimeseriesObject.getCatalog();
        String name = referenceTimeseriesObject.getName();
        TimeSpan maxRetention = referenceTimeseriesObject.getMaxRetention();
        var result = updateReferenceTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            referenceTimeseriesObject.setRowVersion(result.getRowVersion());
            referenceTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1ReferenceTimeseries( ReferenceTimeseriesObject referenceTimeseriesObject ) throws SQLException {
        Guid id = referenceTimeseriesObject.getId();
        long rowVersion = referenceTimeseriesObject.getRowVersion();
        String name = referenceTimeseriesObject.getName();
        TimeSpan maxRetention = referenceTimeseriesObject.getMaxRetention();
        var result = update1ReferenceTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            referenceTimeseriesObject.setRowVersion(result.getRowVersion());
            referenceTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2ReferenceTimeseries( ReferenceTimeseriesObject referenceTimeseriesObject ) throws SQLException {
        Guid id = referenceTimeseriesObject.getId();
        long rowVersion = referenceTimeseriesObject.getRowVersion();
        Guid catalog = referenceTimeseriesObject.getCatalog();
        var result = update2ReferenceTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            referenceTimeseriesObject.setRowVersion(result.getRowVersion());
            referenceTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteReferenceTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ReferenceTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteReferenceTimeseries( ReferenceTimeseriesObject referenceTimeseriesObject ) throws SQLException {
        var id = referenceTimeseriesObject.getId( );
        var rowVersion = referenceTimeseriesObject.getRowVersion();
        var result = deleteReferenceTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSByteTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SByteTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1SByteTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SByteTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSByteTimeseries( SByteTimeseriesObject sByteTimeseriesObject ) throws SQLException {
        Guid id = sByteTimeseriesObject.getId( );
        Guid catalog = sByteTimeseriesObject.getCatalog( );
        String name = sByteTimeseriesObject.getName( );
        TimeSpan maxRetention = sByteTimeseriesObject.getMaxRetention( );
        var result = insertSByteTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            sByteTimeseriesObject.setId(result.getId());
            sByteTimeseriesObject.setRowVersion(0);
            sByteTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1SByteTimeseries( SByteTimeseriesObject sByteTimeseriesObject ) throws SQLException {
        Guid id = sByteTimeseriesObject.getId( );
        String name = sByteTimeseriesObject.getName( );
        TimeSpan maxRetention = sByteTimeseriesObject.getMaxRetention( );
        var result = insert1SByteTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            sByteTimeseriesObject.setId( result.getId( ) );
            sByteTimeseriesObject.setRowVersion(0);
            sByteTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateSByteTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SByteTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1SByteTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SByteTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2SByteTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SByteTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSByteTimeseries( SByteTimeseriesObject sByteTimeseriesObject ) throws SQLException {
        Guid id = sByteTimeseriesObject.getId();
        long rowVersion = sByteTimeseriesObject.getRowVersion();
        Guid catalog = sByteTimeseriesObject.getCatalog();
        String name = sByteTimeseriesObject.getName();
        TimeSpan maxRetention = sByteTimeseriesObject.getMaxRetention();
        var result = updateSByteTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            sByteTimeseriesObject.setRowVersion(result.getRowVersion());
            sByteTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1SByteTimeseries( SByteTimeseriesObject sByteTimeseriesObject ) throws SQLException {
        Guid id = sByteTimeseriesObject.getId();
        long rowVersion = sByteTimeseriesObject.getRowVersion();
        String name = sByteTimeseriesObject.getName();
        TimeSpan maxRetention = sByteTimeseriesObject.getMaxRetention();
        var result = update1SByteTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            sByteTimeseriesObject.setRowVersion(result.getRowVersion());
            sByteTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2SByteTimeseries( SByteTimeseriesObject sByteTimeseriesObject ) throws SQLException {
        Guid id = sByteTimeseriesObject.getId();
        long rowVersion = sByteTimeseriesObject.getRowVersion();
        Guid catalog = sByteTimeseriesObject.getCatalog();
        var result = update2SByteTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            sByteTimeseriesObject.setRowVersion(result.getRowVersion());
            sByteTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSByteTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SByteTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSByteTimeseries( SByteTimeseriesObject sByteTimeseriesObject ) throws SQLException {
        var id = sByteTimeseriesObject.getId( );
        var rowVersion = sByteTimeseriesObject.getRowVersion();
        var result = deleteSByteTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertSingleTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SingleTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1SingleTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call SingleTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertSingleTimeseries( SingleTimeseriesObject singleTimeseriesObject ) throws SQLException {
        Guid id = singleTimeseriesObject.getId( );
        Guid catalog = singleTimeseriesObject.getCatalog( );
        String name = singleTimeseriesObject.getName( );
        TimeSpan maxRetention = singleTimeseriesObject.getMaxRetention( );
        var result = insertSingleTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            singleTimeseriesObject.setId(result.getId());
            singleTimeseriesObject.setRowVersion(0);
            singleTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1SingleTimeseries( SingleTimeseriesObject singleTimeseriesObject ) throws SQLException {
        Guid id = singleTimeseriesObject.getId( );
        String name = singleTimeseriesObject.getName( );
        TimeSpan maxRetention = singleTimeseriesObject.getMaxRetention( );
        var result = insert1SingleTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            singleTimeseriesObject.setId( result.getId( ) );
            singleTimeseriesObject.setRowVersion(0);
            singleTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateSingleTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SingleTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1SingleTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SingleTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2SingleTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call SingleTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateSingleTimeseries( SingleTimeseriesObject singleTimeseriesObject ) throws SQLException {
        Guid id = singleTimeseriesObject.getId();
        long rowVersion = singleTimeseriesObject.getRowVersion();
        Guid catalog = singleTimeseriesObject.getCatalog();
        String name = singleTimeseriesObject.getName();
        TimeSpan maxRetention = singleTimeseriesObject.getMaxRetention();
        var result = updateSingleTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            singleTimeseriesObject.setRowVersion(result.getRowVersion());
            singleTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1SingleTimeseries( SingleTimeseriesObject singleTimeseriesObject ) throws SQLException {
        Guid id = singleTimeseriesObject.getId();
        long rowVersion = singleTimeseriesObject.getRowVersion();
        String name = singleTimeseriesObject.getName();
        TimeSpan maxRetention = singleTimeseriesObject.getMaxRetention();
        var result = update1SingleTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            singleTimeseriesObject.setRowVersion(result.getRowVersion());
            singleTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2SingleTimeseries( SingleTimeseriesObject singleTimeseriesObject ) throws SQLException {
        Guid id = singleTimeseriesObject.getId();
        long rowVersion = singleTimeseriesObject.getRowVersion();
        Guid catalog = singleTimeseriesObject.getCatalog();
        var result = update2SingleTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            singleTimeseriesObject.setRowVersion(result.getRowVersion());
            singleTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteSingleTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call SingleTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteSingleTimeseries( SingleTimeseriesObject singleTimeseriesObject ) throws SQLException {
        var id = singleTimeseriesObject.getId( );
        var rowVersion = singleTimeseriesObject.getRowVersion();
        var result = deleteSingleTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertStringTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call StringTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1StringTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call StringTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertStringTimeseries( StringTimeseriesObject stringTimeseriesObject ) throws SQLException {
        Guid id = stringTimeseriesObject.getId( );
        Guid catalog = stringTimeseriesObject.getCatalog( );
        String name = stringTimeseriesObject.getName( );
        TimeSpan maxRetention = stringTimeseriesObject.getMaxRetention( );
        var result = insertStringTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            stringTimeseriesObject.setId(result.getId());
            stringTimeseriesObject.setRowVersion(0);
            stringTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1StringTimeseries( StringTimeseriesObject stringTimeseriesObject ) throws SQLException {
        Guid id = stringTimeseriesObject.getId( );
        String name = stringTimeseriesObject.getName( );
        TimeSpan maxRetention = stringTimeseriesObject.getMaxRetention( );
        var result = insert1StringTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            stringTimeseriesObject.setId( result.getId( ) );
            stringTimeseriesObject.setRowVersion(0);
            stringTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateStringTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call StringTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1StringTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call StringTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2StringTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call StringTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateStringTimeseries( StringTimeseriesObject stringTimeseriesObject ) throws SQLException {
        Guid id = stringTimeseriesObject.getId();
        long rowVersion = stringTimeseriesObject.getRowVersion();
        Guid catalog = stringTimeseriesObject.getCatalog();
        String name = stringTimeseriesObject.getName();
        TimeSpan maxRetention = stringTimeseriesObject.getMaxRetention();
        var result = updateStringTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            stringTimeseriesObject.setRowVersion(result.getRowVersion());
            stringTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1StringTimeseries( StringTimeseriesObject stringTimeseriesObject ) throws SQLException {
        Guid id = stringTimeseriesObject.getId();
        long rowVersion = stringTimeseriesObject.getRowVersion();
        String name = stringTimeseriesObject.getName();
        TimeSpan maxRetention = stringTimeseriesObject.getMaxRetention();
        var result = update1StringTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            stringTimeseriesObject.setRowVersion(result.getRowVersion());
            stringTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2StringTimeseries( StringTimeseriesObject stringTimeseriesObject ) throws SQLException {
        Guid id = stringTimeseriesObject.getId();
        long rowVersion = stringTimeseriesObject.getRowVersion();
        Guid catalog = stringTimeseriesObject.getCatalog();
        var result = update2StringTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            stringTimeseriesObject.setRowVersion(result.getRowVersion());
            stringTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteStringTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call StringTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteStringTimeseries( StringTimeseriesObject stringTimeseriesObject ) throws SQLException {
        var id = stringTimeseriesObject.getId( );
        var rowVersion = stringTimeseriesObject.getRowVersion();
        var result = deleteStringTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTimeSpanTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TimeSpanTimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1TimeSpanTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TimeSpanTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTimeSpanTimeseries( TimeSpanTimeseriesObject timeSpanTimeseriesObject ) throws SQLException {
        Guid id = timeSpanTimeseriesObject.getId( );
        Guid catalog = timeSpanTimeseriesObject.getCatalog( );
        String name = timeSpanTimeseriesObject.getName( );
        TimeSpan maxRetention = timeSpanTimeseriesObject.getMaxRetention( );
        var result = insertTimeSpanTimeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            timeSpanTimeseriesObject.setId(result.getId());
            timeSpanTimeseriesObject.setRowVersion(0);
            timeSpanTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1TimeSpanTimeseries( TimeSpanTimeseriesObject timeSpanTimeseriesObject ) throws SQLException {
        Guid id = timeSpanTimeseriesObject.getId( );
        String name = timeSpanTimeseriesObject.getName( );
        TimeSpan maxRetention = timeSpanTimeseriesObject.getMaxRetention( );
        var result = insert1TimeSpanTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            timeSpanTimeseriesObject.setId( result.getId( ) );
            timeSpanTimeseriesObject.setRowVersion(0);
            timeSpanTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateTimeSpanTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeSpanTimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1TimeSpanTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeSpanTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2TimeSpanTimeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeSpanTimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTimeSpanTimeseries( TimeSpanTimeseriesObject timeSpanTimeseriesObject ) throws SQLException {
        Guid id = timeSpanTimeseriesObject.getId();
        long rowVersion = timeSpanTimeseriesObject.getRowVersion();
        Guid catalog = timeSpanTimeseriesObject.getCatalog();
        String name = timeSpanTimeseriesObject.getName();
        TimeSpan maxRetention = timeSpanTimeseriesObject.getMaxRetention();
        var result = updateTimeSpanTimeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            timeSpanTimeseriesObject.setRowVersion(result.getRowVersion());
            timeSpanTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1TimeSpanTimeseries( TimeSpanTimeseriesObject timeSpanTimeseriesObject ) throws SQLException {
        Guid id = timeSpanTimeseriesObject.getId();
        long rowVersion = timeSpanTimeseriesObject.getRowVersion();
        String name = timeSpanTimeseriesObject.getName();
        TimeSpan maxRetention = timeSpanTimeseriesObject.getMaxRetention();
        var result = update1TimeSpanTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            timeSpanTimeseriesObject.setRowVersion(result.getRowVersion());
            timeSpanTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2TimeSpanTimeseries( TimeSpanTimeseriesObject timeSpanTimeseriesObject ) throws SQLException {
        Guid id = timeSpanTimeseriesObject.getId();
        long rowVersion = timeSpanTimeseriesObject.getRowVersion();
        Guid catalog = timeSpanTimeseriesObject.getCatalog();
        var result = update2TimeSpanTimeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            timeSpanTimeseriesObject.setRowVersion(result.getRowVersion());
            timeSpanTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTimeSpanTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TimeSpanTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTimeSpanTimeseries( TimeSpanTimeseriesObject timeSpanTimeseriesObject ) throws SQLException {
        var id = timeSpanTimeseriesObject.getId( );
        var rowVersion = timeSpanTimeseriesObject.getRowVersion();
        var result = deleteTimeSpanTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt16Timeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt16TimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1UInt16Timeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt16TimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt16Timeseries( UInt16TimeseriesObject uInt16TimeseriesObject ) throws SQLException {
        Guid id = uInt16TimeseriesObject.getId( );
        Guid catalog = uInt16TimeseriesObject.getCatalog( );
        String name = uInt16TimeseriesObject.getName( );
        TimeSpan maxRetention = uInt16TimeseriesObject.getMaxRetention( );
        var result = insertUInt16Timeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            uInt16TimeseriesObject.setId(result.getId());
            uInt16TimeseriesObject.setRowVersion(0);
            uInt16TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1UInt16Timeseries( UInt16TimeseriesObject uInt16TimeseriesObject ) throws SQLException {
        Guid id = uInt16TimeseriesObject.getId( );
        String name = uInt16TimeseriesObject.getName( );
        TimeSpan maxRetention = uInt16TimeseriesObject.getMaxRetention( );
        var result = insert1UInt16Timeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            uInt16TimeseriesObject.setId( result.getId( ) );
            uInt16TimeseriesObject.setRowVersion(0);
            uInt16TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateUInt16Timeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt16TimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1UInt16Timeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt16TimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2UInt16Timeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt16TimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt16Timeseries( UInt16TimeseriesObject uInt16TimeseriesObject ) throws SQLException {
        Guid id = uInt16TimeseriesObject.getId();
        long rowVersion = uInt16TimeseriesObject.getRowVersion();
        Guid catalog = uInt16TimeseriesObject.getCatalog();
        String name = uInt16TimeseriesObject.getName();
        TimeSpan maxRetention = uInt16TimeseriesObject.getMaxRetention();
        var result = updateUInt16Timeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            uInt16TimeseriesObject.setRowVersion(result.getRowVersion());
            uInt16TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1UInt16Timeseries( UInt16TimeseriesObject uInt16TimeseriesObject ) throws SQLException {
        Guid id = uInt16TimeseriesObject.getId();
        long rowVersion = uInt16TimeseriesObject.getRowVersion();
        String name = uInt16TimeseriesObject.getName();
        TimeSpan maxRetention = uInt16TimeseriesObject.getMaxRetention();
        var result = update1UInt16Timeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            uInt16TimeseriesObject.setRowVersion(result.getRowVersion());
            uInt16TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2UInt16Timeseries( UInt16TimeseriesObject uInt16TimeseriesObject ) throws SQLException {
        Guid id = uInt16TimeseriesObject.getId();
        long rowVersion = uInt16TimeseriesObject.getRowVersion();
        Guid catalog = uInt16TimeseriesObject.getCatalog();
        var result = update2UInt16Timeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            uInt16TimeseriesObject.setRowVersion(result.getRowVersion());
            uInt16TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt16Timeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt16TimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt16Timeseries( UInt16TimeseriesObject uInt16TimeseriesObject ) throws SQLException {
        var id = uInt16TimeseriesObject.getId( );
        var rowVersion = uInt16TimeseriesObject.getRowVersion();
        var result = deleteUInt16Timeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt32Timeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt32TimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1UInt32Timeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt32TimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt32Timeseries( UInt32TimeseriesObject uInt32TimeseriesObject ) throws SQLException {
        Guid id = uInt32TimeseriesObject.getId( );
        Guid catalog = uInt32TimeseriesObject.getCatalog( );
        String name = uInt32TimeseriesObject.getName( );
        TimeSpan maxRetention = uInt32TimeseriesObject.getMaxRetention( );
        var result = insertUInt32Timeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            uInt32TimeseriesObject.setId(result.getId());
            uInt32TimeseriesObject.setRowVersion(0);
            uInt32TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1UInt32Timeseries( UInt32TimeseriesObject uInt32TimeseriesObject ) throws SQLException {
        Guid id = uInt32TimeseriesObject.getId( );
        String name = uInt32TimeseriesObject.getName( );
        TimeSpan maxRetention = uInt32TimeseriesObject.getMaxRetention( );
        var result = insert1UInt32Timeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            uInt32TimeseriesObject.setId( result.getId( ) );
            uInt32TimeseriesObject.setRowVersion(0);
            uInt32TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateUInt32Timeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt32TimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1UInt32Timeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt32TimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2UInt32Timeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt32TimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt32Timeseries( UInt32TimeseriesObject uInt32TimeseriesObject ) throws SQLException {
        Guid id = uInt32TimeseriesObject.getId();
        long rowVersion = uInt32TimeseriesObject.getRowVersion();
        Guid catalog = uInt32TimeseriesObject.getCatalog();
        String name = uInt32TimeseriesObject.getName();
        TimeSpan maxRetention = uInt32TimeseriesObject.getMaxRetention();
        var result = updateUInt32Timeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            uInt32TimeseriesObject.setRowVersion(result.getRowVersion());
            uInt32TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1UInt32Timeseries( UInt32TimeseriesObject uInt32TimeseriesObject ) throws SQLException {
        Guid id = uInt32TimeseriesObject.getId();
        long rowVersion = uInt32TimeseriesObject.getRowVersion();
        String name = uInt32TimeseriesObject.getName();
        TimeSpan maxRetention = uInt32TimeseriesObject.getMaxRetention();
        var result = update1UInt32Timeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            uInt32TimeseriesObject.setRowVersion(result.getRowVersion());
            uInt32TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2UInt32Timeseries( UInt32TimeseriesObject uInt32TimeseriesObject ) throws SQLException {
        Guid id = uInt32TimeseriesObject.getId();
        long rowVersion = uInt32TimeseriesObject.getRowVersion();
        Guid catalog = uInt32TimeseriesObject.getCatalog();
        var result = update2UInt32Timeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            uInt32TimeseriesObject.setRowVersion(result.getRowVersion());
            uInt32TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt32Timeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt32TimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt32Timeseries( UInt32TimeseriesObject uInt32TimeseriesObject ) throws SQLException {
        var id = uInt32TimeseriesObject.getId( );
        var rowVersion = uInt32TimeseriesObject.getRowVersion();
        var result = deleteUInt32Timeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertRadomeStatusTimeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention, Guid radome ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeStatusTimeseriesInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.setNullableGuid(5, radome);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1RadomeStatusTimeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call RadomeStatusTimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertRadomeStatusTimeseries( RadomeStatusTimeseriesObject radomeStatusTimeseriesObject ) throws SQLException {
        Guid id = radomeStatusTimeseriesObject.getId( );
        Guid catalog = radomeStatusTimeseriesObject.getCatalog( );
        String name = radomeStatusTimeseriesObject.getName( );
        TimeSpan maxRetention = radomeStatusTimeseriesObject.getMaxRetention( );
        Guid radome = radomeStatusTimeseriesObject.getRadome( );
        var result = insertRadomeStatusTimeseries( id, catalog, name, maxRetention, radome );
        if( result.isSuccess() ) {
            radomeStatusTimeseriesObject.setId(result.getId());
            radomeStatusTimeseriesObject.setRowVersion(0);
            radomeStatusTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1RadomeStatusTimeseries( RadomeStatusTimeseriesObject radomeStatusTimeseriesObject ) throws SQLException {
        Guid id = radomeStatusTimeseriesObject.getId( );
        String name = radomeStatusTimeseriesObject.getName( );
        TimeSpan maxRetention = radomeStatusTimeseriesObject.getMaxRetention( );
        var result = insert1RadomeStatusTimeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            radomeStatusTimeseriesObject.setId( result.getId( ) );
            radomeStatusTimeseriesObject.setRowVersion(0);
            radomeStatusTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateRadomeStatusTimeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention, Guid radome ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeStatusTimeseriesUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.setNullableGuid(6, radome);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1RadomeStatusTimeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeStatusTimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2RadomeStatusTimeseries( Guid id, long rowVersion, Guid catalog, Guid radome ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call RadomeStatusTimeseriesUpdate2(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setNullableGuid(4, radome);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateRadomeStatusTimeseries( RadomeStatusTimeseriesObject radomeStatusTimeseriesObject ) throws SQLException {
        Guid id = radomeStatusTimeseriesObject.getId();
        long rowVersion = radomeStatusTimeseriesObject.getRowVersion();
        Guid catalog = radomeStatusTimeseriesObject.getCatalog();
        String name = radomeStatusTimeseriesObject.getName();
        TimeSpan maxRetention = radomeStatusTimeseriesObject.getMaxRetention();
        Guid radome = radomeStatusTimeseriesObject.getRadome();
        var result = updateRadomeStatusTimeseries( id, rowVersion, catalog, name, maxRetention, radome );
        if( result.isSuccess( ) ) {
            radomeStatusTimeseriesObject.setRowVersion(result.getRowVersion());
            radomeStatusTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1RadomeStatusTimeseries( RadomeStatusTimeseriesObject radomeStatusTimeseriesObject ) throws SQLException {
        Guid id = radomeStatusTimeseriesObject.getId();
        long rowVersion = radomeStatusTimeseriesObject.getRowVersion();
        String name = radomeStatusTimeseriesObject.getName();
        TimeSpan maxRetention = radomeStatusTimeseriesObject.getMaxRetention();
        var result = update1RadomeStatusTimeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            radomeStatusTimeseriesObject.setRowVersion(result.getRowVersion());
            radomeStatusTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2RadomeStatusTimeseries( RadomeStatusTimeseriesObject radomeStatusTimeseriesObject ) throws SQLException {
        Guid id = radomeStatusTimeseriesObject.getId();
        long rowVersion = radomeStatusTimeseriesObject.getRowVersion();
        Guid catalog = radomeStatusTimeseriesObject.getCatalog();
        Guid radome = radomeStatusTimeseriesObject.getRadome();
        var result = update2RadomeStatusTimeseries( id, rowVersion, catalog, radome );
        if( result.isSuccess( ) ) {
            radomeStatusTimeseriesObject.setRowVersion(result.getRowVersion());
            radomeStatusTimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteRadomeStatusTimeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call RadomeStatusTimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteRadomeStatusTimeseries( RadomeStatusTimeseriesObject radomeStatusTimeseriesObject ) throws SQLException {
        var id = radomeStatusTimeseriesObject.getId( );
        var rowVersion = radomeStatusTimeseriesObject.getRowVersion();
        var result = deleteRadomeStatusTimeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt64Timeseries( Guid id, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt64TimeseriesInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1UInt64Timeseries( Guid id, String name, TimeSpan maxRetention ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt64TimeseriesInsert1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setTimeSpan(3, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt64Timeseries( UInt64TimeseriesObject uInt64TimeseriesObject ) throws SQLException {
        Guid id = uInt64TimeseriesObject.getId( );
        Guid catalog = uInt64TimeseriesObject.getCatalog( );
        String name = uInt64TimeseriesObject.getName( );
        TimeSpan maxRetention = uInt64TimeseriesObject.getMaxRetention( );
        var result = insertUInt64Timeseries( id, catalog, name, maxRetention );
        if( result.isSuccess() ) {
            uInt64TimeseriesObject.setId(result.getId());
            uInt64TimeseriesObject.setRowVersion(0);
            uInt64TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1UInt64Timeseries( UInt64TimeseriesObject uInt64TimeseriesObject ) throws SQLException {
        Guid id = uInt64TimeseriesObject.getId( );
        String name = uInt64TimeseriesObject.getName( );
        TimeSpan maxRetention = uInt64TimeseriesObject.getMaxRetention( );
        var result = insert1UInt64Timeseries( id, name, maxRetention );
        if( result.isSuccess( ) ) {
            uInt64TimeseriesObject.setId( result.getId( ) );
            uInt64TimeseriesObject.setRowVersion(0);
            uInt64TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateUInt64Timeseries( Guid id, long rowVersion, Guid catalog, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt64TimeseriesUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.setTimeSpan(5, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1UInt64Timeseries( Guid id, long rowVersion, String name, TimeSpan maxRetention ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt64TimeseriesUpdate1(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setTimeSpan(4, maxRetention);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2UInt64Timeseries( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt64TimeseriesUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt64Timeseries( UInt64TimeseriesObject uInt64TimeseriesObject ) throws SQLException {
        Guid id = uInt64TimeseriesObject.getId();
        long rowVersion = uInt64TimeseriesObject.getRowVersion();
        Guid catalog = uInt64TimeseriesObject.getCatalog();
        String name = uInt64TimeseriesObject.getName();
        TimeSpan maxRetention = uInt64TimeseriesObject.getMaxRetention();
        var result = updateUInt64Timeseries( id, rowVersion, catalog, name, maxRetention );
        if( result.isSuccess( ) ) {
            uInt64TimeseriesObject.setRowVersion(result.getRowVersion());
            uInt64TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1UInt64Timeseries( UInt64TimeseriesObject uInt64TimeseriesObject ) throws SQLException {
        Guid id = uInt64TimeseriesObject.getId();
        long rowVersion = uInt64TimeseriesObject.getRowVersion();
        String name = uInt64TimeseriesObject.getName();
        TimeSpan maxRetention = uInt64TimeseriesObject.getMaxRetention();
        var result = update1UInt64Timeseries( id, rowVersion, name, maxRetention );
        if( result.isSuccess( ) ) {
            uInt64TimeseriesObject.setRowVersion(result.getRowVersion());
            uInt64TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2UInt64Timeseries( UInt64TimeseriesObject uInt64TimeseriesObject ) throws SQLException {
        Guid id = uInt64TimeseriesObject.getId();
        long rowVersion = uInt64TimeseriesObject.getRowVersion();
        Guid catalog = uInt64TimeseriesObject.getCatalog();
        var result = update2UInt64Timeseries( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            uInt64TimeseriesObject.setRowVersion(result.getRowVersion());
            uInt64TimeseriesObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt64Timeseries( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt64TimeseriesDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt64Timeseries( UInt64TimeseriesObject uInt64TimeseriesObject ) throws SQLException {
        var id = uInt64TimeseriesObject.getId( );
        var rowVersion = uInt64TimeseriesObject.getRowVersion();
        var result = deleteUInt64Timeseries( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTimeseriesCatalog( Guid id, Guid catalog, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TimeseriesCatalogInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setNullableGuid(2, catalog);
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1TimeseriesCatalog( Guid id, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TimeseriesCatalogInsert1(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTimeseriesCatalog( TimeseriesCatalogObject timeseriesCatalogObject ) throws SQLException {
        Guid id = timeseriesCatalogObject.getId( );
        Guid catalog = timeseriesCatalogObject.getCatalog( );
        String name = timeseriesCatalogObject.getName( );
        var result = insertTimeseriesCatalog( id, catalog, name );
        if( result.isSuccess() ) {
            timeseriesCatalogObject.setId(result.getId());
            timeseriesCatalogObject.setRowVersion(0);
            timeseriesCatalogObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1TimeseriesCatalog( TimeseriesCatalogObject timeseriesCatalogObject ) throws SQLException {
        Guid id = timeseriesCatalogObject.getId( );
        String name = timeseriesCatalogObject.getName( );
        var result = insert1TimeseriesCatalog( id, name );
        if( result.isSuccess( ) ) {
            timeseriesCatalogObject.setId( result.getId( ) );
            timeseriesCatalogObject.setRowVersion(0);
            timeseriesCatalogObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateTimeseriesCatalog( Guid id, long rowVersion, Guid catalog, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeseriesCatalogUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.setString(4, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1TimeseriesCatalog( Guid id, long rowVersion, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeseriesCatalogUpdate1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2TimeseriesCatalog( Guid id, long rowVersion, Guid catalog ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeseriesCatalogUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, catalog);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTimeseriesCatalog( TimeseriesCatalogObject timeseriesCatalogObject ) throws SQLException {
        Guid id = timeseriesCatalogObject.getId();
        long rowVersion = timeseriesCatalogObject.getRowVersion();
        Guid catalog = timeseriesCatalogObject.getCatalog();
        String name = timeseriesCatalogObject.getName();
        var result = updateTimeseriesCatalog( id, rowVersion, catalog, name );
        if( result.isSuccess( ) ) {
            timeseriesCatalogObject.setRowVersion(result.getRowVersion());
            timeseriesCatalogObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1TimeseriesCatalog( TimeseriesCatalogObject timeseriesCatalogObject ) throws SQLException {
        Guid id = timeseriesCatalogObject.getId();
        long rowVersion = timeseriesCatalogObject.getRowVersion();
        String name = timeseriesCatalogObject.getName();
        var result = update1TimeseriesCatalog( id, rowVersion, name );
        if( result.isSuccess( ) ) {
            timeseriesCatalogObject.setRowVersion(result.getRowVersion());
            timeseriesCatalogObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2TimeseriesCatalog( TimeseriesCatalogObject timeseriesCatalogObject ) throws SQLException {
        Guid id = timeseriesCatalogObject.getId();
        long rowVersion = timeseriesCatalogObject.getRowVersion();
        Guid catalog = timeseriesCatalogObject.getCatalog();
        var result = update2TimeseriesCatalog( id, rowVersion, catalog );
        if( result.isSuccess( ) ) {
            timeseriesCatalogObject.setRowVersion(result.getRowVersion());
            timeseriesCatalogObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTimeseriesCatalog( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TimeseriesCatalogDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTimeseriesCatalog( TimeseriesCatalogObject timeseriesCatalogObject ) throws SQLException {
        var id = timeseriesCatalogObject.getId( );
        var rowVersion = timeseriesCatalogObject.getRowVersion();
        var result = deleteTimeseriesCatalog( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTimeseriesInfo( Guid id, DateTime firstTimestamp, DateTime lastTimestamp, long count ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TimeseriesInfoInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setLongFromNullableDateTime(2, firstTimestamp);
            callableStatement.setLongFromNullableDateTime(3, lastTimestamp);
            callableStatement.setInt64(4, count);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTimeseriesInfo( TimeseriesInfoObject timeseriesInfoObject ) throws SQLException {
        Guid id = timeseriesInfoObject.getId( );
        DateTime firstTimestamp = timeseriesInfoObject.getFirstTimestamp( );
        DateTime lastTimestamp = timeseriesInfoObject.getLastTimestamp( );
        long count = timeseriesInfoObject.getCount( );
        var result = insertTimeseriesInfo( id, firstTimestamp, lastTimestamp, count );
        if( result.isSuccess() ) {
            timeseriesInfoObject.setId(result.getId());
            timeseriesInfoObject.setRowVersion(0);
            timeseriesInfoObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTimeseriesInfo( Guid id, long rowVersion, DateTime firstTimestamp, DateTime lastTimestamp, long count ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeseriesInfoUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setLongFromNullableDateTime(3, firstTimestamp);
            callableStatement.setLongFromNullableDateTime(4, lastTimestamp);
            callableStatement.setInt64(5, count);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTimeseriesInfo( TimeseriesInfoObject timeseriesInfoObject ) throws SQLException {
        Guid id = timeseriesInfoObject.getId();
        long rowVersion = timeseriesInfoObject.getRowVersion();
        DateTime firstTimestamp = timeseriesInfoObject.getFirstTimestamp();
        DateTime lastTimestamp = timeseriesInfoObject.getLastTimestamp();
        long count = timeseriesInfoObject.getCount();
        var result = updateTimeseriesInfo( id, rowVersion, firstTimestamp, lastTimestamp, count );
        if( result.isSuccess( ) ) {
            timeseriesInfoObject.setRowVersion(result.getRowVersion());
            timeseriesInfoObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTimeseriesInfo( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TimeseriesInfoDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTimeseriesInfo( TimeseriesInfoObject timeseriesInfoObject ) throws SQLException {
        var id = timeseriesInfoObject.getId( );
        var rowVersion = timeseriesInfoObject.getRowVersion();
        var result = deleteTimeseriesInfo( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTimeSpanTimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, TimeSpan value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TimeSpanTimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableTimeSpan(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTimeSpanTimeseriesValue( TimeSpanTimeseriesValueObject timeSpanTimeseriesValueObject ) throws SQLException {
        Guid id = timeSpanTimeseriesValueObject.getId( );
        Guid timeseries = timeSpanTimeseriesValueObject.getTimeseries( );
        DateTime timestamp = timeSpanTimeseriesValueObject.getTimestamp( );
        TimeSpan value = timeSpanTimeseriesValueObject.getValue( );
        var result = insertTimeSpanTimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            timeSpanTimeseriesValueObject.setId(result.getId());
            timeSpanTimeseriesValueObject.setRowVersion(0);
            timeSpanTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTimeSpanTimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, TimeSpan value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TimeSpanTimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableTimeSpan(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTimeSpanTimeseriesValue( TimeSpanTimeseriesValueObject timeSpanTimeseriesValueObject ) throws SQLException {
        Guid id = timeSpanTimeseriesValueObject.getId();
        long rowVersion = timeSpanTimeseriesValueObject.getRowVersion();
        Guid timeseries = timeSpanTimeseriesValueObject.getTimeseries();
        DateTime timestamp = timeSpanTimeseriesValueObject.getTimestamp();
        TimeSpan value = timeSpanTimeseriesValueObject.getValue();
        var result = updateTimeSpanTimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            timeSpanTimeseriesValueObject.setRowVersion(result.getRowVersion());
            timeSpanTimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTimeSpanTimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TimeSpanTimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTimeSpanTimeseriesValue( TimeSpanTimeseriesValueObject timeSpanTimeseriesValueObject ) throws SQLException {
        var id = timeSpanTimeseriesValueObject.getId( );
        var rowVersion = timeSpanTimeseriesValueObject.getRowVersion();
        var result = deleteTimeSpanTimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTrackableItemTrackLink( Guid id, Guid item, Guid track, DateTime start, DateTime end ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TrackableItemTrackLinkInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, item);
            callableStatement.setGuid(3, track);
            callableStatement.setLongFromDateTime(4, start);
            callableStatement.setLongFromNullableDateTime(5, end);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTrackableItemTrackLink( TrackableItemTrackLinkObject trackableItemTrackLinkObject ) throws SQLException {
        Guid id = trackableItemTrackLinkObject.getId( );
        Guid item = trackableItemTrackLinkObject.getItem( );
        Guid track = trackableItemTrackLinkObject.getTrack( );
        DateTime start = trackableItemTrackLinkObject.getStart( );
        DateTime end = trackableItemTrackLinkObject.getEnd( );
        var result = insertTrackableItemTrackLink( id, item, track, start, end );
        if( result.isSuccess() ) {
            trackableItemTrackLinkObject.setId(result.getId());
            trackableItemTrackLinkObject.setRowVersion(0);
            trackableItemTrackLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTrackableItemTrackLink( Guid id, long rowVersion, Guid item, Guid track, DateTime start, DateTime end ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TrackableItemTrackLinkUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, item);
            callableStatement.setGuid(4, track);
            callableStatement.setLongFromDateTime(5, start);
            callableStatement.setLongFromNullableDateTime(6, end);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTrackableItemTrackLink( TrackableItemTrackLinkObject trackableItemTrackLinkObject ) throws SQLException {
        Guid id = trackableItemTrackLinkObject.getId();
        long rowVersion = trackableItemTrackLinkObject.getRowVersion();
        Guid item = trackableItemTrackLinkObject.getItem();
        Guid track = trackableItemTrackLinkObject.getTrack();
        DateTime start = trackableItemTrackLinkObject.getStart();
        DateTime end = trackableItemTrackLinkObject.getEnd();
        var result = updateTrackableItemTrackLink( id, rowVersion, item, track, start, end );
        if( result.isSuccess( ) ) {
            trackableItemTrackLinkObject.setRowVersion(result.getRowVersion());
            trackableItemTrackLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTrackableItemTrackLink( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TrackableItemTrackLinkDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTrackableItemTrackLink( TrackableItemTrackLinkObject trackableItemTrackLinkObject ) throws SQLException {
        var id = trackableItemTrackLinkObject.getId( );
        var rowVersion = trackableItemTrackLinkObject.getRowVersion();
        var result = deleteTrackableItemTrackLink( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTrack( Guid id, Guid tracker, long trackNumber, DateTime timestamp ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TrackInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, tracker);
            callableStatement.setInt64(3, trackNumber);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTrack( TrackObject trackObject ) throws SQLException {
        Guid id = trackObject.getId( );
        Guid tracker = trackObject.getTracker( );
        long trackNumber = trackObject.getTrackNumber( );
        DateTime timestamp = trackObject.getTimestamp( );
        var result = insertTrack( id, tracker, trackNumber, timestamp );
        if( result.isSuccess() ) {
            trackObject.setId(result.getId());
            trackObject.setRowVersion(0);
            trackObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTrack( Guid id, long rowVersion, Guid tracker, long trackNumber, DateTime timestamp ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TrackUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, tracker);
            callableStatement.setInt64(4, trackNumber);
            callableStatement.setLongFromDateTime(5, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTrack( TrackObject trackObject ) throws SQLException {
        Guid id = trackObject.getId();
        long rowVersion = trackObject.getRowVersion();
        Guid tracker = trackObject.getTracker();
        long trackNumber = trackObject.getTrackNumber();
        DateTime timestamp = trackObject.getTimestamp();
        var result = updateTrack( id, rowVersion, tracker, trackNumber, timestamp );
        if( result.isSuccess( ) ) {
            trackObject.setRowVersion(result.getRowVersion());
            trackObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTrack( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TrackDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTrack( TrackObject trackObject ) throws SQLException {
        var id = trackObject.getId( );
        var rowVersion = trackObject.getRowVersion();
        var result = deleteTrack( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTrack3D( Guid id, Guid tracker, long trackNumber, DateTime timestamp ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call Track3DInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, tracker);
            callableStatement.setInt64(3, trackNumber);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTrack3D( Track3DObject track3DObject ) throws SQLException {
        Guid id = track3DObject.getId( );
        Guid tracker = track3DObject.getTracker( );
        long trackNumber = track3DObject.getTrackNumber( );
        DateTime timestamp = track3DObject.getTimestamp( );
        var result = insertTrack3D( id, tracker, trackNumber, timestamp );
        if( result.isSuccess() ) {
            track3DObject.setId(result.getId());
            track3DObject.setRowVersion(0);
            track3DObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTrack3D( Guid id, long rowVersion, Guid tracker, long trackNumber, DateTime timestamp ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call Track3DUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, tracker);
            callableStatement.setInt64(4, trackNumber);
            callableStatement.setLongFromDateTime(5, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTrack3D( Track3DObject track3DObject ) throws SQLException {
        Guid id = track3DObject.getId();
        long rowVersion = track3DObject.getRowVersion();
        Guid tracker = track3DObject.getTracker();
        long trackNumber = track3DObject.getTrackNumber();
        DateTime timestamp = track3DObject.getTimestamp();
        var result = updateTrack3D( id, rowVersion, tracker, trackNumber, timestamp );
        if( result.isSuccess( ) ) {
            track3DObject.setRowVersion(result.getRowVersion());
            track3DObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTrack3D( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call Track3DDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTrack3D( Track3DObject track3DObject ) throws SQLException {
        var id = track3DObject.getId( );
        var rowVersion = track3DObject.getRowVersion();
        var result = deleteTrack3D( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTrackerFilterParameters( Guid id, Guid tracker, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TrackerFilterParametersInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, tracker);
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTrackerFilterParameters( TrackerFilterParametersObject trackerFilterParametersObject ) throws SQLException {
        Guid id = trackerFilterParametersObject.getId( );
        Guid tracker = trackerFilterParametersObject.getTracker( );
        String name = trackerFilterParametersObject.getName( );
        var result = insertTrackerFilterParameters( id, tracker, name );
        if( result.isSuccess() ) {
            trackerFilterParametersObject.setId(result.getId());
            trackerFilterParametersObject.setRowVersion(0);
            trackerFilterParametersObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTrackerFilterParameters( Guid id, long rowVersion, Guid tracker, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TrackerFilterParametersUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, tracker);
            callableStatement.setString(4, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTrackerFilterParameters( TrackerFilterParametersObject trackerFilterParametersObject ) throws SQLException {
        Guid id = trackerFilterParametersObject.getId();
        long rowVersion = trackerFilterParametersObject.getRowVersion();
        Guid tracker = trackerFilterParametersObject.getTracker();
        String name = trackerFilterParametersObject.getName();
        var result = updateTrackerFilterParameters( id, rowVersion, tracker, name );
        if( result.isSuccess( ) ) {
            trackerFilterParametersObject.setRowVersion(result.getRowVersion());
            trackerFilterParametersObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTrackerFilterParameters( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TrackerFilterParametersDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTrackerFilterParameters( TrackerFilterParametersObject trackerFilterParametersObject ) throws SQLException {
        var id = trackerFilterParametersObject.getId( );
        var rowVersion = trackerFilterParametersObject.getRowVersion();
        var result = deleteTrackerFilterParameters( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTrackerFilterParametersConfiguration( Guid id, Guid parameters, DateTime timestamp, boolean useNaivePredictor, int numberOfPoints, int windowSize, int stabilizeCount, int maxBadPoints, int modelType, double sigmaR, double sigmaAcc, double tauVel, double tauAcc, double deltaRMin, double deltaVMax, double deltaAMax ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TrackerFilterParametersConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, parameters);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setBoolean(4, useNaivePredictor);
            callableStatement.setInt32(5, numberOfPoints);
            callableStatement.setInt32(6, windowSize);
            callableStatement.setInt32(7, stabilizeCount);
            callableStatement.setInt32(8, maxBadPoints);
            callableStatement.setInt32(9, modelType);
            callableStatement.setDouble(10, sigmaR);
            callableStatement.setDouble(11, sigmaAcc);
            callableStatement.setDouble(12, tauVel);
            callableStatement.setDouble(13, tauAcc);
            callableStatement.setDouble(14, deltaRMin);
            callableStatement.setDouble(15, deltaVMax);
            callableStatement.setDouble(16, deltaAMax);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTrackerFilterParametersConfiguration( TrackerFilterParametersConfigurationObject trackerFilterParametersConfigurationObject ) throws SQLException {
        Guid id = trackerFilterParametersConfigurationObject.getId( );
        Guid parameters = trackerFilterParametersConfigurationObject.getParameters( );
        DateTime timestamp = trackerFilterParametersConfigurationObject.getTimestamp( );
        boolean useNaivePredictor = trackerFilterParametersConfigurationObject.getUseNaivePredictor( );
        int numberOfPoints = trackerFilterParametersConfigurationObject.getNumberOfPoints( );
        int windowSize = trackerFilterParametersConfigurationObject.getWindowSize( );
        int stabilizeCount = trackerFilterParametersConfigurationObject.getStabilizeCount( );
        int maxBadPoints = trackerFilterParametersConfigurationObject.getMaxBadPoints( );
        int modelType = trackerFilterParametersConfigurationObject.getModelType( );
        double sigmaR = trackerFilterParametersConfigurationObject.getSigmaR( );
        double sigmaAcc = trackerFilterParametersConfigurationObject.getSigmaAcc( );
        double tauVel = trackerFilterParametersConfigurationObject.getTauVel( );
        double tauAcc = trackerFilterParametersConfigurationObject.getTauAcc( );
        double deltaRMin = trackerFilterParametersConfigurationObject.getDeltaRMin( );
        double deltaVMax = trackerFilterParametersConfigurationObject.getDeltaVMax( );
        double deltaAMax = trackerFilterParametersConfigurationObject.getDeltaAMax( );
        var result = insertTrackerFilterParametersConfiguration( id, parameters, timestamp, useNaivePredictor, numberOfPoints, windowSize, stabilizeCount, maxBadPoints, modelType, sigmaR, sigmaAcc, tauVel, tauAcc, deltaRMin, deltaVMax, deltaAMax );
        if( result.isSuccess() ) {
            trackerFilterParametersConfigurationObject.setId(result.getId());
            trackerFilterParametersConfigurationObject.setRowVersion(0);
            trackerFilterParametersConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTrackerFilterParametersConfiguration( Guid id, long rowVersion, Guid parameters, DateTime timestamp, boolean useNaivePredictor, int numberOfPoints, int windowSize, int stabilizeCount, int maxBadPoints, int modelType, double sigmaR, double sigmaAcc, double tauVel, double tauAcc, double deltaRMin, double deltaVMax, double deltaAMax ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TrackerFilterParametersConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, parameters);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setBoolean(5, useNaivePredictor);
            callableStatement.setInt32(6, numberOfPoints);
            callableStatement.setInt32(7, windowSize);
            callableStatement.setInt32(8, stabilizeCount);
            callableStatement.setInt32(9, maxBadPoints);
            callableStatement.setInt32(10, modelType);
            callableStatement.setDouble(11, sigmaR);
            callableStatement.setDouble(12, sigmaAcc);
            callableStatement.setDouble(13, tauVel);
            callableStatement.setDouble(14, tauAcc);
            callableStatement.setDouble(15, deltaRMin);
            callableStatement.setDouble(16, deltaVMax);
            callableStatement.setDouble(17, deltaAMax);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTrackerFilterParametersConfiguration( TrackerFilterParametersConfigurationObject trackerFilterParametersConfigurationObject ) throws SQLException {
        Guid id = trackerFilterParametersConfigurationObject.getId();
        long rowVersion = trackerFilterParametersConfigurationObject.getRowVersion();
        Guid parameters = trackerFilterParametersConfigurationObject.getParameters();
        DateTime timestamp = trackerFilterParametersConfigurationObject.getTimestamp();
        boolean useNaivePredictor = trackerFilterParametersConfigurationObject.getUseNaivePredictor();
        int numberOfPoints = trackerFilterParametersConfigurationObject.getNumberOfPoints();
        int windowSize = trackerFilterParametersConfigurationObject.getWindowSize();
        int stabilizeCount = trackerFilterParametersConfigurationObject.getStabilizeCount();
        int maxBadPoints = trackerFilterParametersConfigurationObject.getMaxBadPoints();
        int modelType = trackerFilterParametersConfigurationObject.getModelType();
        double sigmaR = trackerFilterParametersConfigurationObject.getSigmaR();
        double sigmaAcc = trackerFilterParametersConfigurationObject.getSigmaAcc();
        double tauVel = trackerFilterParametersConfigurationObject.getTauVel();
        double tauAcc = trackerFilterParametersConfigurationObject.getTauAcc();
        double deltaRMin = trackerFilterParametersConfigurationObject.getDeltaRMin();
        double deltaVMax = trackerFilterParametersConfigurationObject.getDeltaVMax();
        double deltaAMax = trackerFilterParametersConfigurationObject.getDeltaAMax();
        var result = updateTrackerFilterParametersConfiguration( id, rowVersion, parameters, timestamp, useNaivePredictor, numberOfPoints, windowSize, stabilizeCount, maxBadPoints, modelType, sigmaR, sigmaAcc, tauVel, tauAcc, deltaRMin, deltaVMax, deltaAMax );
        if( result.isSuccess( ) ) {
            trackerFilterParametersConfigurationObject.setRowVersion(result.getRowVersion());
            trackerFilterParametersConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTrackerFilterParametersConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TrackerFilterParametersConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTrackerFilterParametersConfiguration( TrackerFilterParametersConfigurationObject trackerFilterParametersConfigurationObject ) throws SQLException {
        var id = trackerFilterParametersConfigurationObject.getId( );
        var rowVersion = trackerFilterParametersConfigurationObject.getRowVersion();
        var result = deleteTrackerFilterParametersConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTrackInfo( Guid id, DateTime firstTimestamp, DateTime lastTimestamp, long count, Double northWestLatitude, Double northWestLongitude, Double southEastLatitude, Double southEastLongitude ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TrackInfoInsert(?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setLongFromNullableDateTime(2, firstTimestamp);
            callableStatement.setLongFromNullableDateTime(3, lastTimestamp);
            callableStatement.setInt64(4, count);
            callableStatement.setNullableDouble(5, northWestLatitude);
            callableStatement.setNullableDouble(6, northWestLongitude);
            callableStatement.setNullableDouble(7, southEastLatitude);
            callableStatement.setNullableDouble(8, southEastLongitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTrackInfo( TrackInfoObject trackInfoObject ) throws SQLException {
        Guid id = trackInfoObject.getId( );
        DateTime firstTimestamp = trackInfoObject.getFirstTimestamp( );
        DateTime lastTimestamp = trackInfoObject.getLastTimestamp( );
        long count = trackInfoObject.getCount( );
        Double northWestLatitude = trackInfoObject.getNorthWestLatitude( );
        Double northWestLongitude = trackInfoObject.getNorthWestLongitude( );
        Double southEastLatitude = trackInfoObject.getSouthEastLatitude( );
        Double southEastLongitude = trackInfoObject.getSouthEastLongitude( );
        var result = insertTrackInfo( id, firstTimestamp, lastTimestamp, count, northWestLatitude, northWestLongitude, southEastLatitude, southEastLongitude );
        if( result.isSuccess() ) {
            trackInfoObject.setId(result.getId());
            trackInfoObject.setRowVersion(0);
            trackInfoObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTrackInfo( Guid id, long rowVersion, DateTime firstTimestamp, DateTime lastTimestamp, long count, Double northWestLatitude, Double northWestLongitude, Double southEastLatitude, Double southEastLongitude ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TrackInfoUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setLongFromNullableDateTime(3, firstTimestamp);
            callableStatement.setLongFromNullableDateTime(4, lastTimestamp);
            callableStatement.setInt64(5, count);
            callableStatement.setNullableDouble(6, northWestLatitude);
            callableStatement.setNullableDouble(7, northWestLongitude);
            callableStatement.setNullableDouble(8, southEastLatitude);
            callableStatement.setNullableDouble(9, southEastLongitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTrackInfo( TrackInfoObject trackInfoObject ) throws SQLException {
        Guid id = trackInfoObject.getId();
        long rowVersion = trackInfoObject.getRowVersion();
        DateTime firstTimestamp = trackInfoObject.getFirstTimestamp();
        DateTime lastTimestamp = trackInfoObject.getLastTimestamp();
        long count = trackInfoObject.getCount();
        Double northWestLatitude = trackInfoObject.getNorthWestLatitude();
        Double northWestLongitude = trackInfoObject.getNorthWestLongitude();
        Double southEastLatitude = trackInfoObject.getSouthEastLatitude();
        Double southEastLongitude = trackInfoObject.getSouthEastLongitude();
        var result = updateTrackInfo( id, rowVersion, firstTimestamp, lastTimestamp, count, northWestLatitude, northWestLongitude, southEastLatitude, southEastLongitude );
        if( result.isSuccess( ) ) {
            trackInfoObject.setRowVersion(result.getRowVersion());
            trackInfoObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTrackInfo( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TrackInfoDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTrackInfo( TrackInfoObject trackInfoObject ) throws SQLException {
        var id = trackInfoObject.getId( );
        var rowVersion = trackInfoObject.getRowVersion();
        var result = deleteTrackInfo( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTrackingServiceOptions( Guid id, DateTime timestamp, TimeSpan timerInterval, TimeSpan maxAgeOfCurrentTrackValue, double falseThreshold, double distanceThreshold, double distanceUnmergeThreshold, long unmergeLatency, boolean kalmanFiltering, double maxCourseDeviation, double maxSpeedDeviation, double minimumSpeedThreshold ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TrackingServiceOptionsInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setLongFromDateTime(2, timestamp);
            callableStatement.setTimeSpan(3, timerInterval);
            callableStatement.setTimeSpan(4, maxAgeOfCurrentTrackValue);
            callableStatement.setDouble(5, falseThreshold);
            callableStatement.setDouble(6, distanceThreshold);
            callableStatement.setDouble(7, distanceUnmergeThreshold);
            callableStatement.setInt64(8, unmergeLatency);
            callableStatement.setBoolean(9, kalmanFiltering);
            callableStatement.setDouble(10, maxCourseDeviation);
            callableStatement.setDouble(11, maxSpeedDeviation);
            callableStatement.setDouble(12, minimumSpeedThreshold);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTrackingServiceOptions( TrackingServiceOptionsObject trackingServiceOptionsObject ) throws SQLException {
        Guid id = trackingServiceOptionsObject.getId( );
        DateTime timestamp = trackingServiceOptionsObject.getTimestamp( );
        TimeSpan timerInterval = trackingServiceOptionsObject.getTimerInterval( );
        TimeSpan maxAgeOfCurrentTrackValue = trackingServiceOptionsObject.getMaxAgeOfCurrentTrackValue( );
        double falseThreshold = trackingServiceOptionsObject.getFalseThreshold( );
        double distanceThreshold = trackingServiceOptionsObject.getDistanceThreshold( );
        double distanceUnmergeThreshold = trackingServiceOptionsObject.getDistanceUnmergeThreshold( );
        long unmergeLatency = trackingServiceOptionsObject.getUnmergeLatency( );
        boolean kalmanFiltering = trackingServiceOptionsObject.getKalmanFiltering( );
        double maxCourseDeviation = trackingServiceOptionsObject.getMaxCourseDeviation( );
        double maxSpeedDeviation = trackingServiceOptionsObject.getMaxSpeedDeviation( );
        double minimumSpeedThreshold = trackingServiceOptionsObject.getMinimumSpeedThreshold( );
        var result = insertTrackingServiceOptions( id, timestamp, timerInterval, maxAgeOfCurrentTrackValue, falseThreshold, distanceThreshold, distanceUnmergeThreshold, unmergeLatency, kalmanFiltering, maxCourseDeviation, maxSpeedDeviation, minimumSpeedThreshold );
        if( result.isSuccess() ) {
            trackingServiceOptionsObject.setId(result.getId());
            trackingServiceOptionsObject.setRowVersion(0);
            trackingServiceOptionsObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTrackingServiceOptions( Guid id, long rowVersion, DateTime timestamp, TimeSpan timerInterval, TimeSpan maxAgeOfCurrentTrackValue, double falseThreshold, double distanceThreshold, double distanceUnmergeThreshold, long unmergeLatency, boolean kalmanFiltering, double maxCourseDeviation, double maxSpeedDeviation, double minimumSpeedThreshold ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TrackingServiceOptionsUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setTimeSpan(4, timerInterval);
            callableStatement.setTimeSpan(5, maxAgeOfCurrentTrackValue);
            callableStatement.setDouble(6, falseThreshold);
            callableStatement.setDouble(7, distanceThreshold);
            callableStatement.setDouble(8, distanceUnmergeThreshold);
            callableStatement.setInt64(9, unmergeLatency);
            callableStatement.setBoolean(10, kalmanFiltering);
            callableStatement.setDouble(11, maxCourseDeviation);
            callableStatement.setDouble(12, maxSpeedDeviation);
            callableStatement.setDouble(13, minimumSpeedThreshold);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTrackingServiceOptions( TrackingServiceOptionsObject trackingServiceOptionsObject ) throws SQLException {
        Guid id = trackingServiceOptionsObject.getId();
        long rowVersion = trackingServiceOptionsObject.getRowVersion();
        DateTime timestamp = trackingServiceOptionsObject.getTimestamp();
        TimeSpan timerInterval = trackingServiceOptionsObject.getTimerInterval();
        TimeSpan maxAgeOfCurrentTrackValue = trackingServiceOptionsObject.getMaxAgeOfCurrentTrackValue();
        double falseThreshold = trackingServiceOptionsObject.getFalseThreshold();
        double distanceThreshold = trackingServiceOptionsObject.getDistanceThreshold();
        double distanceUnmergeThreshold = trackingServiceOptionsObject.getDistanceUnmergeThreshold();
        long unmergeLatency = trackingServiceOptionsObject.getUnmergeLatency();
        boolean kalmanFiltering = trackingServiceOptionsObject.getKalmanFiltering();
        double maxCourseDeviation = trackingServiceOptionsObject.getMaxCourseDeviation();
        double maxSpeedDeviation = trackingServiceOptionsObject.getMaxSpeedDeviation();
        double minimumSpeedThreshold = trackingServiceOptionsObject.getMinimumSpeedThreshold();
        var result = updateTrackingServiceOptions( id, rowVersion, timestamp, timerInterval, maxAgeOfCurrentTrackValue, falseThreshold, distanceThreshold, distanceUnmergeThreshold, unmergeLatency, kalmanFiltering, maxCourseDeviation, maxSpeedDeviation, minimumSpeedThreshold );
        if( result.isSuccess( ) ) {
            trackingServiceOptionsObject.setRowVersion(result.getRowVersion());
            trackingServiceOptionsObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTrackingServiceOptions( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TrackingServiceOptionsDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTrackingServiceOptions( TrackingServiceOptionsObject trackingServiceOptionsObject ) throws SQLException {
        var id = trackingServiceOptionsObject.getId( );
        var rowVersion = trackingServiceOptionsObject.getRowVersion();
        var result = deleteTrackingServiceOptions( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTrackLink( Guid id, Guid primary, Guid secondary, DateTime start, DateTime end ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TrackLinkInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, primary);
            callableStatement.setGuid(3, secondary);
            callableStatement.setLongFromDateTime(4, start);
            callableStatement.setLongFromNullableDateTime(5, end);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTrackLink( TrackLinkObject trackLinkObject ) throws SQLException {
        Guid id = trackLinkObject.getId( );
        Guid primary = trackLinkObject.getPrimary( );
        Guid secondary = trackLinkObject.getSecondary( );
        DateTime start = trackLinkObject.getStart( );
        DateTime end = trackLinkObject.getEnd( );
        var result = insertTrackLink( id, primary, secondary, start, end );
        if( result.isSuccess() ) {
            trackLinkObject.setId(result.getId());
            trackLinkObject.setRowVersion(0);
            trackLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTrackLink( Guid id, long rowVersion, Guid primary, Guid secondary, DateTime start, DateTime end ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TrackLinkUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, primary);
            callableStatement.setGuid(4, secondary);
            callableStatement.setLongFromDateTime(5, start);
            callableStatement.setLongFromNullableDateTime(6, end);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTrackLink( TrackLinkObject trackLinkObject ) throws SQLException {
        Guid id = trackLinkObject.getId();
        long rowVersion = trackLinkObject.getRowVersion();
        Guid primary = trackLinkObject.getPrimary();
        Guid secondary = trackLinkObject.getSecondary();
        DateTime start = trackLinkObject.getStart();
        DateTime end = trackLinkObject.getEnd();
        var result = updateTrackLink( id, rowVersion, primary, secondary, start, end );
        if( result.isSuccess( ) ) {
            trackLinkObject.setRowVersion(result.getRowVersion());
            trackLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTrackLink( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TrackLinkDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTrackLink( TrackLinkObject trackLinkObject ) throws SQLException {
        var id = trackLinkObject.getId( );
        var rowVersion = trackLinkObject.getRowVersion();
        var result = deleteTrackLink( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTrackValue( Guid id, Guid track, DateTime timestamp, int flags, int status, double latitude, double longitude, double speed, double course, double heading ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TrackValueInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, track);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, flags);
            callableStatement.setInt32(5, status);
            callableStatement.setDouble(6, latitude);
            callableStatement.setDouble(7, longitude);
            callableStatement.setDouble(8, speed);
            callableStatement.setDouble(9, course);
            callableStatement.setDouble(10, heading);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTrackValue( TrackValueObject trackValueObject ) throws SQLException {
        Guid id = trackValueObject.getId( );
        Guid track = trackValueObject.getTrack( );
        DateTime timestamp = trackValueObject.getTimestamp( );
        int flags = trackValueObject.getFlags( );
        int status = trackValueObject.getStatus( );
        double latitude = trackValueObject.getLatitude( );
        double longitude = trackValueObject.getLongitude( );
        double speed = trackValueObject.getSpeed( );
        double course = trackValueObject.getCourse( );
        double heading = trackValueObject.getHeading( );
        var result = insertTrackValue( id, track, timestamp, flags, status, latitude, longitude, speed, course, heading );
        if( result.isSuccess() ) {
            trackValueObject.setId(result.getId());
            trackValueObject.setRowVersion(0);
            trackValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTrackValue( Guid id, long rowVersion, Guid track, DateTime timestamp, int flags, int status, double latitude, double longitude, double speed, double course, double heading ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TrackValueUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, track);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, flags);
            callableStatement.setInt32(6, status);
            callableStatement.setDouble(7, latitude);
            callableStatement.setDouble(8, longitude);
            callableStatement.setDouble(9, speed);
            callableStatement.setDouble(10, course);
            callableStatement.setDouble(11, heading);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTrackValue( TrackValueObject trackValueObject ) throws SQLException {
        Guid id = trackValueObject.getId();
        long rowVersion = trackValueObject.getRowVersion();
        Guid track = trackValueObject.getTrack();
        DateTime timestamp = trackValueObject.getTimestamp();
        int flags = trackValueObject.getFlags();
        int status = trackValueObject.getStatus();
        double latitude = trackValueObject.getLatitude();
        double longitude = trackValueObject.getLongitude();
        double speed = trackValueObject.getSpeed();
        double course = trackValueObject.getCourse();
        double heading = trackValueObject.getHeading();
        var result = updateTrackValue( id, rowVersion, track, timestamp, flags, status, latitude, longitude, speed, course, heading );
        if( result.isSuccess( ) ) {
            trackValueObject.setRowVersion(result.getRowVersion());
            trackValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTrackValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TrackValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTrackValue( TrackValueObject trackValueObject ) throws SQLException {
        var id = trackValueObject.getId( );
        var rowVersion = trackValueObject.getRowVersion();
        var result = deleteTrackValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertTrackValue3D( Guid id, Guid track, DateTime timestamp, int flags, int status, double latitude, double longitude, double altitude, double speed, double course, double rateOfClimb ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call TrackValue3DInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, track);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, flags);
            callableStatement.setUInt32(5, status);
            callableStatement.setDouble(6, latitude);
            callableStatement.setDouble(7, longitude);
            callableStatement.setDouble(8, altitude);
            callableStatement.setDouble(9, speed);
            callableStatement.setDouble(10, course);
            callableStatement.setDouble(11, rateOfClimb);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertTrackValue3D( TrackValue3DObject trackValue3DObject ) throws SQLException {
        Guid id = trackValue3DObject.getId( );
        Guid track = trackValue3DObject.getTrack( );
        DateTime timestamp = trackValue3DObject.getTimestamp( );
        int flags = trackValue3DObject.getFlags( );
        int status = trackValue3DObject.getStatus( );
        double latitude = trackValue3DObject.getLatitude( );
        double longitude = trackValue3DObject.getLongitude( );
        double altitude = trackValue3DObject.getAltitude( );
        double speed = trackValue3DObject.getSpeed( );
        double course = trackValue3DObject.getCourse( );
        double rateOfClimb = trackValue3DObject.getRateOfClimb( );
        var result = insertTrackValue3D( id, track, timestamp, flags, status, latitude, longitude, altitude, speed, course, rateOfClimb );
        if( result.isSuccess() ) {
            trackValue3DObject.setId(result.getId());
            trackValue3DObject.setRowVersion(0);
            trackValue3DObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateTrackValue3D( Guid id, long rowVersion, Guid track, DateTime timestamp, int flags, int status, double latitude, double longitude, double altitude, double speed, double course, double rateOfClimb ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call TrackValue3DUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, track);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, flags);
            callableStatement.setUInt32(6, status);
            callableStatement.setDouble(7, latitude);
            callableStatement.setDouble(8, longitude);
            callableStatement.setDouble(9, altitude);
            callableStatement.setDouble(10, speed);
            callableStatement.setDouble(11, course);
            callableStatement.setDouble(12, rateOfClimb);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateTrackValue3D( TrackValue3DObject trackValue3DObject ) throws SQLException {
        Guid id = trackValue3DObject.getId();
        long rowVersion = trackValue3DObject.getRowVersion();
        Guid track = trackValue3DObject.getTrack();
        DateTime timestamp = trackValue3DObject.getTimestamp();
        int flags = trackValue3DObject.getFlags();
        int status = trackValue3DObject.getStatus();
        double latitude = trackValue3DObject.getLatitude();
        double longitude = trackValue3DObject.getLongitude();
        double altitude = trackValue3DObject.getAltitude();
        double speed = trackValue3DObject.getSpeed();
        double course = trackValue3DObject.getCourse();
        double rateOfClimb = trackValue3DObject.getRateOfClimb();
        var result = updateTrackValue3D( id, rowVersion, track, timestamp, flags, status, latitude, longitude, altitude, speed, course, rateOfClimb );
        if( result.isSuccess( ) ) {
            trackValue3DObject.setRowVersion(result.getRowVersion());
            trackValue3DObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteTrackValue3D( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call TrackValue3DDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteTrackValue3D( TrackValue3DObject trackValue3DObject ) throws SQLException {
        var id = trackValue3DObject.getId( );
        var rowVersion = trackValue3DObject.getRowVersion();
        var result = deleteTrackValue3D( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt16TimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Short value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt16TimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableUInt16(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt16TimeseriesValue( UInt16TimeseriesValueObject uInt16TimeseriesValueObject ) throws SQLException {
        Guid id = uInt16TimeseriesValueObject.getId( );
        Guid timeseries = uInt16TimeseriesValueObject.getTimeseries( );
        DateTime timestamp = uInt16TimeseriesValueObject.getTimestamp( );
        Short value = uInt16TimeseriesValueObject.getValue( );
        var result = insertUInt16TimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            uInt16TimeseriesValueObject.setId(result.getId());
            uInt16TimeseriesValueObject.setRowVersion(0);
            uInt16TimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateUInt16TimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Short value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt16TimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableUInt16(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt16TimeseriesValue( UInt16TimeseriesValueObject uInt16TimeseriesValueObject ) throws SQLException {
        Guid id = uInt16TimeseriesValueObject.getId();
        long rowVersion = uInt16TimeseriesValueObject.getRowVersion();
        Guid timeseries = uInt16TimeseriesValueObject.getTimeseries();
        DateTime timestamp = uInt16TimeseriesValueObject.getTimestamp();
        Short value = uInt16TimeseriesValueObject.getValue();
        var result = updateUInt16TimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            uInt16TimeseriesValueObject.setRowVersion(result.getRowVersion());
            uInt16TimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt16TimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt16TimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt16TimeseriesValue( UInt16TimeseriesValueObject uInt16TimeseriesValueObject ) throws SQLException {
        var id = uInt16TimeseriesValueObject.getId( );
        var rowVersion = uInt16TimeseriesValueObject.getRowVersion();
        var result = deleteUInt16TimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt32TimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Integer value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt32TimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableUInt32(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt32TimeseriesValue( UInt32TimeseriesValueObject uInt32TimeseriesValueObject ) throws SQLException {
        Guid id = uInt32TimeseriesValueObject.getId( );
        Guid timeseries = uInt32TimeseriesValueObject.getTimeseries( );
        DateTime timestamp = uInt32TimeseriesValueObject.getTimestamp( );
        Integer value = uInt32TimeseriesValueObject.getValue( );
        var result = insertUInt32TimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            uInt32TimeseriesValueObject.setId(result.getId());
            uInt32TimeseriesValueObject.setRowVersion(0);
            uInt32TimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateUInt32TimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Integer value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt32TimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableUInt32(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt32TimeseriesValue( UInt32TimeseriesValueObject uInt32TimeseriesValueObject ) throws SQLException {
        Guid id = uInt32TimeseriesValueObject.getId();
        long rowVersion = uInt32TimeseriesValueObject.getRowVersion();
        Guid timeseries = uInt32TimeseriesValueObject.getTimeseries();
        DateTime timestamp = uInt32TimeseriesValueObject.getTimestamp();
        Integer value = uInt32TimeseriesValueObject.getValue();
        var result = updateUInt32TimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            uInt32TimeseriesValueObject.setRowVersion(result.getRowVersion());
            uInt32TimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt32TimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt32TimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt32TimeseriesValue( UInt32TimeseriesValueObject uInt32TimeseriesValueObject ) throws SQLException {
        var id = uInt32TimeseriesValueObject.getId( );
        var rowVersion = uInt32TimeseriesValueObject.getRowVersion();
        var result = deleteUInt32TimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertUInt64TimeseriesValue( Guid id, Guid timeseries, DateTime timestamp, Long value ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call UInt64TimeseriesValueInsert(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, timeseries);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableInt64(4, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertUInt64TimeseriesValue( UInt64TimeseriesValueObject uInt64TimeseriesValueObject ) throws SQLException {
        Guid id = uInt64TimeseriesValueObject.getId( );
        Guid timeseries = uInt64TimeseriesValueObject.getTimeseries( );
        DateTime timestamp = uInt64TimeseriesValueObject.getTimestamp( );
        Long value = uInt64TimeseriesValueObject.getValue( );
        var result = insertUInt64TimeseriesValue( id, timeseries, timestamp, value );
        if( result.isSuccess() ) {
            uInt64TimeseriesValueObject.setId(result.getId());
            uInt64TimeseriesValueObject.setRowVersion(0);
            uInt64TimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateUInt64TimeseriesValue( Guid id, long rowVersion, Guid timeseries, DateTime timestamp, Long value ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call UInt64TimeseriesValueUpdate(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, timeseries);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableInt64(5, value);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateUInt64TimeseriesValue( UInt64TimeseriesValueObject uInt64TimeseriesValueObject ) throws SQLException {
        Guid id = uInt64TimeseriesValueObject.getId();
        long rowVersion = uInt64TimeseriesValueObject.getRowVersion();
        Guid timeseries = uInt64TimeseriesValueObject.getTimeseries();
        DateTime timestamp = uInt64TimeseriesValueObject.getTimestamp();
        Long value = uInt64TimeseriesValueObject.getValue();
        var result = updateUInt64TimeseriesValue( id, rowVersion, timeseries, timestamp, value );
        if( result.isSuccess( ) ) {
            uInt64TimeseriesValueObject.setRowVersion(result.getRowVersion());
            uInt64TimeseriesValueObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteUInt64TimeseriesValue( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call UInt64TimeseriesValueDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteUInt64TimeseriesValue( UInt64TimeseriesValueObject uInt64TimeseriesValueObject ) throws SQLException {
        var id = uInt64TimeseriesValueObject.getId( );
        var rowVersion = uInt64TimeseriesValueObject.getRowVersion();
        var result = deleteUInt64TimeseriesValue( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertVehicleType( Guid id, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call VehicleTypeInsert(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertVehicleType( VehicleTypeObject vehicleTypeObject ) throws SQLException {
        Guid id = vehicleTypeObject.getId( );
        String name = vehicleTypeObject.getName( );
        var result = insertVehicleType( id, name );
        if( result.isSuccess() ) {
            vehicleTypeObject.setId(result.getId());
            vehicleTypeObject.setRowVersion(0);
            vehicleTypeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateVehicleType( Guid id, long rowVersion, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VehicleTypeUpdate(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateVehicleType( VehicleTypeObject vehicleTypeObject ) throws SQLException {
        Guid id = vehicleTypeObject.getId();
        long rowVersion = vehicleTypeObject.getRowVersion();
        String name = vehicleTypeObject.getName();
        var result = updateVehicleType( id, rowVersion, name );
        if( result.isSuccess( ) ) {
            vehicleTypeObject.setRowVersion(result.getRowVersion());
            vehicleTypeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteVehicleType( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call VehicleTypeDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteVehicleType( VehicleTypeObject vehicleTypeObject ) throws SQLException {
        var id = vehicleTypeObject.getId( );
        var rowVersion = vehicleTypeObject.getRowVersion();
        var result = deleteVehicleType( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertVesselType( Guid id, String name, int code ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call VesselTypeInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setInt32(3, code);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertVesselType( VesselTypeObject vesselTypeObject ) throws SQLException {
        Guid id = vesselTypeObject.getId( );
        String name = vesselTypeObject.getName( );
        int code = vesselTypeObject.getCode( );
        var result = insertVesselType( id, name, code );
        if( result.isSuccess() ) {
            vesselTypeObject.setId(result.getId());
            vesselTypeObject.setRowVersion(0);
            vesselTypeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateVesselType( Guid id, long rowVersion, String name, int code ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call VesselTypeUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setInt32(4, code);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateVesselType( VesselTypeObject vesselTypeObject ) throws SQLException {
        Guid id = vesselTypeObject.getId();
        long rowVersion = vesselTypeObject.getRowVersion();
        String name = vesselTypeObject.getName();
        int code = vesselTypeObject.getCode();
        var result = updateVesselType( id, rowVersion, name, code );
        if( result.isSuccess( ) ) {
            vesselTypeObject.setRowVersion(result.getRowVersion());
            vesselTypeObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteVesselType( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call VesselTypeDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteVesselType( VesselTypeObject vesselTypeObject ) throws SQLException {
        var id = vesselTypeObject.getId( );
        var rowVersion = vesselTypeObject.getRowVersion();
        var result = deleteVesselType( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertView( Guid id, String name, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid zoomLevelTimeseries ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ViewInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setNullableGuid(3, latitudeTimeseries);
            callableStatement.setNullableGuid(4, longitudeTimeseries);
            callableStatement.setNullableGuid(5, zoomLevelTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1View( Guid id, String name ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ViewInsert1(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertView( ViewObject viewObject ) throws SQLException {
        Guid id = viewObject.getId( );
        String name = viewObject.getName( );
        Guid latitudeTimeseries = viewObject.getLatitudeTimeseries( );
        Guid longitudeTimeseries = viewObject.getLongitudeTimeseries( );
        Guid zoomLevelTimeseries = viewObject.getZoomLevelTimeseries( );
        var result = insertView( id, name, latitudeTimeseries, longitudeTimeseries, zoomLevelTimeseries );
        if( result.isSuccess() ) {
            viewObject.setId(result.getId());
            viewObject.setRowVersion(0);
            viewObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1View( ViewObject viewObject ) throws SQLException {
        Guid id = viewObject.getId( );
        String name = viewObject.getName( );
        var result = insert1View( id, name );
        if( result.isSuccess( ) ) {
            viewObject.setId( result.getId( ) );
            viewObject.setRowVersion(0);
            viewObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateView( Guid id, long rowVersion, String name, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid zoomLevelTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setNullableGuid(4, latitudeTimeseries);
            callableStatement.setNullableGuid(5, longitudeTimeseries);
            callableStatement.setNullableGuid(6, zoomLevelTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1View( Guid id, long rowVersion, String name ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewUpdate1(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2View( Guid id, long rowVersion, Guid latitudeTimeseries, Guid longitudeTimeseries, Guid zoomLevelTimeseries ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewUpdate2(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, latitudeTimeseries);
            callableStatement.setNullableGuid(4, longitudeTimeseries);
            callableStatement.setNullableGuid(5, zoomLevelTimeseries);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateView( ViewObject viewObject ) throws SQLException {
        Guid id = viewObject.getId();
        long rowVersion = viewObject.getRowVersion();
        String name = viewObject.getName();
        Guid latitudeTimeseries = viewObject.getLatitudeTimeseries();
        Guid longitudeTimeseries = viewObject.getLongitudeTimeseries();
        Guid zoomLevelTimeseries = viewObject.getZoomLevelTimeseries();
        var result = updateView( id, rowVersion, name, latitudeTimeseries, longitudeTimeseries, zoomLevelTimeseries );
        if( result.isSuccess( ) ) {
            viewObject.setRowVersion(result.getRowVersion());
            viewObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1View( ViewObject viewObject ) throws SQLException {
        Guid id = viewObject.getId();
        long rowVersion = viewObject.getRowVersion();
        String name = viewObject.getName();
        var result = update1View( id, rowVersion, name );
        if( result.isSuccess( ) ) {
            viewObject.setRowVersion(result.getRowVersion());
            viewObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2View( ViewObject viewObject ) throws SQLException {
        Guid id = viewObject.getId();
        long rowVersion = viewObject.getRowVersion();
        Guid latitudeTimeseries = viewObject.getLatitudeTimeseries();
        Guid longitudeTimeseries = viewObject.getLongitudeTimeseries();
        Guid zoomLevelTimeseries = viewObject.getZoomLevelTimeseries();
        var result = update2View( id, rowVersion, latitudeTimeseries, longitudeTimeseries, zoomLevelTimeseries );
        if( result.isSuccess( ) ) {
            viewObject.setRowVersion(result.getRowVersion());
            viewObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteView( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ViewDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteView( ViewObject viewObject ) throws SQLException {
        var id = viewObject.getId( );
        var rowVersion = viewObject.getRowVersion();
        var result = deleteView( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertViewCameraLink( Guid id, Guid view, Guid camera, DateTime start, DateTime end ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ViewCameraLinkInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, view);
            callableStatement.setGuid(3, camera);
            callableStatement.setLongFromDateTime(4, start);
            callableStatement.setLongFromNullableDateTime(5, end);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertViewCameraLink( ViewCameraLinkObject viewCameraLinkObject ) throws SQLException {
        Guid id = viewCameraLinkObject.getId( );
        Guid view = viewCameraLinkObject.getView( );
        Guid camera = viewCameraLinkObject.getCamera( );
        DateTime start = viewCameraLinkObject.getStart( );
        DateTime end = viewCameraLinkObject.getEnd( );
        var result = insertViewCameraLink( id, view, camera, start, end );
        if( result.isSuccess() ) {
            viewCameraLinkObject.setId(result.getId());
            viewCameraLinkObject.setRowVersion(0);
            viewCameraLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateViewCameraLink( Guid id, long rowVersion, Guid view, Guid camera, DateTime start, DateTime end ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewCameraLinkUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, view);
            callableStatement.setGuid(4, camera);
            callableStatement.setLongFromDateTime(5, start);
            callableStatement.setLongFromNullableDateTime(6, end);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateViewCameraLink( ViewCameraLinkObject viewCameraLinkObject ) throws SQLException {
        Guid id = viewCameraLinkObject.getId();
        long rowVersion = viewCameraLinkObject.getRowVersion();
        Guid view = viewCameraLinkObject.getView();
        Guid camera = viewCameraLinkObject.getCamera();
        DateTime start = viewCameraLinkObject.getStart();
        DateTime end = viewCameraLinkObject.getEnd();
        var result = updateViewCameraLink( id, rowVersion, view, camera, start, end );
        if( result.isSuccess( ) ) {
            viewCameraLinkObject.setRowVersion(result.getRowVersion());
            viewCameraLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteViewCameraLink( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ViewCameraLinkDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteViewCameraLink( ViewCameraLinkObject viewCameraLinkObject ) throws SQLException {
        var id = viewCameraLinkObject.getId( );
        var rowVersion = viewCameraLinkObject.getRowVersion();
        var result = deleteViewCameraLink( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertViewTrackerLink( Guid id, Guid view, Guid tracker, DateTime start, DateTime end ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ViewTrackerLinkInsert(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, view);
            callableStatement.setGuid(3, tracker);
            callableStatement.setLongFromDateTime(4, start);
            callableStatement.setLongFromNullableDateTime(5, end);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertViewTrackerLink( ViewTrackerLinkObject viewTrackerLinkObject ) throws SQLException {
        Guid id = viewTrackerLinkObject.getId( );
        Guid view = viewTrackerLinkObject.getView( );
        Guid tracker = viewTrackerLinkObject.getTracker( );
        DateTime start = viewTrackerLinkObject.getStart( );
        DateTime end = viewTrackerLinkObject.getEnd( );
        var result = insertViewTrackerLink( id, view, tracker, start, end );
        if( result.isSuccess() ) {
            viewTrackerLinkObject.setId(result.getId());
            viewTrackerLinkObject.setRowVersion(0);
            viewTrackerLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateViewTrackerLink( Guid id, long rowVersion, Guid view, Guid tracker, DateTime start, DateTime end ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ViewTrackerLinkUpdate(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, view);
            callableStatement.setGuid(4, tracker);
            callableStatement.setLongFromDateTime(5, start);
            callableStatement.setLongFromNullableDateTime(6, end);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateViewTrackerLink( ViewTrackerLinkObject viewTrackerLinkObject ) throws SQLException {
        Guid id = viewTrackerLinkObject.getId();
        long rowVersion = viewTrackerLinkObject.getRowVersion();
        Guid view = viewTrackerLinkObject.getView();
        Guid tracker = viewTrackerLinkObject.getTracker();
        DateTime start = viewTrackerLinkObject.getStart();
        DateTime end = viewTrackerLinkObject.getEnd();
        var result = updateViewTrackerLink( id, rowVersion, view, tracker, start, end );
        if( result.isSuccess( ) ) {
            viewTrackerLinkObject.setRowVersion(result.getRowVersion());
            viewTrackerLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteViewTrackerLink( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ViewTrackerLinkDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteViewTrackerLink( ViewTrackerLinkObject viewTrackerLinkObject ) throws SQLException {
        var id = viewTrackerLinkObject.getId( );
        var rowVersion = viewTrackerLinkObject.getRowVersion();
        var result = deleteViewTrackerLink( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertWeatherStationCommand( Guid id, Guid weatherStation, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationCommandInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, weatherStation);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.setNullableGuid(6, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1WeatherStationCommand( Guid id, Guid weatherStation, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationCommandInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, weatherStation);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, deviceCommandSourceType);
            callableStatement.setGuid(5, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertWeatherStationCommand( WeatherStationCommandObject weatherStationCommandObject ) throws SQLException {
        Guid id = weatherStationCommandObject.getId( );
        Guid weatherStation = weatherStationCommandObject.getWeatherStation( );
        DateTime timestamp = weatherStationCommandObject.getTimestamp( );
        int deviceCommandSourceType = weatherStationCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = weatherStationCommandObject.getDeviceCommandSourceId( );
        Guid reply = weatherStationCommandObject.getReply( );
        var result = insertWeatherStationCommand( id, weatherStation, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess() ) {
            weatherStationCommandObject.setId(result.getId());
            weatherStationCommandObject.setRowVersion(0);
            weatherStationCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1WeatherStationCommand( WeatherStationCommandObject weatherStationCommandObject ) throws SQLException {
        Guid id = weatherStationCommandObject.getId( );
        Guid weatherStation = weatherStationCommandObject.getWeatherStation( );
        DateTime timestamp = weatherStationCommandObject.getTimestamp( );
        int deviceCommandSourceType = weatherStationCommandObject.getDeviceCommandSourceType( );
        Guid deviceCommandSourceId = weatherStationCommandObject.getDeviceCommandSourceId( );
        var result = insert1WeatherStationCommand( id, weatherStation, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            weatherStationCommandObject.setId( result.getId( ) );
            weatherStationCommandObject.setRowVersion(0);
            weatherStationCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateWeatherStationCommand( Guid id, long rowVersion, Guid weatherStation, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationCommandUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, weatherStation);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.setNullableGuid(7, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1WeatherStationCommand( Guid id, long rowVersion, Guid weatherStation, DateTime timestamp, int deviceCommandSourceType, Guid deviceCommandSourceId ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationCommandUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, weatherStation);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, deviceCommandSourceType);
            callableStatement.setGuid(6, deviceCommandSourceId);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2WeatherStationCommand( Guid id, long rowVersion, Guid reply ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationCommandUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, reply);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateWeatherStationCommand( WeatherStationCommandObject weatherStationCommandObject ) throws SQLException {
        Guid id = weatherStationCommandObject.getId();
        long rowVersion = weatherStationCommandObject.getRowVersion();
        Guid weatherStation = weatherStationCommandObject.getWeatherStation();
        DateTime timestamp = weatherStationCommandObject.getTimestamp();
        int deviceCommandSourceType = weatherStationCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = weatherStationCommandObject.getDeviceCommandSourceId();
        Guid reply = weatherStationCommandObject.getReply();
        var result = updateWeatherStationCommand( id, rowVersion, weatherStation, timestamp, deviceCommandSourceType, deviceCommandSourceId, reply );
        if( result.isSuccess( ) ) {
            weatherStationCommandObject.setRowVersion(result.getRowVersion());
            weatherStationCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1WeatherStationCommand( WeatherStationCommandObject weatherStationCommandObject ) throws SQLException {
        Guid id = weatherStationCommandObject.getId();
        long rowVersion = weatherStationCommandObject.getRowVersion();
        Guid weatherStation = weatherStationCommandObject.getWeatherStation();
        DateTime timestamp = weatherStationCommandObject.getTimestamp();
        int deviceCommandSourceType = weatherStationCommandObject.getDeviceCommandSourceType();
        Guid deviceCommandSourceId = weatherStationCommandObject.getDeviceCommandSourceId();
        var result = update1WeatherStationCommand( id, rowVersion, weatherStation, timestamp, deviceCommandSourceType, deviceCommandSourceId );
        if( result.isSuccess( ) ) {
            weatherStationCommandObject.setRowVersion(result.getRowVersion());
            weatherStationCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2WeatherStationCommand( WeatherStationCommandObject weatherStationCommandObject ) throws SQLException {
        Guid id = weatherStationCommandObject.getId();
        long rowVersion = weatherStationCommandObject.getRowVersion();
        Guid reply = weatherStationCommandObject.getReply();
        var result = update2WeatherStationCommand( id, rowVersion, reply );
        if( result.isSuccess( ) ) {
            weatherStationCommandObject.setRowVersion(result.getRowVersion());
            weatherStationCommandObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteWeatherStationCommand( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call WeatherStationCommandDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteWeatherStationCommand( WeatherStationCommandObject weatherStationCommandObject ) throws SQLException {
        var id = weatherStationCommandObject.getId( );
        var rowVersion = weatherStationCommandObject.getRowVersion();
        var result = deleteWeatherStationCommand( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertWeatherStationCommandReply( Guid id, Guid weatherStation, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationCommandReplyInsert(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, weatherStation);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setNullableGuid(4, command);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1WeatherStationCommandReply( Guid id, Guid weatherStation, DateTime timestamp, int status, String message ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationCommandReplyInsert1(?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, weatherStation);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setInt32(4, status);
            callableStatement.setString(5, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertWeatherStationCommandReply( WeatherStationCommandReplyObject weatherStationCommandReplyObject ) throws SQLException {
        Guid id = weatherStationCommandReplyObject.getId( );
        Guid weatherStation = weatherStationCommandReplyObject.getWeatherStation( );
        DateTime timestamp = weatherStationCommandReplyObject.getTimestamp( );
        Guid command = weatherStationCommandReplyObject.getCommand( );
        int status = weatherStationCommandReplyObject.getStatus( );
        String message = weatherStationCommandReplyObject.getMessage( );
        var result = insertWeatherStationCommandReply( id, weatherStation, timestamp, command, status, message );
        if( result.isSuccess() ) {
            weatherStationCommandReplyObject.setId(result.getId());
            weatherStationCommandReplyObject.setRowVersion(0);
            weatherStationCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1WeatherStationCommandReply( WeatherStationCommandReplyObject weatherStationCommandReplyObject ) throws SQLException {
        Guid id = weatherStationCommandReplyObject.getId( );
        Guid weatherStation = weatherStationCommandReplyObject.getWeatherStation( );
        DateTime timestamp = weatherStationCommandReplyObject.getTimestamp( );
        int status = weatherStationCommandReplyObject.getStatus( );
        String message = weatherStationCommandReplyObject.getMessage( );
        var result = insert1WeatherStationCommandReply( id, weatherStation, timestamp, status, message );
        if( result.isSuccess( ) ) {
            weatherStationCommandReplyObject.setId( result.getId( ) );
            weatherStationCommandReplyObject.setRowVersion(0);
            weatherStationCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateWeatherStationCommandReply( Guid id, long rowVersion, Guid weatherStation, DateTime timestamp, Guid command, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationCommandReplyUpdate(?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, weatherStation);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setNullableGuid(5, command);
            callableStatement.setInt32(6, status);
            callableStatement.setString(7, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1WeatherStationCommandReply( Guid id, long rowVersion, Guid weatherStation, DateTime timestamp, int status, String message ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationCommandReplyUpdate1(?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, weatherStation);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setInt32(5, status);
            callableStatement.setString(6, message);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2WeatherStationCommandReply( Guid id, long rowVersion, Guid command ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationCommandReplyUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, command);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateWeatherStationCommandReply( WeatherStationCommandReplyObject weatherStationCommandReplyObject ) throws SQLException {
        Guid id = weatherStationCommandReplyObject.getId();
        long rowVersion = weatherStationCommandReplyObject.getRowVersion();
        Guid weatherStation = weatherStationCommandReplyObject.getWeatherStation();
        DateTime timestamp = weatherStationCommandReplyObject.getTimestamp();
        Guid command = weatherStationCommandReplyObject.getCommand();
        int status = weatherStationCommandReplyObject.getStatus();
        String message = weatherStationCommandReplyObject.getMessage();
        var result = updateWeatherStationCommandReply( id, rowVersion, weatherStation, timestamp, command, status, message );
        if( result.isSuccess( ) ) {
            weatherStationCommandReplyObject.setRowVersion(result.getRowVersion());
            weatherStationCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1WeatherStationCommandReply( WeatherStationCommandReplyObject weatherStationCommandReplyObject ) throws SQLException {
        Guid id = weatherStationCommandReplyObject.getId();
        long rowVersion = weatherStationCommandReplyObject.getRowVersion();
        Guid weatherStation = weatherStationCommandReplyObject.getWeatherStation();
        DateTime timestamp = weatherStationCommandReplyObject.getTimestamp();
        int status = weatherStationCommandReplyObject.getStatus();
        String message = weatherStationCommandReplyObject.getMessage();
        var result = update1WeatherStationCommandReply( id, rowVersion, weatherStation, timestamp, status, message );
        if( result.isSuccess( ) ) {
            weatherStationCommandReplyObject.setRowVersion(result.getRowVersion());
            weatherStationCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2WeatherStationCommandReply( WeatherStationCommandReplyObject weatherStationCommandReplyObject ) throws SQLException {
        Guid id = weatherStationCommandReplyObject.getId();
        long rowVersion = weatherStationCommandReplyObject.getRowVersion();
        Guid command = weatherStationCommandReplyObject.getCommand();
        var result = update2WeatherStationCommandReply( id, rowVersion, command );
        if( result.isSuccess( ) ) {
            weatherStationCommandReplyObject.setRowVersion(result.getRowVersion());
            weatherStationCommandReplyObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteWeatherStationCommandReply( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call WeatherStationCommandReplyDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteWeatherStationCommandReply( WeatherStationCommandReplyObject weatherStationCommandReplyObject ) throws SQLException {
        var id = weatherStationCommandReplyObject.getId( );
        var rowVersion = weatherStationCommandReplyObject.getRowVersion();
        var result = deleteWeatherStationCommandReply( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertWeatherStationConfiguration( Guid id, Guid weatherStation, DateTime timestamp, TimeSpan noDataTimeOut, TimeSpan sendInterval, double latitude, double longitude, double gyroOffset, boolean enableAveraging, TimeSpan averagingInterval ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call WeatherStationConfigurationInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, weatherStation);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.setTimeSpan(4, noDataTimeOut);
            callableStatement.setTimeSpan(5, sendInterval);
            callableStatement.setDouble(6, latitude);
            callableStatement.setDouble(7, longitude);
            callableStatement.setDouble(8, gyroOffset);
            callableStatement.setBoolean(9, enableAveraging);
            callableStatement.setTimeSpan(10, averagingInterval);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertWeatherStationConfiguration( WeatherStationConfigurationObject weatherStationConfigurationObject ) throws SQLException {
        Guid id = weatherStationConfigurationObject.getId( );
        Guid weatherStation = weatherStationConfigurationObject.getWeatherStation( );
        DateTime timestamp = weatherStationConfigurationObject.getTimestamp( );
        TimeSpan noDataTimeOut = weatherStationConfigurationObject.getNoDataTimeOut( );
        TimeSpan sendInterval = weatherStationConfigurationObject.getSendInterval( );
        double latitude = weatherStationConfigurationObject.getLatitude( );
        double longitude = weatherStationConfigurationObject.getLongitude( );
        double gyroOffset = weatherStationConfigurationObject.getGyroOffset( );
        boolean enableAveraging = weatherStationConfigurationObject.getEnableAveraging( );
        TimeSpan averagingInterval = weatherStationConfigurationObject.getAveragingInterval( );
        var result = insertWeatherStationConfiguration( id, weatherStation, timestamp, noDataTimeOut, sendInterval, latitude, longitude, gyroOffset, enableAveraging, averagingInterval );
        if( result.isSuccess() ) {
            weatherStationConfigurationObject.setId(result.getId());
            weatherStationConfigurationObject.setRowVersion(0);
            weatherStationConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateWeatherStationConfiguration( Guid id, long rowVersion, Guid weatherStation, DateTime timestamp, TimeSpan noDataTimeOut, TimeSpan sendInterval, double latitude, double longitude, double gyroOffset, boolean enableAveraging, TimeSpan averagingInterval ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call WeatherStationConfigurationUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, weatherStation);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setTimeSpan(5, noDataTimeOut);
            callableStatement.setTimeSpan(6, sendInterval);
            callableStatement.setDouble(7, latitude);
            callableStatement.setDouble(8, longitude);
            callableStatement.setDouble(9, gyroOffset);
            callableStatement.setBoolean(10, enableAveraging);
            callableStatement.setTimeSpan(11, averagingInterval);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateWeatherStationConfiguration( WeatherStationConfigurationObject weatherStationConfigurationObject ) throws SQLException {
        Guid id = weatherStationConfigurationObject.getId();
        long rowVersion = weatherStationConfigurationObject.getRowVersion();
        Guid weatherStation = weatherStationConfigurationObject.getWeatherStation();
        DateTime timestamp = weatherStationConfigurationObject.getTimestamp();
        TimeSpan noDataTimeOut = weatherStationConfigurationObject.getNoDataTimeOut();
        TimeSpan sendInterval = weatherStationConfigurationObject.getSendInterval();
        double latitude = weatherStationConfigurationObject.getLatitude();
        double longitude = weatherStationConfigurationObject.getLongitude();
        double gyroOffset = weatherStationConfigurationObject.getGyroOffset();
        boolean enableAveraging = weatherStationConfigurationObject.getEnableAveraging();
        TimeSpan averagingInterval = weatherStationConfigurationObject.getAveragingInterval();
        var result = updateWeatherStationConfiguration( id, rowVersion, weatherStation, timestamp, noDataTimeOut, sendInterval, latitude, longitude, gyroOffset, enableAveraging, averagingInterval );
        if( result.isSuccess( ) ) {
            weatherStationConfigurationObject.setRowVersion(result.getRowVersion());
            weatherStationConfigurationObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteWeatherStationConfiguration( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call WeatherStationConfigurationDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteWeatherStationConfiguration( WeatherStationConfigurationObject weatherStationConfigurationObject ) throws SQLException {
        var id = weatherStationConfigurationObject.getId( );
        var rowVersion = weatherStationConfigurationObject.getRowVersion();
        var result = deleteWeatherStationConfiguration( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertCircularZone( Guid id, String name, double longitude, double latitude, int alarmType, TimeSpan alarmTime, TimeSpan radarTrackMinimumLifetime, double speed, int strokeColor, int fillColor, double radius ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call CircularZoneInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setDouble(3, longitude);
            callableStatement.setDouble(4, latitude);
            callableStatement.setInt32(5, alarmType);
            callableStatement.setTimeSpan(6, alarmTime);
            callableStatement.setTimeSpan(7, radarTrackMinimumLifetime);
            callableStatement.setDouble(8, speed);
            callableStatement.setUInt32(9, strokeColor);
            callableStatement.setUInt32(10, fillColor);
            callableStatement.setDouble(11, radius);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertCircularZone( CircularZoneObject circularZoneObject ) throws SQLException {
        Guid id = circularZoneObject.getId( );
        String name = circularZoneObject.getName( );
        double longitude = circularZoneObject.getLongitude( );
        double latitude = circularZoneObject.getLatitude( );
        int alarmType = circularZoneObject.getAlarmType( );
        TimeSpan alarmTime = circularZoneObject.getAlarmTime( );
        TimeSpan radarTrackMinimumLifetime = circularZoneObject.getRadarTrackMinimumLifetime( );
        double speed = circularZoneObject.getSpeed( );
        int strokeColor = circularZoneObject.getStrokeColor( );
        int fillColor = circularZoneObject.getFillColor( );
        double radius = circularZoneObject.getRadius( );
        var result = insertCircularZone( id, name, longitude, latitude, alarmType, alarmTime, radarTrackMinimumLifetime, speed, strokeColor, fillColor, radius );
        if( result.isSuccess() ) {
            circularZoneObject.setId(result.getId());
            circularZoneObject.setRowVersion(0);
            circularZoneObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateCircularZone( Guid id, long rowVersion, String name, double longitude, double latitude, int alarmType, TimeSpan alarmTime, TimeSpan radarTrackMinimumLifetime, double speed, int strokeColor, int fillColor, double radius ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call CircularZoneUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setDouble(4, longitude);
            callableStatement.setDouble(5, latitude);
            callableStatement.setInt32(6, alarmType);
            callableStatement.setTimeSpan(7, alarmTime);
            callableStatement.setTimeSpan(8, radarTrackMinimumLifetime);
            callableStatement.setDouble(9, speed);
            callableStatement.setUInt32(10, strokeColor);
            callableStatement.setUInt32(11, fillColor);
            callableStatement.setDouble(12, radius);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateCircularZone( CircularZoneObject circularZoneObject ) throws SQLException {
        Guid id = circularZoneObject.getId();
        long rowVersion = circularZoneObject.getRowVersion();
        String name = circularZoneObject.getName();
        double longitude = circularZoneObject.getLongitude();
        double latitude = circularZoneObject.getLatitude();
        int alarmType = circularZoneObject.getAlarmType();
        TimeSpan alarmTime = circularZoneObject.getAlarmTime();
        TimeSpan radarTrackMinimumLifetime = circularZoneObject.getRadarTrackMinimumLifetime();
        double speed = circularZoneObject.getSpeed();
        int strokeColor = circularZoneObject.getStrokeColor();
        int fillColor = circularZoneObject.getFillColor();
        double radius = circularZoneObject.getRadius();
        var result = updateCircularZone( id, rowVersion, name, longitude, latitude, alarmType, alarmTime, radarTrackMinimumLifetime, speed, strokeColor, fillColor, radius );
        if( result.isSuccess( ) ) {
            circularZoneObject.setRowVersion(result.getRowVersion());
            circularZoneObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteCircularZone( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call CircularZoneDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteCircularZone( CircularZoneObject circularZoneObject ) throws SQLException {
        var id = circularZoneObject.getId( );
        var rowVersion = circularZoneObject.getRowVersion();
        var result = deleteCircularZone( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertPolygonZone( Guid id, String name, double longitude, double latitude, int alarmType, TimeSpan alarmTime, TimeSpan radarTrackMinimumLifetime, double speed, int strokeColor, int fillColor, byte[] polygon ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call PolygonZoneInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setString(2, name);
            callableStatement.setDouble(3, longitude);
            callableStatement.setDouble(4, latitude);
            callableStatement.setInt32(5, alarmType);
            callableStatement.setTimeSpan(6, alarmTime);
            callableStatement.setTimeSpan(7, radarTrackMinimumLifetime);
            callableStatement.setDouble(8, speed);
            callableStatement.setUInt32(9, strokeColor);
            callableStatement.setUInt32(10, fillColor);
            callableStatement.setBinary(11, polygon);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertPolygonZone( PolygonZoneObject polygonZoneObject ) throws SQLException {
        Guid id = polygonZoneObject.getId( );
        String name = polygonZoneObject.getName( );
        double longitude = polygonZoneObject.getLongitude( );
        double latitude = polygonZoneObject.getLatitude( );
        int alarmType = polygonZoneObject.getAlarmType( );
        TimeSpan alarmTime = polygonZoneObject.getAlarmTime( );
        TimeSpan radarTrackMinimumLifetime = polygonZoneObject.getRadarTrackMinimumLifetime( );
        double speed = polygonZoneObject.getSpeed( );
        int strokeColor = polygonZoneObject.getStrokeColor( );
        int fillColor = polygonZoneObject.getFillColor( );
        byte[] polygon = polygonZoneObject.getPolygon( );
        var result = insertPolygonZone( id, name, longitude, latitude, alarmType, alarmTime, radarTrackMinimumLifetime, speed, strokeColor, fillColor, polygon );
        if( result.isSuccess() ) {
            polygonZoneObject.setId(result.getId());
            polygonZoneObject.setRowVersion(0);
            polygonZoneObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updatePolygonZone( Guid id, long rowVersion, String name, double longitude, double latitude, int alarmType, TimeSpan alarmTime, TimeSpan radarTrackMinimumLifetime, double speed, int strokeColor, int fillColor, byte[] polygon ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call PolygonZoneUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setString(3, name);
            callableStatement.setDouble(4, longitude);
            callableStatement.setDouble(5, latitude);
            callableStatement.setInt32(6, alarmType);
            callableStatement.setTimeSpan(7, alarmTime);
            callableStatement.setTimeSpan(8, radarTrackMinimumLifetime);
            callableStatement.setDouble(9, speed);
            callableStatement.setUInt32(10, strokeColor);
            callableStatement.setUInt32(11, fillColor);
            callableStatement.setBinary(12, polygon);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updatePolygonZone( PolygonZoneObject polygonZoneObject ) throws SQLException {
        Guid id = polygonZoneObject.getId();
        long rowVersion = polygonZoneObject.getRowVersion();
        String name = polygonZoneObject.getName();
        double longitude = polygonZoneObject.getLongitude();
        double latitude = polygonZoneObject.getLatitude();
        int alarmType = polygonZoneObject.getAlarmType();
        TimeSpan alarmTime = polygonZoneObject.getAlarmTime();
        TimeSpan radarTrackMinimumLifetime = polygonZoneObject.getRadarTrackMinimumLifetime();
        double speed = polygonZoneObject.getSpeed();
        int strokeColor = polygonZoneObject.getStrokeColor();
        int fillColor = polygonZoneObject.getFillColor();
        byte[] polygon = polygonZoneObject.getPolygon();
        var result = updatePolygonZone( id, rowVersion, name, longitude, latitude, alarmType, alarmTime, radarTrackMinimumLifetime, speed, strokeColor, fillColor, polygon );
        if( result.isSuccess( ) ) {
            polygonZoneObject.setRowVersion(result.getRowVersion());
            polygonZoneObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deletePolygonZone( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call PolygonZoneDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deletePolygonZone( PolygonZoneObject polygonZoneObject ) throws SQLException {
        var id = polygonZoneObject.getId( );
        var rowVersion = polygonZoneObject.getRowVersion();
        var result = deletePolygonZone( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertZoneExceptions( Guid id, Guid zone, DateTime timestamp ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ZoneExceptionsInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, zone);
            callableStatement.setLongFromDateTime(3, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertZoneExceptions( ZoneExceptionsObject zoneExceptionsObject ) throws SQLException {
        Guid id = zoneExceptionsObject.getId( );
        Guid zone = zoneExceptionsObject.getZone( );
        DateTime timestamp = zoneExceptionsObject.getTimestamp( );
        var result = insertZoneExceptions( id, zone, timestamp );
        if( result.isSuccess() ) {
            zoneExceptionsObject.setId(result.getId());
            zoneExceptionsObject.setRowVersion(0);
            zoneExceptionsObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateZoneExceptions( Guid id, long rowVersion, Guid zone, DateTime timestamp ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ZoneExceptionsUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, zone);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateZoneExceptions( ZoneExceptionsObject zoneExceptionsObject ) throws SQLException {
        Guid id = zoneExceptionsObject.getId();
        long rowVersion = zoneExceptionsObject.getRowVersion();
        Guid zone = zoneExceptionsObject.getZone();
        DateTime timestamp = zoneExceptionsObject.getTimestamp();
        var result = updateZoneExceptions( id, rowVersion, zone, timestamp );
        if( result.isSuccess( ) ) {
            zoneExceptionsObject.setRowVersion(result.getRowVersion());
            zoneExceptionsObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteZoneExceptions( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ZoneExceptionsDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteZoneExceptions( ZoneExceptionsObject zoneExceptionsObject ) throws SQLException {
        var id = zoneExceptionsObject.getId( );
        var rowVersion = zoneExceptionsObject.getRowVersion();
        var result = deleteZoneExceptions( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertZoneExceptionsVesselLink( Guid id, Guid zoneExceptions, Guid vessel ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ZoneExceptionsVesselLinkInsert(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, zoneExceptions);
            callableStatement.setGuid(3, vessel);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertZoneExceptionsVesselLink( ZoneExceptionsVesselLinkObject zoneExceptionsVesselLinkObject ) throws SQLException {
        Guid id = zoneExceptionsVesselLinkObject.getId( );
        Guid zoneExceptions = zoneExceptionsVesselLinkObject.getZoneExceptions( );
        Guid vessel = zoneExceptionsVesselLinkObject.getVessel( );
        var result = insertZoneExceptionsVesselLink( id, zoneExceptions, vessel );
        if( result.isSuccess() ) {
            zoneExceptionsVesselLinkObject.setId(result.getId());
            zoneExceptionsVesselLinkObject.setRowVersion(0);
            zoneExceptionsVesselLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final UpdateRowVersionResult updateZoneExceptionsVesselLink( Guid id, long rowVersion, Guid zoneExceptions, Guid vessel ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ZoneExceptionsVesselLinkUpdate(?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, zoneExceptions);
            callableStatement.setGuid(4, vessel);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateZoneExceptionsVesselLink( ZoneExceptionsVesselLinkObject zoneExceptionsVesselLinkObject ) throws SQLException {
        Guid id = zoneExceptionsVesselLinkObject.getId();
        long rowVersion = zoneExceptionsVesselLinkObject.getRowVersion();
        Guid zoneExceptions = zoneExceptionsVesselLinkObject.getZoneExceptions();
        Guid vessel = zoneExceptionsVesselLinkObject.getVessel();
        var result = updateZoneExceptionsVesselLink( id, rowVersion, zoneExceptions, vessel );
        if( result.isSuccess( ) ) {
            zoneExceptionsVesselLinkObject.setRowVersion(result.getRowVersion());
            zoneExceptionsVesselLinkObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteZoneExceptionsVesselLink( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ZoneExceptionsVesselLinkDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteZoneExceptionsVesselLink( ZoneExceptionsVesselLinkObject zoneExceptionsVesselLinkObject ) throws SQLException {
        var id = zoneExceptionsVesselLinkObject.getId( );
        var rowVersion = zoneExceptionsVesselLinkObject.getRowVersion();
        var result = deleteZoneExceptionsVesselLink( id, rowVersion );
        return result;
    }
    public final InsertGuidKeyResult insertZoneTrackAlarm( Guid id, Guid track, Guid zone, Guid radarTrack, DateTime timestamp, double latitude, double longitude, double speed, Double course, Double heading, double enterLatitude, double enterLongitude, Double leaveLatitude, Double leaveLongitude ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ZoneTrackAlarmInsert(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, track);
            callableStatement.setGuid(3, zone);
            callableStatement.setNullableGuid(4, radarTrack);
            callableStatement.setLongFromDateTime(5, timestamp);
            callableStatement.setDouble(6, latitude);
            callableStatement.setDouble(7, longitude);
            callableStatement.setDouble(8, speed);
            callableStatement.setNullableDouble(9, course);
            callableStatement.setNullableDouble(10, heading);
            callableStatement.setDouble(11, enterLatitude);
            callableStatement.setDouble(12, enterLongitude);
            callableStatement.setNullableDouble(13, leaveLatitude);
            callableStatement.setNullableDouble(14, leaveLongitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final InsertGuidKeyResult insert1ZoneTrackAlarm( Guid id, Guid track, Guid zone, DateTime timestamp, double latitude, double longitude, double speed, Double course, Double heading, double enterLatitude, double enterLongitude, Double leaveLatitude, Double leaveLongitude ) throws SQLException {
        insertResult.reset( );
        var sqlStatement = "call ZoneTrackAlarmInsert1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            if ( id == null || id.isEmpty( ) ) {
                callableStatement.registerOutParameter( 1, Types.VARCHAR );
            }
            else {
                callableStatement.setGuid(1, id);
            }
            callableStatement.setGuid(2, track);
            callableStatement.setGuid(3, zone);
            callableStatement.setLongFromDateTime(4, timestamp);
            callableStatement.setDouble(5, latitude);
            callableStatement.setDouble(6, longitude);
            callableStatement.setDouble(7, speed);
            callableStatement.setNullableDouble(8, course);
            callableStatement.setNullableDouble(9, heading);
            callableStatement.setDouble(10, enterLatitude);
            callableStatement.setDouble(11, enterLongitude);
            callableStatement.setNullableDouble(12, leaveLatitude);
            callableStatement.setNullableDouble(13, leaveLongitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                if ( id == null || id.isEmpty( ) ) {
                    var returnedId = callableStatement.getGuid(1);
                    insertResult.assign(returnedId);
                }
                else {
                    insertResult.assign(id);
                }
            }
        }
        return insertResult;
    }

    public final boolean insertZoneTrackAlarm( ZoneTrackAlarmObject zoneTrackAlarmObject ) throws SQLException {
        Guid id = zoneTrackAlarmObject.getId( );
        Guid track = zoneTrackAlarmObject.getTrack( );
        Guid zone = zoneTrackAlarmObject.getZone( );
        Guid radarTrack = zoneTrackAlarmObject.getRadarTrack( );
        DateTime timestamp = zoneTrackAlarmObject.getTimestamp( );
        double latitude = zoneTrackAlarmObject.getLatitude( );
        double longitude = zoneTrackAlarmObject.getLongitude( );
        double speed = zoneTrackAlarmObject.getSpeed( );
        Double course = zoneTrackAlarmObject.getCourse( );
        Double heading = zoneTrackAlarmObject.getHeading( );
        double enterLatitude = zoneTrackAlarmObject.getEnterLatitude( );
        double enterLongitude = zoneTrackAlarmObject.getEnterLongitude( );
        Double leaveLatitude = zoneTrackAlarmObject.getLeaveLatitude( );
        Double leaveLongitude = zoneTrackAlarmObject.getLeaveLongitude( );
        var result = insertZoneTrackAlarm( id, track, zone, radarTrack, timestamp, latitude, longitude, speed, course, heading, enterLatitude, enterLongitude, leaveLatitude, leaveLongitude );
        if( result.isSuccess() ) {
            zoneTrackAlarmObject.setId(result.getId());
            zoneTrackAlarmObject.setRowVersion(0);
            zoneTrackAlarmObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess();
    }

    public final boolean insert1ZoneTrackAlarm( ZoneTrackAlarmObject zoneTrackAlarmObject ) throws SQLException {
        Guid id = zoneTrackAlarmObject.getId( );
        Guid track = zoneTrackAlarmObject.getTrack( );
        Guid zone = zoneTrackAlarmObject.getZone( );
        DateTime timestamp = zoneTrackAlarmObject.getTimestamp( );
        double latitude = zoneTrackAlarmObject.getLatitude( );
        double longitude = zoneTrackAlarmObject.getLongitude( );
        double speed = zoneTrackAlarmObject.getSpeed( );
        Double course = zoneTrackAlarmObject.getCourse( );
        Double heading = zoneTrackAlarmObject.getHeading( );
        double enterLatitude = zoneTrackAlarmObject.getEnterLatitude( );
        double enterLongitude = zoneTrackAlarmObject.getEnterLongitude( );
        Double leaveLatitude = zoneTrackAlarmObject.getLeaveLatitude( );
        Double leaveLongitude = zoneTrackAlarmObject.getLeaveLongitude( );
        var result = insert1ZoneTrackAlarm( id, track, zone, timestamp, latitude, longitude, speed, course, heading, enterLatitude, enterLongitude, leaveLatitude, leaveLongitude );
        if( result.isSuccess( ) ) {
            zoneTrackAlarmObject.setId( result.getId( ) );
            zoneTrackAlarmObject.setRowVersion(0);
            zoneTrackAlarmObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final UpdateRowVersionResult updateZoneTrackAlarm( Guid id, long rowVersion, Guid track, Guid zone, Guid radarTrack, DateTime timestamp, double latitude, double longitude, double speed, Double course, Double heading, double enterLatitude, double enterLongitude, Double leaveLatitude, Double leaveLongitude ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ZoneTrackAlarmUpdate(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, track);
            callableStatement.setGuid(4, zone);
            callableStatement.setNullableGuid(5, radarTrack);
            callableStatement.setLongFromDateTime(6, timestamp);
            callableStatement.setDouble(7, latitude);
            callableStatement.setDouble(8, longitude);
            callableStatement.setDouble(9, speed);
            callableStatement.setNullableDouble(10, course);
            callableStatement.setNullableDouble(11, heading);
            callableStatement.setDouble(12, enterLatitude);
            callableStatement.setDouble(13, enterLongitude);
            callableStatement.setNullableDouble(14, leaveLatitude);
            callableStatement.setNullableDouble(15, leaveLongitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update1ZoneTrackAlarm( Guid id, long rowVersion, Guid track, Guid zone, DateTime timestamp, double latitude, double longitude, double speed, Double course, Double heading, double enterLatitude, double enterLongitude, Double leaveLatitude, Double leaveLongitude ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ZoneTrackAlarmUpdate1(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setGuid(3, track);
            callableStatement.setGuid(4, zone);
            callableStatement.setLongFromDateTime(5, timestamp);
            callableStatement.setDouble(6, latitude);
            callableStatement.setDouble(7, longitude);
            callableStatement.setDouble(8, speed);
            callableStatement.setNullableDouble(9, course);
            callableStatement.setNullableDouble(10, heading);
            callableStatement.setDouble(11, enterLatitude);
            callableStatement.setDouble(12, enterLongitude);
            callableStatement.setNullableDouble(13, leaveLatitude);
            callableStatement.setNullableDouble(14, leaveLongitude);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final UpdateRowVersionResult update2ZoneTrackAlarm( Guid id, long rowVersion, Guid radarTrack ) throws SQLException {
        updateResult.reset();
        var sqlStatement = "call ZoneTrackAlarmUpdate2(?, ?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.setNullableGuid(3, radarTrack);
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                var returnedRowVersion = callableStatement.getInt64(2);
                updateResult.assign(returnedRowVersion);
            }
        }
        return updateResult;
    }

    public final boolean updateZoneTrackAlarm( ZoneTrackAlarmObject zoneTrackAlarmObject ) throws SQLException {
        Guid id = zoneTrackAlarmObject.getId();
        long rowVersion = zoneTrackAlarmObject.getRowVersion();
        Guid track = zoneTrackAlarmObject.getTrack();
        Guid zone = zoneTrackAlarmObject.getZone();
        Guid radarTrack = zoneTrackAlarmObject.getRadarTrack();
        DateTime timestamp = zoneTrackAlarmObject.getTimestamp();
        double latitude = zoneTrackAlarmObject.getLatitude();
        double longitude = zoneTrackAlarmObject.getLongitude();
        double speed = zoneTrackAlarmObject.getSpeed();
        Double course = zoneTrackAlarmObject.getCourse();
        Double heading = zoneTrackAlarmObject.getHeading();
        double enterLatitude = zoneTrackAlarmObject.getEnterLatitude();
        double enterLongitude = zoneTrackAlarmObject.getEnterLongitude();
        Double leaveLatitude = zoneTrackAlarmObject.getLeaveLatitude();
        Double leaveLongitude = zoneTrackAlarmObject.getLeaveLongitude();
        var result = updateZoneTrackAlarm( id, rowVersion, track, zone, radarTrack, timestamp, latitude, longitude, speed, course, heading, enterLatitude, enterLongitude, leaveLatitude, leaveLongitude );
        if( result.isSuccess( ) ) {
            zoneTrackAlarmObject.setRowVersion(result.getRowVersion());
            zoneTrackAlarmObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update1ZoneTrackAlarm( ZoneTrackAlarmObject zoneTrackAlarmObject ) throws SQLException {
        Guid id = zoneTrackAlarmObject.getId();
        long rowVersion = zoneTrackAlarmObject.getRowVersion();
        Guid track = zoneTrackAlarmObject.getTrack();
        Guid zone = zoneTrackAlarmObject.getZone();
        DateTime timestamp = zoneTrackAlarmObject.getTimestamp();
        double latitude = zoneTrackAlarmObject.getLatitude();
        double longitude = zoneTrackAlarmObject.getLongitude();
        double speed = zoneTrackAlarmObject.getSpeed();
        Double course = zoneTrackAlarmObject.getCourse();
        Double heading = zoneTrackAlarmObject.getHeading();
        double enterLatitude = zoneTrackAlarmObject.getEnterLatitude();
        double enterLongitude = zoneTrackAlarmObject.getEnterLongitude();
        Double leaveLatitude = zoneTrackAlarmObject.getLeaveLatitude();
        Double leaveLongitude = zoneTrackAlarmObject.getLeaveLongitude();
        var result = update1ZoneTrackAlarm( id, rowVersion, track, zone, timestamp, latitude, longitude, speed, course, heading, enterLatitude, enterLongitude, leaveLatitude, leaveLongitude );
        if( result.isSuccess( ) ) {
            zoneTrackAlarmObject.setRowVersion(result.getRowVersion());
            zoneTrackAlarmObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean update2ZoneTrackAlarm( ZoneTrackAlarmObject zoneTrackAlarmObject ) throws SQLException {
        Guid id = zoneTrackAlarmObject.getId();
        long rowVersion = zoneTrackAlarmObject.getRowVersion();
        Guid radarTrack = zoneTrackAlarmObject.getRadarTrack();
        var result = update2ZoneTrackAlarm( id, rowVersion, radarTrack );
        if( result.isSuccess( ) ) {
            zoneTrackAlarmObject.setRowVersion(result.getRowVersion());
            zoneTrackAlarmObject.setObjectState(ObjectState.Stored);
        }
        return result.isSuccess( );
    }

    public final boolean deleteZoneTrackAlarm( Guid id, long rowVersion ) throws SQLException {
        boolean result = false;
        var sqlStatement = "call ZoneTrackAlarmDelete(?, ?)";
        try (var callableStatement = getConnection().prepareCallEx(sqlStatement)) {
            callableStatement.setGuid(1, id);
            callableStatement.setInt64(2, rowVersion);
            callableStatement.registerOutParameter( 2, Types.BIGINT );
            callableStatement.execute( );
            int rowsAffected = callableStatement.getUpdateCount( );
            if ( rowsAffected == 1 ) {
                result = true;
            }
        }
        return result;
    }

    public final boolean deleteZoneTrackAlarm( ZoneTrackAlarmObject zoneTrackAlarmObject ) throws SQLException {
        var id = zoneTrackAlarmObject.getId( );
        var rowVersion = zoneTrackAlarmObject.getRowVersion();
        var result = deleteZoneTrackAlarm( id, rowVersion );
        return result;
    }
    public final boolean insertObject( AbstractDataObjectWithGuidKey dataObject ) throws SQLException {
        boolean result = false;
        var kind = dataObject.getObjectType( );
        switch ( kind ) {
            case Kind.AircraftType:
                result = insertAircraftType( (AircraftTypeObject)dataObject );
            break;
            case Kind.AisDeviceCommand:
                result = insertAisDeviceCommand( (AisDeviceCommandObject)dataObject );
            break;
            case Kind.AisDeviceCommandReply:
                result = insertAisDeviceCommandReply( (AisDeviceCommandReplyObject)dataObject );
            break;
            case Kind.AisDeviceConfiguration:
                result = insertAisDeviceConfiguration( (AisDeviceConfigurationObject)dataObject );
            break;
            case Kind.AisDeviceRawMessage:
                result = insertAisDeviceRawMessage( (AisDeviceRawMessageObject)dataObject );
            break;
            case Kind.AisDeviceRawSentence:
                result = insertAisDeviceRawSentence( (AisDeviceRawSentenceObject)dataObject );
            break;
            case Kind.AidToNavigationReportMessage:
                result = insertAidToNavigationReportMessage( (AidToNavigationReportMessageObject)dataObject );
            break;
            case Kind.AisAddressedSafetyRelatedMessage:
                result = insertAisAddressedSafetyRelatedMessage( (AisAddressedSafetyRelatedMessageObject)dataObject );
            break;
            case Kind.AisBaseStationReportMessage:
                result = insertAisBaseStationReportMessage( (AisBaseStationReportMessageObject)dataObject );
            break;
            case Kind.AisBinaryAcknowledgeMessage:
                result = insertAisBinaryAcknowledgeMessage( (AisBinaryAcknowledgeMessageObject)dataObject );
            break;
            case Kind.AisBinaryAddressedMessage:
                result = insertAisBinaryAddressedMessage( (AisBinaryAddressedMessageObject)dataObject );
            break;
            case Kind.AisBinaryBroadcastMessage:
                result = insertAisBinaryBroadcastMessage( (AisBinaryBroadcastMessageObject)dataObject );
            break;
            case Kind.AisDataLinkManagementMessage:
                result = insertAisDataLinkManagementMessage( (AisDataLinkManagementMessageObject)dataObject );
            break;
            case Kind.AisExtendedClassBCsPositionReportMessage:
                result = insertAisExtendedClassBCsPositionReportMessage( (AisExtendedClassBCsPositionReportMessageObject)dataObject );
            break;
            case Kind.AisInterrogationMessage:
                result = insertAisInterrogationMessage( (AisInterrogationMessageObject)dataObject );
            break;
            case Kind.AisPositionReportClassAAssignedScheduleMessage:
                result = insertAisPositionReportClassAAssignedScheduleMessage( (AisPositionReportClassAAssignedScheduleMessageObject)dataObject );
            break;
            case Kind.AisPositionReportClassAMessage:
                result = insertAisPositionReportClassAMessage( (AisPositionReportClassAMessageObject)dataObject );
            break;
            case Kind.AisPositionReportClassAResponseToInterrogationMessage:
                result = insertAisPositionReportClassAResponseToInterrogationMessage( (AisPositionReportClassAResponseToInterrogationMessageObject)dataObject );
            break;
            case Kind.AisPositionReportForLongRangeApplicationsMessage:
                result = insertAisPositionReportForLongRangeApplicationsMessage( (AisPositionReportForLongRangeApplicationsMessageObject)dataObject );
            break;
            case Kind.AisSafetyRelatedAcknowledgmentMessage:
                result = insertAisSafetyRelatedAcknowledgmentMessage( (AisSafetyRelatedAcknowledgmentMessageObject)dataObject );
            break;
            case Kind.AisStandardClassBCsPositionReportMessage:
                result = insertAisStandardClassBCsPositionReportMessage( (AisStandardClassBCsPositionReportMessageObject)dataObject );
            break;
            case Kind.AisStandardSarAircraftPositionReportMessage:
                result = insertAisStandardSarAircraftPositionReportMessage( (AisStandardSarAircraftPositionReportMessageObject)dataObject );
            break;
            case Kind.AisStaticAndVoyageRelatedDataMessage:
                result = insertAisStaticAndVoyageRelatedDataMessage( (AisStaticAndVoyageRelatedDataMessageObject)dataObject );
            break;
            case Kind.AisStaticDataReportMessage:
                result = insertAisStaticDataReportMessage( (AisStaticDataReportMessageObject)dataObject );
            break;
            case Kind.AisStaticDataReportPartAMessage:
                result = insertAisStaticDataReportPartAMessage( (AisStaticDataReportPartAMessageObject)dataObject );
            break;
            case Kind.AisStaticDataReportPartBMessage:
                result = insertAisStaticDataReportPartBMessage( (AisStaticDataReportPartBMessageObject)dataObject );
            break;
            case Kind.AisUtcAndDateInquiryMessage:
                result = insertAisUtcAndDateInquiryMessage( (AisUtcAndDateInquiryMessageObject)dataObject );
            break;
            case Kind.AisUtcAndDateResponseMessage:
                result = insertAisUtcAndDateResponseMessage( (AisUtcAndDateResponseMessageObject)dataObject );
            break;
            case Kind.AlarmStateChange:
                result = insertAlarmStateChange( (AlarmStateChangeObject)dataObject );
            break;
            case Kind.BaseStationType:
                result = insertBaseStationType( (BaseStationTypeObject)dataObject );
            break;
            case Kind.BinaryTimeseriesValue:
                result = insertBinaryTimeseriesValue( (BinaryTimeseriesValueObject)dataObject );
            break;
            case Kind.Bookmark:
                result = insertBookmark( (BookmarkObject)dataObject );
            break;
            case Kind.BooleanTimeseriesValue:
                result = insertBooleanTimeseriesValue( (BooleanTimeseriesValueObject)dataObject );
            break;
            case Kind.ByteTimeseriesValue:
                result = insertByteTimeseriesValue( (ByteTimeseriesValueObject)dataObject );
            break;
            case Kind.CameraCommand:
                result = insertCameraCommand( (CameraCommandObject)dataObject );
            break;
            case Kind.CameraCommandAbsoluteMove:
                result = insertCameraCommandAbsoluteMove( (CameraCommandAbsoluteMoveObject)dataObject );
            break;
            case Kind.CameraCommandAdjustPanTiltZoom:
                result = insertCameraCommandAdjustPanTiltZoom( (CameraCommandAdjustPanTiltZoomObject)dataObject );
            break;
            case Kind.CameraCommandContinuousMove:
                result = insertCameraCommandContinuousMove( (CameraCommandContinuousMoveObject)dataObject );
            break;
            case Kind.CameraCommandGeoMove:
                result = insertCameraCommandGeoMove( (CameraCommandGeoMoveObject)dataObject );
            break;
            case Kind.CameraCommandRelativeMove:
                result = insertCameraCommandRelativeMove( (CameraCommandRelativeMoveObject)dataObject );
            break;
            case Kind.CameraCommandReleasePTZOwnership:
                result = insertCameraCommandReleasePTZOwnership( (CameraCommandReleasePTZOwnershipObject)dataObject );
            break;
            case Kind.CameraCommandRequestPTZOwnership:
                result = insertCameraCommandRequestPTZOwnership( (CameraCommandRequestPTZOwnershipObject)dataObject );
            break;
            case Kind.CameraCommandSetAutoFocus:
                result = insertCameraCommandSetAutoFocus( (CameraCommandSetAutoFocusObject)dataObject );
            break;
            case Kind.CameraCommandSetBlackAndWhite:
                result = insertCameraCommandSetBlackAndWhite( (CameraCommandSetBlackAndWhiteObject)dataObject );
            break;
            case Kind.CameraCommandSetFollowed:
                result = insertCameraCommandSetFollowed( (CameraCommandSetFollowedObject)dataObject );
            break;
            case Kind.CameraCommandSetInfraRedLamp:
                result = insertCameraCommandSetInfraRedLamp( (CameraCommandSetInfraRedLampObject)dataObject );
            break;
            case Kind.CameraCommandSetWasher:
                result = insertCameraCommandSetWasher( (CameraCommandSetWasherObject)dataObject );
            break;
            case Kind.CameraCommandSetWiper:
                result = insertCameraCommandSetWiper( (CameraCommandSetWiperObject)dataObject );
            break;
            case Kind.CameraCommandStop:
                result = insertCameraCommandStop( (CameraCommandStopObject)dataObject );
            break;
            case Kind.CameraCommandReply:
                result = insertCameraCommandReply( (CameraCommandReplyObject)dataObject );
            break;
            case Kind.CameraConfiguration:
                result = insertCameraConfiguration( (CameraConfigurationObject)dataObject );
            break;
            case Kind.CameraPanCalibration:
                result = insertCameraPanCalibration( (CameraPanCalibrationObject)dataObject );
            break;
            case Kind.CameraPanCalibrationValue:
                result = insertCameraPanCalibrationValue( (CameraPanCalibrationValueObject)dataObject );
            break;
            case Kind.CameraStatus:
                result = insertCameraStatus( (CameraStatusObject)dataObject );
            break;
            case Kind.CameraTiltCalibration:
                result = insertCameraTiltCalibration( (CameraTiltCalibrationObject)dataObject );
            break;
            case Kind.CameraTiltCalibrationValue:
                result = insertCameraTiltCalibrationValue( (CameraTiltCalibrationValueObject)dataObject );
            break;
            case Kind.CameraZoomCalibration:
                result = insertCameraZoomCalibration( (CameraZoomCalibrationObject)dataObject );
            break;
            case Kind.CameraZoomCalibrationValue:
                result = insertCameraZoomCalibrationValue( (CameraZoomCalibrationValueObject)dataObject );
            break;
            case Kind.Catalog:
                result = insertCatalog( (CatalogObject)dataObject );
            break;
            case Kind.Element:
                result = insertElement( (ElementObject)dataObject );
            break;
            case Kind.CollectionInfo:
                result = insertCollectionInfo( (CollectionInfoObject)dataObject );
            break;
            case Kind.Country:
                result = insertCountry( (CountryObject)dataObject );
            break;
            case Kind.CursorInfo:
                result = insertCursorInfo( (CursorInfoObject)dataObject );
            break;
            case Kind.DateTimeTimeseriesValue:
                result = insertDateTimeTimeseriesValue( (DateTimeTimeseriesValueObject)dataObject );
            break;
            case Kind.DeviceHost:
                result = insertDeviceHost( (DeviceHostObject)dataObject );
            break;
            case Kind.DeviceHostConfiguration:
                result = insertDeviceHostConfiguration( (DeviceHostConfigurationObject)dataObject );
            break;
            case Kind.DoubleTimeseriesValue:
                result = insertDoubleTimeseriesValue( (DoubleTimeseriesValueObject)dataObject );
            break;
            case Kind.FacilityType:
                result = insertFacilityType( (FacilityTypeObject)dataObject );
            break;
            case Kind.GeoPosition2DTimeseriesValue:
                result = insertGeoPosition2DTimeseriesValue( (GeoPosition2DTimeseriesValueObject)dataObject );
            break;
            case Kind.GeoPosition3DTimeseriesValue:
                result = insertGeoPosition3DTimeseriesValue( (GeoPosition3DTimeseriesValueObject)dataObject );
            break;
            case Kind.GNSSDeviceCommand:
                result = insertGNSSDeviceCommand( (GNSSDeviceCommandObject)dataObject );
            break;
            case Kind.GNSSDeviceCommandReply:
                result = insertGNSSDeviceCommandReply( (GNSSDeviceCommandReplyObject)dataObject );
            break;
            case Kind.GNSSDeviceConfiguration:
                result = insertGNSSDeviceConfiguration( (GNSSDeviceConfigurationObject)dataObject );
            break;
            case Kind.GuidTimeseriesValue:
                result = insertGuidTimeseriesValue( (GuidTimeseriesValueObject)dataObject );
            break;
            case Kind.GyroDeviceCommand:
                result = insertGyroDeviceCommand( (GyroDeviceCommandObject)dataObject );
            break;
            case Kind.GyroDeviceCommandReply:
                result = insertGyroDeviceCommandReply( (GyroDeviceCommandReplyObject)dataObject );
            break;
            case Kind.GyroDeviceConfiguration:
                result = insertGyroDeviceConfiguration( (GyroDeviceConfigurationObject)dataObject );
            break;
            case Kind.Callsign:
                result = insertCallsign( (CallsignObject)dataObject );
            break;
            case Kind.InternationalMaritimeOrganizationNumber:
                result = insertInternationalMaritimeOrganizationNumber( (InternationalMaritimeOrganizationNumberObject)dataObject );
            break;
            case Kind.MaritimeMobileServiceIdentity:
                result = insertMaritimeMobileServiceIdentity( (MaritimeMobileServiceIdentityObject)dataObject );
            break;
            case Kind.Name:
                result = insertName( (NameObject)dataObject );
            break;
            case Kind.Int16TimeseriesValue:
                result = insertInt16TimeseriesValue( (Int16TimeseriesValueObject)dataObject );
            break;
            case Kind.Int32TimeseriesValue:
                result = insertInt32TimeseriesValue( (Int32TimeseriesValueObject)dataObject );
            break;
            case Kind.Int64TimeseriesValue:
                result = insertInt64TimeseriesValue( (Int64TimeseriesValueObject)dataObject );
            break;
            case Kind.BaseStation:
                result = insertBaseStation( (BaseStationObject)dataObject );
            break;
            case Kind.CameraDevice:
                result = insertCameraDevice( (CameraDeviceObject)dataObject );
            break;
            case Kind.GNSSDevice:
                result = insertGNSSDevice( (GNSSDeviceObject)dataObject );
            break;
            case Kind.GyroDevice:
                result = insertGyroDevice( (GyroDeviceObject)dataObject );
            break;
            case Kind.LineInputDevice:
                result = insertLineInputDevice( (LineInputDeviceObject)dataObject );
            break;
            case Kind.OilSpillDetectorDevice:
                result = insertOilSpillDetectorDevice( (OilSpillDetectorDeviceObject)dataObject );
            break;
            case Kind.RadioDevice:
                result = insertRadioDevice( (RadioDeviceObject)dataObject );
            break;
            case Kind.RadomeDevice:
                result = insertRadomeDevice( (RadomeDeviceObject)dataObject );
            break;
            case Kind.AisDevice:
                result = insertAisDevice( (AisDeviceObject)dataObject );
            break;
            case Kind.RadarDevice:
                result = insertRadarDevice( (RadarDeviceObject)dataObject );
            break;
            case Kind.WeatherStationDevice:
                result = insertWeatherStationDevice( (WeatherStationDeviceObject)dataObject );
            break;
            case Kind.Facility:
                result = insertFacility( (FacilityObject)dataObject );
            break;
            case Kind.Aircraft:
                result = insertAircraft( (AircraftObject)dataObject );
            break;
            case Kind.AisAidToNavigation:
                result = insertAisAidToNavigation( (AisAidToNavigationObject)dataObject );
            break;
            case Kind.Vehicle:
                result = insertVehicle( (VehicleObject)dataObject );
            break;
            case Kind.Vessel:
                result = insertVessel( (VesselObject)dataObject );
            break;
            case Kind.ItemIdentityLink:
                result = insertItemIdentityLink( (ItemIdentityLinkObject)dataObject );
            break;
            case Kind.ItemParentChildLink:
                result = insertItemParentChildLink( (ItemParentChildLinkObject)dataObject );
            break;
            case Kind.LineInputDeviceCommand:
                result = insertLineInputDeviceCommand( (LineInputDeviceCommandObject)dataObject );
            break;
            case Kind.LineInputDeviceCommandReply:
                result = insertLineInputDeviceCommandReply( (LineInputDeviceCommandReplyObject)dataObject );
            break;
            case Kind.LineInputDeviceConfiguration:
                result = insertLineInputDeviceConfiguration( (LineInputDeviceConfigurationObject)dataObject );
            break;
            case Kind.LineInputMessageRouting:
                result = insertLineInputMessageRouting( (LineInputMessageRoutingObject)dataObject );
            break;
            case Kind.LineInputMessageRoutingDestination:
                result = insertLineInputMessageRoutingDestination( (LineInputMessageRoutingDestinationObject)dataObject );
            break;
            case Kind.LineInputWhiteListEntry:
                result = insertLineInputWhiteListEntry( (LineInputWhiteListEntryObject)dataObject );
            break;
            case Kind.LogApplication:
                result = insertLogApplication( (LogApplicationObject)dataObject );
            break;
            case Kind.LogApplicationConfiguration:
                result = insertLogApplicationConfiguration( (LogApplicationConfigurationObject)dataObject );
            break;
            case Kind.LogHost:
                result = insertLogHost( (LogHostObject)dataObject );
            break;
            case Kind.LogHostConfiguration:
                result = insertLogHostConfiguration( (LogHostConfigurationObject)dataObject );
            break;
            case Kind.LogLocation:
                result = insertLogLocation( (LogLocationObject)dataObject );
            break;
            case Kind.LogProcess:
                result = insertLogProcess( (LogProcessObject)dataObject );
            break;
            case Kind.LogRecord:
                result = insertLogRecord( (LogRecordObject)dataObject );
            break;
            case Kind.LogThread:
                result = insertLogThread( (LogThreadObject)dataObject );
            break;
            case Kind.LogTraceEntry:
                result = insertLogTraceEntry( (LogTraceEntryObject)dataObject );
            break;
            case Kind.MapElement:
                result = insertMapElement( (MapElementObject)dataObject );
            break;
            case Kind.MapInfo:
                result = insertMapInfo( (MapInfoObject)dataObject );
            break;
            case Kind.MapServiceOptions:
                result = insertMapServiceOptions( (MapServiceOptionsObject)dataObject );
            break;
            case Kind.MaritimeIdentificationDigits:
                result = insertMaritimeIdentificationDigits( (MaritimeIdentificationDigitsObject)dataObject );
            break;
            case Kind.MediaProxySession:
                result = insertMediaProxySession( (MediaProxySessionObject)dataObject );
            break;
            case Kind.MediaProxySessionFile:
                result = insertMediaProxySessionFile( (MediaProxySessionFileObject)dataObject );
            break;
            case Kind.MediaProxySessionOptions:
                result = insertMediaProxySessionOptions( (MediaProxySessionOptionsObject)dataObject );
            break;
            case Kind.MediaService:
                result = insertMediaService( (MediaServiceObject)dataObject );
            break;
            case Kind.MediaServiceOptions:
                result = insertMediaServiceOptions( (MediaServiceOptionsObject)dataObject );
            break;
            case Kind.ElementType:
                result = insertElementType( (ElementTypeObject)dataObject );
            break;
            case Kind.Namespace:
                result = insertNamespace( (NamespaceObject)dataObject );
            break;
            case Kind.OilSpill:
                result = insertOilSpill( (OilSpillObject)dataObject );
            break;
            case Kind.OilSpillDetectorCommand:
                result = insertOilSpillDetectorCommand( (OilSpillDetectorCommandObject)dataObject );
            break;
            case Kind.OilSpillDetectorCommandReply:
                result = insertOilSpillDetectorCommandReply( (OilSpillDetectorCommandReplyObject)dataObject );
            break;
            case Kind.OilSpillDetectorConfiguration:
                result = insertOilSpillDetectorConfiguration( (OilSpillDetectorConfigurationObject)dataObject );
            break;
            case Kind.Position2DTimeseriesValue:
                result = insertPosition2DTimeseriesValue( (Position2DTimeseriesValueObject)dataObject );
            break;
            case Kind.Position3DTimeseriesValue:
                result = insertPosition3DTimeseriesValue( (Position3DTimeseriesValueObject)dataObject );
            break;
            case Kind.ProcessTrackValueResult:
                result = insertProcessTrackValueResult( (ProcessTrackValueResultObject)dataObject );
            break;
            case Kind.BinaryProperty:
                result = insertBinaryProperty( (BinaryPropertyObject)dataObject );
            break;
            case Kind.BooleanProperty:
                result = insertBooleanProperty( (BooleanPropertyObject)dataObject );
            break;
            case Kind.ByteProperty:
                result = insertByteProperty( (BytePropertyObject)dataObject );
            break;
            case Kind.DateTimeProperty:
                result = insertDateTimeProperty( (DateTimePropertyObject)dataObject );
            break;
            case Kind.DoubleProperty:
                result = insertDoubleProperty( (DoublePropertyObject)dataObject );
            break;
            case Kind.GuidProperty:
                result = insertGuidProperty( (GuidPropertyObject)dataObject );
            break;
            case Kind.Int16Property:
                result = insertInt16Property( (Int16PropertyObject)dataObject );
            break;
            case Kind.Int32Property:
                result = insertInt32Property( (Int32PropertyObject)dataObject );
            break;
            case Kind.Int64Property:
                result = insertInt64Property( (Int64PropertyObject)dataObject );
            break;
            case Kind.ReferenceProperty:
                result = insertReferenceProperty( (ReferencePropertyObject)dataObject );
            break;
            case Kind.SByteProperty:
                result = insertSByteProperty( (SBytePropertyObject)dataObject );
            break;
            case Kind.SingleProperty:
                result = insertSingleProperty( (SinglePropertyObject)dataObject );
            break;
            case Kind.StringProperty:
                result = insertStringProperty( (StringPropertyObject)dataObject );
            break;
            case Kind.BinaryTimeseriesProperty:
                result = insertBinaryTimeseriesProperty( (BinaryTimeseriesPropertyObject)dataObject );
            break;
            case Kind.BooleanTimeseriesProperty:
                result = insertBooleanTimeseriesProperty( (BooleanTimeseriesPropertyObject)dataObject );
            break;
            case Kind.ByteTimeseriesProperty:
                result = insertByteTimeseriesProperty( (ByteTimeseriesPropertyObject)dataObject );
            break;
            case Kind.DateTimeTimeseriesProperty:
                result = insertDateTimeTimeseriesProperty( (DateTimeTimeseriesPropertyObject)dataObject );
            break;
            case Kind.DoubleTimeseriesProperty:
                result = insertDoubleTimeseriesProperty( (DoubleTimeseriesPropertyObject)dataObject );
            break;
            case Kind.GuidTimeseriesProperty:
                result = insertGuidTimeseriesProperty( (GuidTimeseriesPropertyObject)dataObject );
            break;
            case Kind.Int16TimeseriesProperty:
                result = insertInt16TimeseriesProperty( (Int16TimeseriesPropertyObject)dataObject );
            break;
            case Kind.Int32TimeseriesProperty:
                result = insertInt32TimeseriesProperty( (Int32TimeseriesPropertyObject)dataObject );
            break;
            case Kind.Int64TimeseriesProperty:
                result = insertInt64TimeseriesProperty( (Int64TimeseriesPropertyObject)dataObject );
            break;
            case Kind.ReferenceTimeseriesProperty:
                result = insertReferenceTimeseriesProperty( (ReferenceTimeseriesPropertyObject)dataObject );
            break;
            case Kind.SByteTimeseriesProperty:
                result = insertSByteTimeseriesProperty( (SByteTimeseriesPropertyObject)dataObject );
            break;
            case Kind.SingleTimeseriesProperty:
                result = insertSingleTimeseriesProperty( (SingleTimeseriesPropertyObject)dataObject );
            break;
            case Kind.StringTimeseriesProperty:
                result = insertStringTimeseriesProperty( (StringTimeseriesPropertyObject)dataObject );
            break;
            case Kind.TimeSpanTimeseriesProperty:
                result = insertTimeSpanTimeseriesProperty( (TimeSpanTimeseriesPropertyObject)dataObject );
            break;
            case Kind.UInt16TimeseriesProperty:
                result = insertUInt16TimeseriesProperty( (UInt16TimeseriesPropertyObject)dataObject );
            break;
            case Kind.UInt32TimeseriesProperty:
                result = insertUInt32TimeseriesProperty( (UInt32TimeseriesPropertyObject)dataObject );
            break;
            case Kind.UInt64TimeseriesProperty:
                result = insertUInt64TimeseriesProperty( (UInt64TimeseriesPropertyObject)dataObject );
            break;
            case Kind.TimeSpanProperty:
                result = insertTimeSpanProperty( (TimeSpanPropertyObject)dataObject );
            break;
            case Kind.UInt16Property:
                result = insertUInt16Property( (UInt16PropertyObject)dataObject );
            break;
            case Kind.UInt32Property:
                result = insertUInt32Property( (UInt32PropertyObject)dataObject );
            break;
            case Kind.UInt64Property:
                result = insertUInt64Property( (UInt64PropertyObject)dataObject );
            break;
            case Kind.BinaryPropertyDefinition:
                result = insertBinaryPropertyDefinition( (BinaryPropertyDefinitionObject)dataObject );
            break;
            case Kind.BooleanPropertyDefinition:
                result = insertBooleanPropertyDefinition( (BooleanPropertyDefinitionObject)dataObject );
            break;
            case Kind.BytePropertyDefinition:
                result = insertBytePropertyDefinition( (BytePropertyDefinitionObject)dataObject );
            break;
            case Kind.DateTimePropertyDefinition:
                result = insertDateTimePropertyDefinition( (DateTimePropertyDefinitionObject)dataObject );
            break;
            case Kind.DoublePropertyDefinition:
                result = insertDoublePropertyDefinition( (DoublePropertyDefinitionObject)dataObject );
            break;
            case Kind.GuidPropertyDefinition:
                result = insertGuidPropertyDefinition( (GuidPropertyDefinitionObject)dataObject );
            break;
            case Kind.Int16PropertyDefinition:
                result = insertInt16PropertyDefinition( (Int16PropertyDefinitionObject)dataObject );
            break;
            case Kind.Int32PropertyDefinition:
                result = insertInt32PropertyDefinition( (Int32PropertyDefinitionObject)dataObject );
            break;
            case Kind.Int64PropertyDefinition:
                result = insertInt64PropertyDefinition( (Int64PropertyDefinitionObject)dataObject );
            break;
            case Kind.ReferencePropertyDefinition:
                result = insertReferencePropertyDefinition( (ReferencePropertyDefinitionObject)dataObject );
            break;
            case Kind.SBytePropertyDefinition:
                result = insertSBytePropertyDefinition( (SBytePropertyDefinitionObject)dataObject );
            break;
            case Kind.SinglePropertyDefinition:
                result = insertSinglePropertyDefinition( (SinglePropertyDefinitionObject)dataObject );
            break;
            case Kind.StringPropertyDefinition:
                result = insertStringPropertyDefinition( (StringPropertyDefinitionObject)dataObject );
            break;
            case Kind.BinaryTimeseriesPropertyDefinition:
                result = insertBinaryTimeseriesPropertyDefinition( (BinaryTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.BooleanTimeseriesPropertyDefinition:
                result = insertBooleanTimeseriesPropertyDefinition( (BooleanTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.ByteTimeseriesPropertyDefinition:
                result = insertByteTimeseriesPropertyDefinition( (ByteTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.DateTimeTimeseriesPropertyDefinition:
                result = insertDateTimeTimeseriesPropertyDefinition( (DateTimeTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.DoubleTimeseriesPropertyDefinition:
                result = insertDoubleTimeseriesPropertyDefinition( (DoubleTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.GuidTimeseriesPropertyDefinition:
                result = insertGuidTimeseriesPropertyDefinition( (GuidTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.Int16TimeseriesPropertyDefinition:
                result = insertInt16TimeseriesPropertyDefinition( (Int16TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.Int32TimeseriesPropertyDefinition:
                result = insertInt32TimeseriesPropertyDefinition( (Int32TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.Int64TimeseriesPropertyDefinition:
                result = insertInt64TimeseriesPropertyDefinition( (Int64TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.ReferenceTimeseriesPropertyDefinition:
                result = insertReferenceTimeseriesPropertyDefinition( (ReferenceTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.SByteTimeseriesPropertyDefinition:
                result = insertSByteTimeseriesPropertyDefinition( (SByteTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.SingleTimeseriesPropertyDefinition:
                result = insertSingleTimeseriesPropertyDefinition( (SingleTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.StringTimeseriesPropertyDefinition:
                result = insertStringTimeseriesPropertyDefinition( (StringTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.TimeSpanTimeseriesPropertyDefinition:
                result = insertTimeSpanTimeseriesPropertyDefinition( (TimeSpanTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt16TimeseriesPropertyDefinition:
                result = insertUInt16TimeseriesPropertyDefinition( (UInt16TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt32TimeseriesPropertyDefinition:
                result = insertUInt32TimeseriesPropertyDefinition( (UInt32TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt64TimeseriesPropertyDefinition:
                result = insertUInt64TimeseriesPropertyDefinition( (UInt64TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.TimeSpanPropertyDefinition:
                result = insertTimeSpanPropertyDefinition( (TimeSpanPropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt16PropertyDefinition:
                result = insertUInt16PropertyDefinition( (UInt16PropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt32PropertyDefinition:
                result = insertUInt32PropertyDefinition( (UInt32PropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt64PropertyDefinition:
                result = insertUInt64PropertyDefinition( (UInt64PropertyDefinitionObject)dataObject );
            break;
            case Kind.RadarAlarmStatus:
                result = insertRadarAlarmStatus( (RadarAlarmStatusObject)dataObject );
            break;
            case Kind.RadarCommand:
                result = insertRadarCommand( (RadarCommandObject)dataObject );
            break;
            case Kind.RadarCommandGetStatus:
                result = insertRadarCommandGetStatus( (RadarCommandGetStatusObject)dataObject );
            break;
            case Kind.RadarCommandReply:
                result = insertRadarCommandReply( (RadarCommandReplyObject)dataObject );
            break;
            case Kind.RadarCommandReplyGetStatus:
                result = insertRadarCommandReplyGetStatus( (RadarCommandReplyGetStatusObject)dataObject );
            break;
            case Kind.RadarConfiguration:
                result = insertRadarConfiguration( (RadarConfigurationObject)dataObject );
            break;
            case Kind.RadarImage:
                result = insertRadarImage( (RadarImageObject)dataObject );
            break;
            case Kind.RadarRawTrackTable:
                result = insertRadarRawTrackTable( (RadarRawTrackTableObject)dataObject );
            break;
            case Kind.RadarStatus:
                result = insertRadarStatus( (RadarStatusObject)dataObject );
            break;
            case Kind.RadioCommand:
                result = insertRadioCommand( (RadioCommandObject)dataObject );
            break;
            case Kind.RadioCommandReply:
                result = insertRadioCommandReply( (RadioCommandReplyObject)dataObject );
            break;
            case Kind.RadioConfiguration:
                result = insertRadioConfiguration( (RadioConfigurationObject)dataObject );
            break;
            case Kind.RadomeCommand:
                result = insertRadomeCommand( (RadomeCommandObject)dataObject );
            break;
            case Kind.RadomeCommandReply:
                result = insertRadomeCommandReply( (RadomeCommandReplyObject)dataObject );
            break;
            case Kind.RadomeConfiguration:
                result = insertRadomeConfiguration( (RadomeConfigurationObject)dataObject );
            break;
            case Kind.ReferenceTimeseriesValue:
                result = insertReferenceTimeseriesValue( (ReferenceTimeseriesValueObject)dataObject );
            break;
            case Kind.SByteTimeseriesValue:
                result = insertSByteTimeseriesValue( (SByteTimeseriesValueObject)dataObject );
            break;
            case Kind.SecurityDomain:
                result = insertSecurityDomain( (SecurityDomainObject)dataObject );
            break;
            case Kind.SecurityLogin:
                result = insertSecurityLogin( (SecurityLoginObject)dataObject );
            break;
            case Kind.SecurityRole:
                result = insertSecurityRole( (SecurityRoleObject)dataObject );
            break;
            case Kind.SecurityIdentifierRoleLink:
                result = insertSecurityIdentifierRoleLink( (SecurityIdentifierRoleLinkObject)dataObject );
            break;
            case Kind.SecurityLoginSession:
                result = insertSecurityLoginSession( (SecurityLoginSessionObject)dataObject );
            break;
            case Kind.SecurityPermission:
                result = insertSecurityPermission( (SecurityPermissionObject)dataObject );
            break;
            case Kind.SingleTimeseriesValue:
                result = insertSingleTimeseriesValue( (SingleTimeseriesValueObject)dataObject );
            break;
            case Kind.StringTimeseriesValue:
                result = insertStringTimeseriesValue( (StringTimeseriesValueObject)dataObject );
            break;
            case Kind.BinaryTimeseries:
                result = insertBinaryTimeseries( (BinaryTimeseriesObject)dataObject );
            break;
            case Kind.BooleanTimeseries:
                result = insertBooleanTimeseries( (BooleanTimeseriesObject)dataObject );
            break;
            case Kind.AisAidToNavigationOffPositionTimeseries:
                result = insertAisAidToNavigationOffPositionTimeseries( (AisAidToNavigationOffPositionTimeseriesObject)dataObject );
            break;
            case Kind.DeviceEnabledTimeseries:
                result = insertDeviceEnabledTimeseries( (DeviceEnabledTimeseriesObject)dataObject );
            break;
            case Kind.RadarAutomaticSensitivityTimeControlTimeseries:
                result = insertRadarAutomaticSensitivityTimeControlTimeseries( (RadarAutomaticSensitivityTimeControlTimeseriesObject)dataObject );
            break;
            case Kind.RadarBlankSector1Timeseries:
                result = insertRadarBlankSector1Timeseries( (RadarBlankSector1TimeseriesObject)dataObject );
            break;
            case Kind.RadarBlankSector2Timeseries:
                result = insertRadarBlankSector2Timeseries( (RadarBlankSector2TimeseriesObject)dataObject );
            break;
            case Kind.RadarEnableAutomaticFrequencyControlTimeseries:
                result = insertRadarEnableAutomaticFrequencyControlTimeseries( (RadarEnableAutomaticFrequencyControlTimeseriesObject)dataObject );
            break;
            case Kind.RadarEnableFastTimeConstantTimeseries:
                result = insertRadarEnableFastTimeConstantTimeseries( (RadarEnableFastTimeConstantTimeseriesObject)dataObject );
            break;
            case Kind.RadarEnableSensitivityTimeControlTimeseries:
                result = insertRadarEnableSensitivityTimeControlTimeseries( (RadarEnableSensitivityTimeControlTimeseriesObject)dataObject );
            break;
            case Kind.RadarPowerOnTimeseries:
                result = insertRadarPowerOnTimeseries( (RadarPowerOnTimeseriesObject)dataObject );
            break;
            case Kind.RadarSaveSettingsTimeseries:
                result = insertRadarSaveSettingsTimeseries( (RadarSaveSettingsTimeseriesObject)dataObject );
            break;
            case Kind.RadarTrackingTimeseries:
                result = insertRadarTrackingTimeseries( (RadarTrackingTimeseriesObject)dataObject );
            break;
            case Kind.MediaProxySessionEnabledTimeseries:
                result = insertMediaProxySessionEnabledTimeseries( (MediaProxySessionEnabledTimeseriesObject)dataObject );
            break;
            case Kind.MediaServiceEnabledTimeseries:
                result = insertMediaServiceEnabledTimeseries( (MediaServiceEnabledTimeseriesObject)dataObject );
            break;
            case Kind.ByteTimeseries:
                result = insertByteTimeseries( (ByteTimeseriesObject)dataObject );
            break;
            case Kind.DateTimeTimeseries:
                result = insertDateTimeTimeseries( (DateTimeTimeseriesObject)dataObject );
            break;
            case Kind.DoubleTimeseries:
                result = insertDoubleTimeseries( (DoubleTimeseriesObject)dataObject );
            break;
            case Kind.GNSSAltitudeTimeseries:
                result = insertGNSSAltitudeTimeseries( (GNSSAltitudeTimeseriesObject)dataObject );
            break;
            case Kind.GNSSLatitudeTimeseries:
                result = insertGNSSLatitudeTimeseries( (GNSSLatitudeTimeseriesObject)dataObject );
            break;
            case Kind.GNSSLongitudeTimeseries:
                result = insertGNSSLongitudeTimeseries( (GNSSLongitudeTimeseriesObject)dataObject );
            break;
            case Kind.GyroCourseTimeseries:
                result = insertGyroCourseTimeseries( (GyroCourseTimeseriesObject)dataObject );
            break;
            case Kind.GyroHeadingMagneticNorthTimeseries:
                result = insertGyroHeadingMagneticNorthTimeseries( (GyroHeadingMagneticNorthTimeseriesObject)dataObject );
            break;
            case Kind.GyroHeadingTrueNorthTimeseries:
                result = insertGyroHeadingTrueNorthTimeseries( (GyroHeadingTrueNorthTimeseriesObject)dataObject );
            break;
            case Kind.GyroPitchTimeseries:
                result = insertGyroPitchTimeseries( (GyroPitchTimeseriesObject)dataObject );
            break;
            case Kind.GyroRateOfTurnTimeseries:
                result = insertGyroRateOfTurnTimeseries( (GyroRateOfTurnTimeseriesObject)dataObject );
            break;
            case Kind.GyroRollTimeseries:
                result = insertGyroRollTimeseries( (GyroRollTimeseriesObject)dataObject );
            break;
            case Kind.GyroSpeedTimeseries:
                result = insertGyroSpeedTimeseries( (GyroSpeedTimeseriesObject)dataObject );
            break;
            case Kind.RadarLatitudeTimeseries:
                result = insertRadarLatitudeTimeseries( (RadarLatitudeTimeseriesObject)dataObject );
            break;
            case Kind.RadarLongitudeTimeseries:
                result = insertRadarLongitudeTimeseries( (RadarLongitudeTimeseriesObject)dataObject );
            break;
            case Kind.RadomeDewPointTimeseries:
                result = insertRadomeDewPointTimeseries( (RadomeDewPointTimeseriesObject)dataObject );
            break;
            case Kind.RadomePressureTimeseries:
                result = insertRadomePressureTimeseries( (RadomePressureTimeseriesObject)dataObject );
            break;
            case Kind.RadomeTemperatureTimeseries:
                result = insertRadomeTemperatureTimeseries( (RadomeTemperatureTimeseriesObject)dataObject );
            break;
            case Kind.VesselDraughtTimeseries:
                result = insertVesselDraughtTimeseries( (VesselDraughtTimeseriesObject)dataObject );
            break;
            case Kind.ViewLatitudeTimeseries:
                result = insertViewLatitudeTimeseries( (ViewLatitudeTimeseriesObject)dataObject );
            break;
            case Kind.ViewLongitudeTimeseries:
                result = insertViewLongitudeTimeseries( (ViewLongitudeTimeseriesObject)dataObject );
            break;
            case Kind.ViewZoomLevelTimeseries:
                result = insertViewZoomLevelTimeseries( (ViewZoomLevelTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationAbsoluteHumidityTimeseries:
                result = insertWeatherStationAbsoluteHumidityTimeseries( (WeatherStationAbsoluteHumidityTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationAirTemperatureTimeseries:
                result = insertWeatherStationAirTemperatureTimeseries( (WeatherStationAirTemperatureTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationBarometricPressureTimeseries:
                result = insertWeatherStationBarometricPressureTimeseries( (WeatherStationBarometricPressureTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationDewPointTimeseries:
                result = insertWeatherStationDewPointTimeseries( (WeatherStationDewPointTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationRelativeHumidityTimeseries:
                result = insertWeatherStationRelativeHumidityTimeseries( (WeatherStationRelativeHumidityTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationWaterTemperatureTimeseries:
                result = insertWeatherStationWaterTemperatureTimeseries( (WeatherStationWaterTemperatureTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationWindDirectionTimeseries:
                result = insertWeatherStationWindDirectionTimeseries( (WeatherStationWindDirectionTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationWindSpeedTimeseries:
                result = insertWeatherStationWindSpeedTimeseries( (WeatherStationWindSpeedTimeseriesObject)dataObject );
            break;
            case Kind.GeoPosition2DTimeseries:
                result = insertGeoPosition2DTimeseries( (GeoPosition2DTimeseriesObject)dataObject );
            break;
            case Kind.AisAidToNavigationPositionTimeseries:
                result = insertAisAidToNavigationPositionTimeseries( (AisAidToNavigationPositionTimeseriesObject)dataObject );
            break;
            case Kind.GeoPosition3DTimeseries:
                result = insertGeoPosition3DTimeseries( (GeoPosition3DTimeseriesObject)dataObject );
            break;
            case Kind.GuidTimeseries:
                result = insertGuidTimeseries( (GuidTimeseriesObject)dataObject );
            break;
            case Kind.Int16Timeseries:
                result = insertInt16Timeseries( (Int16TimeseriesObject)dataObject );
            break;
            case Kind.Int32Timeseries:
                result = insertInt32Timeseries( (Int32TimeseriesObject)dataObject );
            break;
            case Kind.RadarAzimuthOffsetTimeseries:
                result = insertRadarAzimuthOffsetTimeseries( (RadarAzimuthOffsetTimeseriesObject)dataObject );
            break;
            case Kind.RadarFastTimeConstantLevelTimeseries:
                result = insertRadarFastTimeConstantLevelTimeseries( (RadarFastTimeConstantLevelTimeseriesObject)dataObject );
            break;
            case Kind.RadarFastTimeConstantModeTimeseries:
                result = insertRadarFastTimeConstantModeTimeseries( (RadarFastTimeConstantModeTimeseriesObject)dataObject );
            break;
            case Kind.RadarPulseTimeseries:
                result = insertRadarPulseTimeseries( (RadarPulseTimeseriesObject)dataObject );
            break;
            case Kind.RadarSector1EndTimeseries:
                result = insertRadarSector1EndTimeseries( (RadarSector1EndTimeseriesObject)dataObject );
            break;
            case Kind.RadarSector1StartTimeseries:
                result = insertRadarSector1StartTimeseries( (RadarSector1StartTimeseriesObject)dataObject );
            break;
            case Kind.RadarSector2EndTimeseries:
                result = insertRadarSector2EndTimeseries( (RadarSector2EndTimeseriesObject)dataObject );
            break;
            case Kind.RadarSector2StartTimeseries:
                result = insertRadarSector2StartTimeseries( (RadarSector2StartTimeseriesObject)dataObject );
            break;
            case Kind.RadarSensitivityTimeControlLevelTimeseries:
                result = insertRadarSensitivityTimeControlLevelTimeseries( (RadarSensitivityTimeControlLevelTimeseriesObject)dataObject );
            break;
            case Kind.RadarTuningTimeseries:
                result = insertRadarTuningTimeseries( (RadarTuningTimeseriesObject)dataObject );
            break;
            case Kind.VesselPersonsOnBoardTimeseries:
                result = insertVesselPersonsOnBoardTimeseries( (VesselPersonsOnBoardTimeseriesObject)dataObject );
            break;
            case Kind.Int64Timeseries:
                result = insertInt64Timeseries( (Int64TimeseriesObject)dataObject );
            break;
            case Kind.Position2DTimeseries:
                result = insertPosition2DTimeseries( (Position2DTimeseriesObject)dataObject );
            break;
            case Kind.Position3DTimeseries:
                result = insertPosition3DTimeseries( (Position3DTimeseriesObject)dataObject );
            break;
            case Kind.ReferenceTimeseries:
                result = insertReferenceTimeseries( (ReferenceTimeseriesObject)dataObject );
            break;
            case Kind.SByteTimeseries:
                result = insertSByteTimeseries( (SByteTimeseriesObject)dataObject );
            break;
            case Kind.SingleTimeseries:
                result = insertSingleTimeseries( (SingleTimeseriesObject)dataObject );
            break;
            case Kind.StringTimeseries:
                result = insertStringTimeseries( (StringTimeseriesObject)dataObject );
            break;
            case Kind.TimeSpanTimeseries:
                result = insertTimeSpanTimeseries( (TimeSpanTimeseriesObject)dataObject );
            break;
            case Kind.UInt16Timeseries:
                result = insertUInt16Timeseries( (UInt16TimeseriesObject)dataObject );
            break;
            case Kind.UInt32Timeseries:
                result = insertUInt32Timeseries( (UInt32TimeseriesObject)dataObject );
            break;
            case Kind.RadomeStatusTimeseries:
                result = insertRadomeStatusTimeseries( (RadomeStatusTimeseriesObject)dataObject );
            break;
            case Kind.UInt64Timeseries:
                result = insertUInt64Timeseries( (UInt64TimeseriesObject)dataObject );
            break;
            case Kind.TimeseriesCatalog:
                result = insertTimeseriesCatalog( (TimeseriesCatalogObject)dataObject );
            break;
            case Kind.TimeseriesInfo:
                result = insertTimeseriesInfo( (TimeseriesInfoObject)dataObject );
            break;
            case Kind.TimeSpanTimeseriesValue:
                result = insertTimeSpanTimeseriesValue( (TimeSpanTimeseriesValueObject)dataObject );
            break;
            case Kind.TrackableItemTrackLink:
                result = insertTrackableItemTrackLink( (TrackableItemTrackLinkObject)dataObject );
            break;
            case Kind.Track:
                result = insertTrack( (TrackObject)dataObject );
            break;
            case Kind.Track3D:
                result = insertTrack3D( (Track3DObject)dataObject );
            break;
            case Kind.TrackerFilterParameters:
                result = insertTrackerFilterParameters( (TrackerFilterParametersObject)dataObject );
            break;
            case Kind.TrackerFilterParametersConfiguration:
                result = insertTrackerFilterParametersConfiguration( (TrackerFilterParametersConfigurationObject)dataObject );
            break;
            case Kind.TrackInfo:
                result = insertTrackInfo( (TrackInfoObject)dataObject );
            break;
            case Kind.TrackingServiceOptions:
                result = insertTrackingServiceOptions( (TrackingServiceOptionsObject)dataObject );
            break;
            case Kind.TrackLink:
                result = insertTrackLink( (TrackLinkObject)dataObject );
            break;
            case Kind.TrackValue:
                result = insertTrackValue( (TrackValueObject)dataObject );
            break;
            case Kind.TrackValue3D:
                result = insertTrackValue3D( (TrackValue3DObject)dataObject );
            break;
            case Kind.UInt16TimeseriesValue:
                result = insertUInt16TimeseriesValue( (UInt16TimeseriesValueObject)dataObject );
            break;
            case Kind.UInt32TimeseriesValue:
                result = insertUInt32TimeseriesValue( (UInt32TimeseriesValueObject)dataObject );
            break;
            case Kind.UInt64TimeseriesValue:
                result = insertUInt64TimeseriesValue( (UInt64TimeseriesValueObject)dataObject );
            break;
            case Kind.VehicleType:
                result = insertVehicleType( (VehicleTypeObject)dataObject );
            break;
            case Kind.VesselType:
                result = insertVesselType( (VesselTypeObject)dataObject );
            break;
            case Kind.View:
                result = insertView( (ViewObject)dataObject );
            break;
            case Kind.ViewCameraLink:
                result = insertViewCameraLink( (ViewCameraLinkObject)dataObject );
            break;
            case Kind.ViewTrackerLink:
                result = insertViewTrackerLink( (ViewTrackerLinkObject)dataObject );
            break;
            case Kind.WeatherStationCommand:
                result = insertWeatherStationCommand( (WeatherStationCommandObject)dataObject );
            break;
            case Kind.WeatherStationCommandReply:
                result = insertWeatherStationCommandReply( (WeatherStationCommandReplyObject)dataObject );
            break;
            case Kind.WeatherStationConfiguration:
                result = insertWeatherStationConfiguration( (WeatherStationConfigurationObject)dataObject );
            break;
            case Kind.CircularZone:
                result = insertCircularZone( (CircularZoneObject)dataObject );
            break;
            case Kind.PolygonZone:
                result = insertPolygonZone( (PolygonZoneObject)dataObject );
            break;
            case Kind.ZoneExceptions:
                result = insertZoneExceptions( (ZoneExceptionsObject)dataObject );
            break;
            case Kind.ZoneExceptionsVesselLink:
                result = insertZoneExceptionsVesselLink( (ZoneExceptionsVesselLinkObject)dataObject );
            break;
            case Kind.ZoneTrackAlarm:
                result = insertZoneTrackAlarm( (ZoneTrackAlarmObject)dataObject );
            break;
        }
        return result;
    }

    public final boolean updateObject( AbstractDataObjectWithGuidKey dataObject ) throws SQLException {
        boolean result = false;
        var kind = dataObject.getObjectType( );
        switch ( kind ) {
            case Kind.AircraftType:
                result = updateAircraftType( (AircraftTypeObject)dataObject );
            break;
            case Kind.AisDeviceCommand:
                result = updateAisDeviceCommand( (AisDeviceCommandObject)dataObject );
            break;
            case Kind.AisDeviceCommandReply:
                result = updateAisDeviceCommandReply( (AisDeviceCommandReplyObject)dataObject );
            break;
            case Kind.AisDeviceConfiguration:
                result = updateAisDeviceConfiguration( (AisDeviceConfigurationObject)dataObject );
            break;
            case Kind.AisDeviceRawMessage:
                result = updateAisDeviceRawMessage( (AisDeviceRawMessageObject)dataObject );
            break;
            case Kind.AisDeviceRawSentence:
                result = updateAisDeviceRawSentence( (AisDeviceRawSentenceObject)dataObject );
            break;
            case Kind.AidToNavigationReportMessage:
                result = updateAidToNavigationReportMessage( (AidToNavigationReportMessageObject)dataObject );
            break;
            case Kind.AisAddressedSafetyRelatedMessage:
                result = updateAisAddressedSafetyRelatedMessage( (AisAddressedSafetyRelatedMessageObject)dataObject );
            break;
            case Kind.AisBaseStationReportMessage:
                result = updateAisBaseStationReportMessage( (AisBaseStationReportMessageObject)dataObject );
            break;
            case Kind.AisBinaryAcknowledgeMessage:
                result = updateAisBinaryAcknowledgeMessage( (AisBinaryAcknowledgeMessageObject)dataObject );
            break;
            case Kind.AisBinaryAddressedMessage:
                result = updateAisBinaryAddressedMessage( (AisBinaryAddressedMessageObject)dataObject );
            break;
            case Kind.AisBinaryBroadcastMessage:
                result = updateAisBinaryBroadcastMessage( (AisBinaryBroadcastMessageObject)dataObject );
            break;
            case Kind.AisDataLinkManagementMessage:
                result = updateAisDataLinkManagementMessage( (AisDataLinkManagementMessageObject)dataObject );
            break;
            case Kind.AisExtendedClassBCsPositionReportMessage:
                result = updateAisExtendedClassBCsPositionReportMessage( (AisExtendedClassBCsPositionReportMessageObject)dataObject );
            break;
            case Kind.AisInterrogationMessage:
                result = updateAisInterrogationMessage( (AisInterrogationMessageObject)dataObject );
            break;
            case Kind.AisPositionReportClassAAssignedScheduleMessage:
                result = updateAisPositionReportClassAAssignedScheduleMessage( (AisPositionReportClassAAssignedScheduleMessageObject)dataObject );
            break;
            case Kind.AisPositionReportClassAMessage:
                result = updateAisPositionReportClassAMessage( (AisPositionReportClassAMessageObject)dataObject );
            break;
            case Kind.AisPositionReportClassAResponseToInterrogationMessage:
                result = updateAisPositionReportClassAResponseToInterrogationMessage( (AisPositionReportClassAResponseToInterrogationMessageObject)dataObject );
            break;
            case Kind.AisPositionReportForLongRangeApplicationsMessage:
                result = updateAisPositionReportForLongRangeApplicationsMessage( (AisPositionReportForLongRangeApplicationsMessageObject)dataObject );
            break;
            case Kind.AisSafetyRelatedAcknowledgmentMessage:
                result = updateAisSafetyRelatedAcknowledgmentMessage( (AisSafetyRelatedAcknowledgmentMessageObject)dataObject );
            break;
            case Kind.AisStandardClassBCsPositionReportMessage:
                result = updateAisStandardClassBCsPositionReportMessage( (AisStandardClassBCsPositionReportMessageObject)dataObject );
            break;
            case Kind.AisStandardSarAircraftPositionReportMessage:
                result = updateAisStandardSarAircraftPositionReportMessage( (AisStandardSarAircraftPositionReportMessageObject)dataObject );
            break;
            case Kind.AisStaticAndVoyageRelatedDataMessage:
                result = updateAisStaticAndVoyageRelatedDataMessage( (AisStaticAndVoyageRelatedDataMessageObject)dataObject );
            break;
            case Kind.AisStaticDataReportMessage:
                result = updateAisStaticDataReportMessage( (AisStaticDataReportMessageObject)dataObject );
            break;
            case Kind.AisStaticDataReportPartAMessage:
                result = updateAisStaticDataReportPartAMessage( (AisStaticDataReportPartAMessageObject)dataObject );
            break;
            case Kind.AisStaticDataReportPartBMessage:
                result = updateAisStaticDataReportPartBMessage( (AisStaticDataReportPartBMessageObject)dataObject );
            break;
            case Kind.AisUtcAndDateInquiryMessage:
                result = updateAisUtcAndDateInquiryMessage( (AisUtcAndDateInquiryMessageObject)dataObject );
            break;
            case Kind.AisUtcAndDateResponseMessage:
                result = updateAisUtcAndDateResponseMessage( (AisUtcAndDateResponseMessageObject)dataObject );
            break;
            case Kind.AlarmStateChange:
                result = updateAlarmStateChange( (AlarmStateChangeObject)dataObject );
            break;
            case Kind.BaseStationType:
                result = updateBaseStationType( (BaseStationTypeObject)dataObject );
            break;
            case Kind.BinaryTimeseriesValue:
                result = updateBinaryTimeseriesValue( (BinaryTimeseriesValueObject)dataObject );
            break;
            case Kind.Bookmark:
                result = updateBookmark( (BookmarkObject)dataObject );
            break;
            case Kind.BooleanTimeseriesValue:
                result = updateBooleanTimeseriesValue( (BooleanTimeseriesValueObject)dataObject );
            break;
            case Kind.ByteTimeseriesValue:
                result = updateByteTimeseriesValue( (ByteTimeseriesValueObject)dataObject );
            break;
            case Kind.CameraCommand:
                result = updateCameraCommand( (CameraCommandObject)dataObject );
            break;
            case Kind.CameraCommandAbsoluteMove:
                result = updateCameraCommandAbsoluteMove( (CameraCommandAbsoluteMoveObject)dataObject );
            break;
            case Kind.CameraCommandAdjustPanTiltZoom:
                result = updateCameraCommandAdjustPanTiltZoom( (CameraCommandAdjustPanTiltZoomObject)dataObject );
            break;
            case Kind.CameraCommandContinuousMove:
                result = updateCameraCommandContinuousMove( (CameraCommandContinuousMoveObject)dataObject );
            break;
            case Kind.CameraCommandGeoMove:
                result = updateCameraCommandGeoMove( (CameraCommandGeoMoveObject)dataObject );
            break;
            case Kind.CameraCommandRelativeMove:
                result = updateCameraCommandRelativeMove( (CameraCommandRelativeMoveObject)dataObject );
            break;
            case Kind.CameraCommandReleasePTZOwnership:
                result = updateCameraCommandReleasePTZOwnership( (CameraCommandReleasePTZOwnershipObject)dataObject );
            break;
            case Kind.CameraCommandRequestPTZOwnership:
                result = updateCameraCommandRequestPTZOwnership( (CameraCommandRequestPTZOwnershipObject)dataObject );
            break;
            case Kind.CameraCommandSetAutoFocus:
                result = updateCameraCommandSetAutoFocus( (CameraCommandSetAutoFocusObject)dataObject );
            break;
            case Kind.CameraCommandSetBlackAndWhite:
                result = updateCameraCommandSetBlackAndWhite( (CameraCommandSetBlackAndWhiteObject)dataObject );
            break;
            case Kind.CameraCommandSetFollowed:
                result = updateCameraCommandSetFollowed( (CameraCommandSetFollowedObject)dataObject );
            break;
            case Kind.CameraCommandSetInfraRedLamp:
                result = updateCameraCommandSetInfraRedLamp( (CameraCommandSetInfraRedLampObject)dataObject );
            break;
            case Kind.CameraCommandSetWasher:
                result = updateCameraCommandSetWasher( (CameraCommandSetWasherObject)dataObject );
            break;
            case Kind.CameraCommandSetWiper:
                result = updateCameraCommandSetWiper( (CameraCommandSetWiperObject)dataObject );
            break;
            case Kind.CameraCommandStop:
                result = updateCameraCommandStop( (CameraCommandStopObject)dataObject );
            break;
            case Kind.CameraCommandReply:
                result = updateCameraCommandReply( (CameraCommandReplyObject)dataObject );
            break;
            case Kind.CameraConfiguration:
                result = updateCameraConfiguration( (CameraConfigurationObject)dataObject );
            break;
            case Kind.CameraPanCalibration:
                result = updateCameraPanCalibration( (CameraPanCalibrationObject)dataObject );
            break;
            case Kind.CameraPanCalibrationValue:
                result = updateCameraPanCalibrationValue( (CameraPanCalibrationValueObject)dataObject );
            break;
            case Kind.CameraStatus:
                result = updateCameraStatus( (CameraStatusObject)dataObject );
            break;
            case Kind.CameraTiltCalibration:
                result = updateCameraTiltCalibration( (CameraTiltCalibrationObject)dataObject );
            break;
            case Kind.CameraTiltCalibrationValue:
                result = updateCameraTiltCalibrationValue( (CameraTiltCalibrationValueObject)dataObject );
            break;
            case Kind.CameraZoomCalibration:
                result = updateCameraZoomCalibration( (CameraZoomCalibrationObject)dataObject );
            break;
            case Kind.CameraZoomCalibrationValue:
                result = updateCameraZoomCalibrationValue( (CameraZoomCalibrationValueObject)dataObject );
            break;
            case Kind.Catalog:
                result = updateCatalog( (CatalogObject)dataObject );
            break;
            case Kind.Element:
                result = updateElement( (ElementObject)dataObject );
            break;
            case Kind.CollectionInfo:
                result = updateCollectionInfo( (CollectionInfoObject)dataObject );
            break;
            case Kind.Country:
                result = updateCountry( (CountryObject)dataObject );
            break;
            case Kind.CursorInfo:
                result = updateCursorInfo( (CursorInfoObject)dataObject );
            break;
            case Kind.DateTimeTimeseriesValue:
                result = updateDateTimeTimeseriesValue( (DateTimeTimeseriesValueObject)dataObject );
            break;
            case Kind.DeviceHost:
                result = updateDeviceHost( (DeviceHostObject)dataObject );
            break;
            case Kind.DeviceHostConfiguration:
                result = updateDeviceHostConfiguration( (DeviceHostConfigurationObject)dataObject );
            break;
            case Kind.DoubleTimeseriesValue:
                result = updateDoubleTimeseriesValue( (DoubleTimeseriesValueObject)dataObject );
            break;
            case Kind.FacilityType:
                result = updateFacilityType( (FacilityTypeObject)dataObject );
            break;
            case Kind.GeoPosition2DTimeseriesValue:
                result = updateGeoPosition2DTimeseriesValue( (GeoPosition2DTimeseriesValueObject)dataObject );
            break;
            case Kind.GeoPosition3DTimeseriesValue:
                result = updateGeoPosition3DTimeseriesValue( (GeoPosition3DTimeseriesValueObject)dataObject );
            break;
            case Kind.GNSSDeviceCommand:
                result = updateGNSSDeviceCommand( (GNSSDeviceCommandObject)dataObject );
            break;
            case Kind.GNSSDeviceCommandReply:
                result = updateGNSSDeviceCommandReply( (GNSSDeviceCommandReplyObject)dataObject );
            break;
            case Kind.GNSSDeviceConfiguration:
                result = updateGNSSDeviceConfiguration( (GNSSDeviceConfigurationObject)dataObject );
            break;
            case Kind.GuidTimeseriesValue:
                result = updateGuidTimeseriesValue( (GuidTimeseriesValueObject)dataObject );
            break;
            case Kind.GyroDeviceCommand:
                result = updateGyroDeviceCommand( (GyroDeviceCommandObject)dataObject );
            break;
            case Kind.GyroDeviceCommandReply:
                result = updateGyroDeviceCommandReply( (GyroDeviceCommandReplyObject)dataObject );
            break;
            case Kind.GyroDeviceConfiguration:
                result = updateGyroDeviceConfiguration( (GyroDeviceConfigurationObject)dataObject );
            break;
            case Kind.Callsign:
                result = updateCallsign( (CallsignObject)dataObject );
            break;
            case Kind.InternationalMaritimeOrganizationNumber:
                result = updateInternationalMaritimeOrganizationNumber( (InternationalMaritimeOrganizationNumberObject)dataObject );
            break;
            case Kind.MaritimeMobileServiceIdentity:
                result = updateMaritimeMobileServiceIdentity( (MaritimeMobileServiceIdentityObject)dataObject );
            break;
            case Kind.Name:
                result = updateName( (NameObject)dataObject );
            break;
            case Kind.Int16TimeseriesValue:
                result = updateInt16TimeseriesValue( (Int16TimeseriesValueObject)dataObject );
            break;
            case Kind.Int32TimeseriesValue:
                result = updateInt32TimeseriesValue( (Int32TimeseriesValueObject)dataObject );
            break;
            case Kind.Int64TimeseriesValue:
                result = updateInt64TimeseriesValue( (Int64TimeseriesValueObject)dataObject );
            break;
            case Kind.BaseStation:
                result = updateBaseStation( (BaseStationObject)dataObject );
            break;
            case Kind.CameraDevice:
                result = updateCameraDevice( (CameraDeviceObject)dataObject );
            break;
            case Kind.GNSSDevice:
                result = updateGNSSDevice( (GNSSDeviceObject)dataObject );
            break;
            case Kind.GyroDevice:
                result = updateGyroDevice( (GyroDeviceObject)dataObject );
            break;
            case Kind.LineInputDevice:
                result = updateLineInputDevice( (LineInputDeviceObject)dataObject );
            break;
            case Kind.OilSpillDetectorDevice:
                result = updateOilSpillDetectorDevice( (OilSpillDetectorDeviceObject)dataObject );
            break;
            case Kind.RadioDevice:
                result = updateRadioDevice( (RadioDeviceObject)dataObject );
            break;
            case Kind.RadomeDevice:
                result = updateRadomeDevice( (RadomeDeviceObject)dataObject );
            break;
            case Kind.AisDevice:
                result = updateAisDevice( (AisDeviceObject)dataObject );
            break;
            case Kind.RadarDevice:
                result = updateRadarDevice( (RadarDeviceObject)dataObject );
            break;
            case Kind.WeatherStationDevice:
                result = updateWeatherStationDevice( (WeatherStationDeviceObject)dataObject );
            break;
            case Kind.Facility:
                result = updateFacility( (FacilityObject)dataObject );
            break;
            case Kind.Aircraft:
                result = updateAircraft( (AircraftObject)dataObject );
            break;
            case Kind.AisAidToNavigation:
                result = updateAisAidToNavigation( (AisAidToNavigationObject)dataObject );
            break;
            case Kind.Vehicle:
                result = updateVehicle( (VehicleObject)dataObject );
            break;
            case Kind.Vessel:
                result = updateVessel( (VesselObject)dataObject );
            break;
            case Kind.ItemIdentityLink:
                result = updateItemIdentityLink( (ItemIdentityLinkObject)dataObject );
            break;
            case Kind.ItemParentChildLink:
                result = updateItemParentChildLink( (ItemParentChildLinkObject)dataObject );
            break;
            case Kind.LineInputDeviceCommand:
                result = updateLineInputDeviceCommand( (LineInputDeviceCommandObject)dataObject );
            break;
            case Kind.LineInputDeviceCommandReply:
                result = updateLineInputDeviceCommandReply( (LineInputDeviceCommandReplyObject)dataObject );
            break;
            case Kind.LineInputDeviceConfiguration:
                result = updateLineInputDeviceConfiguration( (LineInputDeviceConfigurationObject)dataObject );
            break;
            case Kind.LineInputMessageRouting:
                result = updateLineInputMessageRouting( (LineInputMessageRoutingObject)dataObject );
            break;
            case Kind.LineInputMessageRoutingDestination:
                result = updateLineInputMessageRoutingDestination( (LineInputMessageRoutingDestinationObject)dataObject );
            break;
            case Kind.LineInputWhiteListEntry:
                result = updateLineInputWhiteListEntry( (LineInputWhiteListEntryObject)dataObject );
            break;
            case Kind.LogApplication:
                result = updateLogApplication( (LogApplicationObject)dataObject );
            break;
            case Kind.LogApplicationConfiguration:
                result = updateLogApplicationConfiguration( (LogApplicationConfigurationObject)dataObject );
            break;
            case Kind.LogHost:
                result = updateLogHost( (LogHostObject)dataObject );
            break;
            case Kind.LogHostConfiguration:
                result = updateLogHostConfiguration( (LogHostConfigurationObject)dataObject );
            break;
            case Kind.LogLocation:
                result = updateLogLocation( (LogLocationObject)dataObject );
            break;
            case Kind.LogProcess:
                result = updateLogProcess( (LogProcessObject)dataObject );
            break;
            case Kind.LogRecord:
                result = updateLogRecord( (LogRecordObject)dataObject );
            break;
            case Kind.LogThread:
                result = updateLogThread( (LogThreadObject)dataObject );
            break;
            case Kind.LogTraceEntry:
                result = updateLogTraceEntry( (LogTraceEntryObject)dataObject );
            break;
            case Kind.MapElement:
                result = updateMapElement( (MapElementObject)dataObject );
            break;
            case Kind.MapInfo:
                result = updateMapInfo( (MapInfoObject)dataObject );
            break;
            case Kind.MapServiceOptions:
                result = updateMapServiceOptions( (MapServiceOptionsObject)dataObject );
            break;
            case Kind.MaritimeIdentificationDigits:
                result = updateMaritimeIdentificationDigits( (MaritimeIdentificationDigitsObject)dataObject );
            break;
            case Kind.MediaProxySession:
                result = updateMediaProxySession( (MediaProxySessionObject)dataObject );
            break;
            case Kind.MediaProxySessionFile:
                result = updateMediaProxySessionFile( (MediaProxySessionFileObject)dataObject );
            break;
            case Kind.MediaProxySessionOptions:
                result = updateMediaProxySessionOptions( (MediaProxySessionOptionsObject)dataObject );
            break;
            case Kind.MediaService:
                result = updateMediaService( (MediaServiceObject)dataObject );
            break;
            case Kind.MediaServiceOptions:
                result = updateMediaServiceOptions( (MediaServiceOptionsObject)dataObject );
            break;
            case Kind.ElementType:
                result = updateElementType( (ElementTypeObject)dataObject );
            break;
            case Kind.Namespace:
                result = updateNamespace( (NamespaceObject)dataObject );
            break;
            case Kind.OilSpill:
                result = updateOilSpill( (OilSpillObject)dataObject );
            break;
            case Kind.OilSpillDetectorCommand:
                result = updateOilSpillDetectorCommand( (OilSpillDetectorCommandObject)dataObject );
            break;
            case Kind.OilSpillDetectorCommandReply:
                result = updateOilSpillDetectorCommandReply( (OilSpillDetectorCommandReplyObject)dataObject );
            break;
            case Kind.OilSpillDetectorConfiguration:
                result = updateOilSpillDetectorConfiguration( (OilSpillDetectorConfigurationObject)dataObject );
            break;
            case Kind.Position2DTimeseriesValue:
                result = updatePosition2DTimeseriesValue( (Position2DTimeseriesValueObject)dataObject );
            break;
            case Kind.Position3DTimeseriesValue:
                result = updatePosition3DTimeseriesValue( (Position3DTimeseriesValueObject)dataObject );
            break;
            case Kind.ProcessTrackValueResult:
                result = updateProcessTrackValueResult( (ProcessTrackValueResultObject)dataObject );
            break;
            case Kind.BinaryProperty:
                result = updateBinaryProperty( (BinaryPropertyObject)dataObject );
            break;
            case Kind.BooleanProperty:
                result = updateBooleanProperty( (BooleanPropertyObject)dataObject );
            break;
            case Kind.ByteProperty:
                result = updateByteProperty( (BytePropertyObject)dataObject );
            break;
            case Kind.DateTimeProperty:
                result = updateDateTimeProperty( (DateTimePropertyObject)dataObject );
            break;
            case Kind.DoubleProperty:
                result = updateDoubleProperty( (DoublePropertyObject)dataObject );
            break;
            case Kind.GuidProperty:
                result = updateGuidProperty( (GuidPropertyObject)dataObject );
            break;
            case Kind.Int16Property:
                result = updateInt16Property( (Int16PropertyObject)dataObject );
            break;
            case Kind.Int32Property:
                result = updateInt32Property( (Int32PropertyObject)dataObject );
            break;
            case Kind.Int64Property:
                result = updateInt64Property( (Int64PropertyObject)dataObject );
            break;
            case Kind.ReferenceProperty:
                result = updateReferenceProperty( (ReferencePropertyObject)dataObject );
            break;
            case Kind.SByteProperty:
                result = updateSByteProperty( (SBytePropertyObject)dataObject );
            break;
            case Kind.SingleProperty:
                result = updateSingleProperty( (SinglePropertyObject)dataObject );
            break;
            case Kind.StringProperty:
                result = updateStringProperty( (StringPropertyObject)dataObject );
            break;
            case Kind.BinaryTimeseriesProperty:
                result = updateBinaryTimeseriesProperty( (BinaryTimeseriesPropertyObject)dataObject );
            break;
            case Kind.BooleanTimeseriesProperty:
                result = updateBooleanTimeseriesProperty( (BooleanTimeseriesPropertyObject)dataObject );
            break;
            case Kind.ByteTimeseriesProperty:
                result = updateByteTimeseriesProperty( (ByteTimeseriesPropertyObject)dataObject );
            break;
            case Kind.DateTimeTimeseriesProperty:
                result = updateDateTimeTimeseriesProperty( (DateTimeTimeseriesPropertyObject)dataObject );
            break;
            case Kind.DoubleTimeseriesProperty:
                result = updateDoubleTimeseriesProperty( (DoubleTimeseriesPropertyObject)dataObject );
            break;
            case Kind.GuidTimeseriesProperty:
                result = updateGuidTimeseriesProperty( (GuidTimeseriesPropertyObject)dataObject );
            break;
            case Kind.Int16TimeseriesProperty:
                result = updateInt16TimeseriesProperty( (Int16TimeseriesPropertyObject)dataObject );
            break;
            case Kind.Int32TimeseriesProperty:
                result = updateInt32TimeseriesProperty( (Int32TimeseriesPropertyObject)dataObject );
            break;
            case Kind.Int64TimeseriesProperty:
                result = updateInt64TimeseriesProperty( (Int64TimeseriesPropertyObject)dataObject );
            break;
            case Kind.ReferenceTimeseriesProperty:
                result = updateReferenceTimeseriesProperty( (ReferenceTimeseriesPropertyObject)dataObject );
            break;
            case Kind.SByteTimeseriesProperty:
                result = updateSByteTimeseriesProperty( (SByteTimeseriesPropertyObject)dataObject );
            break;
            case Kind.SingleTimeseriesProperty:
                result = updateSingleTimeseriesProperty( (SingleTimeseriesPropertyObject)dataObject );
            break;
            case Kind.StringTimeseriesProperty:
                result = updateStringTimeseriesProperty( (StringTimeseriesPropertyObject)dataObject );
            break;
            case Kind.TimeSpanTimeseriesProperty:
                result = updateTimeSpanTimeseriesProperty( (TimeSpanTimeseriesPropertyObject)dataObject );
            break;
            case Kind.UInt16TimeseriesProperty:
                result = updateUInt16TimeseriesProperty( (UInt16TimeseriesPropertyObject)dataObject );
            break;
            case Kind.UInt32TimeseriesProperty:
                result = updateUInt32TimeseriesProperty( (UInt32TimeseriesPropertyObject)dataObject );
            break;
            case Kind.UInt64TimeseriesProperty:
                result = updateUInt64TimeseriesProperty( (UInt64TimeseriesPropertyObject)dataObject );
            break;
            case Kind.TimeSpanProperty:
                result = updateTimeSpanProperty( (TimeSpanPropertyObject)dataObject );
            break;
            case Kind.UInt16Property:
                result = updateUInt16Property( (UInt16PropertyObject)dataObject );
            break;
            case Kind.UInt32Property:
                result = updateUInt32Property( (UInt32PropertyObject)dataObject );
            break;
            case Kind.UInt64Property:
                result = updateUInt64Property( (UInt64PropertyObject)dataObject );
            break;
            case Kind.BinaryPropertyDefinition:
                result = updateBinaryPropertyDefinition( (BinaryPropertyDefinitionObject)dataObject );
            break;
            case Kind.BooleanPropertyDefinition:
                result = updateBooleanPropertyDefinition( (BooleanPropertyDefinitionObject)dataObject );
            break;
            case Kind.BytePropertyDefinition:
                result = updateBytePropertyDefinition( (BytePropertyDefinitionObject)dataObject );
            break;
            case Kind.DateTimePropertyDefinition:
                result = updateDateTimePropertyDefinition( (DateTimePropertyDefinitionObject)dataObject );
            break;
            case Kind.DoublePropertyDefinition:
                result = updateDoublePropertyDefinition( (DoublePropertyDefinitionObject)dataObject );
            break;
            case Kind.GuidPropertyDefinition:
                result = updateGuidPropertyDefinition( (GuidPropertyDefinitionObject)dataObject );
            break;
            case Kind.Int16PropertyDefinition:
                result = updateInt16PropertyDefinition( (Int16PropertyDefinitionObject)dataObject );
            break;
            case Kind.Int32PropertyDefinition:
                result = updateInt32PropertyDefinition( (Int32PropertyDefinitionObject)dataObject );
            break;
            case Kind.Int64PropertyDefinition:
                result = updateInt64PropertyDefinition( (Int64PropertyDefinitionObject)dataObject );
            break;
            case Kind.ReferencePropertyDefinition:
                result = updateReferencePropertyDefinition( (ReferencePropertyDefinitionObject)dataObject );
            break;
            case Kind.SBytePropertyDefinition:
                result = updateSBytePropertyDefinition( (SBytePropertyDefinitionObject)dataObject );
            break;
            case Kind.SinglePropertyDefinition:
                result = updateSinglePropertyDefinition( (SinglePropertyDefinitionObject)dataObject );
            break;
            case Kind.StringPropertyDefinition:
                result = updateStringPropertyDefinition( (StringPropertyDefinitionObject)dataObject );
            break;
            case Kind.BinaryTimeseriesPropertyDefinition:
                result = updateBinaryTimeseriesPropertyDefinition( (BinaryTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.BooleanTimeseriesPropertyDefinition:
                result = updateBooleanTimeseriesPropertyDefinition( (BooleanTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.ByteTimeseriesPropertyDefinition:
                result = updateByteTimeseriesPropertyDefinition( (ByteTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.DateTimeTimeseriesPropertyDefinition:
                result = updateDateTimeTimeseriesPropertyDefinition( (DateTimeTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.DoubleTimeseriesPropertyDefinition:
                result = updateDoubleTimeseriesPropertyDefinition( (DoubleTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.GuidTimeseriesPropertyDefinition:
                result = updateGuidTimeseriesPropertyDefinition( (GuidTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.Int16TimeseriesPropertyDefinition:
                result = updateInt16TimeseriesPropertyDefinition( (Int16TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.Int32TimeseriesPropertyDefinition:
                result = updateInt32TimeseriesPropertyDefinition( (Int32TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.Int64TimeseriesPropertyDefinition:
                result = updateInt64TimeseriesPropertyDefinition( (Int64TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.ReferenceTimeseriesPropertyDefinition:
                result = updateReferenceTimeseriesPropertyDefinition( (ReferenceTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.SByteTimeseriesPropertyDefinition:
                result = updateSByteTimeseriesPropertyDefinition( (SByteTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.SingleTimeseriesPropertyDefinition:
                result = updateSingleTimeseriesPropertyDefinition( (SingleTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.StringTimeseriesPropertyDefinition:
                result = updateStringTimeseriesPropertyDefinition( (StringTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.TimeSpanTimeseriesPropertyDefinition:
                result = updateTimeSpanTimeseriesPropertyDefinition( (TimeSpanTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt16TimeseriesPropertyDefinition:
                result = updateUInt16TimeseriesPropertyDefinition( (UInt16TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt32TimeseriesPropertyDefinition:
                result = updateUInt32TimeseriesPropertyDefinition( (UInt32TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt64TimeseriesPropertyDefinition:
                result = updateUInt64TimeseriesPropertyDefinition( (UInt64TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.TimeSpanPropertyDefinition:
                result = updateTimeSpanPropertyDefinition( (TimeSpanPropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt16PropertyDefinition:
                result = updateUInt16PropertyDefinition( (UInt16PropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt32PropertyDefinition:
                result = updateUInt32PropertyDefinition( (UInt32PropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt64PropertyDefinition:
                result = updateUInt64PropertyDefinition( (UInt64PropertyDefinitionObject)dataObject );
            break;
            case Kind.RadarAlarmStatus:
                result = updateRadarAlarmStatus( (RadarAlarmStatusObject)dataObject );
            break;
            case Kind.RadarCommand:
                result = updateRadarCommand( (RadarCommandObject)dataObject );
            break;
            case Kind.RadarCommandGetStatus:
                result = updateRadarCommandGetStatus( (RadarCommandGetStatusObject)dataObject );
            break;
            case Kind.RadarCommandReply:
                result = updateRadarCommandReply( (RadarCommandReplyObject)dataObject );
            break;
            case Kind.RadarCommandReplyGetStatus:
                result = updateRadarCommandReplyGetStatus( (RadarCommandReplyGetStatusObject)dataObject );
            break;
            case Kind.RadarConfiguration:
                result = updateRadarConfiguration( (RadarConfigurationObject)dataObject );
            break;
            case Kind.RadarImage:
                result = updateRadarImage( (RadarImageObject)dataObject );
            break;
            case Kind.RadarRawTrackTable:
                result = updateRadarRawTrackTable( (RadarRawTrackTableObject)dataObject );
            break;
            case Kind.RadarStatus:
                result = updateRadarStatus( (RadarStatusObject)dataObject );
            break;
            case Kind.RadioCommand:
                result = updateRadioCommand( (RadioCommandObject)dataObject );
            break;
            case Kind.RadioCommandReply:
                result = updateRadioCommandReply( (RadioCommandReplyObject)dataObject );
            break;
            case Kind.RadioConfiguration:
                result = updateRadioConfiguration( (RadioConfigurationObject)dataObject );
            break;
            case Kind.RadomeCommand:
                result = updateRadomeCommand( (RadomeCommandObject)dataObject );
            break;
            case Kind.RadomeCommandReply:
                result = updateRadomeCommandReply( (RadomeCommandReplyObject)dataObject );
            break;
            case Kind.RadomeConfiguration:
                result = updateRadomeConfiguration( (RadomeConfigurationObject)dataObject );
            break;
            case Kind.ReferenceTimeseriesValue:
                result = updateReferenceTimeseriesValue( (ReferenceTimeseriesValueObject)dataObject );
            break;
            case Kind.SByteTimeseriesValue:
                result = updateSByteTimeseriesValue( (SByteTimeseriesValueObject)dataObject );
            break;
            case Kind.SecurityDomain:
                result = updateSecurityDomain( (SecurityDomainObject)dataObject );
            break;
            case Kind.SecurityLogin:
                result = updateSecurityLogin( (SecurityLoginObject)dataObject );
            break;
            case Kind.SecurityRole:
                result = updateSecurityRole( (SecurityRoleObject)dataObject );
            break;
            case Kind.SecurityIdentifierRoleLink:
                result = updateSecurityIdentifierRoleLink( (SecurityIdentifierRoleLinkObject)dataObject );
            break;
            case Kind.SecurityLoginSession:
                result = updateSecurityLoginSession( (SecurityLoginSessionObject)dataObject );
            break;
            case Kind.SecurityPermission:
                result = updateSecurityPermission( (SecurityPermissionObject)dataObject );
            break;
            case Kind.SingleTimeseriesValue:
                result = updateSingleTimeseriesValue( (SingleTimeseriesValueObject)dataObject );
            break;
            case Kind.StringTimeseriesValue:
                result = updateStringTimeseriesValue( (StringTimeseriesValueObject)dataObject );
            break;
            case Kind.BinaryTimeseries:
                result = updateBinaryTimeseries( (BinaryTimeseriesObject)dataObject );
            break;
            case Kind.BooleanTimeseries:
                result = updateBooleanTimeseries( (BooleanTimeseriesObject)dataObject );
            break;
            case Kind.AisAidToNavigationOffPositionTimeseries:
                result = updateAisAidToNavigationOffPositionTimeseries( (AisAidToNavigationOffPositionTimeseriesObject)dataObject );
            break;
            case Kind.DeviceEnabledTimeseries:
                result = updateDeviceEnabledTimeseries( (DeviceEnabledTimeseriesObject)dataObject );
            break;
            case Kind.RadarAutomaticSensitivityTimeControlTimeseries:
                result = updateRadarAutomaticSensitivityTimeControlTimeseries( (RadarAutomaticSensitivityTimeControlTimeseriesObject)dataObject );
            break;
            case Kind.RadarBlankSector1Timeseries:
                result = updateRadarBlankSector1Timeseries( (RadarBlankSector1TimeseriesObject)dataObject );
            break;
            case Kind.RadarBlankSector2Timeseries:
                result = updateRadarBlankSector2Timeseries( (RadarBlankSector2TimeseriesObject)dataObject );
            break;
            case Kind.RadarEnableAutomaticFrequencyControlTimeseries:
                result = updateRadarEnableAutomaticFrequencyControlTimeseries( (RadarEnableAutomaticFrequencyControlTimeseriesObject)dataObject );
            break;
            case Kind.RadarEnableFastTimeConstantTimeseries:
                result = updateRadarEnableFastTimeConstantTimeseries( (RadarEnableFastTimeConstantTimeseriesObject)dataObject );
            break;
            case Kind.RadarEnableSensitivityTimeControlTimeseries:
                result = updateRadarEnableSensitivityTimeControlTimeseries( (RadarEnableSensitivityTimeControlTimeseriesObject)dataObject );
            break;
            case Kind.RadarPowerOnTimeseries:
                result = updateRadarPowerOnTimeseries( (RadarPowerOnTimeseriesObject)dataObject );
            break;
            case Kind.RadarSaveSettingsTimeseries:
                result = updateRadarSaveSettingsTimeseries( (RadarSaveSettingsTimeseriesObject)dataObject );
            break;
            case Kind.RadarTrackingTimeseries:
                result = updateRadarTrackingTimeseries( (RadarTrackingTimeseriesObject)dataObject );
            break;
            case Kind.MediaProxySessionEnabledTimeseries:
                result = updateMediaProxySessionEnabledTimeseries( (MediaProxySessionEnabledTimeseriesObject)dataObject );
            break;
            case Kind.MediaServiceEnabledTimeseries:
                result = updateMediaServiceEnabledTimeseries( (MediaServiceEnabledTimeseriesObject)dataObject );
            break;
            case Kind.ByteTimeseries:
                result = updateByteTimeseries( (ByteTimeseriesObject)dataObject );
            break;
            case Kind.DateTimeTimeseries:
                result = updateDateTimeTimeseries( (DateTimeTimeseriesObject)dataObject );
            break;
            case Kind.DoubleTimeseries:
                result = updateDoubleTimeseries( (DoubleTimeseriesObject)dataObject );
            break;
            case Kind.GNSSAltitudeTimeseries:
                result = updateGNSSAltitudeTimeseries( (GNSSAltitudeTimeseriesObject)dataObject );
            break;
            case Kind.GNSSLatitudeTimeseries:
                result = updateGNSSLatitudeTimeseries( (GNSSLatitudeTimeseriesObject)dataObject );
            break;
            case Kind.GNSSLongitudeTimeseries:
                result = updateGNSSLongitudeTimeseries( (GNSSLongitudeTimeseriesObject)dataObject );
            break;
            case Kind.GyroCourseTimeseries:
                result = updateGyroCourseTimeseries( (GyroCourseTimeseriesObject)dataObject );
            break;
            case Kind.GyroHeadingMagneticNorthTimeseries:
                result = updateGyroHeadingMagneticNorthTimeseries( (GyroHeadingMagneticNorthTimeseriesObject)dataObject );
            break;
            case Kind.GyroHeadingTrueNorthTimeseries:
                result = updateGyroHeadingTrueNorthTimeseries( (GyroHeadingTrueNorthTimeseriesObject)dataObject );
            break;
            case Kind.GyroPitchTimeseries:
                result = updateGyroPitchTimeseries( (GyroPitchTimeseriesObject)dataObject );
            break;
            case Kind.GyroRateOfTurnTimeseries:
                result = updateGyroRateOfTurnTimeseries( (GyroRateOfTurnTimeseriesObject)dataObject );
            break;
            case Kind.GyroRollTimeseries:
                result = updateGyroRollTimeseries( (GyroRollTimeseriesObject)dataObject );
            break;
            case Kind.GyroSpeedTimeseries:
                result = updateGyroSpeedTimeseries( (GyroSpeedTimeseriesObject)dataObject );
            break;
            case Kind.RadarLatitudeTimeseries:
                result = updateRadarLatitudeTimeseries( (RadarLatitudeTimeseriesObject)dataObject );
            break;
            case Kind.RadarLongitudeTimeseries:
                result = updateRadarLongitudeTimeseries( (RadarLongitudeTimeseriesObject)dataObject );
            break;
            case Kind.RadomeDewPointTimeseries:
                result = updateRadomeDewPointTimeseries( (RadomeDewPointTimeseriesObject)dataObject );
            break;
            case Kind.RadomePressureTimeseries:
                result = updateRadomePressureTimeseries( (RadomePressureTimeseriesObject)dataObject );
            break;
            case Kind.RadomeTemperatureTimeseries:
                result = updateRadomeTemperatureTimeseries( (RadomeTemperatureTimeseriesObject)dataObject );
            break;
            case Kind.VesselDraughtTimeseries:
                result = updateVesselDraughtTimeseries( (VesselDraughtTimeseriesObject)dataObject );
            break;
            case Kind.ViewLatitudeTimeseries:
                result = updateViewLatitudeTimeseries( (ViewLatitudeTimeseriesObject)dataObject );
            break;
            case Kind.ViewLongitudeTimeseries:
                result = updateViewLongitudeTimeseries( (ViewLongitudeTimeseriesObject)dataObject );
            break;
            case Kind.ViewZoomLevelTimeseries:
                result = updateViewZoomLevelTimeseries( (ViewZoomLevelTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationAbsoluteHumidityTimeseries:
                result = updateWeatherStationAbsoluteHumidityTimeseries( (WeatherStationAbsoluteHumidityTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationAirTemperatureTimeseries:
                result = updateWeatherStationAirTemperatureTimeseries( (WeatherStationAirTemperatureTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationBarometricPressureTimeseries:
                result = updateWeatherStationBarometricPressureTimeseries( (WeatherStationBarometricPressureTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationDewPointTimeseries:
                result = updateWeatherStationDewPointTimeseries( (WeatherStationDewPointTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationRelativeHumidityTimeseries:
                result = updateWeatherStationRelativeHumidityTimeseries( (WeatherStationRelativeHumidityTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationWaterTemperatureTimeseries:
                result = updateWeatherStationWaterTemperatureTimeseries( (WeatherStationWaterTemperatureTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationWindDirectionTimeseries:
                result = updateWeatherStationWindDirectionTimeseries( (WeatherStationWindDirectionTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationWindSpeedTimeseries:
                result = updateWeatherStationWindSpeedTimeseries( (WeatherStationWindSpeedTimeseriesObject)dataObject );
            break;
            case Kind.GeoPosition2DTimeseries:
                result = updateGeoPosition2DTimeseries( (GeoPosition2DTimeseriesObject)dataObject );
            break;
            case Kind.AisAidToNavigationPositionTimeseries:
                result = updateAisAidToNavigationPositionTimeseries( (AisAidToNavigationPositionTimeseriesObject)dataObject );
            break;
            case Kind.GeoPosition3DTimeseries:
                result = updateGeoPosition3DTimeseries( (GeoPosition3DTimeseriesObject)dataObject );
            break;
            case Kind.GuidTimeseries:
                result = updateGuidTimeseries( (GuidTimeseriesObject)dataObject );
            break;
            case Kind.Int16Timeseries:
                result = updateInt16Timeseries( (Int16TimeseriesObject)dataObject );
            break;
            case Kind.Int32Timeseries:
                result = updateInt32Timeseries( (Int32TimeseriesObject)dataObject );
            break;
            case Kind.RadarAzimuthOffsetTimeseries:
                result = updateRadarAzimuthOffsetTimeseries( (RadarAzimuthOffsetTimeseriesObject)dataObject );
            break;
            case Kind.RadarFastTimeConstantLevelTimeseries:
                result = updateRadarFastTimeConstantLevelTimeseries( (RadarFastTimeConstantLevelTimeseriesObject)dataObject );
            break;
            case Kind.RadarFastTimeConstantModeTimeseries:
                result = updateRadarFastTimeConstantModeTimeseries( (RadarFastTimeConstantModeTimeseriesObject)dataObject );
            break;
            case Kind.RadarPulseTimeseries:
                result = updateRadarPulseTimeseries( (RadarPulseTimeseriesObject)dataObject );
            break;
            case Kind.RadarSector1EndTimeseries:
                result = updateRadarSector1EndTimeseries( (RadarSector1EndTimeseriesObject)dataObject );
            break;
            case Kind.RadarSector1StartTimeseries:
                result = updateRadarSector1StartTimeseries( (RadarSector1StartTimeseriesObject)dataObject );
            break;
            case Kind.RadarSector2EndTimeseries:
                result = updateRadarSector2EndTimeseries( (RadarSector2EndTimeseriesObject)dataObject );
            break;
            case Kind.RadarSector2StartTimeseries:
                result = updateRadarSector2StartTimeseries( (RadarSector2StartTimeseriesObject)dataObject );
            break;
            case Kind.RadarSensitivityTimeControlLevelTimeseries:
                result = updateRadarSensitivityTimeControlLevelTimeseries( (RadarSensitivityTimeControlLevelTimeseriesObject)dataObject );
            break;
            case Kind.RadarTuningTimeseries:
                result = updateRadarTuningTimeseries( (RadarTuningTimeseriesObject)dataObject );
            break;
            case Kind.VesselPersonsOnBoardTimeseries:
                result = updateVesselPersonsOnBoardTimeseries( (VesselPersonsOnBoardTimeseriesObject)dataObject );
            break;
            case Kind.Int64Timeseries:
                result = updateInt64Timeseries( (Int64TimeseriesObject)dataObject );
            break;
            case Kind.Position2DTimeseries:
                result = updatePosition2DTimeseries( (Position2DTimeseriesObject)dataObject );
            break;
            case Kind.Position3DTimeseries:
                result = updatePosition3DTimeseries( (Position3DTimeseriesObject)dataObject );
            break;
            case Kind.ReferenceTimeseries:
                result = updateReferenceTimeseries( (ReferenceTimeseriesObject)dataObject );
            break;
            case Kind.SByteTimeseries:
                result = updateSByteTimeseries( (SByteTimeseriesObject)dataObject );
            break;
            case Kind.SingleTimeseries:
                result = updateSingleTimeseries( (SingleTimeseriesObject)dataObject );
            break;
            case Kind.StringTimeseries:
                result = updateStringTimeseries( (StringTimeseriesObject)dataObject );
            break;
            case Kind.TimeSpanTimeseries:
                result = updateTimeSpanTimeseries( (TimeSpanTimeseriesObject)dataObject );
            break;
            case Kind.UInt16Timeseries:
                result = updateUInt16Timeseries( (UInt16TimeseriesObject)dataObject );
            break;
            case Kind.UInt32Timeseries:
                result = updateUInt32Timeseries( (UInt32TimeseriesObject)dataObject );
            break;
            case Kind.RadomeStatusTimeseries:
                result = updateRadomeStatusTimeseries( (RadomeStatusTimeseriesObject)dataObject );
            break;
            case Kind.UInt64Timeseries:
                result = updateUInt64Timeseries( (UInt64TimeseriesObject)dataObject );
            break;
            case Kind.TimeseriesCatalog:
                result = updateTimeseriesCatalog( (TimeseriesCatalogObject)dataObject );
            break;
            case Kind.TimeseriesInfo:
                result = updateTimeseriesInfo( (TimeseriesInfoObject)dataObject );
            break;
            case Kind.TimeSpanTimeseriesValue:
                result = updateTimeSpanTimeseriesValue( (TimeSpanTimeseriesValueObject)dataObject );
            break;
            case Kind.TrackableItemTrackLink:
                result = updateTrackableItemTrackLink( (TrackableItemTrackLinkObject)dataObject );
            break;
            case Kind.Track:
                result = updateTrack( (TrackObject)dataObject );
            break;
            case Kind.Track3D:
                result = updateTrack3D( (Track3DObject)dataObject );
            break;
            case Kind.TrackerFilterParameters:
                result = updateTrackerFilterParameters( (TrackerFilterParametersObject)dataObject );
            break;
            case Kind.TrackerFilterParametersConfiguration:
                result = updateTrackerFilterParametersConfiguration( (TrackerFilterParametersConfigurationObject)dataObject );
            break;
            case Kind.TrackInfo:
                result = updateTrackInfo( (TrackInfoObject)dataObject );
            break;
            case Kind.TrackingServiceOptions:
                result = updateTrackingServiceOptions( (TrackingServiceOptionsObject)dataObject );
            break;
            case Kind.TrackLink:
                result = updateTrackLink( (TrackLinkObject)dataObject );
            break;
            case Kind.TrackValue:
                result = updateTrackValue( (TrackValueObject)dataObject );
            break;
            case Kind.TrackValue3D:
                result = updateTrackValue3D( (TrackValue3DObject)dataObject );
            break;
            case Kind.UInt16TimeseriesValue:
                result = updateUInt16TimeseriesValue( (UInt16TimeseriesValueObject)dataObject );
            break;
            case Kind.UInt32TimeseriesValue:
                result = updateUInt32TimeseriesValue( (UInt32TimeseriesValueObject)dataObject );
            break;
            case Kind.UInt64TimeseriesValue:
                result = updateUInt64TimeseriesValue( (UInt64TimeseriesValueObject)dataObject );
            break;
            case Kind.VehicleType:
                result = updateVehicleType( (VehicleTypeObject)dataObject );
            break;
            case Kind.VesselType:
                result = updateVesselType( (VesselTypeObject)dataObject );
            break;
            case Kind.View:
                result = updateView( (ViewObject)dataObject );
            break;
            case Kind.ViewCameraLink:
                result = updateViewCameraLink( (ViewCameraLinkObject)dataObject );
            break;
            case Kind.ViewTrackerLink:
                result = updateViewTrackerLink( (ViewTrackerLinkObject)dataObject );
            break;
            case Kind.WeatherStationCommand:
                result = updateWeatherStationCommand( (WeatherStationCommandObject)dataObject );
            break;
            case Kind.WeatherStationCommandReply:
                result = updateWeatherStationCommandReply( (WeatherStationCommandReplyObject)dataObject );
            break;
            case Kind.WeatherStationConfiguration:
                result = updateWeatherStationConfiguration( (WeatherStationConfigurationObject)dataObject );
            break;
            case Kind.CircularZone:
                result = updateCircularZone( (CircularZoneObject)dataObject );
            break;
            case Kind.PolygonZone:
                result = updatePolygonZone( (PolygonZoneObject)dataObject );
            break;
            case Kind.ZoneExceptions:
                result = updateZoneExceptions( (ZoneExceptionsObject)dataObject );
            break;
            case Kind.ZoneExceptionsVesselLink:
                result = updateZoneExceptionsVesselLink( (ZoneExceptionsVesselLinkObject)dataObject );
            break;
            case Kind.ZoneTrackAlarm:
                result = updateZoneTrackAlarm( (ZoneTrackAlarmObject)dataObject );
            break;
        }
        return result;
    }

    public final boolean deleteObject( AbstractDataObjectWithGuidKey dataObject ) throws SQLException {
        boolean result = false;
        var kind = dataObject.getObjectType( );
        switch ( kind ) {
            case Kind.AircraftType:
                result = deleteAircraftType( (AircraftTypeObject)dataObject );
            break;
            case Kind.AisDeviceCommand:
                result = deleteAisDeviceCommand( (AisDeviceCommandObject)dataObject );
            break;
            case Kind.AisDeviceCommandReply:
                result = deleteAisDeviceCommandReply( (AisDeviceCommandReplyObject)dataObject );
            break;
            case Kind.AisDeviceConfiguration:
                result = deleteAisDeviceConfiguration( (AisDeviceConfigurationObject)dataObject );
            break;
            case Kind.AisDeviceRawMessage:
                result = deleteAisDeviceRawMessage( (AisDeviceRawMessageObject)dataObject );
            break;
            case Kind.AisDeviceRawSentence:
                result = deleteAisDeviceRawSentence( (AisDeviceRawSentenceObject)dataObject );
            break;
            case Kind.AidToNavigationReportMessage:
                result = deleteAidToNavigationReportMessage( (AidToNavigationReportMessageObject)dataObject );
            break;
            case Kind.AisAddressedSafetyRelatedMessage:
                result = deleteAisAddressedSafetyRelatedMessage( (AisAddressedSafetyRelatedMessageObject)dataObject );
            break;
            case Kind.AisBaseStationReportMessage:
                result = deleteAisBaseStationReportMessage( (AisBaseStationReportMessageObject)dataObject );
            break;
            case Kind.AisBinaryAcknowledgeMessage:
                result = deleteAisBinaryAcknowledgeMessage( (AisBinaryAcknowledgeMessageObject)dataObject );
            break;
            case Kind.AisBinaryAddressedMessage:
                result = deleteAisBinaryAddressedMessage( (AisBinaryAddressedMessageObject)dataObject );
            break;
            case Kind.AisBinaryBroadcastMessage:
                result = deleteAisBinaryBroadcastMessage( (AisBinaryBroadcastMessageObject)dataObject );
            break;
            case Kind.AisDataLinkManagementMessage:
                result = deleteAisDataLinkManagementMessage( (AisDataLinkManagementMessageObject)dataObject );
            break;
            case Kind.AisExtendedClassBCsPositionReportMessage:
                result = deleteAisExtendedClassBCsPositionReportMessage( (AisExtendedClassBCsPositionReportMessageObject)dataObject );
            break;
            case Kind.AisInterrogationMessage:
                result = deleteAisInterrogationMessage( (AisInterrogationMessageObject)dataObject );
            break;
            case Kind.AisPositionReportClassAAssignedScheduleMessage:
                result = deleteAisPositionReportClassAAssignedScheduleMessage( (AisPositionReportClassAAssignedScheduleMessageObject)dataObject );
            break;
            case Kind.AisPositionReportClassAMessage:
                result = deleteAisPositionReportClassAMessage( (AisPositionReportClassAMessageObject)dataObject );
            break;
            case Kind.AisPositionReportClassAResponseToInterrogationMessage:
                result = deleteAisPositionReportClassAResponseToInterrogationMessage( (AisPositionReportClassAResponseToInterrogationMessageObject)dataObject );
            break;
            case Kind.AisPositionReportForLongRangeApplicationsMessage:
                result = deleteAisPositionReportForLongRangeApplicationsMessage( (AisPositionReportForLongRangeApplicationsMessageObject)dataObject );
            break;
            case Kind.AisSafetyRelatedAcknowledgmentMessage:
                result = deleteAisSafetyRelatedAcknowledgmentMessage( (AisSafetyRelatedAcknowledgmentMessageObject)dataObject );
            break;
            case Kind.AisStandardClassBCsPositionReportMessage:
                result = deleteAisStandardClassBCsPositionReportMessage( (AisStandardClassBCsPositionReportMessageObject)dataObject );
            break;
            case Kind.AisStandardSarAircraftPositionReportMessage:
                result = deleteAisStandardSarAircraftPositionReportMessage( (AisStandardSarAircraftPositionReportMessageObject)dataObject );
            break;
            case Kind.AisStaticAndVoyageRelatedDataMessage:
                result = deleteAisStaticAndVoyageRelatedDataMessage( (AisStaticAndVoyageRelatedDataMessageObject)dataObject );
            break;
            case Kind.AisStaticDataReportMessage:
                result = deleteAisStaticDataReportMessage( (AisStaticDataReportMessageObject)dataObject );
            break;
            case Kind.AisStaticDataReportPartAMessage:
                result = deleteAisStaticDataReportPartAMessage( (AisStaticDataReportPartAMessageObject)dataObject );
            break;
            case Kind.AisStaticDataReportPartBMessage:
                result = deleteAisStaticDataReportPartBMessage( (AisStaticDataReportPartBMessageObject)dataObject );
            break;
            case Kind.AisUtcAndDateInquiryMessage:
                result = deleteAisUtcAndDateInquiryMessage( (AisUtcAndDateInquiryMessageObject)dataObject );
            break;
            case Kind.AisUtcAndDateResponseMessage:
                result = deleteAisUtcAndDateResponseMessage( (AisUtcAndDateResponseMessageObject)dataObject );
            break;
            case Kind.AlarmStateChange:
                result = deleteAlarmStateChange( (AlarmStateChangeObject)dataObject );
            break;
            case Kind.BaseStationType:
                result = deleteBaseStationType( (BaseStationTypeObject)dataObject );
            break;
            case Kind.BinaryTimeseriesValue:
                result = deleteBinaryTimeseriesValue( (BinaryTimeseriesValueObject)dataObject );
            break;
            case Kind.Bookmark:
                result = deleteBookmark( (BookmarkObject)dataObject );
            break;
            case Kind.BooleanTimeseriesValue:
                result = deleteBooleanTimeseriesValue( (BooleanTimeseriesValueObject)dataObject );
            break;
            case Kind.ByteTimeseriesValue:
                result = deleteByteTimeseriesValue( (ByteTimeseriesValueObject)dataObject );
            break;
            case Kind.CameraCommand:
                result = deleteCameraCommand( (CameraCommandObject)dataObject );
            break;
            case Kind.CameraCommandAbsoluteMove:
                result = deleteCameraCommandAbsoluteMove( (CameraCommandAbsoluteMoveObject)dataObject );
            break;
            case Kind.CameraCommandAdjustPanTiltZoom:
                result = deleteCameraCommandAdjustPanTiltZoom( (CameraCommandAdjustPanTiltZoomObject)dataObject );
            break;
            case Kind.CameraCommandContinuousMove:
                result = deleteCameraCommandContinuousMove( (CameraCommandContinuousMoveObject)dataObject );
            break;
            case Kind.CameraCommandGeoMove:
                result = deleteCameraCommandGeoMove( (CameraCommandGeoMoveObject)dataObject );
            break;
            case Kind.CameraCommandRelativeMove:
                result = deleteCameraCommandRelativeMove( (CameraCommandRelativeMoveObject)dataObject );
            break;
            case Kind.CameraCommandReleasePTZOwnership:
                result = deleteCameraCommandReleasePTZOwnership( (CameraCommandReleasePTZOwnershipObject)dataObject );
            break;
            case Kind.CameraCommandRequestPTZOwnership:
                result = deleteCameraCommandRequestPTZOwnership( (CameraCommandRequestPTZOwnershipObject)dataObject );
            break;
            case Kind.CameraCommandSetAutoFocus:
                result = deleteCameraCommandSetAutoFocus( (CameraCommandSetAutoFocusObject)dataObject );
            break;
            case Kind.CameraCommandSetBlackAndWhite:
                result = deleteCameraCommandSetBlackAndWhite( (CameraCommandSetBlackAndWhiteObject)dataObject );
            break;
            case Kind.CameraCommandSetFollowed:
                result = deleteCameraCommandSetFollowed( (CameraCommandSetFollowedObject)dataObject );
            break;
            case Kind.CameraCommandSetInfraRedLamp:
                result = deleteCameraCommandSetInfraRedLamp( (CameraCommandSetInfraRedLampObject)dataObject );
            break;
            case Kind.CameraCommandSetWasher:
                result = deleteCameraCommandSetWasher( (CameraCommandSetWasherObject)dataObject );
            break;
            case Kind.CameraCommandSetWiper:
                result = deleteCameraCommandSetWiper( (CameraCommandSetWiperObject)dataObject );
            break;
            case Kind.CameraCommandStop:
                result = deleteCameraCommandStop( (CameraCommandStopObject)dataObject );
            break;
            case Kind.CameraCommandReply:
                result = deleteCameraCommandReply( (CameraCommandReplyObject)dataObject );
            break;
            case Kind.CameraConfiguration:
                result = deleteCameraConfiguration( (CameraConfigurationObject)dataObject );
            break;
            case Kind.CameraPanCalibration:
                result = deleteCameraPanCalibration( (CameraPanCalibrationObject)dataObject );
            break;
            case Kind.CameraPanCalibrationValue:
                result = deleteCameraPanCalibrationValue( (CameraPanCalibrationValueObject)dataObject );
            break;
            case Kind.CameraStatus:
                result = deleteCameraStatus( (CameraStatusObject)dataObject );
            break;
            case Kind.CameraTiltCalibration:
                result = deleteCameraTiltCalibration( (CameraTiltCalibrationObject)dataObject );
            break;
            case Kind.CameraTiltCalibrationValue:
                result = deleteCameraTiltCalibrationValue( (CameraTiltCalibrationValueObject)dataObject );
            break;
            case Kind.CameraZoomCalibration:
                result = deleteCameraZoomCalibration( (CameraZoomCalibrationObject)dataObject );
            break;
            case Kind.CameraZoomCalibrationValue:
                result = deleteCameraZoomCalibrationValue( (CameraZoomCalibrationValueObject)dataObject );
            break;
            case Kind.Catalog:
                result = deleteCatalog( (CatalogObject)dataObject );
            break;
            case Kind.Element:
                result = deleteElement( (ElementObject)dataObject );
            break;
            case Kind.CollectionInfo:
                result = deleteCollectionInfo( (CollectionInfoObject)dataObject );
            break;
            case Kind.Country:
                result = deleteCountry( (CountryObject)dataObject );
            break;
            case Kind.CursorInfo:
                result = deleteCursorInfo( (CursorInfoObject)dataObject );
            break;
            case Kind.DateTimeTimeseriesValue:
                result = deleteDateTimeTimeseriesValue( (DateTimeTimeseriesValueObject)dataObject );
            break;
            case Kind.DeviceHost:
                result = deleteDeviceHost( (DeviceHostObject)dataObject );
            break;
            case Kind.DeviceHostConfiguration:
                result = deleteDeviceHostConfiguration( (DeviceHostConfigurationObject)dataObject );
            break;
            case Kind.DoubleTimeseriesValue:
                result = deleteDoubleTimeseriesValue( (DoubleTimeseriesValueObject)dataObject );
            break;
            case Kind.FacilityType:
                result = deleteFacilityType( (FacilityTypeObject)dataObject );
            break;
            case Kind.GeoPosition2DTimeseriesValue:
                result = deleteGeoPosition2DTimeseriesValue( (GeoPosition2DTimeseriesValueObject)dataObject );
            break;
            case Kind.GeoPosition3DTimeseriesValue:
                result = deleteGeoPosition3DTimeseriesValue( (GeoPosition3DTimeseriesValueObject)dataObject );
            break;
            case Kind.GNSSDeviceCommand:
                result = deleteGNSSDeviceCommand( (GNSSDeviceCommandObject)dataObject );
            break;
            case Kind.GNSSDeviceCommandReply:
                result = deleteGNSSDeviceCommandReply( (GNSSDeviceCommandReplyObject)dataObject );
            break;
            case Kind.GNSSDeviceConfiguration:
                result = deleteGNSSDeviceConfiguration( (GNSSDeviceConfigurationObject)dataObject );
            break;
            case Kind.GuidTimeseriesValue:
                result = deleteGuidTimeseriesValue( (GuidTimeseriesValueObject)dataObject );
            break;
            case Kind.GyroDeviceCommand:
                result = deleteGyroDeviceCommand( (GyroDeviceCommandObject)dataObject );
            break;
            case Kind.GyroDeviceCommandReply:
                result = deleteGyroDeviceCommandReply( (GyroDeviceCommandReplyObject)dataObject );
            break;
            case Kind.GyroDeviceConfiguration:
                result = deleteGyroDeviceConfiguration( (GyroDeviceConfigurationObject)dataObject );
            break;
            case Kind.Callsign:
                result = deleteCallsign( (CallsignObject)dataObject );
            break;
            case Kind.InternationalMaritimeOrganizationNumber:
                result = deleteInternationalMaritimeOrganizationNumber( (InternationalMaritimeOrganizationNumberObject)dataObject );
            break;
            case Kind.MaritimeMobileServiceIdentity:
                result = deleteMaritimeMobileServiceIdentity( (MaritimeMobileServiceIdentityObject)dataObject );
            break;
            case Kind.Name:
                result = deleteName( (NameObject)dataObject );
            break;
            case Kind.Int16TimeseriesValue:
                result = deleteInt16TimeseriesValue( (Int16TimeseriesValueObject)dataObject );
            break;
            case Kind.Int32TimeseriesValue:
                result = deleteInt32TimeseriesValue( (Int32TimeseriesValueObject)dataObject );
            break;
            case Kind.Int64TimeseriesValue:
                result = deleteInt64TimeseriesValue( (Int64TimeseriesValueObject)dataObject );
            break;
            case Kind.BaseStation:
                result = deleteBaseStation( (BaseStationObject)dataObject );
            break;
            case Kind.CameraDevice:
                result = deleteCameraDevice( (CameraDeviceObject)dataObject );
            break;
            case Kind.GNSSDevice:
                result = deleteGNSSDevice( (GNSSDeviceObject)dataObject );
            break;
            case Kind.GyroDevice:
                result = deleteGyroDevice( (GyroDeviceObject)dataObject );
            break;
            case Kind.LineInputDevice:
                result = deleteLineInputDevice( (LineInputDeviceObject)dataObject );
            break;
            case Kind.OilSpillDetectorDevice:
                result = deleteOilSpillDetectorDevice( (OilSpillDetectorDeviceObject)dataObject );
            break;
            case Kind.RadioDevice:
                result = deleteRadioDevice( (RadioDeviceObject)dataObject );
            break;
            case Kind.RadomeDevice:
                result = deleteRadomeDevice( (RadomeDeviceObject)dataObject );
            break;
            case Kind.AisDevice:
                result = deleteAisDevice( (AisDeviceObject)dataObject );
            break;
            case Kind.RadarDevice:
                result = deleteRadarDevice( (RadarDeviceObject)dataObject );
            break;
            case Kind.WeatherStationDevice:
                result = deleteWeatherStationDevice( (WeatherStationDeviceObject)dataObject );
            break;
            case Kind.Facility:
                result = deleteFacility( (FacilityObject)dataObject );
            break;
            case Kind.Aircraft:
                result = deleteAircraft( (AircraftObject)dataObject );
            break;
            case Kind.AisAidToNavigation:
                result = deleteAisAidToNavigation( (AisAidToNavigationObject)dataObject );
            break;
            case Kind.Vehicle:
                result = deleteVehicle( (VehicleObject)dataObject );
            break;
            case Kind.Vessel:
                result = deleteVessel( (VesselObject)dataObject );
            break;
            case Kind.ItemIdentityLink:
                result = deleteItemIdentityLink( (ItemIdentityLinkObject)dataObject );
            break;
            case Kind.ItemParentChildLink:
                result = deleteItemParentChildLink( (ItemParentChildLinkObject)dataObject );
            break;
            case Kind.LineInputDeviceCommand:
                result = deleteLineInputDeviceCommand( (LineInputDeviceCommandObject)dataObject );
            break;
            case Kind.LineInputDeviceCommandReply:
                result = deleteLineInputDeviceCommandReply( (LineInputDeviceCommandReplyObject)dataObject );
            break;
            case Kind.LineInputDeviceConfiguration:
                result = deleteLineInputDeviceConfiguration( (LineInputDeviceConfigurationObject)dataObject );
            break;
            case Kind.LineInputMessageRouting:
                result = deleteLineInputMessageRouting( (LineInputMessageRoutingObject)dataObject );
            break;
            case Kind.LineInputMessageRoutingDestination:
                result = deleteLineInputMessageRoutingDestination( (LineInputMessageRoutingDestinationObject)dataObject );
            break;
            case Kind.LineInputWhiteListEntry:
                result = deleteLineInputWhiteListEntry( (LineInputWhiteListEntryObject)dataObject );
            break;
            case Kind.LogApplication:
                result = deleteLogApplication( (LogApplicationObject)dataObject );
            break;
            case Kind.LogApplicationConfiguration:
                result = deleteLogApplicationConfiguration( (LogApplicationConfigurationObject)dataObject );
            break;
            case Kind.LogHost:
                result = deleteLogHost( (LogHostObject)dataObject );
            break;
            case Kind.LogHostConfiguration:
                result = deleteLogHostConfiguration( (LogHostConfigurationObject)dataObject );
            break;
            case Kind.LogLocation:
                result = deleteLogLocation( (LogLocationObject)dataObject );
            break;
            case Kind.LogProcess:
                result = deleteLogProcess( (LogProcessObject)dataObject );
            break;
            case Kind.LogRecord:
                result = deleteLogRecord( (LogRecordObject)dataObject );
            break;
            case Kind.LogThread:
                result = deleteLogThread( (LogThreadObject)dataObject );
            break;
            case Kind.LogTraceEntry:
                result = deleteLogTraceEntry( (LogTraceEntryObject)dataObject );
            break;
            case Kind.MapElement:
                result = deleteMapElement( (MapElementObject)dataObject );
            break;
            case Kind.MapInfo:
                result = deleteMapInfo( (MapInfoObject)dataObject );
            break;
            case Kind.MapServiceOptions:
                result = deleteMapServiceOptions( (MapServiceOptionsObject)dataObject );
            break;
            case Kind.MaritimeIdentificationDigits:
                result = deleteMaritimeIdentificationDigits( (MaritimeIdentificationDigitsObject)dataObject );
            break;
            case Kind.MediaProxySession:
                result = deleteMediaProxySession( (MediaProxySessionObject)dataObject );
            break;
            case Kind.MediaProxySessionFile:
                result = deleteMediaProxySessionFile( (MediaProxySessionFileObject)dataObject );
            break;
            case Kind.MediaProxySessionOptions:
                result = deleteMediaProxySessionOptions( (MediaProxySessionOptionsObject)dataObject );
            break;
            case Kind.MediaService:
                result = deleteMediaService( (MediaServiceObject)dataObject );
            break;
            case Kind.MediaServiceOptions:
                result = deleteMediaServiceOptions( (MediaServiceOptionsObject)dataObject );
            break;
            case Kind.ElementType:
                result = deleteElementType( (ElementTypeObject)dataObject );
            break;
            case Kind.Namespace:
                result = deleteNamespace( (NamespaceObject)dataObject );
            break;
            case Kind.OilSpill:
                result = deleteOilSpill( (OilSpillObject)dataObject );
            break;
            case Kind.OilSpillDetectorCommand:
                result = deleteOilSpillDetectorCommand( (OilSpillDetectorCommandObject)dataObject );
            break;
            case Kind.OilSpillDetectorCommandReply:
                result = deleteOilSpillDetectorCommandReply( (OilSpillDetectorCommandReplyObject)dataObject );
            break;
            case Kind.OilSpillDetectorConfiguration:
                result = deleteOilSpillDetectorConfiguration( (OilSpillDetectorConfigurationObject)dataObject );
            break;
            case Kind.Position2DTimeseriesValue:
                result = deletePosition2DTimeseriesValue( (Position2DTimeseriesValueObject)dataObject );
            break;
            case Kind.Position3DTimeseriesValue:
                result = deletePosition3DTimeseriesValue( (Position3DTimeseriesValueObject)dataObject );
            break;
            case Kind.ProcessTrackValueResult:
                result = deleteProcessTrackValueResult( (ProcessTrackValueResultObject)dataObject );
            break;
            case Kind.BinaryProperty:
                result = deleteBinaryProperty( (BinaryPropertyObject)dataObject );
            break;
            case Kind.BooleanProperty:
                result = deleteBooleanProperty( (BooleanPropertyObject)dataObject );
            break;
            case Kind.ByteProperty:
                result = deleteByteProperty( (BytePropertyObject)dataObject );
            break;
            case Kind.DateTimeProperty:
                result = deleteDateTimeProperty( (DateTimePropertyObject)dataObject );
            break;
            case Kind.DoubleProperty:
                result = deleteDoubleProperty( (DoublePropertyObject)dataObject );
            break;
            case Kind.GuidProperty:
                result = deleteGuidProperty( (GuidPropertyObject)dataObject );
            break;
            case Kind.Int16Property:
                result = deleteInt16Property( (Int16PropertyObject)dataObject );
            break;
            case Kind.Int32Property:
                result = deleteInt32Property( (Int32PropertyObject)dataObject );
            break;
            case Kind.Int64Property:
                result = deleteInt64Property( (Int64PropertyObject)dataObject );
            break;
            case Kind.ReferenceProperty:
                result = deleteReferenceProperty( (ReferencePropertyObject)dataObject );
            break;
            case Kind.SByteProperty:
                result = deleteSByteProperty( (SBytePropertyObject)dataObject );
            break;
            case Kind.SingleProperty:
                result = deleteSingleProperty( (SinglePropertyObject)dataObject );
            break;
            case Kind.StringProperty:
                result = deleteStringProperty( (StringPropertyObject)dataObject );
            break;
            case Kind.BinaryTimeseriesProperty:
                result = deleteBinaryTimeseriesProperty( (BinaryTimeseriesPropertyObject)dataObject );
            break;
            case Kind.BooleanTimeseriesProperty:
                result = deleteBooleanTimeseriesProperty( (BooleanTimeseriesPropertyObject)dataObject );
            break;
            case Kind.ByteTimeseriesProperty:
                result = deleteByteTimeseriesProperty( (ByteTimeseriesPropertyObject)dataObject );
            break;
            case Kind.DateTimeTimeseriesProperty:
                result = deleteDateTimeTimeseriesProperty( (DateTimeTimeseriesPropertyObject)dataObject );
            break;
            case Kind.DoubleTimeseriesProperty:
                result = deleteDoubleTimeseriesProperty( (DoubleTimeseriesPropertyObject)dataObject );
            break;
            case Kind.GuidTimeseriesProperty:
                result = deleteGuidTimeseriesProperty( (GuidTimeseriesPropertyObject)dataObject );
            break;
            case Kind.Int16TimeseriesProperty:
                result = deleteInt16TimeseriesProperty( (Int16TimeseriesPropertyObject)dataObject );
            break;
            case Kind.Int32TimeseriesProperty:
                result = deleteInt32TimeseriesProperty( (Int32TimeseriesPropertyObject)dataObject );
            break;
            case Kind.Int64TimeseriesProperty:
                result = deleteInt64TimeseriesProperty( (Int64TimeseriesPropertyObject)dataObject );
            break;
            case Kind.ReferenceTimeseriesProperty:
                result = deleteReferenceTimeseriesProperty( (ReferenceTimeseriesPropertyObject)dataObject );
            break;
            case Kind.SByteTimeseriesProperty:
                result = deleteSByteTimeseriesProperty( (SByteTimeseriesPropertyObject)dataObject );
            break;
            case Kind.SingleTimeseriesProperty:
                result = deleteSingleTimeseriesProperty( (SingleTimeseriesPropertyObject)dataObject );
            break;
            case Kind.StringTimeseriesProperty:
                result = deleteStringTimeseriesProperty( (StringTimeseriesPropertyObject)dataObject );
            break;
            case Kind.TimeSpanTimeseriesProperty:
                result = deleteTimeSpanTimeseriesProperty( (TimeSpanTimeseriesPropertyObject)dataObject );
            break;
            case Kind.UInt16TimeseriesProperty:
                result = deleteUInt16TimeseriesProperty( (UInt16TimeseriesPropertyObject)dataObject );
            break;
            case Kind.UInt32TimeseriesProperty:
                result = deleteUInt32TimeseriesProperty( (UInt32TimeseriesPropertyObject)dataObject );
            break;
            case Kind.UInt64TimeseriesProperty:
                result = deleteUInt64TimeseriesProperty( (UInt64TimeseriesPropertyObject)dataObject );
            break;
            case Kind.TimeSpanProperty:
                result = deleteTimeSpanProperty( (TimeSpanPropertyObject)dataObject );
            break;
            case Kind.UInt16Property:
                result = deleteUInt16Property( (UInt16PropertyObject)dataObject );
            break;
            case Kind.UInt32Property:
                result = deleteUInt32Property( (UInt32PropertyObject)dataObject );
            break;
            case Kind.UInt64Property:
                result = deleteUInt64Property( (UInt64PropertyObject)dataObject );
            break;
            case Kind.BinaryPropertyDefinition:
                result = deleteBinaryPropertyDefinition( (BinaryPropertyDefinitionObject)dataObject );
            break;
            case Kind.BooleanPropertyDefinition:
                result = deleteBooleanPropertyDefinition( (BooleanPropertyDefinitionObject)dataObject );
            break;
            case Kind.BytePropertyDefinition:
                result = deleteBytePropertyDefinition( (BytePropertyDefinitionObject)dataObject );
            break;
            case Kind.DateTimePropertyDefinition:
                result = deleteDateTimePropertyDefinition( (DateTimePropertyDefinitionObject)dataObject );
            break;
            case Kind.DoublePropertyDefinition:
                result = deleteDoublePropertyDefinition( (DoublePropertyDefinitionObject)dataObject );
            break;
            case Kind.GuidPropertyDefinition:
                result = deleteGuidPropertyDefinition( (GuidPropertyDefinitionObject)dataObject );
            break;
            case Kind.Int16PropertyDefinition:
                result = deleteInt16PropertyDefinition( (Int16PropertyDefinitionObject)dataObject );
            break;
            case Kind.Int32PropertyDefinition:
                result = deleteInt32PropertyDefinition( (Int32PropertyDefinitionObject)dataObject );
            break;
            case Kind.Int64PropertyDefinition:
                result = deleteInt64PropertyDefinition( (Int64PropertyDefinitionObject)dataObject );
            break;
            case Kind.ReferencePropertyDefinition:
                result = deleteReferencePropertyDefinition( (ReferencePropertyDefinitionObject)dataObject );
            break;
            case Kind.SBytePropertyDefinition:
                result = deleteSBytePropertyDefinition( (SBytePropertyDefinitionObject)dataObject );
            break;
            case Kind.SinglePropertyDefinition:
                result = deleteSinglePropertyDefinition( (SinglePropertyDefinitionObject)dataObject );
            break;
            case Kind.StringPropertyDefinition:
                result = deleteStringPropertyDefinition( (StringPropertyDefinitionObject)dataObject );
            break;
            case Kind.BinaryTimeseriesPropertyDefinition:
                result = deleteBinaryTimeseriesPropertyDefinition( (BinaryTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.BooleanTimeseriesPropertyDefinition:
                result = deleteBooleanTimeseriesPropertyDefinition( (BooleanTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.ByteTimeseriesPropertyDefinition:
                result = deleteByteTimeseriesPropertyDefinition( (ByteTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.DateTimeTimeseriesPropertyDefinition:
                result = deleteDateTimeTimeseriesPropertyDefinition( (DateTimeTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.DoubleTimeseriesPropertyDefinition:
                result = deleteDoubleTimeseriesPropertyDefinition( (DoubleTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.GuidTimeseriesPropertyDefinition:
                result = deleteGuidTimeseriesPropertyDefinition( (GuidTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.Int16TimeseriesPropertyDefinition:
                result = deleteInt16TimeseriesPropertyDefinition( (Int16TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.Int32TimeseriesPropertyDefinition:
                result = deleteInt32TimeseriesPropertyDefinition( (Int32TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.Int64TimeseriesPropertyDefinition:
                result = deleteInt64TimeseriesPropertyDefinition( (Int64TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.ReferenceTimeseriesPropertyDefinition:
                result = deleteReferenceTimeseriesPropertyDefinition( (ReferenceTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.SByteTimeseriesPropertyDefinition:
                result = deleteSByteTimeseriesPropertyDefinition( (SByteTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.SingleTimeseriesPropertyDefinition:
                result = deleteSingleTimeseriesPropertyDefinition( (SingleTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.StringTimeseriesPropertyDefinition:
                result = deleteStringTimeseriesPropertyDefinition( (StringTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.TimeSpanTimeseriesPropertyDefinition:
                result = deleteTimeSpanTimeseriesPropertyDefinition( (TimeSpanTimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt16TimeseriesPropertyDefinition:
                result = deleteUInt16TimeseriesPropertyDefinition( (UInt16TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt32TimeseriesPropertyDefinition:
                result = deleteUInt32TimeseriesPropertyDefinition( (UInt32TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt64TimeseriesPropertyDefinition:
                result = deleteUInt64TimeseriesPropertyDefinition( (UInt64TimeseriesPropertyDefinitionObject)dataObject );
            break;
            case Kind.TimeSpanPropertyDefinition:
                result = deleteTimeSpanPropertyDefinition( (TimeSpanPropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt16PropertyDefinition:
                result = deleteUInt16PropertyDefinition( (UInt16PropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt32PropertyDefinition:
                result = deleteUInt32PropertyDefinition( (UInt32PropertyDefinitionObject)dataObject );
            break;
            case Kind.UInt64PropertyDefinition:
                result = deleteUInt64PropertyDefinition( (UInt64PropertyDefinitionObject)dataObject );
            break;
            case Kind.RadarAlarmStatus:
                result = deleteRadarAlarmStatus( (RadarAlarmStatusObject)dataObject );
            break;
            case Kind.RadarCommand:
                result = deleteRadarCommand( (RadarCommandObject)dataObject );
            break;
            case Kind.RadarCommandGetStatus:
                result = deleteRadarCommandGetStatus( (RadarCommandGetStatusObject)dataObject );
            break;
            case Kind.RadarCommandReply:
                result = deleteRadarCommandReply( (RadarCommandReplyObject)dataObject );
            break;
            case Kind.RadarCommandReplyGetStatus:
                result = deleteRadarCommandReplyGetStatus( (RadarCommandReplyGetStatusObject)dataObject );
            break;
            case Kind.RadarConfiguration:
                result = deleteRadarConfiguration( (RadarConfigurationObject)dataObject );
            break;
            case Kind.RadarImage:
                result = deleteRadarImage( (RadarImageObject)dataObject );
            break;
            case Kind.RadarRawTrackTable:
                result = deleteRadarRawTrackTable( (RadarRawTrackTableObject)dataObject );
            break;
            case Kind.RadarStatus:
                result = deleteRadarStatus( (RadarStatusObject)dataObject );
            break;
            case Kind.RadioCommand:
                result = deleteRadioCommand( (RadioCommandObject)dataObject );
            break;
            case Kind.RadioCommandReply:
                result = deleteRadioCommandReply( (RadioCommandReplyObject)dataObject );
            break;
            case Kind.RadioConfiguration:
                result = deleteRadioConfiguration( (RadioConfigurationObject)dataObject );
            break;
            case Kind.RadomeCommand:
                result = deleteRadomeCommand( (RadomeCommandObject)dataObject );
            break;
            case Kind.RadomeCommandReply:
                result = deleteRadomeCommandReply( (RadomeCommandReplyObject)dataObject );
            break;
            case Kind.RadomeConfiguration:
                result = deleteRadomeConfiguration( (RadomeConfigurationObject)dataObject );
            break;
            case Kind.ReferenceTimeseriesValue:
                result = deleteReferenceTimeseriesValue( (ReferenceTimeseriesValueObject)dataObject );
            break;
            case Kind.SByteTimeseriesValue:
                result = deleteSByteTimeseriesValue( (SByteTimeseriesValueObject)dataObject );
            break;
            case Kind.SecurityDomain:
                result = deleteSecurityDomain( (SecurityDomainObject)dataObject );
            break;
            case Kind.SecurityLogin:
                result = deleteSecurityLogin( (SecurityLoginObject)dataObject );
            break;
            case Kind.SecurityRole:
                result = deleteSecurityRole( (SecurityRoleObject)dataObject );
            break;
            case Kind.SecurityIdentifierRoleLink:
                result = deleteSecurityIdentifierRoleLink( (SecurityIdentifierRoleLinkObject)dataObject );
            break;
            case Kind.SecurityLoginSession:
                result = deleteSecurityLoginSession( (SecurityLoginSessionObject)dataObject );
            break;
            case Kind.SecurityPermission:
                result = deleteSecurityPermission( (SecurityPermissionObject)dataObject );
            break;
            case Kind.SingleTimeseriesValue:
                result = deleteSingleTimeseriesValue( (SingleTimeseriesValueObject)dataObject );
            break;
            case Kind.StringTimeseriesValue:
                result = deleteStringTimeseriesValue( (StringTimeseriesValueObject)dataObject );
            break;
            case Kind.BinaryTimeseries:
                result = deleteBinaryTimeseries( (BinaryTimeseriesObject)dataObject );
            break;
            case Kind.BooleanTimeseries:
                result = deleteBooleanTimeseries( (BooleanTimeseriesObject)dataObject );
            break;
            case Kind.AisAidToNavigationOffPositionTimeseries:
                result = deleteAisAidToNavigationOffPositionTimeseries( (AisAidToNavigationOffPositionTimeseriesObject)dataObject );
            break;
            case Kind.DeviceEnabledTimeseries:
                result = deleteDeviceEnabledTimeseries( (DeviceEnabledTimeseriesObject)dataObject );
            break;
            case Kind.RadarAutomaticSensitivityTimeControlTimeseries:
                result = deleteRadarAutomaticSensitivityTimeControlTimeseries( (RadarAutomaticSensitivityTimeControlTimeseriesObject)dataObject );
            break;
            case Kind.RadarBlankSector1Timeseries:
                result = deleteRadarBlankSector1Timeseries( (RadarBlankSector1TimeseriesObject)dataObject );
            break;
            case Kind.RadarBlankSector2Timeseries:
                result = deleteRadarBlankSector2Timeseries( (RadarBlankSector2TimeseriesObject)dataObject );
            break;
            case Kind.RadarEnableAutomaticFrequencyControlTimeseries:
                result = deleteRadarEnableAutomaticFrequencyControlTimeseries( (RadarEnableAutomaticFrequencyControlTimeseriesObject)dataObject );
            break;
            case Kind.RadarEnableFastTimeConstantTimeseries:
                result = deleteRadarEnableFastTimeConstantTimeseries( (RadarEnableFastTimeConstantTimeseriesObject)dataObject );
            break;
            case Kind.RadarEnableSensitivityTimeControlTimeseries:
                result = deleteRadarEnableSensitivityTimeControlTimeseries( (RadarEnableSensitivityTimeControlTimeseriesObject)dataObject );
            break;
            case Kind.RadarPowerOnTimeseries:
                result = deleteRadarPowerOnTimeseries( (RadarPowerOnTimeseriesObject)dataObject );
            break;
            case Kind.RadarSaveSettingsTimeseries:
                result = deleteRadarSaveSettingsTimeseries( (RadarSaveSettingsTimeseriesObject)dataObject );
            break;
            case Kind.RadarTrackingTimeseries:
                result = deleteRadarTrackingTimeseries( (RadarTrackingTimeseriesObject)dataObject );
            break;
            case Kind.MediaProxySessionEnabledTimeseries:
                result = deleteMediaProxySessionEnabledTimeseries( (MediaProxySessionEnabledTimeseriesObject)dataObject );
            break;
            case Kind.MediaServiceEnabledTimeseries:
                result = deleteMediaServiceEnabledTimeseries( (MediaServiceEnabledTimeseriesObject)dataObject );
            break;
            case Kind.ByteTimeseries:
                result = deleteByteTimeseries( (ByteTimeseriesObject)dataObject );
            break;
            case Kind.DateTimeTimeseries:
                result = deleteDateTimeTimeseries( (DateTimeTimeseriesObject)dataObject );
            break;
            case Kind.DoubleTimeseries:
                result = deleteDoubleTimeseries( (DoubleTimeseriesObject)dataObject );
            break;
            case Kind.GNSSAltitudeTimeseries:
                result = deleteGNSSAltitudeTimeseries( (GNSSAltitudeTimeseriesObject)dataObject );
            break;
            case Kind.GNSSLatitudeTimeseries:
                result = deleteGNSSLatitudeTimeseries( (GNSSLatitudeTimeseriesObject)dataObject );
            break;
            case Kind.GNSSLongitudeTimeseries:
                result = deleteGNSSLongitudeTimeseries( (GNSSLongitudeTimeseriesObject)dataObject );
            break;
            case Kind.GyroCourseTimeseries:
                result = deleteGyroCourseTimeseries( (GyroCourseTimeseriesObject)dataObject );
            break;
            case Kind.GyroHeadingMagneticNorthTimeseries:
                result = deleteGyroHeadingMagneticNorthTimeseries( (GyroHeadingMagneticNorthTimeseriesObject)dataObject );
            break;
            case Kind.GyroHeadingTrueNorthTimeseries:
                result = deleteGyroHeadingTrueNorthTimeseries( (GyroHeadingTrueNorthTimeseriesObject)dataObject );
            break;
            case Kind.GyroPitchTimeseries:
                result = deleteGyroPitchTimeseries( (GyroPitchTimeseriesObject)dataObject );
            break;
            case Kind.GyroRateOfTurnTimeseries:
                result = deleteGyroRateOfTurnTimeseries( (GyroRateOfTurnTimeseriesObject)dataObject );
            break;
            case Kind.GyroRollTimeseries:
                result = deleteGyroRollTimeseries( (GyroRollTimeseriesObject)dataObject );
            break;
            case Kind.GyroSpeedTimeseries:
                result = deleteGyroSpeedTimeseries( (GyroSpeedTimeseriesObject)dataObject );
            break;
            case Kind.RadarLatitudeTimeseries:
                result = deleteRadarLatitudeTimeseries( (RadarLatitudeTimeseriesObject)dataObject );
            break;
            case Kind.RadarLongitudeTimeseries:
                result = deleteRadarLongitudeTimeseries( (RadarLongitudeTimeseriesObject)dataObject );
            break;
            case Kind.RadomeDewPointTimeseries:
                result = deleteRadomeDewPointTimeseries( (RadomeDewPointTimeseriesObject)dataObject );
            break;
            case Kind.RadomePressureTimeseries:
                result = deleteRadomePressureTimeseries( (RadomePressureTimeseriesObject)dataObject );
            break;
            case Kind.RadomeTemperatureTimeseries:
                result = deleteRadomeTemperatureTimeseries( (RadomeTemperatureTimeseriesObject)dataObject );
            break;
            case Kind.VesselDraughtTimeseries:
                result = deleteVesselDraughtTimeseries( (VesselDraughtTimeseriesObject)dataObject );
            break;
            case Kind.ViewLatitudeTimeseries:
                result = deleteViewLatitudeTimeseries( (ViewLatitudeTimeseriesObject)dataObject );
            break;
            case Kind.ViewLongitudeTimeseries:
                result = deleteViewLongitudeTimeseries( (ViewLongitudeTimeseriesObject)dataObject );
            break;
            case Kind.ViewZoomLevelTimeseries:
                result = deleteViewZoomLevelTimeseries( (ViewZoomLevelTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationAbsoluteHumidityTimeseries:
                result = deleteWeatherStationAbsoluteHumidityTimeseries( (WeatherStationAbsoluteHumidityTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationAirTemperatureTimeseries:
                result = deleteWeatherStationAirTemperatureTimeseries( (WeatherStationAirTemperatureTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationBarometricPressureTimeseries:
                result = deleteWeatherStationBarometricPressureTimeseries( (WeatherStationBarometricPressureTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationDewPointTimeseries:
                result = deleteWeatherStationDewPointTimeseries( (WeatherStationDewPointTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationRelativeHumidityTimeseries:
                result = deleteWeatherStationRelativeHumidityTimeseries( (WeatherStationRelativeHumidityTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationWaterTemperatureTimeseries:
                result = deleteWeatherStationWaterTemperatureTimeseries( (WeatherStationWaterTemperatureTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationWindDirectionTimeseries:
                result = deleteWeatherStationWindDirectionTimeseries( (WeatherStationWindDirectionTimeseriesObject)dataObject );
            break;
            case Kind.WeatherStationWindSpeedTimeseries:
                result = deleteWeatherStationWindSpeedTimeseries( (WeatherStationWindSpeedTimeseriesObject)dataObject );
            break;
            case Kind.GeoPosition2DTimeseries:
                result = deleteGeoPosition2DTimeseries( (GeoPosition2DTimeseriesObject)dataObject );
            break;
            case Kind.AisAidToNavigationPositionTimeseries:
                result = deleteAisAidToNavigationPositionTimeseries( (AisAidToNavigationPositionTimeseriesObject)dataObject );
            break;
            case Kind.GeoPosition3DTimeseries:
                result = deleteGeoPosition3DTimeseries( (GeoPosition3DTimeseriesObject)dataObject );
            break;
            case Kind.GuidTimeseries:
                result = deleteGuidTimeseries( (GuidTimeseriesObject)dataObject );
            break;
            case Kind.Int16Timeseries:
                result = deleteInt16Timeseries( (Int16TimeseriesObject)dataObject );
            break;
            case Kind.Int32Timeseries:
                result = deleteInt32Timeseries( (Int32TimeseriesObject)dataObject );
            break;
            case Kind.RadarAzimuthOffsetTimeseries:
                result = deleteRadarAzimuthOffsetTimeseries( (RadarAzimuthOffsetTimeseriesObject)dataObject );
            break;
            case Kind.RadarFastTimeConstantLevelTimeseries:
                result = deleteRadarFastTimeConstantLevelTimeseries( (RadarFastTimeConstantLevelTimeseriesObject)dataObject );
            break;
            case Kind.RadarFastTimeConstantModeTimeseries:
                result = deleteRadarFastTimeConstantModeTimeseries( (RadarFastTimeConstantModeTimeseriesObject)dataObject );
            break;
            case Kind.RadarPulseTimeseries:
                result = deleteRadarPulseTimeseries( (RadarPulseTimeseriesObject)dataObject );
            break;
            case Kind.RadarSector1EndTimeseries:
                result = deleteRadarSector1EndTimeseries( (RadarSector1EndTimeseriesObject)dataObject );
            break;
            case Kind.RadarSector1StartTimeseries:
                result = deleteRadarSector1StartTimeseries( (RadarSector1StartTimeseriesObject)dataObject );
            break;
            case Kind.RadarSector2EndTimeseries:
                result = deleteRadarSector2EndTimeseries( (RadarSector2EndTimeseriesObject)dataObject );
            break;
            case Kind.RadarSector2StartTimeseries:
                result = deleteRadarSector2StartTimeseries( (RadarSector2StartTimeseriesObject)dataObject );
            break;
            case Kind.RadarSensitivityTimeControlLevelTimeseries:
                result = deleteRadarSensitivityTimeControlLevelTimeseries( (RadarSensitivityTimeControlLevelTimeseriesObject)dataObject );
            break;
            case Kind.RadarTuningTimeseries:
                result = deleteRadarTuningTimeseries( (RadarTuningTimeseriesObject)dataObject );
            break;
            case Kind.VesselPersonsOnBoardTimeseries:
                result = deleteVesselPersonsOnBoardTimeseries( (VesselPersonsOnBoardTimeseriesObject)dataObject );
            break;
            case Kind.Int64Timeseries:
                result = deleteInt64Timeseries( (Int64TimeseriesObject)dataObject );
            break;
            case Kind.Position2DTimeseries:
                result = deletePosition2DTimeseries( (Position2DTimeseriesObject)dataObject );
            break;
            case Kind.Position3DTimeseries:
                result = deletePosition3DTimeseries( (Position3DTimeseriesObject)dataObject );
            break;
            case Kind.ReferenceTimeseries:
                result = deleteReferenceTimeseries( (ReferenceTimeseriesObject)dataObject );
            break;
            case Kind.SByteTimeseries:
                result = deleteSByteTimeseries( (SByteTimeseriesObject)dataObject );
            break;
            case Kind.SingleTimeseries:
                result = deleteSingleTimeseries( (SingleTimeseriesObject)dataObject );
            break;
            case Kind.StringTimeseries:
                result = deleteStringTimeseries( (StringTimeseriesObject)dataObject );
            break;
            case Kind.TimeSpanTimeseries:
                result = deleteTimeSpanTimeseries( (TimeSpanTimeseriesObject)dataObject );
            break;
            case Kind.UInt16Timeseries:
                result = deleteUInt16Timeseries( (UInt16TimeseriesObject)dataObject );
            break;
            case Kind.UInt32Timeseries:
                result = deleteUInt32Timeseries( (UInt32TimeseriesObject)dataObject );
            break;
            case Kind.RadomeStatusTimeseries:
                result = deleteRadomeStatusTimeseries( (RadomeStatusTimeseriesObject)dataObject );
            break;
            case Kind.UInt64Timeseries:
                result = deleteUInt64Timeseries( (UInt64TimeseriesObject)dataObject );
            break;
            case Kind.TimeseriesCatalog:
                result = deleteTimeseriesCatalog( (TimeseriesCatalogObject)dataObject );
            break;
            case Kind.TimeseriesInfo:
                result = deleteTimeseriesInfo( (TimeseriesInfoObject)dataObject );
            break;
            case Kind.TimeSpanTimeseriesValue:
                result = deleteTimeSpanTimeseriesValue( (TimeSpanTimeseriesValueObject)dataObject );
            break;
            case Kind.TrackableItemTrackLink:
                result = deleteTrackableItemTrackLink( (TrackableItemTrackLinkObject)dataObject );
            break;
            case Kind.Track:
                result = deleteTrack( (TrackObject)dataObject );
            break;
            case Kind.Track3D:
                result = deleteTrack3D( (Track3DObject)dataObject );
            break;
            case Kind.TrackerFilterParameters:
                result = deleteTrackerFilterParameters( (TrackerFilterParametersObject)dataObject );
            break;
            case Kind.TrackerFilterParametersConfiguration:
                result = deleteTrackerFilterParametersConfiguration( (TrackerFilterParametersConfigurationObject)dataObject );
            break;
            case Kind.TrackInfo:
                result = deleteTrackInfo( (TrackInfoObject)dataObject );
            break;
            case Kind.TrackingServiceOptions:
                result = deleteTrackingServiceOptions( (TrackingServiceOptionsObject)dataObject );
            break;
            case Kind.TrackLink:
                result = deleteTrackLink( (TrackLinkObject)dataObject );
            break;
            case Kind.TrackValue:
                result = deleteTrackValue( (TrackValueObject)dataObject );
            break;
            case Kind.TrackValue3D:
                result = deleteTrackValue3D( (TrackValue3DObject)dataObject );
            break;
            case Kind.UInt16TimeseriesValue:
                result = deleteUInt16TimeseriesValue( (UInt16TimeseriesValueObject)dataObject );
            break;
            case Kind.UInt32TimeseriesValue:
                result = deleteUInt32TimeseriesValue( (UInt32TimeseriesValueObject)dataObject );
            break;
            case Kind.UInt64TimeseriesValue:
                result = deleteUInt64TimeseriesValue( (UInt64TimeseriesValueObject)dataObject );
            break;
            case Kind.VehicleType:
                result = deleteVehicleType( (VehicleTypeObject)dataObject );
            break;
            case Kind.VesselType:
                result = deleteVesselType( (VesselTypeObject)dataObject );
            break;
            case Kind.View:
                result = deleteView( (ViewObject)dataObject );
            break;
            case Kind.ViewCameraLink:
                result = deleteViewCameraLink( (ViewCameraLinkObject)dataObject );
            break;
            case Kind.ViewTrackerLink:
                result = deleteViewTrackerLink( (ViewTrackerLinkObject)dataObject );
            break;
            case Kind.WeatherStationCommand:
                result = deleteWeatherStationCommand( (WeatherStationCommandObject)dataObject );
            break;
            case Kind.WeatherStationCommandReply:
                result = deleteWeatherStationCommandReply( (WeatherStationCommandReplyObject)dataObject );
            break;
            case Kind.WeatherStationConfiguration:
                result = deleteWeatherStationConfiguration( (WeatherStationConfigurationObject)dataObject );
            break;
            case Kind.CircularZone:
                result = deleteCircularZone( (CircularZoneObject)dataObject );
            break;
            case Kind.PolygonZone:
                result = deletePolygonZone( (PolygonZoneObject)dataObject );
            break;
            case Kind.ZoneExceptions:
                result = deleteZoneExceptions( (ZoneExceptionsObject)dataObject );
            break;
            case Kind.ZoneExceptionsVesselLink:
                result = deleteZoneExceptionsVesselLink( (ZoneExceptionsVesselLinkObject)dataObject );
            break;
            case Kind.ZoneTrackAlarm:
                result = deleteZoneTrackAlarm( (ZoneTrackAlarmObject)dataObject );
            break;
        }
        return result;
    }

    public final boolean mergeObject( AbstractDataObjectWithGuidKey dataObject ) throws SQLException {
        boolean result = false;
        var objectState = dataObject.getObjectState( );
        switch ( objectState ) {
            case ObjectState.New:
                result = insertObject( dataObject );
            break;
            case ObjectState.Changed:
                result = updateObject( dataObject );
            break;
            case ObjectState.Deleted:
                result = deleteObject( dataObject );
            break;
        }
        return result;
    }

}
