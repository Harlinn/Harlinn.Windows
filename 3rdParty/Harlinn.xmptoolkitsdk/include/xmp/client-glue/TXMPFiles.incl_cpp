#pragma once
// =================================================================================================
// ADOBE SYSTEMS INCORPORATED
// Copyright 2002 Adobe Systems Incorporated
// All Rights Reserved
//
// NOTICE:	Adobe permits you to use, modify, and distribute this file in accordance with the terms
// of the Adobe license agreement accompanying it.
// =================================================================================================

//  ================================================================================================
/// \file TXMPFiles.incl_cpp
/// \brief The implementation of the TXMPFiles template class.

#if XMP_WinBuild
	#pragma warning ( disable : 4003 )	// not enough actual parameters for macro
	#pragma warning ( disable : 4800 )	// forcing value to bool 'true' or 'false' (performance warning)
#endif

#include <xmp/client-glue/WXMP_Common.hpp>

#include <xmp/client-glue/WXMPFiles.hpp>

// =================================================================================================
// Implementation Guidelines
// =========================
//
// The implementations of the template functions are very stylized. The jobs done in this code are:
//
//	1. ...
//
// =================================================================================================

#ifndef XMPFiles_TraceCTorDTor
	#define XMPFiles_TraceCTorDTor 0
#endif

#if XMPFiles_TraceCTorDTor
	class XFPeek {	// Hack to peek at the client ref count in the internal object.
	public:
		XFPeek();
		virtual ~XFPeek();
		XMP_Int32 clientRefs;
	};
#endif

// =================================================================================================

XMP_MethodIntro(TXMPFiles,void)::
SetClientString ( void * clientPtr, XMP_StringPtr valuePtr, XMP_StringLen valueLen )
{
	tStringObj * clientStr = (tStringObj*) clientPtr;
	clientStr->assign ( valuePtr, valueLen );
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
SetClientStringVector ( void * clientPtr, XMP_StringPtr * arrayPtr, XMP_Uns32 stringCount )
{
	std::vector<tStringObj>* clientVec = (std::vector<tStringObj>*) clientPtr;
	clientVec->clear();
	for ( XMP_Uns32 i = 0; i < stringCount; ++i ) {
		tStringObj nextValue ( arrayPtr[i] );
		clientVec->push_back ( nextValue );
	}
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
GetVersionInfo ( XMP_VersionInfo * versionInfo )
{
	WrapNoCheckVoid ( zXMPFiles_GetVersionInfo_1 ( versionInfo ) );
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
Initialize()
{
	WrapCheckBool ( ok, zXMPFiles_Initialize_1 ( 0 ) );
	return ok;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
Initialize( const char* pluginFolder, const char* plugins )
{
	WrapCheckBool ( ok, zXMPFiles_Initialize_2 ( 0, pluginFolder, plugins ) );
	return ok;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
Initialize ( XMP_OptionBits options )
{
	WrapCheckBool ( ok, zXMPFiles_Initialize_1 ( options ) );
	return ok;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
Initialize ( XMP_OptionBits options, const char* pluginFolder, const char* plugins )
{
	WrapCheckBool ( ok, zXMPFiles_Initialize_2 ( options, pluginFolder, plugins ) );
	return ok;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
Terminate()
{
	WrapNoCheckVoid ( zXMPFiles_Terminate_1() );
}

// =================================================================================================

static XMPFilesRef Default_CTor()
{
	WrapCheckXMPFilesRef ( newRef, zXMPFiles_CTor_1() );
	return newRef;
}

// -------------------------------------------------------------------------------------------------

XMP_CTorDTorIntro(TXMPFiles)::
TXMPFiles() : xmpFilesRef(Default_CTor())
{
	#if XMPFiles_TraceCTorDTor
		XFPeek* xfPtr = (XFPeek*)this->xmpFilesRef;
		printf ( "Default construct TXMPFiles @ %.8X, ref = %.8X, count = %d\n", this, xfPtr, xfPtr->clientRefs );
	#endif
}

// -------------------------------------------------------------------------------------------------

XMP_CTorDTorIntro(TXMPFiles)::
TXMPFiles ( const TXMPFiles<tStringObj> & original ) : xmpFilesRef(original.xmpFilesRef)
{
	WXMPFiles_IncrementRefCount_1 ( this->xmpFilesRef );
	#if XMPFiles_TraceCTorDTor
		XFPeek* xfPtr = (XFPeek*)this->xmpFilesRef;
		printf ( "Copy construct TXMPFiles @ %.8X, ref = %.8X, count = %d\n", this, xfPtr, xfPtr->clientRefs );
	#endif
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
operator= ( const TXMPFiles<tStringObj> & rhs )
{
	#if XMPFiles_TraceCTorDTor
		XFPeek* xfLHS = (XFPeek*)this->xmpFilesRef;
		XFPeek* xfRHS = (XFPeek*)rhs.xmpFilesRef;
		printf ( "Assign TXMPFiles, lhs @ %.8X, rhs @ %.8X\n", this, &rhs );
		printf ( "   original lhs ref = %.8X, count = %d\n", xfLHS, xfLHS->clientRefs );
		printf ( "   original rhs ref = %.8X, count = %d\n", xfRHS, xfRHS->clientRefs );
	#endif
	XMPFilesRef oldRef = this->xmpFilesRef;					// ! Decrement last so errors leave client object OK.
	this->xmpFilesRef = rhs.xmpFilesRef;
	WXMPFiles_IncrementRefCount_1 ( this->xmpFilesRef );	// Increment the count on the new ref.
	WXMPFiles_DecrementRefCount_1 ( oldRef );				// Decrement the count on the old ref.
	#if XMPFiles_TraceCTorDTor
		printf ( "   result   lhs ref = %.8X, count = %d\n", xfLHS, xfLHS->clientRefs );
	#endif
}

// -------------------------------------------------------------------------------------------------

XMP_CTorDTorIntro(TXMPFiles)::
TXMPFiles ( XMPFilesRef _xmpFilesRef ) : xmpFilesRef(_xmpFilesRef)
{
	WXMPFiles_IncrementRefCount_1 ( this->xmpFilesRef );
	#if XMPFiles_TraceCTorDTor
		XFPeek* xfPtr = (XFPeek*)this->xmpFilesRef;
		printf ( "Ref construct TXMPFiles @ %.8X, ref = %.8X, count = %d\n", this, xfPtr, xfPtr->clientRefs );
	#endif
}

// -------------------------------------------------------------------------------------------------

XMP_CTorDTorIntro(TXMPFiles)::
TXMPFiles ( XMP_StringPtr  filePath,
	        XMP_FileFormat format /* = kXMP_UnknownFile */,
			XMP_OptionBits openFlags /* = 0 */ ) : xmpFilesRef(Default_CTor())
{
	#if XMPFiles_TraceCTorDTor
		XFPeek* xfPtr = (XFPeek*)this->xmpFilesRef;
		printf ( "File construct TXMPFiles @ %.8X, ref = %.8X, count = %d\n", this, xfPtr, xfPtr->clientRefs );
	#endif
	bool ok = this->OpenFile ( filePath, format, openFlags );
	if ( ! ok ) throw XMP_Error ( kXMPErr_NoFileHandler, "OpenFile returned false" );
}

// -------------------------------------------------------------------------------------------------

XMP_CTorDTorIntro(TXMPFiles)::
TXMPFiles ( const tStringObj & filePath,
	        XMP_FileFormat     format /* = kXMP_UnknownFile */,
			XMP_OptionBits     openFlags /* = 0 */ ) : xmpFilesRef(Default_CTor())
{
	#if XMPFiles_TraceCTorDTor
		XFPeek* xfPtr = (XFPeek*)this->xmpFilesRef;
		printf ( "File construct TXMPFiles @ %.8X, ref = %.8X, count = %d\n", this, xfPtr, xfPtr->clientRefs );
	#endif
	bool ok = this->OpenFile ( filePath.c_str(), format, openFlags );
	if ( ! ok ) throw XMP_Error ( kXMPErr_NoFileHandler, "OpenFile returned false" );
}

// -------------------------------------------------------------------------------------------------

XMP_CTorDTorIntro(TXMPFiles)::
~TXMPFiles () throw()
{
	#if XMPFiles_TraceCTorDTor
		XFPeek* xfPtr = (XFPeek*)this->xmpFilesRef;
		printf ( "Destruct TXMPFiles @ %.8X, ref= %.8X, count = %d\n", this, xfPtr, xfPtr->clientRefs );
	#endif
	WXMPFiles_DecrementRefCount_1 ( this->xmpFilesRef );
	this->xmpFilesRef = 0;
}

// =================================================================================================

XMP_MethodIntro(TXMPFiles,bool)::
GetFormatInfo ( XMP_FileFormat   format,
    			XMP_OptionBits * flags )
{
	WrapCheckBool ( found, zXMPFiles_GetFormatInfo_1 ( format, flags ) );
	return found;
}

// =================================================================================================

XMP_MethodIntro(TXMPFiles,XMPFilesRef)::
GetInternalRef()
{
	return this->xmpFilesRef;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,XMP_FileFormat)::
CheckFileFormat ( XMP_StringPtr filePath )
{
	WrapCheckFormat ( format, zXMPFiles_CheckFileFormat_1 ( filePath ) );
	return format;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,XMP_FileFormat)::
CheckPackageFormat ( XMP_StringPtr folderPath )
{
	WrapCheckFormat ( format, zXMPFiles_CheckPackageFormat_1 ( folderPath ) );
	return format;
}

// -------------------------------------------------------------------------------------------------
	
XMP_MethodIntro(TXMPFiles,bool)::
GetFileModDate ( XMP_StringPtr filePath, XMP_DateTime * modDate, XMP_FileFormat * format, XMP_OptionBits options )
{
	WrapCheckBool ( ok, zXMPFiles_GetFileModDate_1 ( filePath, modDate, format, options ) );
	return ok;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
GetAssociatedResources ( XMP_StringPtr            filePath,
                         std::vector<tStringObj>* resourceList,
                         XMP_FileFormat           format /* = kXMP_UnknownFile */, 
                         XMP_OptionBits           options /* = 0 */)
{
	WrapCheckBool ( ok, zXMPFiles_GetAssociatedResources_1 ( filePath, resourceList, format, options, SetClientStringVector ) );
	return ok;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
IsMetadataWritable ( XMP_StringPtr  filePath,
                     bool *         writable,    
                     XMP_FileFormat format /* = kXMP_UnknownFile */,
                     XMP_OptionBits options /* = 0 */)
{
	if ( writable)
	{
		XMP_Bool internalWritable = ConvertBoolToXMP_Bool( *writable );
		WrapCheckBool ( ok, zXMPFiles_IsMetadataWritable_1 ( filePath, &internalWritable, format, options ) );
		*writable = ConvertXMP_BoolToBool( internalWritable );
		return ok;
	}
	else
	{
		WrapCheckBool ( ok, zXMPFiles_IsMetadataWritable_1 ( filePath, NULL, format, options ) );
		return ok;
	}
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
OpenFile ( XMP_StringPtr  filePath,
		   XMP_FileFormat format /* = kXMP_UnknownFile */,
		   XMP_OptionBits openFlags /* = 0 */ )
{
	WrapCheckBool ( ok, zXMPFiles_OpenFile_1 ( filePath, format, openFlags ) );
	return ok;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
OpenFile ( const tStringObj & filePath,
		   XMP_FileFormat     format /* = kXMP_UnknownFile */,
		   XMP_OptionBits     openFlags /* = 0 */ )
{
	return this->OpenFile ( filePath.c_str(), format, openFlags );
}

// -------------------------------------------------------------------------------------------------

#if XMP_StaticBuild	// ! Client XMP_IO objects can only be used in static builds.
XMP_MethodIntro(TXMPFiles,bool)::
OpenFile ( XMP_IO *       clientIO,
		   XMP_FileFormat format /* = kXMP_UnknownFile */,
		   XMP_OptionBits openFlags /* = 0 */ )
{
	WrapCheckBool ( ok, zXMPFiles_OpenFile_2 ( clientIO, format, openFlags ) );
	return ok;
}
#endif

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
CloseFile ( XMP_OptionBits closeFlags /* = 0 */ )
{
	WrapCheckVoid ( zXMPFiles_CloseFile_1 ( closeFlags ) );
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
GetFileInfo ( tStringObj *     filePath /* = 0 */,
		      XMP_OptionBits * openFlags /* = 0 */,
		      XMP_FileFormat * format /* = 0 */,
		      XMP_OptionBits * handlerFlags /* = 0 */ )
{
	WrapCheckBool ( isOpen, zXMPFiles_GetFileInfo_1 ( filePath, openFlags, format, handlerFlags, SetClientString ) );
	return isOpen;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
SetAbortProc ( XMP_AbortProc abortProc,
			   void *        abortArg )
{
	WrapCheckVoid ( zXMPFiles_SetAbortProc_1 ( abortProc, abortArg ) );
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
GetXMP ( SXMPMeta *       xmpObj /* = 0 */,
    	 tStringObj *     xmpPacket /* = 0 */,
    	 XMP_PacketInfo * packetInfo /* = 0 */ )
{
	XMPMetaRef xmpRef = 0;
	if ( xmpObj != 0 ) {
		SXMPUtils::RemoveProperties ( xmpObj, 0, 0, kXMPUtil_DoAllProperties );	// *** Need an SXMPMeta::Clear method:
		xmpRef = xmpObj->GetInternalRef();
	}

	WrapCheckBool ( hasXMP, zXMPFiles_GetXMP_1 ( xmpRef, xmpPacket, packetInfo, SetClientString ) );
	return hasXMP;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
PutXMP ( const SXMPMeta & xmpObj )
{
	WrapCheckVoid ( zXMPFiles_PutXMP_1 ( xmpObj.GetInternalRef(), 0, 0 ) );
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
PutXMP ( XMP_StringPtr xmpPacket,
         XMP_StringLen xmpLength /* = kXMP_UseNullTermination */ )
{
	WrapCheckVoid ( zXMPFiles_PutXMP_1 ( 0, xmpPacket, xmpLength ) );
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
PutXMP ( const tStringObj & xmpPacket )
{
	this->PutXMP ( xmpPacket.c_str(), (XMP_StringLen)xmpPacket.size() );
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
CanPutXMP ( const SXMPMeta & xmpObj )
{
	WrapCheckBool ( canPut, zXMPFiles_CanPutXMP_1 ( xmpObj.GetInternalRef(), 0, 0 ) );
	return canPut;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
CanPutXMP ( XMP_StringPtr xmpPacket,
            XMP_StringLen xmpLength /* = kXMP_UseNullTermination */ )
{
	WrapCheckBool ( canPut, zXMPFiles_CanPutXMP_1 ( 0, xmpPacket, xmpLength ) );
	return canPut;
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,bool)::
CanPutXMP ( const tStringObj & xmpPacket )
{
	return this->CanPutXMP ( xmpPacket.c_str(), (XMP_StringLen)xmpPacket.size() );
}

// =================================================================================================

XMP_MethodIntro(TXMPFiles,void)::
SetDefaultProgressCallback ( XMP_ProgressReportProc proc, void * context /* = 0 */,
	                         float interval /* = 1.0 */, bool sendStartStop /* = false */ )
{
	XMP_Bool internalsendStartStop = ConvertBoolToXMP_Bool( sendStartStop );
	WrapCheckVoid ( zXMPFiles_SetDefaultProgressCallback_1 ( proc, context, interval, internalsendStartStop ) );
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
SetProgressCallback ( XMP_ProgressReportProc proc, void * context /* = 0 */,
	                  float interval /* = 1.0 */, bool sendStartStop /* = false */ )
{
	XMP_Bool internalsendStartStop = ConvertBoolToXMP_Bool( sendStartStop );
	WrapCheckVoid ( zXMPFiles_SetProgressCallback_1 ( proc, context, interval, internalsendStartStop ) );
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
SetDefaultErrorCallback ( XMPFiles_ErrorCallbackProc proc,
	                      void * context /* = 0 */, XMP_Uns32 limit /*= 1 */ )
{
	WrapCheckVoid ( zXMPFiles_SetDefaultErrorCallback_1 ( proc, context, limit ) );
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
SetErrorCallback ( XMPFiles_ErrorCallbackProc proc,
	               void * context /* = 0 */, XMP_Uns32 limit /*= 1 */ )
{
	WrapCheckVoid ( zXMPFiles_SetErrorCallback_1 ( proc, context, limit ) );
}

// -------------------------------------------------------------------------------------------------

XMP_MethodIntro(TXMPFiles,void)::
ResetErrorCallbackLimit ( XMP_Uns32 limit /* = 1 */ )
{
	WrapCheckVoid ( zXMPFiles_ResetErrorCallbackLimit_1 ( limit ) );
}

// =================================================================================================
