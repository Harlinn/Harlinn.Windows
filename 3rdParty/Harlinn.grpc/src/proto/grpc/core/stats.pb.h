// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stats_2eproto GRPC_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GRPC_EXPORT TableStruct_stats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
GRPC_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stats_2eproto;
namespace grpc {
namespace core {
class Bucket;
struct BucketDefaultTypeInternal;
GRPC_EXPORT extern BucketDefaultTypeInternal _Bucket_default_instance_;
class Histogram;
struct HistogramDefaultTypeInternal;
GRPC_EXPORT extern HistogramDefaultTypeInternal _Histogram_default_instance_;
class Metric;
struct MetricDefaultTypeInternal;
GRPC_EXPORT extern MetricDefaultTypeInternal _Metric_default_instance_;
class Stats;
struct StatsDefaultTypeInternal;
GRPC_EXPORT extern StatsDefaultTypeInternal _Stats_default_instance_;
}  // namespace core
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> GRPC_EXPORT ::grpc::core::Bucket* Arena::CreateMaybeMessage<::grpc::core::Bucket>(Arena*);
template<> GRPC_EXPORT ::grpc::core::Histogram* Arena::CreateMaybeMessage<::grpc::core::Histogram>(Arena*);
template<> GRPC_EXPORT ::grpc::core::Metric* Arena::CreateMaybeMessage<::grpc::core::Metric>(Arena*);
template<> GRPC_EXPORT ::grpc::core::Stats* Arena::CreateMaybeMessage<::grpc::core::Stats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc {
namespace core {

// ===================================================================

class GRPC_EXPORT Bucket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.core.Bucket) */ {
 public:
  inline Bucket() : Bucket(nullptr) {}
  ~Bucket() override;
  explicit constexpr Bucket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket(const Bucket& from);
  Bucket(Bucket&& from) noexcept
    : Bucket() {
    *this = ::std::move(from);
  }

  inline Bucket& operator=(const Bucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket& operator=(Bucket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket* internal_default_instance() {
    return reinterpret_cast<const Bucket*>(
               &_Bucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Bucket& a, Bucket& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket* New() const final {
    return new Bucket();
  }

  Bucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bucket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bucket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.core.Bucket";
  }
  protected:
  explicit Bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // double start = 1;
  void clear_start();
  double start() const;
  void set_start(double value);
  private:
  double _internal_start() const;
  void _internal_set_start(double value);
  public:

  // uint64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.core.Bucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Histogram final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.core.Histogram) */ {
 public:
  inline Histogram() : Histogram(nullptr) {}
  ~Histogram() override;
  explicit constexpr Histogram(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Histogram(const Histogram& from);
  Histogram(Histogram&& from) noexcept
    : Histogram() {
    *this = ::std::move(from);
  }

  inline Histogram& operator=(const Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline Histogram& operator=(Histogram&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Histogram& default_instance() {
    return *internal_default_instance();
  }
  static inline const Histogram* internal_default_instance() {
    return reinterpret_cast<const Histogram*>(
               &_Histogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Histogram& a, Histogram& b) {
    a.Swap(&b);
  }
  inline void Swap(Histogram* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Histogram* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Histogram* New() const final {
    return new Histogram();
  }

  Histogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Histogram>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Histogram& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Histogram& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Histogram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.core.Histogram";
  }
  protected:
  explicit Histogram(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketsFieldNumber = 1,
  };
  // repeated .grpc.core.Bucket buckets = 1;
  int buckets_size() const;
  private:
  int _internal_buckets_size() const;
  public:
  void clear_buckets();
  ::grpc::core::Bucket* mutable_buckets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::core::Bucket >*
      mutable_buckets();
  private:
  const ::grpc::core::Bucket& _internal_buckets(int index) const;
  ::grpc::core::Bucket* _internal_add_buckets();
  public:
  const ::grpc::core::Bucket& buckets(int index) const;
  ::grpc::core::Bucket* add_buckets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::core::Bucket >&
      buckets() const;

  // @@protoc_insertion_point(class_scope:grpc.core.Histogram)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::core::Bucket > buckets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Metric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.core.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  ~Metric() override;
  explicit constexpr Metric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metric& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kCount = 10,
    kHistogram = 11,
    VALUE_NOT_SET = 0,
  };

  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return new Metric();
  }

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metric& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.core.Metric";
  }
  protected:
  explicit Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCountFieldNumber = 10,
    kHistogramFieldNumber = 11,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 count = 10;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .grpc.core.Histogram histogram = 11;
  bool has_histogram() const;
  private:
  bool _internal_has_histogram() const;
  public:
  void clear_histogram();
  const ::grpc::core::Histogram& histogram() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::core::Histogram* release_histogram();
  ::grpc::core::Histogram* mutable_histogram();
  void set_allocated_histogram(::grpc::core::Histogram* histogram);
  private:
  const ::grpc::core::Histogram& _internal_histogram() const;
  ::grpc::core::Histogram* _internal_mutable_histogram();
  public:
  void unsafe_arena_set_allocated_histogram(
      ::grpc::core::Histogram* histogram);
  ::grpc::core::Histogram* unsafe_arena_release_histogram();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:grpc.core.Metric)
 private:
  class _Internal;
  void set_has_count();
  void set_has_histogram();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint64 count_;
    ::grpc::core::Histogram* histogram_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_stats_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Stats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.core.Stats) */ {
 public:
  inline Stats() : Stats(nullptr) {}
  ~Stats() override;
  explicit constexpr Stats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stats(const Stats& from);
  Stats(Stats&& from) noexcept
    : Stats() {
    *this = ::std::move(from);
  }

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stats& operator=(Stats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stats& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stats* internal_default_instance() {
    return reinterpret_cast<const Stats*>(
               &_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Stats& a, Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(Stats* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stats* New() const final {
    return new Stats();
  }

  Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.core.Stats";
  }
  protected:
  explicit Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
  };
  // repeated .grpc.core.Metric metrics = 1;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::grpc::core::Metric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::core::Metric >*
      mutable_metrics();
  private:
  const ::grpc::core::Metric& _internal_metrics(int index) const;
  ::grpc::core::Metric* _internal_add_metrics();
  public:
  const ::grpc::core::Metric& metrics(int index) const;
  ::grpc::core::Metric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::core::Metric >&
      metrics() const;

  // @@protoc_insertion_point(class_scope:grpc.core.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::core::Metric > metrics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Bucket

// double start = 1;
inline void Bucket::clear_start() {
  start_ = 0;
}
inline double Bucket::_internal_start() const {
  return start_;
}
inline double Bucket::start() const {
  // @@protoc_insertion_point(field_get:grpc.core.Bucket.start)
  return _internal_start();
}
inline void Bucket::_internal_set_start(double value) {
  
  start_ = value;
}
inline void Bucket::set_start(double value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:grpc.core.Bucket.start)
}

// uint64 count = 2;
inline void Bucket::clear_count() {
  count_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bucket::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bucket::count() const {
  // @@protoc_insertion_point(field_get:grpc.core.Bucket.count)
  return _internal_count();
}
inline void Bucket::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void Bucket::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:grpc.core.Bucket.count)
}

// -------------------------------------------------------------------

// Histogram

// repeated .grpc.core.Bucket buckets = 1;
inline int Histogram::_internal_buckets_size() const {
  return buckets_.size();
}
inline int Histogram::buckets_size() const {
  return _internal_buckets_size();
}
inline void Histogram::clear_buckets() {
  buckets_.Clear();
}
inline ::grpc::core::Bucket* Histogram::mutable_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.core.Histogram.buckets)
  return buckets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::core::Bucket >*
Histogram::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:grpc.core.Histogram.buckets)
  return &buckets_;
}
inline const ::grpc::core::Bucket& Histogram::_internal_buckets(int index) const {
  return buckets_.Get(index);
}
inline const ::grpc::core::Bucket& Histogram::buckets(int index) const {
  // @@protoc_insertion_point(field_get:grpc.core.Histogram.buckets)
  return _internal_buckets(index);
}
inline ::grpc::core::Bucket* Histogram::_internal_add_buckets() {
  return buckets_.Add();
}
inline ::grpc::core::Bucket* Histogram::add_buckets() {
  ::grpc::core::Bucket* _add = _internal_add_buckets();
  // @@protoc_insertion_point(field_add:grpc.core.Histogram.buckets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::core::Bucket >&
Histogram::buckets() const {
  // @@protoc_insertion_point(field_list:grpc.core.Histogram.buckets)
  return buckets_;
}

// -------------------------------------------------------------------

// Metric

// string name = 1;
inline void Metric::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Metric::name() const {
  // @@protoc_insertion_point(field_get:grpc.core.Metric.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metric::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.core.Metric.name)
}
inline std::string* Metric::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpc.core.Metric.name)
  return _s;
}
inline const std::string& Metric::_internal_name() const {
  return name_.Get();
}
inline void Metric::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metric::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metric::release_name() {
  // @@protoc_insertion_point(field_release:grpc.core.Metric.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.core.Metric.name)
}

// uint64 count = 10;
inline bool Metric::_internal_has_count() const {
  return value_case() == kCount;
}
inline bool Metric::has_count() const {
  return _internal_has_count();
}
inline void Metric::set_has_count() {
  _oneof_case_[0] = kCount;
}
inline void Metric::clear_count() {
  if (_internal_has_count()) {
    value_.count_ = uint64_t{0u};
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metric::_internal_count() const {
  if (_internal_has_count()) {
    return value_.count_;
  }
  return uint64_t{0u};
}
inline void Metric::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_count()) {
    clear_value();
    set_has_count();
  }
  value_.count_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metric::count() const {
  // @@protoc_insertion_point(field_get:grpc.core.Metric.count)
  return _internal_count();
}
inline void Metric::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:grpc.core.Metric.count)
}

// .grpc.core.Histogram histogram = 11;
inline bool Metric::_internal_has_histogram() const {
  return value_case() == kHistogram;
}
inline bool Metric::has_histogram() const {
  return _internal_has_histogram();
}
inline void Metric::set_has_histogram() {
  _oneof_case_[0] = kHistogram;
}
inline void Metric::clear_histogram() {
  if (_internal_has_histogram()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.histogram_;
    }
    clear_has_value();
  }
}
inline ::grpc::core::Histogram* Metric::release_histogram() {
  // @@protoc_insertion_point(field_release:grpc.core.Metric.histogram)
  if (_internal_has_histogram()) {
    clear_has_value();
      ::grpc::core::Histogram* temp = value_.histogram_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::core::Histogram& Metric::_internal_histogram() const {
  return _internal_has_histogram()
      ? *value_.histogram_
      : reinterpret_cast< ::grpc::core::Histogram&>(::grpc::core::_Histogram_default_instance_);
}
inline const ::grpc::core::Histogram& Metric::histogram() const {
  // @@protoc_insertion_point(field_get:grpc.core.Metric.histogram)
  return _internal_histogram();
}
inline ::grpc::core::Histogram* Metric::unsafe_arena_release_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.core.Metric.histogram)
  if (_internal_has_histogram()) {
    clear_has_value();
    ::grpc::core::Histogram* temp = value_.histogram_;
    value_.histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_histogram(::grpc::core::Histogram* histogram) {
  clear_value();
  if (histogram) {
    set_has_histogram();
    value_.histogram_ = histogram;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.core.Metric.histogram)
}
inline ::grpc::core::Histogram* Metric::_internal_mutable_histogram() {
  if (!_internal_has_histogram()) {
    clear_value();
    set_has_histogram();
    value_.histogram_ = CreateMaybeMessage< ::grpc::core::Histogram >(GetArenaForAllocation());
  }
  return value_.histogram_;
}
inline ::grpc::core::Histogram* Metric::mutable_histogram() {
  ::grpc::core::Histogram* _msg = _internal_mutable_histogram();
  // @@protoc_insertion_point(field_mutable:grpc.core.Metric.histogram)
  return _msg;
}

inline bool Metric::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Metric::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Metric::ValueCase Metric::value_case() const {
  return Metric::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Stats

// repeated .grpc.core.Metric metrics = 1;
inline int Stats::_internal_metrics_size() const {
  return metrics_.size();
}
inline int Stats::metrics_size() const {
  return _internal_metrics_size();
}
inline void Stats::clear_metrics() {
  metrics_.Clear();
}
inline ::grpc::core::Metric* Stats::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.core.Stats.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::core::Metric >*
Stats::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:grpc.core.Stats.metrics)
  return &metrics_;
}
inline const ::grpc::core::Metric& Stats::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::grpc::core::Metric& Stats::metrics(int index) const {
  // @@protoc_insertion_point(field_get:grpc.core.Stats.metrics)
  return _internal_metrics(index);
}
inline ::grpc::core::Metric* Stats::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::grpc::core::Metric* Stats::add_metrics() {
  ::grpc::core::Metric* _add = _internal_add_metrics();
  // @@protoc_insertion_point(field_add:grpc.core.Stats.metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::core::Metric >&
Stats::metrics() const {
  // @@protoc_insertion_point(field_list:grpc.core.Stats.metrics)
  return metrics_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace grpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stats_2eproto
