// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channelz.proto

#include "channelz.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace grpc {
namespace channelz {
namespace v1 {
constexpr Channel::Channel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_ref_()
  , subchannel_ref_()
  , socket_ref_()
  , ref_(nullptr)
  , data_(nullptr){}
struct ChannelDefaultTypeInternal {
  constexpr ChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelDefaultTypeInternal() {}
  union {
    Channel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelDefaultTypeInternal _Channel_default_instance_;
constexpr Subchannel::Subchannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_ref_()
  , subchannel_ref_()
  , socket_ref_()
  , ref_(nullptr)
  , data_(nullptr){}
struct SubchannelDefaultTypeInternal {
  constexpr SubchannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubchannelDefaultTypeInternal() {}
  union {
    Subchannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubchannelDefaultTypeInternal _Subchannel_default_instance_;
constexpr ChannelConnectivityState::ChannelConnectivityState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(0)
{}
struct ChannelConnectivityStateDefaultTypeInternal {
  constexpr ChannelConnectivityStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelConnectivityStateDefaultTypeInternal() {}
  union {
    ChannelConnectivityState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelConnectivityStateDefaultTypeInternal _ChannelConnectivityState_default_instance_;
constexpr ChannelData::ChannelData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(nullptr)
  , trace_(nullptr)
  , last_call_started_timestamp_(nullptr)
  , calls_started_(int64_t{0})
  , calls_succeeded_(int64_t{0})
  , calls_failed_(int64_t{0}){}
struct ChannelDataDefaultTypeInternal {
  constexpr ChannelDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelDataDefaultTypeInternal() {}
  union {
    ChannelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelDataDefaultTypeInternal _ChannelData_default_instance_;
constexpr ChannelTraceEvent::ChannelTraceEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(nullptr)
  , severity_(0)

  , _oneof_case_{}{}
struct ChannelTraceEventDefaultTypeInternal {
  constexpr ChannelTraceEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelTraceEventDefaultTypeInternal() {}
  union {
    ChannelTraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelTraceEventDefaultTypeInternal _ChannelTraceEvent_default_instance_;
constexpr ChannelTrace::ChannelTrace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , creation_timestamp_(nullptr)
  , num_events_logged_(int64_t{0}){}
struct ChannelTraceDefaultTypeInternal {
  constexpr ChannelTraceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelTraceDefaultTypeInternal() {}
  union {
    ChannelTrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelTraceDefaultTypeInternal _ChannelTrace_default_instance_;
constexpr ChannelRef::ChannelRef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_id_(int64_t{0}){}
struct ChannelRefDefaultTypeInternal {
  constexpr ChannelRefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelRefDefaultTypeInternal() {}
  union {
    ChannelRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelRefDefaultTypeInternal _ChannelRef_default_instance_;
constexpr SubchannelRef::SubchannelRef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subchannel_id_(int64_t{0}){}
struct SubchannelRefDefaultTypeInternal {
  constexpr SubchannelRefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubchannelRefDefaultTypeInternal() {}
  union {
    SubchannelRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubchannelRefDefaultTypeInternal _SubchannelRef_default_instance_;
constexpr SocketRef::SocketRef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , socket_id_(int64_t{0}){}
struct SocketRefDefaultTypeInternal {
  constexpr SocketRefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SocketRefDefaultTypeInternal() {}
  union {
    SocketRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SocketRefDefaultTypeInternal _SocketRef_default_instance_;
constexpr ServerRef::ServerRef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_id_(int64_t{0}){}
struct ServerRefDefaultTypeInternal {
  constexpr ServerRefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerRefDefaultTypeInternal() {}
  union {
    ServerRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerRefDefaultTypeInternal _ServerRef_default_instance_;
constexpr Server::Server(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : listen_socket_()
  , ref_(nullptr)
  , data_(nullptr){}
struct ServerDefaultTypeInternal {
  constexpr ServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerDefaultTypeInternal() {}
  union {
    Server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerDefaultTypeInternal _Server_default_instance_;
constexpr ServerData::ServerData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trace_(nullptr)
  , last_call_started_timestamp_(nullptr)
  , calls_started_(int64_t{0})
  , calls_succeeded_(int64_t{0})
  , calls_failed_(int64_t{0}){}
struct ServerDataDefaultTypeInternal {
  constexpr ServerDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerDataDefaultTypeInternal() {}
  union {
    ServerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerDataDefaultTypeInternal _ServerData_default_instance_;
constexpr Socket::Socket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : remote_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ref_(nullptr)
  , data_(nullptr)
  , local_(nullptr)
  , remote_(nullptr)
  , security_(nullptr){}
struct SocketDefaultTypeInternal {
  constexpr SocketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SocketDefaultTypeInternal() {}
  union {
    Socket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SocketDefaultTypeInternal _Socket_default_instance_;
constexpr SocketData::SocketData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_()
  , last_local_stream_created_timestamp_(nullptr)
  , last_remote_stream_created_timestamp_(nullptr)
  , last_message_sent_timestamp_(nullptr)
  , last_message_received_timestamp_(nullptr)
  , local_flow_control_window_(nullptr)
  , remote_flow_control_window_(nullptr)
  , streams_started_(int64_t{0})
  , streams_succeeded_(int64_t{0})
  , streams_failed_(int64_t{0})
  , messages_sent_(int64_t{0})
  , messages_received_(int64_t{0})
  , keep_alives_sent_(int64_t{0}){}
struct SocketDataDefaultTypeInternal {
  constexpr SocketDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SocketDataDefaultTypeInternal() {}
  union {
    SocketData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SocketDataDefaultTypeInternal _SocketData_default_instance_;
constexpr Address_TcpIpAddress::Address_TcpIpAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0){}
struct Address_TcpIpAddressDefaultTypeInternal {
  constexpr Address_TcpIpAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Address_TcpIpAddressDefaultTypeInternal() {}
  union {
    Address_TcpIpAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Address_TcpIpAddressDefaultTypeInternal _Address_TcpIpAddress_default_instance_;
constexpr Address_UdsAddress::Address_UdsAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Address_UdsAddressDefaultTypeInternal {
  constexpr Address_UdsAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Address_UdsAddressDefaultTypeInternal() {}
  union {
    Address_UdsAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Address_UdsAddressDefaultTypeInternal _Address_UdsAddress_default_instance_;
constexpr Address_OtherAddress::Address_OtherAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct Address_OtherAddressDefaultTypeInternal {
  constexpr Address_OtherAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Address_OtherAddressDefaultTypeInternal() {}
  union {
    Address_OtherAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Address_OtherAddressDefaultTypeInternal _Address_OtherAddress_default_instance_;
constexpr Address::Address(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AddressDefaultTypeInternal {
  constexpr AddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressDefaultTypeInternal() {}
  union {
    Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressDefaultTypeInternal _Address_default_instance_;
constexpr Security_Tls::Security_Tls(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : local_certificate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remote_certificate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct Security_TlsDefaultTypeInternal {
  constexpr Security_TlsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Security_TlsDefaultTypeInternal() {}
  union {
    Security_Tls _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Security_TlsDefaultTypeInternal _Security_Tls_default_instance_;
constexpr Security_OtherSecurity::Security_OtherSecurity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct Security_OtherSecurityDefaultTypeInternal {
  constexpr Security_OtherSecurityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Security_OtherSecurityDefaultTypeInternal() {}
  union {
    Security_OtherSecurity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Security_OtherSecurityDefaultTypeInternal _Security_OtherSecurity_default_instance_;
constexpr Security::Security(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SecurityDefaultTypeInternal {
  constexpr SecurityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SecurityDefaultTypeInternal() {}
  union {
    Security _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SecurityDefaultTypeInternal _Security_default_instance_;
constexpr SocketOption::SocketOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , additional_(nullptr){}
struct SocketOptionDefaultTypeInternal {
  constexpr SocketOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SocketOptionDefaultTypeInternal() {}
  union {
    SocketOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SocketOptionDefaultTypeInternal _SocketOption_default_instance_;
constexpr SocketOptionTimeout::SocketOptionTimeout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : duration_(nullptr){}
struct SocketOptionTimeoutDefaultTypeInternal {
  constexpr SocketOptionTimeoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SocketOptionTimeoutDefaultTypeInternal() {}
  union {
    SocketOptionTimeout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SocketOptionTimeoutDefaultTypeInternal _SocketOptionTimeout_default_instance_;
constexpr SocketOptionLinger::SocketOptionLinger(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : duration_(nullptr)
  , active_(false){}
struct SocketOptionLingerDefaultTypeInternal {
  constexpr SocketOptionLingerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SocketOptionLingerDefaultTypeInternal() {}
  union {
    SocketOptionLinger _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SocketOptionLingerDefaultTypeInternal _SocketOptionLinger_default_instance_;
constexpr SocketOptionTcpInfo::SocketOptionTcpInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tcpi_state_(0u)
  , tcpi_ca_state_(0u)
  , tcpi_retransmits_(0u)
  , tcpi_probes_(0u)
  , tcpi_backoff_(0u)
  , tcpi_options_(0u)
  , tcpi_snd_wscale_(0u)
  , tcpi_rcv_wscale_(0u)
  , tcpi_rto_(0u)
  , tcpi_ato_(0u)
  , tcpi_snd_mss_(0u)
  , tcpi_rcv_mss_(0u)
  , tcpi_unacked_(0u)
  , tcpi_sacked_(0u)
  , tcpi_lost_(0u)
  , tcpi_retrans_(0u)
  , tcpi_fackets_(0u)
  , tcpi_last_data_sent_(0u)
  , tcpi_last_ack_sent_(0u)
  , tcpi_last_data_recv_(0u)
  , tcpi_last_ack_recv_(0u)
  , tcpi_pmtu_(0u)
  , tcpi_rcv_ssthresh_(0u)
  , tcpi_rtt_(0u)
  , tcpi_rttvar_(0u)
  , tcpi_snd_ssthresh_(0u)
  , tcpi_snd_cwnd_(0u)
  , tcpi_advmss_(0u)
  , tcpi_reordering_(0u){}
struct SocketOptionTcpInfoDefaultTypeInternal {
  constexpr SocketOptionTcpInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SocketOptionTcpInfoDefaultTypeInternal() {}
  union {
    SocketOptionTcpInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SocketOptionTcpInfoDefaultTypeInternal _SocketOptionTcpInfo_default_instance_;
constexpr GetTopChannelsRequest::GetTopChannelsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_channel_id_(int64_t{0})
  , max_results_(int64_t{0}){}
struct GetTopChannelsRequestDefaultTypeInternal {
  constexpr GetTopChannelsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTopChannelsRequestDefaultTypeInternal() {}
  union {
    GetTopChannelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTopChannelsRequestDefaultTypeInternal _GetTopChannelsRequest_default_instance_;
constexpr GetTopChannelsResponse::GetTopChannelsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_()
  , end_(false){}
struct GetTopChannelsResponseDefaultTypeInternal {
  constexpr GetTopChannelsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTopChannelsResponseDefaultTypeInternal() {}
  union {
    GetTopChannelsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTopChannelsResponseDefaultTypeInternal _GetTopChannelsResponse_default_instance_;
constexpr GetServersRequest::GetServersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_server_id_(int64_t{0})
  , max_results_(int64_t{0}){}
struct GetServersRequestDefaultTypeInternal {
  constexpr GetServersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServersRequestDefaultTypeInternal() {}
  union {
    GetServersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServersRequestDefaultTypeInternal _GetServersRequest_default_instance_;
constexpr GetServersResponse::GetServersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_()
  , end_(false){}
struct GetServersResponseDefaultTypeInternal {
  constexpr GetServersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServersResponseDefaultTypeInternal() {}
  union {
    GetServersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServersResponseDefaultTypeInternal _GetServersResponse_default_instance_;
constexpr GetServerRequest::GetServerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_id_(int64_t{0}){}
struct GetServerRequestDefaultTypeInternal {
  constexpr GetServerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServerRequestDefaultTypeInternal() {}
  union {
    GetServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServerRequestDefaultTypeInternal _GetServerRequest_default_instance_;
constexpr GetServerResponse::GetServerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_(nullptr){}
struct GetServerResponseDefaultTypeInternal {
  constexpr GetServerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServerResponseDefaultTypeInternal() {}
  union {
    GetServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServerResponseDefaultTypeInternal _GetServerResponse_default_instance_;
constexpr GetServerSocketsRequest::GetServerSocketsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_id_(int64_t{0})
  , start_socket_id_(int64_t{0})
  , max_results_(int64_t{0}){}
struct GetServerSocketsRequestDefaultTypeInternal {
  constexpr GetServerSocketsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServerSocketsRequestDefaultTypeInternal() {}
  union {
    GetServerSocketsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServerSocketsRequestDefaultTypeInternal _GetServerSocketsRequest_default_instance_;
constexpr GetServerSocketsResponse::GetServerSocketsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socket_ref_()
  , end_(false){}
struct GetServerSocketsResponseDefaultTypeInternal {
  constexpr GetServerSocketsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServerSocketsResponseDefaultTypeInternal() {}
  union {
    GetServerSocketsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServerSocketsResponseDefaultTypeInternal _GetServerSocketsResponse_default_instance_;
constexpr GetChannelRequest::GetChannelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_id_(int64_t{0}){}
struct GetChannelRequestDefaultTypeInternal {
  constexpr GetChannelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelRequestDefaultTypeInternal() {}
  union {
    GetChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelRequestDefaultTypeInternal _GetChannelRequest_default_instance_;
constexpr GetChannelResponse::GetChannelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_(nullptr){}
struct GetChannelResponseDefaultTypeInternal {
  constexpr GetChannelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelResponseDefaultTypeInternal() {}
  union {
    GetChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelResponseDefaultTypeInternal _GetChannelResponse_default_instance_;
constexpr GetSubchannelRequest::GetSubchannelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subchannel_id_(int64_t{0}){}
struct GetSubchannelRequestDefaultTypeInternal {
  constexpr GetSubchannelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSubchannelRequestDefaultTypeInternal() {}
  union {
    GetSubchannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSubchannelRequestDefaultTypeInternal _GetSubchannelRequest_default_instance_;
constexpr GetSubchannelResponse::GetSubchannelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subchannel_(nullptr){}
struct GetSubchannelResponseDefaultTypeInternal {
  constexpr GetSubchannelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSubchannelResponseDefaultTypeInternal() {}
  union {
    GetSubchannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSubchannelResponseDefaultTypeInternal _GetSubchannelResponse_default_instance_;
constexpr GetSocketRequest::GetSocketRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socket_id_(int64_t{0})
  , summary_(false){}
struct GetSocketRequestDefaultTypeInternal {
  constexpr GetSocketRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSocketRequestDefaultTypeInternal() {}
  union {
    GetSocketRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSocketRequestDefaultTypeInternal _GetSocketRequest_default_instance_;
constexpr GetSocketResponse::GetSocketResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socket_(nullptr){}
struct GetSocketResponseDefaultTypeInternal {
  constexpr GetSocketResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSocketResponseDefaultTypeInternal() {}
  union {
    GetSocketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSocketResponseDefaultTypeInternal _GetSocketResponse_default_instance_;
}  // namespace v1
}  // namespace channelz
}  // namespace grpc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_channelz_2eproto[39];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_channelz_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_channelz_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_channelz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Channel, ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Channel, data_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Channel, channel_ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Channel, subchannel_ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Channel, socket_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, data_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, channel_ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, subchannel_ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, socket_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelConnectivityState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelConnectivityState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, state_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, target_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, trace_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, calls_started_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, calls_succeeded_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, calls_failed_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, last_call_started_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, description_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, severity_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, timestamp_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, child_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTrace, num_events_logged_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTrace, creation_timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTrace, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelRef, channel_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelRef, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SubchannelRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SubchannelRef, subchannel_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SubchannelRef, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketRef, socket_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketRef, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerRef, server_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerRef, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Server, ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Server, data_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Server, listen_socket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerData, trace_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerData, calls_started_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerData, calls_succeeded_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerData, calls_failed_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerData, last_call_started_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, data_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, local_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, remote_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, security_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, remote_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, streams_started_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, streams_succeeded_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, streams_failed_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, messages_sent_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, messages_received_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, keep_alives_sent_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, last_local_stream_created_timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, last_remote_stream_created_timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, last_message_sent_timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, last_message_received_timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, local_flow_control_window_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, remote_flow_control_window_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_TcpIpAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_TcpIpAddress, ip_address_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_TcpIpAddress, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_UdsAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_UdsAddress, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_OtherAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_OtherAddress, name_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_OtherAddress, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, local_certificate_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, remote_certificate_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, cipher_suite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_OtherSecurity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_OtherSecurity, name_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_OtherSecurity, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOption, name_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOption, value_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOption, additional_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTimeout, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionLinger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionLinger, active_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionLinger, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_state_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_ca_state_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_retransmits_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_probes_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_backoff_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_options_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_snd_wscale_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_rcv_wscale_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_rto_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_ato_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_snd_mss_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_rcv_mss_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_unacked_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_sacked_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_lost_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_retrans_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_fackets_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_last_data_sent_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_last_ack_sent_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_last_data_recv_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_last_ack_recv_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_pmtu_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_rcv_ssthresh_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_rtt_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_rttvar_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_snd_ssthresh_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_snd_cwnd_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_advmss_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, tcpi_reordering_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsRequest, start_channel_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsRequest, max_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsResponse, channel_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsResponse, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServersRequest, start_server_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServersRequest, max_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServersResponse, server_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServersResponse, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerRequest, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerResponse, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsRequest, server_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsRequest, start_socket_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsRequest, max_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsResponse, socket_ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsResponse, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetChannelRequest, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetChannelResponse, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSubchannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSubchannelRequest, subchannel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSubchannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSubchannelResponse, subchannel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSocketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSocketRequest, socket_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSocketRequest, summary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSocketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSocketResponse, socket_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpc::channelz::v1::Channel)},
  { 10, -1, sizeof(::grpc::channelz::v1::Subchannel)},
  { 20, -1, sizeof(::grpc::channelz::v1::ChannelConnectivityState)},
  { 26, -1, sizeof(::grpc::channelz::v1::ChannelData)},
  { 38, -1, sizeof(::grpc::channelz::v1::ChannelTraceEvent)},
  { 49, -1, sizeof(::grpc::channelz::v1::ChannelTrace)},
  { 57, -1, sizeof(::grpc::channelz::v1::ChannelRef)},
  { 64, -1, sizeof(::grpc::channelz::v1::SubchannelRef)},
  { 71, -1, sizeof(::grpc::channelz::v1::SocketRef)},
  { 78, -1, sizeof(::grpc::channelz::v1::ServerRef)},
  { 85, -1, sizeof(::grpc::channelz::v1::Server)},
  { 93, -1, sizeof(::grpc::channelz::v1::ServerData)},
  { 103, -1, sizeof(::grpc::channelz::v1::Socket)},
  { 114, -1, sizeof(::grpc::channelz::v1::SocketData)},
  { 132, -1, sizeof(::grpc::channelz::v1::Address_TcpIpAddress)},
  { 139, -1, sizeof(::grpc::channelz::v1::Address_UdsAddress)},
  { 145, -1, sizeof(::grpc::channelz::v1::Address_OtherAddress)},
  { 152, -1, sizeof(::grpc::channelz::v1::Address)},
  { 161, -1, sizeof(::grpc::channelz::v1::Security_Tls)},
  { 171, -1, sizeof(::grpc::channelz::v1::Security_OtherSecurity)},
  { 178, -1, sizeof(::grpc::channelz::v1::Security)},
  { 186, -1, sizeof(::grpc::channelz::v1::SocketOption)},
  { 194, -1, sizeof(::grpc::channelz::v1::SocketOptionTimeout)},
  { 200, -1, sizeof(::grpc::channelz::v1::SocketOptionLinger)},
  { 207, -1, sizeof(::grpc::channelz::v1::SocketOptionTcpInfo)},
  { 241, -1, sizeof(::grpc::channelz::v1::GetTopChannelsRequest)},
  { 248, -1, sizeof(::grpc::channelz::v1::GetTopChannelsResponse)},
  { 255, -1, sizeof(::grpc::channelz::v1::GetServersRequest)},
  { 262, -1, sizeof(::grpc::channelz::v1::GetServersResponse)},
  { 269, -1, sizeof(::grpc::channelz::v1::GetServerRequest)},
  { 275, -1, sizeof(::grpc::channelz::v1::GetServerResponse)},
  { 281, -1, sizeof(::grpc::channelz::v1::GetServerSocketsRequest)},
  { 289, -1, sizeof(::grpc::channelz::v1::GetServerSocketsResponse)},
  { 296, -1, sizeof(::grpc::channelz::v1::GetChannelRequest)},
  { 302, -1, sizeof(::grpc::channelz::v1::GetChannelResponse)},
  { 308, -1, sizeof(::grpc::channelz::v1::GetSubchannelRequest)},
  { 314, -1, sizeof(::grpc::channelz::v1::GetSubchannelResponse)},
  { 320, -1, sizeof(::grpc::channelz::v1::GetSocketRequest)},
  { 327, -1, sizeof(::grpc::channelz::v1::GetSocketResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_Channel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_Subchannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_ChannelConnectivityState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_ChannelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_ChannelTraceEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_ChannelTrace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_ChannelRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_SubchannelRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_SocketRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_ServerRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_Server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_ServerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_Socket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_SocketData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_Address_TcpIpAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_Address_UdsAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_Address_OtherAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_Address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_Security_Tls_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_Security_OtherSecurity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_Security_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_SocketOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_SocketOptionTimeout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_SocketOptionLinger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_SocketOptionTcpInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetTopChannelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetTopChannelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetServersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetServersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetServerSocketsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetServerSocketsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetSubchannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetSubchannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetSocketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::channelz::v1::_GetSocketResponse_default_instance_),
};

const char descriptor_table_protodef_channelz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016channelz.proto\022\020grpc.channelz.v1\032\031goog"
  "le/protobuf/any.proto\032\036google/protobuf/d"
  "uration.proto\032\037google/protobuf/timestamp"
  ".proto\032\036google/protobuf/wrappers.proto\"\376"
  "\001\n\007Channel\022)\n\003ref\030\001 \001(\0132\034.grpc.channelz."
  "v1.ChannelRef\022+\n\004data\030\002 \001(\0132\035.grpc.chann"
  "elz.v1.ChannelData\0221\n\013channel_ref\030\003 \003(\0132"
  "\034.grpc.channelz.v1.ChannelRef\0227\n\016subchan"
  "nel_ref\030\004 \003(\0132\037.grpc.channelz.v1.Subchan"
  "nelRef\022/\n\nsocket_ref\030\005 \003(\0132\033.grpc.channe"
  "lz.v1.SocketRef\"\204\002\n\nSubchannel\022,\n\003ref\030\001 "
  "\001(\0132\037.grpc.channelz.v1.SubchannelRef\022+\n\004"
  "data\030\002 \001(\0132\035.grpc.channelz.v1.ChannelDat"
  "a\0221\n\013channel_ref\030\003 \003(\0132\034.grpc.channelz.v"
  "1.ChannelRef\0227\n\016subchannel_ref\030\004 \003(\0132\037.g"
  "rpc.channelz.v1.SubchannelRef\022/\n\nsocket_"
  "ref\030\005 \003(\0132\033.grpc.channelz.v1.SocketRef\"\273"
  "\001\n\030ChannelConnectivityState\022\?\n\005state\030\001 \001"
  "(\01620.grpc.channelz.v1.ChannelConnectivit"
  "yState.State\"^\n\005State\022\013\n\007UNKNOWN\020\000\022\010\n\004ID"
  "LE\020\001\022\016\n\nCONNECTING\020\002\022\t\n\005READY\020\003\022\025\n\021TRANS"
  "IENT_FAILURE\020\004\022\014\n\010SHUTDOWN\020\005\"\216\002\n\013Channel"
  "Data\0229\n\005state\030\001 \001(\0132*.grpc.channelz.v1.C"
  "hannelConnectivityState\022\016\n\006target\030\002 \001(\t\022"
  "-\n\005trace\030\003 \001(\0132\036.grpc.channelz.v1.Channe"
  "lTrace\022\025\n\rcalls_started\030\004 \001(\003\022\027\n\017calls_s"
  "ucceeded\030\005 \001(\003\022\024\n\014calls_failed\030\006 \001(\003\022\?\n\033"
  "last_call_started_timestamp\030\007 \001(\0132\032.goog"
  "le.protobuf.Timestamp\"\333\002\n\021ChannelTraceEv"
  "ent\022\023\n\013description\030\001 \001(\t\022>\n\010severity\030\002 \001"
  "(\0162,.grpc.channelz.v1.ChannelTraceEvent."
  "Severity\022-\n\ttimestamp\030\003 \001(\0132\032.google.pro"
  "tobuf.Timestamp\0223\n\013channel_ref\030\004 \001(\0132\034.g"
  "rpc.channelz.v1.ChannelRefH\000\0229\n\016subchann"
  "el_ref\030\005 \001(\0132\037.grpc.channelz.v1.Subchann"
  "elRefH\000\"E\n\010Severity\022\016\n\nCT_UNKNOWN\020\000\022\013\n\007C"
  "T_INFO\020\001\022\016\n\nCT_WARNING\020\002\022\014\n\010CT_ERROR\020\003B\013"
  "\n\tchild_ref\"\226\001\n\014ChannelTrace\022\031\n\021num_even"
  "ts_logged\030\001 \001(\003\0226\n\022creation_timestamp\030\002 "
  "\001(\0132\032.google.protobuf.Timestamp\0223\n\006event"
  "s\030\003 \003(\0132#.grpc.channelz.v1.ChannelTraceE"
  "vent\"R\n\nChannelRef\022\022\n\nchannel_id\030\001 \001(\003\022\014"
  "\n\004name\030\002 \001(\tJ\004\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006J\004\010\006\020\007J\004\010\007"
  "\020\010J\004\010\010\020\t\"X\n\rSubchannelRef\022\025\n\rsubchannel_"
  "id\030\007 \001(\003\022\014\n\004name\030\010 \001(\tJ\004\010\001\020\002J\004\010\002\020\003J\004\010\003\020\004"
  "J\004\010\004\020\005J\004\010\005\020\006J\004\010\006\020\007\"P\n\tSocketRef\022\021\n\tsocke"
  "t_id\030\003 \001(\003\022\014\n\004name\030\004 \001(\tJ\004\010\001\020\002J\004\010\002\020\003J\004\010\005"
  "\020\006J\004\010\006\020\007J\004\010\007\020\010J\004\010\010\020\t\"P\n\tServerRef\022\021\n\tser"
  "ver_id\030\005 \001(\003\022\014\n\004name\030\006 \001(\tJ\004\010\001\020\002J\004\010\002\020\003J\004"
  "\010\003\020\004J\004\010\004\020\005J\004\010\007\020\010J\004\010\010\020\t\"\222\001\n\006Server\022(\n\003ref"
  "\030\001 \001(\0132\033.grpc.channelz.v1.ServerRef\022*\n\004d"
  "ata\030\002 \001(\0132\034.grpc.channelz.v1.ServerData\022"
  "2\n\rlisten_socket\030\003 \003(\0132\033.grpc.channelz.v"
  "1.SocketRef\"\302\001\n\nServerData\022-\n\005trace\030\001 \001("
  "\0132\036.grpc.channelz.v1.ChannelTrace\022\025\n\rcal"
  "ls_started\030\002 \001(\003\022\027\n\017calls_succeeded\030\003 \001("
  "\003\022\024\n\014calls_failed\030\004 \001(\003\022\?\n\033last_call_sta"
  "rted_timestamp\030\005 \001(\0132\032.google.protobuf.T"
  "imestamp\"\366\001\n\006Socket\022(\n\003ref\030\001 \001(\0132\033.grpc."
  "channelz.v1.SocketRef\022*\n\004data\030\002 \001(\0132\034.gr"
  "pc.channelz.v1.SocketData\022(\n\005local\030\003 \001(\013"
  "2\031.grpc.channelz.v1.Address\022)\n\006remote\030\004 "
  "\001(\0132\031.grpc.channelz.v1.Address\022,\n\010securi"
  "ty\030\005 \001(\0132\032.grpc.channelz.v1.Security\022\023\n\013"
  "remote_name\030\006 \001(\t\"\356\004\n\nSocketData\022\027\n\017stre"
  "ams_started\030\001 \001(\003\022\031\n\021streams_succeeded\030\002"
  " \001(\003\022\026\n\016streams_failed\030\003 \001(\003\022\025\n\rmessages"
  "_sent\030\004 \001(\003\022\031\n\021messages_received\030\005 \001(\003\022\030"
  "\n\020keep_alives_sent\030\006 \001(\003\022G\n#last_local_s"
  "tream_created_timestamp\030\007 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022H\n$last_remote_stream_"
  "created_timestamp\030\010 \001(\0132\032.google.protobu"
  "f.Timestamp\022\?\n\033last_message_sent_timesta"
  "mp\030\t \001(\0132\032.google.protobuf.Timestamp\022C\n\037"
  "last_message_received_timestamp\030\n \001(\0132\032."
  "google.protobuf.Timestamp\022>\n\031local_flow_"
  "control_window\030\013 \001(\0132\033.google.protobuf.I"
  "nt64Value\022\?\n\032remote_flow_control_window\030"
  "\014 \001(\0132\033.google.protobuf.Int64Value\022.\n\006op"
  "tion\030\r \003(\0132\036.grpc.channelz.v1.SocketOpti"
  "on\"\350\002\n\007Address\022\?\n\rtcpip_address\030\001 \001(\0132&."
  "grpc.channelz.v1.Address.TcpIpAddressH\000\022"
  ";\n\013uds_address\030\002 \001(\0132$.grpc.channelz.v1."
  "Address.UdsAddressH\000\022\?\n\rother_address\030\003 "
  "\001(\0132&.grpc.channelz.v1.Address.OtherAddr"
  "essH\000\0320\n\014TcpIpAddress\022\022\n\nip_address\030\001 \001("
  "\014\022\014\n\004port\030\002 \001(\005\032\036\n\nUdsAddress\022\020\n\010filenam"
  "e\030\001 \001(\t\032A\n\014OtherAddress\022\014\n\004name\030\001 \001(\t\022#\n"
  "\005value\030\002 \001(\0132\024.google.protobuf.AnyB\t\n\007ad"
  "dress\"\276\002\n\010Security\022-\n\003tls\030\001 \001(\0132\036.grpc.c"
  "hannelz.v1.Security.TlsH\000\0229\n\005other\030\002 \001(\013"
  "2(.grpc.channelz.v1.Security.OtherSecuri"
  "tyH\000\032{\n\003Tls\022\027\n\rstandard_name\030\001 \001(\tH\000\022\024\n\n"
  "other_name\030\002 \001(\tH\000\022\031\n\021local_certificate\030"
  "\003 \001(\014\022\032\n\022remote_certificate\030\004 \001(\014B\016\n\014cip"
  "her_suite\032B\n\rOtherSecurity\022\014\n\004name\030\001 \001(\t"
  "\022#\n\005value\030\002 \001(\0132\024.google.protobuf.AnyB\007\n"
  "\005model\"U\n\014SocketOption\022\014\n\004name\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t\022(\n\nadditional\030\003 \001(\0132\024.google"
  ".protobuf.Any\"B\n\023SocketOptionTimeout\022+\n\010"
  "duration\030\001 \001(\0132\031.google.protobuf.Duratio"
  "n\"Q\n\022SocketOptionLinger\022\016\n\006active\030\001 \001(\010\022"
  "+\n\010duration\030\002 \001(\0132\031.google.protobuf.Dura"
  "tion\"\256\005\n\023SocketOptionTcpInfo\022\022\n\ntcpi_sta"
  "te\030\001 \001(\r\022\025\n\rtcpi_ca_state\030\002 \001(\r\022\030\n\020tcpi_"
  "retransmits\030\003 \001(\r\022\023\n\013tcpi_probes\030\004 \001(\r\022\024"
  "\n\014tcpi_backoff\030\005 \001(\r\022\024\n\014tcpi_options\030\006 \001"
  "(\r\022\027\n\017tcpi_snd_wscale\030\007 \001(\r\022\027\n\017tcpi_rcv_"
  "wscale\030\010 \001(\r\022\020\n\010tcpi_rto\030\t \001(\r\022\020\n\010tcpi_a"
  "to\030\n \001(\r\022\024\n\014tcpi_snd_mss\030\013 \001(\r\022\024\n\014tcpi_r"
  "cv_mss\030\014 \001(\r\022\024\n\014tcpi_unacked\030\r \001(\r\022\023\n\013tc"
  "pi_sacked\030\016 \001(\r\022\021\n\ttcpi_lost\030\017 \001(\r\022\024\n\014tc"
  "pi_retrans\030\020 \001(\r\022\024\n\014tcpi_fackets\030\021 \001(\r\022\033"
  "\n\023tcpi_last_data_sent\030\022 \001(\r\022\032\n\022tcpi_last"
  "_ack_sent\030\023 \001(\r\022\033\n\023tcpi_last_data_recv\030\024"
  " \001(\r\022\032\n\022tcpi_last_ack_recv\030\025 \001(\r\022\021\n\ttcpi"
  "_pmtu\030\026 \001(\r\022\031\n\021tcpi_rcv_ssthresh\030\027 \001(\r\022\020"
  "\n\010tcpi_rtt\030\030 \001(\r\022\023\n\013tcpi_rttvar\030\031 \001(\r\022\031\n"
  "\021tcpi_snd_ssthresh\030\032 \001(\r\022\025\n\rtcpi_snd_cwn"
  "d\030\033 \001(\r\022\023\n\013tcpi_advmss\030\034 \001(\r\022\027\n\017tcpi_reo"
  "rdering\030\035 \001(\r\"F\n\025GetTopChannelsRequest\022\030"
  "\n\020start_channel_id\030\001 \001(\003\022\023\n\013max_results\030"
  "\002 \001(\003\"Q\n\026GetTopChannelsResponse\022*\n\007chann"
  "el\030\001 \003(\0132\031.grpc.channelz.v1.Channel\022\013\n\003e"
  "nd\030\002 \001(\010\"A\n\021GetServersRequest\022\027\n\017start_s"
  "erver_id\030\001 \001(\003\022\023\n\013max_results\030\002 \001(\003\"K\n\022G"
  "etServersResponse\022(\n\006server\030\001 \003(\0132\030.grpc"
  ".channelz.v1.Server\022\013\n\003end\030\002 \001(\010\"%\n\020GetS"
  "erverRequest\022\021\n\tserver_id\030\001 \001(\003\"=\n\021GetSe"
  "rverResponse\022(\n\006server\030\001 \001(\0132\030.grpc.chan"
  "nelz.v1.Server\"Z\n\027GetServerSocketsReques"
  "t\022\021\n\tserver_id\030\001 \001(\003\022\027\n\017start_socket_id\030"
  "\002 \001(\003\022\023\n\013max_results\030\003 \001(\003\"X\n\030GetServerS"
  "ocketsResponse\022/\n\nsocket_ref\030\001 \003(\0132\033.grp"
  "c.channelz.v1.SocketRef\022\013\n\003end\030\002 \001(\010\"\'\n\021"
  "GetChannelRequest\022\022\n\nchannel_id\030\001 \001(\003\"@\n"
  "\022GetChannelResponse\022*\n\007channel\030\001 \001(\0132\031.g"
  "rpc.channelz.v1.Channel\"-\n\024GetSubchannel"
  "Request\022\025\n\rsubchannel_id\030\001 \001(\003\"I\n\025GetSub"
  "channelResponse\0220\n\nsubchannel\030\001 \001(\0132\034.gr"
  "pc.channelz.v1.Subchannel\"6\n\020GetSocketRe"
  "quest\022\021\n\tsocket_id\030\001 \001(\003\022\017\n\007summary\030\002 \001("
  "\010\"=\n\021GetSocketResponse\022(\n\006socket\030\001 \001(\0132\030"
  ".grpc.channelz.v1.Socket2\232\005\n\010Channelz\022c\n"
  "\016GetTopChannels\022\'.grpc.channelz.v1.GetTo"
  "pChannelsRequest\032(.grpc.channelz.v1.GetT"
  "opChannelsResponse\022W\n\nGetServers\022#.grpc."
  "channelz.v1.GetServersRequest\032$.grpc.cha"
  "nnelz.v1.GetServersResponse\022T\n\tGetServer"
  "\022\".grpc.channelz.v1.GetServerRequest\032#.g"
  "rpc.channelz.v1.GetServerResponse\022i\n\020Get"
  "ServerSockets\022).grpc.channelz.v1.GetServ"
  "erSocketsRequest\032*.grpc.channelz.v1.GetS"
  "erverSocketsResponse\022W\n\nGetChannel\022#.grp"
  "c.channelz.v1.GetChannelRequest\032$.grpc.c"
  "hannelz.v1.GetChannelResponse\022`\n\rGetSubc"
  "hannel\022&.grpc.channelz.v1.GetSubchannelR"
  "equest\032\'.grpc.channelz.v1.GetSubchannelR"
  "esponse\022T\n\tGetSocket\022\".grpc.channelz.v1."
  "GetSocketRequest\032#.grpc.channelz.v1.GetS"
  "ocketResponseBX\n\023io.grpc.channelz.v1B\rCh"
  "annelzProtoP\001Z0google.golang.org/grpc/ch"
  "annelz/grpc_channelz_v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_channelz_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_channelz_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_channelz_2eproto = {
  false, false, 6511, descriptor_table_protodef_channelz_2eproto, "channelz.proto", 
  &descriptor_table_channelz_2eproto_once, descriptor_table_channelz_2eproto_deps, 4, 39,
  schemas, file_default_instances, TableStruct_channelz_2eproto::offsets,
  file_level_metadata_channelz_2eproto, file_level_enum_descriptors_channelz_2eproto, file_level_service_descriptors_channelz_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_channelz_2eproto_getter() {
  return &descriptor_table_channelz_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_channelz_2eproto(&descriptor_table_channelz_2eproto);
namespace grpc {
namespace channelz {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelConnectivityState_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_channelz_2eproto);
  return file_level_enum_descriptors_channelz_2eproto[0];
}
bool ChannelConnectivityState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChannelConnectivityState_State ChannelConnectivityState::UNKNOWN;
constexpr ChannelConnectivityState_State ChannelConnectivityState::IDLE;
constexpr ChannelConnectivityState_State ChannelConnectivityState::CONNECTING;
constexpr ChannelConnectivityState_State ChannelConnectivityState::READY;
constexpr ChannelConnectivityState_State ChannelConnectivityState::TRANSIENT_FAILURE;
constexpr ChannelConnectivityState_State ChannelConnectivityState::SHUTDOWN;
constexpr ChannelConnectivityState_State ChannelConnectivityState::State_MIN;
constexpr ChannelConnectivityState_State ChannelConnectivityState::State_MAX;
constexpr int ChannelConnectivityState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelTraceEvent_Severity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_channelz_2eproto);
  return file_level_enum_descriptors_channelz_2eproto[1];
}
bool ChannelTraceEvent_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChannelTraceEvent_Severity ChannelTraceEvent::CT_UNKNOWN;
constexpr ChannelTraceEvent_Severity ChannelTraceEvent::CT_INFO;
constexpr ChannelTraceEvent_Severity ChannelTraceEvent::CT_WARNING;
constexpr ChannelTraceEvent_Severity ChannelTraceEvent::CT_ERROR;
constexpr ChannelTraceEvent_Severity ChannelTraceEvent::Severity_MIN;
constexpr ChannelTraceEvent_Severity ChannelTraceEvent::Severity_MAX;
constexpr int ChannelTraceEvent::Severity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Channel::_Internal {
 public:
  static const ::grpc::channelz::v1::ChannelRef& ref(const Channel* msg);
  static const ::grpc::channelz::v1::ChannelData& data(const Channel* msg);
};

const ::grpc::channelz::v1::ChannelRef&
Channel::_Internal::ref(const Channel* msg) {
  return *msg->ref_;
}
const ::grpc::channelz::v1::ChannelData&
Channel::_Internal::data(const Channel* msg) {
  return *msg->data_;
}
Channel::Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_ref_(arena),
  subchannel_ref_(arena),
  socket_ref_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Channel)
}
Channel::Channel(const Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_ref_(from.channel_ref_),
      subchannel_ref_(from.subchannel_ref_),
      socket_ref_(from.socket_ref_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ref()) {
    ref_ = new ::grpc::channelz::v1::ChannelRef(*from.ref_);
  } else {
    ref_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::grpc::channelz::v1::ChannelData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Channel)
}

inline void Channel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ref_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&ref_)) + sizeof(data_));
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Channel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Channel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ref_;
  if (this != internal_default_instance()) delete data_;
}

void Channel::ArenaDtor(void* object) {
  Channel* _this = reinterpret_cast< Channel* >(object);
  (void)_this;
}
void Channel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_ref_.Clear();
  subchannel_ref_.Clear();
  socket_ref_.Clear();
  if (GetArenaForAllocation() == nullptr && ref_ != nullptr) {
    delete ref_;
  }
  ref_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Channel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.ChannelRef ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.ChannelData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subchannel_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_socket_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Channel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelRef ref = 1;
  if (this->_internal_has_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ref(this), target, stream);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_channel_ref(i), target, stream);
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subchannel_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_subchannel_ref(i), target, stream);
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_socket_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_socket_ref(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Channel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  total_size += 1UL * this->_internal_channel_ref_size();
  for (const auto& msg : this->channel_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  total_size += 1UL * this->_internal_subchannel_ref_size();
  for (const auto& msg : this->subchannel_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  total_size += 1UL * this->_internal_socket_ref_size();
  for (const auto& msg : this->socket_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .grpc.channelz.v1.ChannelRef ref = 1;
  if (this->_internal_has_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ref_);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Channel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Channel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Channel::GetClassData() const { return &_class_data_; }

void Channel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Channel *>(to)->MergeFrom(
      static_cast<const Channel &>(from));
}


void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_ref_.MergeFrom(from.channel_ref_);
  subchannel_ref_.MergeFrom(from.subchannel_ref_);
  socket_ref_.MergeFrom(from.socket_ref_);
  if (from._internal_has_ref()) {
    _internal_mutable_ref()->::grpc::channelz::v1::ChannelRef::MergeFrom(from._internal_ref());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::grpc::channelz::v1::ChannelData::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  return true;
}

void Channel::InternalSwap(Channel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_ref_.InternalSwap(&other->channel_ref_);
  subchannel_ref_.InternalSwap(&other->subchannel_ref_);
  socket_ref_.InternalSwap(&other->socket_ref_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Channel, data_)
      + sizeof(Channel::data_)
      - PROTOBUF_FIELD_OFFSET(Channel, ref_)>(
          reinterpret_cast<char*>(&ref_),
          reinterpret_cast<char*>(&other->ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Channel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[0]);
}

// ===================================================================

class Subchannel::_Internal {
 public:
  static const ::grpc::channelz::v1::SubchannelRef& ref(const Subchannel* msg);
  static const ::grpc::channelz::v1::ChannelData& data(const Subchannel* msg);
};

const ::grpc::channelz::v1::SubchannelRef&
Subchannel::_Internal::ref(const Subchannel* msg) {
  return *msg->ref_;
}
const ::grpc::channelz::v1::ChannelData&
Subchannel::_Internal::data(const Subchannel* msg) {
  return *msg->data_;
}
Subchannel::Subchannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_ref_(arena),
  subchannel_ref_(arena),
  socket_ref_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Subchannel)
}
Subchannel::Subchannel(const Subchannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_ref_(from.channel_ref_),
      subchannel_ref_(from.subchannel_ref_),
      socket_ref_(from.socket_ref_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ref()) {
    ref_ = new ::grpc::channelz::v1::SubchannelRef(*from.ref_);
  } else {
    ref_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::grpc::channelz::v1::ChannelData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Subchannel)
}

inline void Subchannel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ref_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&ref_)) + sizeof(data_));
}

Subchannel::~Subchannel() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Subchannel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Subchannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ref_;
  if (this != internal_default_instance()) delete data_;
}

void Subchannel::ArenaDtor(void* object) {
  Subchannel* _this = reinterpret_cast< Subchannel* >(object);
  (void)_this;
}
void Subchannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Subchannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Subchannel::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Subchannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_ref_.Clear();
  subchannel_ref_.Clear();
  socket_ref_.Clear();
  if (GetArenaForAllocation() == nullptr && ref_ != nullptr) {
    delete ref_;
  }
  ref_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subchannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.SubchannelRef ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.ChannelData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subchannel_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_socket_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Subchannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Subchannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.SubchannelRef ref = 1;
  if (this->_internal_has_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ref(this), target, stream);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_channel_ref(i), target, stream);
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subchannel_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_subchannel_ref(i), target, stream);
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_socket_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_socket_ref(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Subchannel)
  return target;
}

size_t Subchannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Subchannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  total_size += 1UL * this->_internal_channel_ref_size();
  for (const auto& msg : this->channel_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  total_size += 1UL * this->_internal_subchannel_ref_size();
  for (const auto& msg : this->subchannel_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  total_size += 1UL * this->_internal_socket_ref_size();
  for (const auto& msg : this->socket_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .grpc.channelz.v1.SubchannelRef ref = 1;
  if (this->_internal_has_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ref_);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subchannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Subchannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subchannel::GetClassData() const { return &_class_data_; }

void Subchannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Subchannel *>(to)->MergeFrom(
      static_cast<const Subchannel &>(from));
}


void Subchannel::MergeFrom(const Subchannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Subchannel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_ref_.MergeFrom(from.channel_ref_);
  subchannel_ref_.MergeFrom(from.subchannel_ref_);
  socket_ref_.MergeFrom(from.socket_ref_);
  if (from._internal_has_ref()) {
    _internal_mutable_ref()->::grpc::channelz::v1::SubchannelRef::MergeFrom(from._internal_ref());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::grpc::channelz::v1::ChannelData::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subchannel::CopyFrom(const Subchannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Subchannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subchannel::IsInitialized() const {
  return true;
}

void Subchannel::InternalSwap(Subchannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_ref_.InternalSwap(&other->channel_ref_);
  subchannel_ref_.InternalSwap(&other->subchannel_ref_);
  socket_ref_.InternalSwap(&other->socket_ref_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subchannel, data_)
      + sizeof(Subchannel::data_)
      - PROTOBUF_FIELD_OFFSET(Subchannel, ref_)>(
          reinterpret_cast<char*>(&ref_),
          reinterpret_cast<char*>(&other->ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subchannel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[1]);
}

// ===================================================================

class ChannelConnectivityState::_Internal {
 public:
};

ChannelConnectivityState::ChannelConnectivityState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ChannelConnectivityState)
}
ChannelConnectivityState::ChannelConnectivityState(const ChannelConnectivityState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelConnectivityState)
}

inline void ChannelConnectivityState::SharedCtor() {
state_ = 0;
}

ChannelConnectivityState::~ChannelConnectivityState() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelConnectivityState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelConnectivityState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChannelConnectivityState::ArenaDtor(void* object) {
  ChannelConnectivityState* _this = reinterpret_cast< ChannelConnectivityState* >(object);
  (void)_this;
}
void ChannelConnectivityState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelConnectivityState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelConnectivityState::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelConnectivityState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelConnectivityState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.ChannelConnectivityState.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::grpc::channelz::v1::ChannelConnectivityState_State>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelConnectivityState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelConnectivityState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelConnectivityState.State state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelConnectivityState)
  return target;
}

size_t ChannelConnectivityState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelConnectivityState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelConnectivityState.State state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelConnectivityState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelConnectivityState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelConnectivityState::GetClassData() const { return &_class_data_; }

void ChannelConnectivityState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChannelConnectivityState *>(to)->MergeFrom(
      static_cast<const ChannelConnectivityState &>(from));
}


void ChannelConnectivityState::MergeFrom(const ChannelConnectivityState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelConnectivityState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelConnectivityState::CopyFrom(const ChannelConnectivityState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelConnectivityState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelConnectivityState::IsInitialized() const {
  return true;
}

void ChannelConnectivityState::InternalSwap(ChannelConnectivityState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelConnectivityState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[2]);
}

// ===================================================================

class ChannelData::_Internal {
 public:
  static const ::grpc::channelz::v1::ChannelConnectivityState& state(const ChannelData* msg);
  static const ::grpc::channelz::v1::ChannelTrace& trace(const ChannelData* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_call_started_timestamp(const ChannelData* msg);
};

const ::grpc::channelz::v1::ChannelConnectivityState&
ChannelData::_Internal::state(const ChannelData* msg) {
  return *msg->state_;
}
const ::grpc::channelz::v1::ChannelTrace&
ChannelData::_Internal::trace(const ChannelData* msg) {
  return *msg->trace_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ChannelData::_Internal::last_call_started_timestamp(const ChannelData* msg) {
  return *msg->last_call_started_timestamp_;
}
void ChannelData::clear_last_call_started_timestamp() {
  if (GetArenaForAllocation() == nullptr && last_call_started_timestamp_ != nullptr) {
    delete last_call_started_timestamp_;
  }
  last_call_started_timestamp_ = nullptr;
}
ChannelData::ChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ChannelData)
}
ChannelData::ChannelData(const ChannelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_state()) {
    state_ = new ::grpc::channelz::v1::ChannelConnectivityState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_trace()) {
    trace_ = new ::grpc::channelz::v1::ChannelTrace(*from.trace_);
  } else {
    trace_ = nullptr;
  }
  if (from._internal_has_last_call_started_timestamp()) {
    last_call_started_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_call_started_timestamp_);
  } else {
    last_call_started_timestamp_ = nullptr;
  }
  ::memcpy(&calls_started_, &from.calls_started_,
    static_cast<size_t>(reinterpret_cast<char*>(&calls_failed_) -
    reinterpret_cast<char*>(&calls_started_)) + sizeof(calls_failed_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelData)
}

inline void ChannelData::SharedCtor() {
target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&calls_failed_) -
    reinterpret_cast<char*>(&state_)) + sizeof(calls_failed_));
}

ChannelData::~ChannelData() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete trace_;
  if (this != internal_default_instance()) delete last_call_started_timestamp_;
}

void ChannelData::ArenaDtor(void* object) {
  ChannelData* _this = reinterpret_cast< ChannelData* >(object);
  (void)_this;
}
void ChannelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && trace_ != nullptr) {
    delete trace_;
  }
  trace_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_call_started_timestamp_ != nullptr) {
    delete last_call_started_timestamp_;
  }
  last_call_started_timestamp_ = nullptr;
  ::memset(&calls_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calls_failed_) -
      reinterpret_cast<char*>(&calls_started_)) + sizeof(calls_failed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.ChannelConnectivityState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.ChannelData.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.ChannelTrace trace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 calls_started = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          calls_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 calls_succeeded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          calls_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 calls_failed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          calls_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_call_started_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_call_started_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelConnectivityState state = 1;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  // string target = 2;
  if (!this->_internal_target().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ChannelData.target");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target(), target);
  }

  // .grpc.channelz.v1.ChannelTrace trace = 3;
  if (this->_internal_has_trace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trace(this), target, stream);
  }

  // int64 calls_started = 4;
  if (this->_internal_calls_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_calls_started(), target);
  }

  // int64 calls_succeeded = 5;
  if (this->_internal_calls_succeeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_calls_succeeded(), target);
  }

  // int64 calls_failed = 6;
  if (this->_internal_calls_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_calls_failed(), target);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 7;
  if (this->_internal_has_last_call_started_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::last_call_started_timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelData)
  return target;
}

size_t ChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 2;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // .grpc.channelz.v1.ChannelConnectivityState state = 1;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .grpc.channelz.v1.ChannelTrace trace = 3;
  if (this->_internal_has_trace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 7;
  if (this->_internal_has_last_call_started_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_call_started_timestamp_);
  }

  // int64 calls_started = 4;
  if (this->_internal_calls_started() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_calls_started());
  }

  // int64 calls_succeeded = 5;
  if (this->_internal_calls_succeeded() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_calls_succeeded());
  }

  // int64 calls_failed = 6;
  if (this->_internal_calls_failed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_calls_failed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelData::GetClassData() const { return &_class_data_; }

void ChannelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChannelData *>(to)->MergeFrom(
      static_cast<const ChannelData &>(from));
}


void ChannelData::MergeFrom(const ChannelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _internal_set_target(from._internal_target());
  }
  if (from._internal_has_state()) {
    _internal_mutable_state()->::grpc::channelz::v1::ChannelConnectivityState::MergeFrom(from._internal_state());
  }
  if (from._internal_has_trace()) {
    _internal_mutable_trace()->::grpc::channelz::v1::ChannelTrace::MergeFrom(from._internal_trace());
  }
  if (from._internal_has_last_call_started_timestamp()) {
    _internal_mutable_last_call_started_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_call_started_timestamp());
  }
  if (from._internal_calls_started() != 0) {
    _internal_set_calls_started(from._internal_calls_started());
  }
  if (from._internal_calls_succeeded() != 0) {
    _internal_set_calls_succeeded(from._internal_calls_succeeded());
  }
  if (from._internal_calls_failed() != 0) {
    _internal_set_calls_failed(from._internal_calls_failed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelData::CopyFrom(const ChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelData::IsInitialized() const {
  return true;
}

void ChannelData::InternalSwap(ChannelData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_, GetArenaForAllocation(),
      &other->target_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelData, calls_failed_)
      + sizeof(ChannelData::calls_failed_)
      - PROTOBUF_FIELD_OFFSET(ChannelData, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[3]);
}

// ===================================================================

class ChannelTraceEvent::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ChannelTraceEvent* msg);
  static const ::grpc::channelz::v1::ChannelRef& channel_ref(const ChannelTraceEvent* msg);
  static const ::grpc::channelz::v1::SubchannelRef& subchannel_ref(const ChannelTraceEvent* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ChannelTraceEvent::_Internal::timestamp(const ChannelTraceEvent* msg) {
  return *msg->timestamp_;
}
const ::grpc::channelz::v1::ChannelRef&
ChannelTraceEvent::_Internal::channel_ref(const ChannelTraceEvent* msg) {
  return *msg->child_ref_.channel_ref_;
}
const ::grpc::channelz::v1::SubchannelRef&
ChannelTraceEvent::_Internal::subchannel_ref(const ChannelTraceEvent* msg) {
  return *msg->child_ref_.subchannel_ref_;
}
void ChannelTraceEvent::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void ChannelTraceEvent::set_allocated_channel_ref(::grpc::channelz::v1::ChannelRef* channel_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_child_ref();
  if (channel_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::ChannelRef>::GetOwningArena(channel_ref);
    if (message_arena != submessage_arena) {
      channel_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_ref, submessage_arena);
    }
    set_has_channel_ref();
    child_ref_.channel_ref_ = channel_ref;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelTraceEvent.channel_ref)
}
void ChannelTraceEvent::set_allocated_subchannel_ref(::grpc::channelz::v1::SubchannelRef* subchannel_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_child_ref();
  if (subchannel_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::SubchannelRef>::GetOwningArena(subchannel_ref);
    if (message_arena != submessage_arena) {
      subchannel_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subchannel_ref, submessage_arena);
    }
    set_has_subchannel_ref();
    child_ref_.subchannel_ref_ = subchannel_ref;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelTraceEvent.subchannel_ref)
}
ChannelTraceEvent::ChannelTraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ChannelTraceEvent)
}
ChannelTraceEvent::ChannelTraceEvent(const ChannelTraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  severity_ = from.severity_;
  clear_has_child_ref();
  switch (from.child_ref_case()) {
    case kChannelRef: {
      _internal_mutable_channel_ref()->::grpc::channelz::v1::ChannelRef::MergeFrom(from._internal_channel_ref());
      break;
    }
    case kSubchannelRef: {
      _internal_mutable_subchannel_ref()->::grpc::channelz::v1::SubchannelRef::MergeFrom(from._internal_subchannel_ref());
      break;
    }
    case CHILD_REF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelTraceEvent)
}

inline void ChannelTraceEvent::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(severity_));
clear_has_child_ref();
}

ChannelTraceEvent::~ChannelTraceEvent() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelTraceEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelTraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
  if (has_child_ref()) {
    clear_child_ref();
  }
}

void ChannelTraceEvent::ArenaDtor(void* object) {
  ChannelTraceEvent* _this = reinterpret_cast< ChannelTraceEvent* >(object);
  (void)_this;
}
void ChannelTraceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelTraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelTraceEvent::clear_child_ref() {
// @@protoc_insertion_point(one_of_clear_start:grpc.channelz.v1.ChannelTraceEvent)
  switch (child_ref_case()) {
    case kChannelRef: {
      if (GetArenaForAllocation() == nullptr) {
        delete child_ref_.channel_ref_;
      }
      break;
    }
    case kSubchannelRef: {
      if (GetArenaForAllocation() == nullptr) {
        delete child_ref_.subchannel_ref_;
      }
      break;
    }
    case CHILD_REF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHILD_REF_NOT_SET;
}


void ChannelTraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelTraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  severity_ = 0;
  clear_child_ref();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelTraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.ChannelTraceEvent.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.ChannelTraceEvent.Severity severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::grpc::channelz::v1::ChannelTraceEvent_Severity>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.ChannelRef channel_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.SubchannelRef subchannel_ref = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subchannel_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelTraceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelTraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ChannelTraceEvent.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // .grpc.channelz.v1.ChannelTraceEvent.Severity severity = 2;
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_severity(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  // .grpc.channelz.v1.ChannelRef channel_ref = 4;
  if (_internal_has_channel_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::channel_ref(this), target, stream);
  }

  // .grpc.channelz.v1.SubchannelRef subchannel_ref = 5;
  if (_internal_has_subchannel_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::subchannel_ref(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelTraceEvent)
  return target;
}

size_t ChannelTraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelTraceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .grpc.channelz.v1.ChannelTraceEvent.Severity severity = 2;
  if (this->_internal_severity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity());
  }

  switch (child_ref_case()) {
    // .grpc.channelz.v1.ChannelRef channel_ref = 4;
    case kChannelRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_ref_.channel_ref_);
      break;
    }
    // .grpc.channelz.v1.SubchannelRef subchannel_ref = 5;
    case kSubchannelRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_ref_.subchannel_ref_);
      break;
    }
    case CHILD_REF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelTraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelTraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelTraceEvent::GetClassData() const { return &_class_data_; }

void ChannelTraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChannelTraceEvent *>(to)->MergeFrom(
      static_cast<const ChannelTraceEvent &>(from));
}


void ChannelTraceEvent::MergeFrom(const ChannelTraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelTraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_severity() != 0) {
    _internal_set_severity(from._internal_severity());
  }
  switch (from.child_ref_case()) {
    case kChannelRef: {
      _internal_mutable_channel_ref()->::grpc::channelz::v1::ChannelRef::MergeFrom(from._internal_channel_ref());
      break;
    }
    case kSubchannelRef: {
      _internal_mutable_subchannel_ref()->::grpc::channelz::v1::SubchannelRef::MergeFrom(from._internal_subchannel_ref());
      break;
    }
    case CHILD_REF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelTraceEvent::CopyFrom(const ChannelTraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelTraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelTraceEvent::IsInitialized() const {
  return true;
}

void ChannelTraceEvent::InternalSwap(ChannelTraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelTraceEvent, severity_)
      + sizeof(ChannelTraceEvent::severity_)
      - PROTOBUF_FIELD_OFFSET(ChannelTraceEvent, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
  swap(child_ref_, other->child_ref_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelTraceEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[4]);
}

// ===================================================================

class ChannelTrace::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& creation_timestamp(const ChannelTrace* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ChannelTrace::_Internal::creation_timestamp(const ChannelTrace* msg) {
  return *msg->creation_timestamp_;
}
void ChannelTrace::clear_creation_timestamp() {
  if (GetArenaForAllocation() == nullptr && creation_timestamp_ != nullptr) {
    delete creation_timestamp_;
  }
  creation_timestamp_ = nullptr;
}
ChannelTrace::ChannelTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ChannelTrace)
}
ChannelTrace::ChannelTrace(const ChannelTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_creation_timestamp()) {
    creation_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.creation_timestamp_);
  } else {
    creation_timestamp_ = nullptr;
  }
  num_events_logged_ = from.num_events_logged_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelTrace)
}

inline void ChannelTrace::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creation_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_events_logged_) -
    reinterpret_cast<char*>(&creation_timestamp_)) + sizeof(num_events_logged_));
}

ChannelTrace::~ChannelTrace() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelTrace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete creation_timestamp_;
}

void ChannelTrace::ArenaDtor(void* object) {
  ChannelTrace* _this = reinterpret_cast< ChannelTrace* >(object);
  (void)_this;
}
void ChannelTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  if (GetArenaForAllocation() == nullptr && creation_timestamp_ != nullptr) {
    delete creation_timestamp_;
  }
  creation_timestamp_ = nullptr;
  num_events_logged_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 num_events_logged = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_events_logged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp creation_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.ChannelTraceEvent events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelTrace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_events_logged = 1;
  if (this->_internal_num_events_logged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_num_events_logged(), target);
  }

  // .google.protobuf.Timestamp creation_timestamp = 2;
  if (this->_internal_has_creation_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::creation_timestamp(this), target, stream);
  }

  // repeated .grpc.channelz.v1.ChannelTraceEvent events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelTrace)
  return target;
}

size_t ChannelTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelTrace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.ChannelTraceEvent events = 3;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp creation_timestamp = 2;
  if (this->_internal_has_creation_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *creation_timestamp_);
  }

  // int64 num_events_logged = 1;
  if (this->_internal_num_events_logged() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_events_logged());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelTrace::GetClassData() const { return &_class_data_; }

void ChannelTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChannelTrace *>(to)->MergeFrom(
      static_cast<const ChannelTrace &>(from));
}


void ChannelTrace::MergeFrom(const ChannelTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelTrace)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from._internal_has_creation_timestamp()) {
    _internal_mutable_creation_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_creation_timestamp());
  }
  if (from._internal_num_events_logged() != 0) {
    _internal_set_num_events_logged(from._internal_num_events_logged());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelTrace::CopyFrom(const ChannelTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelTrace::IsInitialized() const {
  return true;
}

void ChannelTrace::InternalSwap(ChannelTrace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelTrace, num_events_logged_)
      + sizeof(ChannelTrace::num_events_logged_)
      - PROTOBUF_FIELD_OFFSET(ChannelTrace, creation_timestamp_)>(
          reinterpret_cast<char*>(&creation_timestamp_),
          reinterpret_cast<char*>(&other->creation_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelTrace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[5]);
}

// ===================================================================

class ChannelRef::_Internal {
 public:
};

ChannelRef::ChannelRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ChannelRef)
}
ChannelRef::ChannelRef(const ChannelRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelRef)
}

inline void ChannelRef::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
channel_id_ = int64_t{0};
}

ChannelRef::~ChannelRef() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelRef)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelRef::ArenaDtor(void* object) {
  ChannelRef* _this = reinterpret_cast< ChannelRef* >(object);
  (void)_this;
}
void ChannelRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelRef::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  channel_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.ChannelRef.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 channel_id = 1;
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_channel_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ChannelRef.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelRef)
  return target;
}

size_t ChannelRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 channel_id = 1;
  if (this->_internal_channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelRef::GetClassData() const { return &_class_data_; }

void ChannelRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChannelRef *>(to)->MergeFrom(
      static_cast<const ChannelRef &>(from));
}


void ChannelRef::MergeFrom(const ChannelRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelRef)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelRef::CopyFrom(const ChannelRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelRef::IsInitialized() const {
  return true;
}

void ChannelRef::InternalSwap(ChannelRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelRef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[6]);
}

// ===================================================================

class SubchannelRef::_Internal {
 public:
};

SubchannelRef::SubchannelRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SubchannelRef)
}
SubchannelRef::SubchannelRef(const SubchannelRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  subchannel_id_ = from.subchannel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SubchannelRef)
}

inline void SubchannelRef::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
subchannel_id_ = int64_t{0};
}

SubchannelRef::~SubchannelRef() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SubchannelRef)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubchannelRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubchannelRef::ArenaDtor(void* object) {
  SubchannelRef* _this = reinterpret_cast< SubchannelRef* >(object);
  (void)_this;
}
void SubchannelRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubchannelRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubchannelRef::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SubchannelRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  subchannel_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubchannelRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 subchannel_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          subchannel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.SubchannelRef.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubchannelRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SubchannelRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 subchannel_id = 7;
  if (this->_internal_subchannel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_subchannel_id(), target);
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SubchannelRef.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SubchannelRef)
  return target;
}

size_t SubchannelRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SubchannelRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 8;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 subchannel_id = 7;
  if (this->_internal_subchannel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_subchannel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubchannelRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubchannelRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubchannelRef::GetClassData() const { return &_class_data_; }

void SubchannelRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SubchannelRef *>(to)->MergeFrom(
      static_cast<const SubchannelRef &>(from));
}


void SubchannelRef::MergeFrom(const SubchannelRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SubchannelRef)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_subchannel_id() != 0) {
    _internal_set_subchannel_id(from._internal_subchannel_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubchannelRef::CopyFrom(const SubchannelRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SubchannelRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubchannelRef::IsInitialized() const {
  return true;
}

void SubchannelRef::InternalSwap(SubchannelRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(subchannel_id_, other->subchannel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubchannelRef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[7]);
}

// ===================================================================

class SocketRef::_Internal {
 public:
};

SocketRef::SocketRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SocketRef)
}
SocketRef::SocketRef(const SocketRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  socket_id_ = from.socket_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketRef)
}

inline void SocketRef::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
socket_id_ = int64_t{0};
}

SocketRef::~SocketRef() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketRef)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SocketRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SocketRef::ArenaDtor(void* object) {
  SocketRef* _this = reinterpret_cast< SocketRef* >(object);
  (void)_this;
}
void SocketRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SocketRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SocketRef::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  socket_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 socket_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          socket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.SocketRef.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 socket_id = 3;
  if (this->_internal_socket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_socket_id(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SocketRef.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketRef)
  return target;
}

size_t SocketRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 socket_id = 3;
  if (this->_internal_socket_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_socket_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SocketRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketRef::GetClassData() const { return &_class_data_; }

void SocketRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SocketRef *>(to)->MergeFrom(
      static_cast<const SocketRef &>(from));
}


void SocketRef::MergeFrom(const SocketRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketRef)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_socket_id() != 0) {
    _internal_set_socket_id(from._internal_socket_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketRef::CopyFrom(const SocketRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketRef::IsInitialized() const {
  return true;
}

void SocketRef::InternalSwap(SocketRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(socket_id_, other->socket_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketRef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[8]);
}

// ===================================================================

class ServerRef::_Internal {
 public:
};

ServerRef::ServerRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ServerRef)
}
ServerRef::ServerRef(const ServerRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ServerRef)
}

inline void ServerRef::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
server_id_ = int64_t{0};
}

ServerRef::~ServerRef() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ServerRef)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerRef::ArenaDtor(void* object) {
  ServerRef* _this = reinterpret_cast< ServerRef* >(object);
  (void)_this;
}
void ServerRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerRef::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ServerRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  server_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 server_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.ServerRef.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ServerRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 server_id = 5;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_server_id(), target);
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ServerRef.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ServerRef)
  return target;
}

size_t ServerRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ServerRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 6;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 server_id = 5;
  if (this->_internal_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerRef::GetClassData() const { return &_class_data_; }

void ServerRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ServerRef *>(to)->MergeFrom(
      static_cast<const ServerRef &>(from));
}


void ServerRef::MergeFrom(const ServerRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ServerRef)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerRef::CopyFrom(const ServerRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ServerRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRef::IsInitialized() const {
  return true;
}

void ServerRef::InternalSwap(ServerRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerRef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[9]);
}

// ===================================================================

class Server::_Internal {
 public:
  static const ::grpc::channelz::v1::ServerRef& ref(const Server* msg);
  static const ::grpc::channelz::v1::ServerData& data(const Server* msg);
};

const ::grpc::channelz::v1::ServerRef&
Server::_Internal::ref(const Server* msg) {
  return *msg->ref_;
}
const ::grpc::channelz::v1::ServerData&
Server::_Internal::data(const Server* msg) {
  return *msg->data_;
}
Server::Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  listen_socket_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Server)
}
Server::Server(const Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      listen_socket_(from.listen_socket_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ref()) {
    ref_ = new ::grpc::channelz::v1::ServerRef(*from.ref_);
  } else {
    ref_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::grpc::channelz::v1::ServerData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Server)
}

inline void Server::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ref_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&ref_)) + sizeof(data_));
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Server)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ref_;
  if (this != internal_default_instance()) delete data_;
}

void Server::ArenaDtor(void* object) {
  Server* _this = reinterpret_cast< Server* >(object);
  (void)_this;
}
void Server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Server::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listen_socket_.Clear();
  if (GetArenaForAllocation() == nullptr && ref_ != nullptr) {
    delete ref_;
  }
  ref_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.ServerRef ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.ServerData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.SocketRef listen_socket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_listen_socket(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Server::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ServerRef ref = 1;
  if (this->_internal_has_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ref(this), target, stream);
  }

  // .grpc.channelz.v1.ServerData data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // repeated .grpc.channelz.v1.SocketRef listen_socket = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_listen_socket_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_listen_socket(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Server)
  return target;
}

size_t Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Server)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.SocketRef listen_socket = 3;
  total_size += 1UL * this->_internal_listen_socket_size();
  for (const auto& msg : this->listen_socket_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .grpc.channelz.v1.ServerRef ref = 1;
  if (this->_internal_has_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ref_);
  }

  // .grpc.channelz.v1.ServerData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Server::GetClassData() const { return &_class_data_; }

void Server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Server *>(to)->MergeFrom(
      static_cast<const Server &>(from));
}


void Server::MergeFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Server)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  listen_socket_.MergeFrom(from.listen_socket_);
  if (from._internal_has_ref()) {
    _internal_mutable_ref()->::grpc::channelz::v1::ServerRef::MergeFrom(from._internal_ref());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::grpc::channelz::v1::ServerData::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Server::CopyFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  return true;
}

void Server::InternalSwap(Server* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  listen_socket_.InternalSwap(&other->listen_socket_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Server, data_)
      + sizeof(Server::data_)
      - PROTOBUF_FIELD_OFFSET(Server, ref_)>(
          reinterpret_cast<char*>(&ref_),
          reinterpret_cast<char*>(&other->ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Server::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[10]);
}

// ===================================================================

class ServerData::_Internal {
 public:
  static const ::grpc::channelz::v1::ChannelTrace& trace(const ServerData* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_call_started_timestamp(const ServerData* msg);
};

const ::grpc::channelz::v1::ChannelTrace&
ServerData::_Internal::trace(const ServerData* msg) {
  return *msg->trace_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ServerData::_Internal::last_call_started_timestamp(const ServerData* msg) {
  return *msg->last_call_started_timestamp_;
}
void ServerData::clear_last_call_started_timestamp() {
  if (GetArenaForAllocation() == nullptr && last_call_started_timestamp_ != nullptr) {
    delete last_call_started_timestamp_;
  }
  last_call_started_timestamp_ = nullptr;
}
ServerData::ServerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ServerData)
}
ServerData::ServerData(const ServerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trace()) {
    trace_ = new ::grpc::channelz::v1::ChannelTrace(*from.trace_);
  } else {
    trace_ = nullptr;
  }
  if (from._internal_has_last_call_started_timestamp()) {
    last_call_started_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_call_started_timestamp_);
  } else {
    last_call_started_timestamp_ = nullptr;
  }
  ::memcpy(&calls_started_, &from.calls_started_,
    static_cast<size_t>(reinterpret_cast<char*>(&calls_failed_) -
    reinterpret_cast<char*>(&calls_started_)) + sizeof(calls_failed_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ServerData)
}

inline void ServerData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trace_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&calls_failed_) -
    reinterpret_cast<char*>(&trace_)) + sizeof(calls_failed_));
}

ServerData::~ServerData() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ServerData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete trace_;
  if (this != internal_default_instance()) delete last_call_started_timestamp_;
}

void ServerData::ArenaDtor(void* object) {
  ServerData* _this = reinterpret_cast< ServerData* >(object);
  (void)_this;
}
void ServerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerData::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ServerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && trace_ != nullptr) {
    delete trace_;
  }
  trace_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_call_started_timestamp_ != nullptr) {
    delete last_call_started_timestamp_;
  }
  last_call_started_timestamp_ = nullptr;
  ::memset(&calls_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calls_failed_) -
      reinterpret_cast<char*>(&calls_started_)) + sizeof(calls_failed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.ChannelTrace trace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 calls_started = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          calls_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 calls_succeeded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          calls_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 calls_failed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          calls_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_call_started_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_call_started_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ServerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelTrace trace = 1;
  if (this->_internal_has_trace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trace(this), target, stream);
  }

  // int64 calls_started = 2;
  if (this->_internal_calls_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_calls_started(), target);
  }

  // int64 calls_succeeded = 3;
  if (this->_internal_calls_succeeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_calls_succeeded(), target);
  }

  // int64 calls_failed = 4;
  if (this->_internal_calls_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_calls_failed(), target);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 5;
  if (this->_internal_has_last_call_started_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::last_call_started_timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ServerData)
  return target;
}

size_t ServerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ServerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelTrace trace = 1;
  if (this->_internal_has_trace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 5;
  if (this->_internal_has_last_call_started_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_call_started_timestamp_);
  }

  // int64 calls_started = 2;
  if (this->_internal_calls_started() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_calls_started());
  }

  // int64 calls_succeeded = 3;
  if (this->_internal_calls_succeeded() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_calls_succeeded());
  }

  // int64 calls_failed = 4;
  if (this->_internal_calls_failed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_calls_failed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerData::GetClassData() const { return &_class_data_; }

void ServerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ServerData *>(to)->MergeFrom(
      static_cast<const ServerData &>(from));
}


void ServerData::MergeFrom(const ServerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ServerData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trace()) {
    _internal_mutable_trace()->::grpc::channelz::v1::ChannelTrace::MergeFrom(from._internal_trace());
  }
  if (from._internal_has_last_call_started_timestamp()) {
    _internal_mutable_last_call_started_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_call_started_timestamp());
  }
  if (from._internal_calls_started() != 0) {
    _internal_set_calls_started(from._internal_calls_started());
  }
  if (from._internal_calls_succeeded() != 0) {
    _internal_set_calls_succeeded(from._internal_calls_succeeded());
  }
  if (from._internal_calls_failed() != 0) {
    _internal_set_calls_failed(from._internal_calls_failed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerData::CopyFrom(const ServerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerData::IsInitialized() const {
  return true;
}

void ServerData::InternalSwap(ServerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerData, calls_failed_)
      + sizeof(ServerData::calls_failed_)
      - PROTOBUF_FIELD_OFFSET(ServerData, trace_)>(
          reinterpret_cast<char*>(&trace_),
          reinterpret_cast<char*>(&other->trace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[11]);
}

// ===================================================================

class Socket::_Internal {
 public:
  static const ::grpc::channelz::v1::SocketRef& ref(const Socket* msg);
  static const ::grpc::channelz::v1::SocketData& data(const Socket* msg);
  static const ::grpc::channelz::v1::Address& local(const Socket* msg);
  static const ::grpc::channelz::v1::Address& remote(const Socket* msg);
  static const ::grpc::channelz::v1::Security& security(const Socket* msg);
};

const ::grpc::channelz::v1::SocketRef&
Socket::_Internal::ref(const Socket* msg) {
  return *msg->ref_;
}
const ::grpc::channelz::v1::SocketData&
Socket::_Internal::data(const Socket* msg) {
  return *msg->data_;
}
const ::grpc::channelz::v1::Address&
Socket::_Internal::local(const Socket* msg) {
  return *msg->local_;
}
const ::grpc::channelz::v1::Address&
Socket::_Internal::remote(const Socket* msg) {
  return *msg->remote_;
}
const ::grpc::channelz::v1::Security&
Socket::_Internal::security(const Socket* msg) {
  return *msg->security_;
}
Socket::Socket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Socket)
}
Socket::Socket(const Socket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remote_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_name().empty()) {
    remote_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ref()) {
    ref_ = new ::grpc::channelz::v1::SocketRef(*from.ref_);
  } else {
    ref_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::grpc::channelz::v1::SocketData(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_local()) {
    local_ = new ::grpc::channelz::v1::Address(*from.local_);
  } else {
    local_ = nullptr;
  }
  if (from._internal_has_remote()) {
    remote_ = new ::grpc::channelz::v1::Address(*from.remote_);
  } else {
    remote_ = nullptr;
  }
  if (from._internal_has_security()) {
    security_ = new ::grpc::channelz::v1::Security(*from.security_);
  } else {
    security_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Socket)
}

inline void Socket::SharedCtor() {
remote_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ref_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&security_) -
    reinterpret_cast<char*>(&ref_)) + sizeof(security_));
}

Socket::~Socket() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Socket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Socket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  remote_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ref_;
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete local_;
  if (this != internal_default_instance()) delete remote_;
  if (this != internal_default_instance()) delete security_;
}

void Socket::ArenaDtor(void* object) {
  Socket* _this = reinterpret_cast< Socket* >(object);
  (void)_this;
}
void Socket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Socket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Socket::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Socket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && ref_ != nullptr) {
    delete ref_;
  }
  ref_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && local_ != nullptr) {
    delete local_;
  }
  local_ = nullptr;
  if (GetArenaForAllocation() == nullptr && remote_ != nullptr) {
    delete remote_;
  }
  remote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Socket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.SocketRef ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.SocketData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.Address local = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.Address remote = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.Security security = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_security(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_remote_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.Socket.remote_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Socket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Socket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.SocketRef ref = 1;
  if (this->_internal_has_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ref(this), target, stream);
  }

  // .grpc.channelz.v1.SocketData data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // .grpc.channelz.v1.Address local = 3;
  if (this->_internal_has_local()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::local(this), target, stream);
  }

  // .grpc.channelz.v1.Address remote = 4;
  if (this->_internal_has_remote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::remote(this), target, stream);
  }

  // .grpc.channelz.v1.Security security = 5;
  if (this->_internal_has_security()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::security(this), target, stream);
  }

  // string remote_name = 6;
  if (!this->_internal_remote_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_name().data(), static_cast<int>(this->_internal_remote_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Socket.remote_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_remote_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Socket)
  return target;
}

size_t Socket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Socket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_name = 6;
  if (!this->_internal_remote_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_name());
  }

  // .grpc.channelz.v1.SocketRef ref = 1;
  if (this->_internal_has_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ref_);
  }

  // .grpc.channelz.v1.SocketData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .grpc.channelz.v1.Address local = 3;
  if (this->_internal_has_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_);
  }

  // .grpc.channelz.v1.Address remote = 4;
  if (this->_internal_has_remote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remote_);
  }

  // .grpc.channelz.v1.Security security = 5;
  if (this->_internal_has_security()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Socket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Socket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Socket::GetClassData() const { return &_class_data_; }

void Socket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Socket *>(to)->MergeFrom(
      static_cast<const Socket &>(from));
}


void Socket::MergeFrom(const Socket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Socket)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_remote_name().empty()) {
    _internal_set_remote_name(from._internal_remote_name());
  }
  if (from._internal_has_ref()) {
    _internal_mutable_ref()->::grpc::channelz::v1::SocketRef::MergeFrom(from._internal_ref());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::grpc::channelz::v1::SocketData::MergeFrom(from._internal_data());
  }
  if (from._internal_has_local()) {
    _internal_mutable_local()->::grpc::channelz::v1::Address::MergeFrom(from._internal_local());
  }
  if (from._internal_has_remote()) {
    _internal_mutable_remote()->::grpc::channelz::v1::Address::MergeFrom(from._internal_remote());
  }
  if (from._internal_has_security()) {
    _internal_mutable_security()->::grpc::channelz::v1::Security::MergeFrom(from._internal_security());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Socket::CopyFrom(const Socket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Socket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Socket::IsInitialized() const {
  return true;
}

void Socket::InternalSwap(Socket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remote_name_, GetArenaForAllocation(),
      &other->remote_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Socket, security_)
      + sizeof(Socket::security_)
      - PROTOBUF_FIELD_OFFSET(Socket, ref_)>(
          reinterpret_cast<char*>(&ref_),
          reinterpret_cast<char*>(&other->ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Socket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[12]);
}

// ===================================================================

class SocketData::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_local_stream_created_timestamp(const SocketData* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_remote_stream_created_timestamp(const SocketData* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_message_sent_timestamp(const SocketData* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_message_received_timestamp(const SocketData* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& local_flow_control_window(const SocketData* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& remote_flow_control_window(const SocketData* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SocketData::_Internal::last_local_stream_created_timestamp(const SocketData* msg) {
  return *msg->last_local_stream_created_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SocketData::_Internal::last_remote_stream_created_timestamp(const SocketData* msg) {
  return *msg->last_remote_stream_created_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SocketData::_Internal::last_message_sent_timestamp(const SocketData* msg) {
  return *msg->last_message_sent_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SocketData::_Internal::last_message_received_timestamp(const SocketData* msg) {
  return *msg->last_message_received_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
SocketData::_Internal::local_flow_control_window(const SocketData* msg) {
  return *msg->local_flow_control_window_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
SocketData::_Internal::remote_flow_control_window(const SocketData* msg) {
  return *msg->remote_flow_control_window_;
}
void SocketData::clear_last_local_stream_created_timestamp() {
  if (GetArenaForAllocation() == nullptr && last_local_stream_created_timestamp_ != nullptr) {
    delete last_local_stream_created_timestamp_;
  }
  last_local_stream_created_timestamp_ = nullptr;
}
void SocketData::clear_last_remote_stream_created_timestamp() {
  if (GetArenaForAllocation() == nullptr && last_remote_stream_created_timestamp_ != nullptr) {
    delete last_remote_stream_created_timestamp_;
  }
  last_remote_stream_created_timestamp_ = nullptr;
}
void SocketData::clear_last_message_sent_timestamp() {
  if (GetArenaForAllocation() == nullptr && last_message_sent_timestamp_ != nullptr) {
    delete last_message_sent_timestamp_;
  }
  last_message_sent_timestamp_ = nullptr;
}
void SocketData::clear_last_message_received_timestamp() {
  if (GetArenaForAllocation() == nullptr && last_message_received_timestamp_ != nullptr) {
    delete last_message_received_timestamp_;
  }
  last_message_received_timestamp_ = nullptr;
}
void SocketData::clear_local_flow_control_window() {
  if (GetArenaForAllocation() == nullptr && local_flow_control_window_ != nullptr) {
    delete local_flow_control_window_;
  }
  local_flow_control_window_ = nullptr;
}
void SocketData::clear_remote_flow_control_window() {
  if (GetArenaForAllocation() == nullptr && remote_flow_control_window_ != nullptr) {
    delete remote_flow_control_window_;
  }
  remote_flow_control_window_ = nullptr;
}
SocketData::SocketData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SocketData)
}
SocketData::SocketData(const SocketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      option_(from.option_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_local_stream_created_timestamp()) {
    last_local_stream_created_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_local_stream_created_timestamp_);
  } else {
    last_local_stream_created_timestamp_ = nullptr;
  }
  if (from._internal_has_last_remote_stream_created_timestamp()) {
    last_remote_stream_created_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_remote_stream_created_timestamp_);
  } else {
    last_remote_stream_created_timestamp_ = nullptr;
  }
  if (from._internal_has_last_message_sent_timestamp()) {
    last_message_sent_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_message_sent_timestamp_);
  } else {
    last_message_sent_timestamp_ = nullptr;
  }
  if (from._internal_has_last_message_received_timestamp()) {
    last_message_received_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_message_received_timestamp_);
  } else {
    last_message_received_timestamp_ = nullptr;
  }
  if (from._internal_has_local_flow_control_window()) {
    local_flow_control_window_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.local_flow_control_window_);
  } else {
    local_flow_control_window_ = nullptr;
  }
  if (from._internal_has_remote_flow_control_window()) {
    remote_flow_control_window_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.remote_flow_control_window_);
  } else {
    remote_flow_control_window_ = nullptr;
  }
  ::memcpy(&streams_started_, &from.streams_started_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_alives_sent_) -
    reinterpret_cast<char*>(&streams_started_)) + sizeof(keep_alives_sent_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketData)
}

inline void SocketData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_local_stream_created_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&keep_alives_sent_) -
    reinterpret_cast<char*>(&last_local_stream_created_timestamp_)) + sizeof(keep_alives_sent_));
}

SocketData::~SocketData() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SocketData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete last_local_stream_created_timestamp_;
  if (this != internal_default_instance()) delete last_remote_stream_created_timestamp_;
  if (this != internal_default_instance()) delete last_message_sent_timestamp_;
  if (this != internal_default_instance()) delete last_message_received_timestamp_;
  if (this != internal_default_instance()) delete local_flow_control_window_;
  if (this != internal_default_instance()) delete remote_flow_control_window_;
}

void SocketData::ArenaDtor(void* object) {
  SocketData* _this = reinterpret_cast< SocketData* >(object);
  (void)_this;
}
void SocketData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SocketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SocketData::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  option_.Clear();
  if (GetArenaForAllocation() == nullptr && last_local_stream_created_timestamp_ != nullptr) {
    delete last_local_stream_created_timestamp_;
  }
  last_local_stream_created_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_remote_stream_created_timestamp_ != nullptr) {
    delete last_remote_stream_created_timestamp_;
  }
  last_remote_stream_created_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_message_sent_timestamp_ != nullptr) {
    delete last_message_sent_timestamp_;
  }
  last_message_sent_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_message_received_timestamp_ != nullptr) {
    delete last_message_received_timestamp_;
  }
  last_message_received_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && local_flow_control_window_ != nullptr) {
    delete local_flow_control_window_;
  }
  local_flow_control_window_ = nullptr;
  if (GetArenaForAllocation() == nullptr && remote_flow_control_window_ != nullptr) {
    delete remote_flow_control_window_;
  }
  remote_flow_control_window_ = nullptr;
  ::memset(&streams_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_alives_sent_) -
      reinterpret_cast<char*>(&streams_started_)) + sizeof(keep_alives_sent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 streams_started = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          streams_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 streams_succeeded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          streams_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 streams_failed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          streams_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 messages_sent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          messages_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 messages_received = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          messages_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 keep_alives_sent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          keep_alives_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_local_stream_created_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_remote_stream_created_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_message_sent_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_message_sent_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_message_received_timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_message_received_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value local_flow_control_window = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_flow_control_window(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value remote_flow_control_window = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_flow_control_window(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.SocketOption option = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_option(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 streams_started = 1;
  if (this->_internal_streams_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_streams_started(), target);
  }

  // int64 streams_succeeded = 2;
  if (this->_internal_streams_succeeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_streams_succeeded(), target);
  }

  // int64 streams_failed = 3;
  if (this->_internal_streams_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_streams_failed(), target);
  }

  // int64 messages_sent = 4;
  if (this->_internal_messages_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_messages_sent(), target);
  }

  // int64 messages_received = 5;
  if (this->_internal_messages_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_messages_received(), target);
  }

  // int64 keep_alives_sent = 6;
  if (this->_internal_keep_alives_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_keep_alives_sent(), target);
  }

  // .google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
  if (this->_internal_has_last_local_stream_created_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::last_local_stream_created_timestamp(this), target, stream);
  }

  // .google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
  if (this->_internal_has_last_remote_stream_created_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::last_remote_stream_created_timestamp(this), target, stream);
  }

  // .google.protobuf.Timestamp last_message_sent_timestamp = 9;
  if (this->_internal_has_last_message_sent_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::last_message_sent_timestamp(this), target, stream);
  }

  // .google.protobuf.Timestamp last_message_received_timestamp = 10;
  if (this->_internal_has_last_message_received_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::last_message_received_timestamp(this), target, stream);
  }

  // .google.protobuf.Int64Value local_flow_control_window = 11;
  if (this->_internal_has_local_flow_control_window()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::local_flow_control_window(this), target, stream);
  }

  // .google.protobuf.Int64Value remote_flow_control_window = 12;
  if (this->_internal_has_remote_flow_control_window()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::remote_flow_control_window(this), target, stream);
  }

  // repeated .grpc.channelz.v1.SocketOption option = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_option_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_option(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketData)
  return target;
}

size_t SocketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.SocketOption option = 13;
  total_size += 1UL * this->_internal_option_size();
  for (const auto& msg : this->option_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
  if (this->_internal_has_last_local_stream_created_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_local_stream_created_timestamp_);
  }

  // .google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
  if (this->_internal_has_last_remote_stream_created_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_remote_stream_created_timestamp_);
  }

  // .google.protobuf.Timestamp last_message_sent_timestamp = 9;
  if (this->_internal_has_last_message_sent_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_message_sent_timestamp_);
  }

  // .google.protobuf.Timestamp last_message_received_timestamp = 10;
  if (this->_internal_has_last_message_received_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_message_received_timestamp_);
  }

  // .google.protobuf.Int64Value local_flow_control_window = 11;
  if (this->_internal_has_local_flow_control_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_flow_control_window_);
  }

  // .google.protobuf.Int64Value remote_flow_control_window = 12;
  if (this->_internal_has_remote_flow_control_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remote_flow_control_window_);
  }

  // int64 streams_started = 1;
  if (this->_internal_streams_started() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_streams_started());
  }

  // int64 streams_succeeded = 2;
  if (this->_internal_streams_succeeded() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_streams_succeeded());
  }

  // int64 streams_failed = 3;
  if (this->_internal_streams_failed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_streams_failed());
  }

  // int64 messages_sent = 4;
  if (this->_internal_messages_sent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_messages_sent());
  }

  // int64 messages_received = 5;
  if (this->_internal_messages_received() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_messages_received());
  }

  // int64 keep_alives_sent = 6;
  if (this->_internal_keep_alives_sent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_keep_alives_sent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SocketData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketData::GetClassData() const { return &_class_data_; }

void SocketData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SocketData *>(to)->MergeFrom(
      static_cast<const SocketData &>(from));
}


void SocketData::MergeFrom(const SocketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  option_.MergeFrom(from.option_);
  if (from._internal_has_last_local_stream_created_timestamp()) {
    _internal_mutable_last_local_stream_created_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_local_stream_created_timestamp());
  }
  if (from._internal_has_last_remote_stream_created_timestamp()) {
    _internal_mutable_last_remote_stream_created_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_remote_stream_created_timestamp());
  }
  if (from._internal_has_last_message_sent_timestamp()) {
    _internal_mutable_last_message_sent_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_message_sent_timestamp());
  }
  if (from._internal_has_last_message_received_timestamp()) {
    _internal_mutable_last_message_received_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_message_received_timestamp());
  }
  if (from._internal_has_local_flow_control_window()) {
    _internal_mutable_local_flow_control_window()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_local_flow_control_window());
  }
  if (from._internal_has_remote_flow_control_window()) {
    _internal_mutable_remote_flow_control_window()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_remote_flow_control_window());
  }
  if (from._internal_streams_started() != 0) {
    _internal_set_streams_started(from._internal_streams_started());
  }
  if (from._internal_streams_succeeded() != 0) {
    _internal_set_streams_succeeded(from._internal_streams_succeeded());
  }
  if (from._internal_streams_failed() != 0) {
    _internal_set_streams_failed(from._internal_streams_failed());
  }
  if (from._internal_messages_sent() != 0) {
    _internal_set_messages_sent(from._internal_messages_sent());
  }
  if (from._internal_messages_received() != 0) {
    _internal_set_messages_received(from._internal_messages_received());
  }
  if (from._internal_keep_alives_sent() != 0) {
    _internal_set_keep_alives_sent(from._internal_keep_alives_sent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketData::CopyFrom(const SocketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketData::IsInitialized() const {
  return true;
}

void SocketData::InternalSwap(SocketData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  option_.InternalSwap(&other->option_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocketData, keep_alives_sent_)
      + sizeof(SocketData::keep_alives_sent_)
      - PROTOBUF_FIELD_OFFSET(SocketData, last_local_stream_created_timestamp_)>(
          reinterpret_cast<char*>(&last_local_stream_created_timestamp_),
          reinterpret_cast<char*>(&other->last_local_stream_created_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[13]);
}

// ===================================================================

class Address_TcpIpAddress::_Internal {
 public:
};

Address_TcpIpAddress::Address_TcpIpAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Address.TcpIpAddress)
}
Address_TcpIpAddress::Address_TcpIpAddress(const Address_TcpIpAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_address(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Address.TcpIpAddress)
}

inline void Address_TcpIpAddress::SharedCtor() {
ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_ = 0;
}

Address_TcpIpAddress::~Address_TcpIpAddress() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Address.TcpIpAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Address_TcpIpAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Address_TcpIpAddress::ArenaDtor(void* object) {
  Address_TcpIpAddress* _this = reinterpret_cast< Address_TcpIpAddress* >(object);
  (void)_this;
}
void Address_TcpIpAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Address_TcpIpAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Address_TcpIpAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Address.TcpIpAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address_TcpIpAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address_TcpIpAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Address.TcpIpAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Address.TcpIpAddress)
  return target;
}

size_t Address_TcpIpAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Address.TcpIpAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip_address());
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address_TcpIpAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Address_TcpIpAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address_TcpIpAddress::GetClassData() const { return &_class_data_; }

void Address_TcpIpAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Address_TcpIpAddress *>(to)->MergeFrom(
      static_cast<const Address_TcpIpAddress &>(from));
}


void Address_TcpIpAddress::MergeFrom(const Address_TcpIpAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Address.TcpIpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_address().empty()) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address_TcpIpAddress::CopyFrom(const Address_TcpIpAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Address.TcpIpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address_TcpIpAddress::IsInitialized() const {
  return true;
}

void Address_TcpIpAddress::InternalSwap(Address_TcpIpAddress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_address_, GetArenaForAllocation(),
      &other->ip_address_, other->GetArenaForAllocation()
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address_TcpIpAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[14]);
}

// ===================================================================

class Address_UdsAddress::_Internal {
 public:
};

Address_UdsAddress::Address_UdsAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Address.UdsAddress)
}
Address_UdsAddress::Address_UdsAddress(const Address_UdsAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Address.UdsAddress)
}

inline void Address_UdsAddress::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Address_UdsAddress::~Address_UdsAddress() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Address.UdsAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Address_UdsAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Address_UdsAddress::ArenaDtor(void* object) {
  Address_UdsAddress* _this = reinterpret_cast< Address_UdsAddress* >(object);
  (void)_this;
}
void Address_UdsAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Address_UdsAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Address_UdsAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Address.UdsAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address_UdsAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.Address.UdsAddress.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address_UdsAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Address.UdsAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Address.UdsAddress.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Address.UdsAddress)
  return target;
}

size_t Address_UdsAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Address.UdsAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address_UdsAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Address_UdsAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address_UdsAddress::GetClassData() const { return &_class_data_; }

void Address_UdsAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Address_UdsAddress *>(to)->MergeFrom(
      static_cast<const Address_UdsAddress &>(from));
}


void Address_UdsAddress::MergeFrom(const Address_UdsAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Address.UdsAddress)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _internal_set_filename(from._internal_filename());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address_UdsAddress::CopyFrom(const Address_UdsAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Address.UdsAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address_UdsAddress::IsInitialized() const {
  return true;
}

void Address_UdsAddress::InternalSwap(Address_UdsAddress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, GetArenaForAllocation(),
      &other->filename_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Address_UdsAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[15]);
}

// ===================================================================

class Address_OtherAddress::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& value(const Address_OtherAddress* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Address_OtherAddress::_Internal::value(const Address_OtherAddress* msg) {
  return *msg->value_;
}
void Address_OtherAddress::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
Address_OtherAddress::Address_OtherAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Address.OtherAddress)
}
Address_OtherAddress::Address_OtherAddress(const Address_OtherAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new PROTOBUF_NAMESPACE_ID::Any(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Address.OtherAddress)
}

inline void Address_OtherAddress::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

Address_OtherAddress::~Address_OtherAddress() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Address.OtherAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Address_OtherAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Address_OtherAddress::ArenaDtor(void* object) {
  Address_OtherAddress* _this = reinterpret_cast< Address_OtherAddress* >(object);
  (void)_this;
}
void Address_OtherAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Address_OtherAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Address_OtherAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Address.OtherAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address_OtherAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.Address.OtherAddress.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address_OtherAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Address.OtherAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Address.OtherAddress.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Address.OtherAddress)
  return target;
}

size_t Address_OtherAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Address.OtherAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address_OtherAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Address_OtherAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address_OtherAddress::GetClassData() const { return &_class_data_; }

void Address_OtherAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Address_OtherAddress *>(to)->MergeFrom(
      static_cast<const Address_OtherAddress &>(from));
}


void Address_OtherAddress::MergeFrom(const Address_OtherAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Address.OtherAddress)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address_OtherAddress::CopyFrom(const Address_OtherAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Address.OtherAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address_OtherAddress::IsInitialized() const {
  return true;
}

void Address_OtherAddress::InternalSwap(Address_OtherAddress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address_OtherAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[16]);
}

// ===================================================================

class Address::_Internal {
 public:
  static const ::grpc::channelz::v1::Address_TcpIpAddress& tcpip_address(const Address* msg);
  static const ::grpc::channelz::v1::Address_UdsAddress& uds_address(const Address* msg);
  static const ::grpc::channelz::v1::Address_OtherAddress& other_address(const Address* msg);
};

const ::grpc::channelz::v1::Address_TcpIpAddress&
Address::_Internal::tcpip_address(const Address* msg) {
  return *msg->address_.tcpip_address_;
}
const ::grpc::channelz::v1::Address_UdsAddress&
Address::_Internal::uds_address(const Address* msg) {
  return *msg->address_.uds_address_;
}
const ::grpc::channelz::v1::Address_OtherAddress&
Address::_Internal::other_address(const Address* msg) {
  return *msg->address_.other_address_;
}
void Address::set_allocated_tcpip_address(::grpc::channelz::v1::Address_TcpIpAddress* tcpip_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_address();
  if (tcpip_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::Address_TcpIpAddress>::GetOwningArena(tcpip_address);
    if (message_arena != submessage_arena) {
      tcpip_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcpip_address, submessage_arena);
    }
    set_has_tcpip_address();
    address_.tcpip_address_ = tcpip_address;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.tcpip_address)
}
void Address::set_allocated_uds_address(::grpc::channelz::v1::Address_UdsAddress* uds_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_address();
  if (uds_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::Address_UdsAddress>::GetOwningArena(uds_address);
    if (message_arena != submessage_arena) {
      uds_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uds_address, submessage_arena);
    }
    set_has_uds_address();
    address_.uds_address_ = uds_address;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.uds_address)
}
void Address::set_allocated_other_address(::grpc::channelz::v1::Address_OtherAddress* other_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_address();
  if (other_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::Address_OtherAddress>::GetOwningArena(other_address);
    if (message_arena != submessage_arena) {
      other_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_address, submessage_arena);
    }
    set_has_other_address();
    address_.other_address_ = other_address;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.other_address)
}
Address::Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_address();
  switch (from.address_case()) {
    case kTcpipAddress: {
      _internal_mutable_tcpip_address()->::grpc::channelz::v1::Address_TcpIpAddress::MergeFrom(from._internal_tcpip_address());
      break;
    }
    case kUdsAddress: {
      _internal_mutable_uds_address()->::grpc::channelz::v1::Address_UdsAddress::MergeFrom(from._internal_uds_address());
      break;
    }
    case kOtherAddress: {
      _internal_mutable_other_address()->::grpc::channelz::v1::Address_OtherAddress::MergeFrom(from._internal_other_address());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Address)
}

inline void Address::SharedCtor() {
clear_has_address();
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Address)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_address()) {
    clear_address();
  }
}

void Address::ArenaDtor(void* object) {
  Address* _this = reinterpret_cast< Address* >(object);
  (void)_this;
}
void Address::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Address::clear_address() {
// @@protoc_insertion_point(one_of_clear_start:grpc.channelz.v1.Address)
  switch (address_case()) {
    case kTcpipAddress: {
      if (GetArenaForAllocation() == nullptr) {
        delete address_.tcpip_address_;
      }
      break;
    }
    case kUdsAddress: {
      if (GetArenaForAllocation() == nullptr) {
        delete address_.uds_address_;
      }
      break;
    }
    case kOtherAddress: {
      if (GetArenaForAllocation() == nullptr) {
        delete address_.other_address_;
      }
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADDRESS_NOT_SET;
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_address();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.Address.TcpIpAddress tcpip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcpip_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.Address.UdsAddress uds_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uds_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.Address.OtherAddress other_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Address.TcpIpAddress tcpip_address = 1;
  if (_internal_has_tcpip_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tcpip_address(this), target, stream);
  }

  // .grpc.channelz.v1.Address.UdsAddress uds_address = 2;
  if (_internal_has_uds_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uds_address(this), target, stream);
  }

  // .grpc.channelz.v1.Address.OtherAddress other_address = 3;
  if (_internal_has_other_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::other_address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (address_case()) {
    // .grpc.channelz.v1.Address.TcpIpAddress tcpip_address = 1;
    case kTcpipAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_.tcpip_address_);
      break;
    }
    // .grpc.channelz.v1.Address.UdsAddress uds_address = 2;
    case kUdsAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_.uds_address_);
      break;
    }
    // .grpc.channelz.v1.Address.OtherAddress other_address = 3;
    case kOtherAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_.other_address_);
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address::GetClassData() const { return &_class_data_; }

void Address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Address *>(to)->MergeFrom(
      static_cast<const Address &>(from));
}


void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Address)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.address_case()) {
    case kTcpipAddress: {
      _internal_mutable_tcpip_address()->::grpc::channelz::v1::Address_TcpIpAddress::MergeFrom(from._internal_tcpip_address());
      break;
    }
    case kUdsAddress: {
      _internal_mutable_uds_address()->::grpc::channelz::v1::Address_UdsAddress::MergeFrom(from._internal_uds_address());
      break;
    }
    case kOtherAddress: {
      _internal_mutable_other_address()->::grpc::channelz::v1::Address_OtherAddress::MergeFrom(from._internal_other_address());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(address_, other->address_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[17]);
}

// ===================================================================

class Security_Tls::_Internal {
 public:
};

Security_Tls::Security_Tls(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Security.Tls)
}
Security_Tls::Security_Tls(const Security_Tls& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  local_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_certificate().empty()) {
    local_certificate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_local_certificate(), 
      GetArenaForAllocation());
  }
  remote_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_certificate().empty()) {
    remote_certificate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_certificate(), 
      GetArenaForAllocation());
  }
  clear_has_cipher_suite();
  switch (from.cipher_suite_case()) {
    case kStandardName: {
      _internal_set_standard_name(from._internal_standard_name());
      break;
    }
    case kOtherName: {
      _internal_set_other_name(from._internal_other_name());
      break;
    }
    case CIPHER_SUITE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Security.Tls)
}

inline void Security_Tls::SharedCtor() {
local_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remote_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clear_has_cipher_suite();
}

Security_Tls::~Security_Tls() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Security.Tls)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Security_Tls::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  local_certificate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_certificate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_cipher_suite()) {
    clear_cipher_suite();
  }
}

void Security_Tls::ArenaDtor(void* object) {
  Security_Tls* _this = reinterpret_cast< Security_Tls* >(object);
  (void)_this;
}
void Security_Tls::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Security_Tls::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Security_Tls::clear_cipher_suite() {
// @@protoc_insertion_point(one_of_clear_start:grpc.channelz.v1.Security.Tls)
  switch (cipher_suite_case()) {
    case kStandardName: {
      cipher_suite_.standard_name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kOtherName: {
      cipher_suite_.other_name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case CIPHER_SUITE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CIPHER_SUITE_NOT_SET;
}


void Security_Tls::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Security.Tls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_certificate_.ClearToEmpty();
  remote_certificate_.ClearToEmpty();
  clear_cipher_suite();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Security_Tls::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string standard_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_standard_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.Security.Tls.standard_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string other_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_other_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.Security.Tls.other_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes local_certificate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_local_certificate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes remote_certificate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_remote_certificate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Security_Tls::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Security.Tls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string standard_name = 1;
  if (_internal_has_standard_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_standard_name().data(), static_cast<int>(this->_internal_standard_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Security.Tls.standard_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_standard_name(), target);
  }

  // string other_name = 2;
  if (_internal_has_other_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_other_name().data(), static_cast<int>(this->_internal_other_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Security.Tls.other_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_other_name(), target);
  }

  // bytes local_certificate = 3;
  if (!this->_internal_local_certificate().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_local_certificate(), target);
  }

  // bytes remote_certificate = 4;
  if (!this->_internal_remote_certificate().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_remote_certificate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Security.Tls)
  return target;
}

size_t Security_Tls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Security.Tls)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes local_certificate = 3;
  if (!this->_internal_local_certificate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_local_certificate());
  }

  // bytes remote_certificate = 4;
  if (!this->_internal_remote_certificate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_remote_certificate());
  }

  switch (cipher_suite_case()) {
    // string standard_name = 1;
    case kStandardName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_standard_name());
      break;
    }
    // string other_name = 2;
    case kOtherName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_other_name());
      break;
    }
    case CIPHER_SUITE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Security_Tls::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Security_Tls::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Security_Tls::GetClassData() const { return &_class_data_; }

void Security_Tls::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Security_Tls *>(to)->MergeFrom(
      static_cast<const Security_Tls &>(from));
}


void Security_Tls::MergeFrom(const Security_Tls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Security.Tls)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_local_certificate().empty()) {
    _internal_set_local_certificate(from._internal_local_certificate());
  }
  if (!from._internal_remote_certificate().empty()) {
    _internal_set_remote_certificate(from._internal_remote_certificate());
  }
  switch (from.cipher_suite_case()) {
    case kStandardName: {
      _internal_set_standard_name(from._internal_standard_name());
      break;
    }
    case kOtherName: {
      _internal_set_other_name(from._internal_other_name());
      break;
    }
    case CIPHER_SUITE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Security_Tls::CopyFrom(const Security_Tls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Security.Tls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security_Tls::IsInitialized() const {
  return true;
}

void Security_Tls::InternalSwap(Security_Tls* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &local_certificate_, GetArenaForAllocation(),
      &other->local_certificate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remote_certificate_, GetArenaForAllocation(),
      &other->remote_certificate_, other->GetArenaForAllocation()
  );
  swap(cipher_suite_, other->cipher_suite_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Security_Tls::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[18]);
}

// ===================================================================

class Security_OtherSecurity::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& value(const Security_OtherSecurity* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Security_OtherSecurity::_Internal::value(const Security_OtherSecurity* msg) {
  return *msg->value_;
}
void Security_OtherSecurity::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
Security_OtherSecurity::Security_OtherSecurity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Security.OtherSecurity)
}
Security_OtherSecurity::Security_OtherSecurity(const Security_OtherSecurity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new PROTOBUF_NAMESPACE_ID::Any(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Security.OtherSecurity)
}

inline void Security_OtherSecurity::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

Security_OtherSecurity::~Security_OtherSecurity() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Security.OtherSecurity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Security_OtherSecurity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Security_OtherSecurity::ArenaDtor(void* object) {
  Security_OtherSecurity* _this = reinterpret_cast< Security_OtherSecurity* >(object);
  (void)_this;
}
void Security_OtherSecurity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Security_OtherSecurity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Security_OtherSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Security.OtherSecurity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Security_OtherSecurity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.Security.OtherSecurity.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Security_OtherSecurity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Security.OtherSecurity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Security.OtherSecurity.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Security.OtherSecurity)
  return target;
}

size_t Security_OtherSecurity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Security.OtherSecurity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Security_OtherSecurity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Security_OtherSecurity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Security_OtherSecurity::GetClassData() const { return &_class_data_; }

void Security_OtherSecurity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Security_OtherSecurity *>(to)->MergeFrom(
      static_cast<const Security_OtherSecurity &>(from));
}


void Security_OtherSecurity::MergeFrom(const Security_OtherSecurity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Security.OtherSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Security_OtherSecurity::CopyFrom(const Security_OtherSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Security.OtherSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security_OtherSecurity::IsInitialized() const {
  return true;
}

void Security_OtherSecurity::InternalSwap(Security_OtherSecurity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Security_OtherSecurity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[19]);
}

// ===================================================================

class Security::_Internal {
 public:
  static const ::grpc::channelz::v1::Security_Tls& tls(const Security* msg);
  static const ::grpc::channelz::v1::Security_OtherSecurity& other(const Security* msg);
};

const ::grpc::channelz::v1::Security_Tls&
Security::_Internal::tls(const Security* msg) {
  return *msg->model_.tls_;
}
const ::grpc::channelz::v1::Security_OtherSecurity&
Security::_Internal::other(const Security* msg) {
  return *msg->model_.other_;
}
void Security::set_allocated_tls(::grpc::channelz::v1::Security_Tls* tls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_model();
  if (tls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::Security_Tls>::GetOwningArena(tls);
    if (message_arena != submessage_arena) {
      tls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tls, submessage_arena);
    }
    set_has_tls();
    model_.tls_ = tls;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Security.tls)
}
void Security::set_allocated_other(::grpc::channelz::v1::Security_OtherSecurity* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_model();
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::Security_OtherSecurity>::GetOwningArena(other);
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    set_has_other();
    model_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Security.other)
}
Security::Security(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Security)
}
Security::Security(const Security& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_model();
  switch (from.model_case()) {
    case kTls: {
      _internal_mutable_tls()->::grpc::channelz::v1::Security_Tls::MergeFrom(from._internal_tls());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::grpc::channelz::v1::Security_OtherSecurity::MergeFrom(from._internal_other());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Security)
}

inline void Security::SharedCtor() {
clear_has_model();
}

Security::~Security() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Security)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Security::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_model()) {
    clear_model();
  }
}

void Security::ArenaDtor(void* object) {
  Security* _this = reinterpret_cast< Security* >(object);
  (void)_this;
}
void Security::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Security::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Security::clear_model() {
// @@protoc_insertion_point(one_of_clear_start:grpc.channelz.v1.Security)
  switch (model_case()) {
    case kTls: {
      if (GetArenaForAllocation() == nullptr) {
        delete model_.tls_;
      }
      break;
    }
    case kOther: {
      if (GetArenaForAllocation() == nullptr) {
        delete model_.other_;
      }
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODEL_NOT_SET;
}


void Security::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Security)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_model();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Security::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.Security.Tls tls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.channelz.v1.Security.OtherSecurity other = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_other(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Security::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Security)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Security.Tls tls = 1;
  if (_internal_has_tls()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tls(this), target, stream);
  }

  // .grpc.channelz.v1.Security.OtherSecurity other = 2;
  if (_internal_has_other()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::other(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Security)
  return target;
}

size_t Security::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Security)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (model_case()) {
    // .grpc.channelz.v1.Security.Tls tls = 1;
    case kTls: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.tls_);
      break;
    }
    // .grpc.channelz.v1.Security.OtherSecurity other = 2;
    case kOther: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.other_);
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Security::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Security::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Security::GetClassData() const { return &_class_data_; }

void Security::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Security *>(to)->MergeFrom(
      static_cast<const Security &>(from));
}


void Security::MergeFrom(const Security& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Security)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.model_case()) {
    case kTls: {
      _internal_mutable_tls()->::grpc::channelz::v1::Security_Tls::MergeFrom(from._internal_tls());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::grpc::channelz::v1::Security_OtherSecurity::MergeFrom(from._internal_other());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Security::CopyFrom(const Security& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Security)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security::IsInitialized() const {
  return true;
}

void Security::InternalSwap(Security* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(model_, other->model_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Security::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[20]);
}

// ===================================================================

class SocketOption::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& additional(const SocketOption* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
SocketOption::_Internal::additional(const SocketOption* msg) {
  return *msg->additional_;
}
void SocketOption::clear_additional() {
  if (GetArenaForAllocation() == nullptr && additional_ != nullptr) {
    delete additional_;
  }
  additional_ = nullptr;
}
SocketOption::SocketOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SocketOption)
}
SocketOption::SocketOption(const SocketOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_additional()) {
    additional_ = new PROTOBUF_NAMESPACE_ID::Any(*from.additional_);
  } else {
    additional_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketOption)
}

inline void SocketOption::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
additional_ = nullptr;
}

SocketOption::~SocketOption() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketOption)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SocketOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete additional_;
}

void SocketOption::ArenaDtor(void* object) {
  SocketOption* _this = reinterpret_cast< SocketOption* >(object);
  (void)_this;
}
void SocketOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SocketOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SocketOption::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && additional_ != nullptr) {
    delete additional_;
  }
  additional_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.SocketOption.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.channelz.v1.SocketOption.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any additional = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_additional(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SocketOption.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SocketOption.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // .google.protobuf.Any additional = 3;
  if (this->_internal_has_additional()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::additional(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketOption)
  return target;
}

size_t SocketOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .google.protobuf.Any additional = 3;
  if (this->_internal_has_additional()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *additional_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SocketOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketOption::GetClassData() const { return &_class_data_; }

void SocketOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SocketOption *>(to)->MergeFrom(
      static_cast<const SocketOption &>(from));
}


void SocketOption::MergeFrom(const SocketOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketOption)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_additional()) {
    _internal_mutable_additional()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_additional());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketOption::CopyFrom(const SocketOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOption::IsInitialized() const {
  return true;
}

void SocketOption::InternalSwap(SocketOption* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  swap(additional_, other->additional_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketOption::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[21]);
}

// ===================================================================

class SocketOptionTimeout::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const SocketOptionTimeout* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
SocketOptionTimeout::_Internal::duration(const SocketOptionTimeout* msg) {
  return *msg->duration_;
}
void SocketOptionTimeout::clear_duration() {
  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
SocketOptionTimeout::SocketOptionTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SocketOptionTimeout)
}
SocketOptionTimeout::SocketOptionTimeout(const SocketOptionTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketOptionTimeout)
}

inline void SocketOptionTimeout::SharedCtor() {
duration_ = nullptr;
}

SocketOptionTimeout::~SocketOptionTimeout() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketOptionTimeout)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SocketOptionTimeout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete duration_;
}

void SocketOptionTimeout::ArenaDtor(void* object) {
  SocketOptionTimeout* _this = reinterpret_cast< SocketOptionTimeout* >(object);
  (void)_this;
}
void SocketOptionTimeout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SocketOptionTimeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SocketOptionTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketOptionTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketOptionTimeout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketOptionTimeout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketOptionTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->_internal_has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::duration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketOptionTimeout)
  return target;
}

size_t SocketOptionTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketOptionTimeout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketOptionTimeout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SocketOptionTimeout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketOptionTimeout::GetClassData() const { return &_class_data_; }

void SocketOptionTimeout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SocketOptionTimeout *>(to)->MergeFrom(
      static_cast<const SocketOptionTimeout &>(from));
}


void SocketOptionTimeout::MergeFrom(const SocketOptionTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketOptionTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration()) {
    _internal_mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketOptionTimeout::CopyFrom(const SocketOptionTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketOptionTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOptionTimeout::IsInitialized() const {
  return true;
}

void SocketOptionTimeout::InternalSwap(SocketOptionTimeout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketOptionTimeout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[22]);
}

// ===================================================================

class SocketOptionLinger::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const SocketOptionLinger* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
SocketOptionLinger::_Internal::duration(const SocketOptionLinger* msg) {
  return *msg->duration_;
}
void SocketOptionLinger::clear_duration() {
  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
SocketOptionLinger::SocketOptionLinger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SocketOptionLinger)
}
SocketOptionLinger::SocketOptionLinger(const SocketOptionLinger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketOptionLinger)
}

inline void SocketOptionLinger::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(active_));
}

SocketOptionLinger::~SocketOptionLinger() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketOptionLinger)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SocketOptionLinger::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete duration_;
}

void SocketOptionLinger::ArenaDtor(void* object) {
  SocketOptionLinger* _this = reinterpret_cast< SocketOptionLinger* >(object);
  (void)_this;
}
void SocketOptionLinger::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SocketOptionLinger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SocketOptionLinger::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketOptionLinger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  active_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketOptionLinger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketOptionLinger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketOptionLinger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  // .google.protobuf.Duration duration = 2;
  if (this->_internal_has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::duration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketOptionLinger)
  return target;
}

size_t SocketOptionLinger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketOptionLinger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 2;
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // bool active = 1;
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketOptionLinger::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SocketOptionLinger::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketOptionLinger::GetClassData() const { return &_class_data_; }

void SocketOptionLinger::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SocketOptionLinger *>(to)->MergeFrom(
      static_cast<const SocketOptionLinger &>(from));
}


void SocketOptionLinger::MergeFrom(const SocketOptionLinger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketOptionLinger)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration()) {
    _internal_mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
  if (from._internal_active() != 0) {
    _internal_set_active(from._internal_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketOptionLinger::CopyFrom(const SocketOptionLinger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketOptionLinger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOptionLinger::IsInitialized() const {
  return true;
}

void SocketOptionLinger::InternalSwap(SocketOptionLinger* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocketOptionLinger, active_)
      + sizeof(SocketOptionLinger::active_)
      - PROTOBUF_FIELD_OFFSET(SocketOptionLinger, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketOptionLinger::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[23]);
}

// ===================================================================

class SocketOptionTcpInfo::_Internal {
 public:
};

SocketOptionTcpInfo::SocketOptionTcpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SocketOptionTcpInfo)
}
SocketOptionTcpInfo::SocketOptionTcpInfo(const SocketOptionTcpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tcpi_state_, &from.tcpi_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcpi_reordering_) -
    reinterpret_cast<char*>(&tcpi_state_)) + sizeof(tcpi_reordering_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketOptionTcpInfo)
}

inline void SocketOptionTcpInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tcpi_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tcpi_reordering_) -
    reinterpret_cast<char*>(&tcpi_state_)) + sizeof(tcpi_reordering_));
}

SocketOptionTcpInfo::~SocketOptionTcpInfo() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketOptionTcpInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SocketOptionTcpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SocketOptionTcpInfo::ArenaDtor(void* object) {
  SocketOptionTcpInfo* _this = reinterpret_cast< SocketOptionTcpInfo* >(object);
  (void)_this;
}
void SocketOptionTcpInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SocketOptionTcpInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SocketOptionTcpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketOptionTcpInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tcpi_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcpi_reordering_) -
      reinterpret_cast<char*>(&tcpi_state_)) + sizeof(tcpi_reordering_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketOptionTcpInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 tcpi_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tcpi_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_ca_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tcpi_ca_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_retransmits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tcpi_retransmits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_probes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tcpi_probes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_backoff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tcpi_backoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tcpi_options_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_snd_wscale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tcpi_snd_wscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_rcv_wscale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tcpi_rcv_wscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_rto = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tcpi_rto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_ato = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          tcpi_ato_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_snd_mss = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          tcpi_snd_mss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_rcv_mss = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          tcpi_rcv_mss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_unacked = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          tcpi_unacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_sacked = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          tcpi_sacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_lost = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          tcpi_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_retrans = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          tcpi_retrans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_fackets = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          tcpi_fackets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_last_data_sent = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          tcpi_last_data_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_last_ack_sent = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          tcpi_last_ack_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_last_data_recv = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          tcpi_last_data_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_last_ack_recv = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          tcpi_last_ack_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_pmtu = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          tcpi_pmtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_rcv_ssthresh = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          tcpi_rcv_ssthresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_rtt = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          tcpi_rtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_rttvar = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          tcpi_rttvar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_snd_ssthresh = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          tcpi_snd_ssthresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_snd_cwnd = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          tcpi_snd_cwnd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_advmss = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          tcpi_advmss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcpi_reordering = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          tcpi_reordering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketOptionTcpInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketOptionTcpInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tcpi_state = 1;
  if (this->_internal_tcpi_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tcpi_state(), target);
  }

  // uint32 tcpi_ca_state = 2;
  if (this->_internal_tcpi_ca_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tcpi_ca_state(), target);
  }

  // uint32 tcpi_retransmits = 3;
  if (this->_internal_tcpi_retransmits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tcpi_retransmits(), target);
  }

  // uint32 tcpi_probes = 4;
  if (this->_internal_tcpi_probes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tcpi_probes(), target);
  }

  // uint32 tcpi_backoff = 5;
  if (this->_internal_tcpi_backoff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tcpi_backoff(), target);
  }

  // uint32 tcpi_options = 6;
  if (this->_internal_tcpi_options() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tcpi_options(), target);
  }

  // uint32 tcpi_snd_wscale = 7;
  if (this->_internal_tcpi_snd_wscale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tcpi_snd_wscale(), target);
  }

  // uint32 tcpi_rcv_wscale = 8;
  if (this->_internal_tcpi_rcv_wscale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_tcpi_rcv_wscale(), target);
  }

  // uint32 tcpi_rto = 9;
  if (this->_internal_tcpi_rto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_tcpi_rto(), target);
  }

  // uint32 tcpi_ato = 10;
  if (this->_internal_tcpi_ato() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_tcpi_ato(), target);
  }

  // uint32 tcpi_snd_mss = 11;
  if (this->_internal_tcpi_snd_mss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_tcpi_snd_mss(), target);
  }

  // uint32 tcpi_rcv_mss = 12;
  if (this->_internal_tcpi_rcv_mss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_tcpi_rcv_mss(), target);
  }

  // uint32 tcpi_unacked = 13;
  if (this->_internal_tcpi_unacked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tcpi_unacked(), target);
  }

  // uint32 tcpi_sacked = 14;
  if (this->_internal_tcpi_sacked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tcpi_sacked(), target);
  }

  // uint32 tcpi_lost = 15;
  if (this->_internal_tcpi_lost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_tcpi_lost(), target);
  }

  // uint32 tcpi_retrans = 16;
  if (this->_internal_tcpi_retrans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_tcpi_retrans(), target);
  }

  // uint32 tcpi_fackets = 17;
  if (this->_internal_tcpi_fackets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_tcpi_fackets(), target);
  }

  // uint32 tcpi_last_data_sent = 18;
  if (this->_internal_tcpi_last_data_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_tcpi_last_data_sent(), target);
  }

  // uint32 tcpi_last_ack_sent = 19;
  if (this->_internal_tcpi_last_ack_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_tcpi_last_ack_sent(), target);
  }

  // uint32 tcpi_last_data_recv = 20;
  if (this->_internal_tcpi_last_data_recv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_tcpi_last_data_recv(), target);
  }

  // uint32 tcpi_last_ack_recv = 21;
  if (this->_internal_tcpi_last_ack_recv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_tcpi_last_ack_recv(), target);
  }

  // uint32 tcpi_pmtu = 22;
  if (this->_internal_tcpi_pmtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_tcpi_pmtu(), target);
  }

  // uint32 tcpi_rcv_ssthresh = 23;
  if (this->_internal_tcpi_rcv_ssthresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_tcpi_rcv_ssthresh(), target);
  }

  // uint32 tcpi_rtt = 24;
  if (this->_internal_tcpi_rtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_tcpi_rtt(), target);
  }

  // uint32 tcpi_rttvar = 25;
  if (this->_internal_tcpi_rttvar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_tcpi_rttvar(), target);
  }

  // uint32 tcpi_snd_ssthresh = 26;
  if (this->_internal_tcpi_snd_ssthresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_tcpi_snd_ssthresh(), target);
  }

  // uint32 tcpi_snd_cwnd = 27;
  if (this->_internal_tcpi_snd_cwnd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_tcpi_snd_cwnd(), target);
  }

  // uint32 tcpi_advmss = 28;
  if (this->_internal_tcpi_advmss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_tcpi_advmss(), target);
  }

  // uint32 tcpi_reordering = 29;
  if (this->_internal_tcpi_reordering() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_tcpi_reordering(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketOptionTcpInfo)
  return target;
}

size_t SocketOptionTcpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketOptionTcpInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 tcpi_state = 1;
  if (this->_internal_tcpi_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_state());
  }

  // uint32 tcpi_ca_state = 2;
  if (this->_internal_tcpi_ca_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_ca_state());
  }

  // uint32 tcpi_retransmits = 3;
  if (this->_internal_tcpi_retransmits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_retransmits());
  }

  // uint32 tcpi_probes = 4;
  if (this->_internal_tcpi_probes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_probes());
  }

  // uint32 tcpi_backoff = 5;
  if (this->_internal_tcpi_backoff() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_backoff());
  }

  // uint32 tcpi_options = 6;
  if (this->_internal_tcpi_options() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_options());
  }

  // uint32 tcpi_snd_wscale = 7;
  if (this->_internal_tcpi_snd_wscale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_snd_wscale());
  }

  // uint32 tcpi_rcv_wscale = 8;
  if (this->_internal_tcpi_rcv_wscale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_rcv_wscale());
  }

  // uint32 tcpi_rto = 9;
  if (this->_internal_tcpi_rto() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_rto());
  }

  // uint32 tcpi_ato = 10;
  if (this->_internal_tcpi_ato() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_ato());
  }

  // uint32 tcpi_snd_mss = 11;
  if (this->_internal_tcpi_snd_mss() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_snd_mss());
  }

  // uint32 tcpi_rcv_mss = 12;
  if (this->_internal_tcpi_rcv_mss() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_rcv_mss());
  }

  // uint32 tcpi_unacked = 13;
  if (this->_internal_tcpi_unacked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_unacked());
  }

  // uint32 tcpi_sacked = 14;
  if (this->_internal_tcpi_sacked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_sacked());
  }

  // uint32 tcpi_lost = 15;
  if (this->_internal_tcpi_lost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_lost());
  }

  // uint32 tcpi_retrans = 16;
  if (this->_internal_tcpi_retrans() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_retrans());
  }

  // uint32 tcpi_fackets = 17;
  if (this->_internal_tcpi_fackets() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_fackets());
  }

  // uint32 tcpi_last_data_sent = 18;
  if (this->_internal_tcpi_last_data_sent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_last_data_sent());
  }

  // uint32 tcpi_last_ack_sent = 19;
  if (this->_internal_tcpi_last_ack_sent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_last_ack_sent());
  }

  // uint32 tcpi_last_data_recv = 20;
  if (this->_internal_tcpi_last_data_recv() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_last_data_recv());
  }

  // uint32 tcpi_last_ack_recv = 21;
  if (this->_internal_tcpi_last_ack_recv() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_last_ack_recv());
  }

  // uint32 tcpi_pmtu = 22;
  if (this->_internal_tcpi_pmtu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_pmtu());
  }

  // uint32 tcpi_rcv_ssthresh = 23;
  if (this->_internal_tcpi_rcv_ssthresh() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_rcv_ssthresh());
  }

  // uint32 tcpi_rtt = 24;
  if (this->_internal_tcpi_rtt() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_rtt());
  }

  // uint32 tcpi_rttvar = 25;
  if (this->_internal_tcpi_rttvar() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_rttvar());
  }

  // uint32 tcpi_snd_ssthresh = 26;
  if (this->_internal_tcpi_snd_ssthresh() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_snd_ssthresh());
  }

  // uint32 tcpi_snd_cwnd = 27;
  if (this->_internal_tcpi_snd_cwnd() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_snd_cwnd());
  }

  // uint32 tcpi_advmss = 28;
  if (this->_internal_tcpi_advmss() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_advmss());
  }

  // uint32 tcpi_reordering = 29;
  if (this->_internal_tcpi_reordering() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpi_reordering());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketOptionTcpInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SocketOptionTcpInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketOptionTcpInfo::GetClassData() const { return &_class_data_; }

void SocketOptionTcpInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SocketOptionTcpInfo *>(to)->MergeFrom(
      static_cast<const SocketOptionTcpInfo &>(from));
}


void SocketOptionTcpInfo::MergeFrom(const SocketOptionTcpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketOptionTcpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tcpi_state() != 0) {
    _internal_set_tcpi_state(from._internal_tcpi_state());
  }
  if (from._internal_tcpi_ca_state() != 0) {
    _internal_set_tcpi_ca_state(from._internal_tcpi_ca_state());
  }
  if (from._internal_tcpi_retransmits() != 0) {
    _internal_set_tcpi_retransmits(from._internal_tcpi_retransmits());
  }
  if (from._internal_tcpi_probes() != 0) {
    _internal_set_tcpi_probes(from._internal_tcpi_probes());
  }
  if (from._internal_tcpi_backoff() != 0) {
    _internal_set_tcpi_backoff(from._internal_tcpi_backoff());
  }
  if (from._internal_tcpi_options() != 0) {
    _internal_set_tcpi_options(from._internal_tcpi_options());
  }
  if (from._internal_tcpi_snd_wscale() != 0) {
    _internal_set_tcpi_snd_wscale(from._internal_tcpi_snd_wscale());
  }
  if (from._internal_tcpi_rcv_wscale() != 0) {
    _internal_set_tcpi_rcv_wscale(from._internal_tcpi_rcv_wscale());
  }
  if (from._internal_tcpi_rto() != 0) {
    _internal_set_tcpi_rto(from._internal_tcpi_rto());
  }
  if (from._internal_tcpi_ato() != 0) {
    _internal_set_tcpi_ato(from._internal_tcpi_ato());
  }
  if (from._internal_tcpi_snd_mss() != 0) {
    _internal_set_tcpi_snd_mss(from._internal_tcpi_snd_mss());
  }
  if (from._internal_tcpi_rcv_mss() != 0) {
    _internal_set_tcpi_rcv_mss(from._internal_tcpi_rcv_mss());
  }
  if (from._internal_tcpi_unacked() != 0) {
    _internal_set_tcpi_unacked(from._internal_tcpi_unacked());
  }
  if (from._internal_tcpi_sacked() != 0) {
    _internal_set_tcpi_sacked(from._internal_tcpi_sacked());
  }
  if (from._internal_tcpi_lost() != 0) {
    _internal_set_tcpi_lost(from._internal_tcpi_lost());
  }
  if (from._internal_tcpi_retrans() != 0) {
    _internal_set_tcpi_retrans(from._internal_tcpi_retrans());
  }
  if (from._internal_tcpi_fackets() != 0) {
    _internal_set_tcpi_fackets(from._internal_tcpi_fackets());
  }
  if (from._internal_tcpi_last_data_sent() != 0) {
    _internal_set_tcpi_last_data_sent(from._internal_tcpi_last_data_sent());
  }
  if (from._internal_tcpi_last_ack_sent() != 0) {
    _internal_set_tcpi_last_ack_sent(from._internal_tcpi_last_ack_sent());
  }
  if (from._internal_tcpi_last_data_recv() != 0) {
    _internal_set_tcpi_last_data_recv(from._internal_tcpi_last_data_recv());
  }
  if (from._internal_tcpi_last_ack_recv() != 0) {
    _internal_set_tcpi_last_ack_recv(from._internal_tcpi_last_ack_recv());
  }
  if (from._internal_tcpi_pmtu() != 0) {
    _internal_set_tcpi_pmtu(from._internal_tcpi_pmtu());
  }
  if (from._internal_tcpi_rcv_ssthresh() != 0) {
    _internal_set_tcpi_rcv_ssthresh(from._internal_tcpi_rcv_ssthresh());
  }
  if (from._internal_tcpi_rtt() != 0) {
    _internal_set_tcpi_rtt(from._internal_tcpi_rtt());
  }
  if (from._internal_tcpi_rttvar() != 0) {
    _internal_set_tcpi_rttvar(from._internal_tcpi_rttvar());
  }
  if (from._internal_tcpi_snd_ssthresh() != 0) {
    _internal_set_tcpi_snd_ssthresh(from._internal_tcpi_snd_ssthresh());
  }
  if (from._internal_tcpi_snd_cwnd() != 0) {
    _internal_set_tcpi_snd_cwnd(from._internal_tcpi_snd_cwnd());
  }
  if (from._internal_tcpi_advmss() != 0) {
    _internal_set_tcpi_advmss(from._internal_tcpi_advmss());
  }
  if (from._internal_tcpi_reordering() != 0) {
    _internal_set_tcpi_reordering(from._internal_tcpi_reordering());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketOptionTcpInfo::CopyFrom(const SocketOptionTcpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketOptionTcpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOptionTcpInfo::IsInitialized() const {
  return true;
}

void SocketOptionTcpInfo::InternalSwap(SocketOptionTcpInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocketOptionTcpInfo, tcpi_reordering_)
      + sizeof(SocketOptionTcpInfo::tcpi_reordering_)
      - PROTOBUF_FIELD_OFFSET(SocketOptionTcpInfo, tcpi_state_)>(
          reinterpret_cast<char*>(&tcpi_state_),
          reinterpret_cast<char*>(&other->tcpi_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketOptionTcpInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[24]);
}

// ===================================================================

class GetTopChannelsRequest::_Internal {
 public:
};

GetTopChannelsRequest::GetTopChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetTopChannelsRequest)
}
GetTopChannelsRequest::GetTopChannelsRequest(const GetTopChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_channel_id_, &from.start_channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&start_channel_id_)) + sizeof(max_results_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetTopChannelsRequest)
}

inline void GetTopChannelsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&start_channel_id_)) + sizeof(max_results_));
}

GetTopChannelsRequest::~GetTopChannelsRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetTopChannelsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTopChannelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetTopChannelsRequest::ArenaDtor(void* object) {
  GetTopChannelsRequest* _this = reinterpret_cast< GetTopChannelsRequest* >(object);
  (void)_this;
}
void GetTopChannelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTopChannelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTopChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetTopChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_results_) -
      reinterpret_cast<char*>(&start_channel_id_)) + sizeof(max_results_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTopChannelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTopChannelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetTopChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_channel_id = 1;
  if (this->_internal_start_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_channel_id(), target);
  }

  // int64 max_results = 2;
  if (this->_internal_max_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetTopChannelsRequest)
  return target;
}

size_t GetTopChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetTopChannelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start_channel_id = 1;
  if (this->_internal_start_channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_channel_id());
  }

  // int64 max_results = 2;
  if (this->_internal_max_results() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_results());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTopChannelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTopChannelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTopChannelsRequest::GetClassData() const { return &_class_data_; }

void GetTopChannelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetTopChannelsRequest *>(to)->MergeFrom(
      static_cast<const GetTopChannelsRequest &>(from));
}


void GetTopChannelsRequest::MergeFrom(const GetTopChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetTopChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_channel_id() != 0) {
    _internal_set_start_channel_id(from._internal_start_channel_id());
  }
  if (from._internal_max_results() != 0) {
    _internal_set_max_results(from._internal_max_results());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTopChannelsRequest::CopyFrom(const GetTopChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetTopChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopChannelsRequest::IsInitialized() const {
  return true;
}

void GetTopChannelsRequest::InternalSwap(GetTopChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTopChannelsRequest, max_results_)
      + sizeof(GetTopChannelsRequest::max_results_)
      - PROTOBUF_FIELD_OFFSET(GetTopChannelsRequest, start_channel_id_)>(
          reinterpret_cast<char*>(&start_channel_id_),
          reinterpret_cast<char*>(&other->start_channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTopChannelsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[25]);
}

// ===================================================================

class GetTopChannelsResponse::_Internal {
 public:
};

GetTopChannelsResponse::GetTopChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetTopChannelsResponse)
}
GetTopChannelsResponse::GetTopChannelsResponse(const GetTopChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_(from.channel_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  end_ = from.end_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetTopChannelsResponse)
}

inline void GetTopChannelsResponse::SharedCtor() {
end_ = false;
}

GetTopChannelsResponse::~GetTopChannelsResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetTopChannelsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTopChannelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetTopChannelsResponse::ArenaDtor(void* object) {
  GetTopChannelsResponse* _this = reinterpret_cast< GetTopChannelsResponse* >(object);
  (void)_this;
}
void GetTopChannelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTopChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTopChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetTopChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.Clear();
  end_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTopChannelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .grpc.channelz.v1.Channel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTopChannelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetTopChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.Channel channel = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channel(i), target, stream);
  }

  // bool end = 2;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetTopChannelsResponse)
  return target;
}

size_t GetTopChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetTopChannelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.Channel channel = 1;
  total_size += 1UL * this->_internal_channel_size();
  for (const auto& msg : this->channel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool end = 2;
  if (this->_internal_end() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTopChannelsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTopChannelsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTopChannelsResponse::GetClassData() const { return &_class_data_; }

void GetTopChannelsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetTopChannelsResponse *>(to)->MergeFrom(
      static_cast<const GetTopChannelsResponse &>(from));
}


void GetTopChannelsResponse::MergeFrom(const GetTopChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetTopChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_.MergeFrom(from.channel_);
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTopChannelsResponse::CopyFrom(const GetTopChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetTopChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopChannelsResponse::IsInitialized() const {
  return true;
}

void GetTopChannelsResponse::InternalSwap(GetTopChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_.InternalSwap(&other->channel_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTopChannelsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[26]);
}

// ===================================================================

class GetServersRequest::_Internal {
 public:
};

GetServersRequest::GetServersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetServersRequest)
}
GetServersRequest::GetServersRequest(const GetServersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_server_id_, &from.start_server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&start_server_id_)) + sizeof(max_results_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServersRequest)
}

inline void GetServersRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_server_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&start_server_id_)) + sizeof(max_results_));
}

GetServersRequest::~GetServersRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServersRequest::ArenaDtor(void* object) {
  GetServersRequest* _this = reinterpret_cast< GetServersRequest* >(object);
  (void)_this;
}
void GetServersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_results_) -
      reinterpret_cast<char*>(&start_server_id_)) + sizeof(max_results_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_server_id = 1;
  if (this->_internal_start_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_server_id(), target);
  }

  // int64 max_results = 2;
  if (this->_internal_max_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServersRequest)
  return target;
}

size_t GetServersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start_server_id = 1;
  if (this->_internal_start_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_server_id());
  }

  // int64 max_results = 2;
  if (this->_internal_max_results() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_results());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServersRequest::GetClassData() const { return &_class_data_; }

void GetServersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetServersRequest *>(to)->MergeFrom(
      static_cast<const GetServersRequest &>(from));
}


void GetServersRequest::MergeFrom(const GetServersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_server_id() != 0) {
    _internal_set_start_server_id(from._internal_start_server_id());
  }
  if (from._internal_max_results() != 0) {
    _internal_set_max_results(from._internal_max_results());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServersRequest::CopyFrom(const GetServersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServersRequest::IsInitialized() const {
  return true;
}

void GetServersRequest::InternalSwap(GetServersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServersRequest, max_results_)
      + sizeof(GetServersRequest::max_results_)
      - PROTOBUF_FIELD_OFFSET(GetServersRequest, start_server_id_)>(
          reinterpret_cast<char*>(&start_server_id_),
          reinterpret_cast<char*>(&other->start_server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[27]);
}

// ===================================================================

class GetServersResponse::_Internal {
 public:
};

GetServersResponse::GetServersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  server_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetServersResponse)
}
GetServersResponse::GetServersResponse(const GetServersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      server_(from.server_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  end_ = from.end_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServersResponse)
}

inline void GetServersResponse::SharedCtor() {
end_ = false;
}

GetServersResponse::~GetServersResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServersResponse::ArenaDtor(void* object) {
  GetServersResponse* _this = reinterpret_cast< GetServersResponse* >(object);
  (void)_this;
}
void GetServersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_.Clear();
  end_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .grpc.channelz.v1.Server server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_server(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.Server server = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_server_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_server(i), target, stream);
  }

  // bool end = 2;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServersResponse)
  return target;
}

size_t GetServersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.Server server = 1;
  total_size += 1UL * this->_internal_server_size();
  for (const auto& msg : this->server_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool end = 2;
  if (this->_internal_end() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServersResponse::GetClassData() const { return &_class_data_; }

void GetServersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetServersResponse *>(to)->MergeFrom(
      static_cast<const GetServersResponse &>(from));
}


void GetServersResponse::MergeFrom(const GetServersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_.MergeFrom(from.server_);
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServersResponse::CopyFrom(const GetServersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServersResponse::IsInitialized() const {
  return true;
}

void GetServersResponse::InternalSwap(GetServersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  server_.InternalSwap(&other->server_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[28]);
}

// ===================================================================

class GetServerRequest::_Internal {
 public:
};

GetServerRequest::GetServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetServerRequest)
}
GetServerRequest::GetServerRequest(const GetServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServerRequest)
}

inline void GetServerRequest::SharedCtor() {
server_id_ = int64_t{0};
}

GetServerRequest::~GetServerRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServerRequest::ArenaDtor(void* object) {
  GetServerRequest* _this = reinterpret_cast< GetServerRequest* >(object);
  (void)_this;
}
void GetServerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServerRequest)
  return target;
}

size_t GetServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerRequest::GetClassData() const { return &_class_data_; }

void GetServerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetServerRequest *>(to)->MergeFrom(
      static_cast<const GetServerRequest &>(from));
}


void GetServerRequest::MergeFrom(const GetServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerRequest::CopyFrom(const GetServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerRequest::IsInitialized() const {
  return true;
}

void GetServerRequest::InternalSwap(GetServerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[29]);
}

// ===================================================================

class GetServerResponse::_Internal {
 public:
  static const ::grpc::channelz::v1::Server& server(const GetServerResponse* msg);
};

const ::grpc::channelz::v1::Server&
GetServerResponse::_Internal::server(const GetServerResponse* msg) {
  return *msg->server_;
}
GetServerResponse::GetServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetServerResponse)
}
GetServerResponse::GetServerResponse(const GetServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server()) {
    server_ = new ::grpc::channelz::v1::Server(*from.server_);
  } else {
    server_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServerResponse)
}

inline void GetServerResponse::SharedCtor() {
server_ = nullptr;
}

GetServerResponse::~GetServerResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete server_;
}

void GetServerResponse::ArenaDtor(void* object) {
  GetServerResponse* _this = reinterpret_cast< GetServerResponse* >(object);
  (void)_this;
}
void GetServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.Server server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Server server = 1;
  if (this->_internal_has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServerResponse)
  return target;
}

size_t GetServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.channelz.v1.Server server = 1;
  if (this->_internal_has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerResponse::GetClassData() const { return &_class_data_; }

void GetServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetServerResponse *>(to)->MergeFrom(
      static_cast<const GetServerResponse &>(from));
}


void GetServerResponse::MergeFrom(const GetServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server()) {
    _internal_mutable_server()->::grpc::channelz::v1::Server::MergeFrom(from._internal_server());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerResponse::CopyFrom(const GetServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerResponse::IsInitialized() const {
  return true;
}

void GetServerResponse::InternalSwap(GetServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(server_, other->server_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[30]);
}

// ===================================================================

class GetServerSocketsRequest::_Internal {
 public:
};

GetServerSocketsRequest::GetServerSocketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetServerSocketsRequest)
}
GetServerSocketsRequest::GetServerSocketsRequest(const GetServerSocketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(max_results_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServerSocketsRequest)
}

inline void GetServerSocketsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(max_results_));
}

GetServerSocketsRequest::~GetServerSocketsRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServerSocketsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServerSocketsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServerSocketsRequest::ArenaDtor(void* object) {
  GetServerSocketsRequest* _this = reinterpret_cast< GetServerSocketsRequest* >(object);
  (void)_this;
}
void GetServerSocketsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServerSocketsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServerSocketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServerSocketsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_results_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(max_results_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerSocketsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 start_socket_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_socket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServerSocketsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServerSocketsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_server_id(), target);
  }

  // int64 start_socket_id = 2;
  if (this->_internal_start_socket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_start_socket_id(), target);
  }

  // int64 max_results = 3;
  if (this->_internal_max_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServerSocketsRequest)
  return target;
}

size_t GetServerSocketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServerSocketsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_server_id());
  }

  // int64 start_socket_id = 2;
  if (this->_internal_start_socket_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_socket_id());
  }

  // int64 max_results = 3;
  if (this->_internal_max_results() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_results());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerSocketsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServerSocketsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerSocketsRequest::GetClassData() const { return &_class_data_; }

void GetServerSocketsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetServerSocketsRequest *>(to)->MergeFrom(
      static_cast<const GetServerSocketsRequest &>(from));
}


void GetServerSocketsRequest::MergeFrom(const GetServerSocketsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServerSocketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from._internal_start_socket_id() != 0) {
    _internal_set_start_socket_id(from._internal_start_socket_id());
  }
  if (from._internal_max_results() != 0) {
    _internal_set_max_results(from._internal_max_results());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerSocketsRequest::CopyFrom(const GetServerSocketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServerSocketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerSocketsRequest::IsInitialized() const {
  return true;
}

void GetServerSocketsRequest::InternalSwap(GetServerSocketsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServerSocketsRequest, max_results_)
      + sizeof(GetServerSocketsRequest::max_results_)
      - PROTOBUF_FIELD_OFFSET(GetServerSocketsRequest, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerSocketsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[31]);
}

// ===================================================================

class GetServerSocketsResponse::_Internal {
 public:
};

GetServerSocketsResponse::GetServerSocketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  socket_ref_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetServerSocketsResponse)
}
GetServerSocketsResponse::GetServerSocketsResponse(const GetServerSocketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      socket_ref_(from.socket_ref_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  end_ = from.end_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServerSocketsResponse)
}

inline void GetServerSocketsResponse::SharedCtor() {
end_ = false;
}

GetServerSocketsResponse::~GetServerSocketsResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServerSocketsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServerSocketsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServerSocketsResponse::ArenaDtor(void* object) {
  GetServerSocketsResponse* _this = reinterpret_cast< GetServerSocketsResponse* >(object);
  (void)_this;
}
void GetServerSocketsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServerSocketsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServerSocketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServerSocketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  socket_ref_.Clear();
  end_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerSocketsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .grpc.channelz.v1.SocketRef socket_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_socket_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServerSocketsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServerSocketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_socket_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_socket_ref(i), target, stream);
  }

  // bool end = 2;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServerSocketsResponse)
  return target;
}

size_t GetServerSocketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServerSocketsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 1;
  total_size += 1UL * this->_internal_socket_ref_size();
  for (const auto& msg : this->socket_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool end = 2;
  if (this->_internal_end() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerSocketsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServerSocketsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerSocketsResponse::GetClassData() const { return &_class_data_; }

void GetServerSocketsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetServerSocketsResponse *>(to)->MergeFrom(
      static_cast<const GetServerSocketsResponse &>(from));
}


void GetServerSocketsResponse::MergeFrom(const GetServerSocketsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServerSocketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  socket_ref_.MergeFrom(from.socket_ref_);
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerSocketsResponse::CopyFrom(const GetServerSocketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServerSocketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerSocketsResponse::IsInitialized() const {
  return true;
}

void GetServerSocketsResponse::InternalSwap(GetServerSocketsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  socket_ref_.InternalSwap(&other->socket_ref_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerSocketsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[32]);
}

// ===================================================================

class GetChannelRequest::_Internal {
 public:
};

GetChannelRequest::GetChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetChannelRequest)
}
GetChannelRequest::GetChannelRequest(const GetChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetChannelRequest)
}

inline void GetChannelRequest::SharedCtor() {
channel_id_ = int64_t{0};
}

GetChannelRequest::~GetChannelRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetChannelRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetChannelRequest::ArenaDtor(void* object) {
  GetChannelRequest* _this = reinterpret_cast< GetChannelRequest* >(object);
  (void)_this;
}
void GetChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 channel_id = 1;
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetChannelRequest)
  return target;
}

size_t GetChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 channel_id = 1;
  if (this->_internal_channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelRequest::GetClassData() const { return &_class_data_; }

void GetChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetChannelRequest *>(to)->MergeFrom(
      static_cast<const GetChannelRequest &>(from));
}


void GetChannelRequest::MergeFrom(const GetChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelRequest::CopyFrom(const GetChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelRequest::IsInitialized() const {
  return true;
}

void GetChannelRequest::InternalSwap(GetChannelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[33]);
}

// ===================================================================

class GetChannelResponse::_Internal {
 public:
  static const ::grpc::channelz::v1::Channel& channel(const GetChannelResponse* msg);
};

const ::grpc::channelz::v1::Channel&
GetChannelResponse::_Internal::channel(const GetChannelResponse* msg) {
  return *msg->channel_;
}
GetChannelResponse::GetChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetChannelResponse)
}
GetChannelResponse::GetChannelResponse(const GetChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channel()) {
    channel_ = new ::grpc::channelz::v1::Channel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetChannelResponse)
}

inline void GetChannelResponse::SharedCtor() {
channel_ = nullptr;
}

GetChannelResponse::~GetChannelResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetChannelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete channel_;
}

void GetChannelResponse::ArenaDtor(void* object) {
  GetChannelResponse* _this = reinterpret_cast< GetChannelResponse* >(object);
  (void)_this;
}
void GetChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.Channel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Channel channel = 1;
  if (this->_internal_has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetChannelResponse)
  return target;
}

size_t GetChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.channelz.v1.Channel channel = 1;
  if (this->_internal_has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelResponse::GetClassData() const { return &_class_data_; }

void GetChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetChannelResponse *>(to)->MergeFrom(
      static_cast<const GetChannelResponse &>(from));
}


void GetChannelResponse::MergeFrom(const GetChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel()) {
    _internal_mutable_channel()->::grpc::channelz::v1::Channel::MergeFrom(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelResponse::CopyFrom(const GetChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelResponse::IsInitialized() const {
  return true;
}

void GetChannelResponse::InternalSwap(GetChannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[34]);
}

// ===================================================================

class GetSubchannelRequest::_Internal {
 public:
};

GetSubchannelRequest::GetSubchannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetSubchannelRequest)
}
GetSubchannelRequest::GetSubchannelRequest(const GetSubchannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subchannel_id_ = from.subchannel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetSubchannelRequest)
}

inline void GetSubchannelRequest::SharedCtor() {
subchannel_id_ = int64_t{0};
}

GetSubchannelRequest::~GetSubchannelRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetSubchannelRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSubchannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSubchannelRequest::ArenaDtor(void* object) {
  GetSubchannelRequest* _this = reinterpret_cast< GetSubchannelRequest* >(object);
  (void)_this;
}
void GetSubchannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSubchannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSubchannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetSubchannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subchannel_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSubchannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 subchannel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          subchannel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSubchannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetSubchannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 subchannel_id = 1;
  if (this->_internal_subchannel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_subchannel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetSubchannelRequest)
  return target;
}

size_t GetSubchannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetSubchannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 subchannel_id = 1;
  if (this->_internal_subchannel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_subchannel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSubchannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSubchannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSubchannelRequest::GetClassData() const { return &_class_data_; }

void GetSubchannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetSubchannelRequest *>(to)->MergeFrom(
      static_cast<const GetSubchannelRequest &>(from));
}


void GetSubchannelRequest::MergeFrom(const GetSubchannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetSubchannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_subchannel_id() != 0) {
    _internal_set_subchannel_id(from._internal_subchannel_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSubchannelRequest::CopyFrom(const GetSubchannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetSubchannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubchannelRequest::IsInitialized() const {
  return true;
}

void GetSubchannelRequest::InternalSwap(GetSubchannelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(subchannel_id_, other->subchannel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubchannelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[35]);
}

// ===================================================================

class GetSubchannelResponse::_Internal {
 public:
  static const ::grpc::channelz::v1::Subchannel& subchannel(const GetSubchannelResponse* msg);
};

const ::grpc::channelz::v1::Subchannel&
GetSubchannelResponse::_Internal::subchannel(const GetSubchannelResponse* msg) {
  return *msg->subchannel_;
}
GetSubchannelResponse::GetSubchannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetSubchannelResponse)
}
GetSubchannelResponse::GetSubchannelResponse(const GetSubchannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subchannel()) {
    subchannel_ = new ::grpc::channelz::v1::Subchannel(*from.subchannel_);
  } else {
    subchannel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetSubchannelResponse)
}

inline void GetSubchannelResponse::SharedCtor() {
subchannel_ = nullptr;
}

GetSubchannelResponse::~GetSubchannelResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetSubchannelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSubchannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete subchannel_;
}

void GetSubchannelResponse::ArenaDtor(void* object) {
  GetSubchannelResponse* _this = reinterpret_cast< GetSubchannelResponse* >(object);
  (void)_this;
}
void GetSubchannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSubchannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSubchannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetSubchannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && subchannel_ != nullptr) {
    delete subchannel_;
  }
  subchannel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSubchannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.Subchannel subchannel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subchannel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSubchannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetSubchannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Subchannel subchannel = 1;
  if (this->_internal_has_subchannel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::subchannel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetSubchannelResponse)
  return target;
}

size_t GetSubchannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetSubchannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.channelz.v1.Subchannel subchannel = 1;
  if (this->_internal_has_subchannel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subchannel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSubchannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSubchannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSubchannelResponse::GetClassData() const { return &_class_data_; }

void GetSubchannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetSubchannelResponse *>(to)->MergeFrom(
      static_cast<const GetSubchannelResponse &>(from));
}


void GetSubchannelResponse::MergeFrom(const GetSubchannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetSubchannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subchannel()) {
    _internal_mutable_subchannel()->::grpc::channelz::v1::Subchannel::MergeFrom(from._internal_subchannel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSubchannelResponse::CopyFrom(const GetSubchannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetSubchannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubchannelResponse::IsInitialized() const {
  return true;
}

void GetSubchannelResponse::InternalSwap(GetSubchannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(subchannel_, other->subchannel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubchannelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[36]);
}

// ===================================================================

class GetSocketRequest::_Internal {
 public:
};

GetSocketRequest::GetSocketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetSocketRequest)
}
GetSocketRequest::GetSocketRequest(const GetSocketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&socket_id_, &from.socket_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&summary_) -
    reinterpret_cast<char*>(&socket_id_)) + sizeof(summary_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetSocketRequest)
}

inline void GetSocketRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&socket_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&summary_) -
    reinterpret_cast<char*>(&socket_id_)) + sizeof(summary_));
}

GetSocketRequest::~GetSocketRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetSocketRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSocketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSocketRequest::ArenaDtor(void* object) {
  GetSocketRequest* _this = reinterpret_cast< GetSocketRequest* >(object);
  (void)_this;
}
void GetSocketRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSocketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSocketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetSocketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&socket_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&summary_) -
      reinterpret_cast<char*>(&socket_id_)) + sizeof(summary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSocketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 socket_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          socket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          summary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSocketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetSocketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 socket_id = 1;
  if (this->_internal_socket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_socket_id(), target);
  }

  // bool summary = 2;
  if (this->_internal_summary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_summary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetSocketRequest)
  return target;
}

size_t GetSocketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetSocketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 socket_id = 1;
  if (this->_internal_socket_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_socket_id());
  }

  // bool summary = 2;
  if (this->_internal_summary() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSocketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSocketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSocketRequest::GetClassData() const { return &_class_data_; }

void GetSocketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetSocketRequest *>(to)->MergeFrom(
      static_cast<const GetSocketRequest &>(from));
}


void GetSocketRequest::MergeFrom(const GetSocketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetSocketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_socket_id() != 0) {
    _internal_set_socket_id(from._internal_socket_id());
  }
  if (from._internal_summary() != 0) {
    _internal_set_summary(from._internal_summary());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSocketRequest::CopyFrom(const GetSocketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetSocketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSocketRequest::IsInitialized() const {
  return true;
}

void GetSocketRequest::InternalSwap(GetSocketRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSocketRequest, summary_)
      + sizeof(GetSocketRequest::summary_)
      - PROTOBUF_FIELD_OFFSET(GetSocketRequest, socket_id_)>(
          reinterpret_cast<char*>(&socket_id_),
          reinterpret_cast<char*>(&other->socket_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSocketRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[37]);
}

// ===================================================================

class GetSocketResponse::_Internal {
 public:
  static const ::grpc::channelz::v1::Socket& socket(const GetSocketResponse* msg);
};

const ::grpc::channelz::v1::Socket&
GetSocketResponse::_Internal::socket(const GetSocketResponse* msg) {
  return *msg->socket_;
}
GetSocketResponse::GetSocketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetSocketResponse)
}
GetSocketResponse::GetSocketResponse(const GetSocketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    socket_ = new ::grpc::channelz::v1::Socket(*from.socket_);
  } else {
    socket_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetSocketResponse)
}

inline void GetSocketResponse::SharedCtor() {
socket_ = nullptr;
}

GetSocketResponse::~GetSocketResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetSocketResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSocketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete socket_;
}

void GetSocketResponse::ArenaDtor(void* object) {
  GetSocketResponse* _this = reinterpret_cast< GetSocketResponse* >(object);
  (void)_this;
}
void GetSocketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSocketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSocketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetSocketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && socket_ != nullptr) {
    delete socket_;
  }
  socket_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSocketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.Socket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSocketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetSocketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Socket socket = 1;
  if (this->_internal_has_socket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::socket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetSocketResponse)
  return target;
}

size_t GetSocketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetSocketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.channelz.v1.Socket socket = 1;
  if (this->_internal_has_socket()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *socket_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSocketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSocketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSocketResponse::GetClassData() const { return &_class_data_; }

void GetSocketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetSocketResponse *>(to)->MergeFrom(
      static_cast<const GetSocketResponse &>(from));
}


void GetSocketResponse::MergeFrom(const GetSocketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_socket()) {
    _internal_mutable_socket()->::grpc::channelz::v1::Socket::MergeFrom(from._internal_socket());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSocketResponse::CopyFrom(const GetSocketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSocketResponse::IsInitialized() const {
  return true;
}

void GetSocketResponse::InternalSwap(GetSocketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(socket_, other->socket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSocketResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_channelz_2eproto_getter, &descriptor_table_channelz_2eproto_once,
      file_level_metadata_channelz_2eproto[38]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace channelz
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Channel* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Subchannel* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Subchannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Subchannel >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ChannelConnectivityState* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelConnectivityState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ChannelConnectivityState >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ChannelData* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ChannelData >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ChannelTraceEvent* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelTraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ChannelTraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ChannelTrace* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ChannelTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ChannelRef* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ChannelRef >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SubchannelRef* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SubchannelRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SubchannelRef >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SocketRef* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SocketRef >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ServerRef* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ServerRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ServerRef >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Server* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Server >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ServerData* Arena::CreateMaybeMessage< ::grpc::channelz::v1::ServerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ServerData >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Socket* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Socket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Socket >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SocketData* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SocketData >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Address_TcpIpAddress* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Address_TcpIpAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Address_TcpIpAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Address_UdsAddress* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Address_UdsAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Address_UdsAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Address_OtherAddress* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Address_OtherAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Address_OtherAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Address* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Security_Tls* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Security_Tls >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Security_Tls >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Security_OtherSecurity* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Security_OtherSecurity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Security_OtherSecurity >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Security* Arena::CreateMaybeMessage< ::grpc::channelz::v1::Security >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Security >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SocketOption* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SocketOption >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SocketOptionTimeout* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketOptionTimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SocketOptionTimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SocketOptionLinger* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketOptionLinger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SocketOptionLinger >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SocketOptionTcpInfo* Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketOptionTcpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SocketOptionTcpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetTopChannelsRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetTopChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetTopChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetTopChannelsResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetTopChannelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetTopChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetServersRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetServersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetServersResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetServersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetServerRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetServerResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetServerSocketsRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServerSocketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetServerSocketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetServerSocketsResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServerSocketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetServerSocketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetChannelRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetChannelResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetSubchannelRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetSubchannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetSubchannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetSubchannelResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetSubchannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetSubchannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetSocketRequest* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetSocketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetSocketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetSocketResponse* Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetSocketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetSocketResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
