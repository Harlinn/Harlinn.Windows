// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channelz.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_channelz_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_channelz_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_channelz_2eproto GRPC_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GRPC_EXPORT TableStruct_channelz_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[39]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
GRPC_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_channelz_2eproto;
namespace grpc {
namespace channelz {
namespace v1 {
class Address;
struct AddressDefaultTypeInternal;
GRPC_EXPORT extern AddressDefaultTypeInternal _Address_default_instance_;
class Address_OtherAddress;
struct Address_OtherAddressDefaultTypeInternal;
GRPC_EXPORT extern Address_OtherAddressDefaultTypeInternal _Address_OtherAddress_default_instance_;
class Address_TcpIpAddress;
struct Address_TcpIpAddressDefaultTypeInternal;
GRPC_EXPORT extern Address_TcpIpAddressDefaultTypeInternal _Address_TcpIpAddress_default_instance_;
class Address_UdsAddress;
struct Address_UdsAddressDefaultTypeInternal;
GRPC_EXPORT extern Address_UdsAddressDefaultTypeInternal _Address_UdsAddress_default_instance_;
class Channel;
struct ChannelDefaultTypeInternal;
GRPC_EXPORT extern ChannelDefaultTypeInternal _Channel_default_instance_;
class ChannelConnectivityState;
struct ChannelConnectivityStateDefaultTypeInternal;
GRPC_EXPORT extern ChannelConnectivityStateDefaultTypeInternal _ChannelConnectivityState_default_instance_;
class ChannelData;
struct ChannelDataDefaultTypeInternal;
GRPC_EXPORT extern ChannelDataDefaultTypeInternal _ChannelData_default_instance_;
class ChannelRef;
struct ChannelRefDefaultTypeInternal;
GRPC_EXPORT extern ChannelRefDefaultTypeInternal _ChannelRef_default_instance_;
class ChannelTrace;
struct ChannelTraceDefaultTypeInternal;
GRPC_EXPORT extern ChannelTraceDefaultTypeInternal _ChannelTrace_default_instance_;
class ChannelTraceEvent;
struct ChannelTraceEventDefaultTypeInternal;
GRPC_EXPORT extern ChannelTraceEventDefaultTypeInternal _ChannelTraceEvent_default_instance_;
class GetChannelRequest;
struct GetChannelRequestDefaultTypeInternal;
GRPC_EXPORT extern GetChannelRequestDefaultTypeInternal _GetChannelRequest_default_instance_;
class GetChannelResponse;
struct GetChannelResponseDefaultTypeInternal;
GRPC_EXPORT extern GetChannelResponseDefaultTypeInternal _GetChannelResponse_default_instance_;
class GetServerRequest;
struct GetServerRequestDefaultTypeInternal;
GRPC_EXPORT extern GetServerRequestDefaultTypeInternal _GetServerRequest_default_instance_;
class GetServerResponse;
struct GetServerResponseDefaultTypeInternal;
GRPC_EXPORT extern GetServerResponseDefaultTypeInternal _GetServerResponse_default_instance_;
class GetServerSocketsRequest;
struct GetServerSocketsRequestDefaultTypeInternal;
GRPC_EXPORT extern GetServerSocketsRequestDefaultTypeInternal _GetServerSocketsRequest_default_instance_;
class GetServerSocketsResponse;
struct GetServerSocketsResponseDefaultTypeInternal;
GRPC_EXPORT extern GetServerSocketsResponseDefaultTypeInternal _GetServerSocketsResponse_default_instance_;
class GetServersRequest;
struct GetServersRequestDefaultTypeInternal;
GRPC_EXPORT extern GetServersRequestDefaultTypeInternal _GetServersRequest_default_instance_;
class GetServersResponse;
struct GetServersResponseDefaultTypeInternal;
GRPC_EXPORT extern GetServersResponseDefaultTypeInternal _GetServersResponse_default_instance_;
class GetSocketRequest;
struct GetSocketRequestDefaultTypeInternal;
GRPC_EXPORT extern GetSocketRequestDefaultTypeInternal _GetSocketRequest_default_instance_;
class GetSocketResponse;
struct GetSocketResponseDefaultTypeInternal;
GRPC_EXPORT extern GetSocketResponseDefaultTypeInternal _GetSocketResponse_default_instance_;
class GetSubchannelRequest;
struct GetSubchannelRequestDefaultTypeInternal;
GRPC_EXPORT extern GetSubchannelRequestDefaultTypeInternal _GetSubchannelRequest_default_instance_;
class GetSubchannelResponse;
struct GetSubchannelResponseDefaultTypeInternal;
GRPC_EXPORT extern GetSubchannelResponseDefaultTypeInternal _GetSubchannelResponse_default_instance_;
class GetTopChannelsRequest;
struct GetTopChannelsRequestDefaultTypeInternal;
GRPC_EXPORT extern GetTopChannelsRequestDefaultTypeInternal _GetTopChannelsRequest_default_instance_;
class GetTopChannelsResponse;
struct GetTopChannelsResponseDefaultTypeInternal;
GRPC_EXPORT extern GetTopChannelsResponseDefaultTypeInternal _GetTopChannelsResponse_default_instance_;
class Security;
struct SecurityDefaultTypeInternal;
GRPC_EXPORT extern SecurityDefaultTypeInternal _Security_default_instance_;
class Security_OtherSecurity;
struct Security_OtherSecurityDefaultTypeInternal;
GRPC_EXPORT extern Security_OtherSecurityDefaultTypeInternal _Security_OtherSecurity_default_instance_;
class Security_Tls;
struct Security_TlsDefaultTypeInternal;
GRPC_EXPORT extern Security_TlsDefaultTypeInternal _Security_Tls_default_instance_;
class Server;
struct ServerDefaultTypeInternal;
GRPC_EXPORT extern ServerDefaultTypeInternal _Server_default_instance_;
class ServerData;
struct ServerDataDefaultTypeInternal;
GRPC_EXPORT extern ServerDataDefaultTypeInternal _ServerData_default_instance_;
class ServerRef;
struct ServerRefDefaultTypeInternal;
GRPC_EXPORT extern ServerRefDefaultTypeInternal _ServerRef_default_instance_;
class Socket;
struct SocketDefaultTypeInternal;
GRPC_EXPORT extern SocketDefaultTypeInternal _Socket_default_instance_;
class SocketData;
struct SocketDataDefaultTypeInternal;
GRPC_EXPORT extern SocketDataDefaultTypeInternal _SocketData_default_instance_;
class SocketOption;
struct SocketOptionDefaultTypeInternal;
GRPC_EXPORT extern SocketOptionDefaultTypeInternal _SocketOption_default_instance_;
class SocketOptionLinger;
struct SocketOptionLingerDefaultTypeInternal;
GRPC_EXPORT extern SocketOptionLingerDefaultTypeInternal _SocketOptionLinger_default_instance_;
class SocketOptionTcpInfo;
struct SocketOptionTcpInfoDefaultTypeInternal;
GRPC_EXPORT extern SocketOptionTcpInfoDefaultTypeInternal _SocketOptionTcpInfo_default_instance_;
class SocketOptionTimeout;
struct SocketOptionTimeoutDefaultTypeInternal;
GRPC_EXPORT extern SocketOptionTimeoutDefaultTypeInternal _SocketOptionTimeout_default_instance_;
class SocketRef;
struct SocketRefDefaultTypeInternal;
GRPC_EXPORT extern SocketRefDefaultTypeInternal _SocketRef_default_instance_;
class Subchannel;
struct SubchannelDefaultTypeInternal;
GRPC_EXPORT extern SubchannelDefaultTypeInternal _Subchannel_default_instance_;
class SubchannelRef;
struct SubchannelRefDefaultTypeInternal;
GRPC_EXPORT extern SubchannelRefDefaultTypeInternal _SubchannelRef_default_instance_;
}  // namespace v1
}  // namespace channelz
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> GRPC_EXPORT ::grpc::channelz::v1::Address* Arena::CreateMaybeMessage<::grpc::channelz::v1::Address>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::Address_OtherAddress* Arena::CreateMaybeMessage<::grpc::channelz::v1::Address_OtherAddress>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::Address_TcpIpAddress* Arena::CreateMaybeMessage<::grpc::channelz::v1::Address_TcpIpAddress>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::Address_UdsAddress* Arena::CreateMaybeMessage<::grpc::channelz::v1::Address_UdsAddress>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::Channel* Arena::CreateMaybeMessage<::grpc::channelz::v1::Channel>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::ChannelConnectivityState* Arena::CreateMaybeMessage<::grpc::channelz::v1::ChannelConnectivityState>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::ChannelData* Arena::CreateMaybeMessage<::grpc::channelz::v1::ChannelData>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::ChannelRef* Arena::CreateMaybeMessage<::grpc::channelz::v1::ChannelRef>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::ChannelTrace* Arena::CreateMaybeMessage<::grpc::channelz::v1::ChannelTrace>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::ChannelTraceEvent* Arena::CreateMaybeMessage<::grpc::channelz::v1::ChannelTraceEvent>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetChannelRequest* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetChannelRequest>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetChannelResponse* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetChannelResponse>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetServerRequest* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetServerRequest>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetServerResponse* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetServerResponse>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetServerSocketsRequest* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetServerSocketsRequest>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetServerSocketsResponse* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetServerSocketsResponse>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetServersRequest* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetServersRequest>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetServersResponse* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetServersResponse>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetSocketRequest* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetSocketRequest>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetSocketResponse* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetSocketResponse>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetSubchannelRequest* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetSubchannelRequest>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetSubchannelResponse* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetSubchannelResponse>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetTopChannelsRequest* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetTopChannelsRequest>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::GetTopChannelsResponse* Arena::CreateMaybeMessage<::grpc::channelz::v1::GetTopChannelsResponse>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::Security* Arena::CreateMaybeMessage<::grpc::channelz::v1::Security>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::Security_OtherSecurity* Arena::CreateMaybeMessage<::grpc::channelz::v1::Security_OtherSecurity>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::Security_Tls* Arena::CreateMaybeMessage<::grpc::channelz::v1::Security_Tls>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::Server* Arena::CreateMaybeMessage<::grpc::channelz::v1::Server>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::ServerData* Arena::CreateMaybeMessage<::grpc::channelz::v1::ServerData>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::ServerRef* Arena::CreateMaybeMessage<::grpc::channelz::v1::ServerRef>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::Socket* Arena::CreateMaybeMessage<::grpc::channelz::v1::Socket>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::SocketData* Arena::CreateMaybeMessage<::grpc::channelz::v1::SocketData>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::SocketOption* Arena::CreateMaybeMessage<::grpc::channelz::v1::SocketOption>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::SocketOptionLinger* Arena::CreateMaybeMessage<::grpc::channelz::v1::SocketOptionLinger>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::SocketOptionTcpInfo* Arena::CreateMaybeMessage<::grpc::channelz::v1::SocketOptionTcpInfo>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::SocketOptionTimeout* Arena::CreateMaybeMessage<::grpc::channelz::v1::SocketOptionTimeout>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::SocketRef* Arena::CreateMaybeMessage<::grpc::channelz::v1::SocketRef>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::Subchannel* Arena::CreateMaybeMessage<::grpc::channelz::v1::Subchannel>(Arena*);
template<> GRPC_EXPORT ::grpc::channelz::v1::SubchannelRef* Arena::CreateMaybeMessage<::grpc::channelz::v1::SubchannelRef>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc {
namespace channelz {
namespace v1 {

enum ChannelConnectivityState_State : int {
  ChannelConnectivityState_State_UNKNOWN = 0,
  ChannelConnectivityState_State_IDLE = 1,
  ChannelConnectivityState_State_CONNECTING = 2,
  ChannelConnectivityState_State_READY = 3,
  ChannelConnectivityState_State_TRANSIENT_FAILURE = 4,
  ChannelConnectivityState_State_SHUTDOWN = 5,
  ChannelConnectivityState_State_ChannelConnectivityState_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChannelConnectivityState_State_ChannelConnectivityState_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
GRPC_EXPORT bool ChannelConnectivityState_State_IsValid(int value);
constexpr ChannelConnectivityState_State ChannelConnectivityState_State_State_MIN = ChannelConnectivityState_State_UNKNOWN;
constexpr ChannelConnectivityState_State ChannelConnectivityState_State_State_MAX = ChannelConnectivityState_State_SHUTDOWN;
constexpr int ChannelConnectivityState_State_State_ARRAYSIZE = ChannelConnectivityState_State_State_MAX + 1;

GRPC_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelConnectivityState_State_descriptor();
template<typename T>
inline const std::string& ChannelConnectivityState_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelConnectivityState_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelConnectivityState_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelConnectivityState_State_descriptor(), enum_t_value);
}
inline bool ChannelConnectivityState_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChannelConnectivityState_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelConnectivityState_State>(
    ChannelConnectivityState_State_descriptor(), name, value);
}
enum ChannelTraceEvent_Severity : int {
  ChannelTraceEvent_Severity_CT_UNKNOWN = 0,
  ChannelTraceEvent_Severity_CT_INFO = 1,
  ChannelTraceEvent_Severity_CT_WARNING = 2,
  ChannelTraceEvent_Severity_CT_ERROR = 3,
  ChannelTraceEvent_Severity_ChannelTraceEvent_Severity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChannelTraceEvent_Severity_ChannelTraceEvent_Severity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
GRPC_EXPORT bool ChannelTraceEvent_Severity_IsValid(int value);
constexpr ChannelTraceEvent_Severity ChannelTraceEvent_Severity_Severity_MIN = ChannelTraceEvent_Severity_CT_UNKNOWN;
constexpr ChannelTraceEvent_Severity ChannelTraceEvent_Severity_Severity_MAX = ChannelTraceEvent_Severity_CT_ERROR;
constexpr int ChannelTraceEvent_Severity_Severity_ARRAYSIZE = ChannelTraceEvent_Severity_Severity_MAX + 1;

GRPC_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelTraceEvent_Severity_descriptor();
template<typename T>
inline const std::string& ChannelTraceEvent_Severity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelTraceEvent_Severity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelTraceEvent_Severity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelTraceEvent_Severity_descriptor(), enum_t_value);
}
inline bool ChannelTraceEvent_Severity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChannelTraceEvent_Severity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelTraceEvent_Severity>(
    ChannelTraceEvent_Severity_descriptor(), name, value);
}
// ===================================================================

class GRPC_EXPORT Channel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.Channel) */ {
 public:
  inline Channel() : Channel(nullptr) {}
  ~Channel() override;
  explicit constexpr Channel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Channel(const Channel& from);
  Channel(Channel&& from) noexcept
    : Channel() {
    *this = ::std::move(from);
  }

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channel& operator=(Channel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Channel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Channel* internal_default_instance() {
    return reinterpret_cast<const Channel*>(
               &_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Channel& a, Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Channel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Channel* New() const final {
    return new Channel();
  }

  Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Channel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Channel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Channel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.Channel";
  }
  protected:
  explicit Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelRefFieldNumber = 3,
    kSubchannelRefFieldNumber = 4,
    kSocketRefFieldNumber = 5,
    kRefFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  int channel_ref_size() const;
  private:
  int _internal_channel_ref_size() const;
  public:
  void clear_channel_ref();
  ::grpc::channelz::v1::ChannelRef* mutable_channel_ref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelRef >*
      mutable_channel_ref();
  private:
  const ::grpc::channelz::v1::ChannelRef& _internal_channel_ref(int index) const;
  ::grpc::channelz::v1::ChannelRef* _internal_add_channel_ref();
  public:
  const ::grpc::channelz::v1::ChannelRef& channel_ref(int index) const;
  ::grpc::channelz::v1::ChannelRef* add_channel_ref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelRef >&
      channel_ref() const;

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  int subchannel_ref_size() const;
  private:
  int _internal_subchannel_ref_size() const;
  public:
  void clear_subchannel_ref();
  ::grpc::channelz::v1::SubchannelRef* mutable_subchannel_ref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SubchannelRef >*
      mutable_subchannel_ref();
  private:
  const ::grpc::channelz::v1::SubchannelRef& _internal_subchannel_ref(int index) const;
  ::grpc::channelz::v1::SubchannelRef* _internal_add_subchannel_ref();
  public:
  const ::grpc::channelz::v1::SubchannelRef& subchannel_ref(int index) const;
  ::grpc::channelz::v1::SubchannelRef* add_subchannel_ref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SubchannelRef >&
      subchannel_ref() const;

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  int socket_ref_size() const;
  private:
  int _internal_socket_ref_size() const;
  public:
  void clear_socket_ref();
  ::grpc::channelz::v1::SocketRef* mutable_socket_ref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >*
      mutable_socket_ref();
  private:
  const ::grpc::channelz::v1::SocketRef& _internal_socket_ref(int index) const;
  ::grpc::channelz::v1::SocketRef* _internal_add_socket_ref();
  public:
  const ::grpc::channelz::v1::SocketRef& socket_ref(int index) const;
  ::grpc::channelz::v1::SocketRef* add_socket_ref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >&
      socket_ref() const;

  // .grpc.channelz.v1.ChannelRef ref = 1;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::grpc::channelz::v1::ChannelRef& ref() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::ChannelRef* release_ref();
  ::grpc::channelz::v1::ChannelRef* mutable_ref();
  void set_allocated_ref(::grpc::channelz::v1::ChannelRef* ref);
  private:
  const ::grpc::channelz::v1::ChannelRef& _internal_ref() const;
  ::grpc::channelz::v1::ChannelRef* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::grpc::channelz::v1::ChannelRef* ref);
  ::grpc::channelz::v1::ChannelRef* unsafe_arena_release_ref();

  // .grpc.channelz.v1.ChannelData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc::channelz::v1::ChannelData& data() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::ChannelData* release_data();
  ::grpc::channelz::v1::ChannelData* mutable_data();
  void set_allocated_data(::grpc::channelz::v1::ChannelData* data);
  private:
  const ::grpc::channelz::v1::ChannelData& _internal_data() const;
  ::grpc::channelz::v1::ChannelData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc::channelz::v1::ChannelData* data);
  ::grpc::channelz::v1::ChannelData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelRef > channel_ref_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SubchannelRef > subchannel_ref_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef > socket_ref_;
  ::grpc::channelz::v1::ChannelRef* ref_;
  ::grpc::channelz::v1::ChannelData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Subchannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.Subchannel) */ {
 public:
  inline Subchannel() : Subchannel(nullptr) {}
  ~Subchannel() override;
  explicit constexpr Subchannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subchannel(const Subchannel& from);
  Subchannel(Subchannel&& from) noexcept
    : Subchannel() {
    *this = ::std::move(from);
  }

  inline Subchannel& operator=(const Subchannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subchannel& operator=(Subchannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subchannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subchannel* internal_default_instance() {
    return reinterpret_cast<const Subchannel*>(
               &_Subchannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Subchannel& a, Subchannel& b) {
    a.Swap(&b);
  }
  inline void Swap(Subchannel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subchannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subchannel* New() const final {
    return new Subchannel();
  }

  Subchannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subchannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Subchannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Subchannel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subchannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.Subchannel";
  }
  protected:
  explicit Subchannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelRefFieldNumber = 3,
    kSubchannelRefFieldNumber = 4,
    kSocketRefFieldNumber = 5,
    kRefFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  int channel_ref_size() const;
  private:
  int _internal_channel_ref_size() const;
  public:
  void clear_channel_ref();
  ::grpc::channelz::v1::ChannelRef* mutable_channel_ref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelRef >*
      mutable_channel_ref();
  private:
  const ::grpc::channelz::v1::ChannelRef& _internal_channel_ref(int index) const;
  ::grpc::channelz::v1::ChannelRef* _internal_add_channel_ref();
  public:
  const ::grpc::channelz::v1::ChannelRef& channel_ref(int index) const;
  ::grpc::channelz::v1::ChannelRef* add_channel_ref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelRef >&
      channel_ref() const;

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  int subchannel_ref_size() const;
  private:
  int _internal_subchannel_ref_size() const;
  public:
  void clear_subchannel_ref();
  ::grpc::channelz::v1::SubchannelRef* mutable_subchannel_ref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SubchannelRef >*
      mutable_subchannel_ref();
  private:
  const ::grpc::channelz::v1::SubchannelRef& _internal_subchannel_ref(int index) const;
  ::grpc::channelz::v1::SubchannelRef* _internal_add_subchannel_ref();
  public:
  const ::grpc::channelz::v1::SubchannelRef& subchannel_ref(int index) const;
  ::grpc::channelz::v1::SubchannelRef* add_subchannel_ref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SubchannelRef >&
      subchannel_ref() const;

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  int socket_ref_size() const;
  private:
  int _internal_socket_ref_size() const;
  public:
  void clear_socket_ref();
  ::grpc::channelz::v1::SocketRef* mutable_socket_ref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >*
      mutable_socket_ref();
  private:
  const ::grpc::channelz::v1::SocketRef& _internal_socket_ref(int index) const;
  ::grpc::channelz::v1::SocketRef* _internal_add_socket_ref();
  public:
  const ::grpc::channelz::v1::SocketRef& socket_ref(int index) const;
  ::grpc::channelz::v1::SocketRef* add_socket_ref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >&
      socket_ref() const;

  // .grpc.channelz.v1.SubchannelRef ref = 1;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::grpc::channelz::v1::SubchannelRef& ref() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::SubchannelRef* release_ref();
  ::grpc::channelz::v1::SubchannelRef* mutable_ref();
  void set_allocated_ref(::grpc::channelz::v1::SubchannelRef* ref);
  private:
  const ::grpc::channelz::v1::SubchannelRef& _internal_ref() const;
  ::grpc::channelz::v1::SubchannelRef* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::grpc::channelz::v1::SubchannelRef* ref);
  ::grpc::channelz::v1::SubchannelRef* unsafe_arena_release_ref();

  // .grpc.channelz.v1.ChannelData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc::channelz::v1::ChannelData& data() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::ChannelData* release_data();
  ::grpc::channelz::v1::ChannelData* mutable_data();
  void set_allocated_data(::grpc::channelz::v1::ChannelData* data);
  private:
  const ::grpc::channelz::v1::ChannelData& _internal_data() const;
  ::grpc::channelz::v1::ChannelData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc::channelz::v1::ChannelData* data);
  ::grpc::channelz::v1::ChannelData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.Subchannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelRef > channel_ref_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SubchannelRef > subchannel_ref_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef > socket_ref_;
  ::grpc::channelz::v1::SubchannelRef* ref_;
  ::grpc::channelz::v1::ChannelData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT ChannelConnectivityState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.ChannelConnectivityState) */ {
 public:
  inline ChannelConnectivityState() : ChannelConnectivityState(nullptr) {}
  ~ChannelConnectivityState() override;
  explicit constexpr ChannelConnectivityState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelConnectivityState(const ChannelConnectivityState& from);
  ChannelConnectivityState(ChannelConnectivityState&& from) noexcept
    : ChannelConnectivityState() {
    *this = ::std::move(from);
  }

  inline ChannelConnectivityState& operator=(const ChannelConnectivityState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelConnectivityState& operator=(ChannelConnectivityState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelConnectivityState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelConnectivityState* internal_default_instance() {
    return reinterpret_cast<const ChannelConnectivityState*>(
               &_ChannelConnectivityState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChannelConnectivityState& a, ChannelConnectivityState& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelConnectivityState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelConnectivityState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelConnectivityState* New() const final {
    return new ChannelConnectivityState();
  }

  ChannelConnectivityState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelConnectivityState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelConnectivityState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelConnectivityState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelConnectivityState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.ChannelConnectivityState";
  }
  protected:
  explicit ChannelConnectivityState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChannelConnectivityState_State State;
  static constexpr State UNKNOWN =
    ChannelConnectivityState_State_UNKNOWN;
  static constexpr State IDLE =
    ChannelConnectivityState_State_IDLE;
  static constexpr State CONNECTING =
    ChannelConnectivityState_State_CONNECTING;
  static constexpr State READY =
    ChannelConnectivityState_State_READY;
  static constexpr State TRANSIENT_FAILURE =
    ChannelConnectivityState_State_TRANSIENT_FAILURE;
  static constexpr State SHUTDOWN =
    ChannelConnectivityState_State_SHUTDOWN;
  static inline bool State_IsValid(int value) {
    return ChannelConnectivityState_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ChannelConnectivityState_State_State_MIN;
  static constexpr State State_MAX =
    ChannelConnectivityState_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ChannelConnectivityState_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ChannelConnectivityState_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ChannelConnectivityState_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ChannelConnectivityState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .grpc.channelz.v1.ChannelConnectivityState.State state = 1;
  void clear_state();
  ::grpc::channelz::v1::ChannelConnectivityState_State state() const;
  void set_state(::grpc::channelz::v1::ChannelConnectivityState_State value);
  private:
  ::grpc::channelz::v1::ChannelConnectivityState_State _internal_state() const;
  void _internal_set_state(::grpc::channelz::v1::ChannelConnectivityState_State value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.ChannelConnectivityState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT ChannelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.ChannelData) */ {
 public:
  inline ChannelData() : ChannelData(nullptr) {}
  ~ChannelData() override;
  explicit constexpr ChannelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelData(const ChannelData& from);
  ChannelData(ChannelData&& from) noexcept
    : ChannelData() {
    *this = ::std::move(from);
  }

  inline ChannelData& operator=(const ChannelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelData& operator=(ChannelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelData* internal_default_instance() {
    return reinterpret_cast<const ChannelData*>(
               &_ChannelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChannelData& a, ChannelData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelData* New() const final {
    return new ChannelData();
  }

  ChannelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.ChannelData";
  }
  protected:
  explicit ChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 2,
    kStateFieldNumber = 1,
    kTraceFieldNumber = 3,
    kLastCallStartedTimestampFieldNumber = 7,
    kCallsStartedFieldNumber = 4,
    kCallsSucceededFieldNumber = 5,
    kCallsFailedFieldNumber = 6,
  };
  // string target = 2;
  void clear_target();
  const std::string& target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target();
  PROTOBUF_MUST_USE_RESULT std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // .grpc.channelz.v1.ChannelConnectivityState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::grpc::channelz::v1::ChannelConnectivityState& state() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::ChannelConnectivityState* release_state();
  ::grpc::channelz::v1::ChannelConnectivityState* mutable_state();
  void set_allocated_state(::grpc::channelz::v1::ChannelConnectivityState* state);
  private:
  const ::grpc::channelz::v1::ChannelConnectivityState& _internal_state() const;
  ::grpc::channelz::v1::ChannelConnectivityState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::grpc::channelz::v1::ChannelConnectivityState* state);
  ::grpc::channelz::v1::ChannelConnectivityState* unsafe_arena_release_state();

  // .grpc.channelz.v1.ChannelTrace trace = 3;
  bool has_trace() const;
  private:
  bool _internal_has_trace() const;
  public:
  void clear_trace();
  const ::grpc::channelz::v1::ChannelTrace& trace() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::ChannelTrace* release_trace();
  ::grpc::channelz::v1::ChannelTrace* mutable_trace();
  void set_allocated_trace(::grpc::channelz::v1::ChannelTrace* trace);
  private:
  const ::grpc::channelz::v1::ChannelTrace& _internal_trace() const;
  ::grpc::channelz::v1::ChannelTrace* _internal_mutable_trace();
  public:
  void unsafe_arena_set_allocated_trace(
      ::grpc::channelz::v1::ChannelTrace* trace);
  ::grpc::channelz::v1::ChannelTrace* unsafe_arena_release_trace();

  // .google.protobuf.Timestamp last_call_started_timestamp = 7;
  bool has_last_call_started_timestamp() const;
  private:
  bool _internal_has_last_call_started_timestamp() const;
  public:
  void clear_last_call_started_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_call_started_timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_last_call_started_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_call_started_timestamp();
  void set_allocated_last_call_started_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* last_call_started_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_call_started_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_call_started_timestamp();
  public:
  void unsafe_arena_set_allocated_last_call_started_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_call_started_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_call_started_timestamp();

  // int64 calls_started = 4;
  void clear_calls_started();
  ::PROTOBUF_NAMESPACE_ID::int64 calls_started() const;
  void set_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_calls_started() const;
  void _internal_set_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 calls_succeeded = 5;
  void clear_calls_succeeded();
  ::PROTOBUF_NAMESPACE_ID::int64 calls_succeeded() const;
  void set_calls_succeeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_calls_succeeded() const;
  void _internal_set_calls_succeeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 calls_failed = 6;
  void clear_calls_failed();
  ::PROTOBUF_NAMESPACE_ID::int64 calls_failed() const;
  void set_calls_failed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_calls_failed() const;
  void _internal_set_calls_failed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.ChannelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::grpc::channelz::v1::ChannelConnectivityState* state_;
  ::grpc::channelz::v1::ChannelTrace* trace_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_call_started_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 calls_started_;
  ::PROTOBUF_NAMESPACE_ID::int64 calls_succeeded_;
  ::PROTOBUF_NAMESPACE_ID::int64 calls_failed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT ChannelTraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.ChannelTraceEvent) */ {
 public:
  inline ChannelTraceEvent() : ChannelTraceEvent(nullptr) {}
  ~ChannelTraceEvent() override;
  explicit constexpr ChannelTraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelTraceEvent(const ChannelTraceEvent& from);
  ChannelTraceEvent(ChannelTraceEvent&& from) noexcept
    : ChannelTraceEvent() {
    *this = ::std::move(from);
  }

  inline ChannelTraceEvent& operator=(const ChannelTraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelTraceEvent& operator=(ChannelTraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelTraceEvent& default_instance() {
    return *internal_default_instance();
  }
  enum ChildRefCase {
    kChannelRef = 4,
    kSubchannelRef = 5,
    CHILD_REF_NOT_SET = 0,
  };

  static inline const ChannelTraceEvent* internal_default_instance() {
    return reinterpret_cast<const ChannelTraceEvent*>(
               &_ChannelTraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChannelTraceEvent& a, ChannelTraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelTraceEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelTraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelTraceEvent* New() const final {
    return new ChannelTraceEvent();
  }

  ChannelTraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelTraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelTraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelTraceEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelTraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.ChannelTraceEvent";
  }
  protected:
  explicit ChannelTraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChannelTraceEvent_Severity Severity;
  static constexpr Severity CT_UNKNOWN =
    ChannelTraceEvent_Severity_CT_UNKNOWN;
  static constexpr Severity CT_INFO =
    ChannelTraceEvent_Severity_CT_INFO;
  static constexpr Severity CT_WARNING =
    ChannelTraceEvent_Severity_CT_WARNING;
  static constexpr Severity CT_ERROR =
    ChannelTraceEvent_Severity_CT_ERROR;
  static inline bool Severity_IsValid(int value) {
    return ChannelTraceEvent_Severity_IsValid(value);
  }
  static constexpr Severity Severity_MIN =
    ChannelTraceEvent_Severity_Severity_MIN;
  static constexpr Severity Severity_MAX =
    ChannelTraceEvent_Severity_Severity_MAX;
  static constexpr int Severity_ARRAYSIZE =
    ChannelTraceEvent_Severity_Severity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Severity_descriptor() {
    return ChannelTraceEvent_Severity_descriptor();
  }
  template<typename T>
  static inline const std::string& Severity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Severity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Severity_Name.");
    return ChannelTraceEvent_Severity_Name(enum_t_value);
  }
  static inline bool Severity_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Severity* value) {
    return ChannelTraceEvent_Severity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kSeverityFieldNumber = 2,
    kChannelRefFieldNumber = 4,
    kSubchannelRefFieldNumber = 5,
  };
  // string description = 1;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .grpc.channelz.v1.ChannelTraceEvent.Severity severity = 2;
  void clear_severity();
  ::grpc::channelz::v1::ChannelTraceEvent_Severity severity() const;
  void set_severity(::grpc::channelz::v1::ChannelTraceEvent_Severity value);
  private:
  ::grpc::channelz::v1::ChannelTraceEvent_Severity _internal_severity() const;
  void _internal_set_severity(::grpc::channelz::v1::ChannelTraceEvent_Severity value);
  public:

  // .grpc.channelz.v1.ChannelRef channel_ref = 4;
  bool has_channel_ref() const;
  private:
  bool _internal_has_channel_ref() const;
  public:
  void clear_channel_ref();
  const ::grpc::channelz::v1::ChannelRef& channel_ref() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::ChannelRef* release_channel_ref();
  ::grpc::channelz::v1::ChannelRef* mutable_channel_ref();
  void set_allocated_channel_ref(::grpc::channelz::v1::ChannelRef* channel_ref);
  private:
  const ::grpc::channelz::v1::ChannelRef& _internal_channel_ref() const;
  ::grpc::channelz::v1::ChannelRef* _internal_mutable_channel_ref();
  public:
  void unsafe_arena_set_allocated_channel_ref(
      ::grpc::channelz::v1::ChannelRef* channel_ref);
  ::grpc::channelz::v1::ChannelRef* unsafe_arena_release_channel_ref();

  // .grpc.channelz.v1.SubchannelRef subchannel_ref = 5;
  bool has_subchannel_ref() const;
  private:
  bool _internal_has_subchannel_ref() const;
  public:
  void clear_subchannel_ref();
  const ::grpc::channelz::v1::SubchannelRef& subchannel_ref() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::SubchannelRef* release_subchannel_ref();
  ::grpc::channelz::v1::SubchannelRef* mutable_subchannel_ref();
  void set_allocated_subchannel_ref(::grpc::channelz::v1::SubchannelRef* subchannel_ref);
  private:
  const ::grpc::channelz::v1::SubchannelRef& _internal_subchannel_ref() const;
  ::grpc::channelz::v1::SubchannelRef* _internal_mutable_subchannel_ref();
  public:
  void unsafe_arena_set_allocated_subchannel_ref(
      ::grpc::channelz::v1::SubchannelRef* subchannel_ref);
  ::grpc::channelz::v1::SubchannelRef* unsafe_arena_release_subchannel_ref();

  void clear_child_ref();
  ChildRefCase child_ref_case() const;
  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.ChannelTraceEvent)
 private:
  class _Internal;
  void set_has_channel_ref();
  void set_has_subchannel_ref();

  inline bool has_child_ref() const;
  inline void clear_has_child_ref();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  int severity_;
  union ChildRefUnion {
    constexpr ChildRefUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::grpc::channelz::v1::ChannelRef* channel_ref_;
    ::grpc::channelz::v1::SubchannelRef* subchannel_ref_;
  } child_ref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT ChannelTrace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.ChannelTrace) */ {
 public:
  inline ChannelTrace() : ChannelTrace(nullptr) {}
  ~ChannelTrace() override;
  explicit constexpr ChannelTrace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelTrace(const ChannelTrace& from);
  ChannelTrace(ChannelTrace&& from) noexcept
    : ChannelTrace() {
    *this = ::std::move(from);
  }

  inline ChannelTrace& operator=(const ChannelTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelTrace& operator=(ChannelTrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelTrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelTrace* internal_default_instance() {
    return reinterpret_cast<const ChannelTrace*>(
               &_ChannelTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChannelTrace& a, ChannelTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelTrace* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelTrace* New() const final {
    return new ChannelTrace();
  }

  ChannelTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelTrace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelTrace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelTrace& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.ChannelTrace";
  }
  protected:
  explicit ChannelTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 3,
    kCreationTimestampFieldNumber = 2,
    kNumEventsLoggedFieldNumber = 1,
  };
  // repeated .grpc.channelz.v1.ChannelTraceEvent events = 3;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::grpc::channelz::v1::ChannelTraceEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelTraceEvent >*
      mutable_events();
  private:
  const ::grpc::channelz::v1::ChannelTraceEvent& _internal_events(int index) const;
  ::grpc::channelz::v1::ChannelTraceEvent* _internal_add_events();
  public:
  const ::grpc::channelz::v1::ChannelTraceEvent& events(int index) const;
  ::grpc::channelz::v1::ChannelTraceEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelTraceEvent >&
      events() const;

  // .google.protobuf.Timestamp creation_timestamp = 2;
  bool has_creation_timestamp() const;
  private:
  bool _internal_has_creation_timestamp() const;
  public:
  void clear_creation_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& creation_timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_creation_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_creation_timestamp();
  void set_allocated_creation_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* creation_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_creation_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_creation_timestamp();
  public:
  void unsafe_arena_set_allocated_creation_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* creation_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_creation_timestamp();

  // int64 num_events_logged = 1;
  void clear_num_events_logged();
  ::PROTOBUF_NAMESPACE_ID::int64 num_events_logged() const;
  void set_num_events_logged(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_events_logged() const;
  void _internal_set_num_events_logged(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.ChannelTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelTraceEvent > events_;
  PROTOBUF_NAMESPACE_ID::Timestamp* creation_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_events_logged_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT ChannelRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.ChannelRef) */ {
 public:
  inline ChannelRef() : ChannelRef(nullptr) {}
  ~ChannelRef() override;
  explicit constexpr ChannelRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelRef(const ChannelRef& from);
  ChannelRef(ChannelRef&& from) noexcept
    : ChannelRef() {
    *this = ::std::move(from);
  }

  inline ChannelRef& operator=(const ChannelRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelRef& operator=(ChannelRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelRef* internal_default_instance() {
    return reinterpret_cast<const ChannelRef*>(
               &_ChannelRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChannelRef& a, ChannelRef& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelRef* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelRef* New() const final {
    return new ChannelRef();
  }

  ChannelRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelRef& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.ChannelRef";
  }
  protected:
  explicit ChannelRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kChannelIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.ChannelRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT SubchannelRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.SubchannelRef) */ {
 public:
  inline SubchannelRef() : SubchannelRef(nullptr) {}
  ~SubchannelRef() override;
  explicit constexpr SubchannelRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubchannelRef(const SubchannelRef& from);
  SubchannelRef(SubchannelRef&& from) noexcept
    : SubchannelRef() {
    *this = ::std::move(from);
  }

  inline SubchannelRef& operator=(const SubchannelRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubchannelRef& operator=(SubchannelRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubchannelRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubchannelRef* internal_default_instance() {
    return reinterpret_cast<const SubchannelRef*>(
               &_SubchannelRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SubchannelRef& a, SubchannelRef& b) {
    a.Swap(&b);
  }
  inline void Swap(SubchannelRef* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubchannelRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubchannelRef* New() const final {
    return new SubchannelRef();
  }

  SubchannelRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubchannelRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubchannelRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubchannelRef& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubchannelRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.SubchannelRef";
  }
  protected:
  explicit SubchannelRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 8,
    kSubchannelIdFieldNumber = 7,
  };
  // string name = 8;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 subchannel_id = 7;
  void clear_subchannel_id();
  ::PROTOBUF_NAMESPACE_ID::int64 subchannel_id() const;
  void set_subchannel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_subchannel_id() const;
  void _internal_set_subchannel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.SubchannelRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 subchannel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT SocketRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.SocketRef) */ {
 public:
  inline SocketRef() : SocketRef(nullptr) {}
  ~SocketRef() override;
  explicit constexpr SocketRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SocketRef(const SocketRef& from);
  SocketRef(SocketRef&& from) noexcept
    : SocketRef() {
    *this = ::std::move(from);
  }

  inline SocketRef& operator=(const SocketRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketRef& operator=(SocketRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketRef* internal_default_instance() {
    return reinterpret_cast<const SocketRef*>(
               &_SocketRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SocketRef& a, SocketRef& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketRef* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SocketRef* New() const final {
    return new SocketRef();
  }

  SocketRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SocketRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SocketRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SocketRef& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.SocketRef";
  }
  protected:
  explicit SocketRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kSocketIdFieldNumber = 3,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 socket_id = 3;
  void clear_socket_id();
  ::PROTOBUF_NAMESPACE_ID::int64 socket_id() const;
  void set_socket_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_socket_id() const;
  void _internal_set_socket_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.SocketRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 socket_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT ServerRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.ServerRef) */ {
 public:
  inline ServerRef() : ServerRef(nullptr) {}
  ~ServerRef() override;
  explicit constexpr ServerRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerRef(const ServerRef& from);
  ServerRef(ServerRef&& from) noexcept
    : ServerRef() {
    *this = ::std::move(from);
  }

  inline ServerRef& operator=(const ServerRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerRef& operator=(ServerRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerRef* internal_default_instance() {
    return reinterpret_cast<const ServerRef*>(
               &_ServerRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ServerRef& a, ServerRef& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerRef* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerRef* New() const final {
    return new ServerRef();
  }

  ServerRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerRef& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.ServerRef";
  }
  protected:
  explicit ServerRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 6,
    kServerIdFieldNumber = 5,
  };
  // string name = 6;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 server_id = 5;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.ServerRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Server final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.Server) */ {
 public:
  inline Server() : Server(nullptr) {}
  ~Server() override;
  explicit constexpr Server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Server(const Server& from);
  Server(Server&& from) noexcept
    : Server() {
    *this = ::std::move(from);
  }

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server& operator=(Server&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Server& default_instance() {
    return *internal_default_instance();
  }
  static inline const Server* internal_default_instance() {
    return reinterpret_cast<const Server*>(
               &_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Server& a, Server& b) {
    a.Swap(&b);
  }
  inline void Swap(Server* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server* New() const final {
    return new Server();
  }

  Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Server& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Server& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.Server";
  }
  protected:
  explicit Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenSocketFieldNumber = 3,
    kRefFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // repeated .grpc.channelz.v1.SocketRef listen_socket = 3;
  int listen_socket_size() const;
  private:
  int _internal_listen_socket_size() const;
  public:
  void clear_listen_socket();
  ::grpc::channelz::v1::SocketRef* mutable_listen_socket(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >*
      mutable_listen_socket();
  private:
  const ::grpc::channelz::v1::SocketRef& _internal_listen_socket(int index) const;
  ::grpc::channelz::v1::SocketRef* _internal_add_listen_socket();
  public:
  const ::grpc::channelz::v1::SocketRef& listen_socket(int index) const;
  ::grpc::channelz::v1::SocketRef* add_listen_socket();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >&
      listen_socket() const;

  // .grpc.channelz.v1.ServerRef ref = 1;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::grpc::channelz::v1::ServerRef& ref() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::ServerRef* release_ref();
  ::grpc::channelz::v1::ServerRef* mutable_ref();
  void set_allocated_ref(::grpc::channelz::v1::ServerRef* ref);
  private:
  const ::grpc::channelz::v1::ServerRef& _internal_ref() const;
  ::grpc::channelz::v1::ServerRef* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::grpc::channelz::v1::ServerRef* ref);
  ::grpc::channelz::v1::ServerRef* unsafe_arena_release_ref();

  // .grpc.channelz.v1.ServerData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc::channelz::v1::ServerData& data() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::ServerData* release_data();
  ::grpc::channelz::v1::ServerData* mutable_data();
  void set_allocated_data(::grpc::channelz::v1::ServerData* data);
  private:
  const ::grpc::channelz::v1::ServerData& _internal_data() const;
  ::grpc::channelz::v1::ServerData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc::channelz::v1::ServerData* data);
  ::grpc::channelz::v1::ServerData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.Server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef > listen_socket_;
  ::grpc::channelz::v1::ServerRef* ref_;
  ::grpc::channelz::v1::ServerData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT ServerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.ServerData) */ {
 public:
  inline ServerData() : ServerData(nullptr) {}
  ~ServerData() override;
  explicit constexpr ServerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerData(const ServerData& from);
  ServerData(ServerData&& from) noexcept
    : ServerData() {
    *this = ::std::move(from);
  }

  inline ServerData& operator=(const ServerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerData& operator=(ServerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerData* internal_default_instance() {
    return reinterpret_cast<const ServerData*>(
               &_ServerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ServerData& a, ServerData& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerData* New() const final {
    return new ServerData();
  }

  ServerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.ServerData";
  }
  protected:
  explicit ServerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceFieldNumber = 1,
    kLastCallStartedTimestampFieldNumber = 5,
    kCallsStartedFieldNumber = 2,
    kCallsSucceededFieldNumber = 3,
    kCallsFailedFieldNumber = 4,
  };
  // .grpc.channelz.v1.ChannelTrace trace = 1;
  bool has_trace() const;
  private:
  bool _internal_has_trace() const;
  public:
  void clear_trace();
  const ::grpc::channelz::v1::ChannelTrace& trace() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::ChannelTrace* release_trace();
  ::grpc::channelz::v1::ChannelTrace* mutable_trace();
  void set_allocated_trace(::grpc::channelz::v1::ChannelTrace* trace);
  private:
  const ::grpc::channelz::v1::ChannelTrace& _internal_trace() const;
  ::grpc::channelz::v1::ChannelTrace* _internal_mutable_trace();
  public:
  void unsafe_arena_set_allocated_trace(
      ::grpc::channelz::v1::ChannelTrace* trace);
  ::grpc::channelz::v1::ChannelTrace* unsafe_arena_release_trace();

  // .google.protobuf.Timestamp last_call_started_timestamp = 5;
  bool has_last_call_started_timestamp() const;
  private:
  bool _internal_has_last_call_started_timestamp() const;
  public:
  void clear_last_call_started_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_call_started_timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_last_call_started_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_call_started_timestamp();
  void set_allocated_last_call_started_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* last_call_started_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_call_started_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_call_started_timestamp();
  public:
  void unsafe_arena_set_allocated_last_call_started_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_call_started_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_call_started_timestamp();

  // int64 calls_started = 2;
  void clear_calls_started();
  ::PROTOBUF_NAMESPACE_ID::int64 calls_started() const;
  void set_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_calls_started() const;
  void _internal_set_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 calls_succeeded = 3;
  void clear_calls_succeeded();
  ::PROTOBUF_NAMESPACE_ID::int64 calls_succeeded() const;
  void set_calls_succeeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_calls_succeeded() const;
  void _internal_set_calls_succeeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 calls_failed = 4;
  void clear_calls_failed();
  ::PROTOBUF_NAMESPACE_ID::int64 calls_failed() const;
  void set_calls_failed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_calls_failed() const;
  void _internal_set_calls_failed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.ServerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc::channelz::v1::ChannelTrace* trace_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_call_started_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 calls_started_;
  ::PROTOBUF_NAMESPACE_ID::int64 calls_succeeded_;
  ::PROTOBUF_NAMESPACE_ID::int64 calls_failed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Socket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.Socket) */ {
 public:
  inline Socket() : Socket(nullptr) {}
  ~Socket() override;
  explicit constexpr Socket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Socket(const Socket& from);
  Socket(Socket&& from) noexcept
    : Socket() {
    *this = ::std::move(from);
  }

  inline Socket& operator=(const Socket& from) {
    CopyFrom(from);
    return *this;
  }
  inline Socket& operator=(Socket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Socket& default_instance() {
    return *internal_default_instance();
  }
  static inline const Socket* internal_default_instance() {
    return reinterpret_cast<const Socket*>(
               &_Socket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Socket& a, Socket& b) {
    a.Swap(&b);
  }
  inline void Swap(Socket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Socket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Socket* New() const final {
    return new Socket();
  }

  Socket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Socket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Socket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Socket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Socket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.Socket";
  }
  protected:
  explicit Socket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteNameFieldNumber = 6,
    kRefFieldNumber = 1,
    kDataFieldNumber = 2,
    kLocalFieldNumber = 3,
    kRemoteFieldNumber = 4,
    kSecurityFieldNumber = 5,
  };
  // string remote_name = 6;
  void clear_remote_name();
  const std::string& remote_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_remote_name();
  void set_allocated_remote_name(std::string* remote_name);
  private:
  const std::string& _internal_remote_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_name(const std::string& value);
  std::string* _internal_mutable_remote_name();
  public:

  // .grpc.channelz.v1.SocketRef ref = 1;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::grpc::channelz::v1::SocketRef& ref() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::SocketRef* release_ref();
  ::grpc::channelz::v1::SocketRef* mutable_ref();
  void set_allocated_ref(::grpc::channelz::v1::SocketRef* ref);
  private:
  const ::grpc::channelz::v1::SocketRef& _internal_ref() const;
  ::grpc::channelz::v1::SocketRef* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::grpc::channelz::v1::SocketRef* ref);
  ::grpc::channelz::v1::SocketRef* unsafe_arena_release_ref();

  // .grpc.channelz.v1.SocketData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc::channelz::v1::SocketData& data() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::SocketData* release_data();
  ::grpc::channelz::v1::SocketData* mutable_data();
  void set_allocated_data(::grpc::channelz::v1::SocketData* data);
  private:
  const ::grpc::channelz::v1::SocketData& _internal_data() const;
  ::grpc::channelz::v1::SocketData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc::channelz::v1::SocketData* data);
  ::grpc::channelz::v1::SocketData* unsafe_arena_release_data();

  // .grpc.channelz.v1.Address local = 3;
  bool has_local() const;
  private:
  bool _internal_has_local() const;
  public:
  void clear_local();
  const ::grpc::channelz::v1::Address& local() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::Address* release_local();
  ::grpc::channelz::v1::Address* mutable_local();
  void set_allocated_local(::grpc::channelz::v1::Address* local);
  private:
  const ::grpc::channelz::v1::Address& _internal_local() const;
  ::grpc::channelz::v1::Address* _internal_mutable_local();
  public:
  void unsafe_arena_set_allocated_local(
      ::grpc::channelz::v1::Address* local);
  ::grpc::channelz::v1::Address* unsafe_arena_release_local();

  // .grpc.channelz.v1.Address remote = 4;
  bool has_remote() const;
  private:
  bool _internal_has_remote() const;
  public:
  void clear_remote();
  const ::grpc::channelz::v1::Address& remote() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::Address* release_remote();
  ::grpc::channelz::v1::Address* mutable_remote();
  void set_allocated_remote(::grpc::channelz::v1::Address* remote);
  private:
  const ::grpc::channelz::v1::Address& _internal_remote() const;
  ::grpc::channelz::v1::Address* _internal_mutable_remote();
  public:
  void unsafe_arena_set_allocated_remote(
      ::grpc::channelz::v1::Address* remote);
  ::grpc::channelz::v1::Address* unsafe_arena_release_remote();

  // .grpc.channelz.v1.Security security = 5;
  bool has_security() const;
  private:
  bool _internal_has_security() const;
  public:
  void clear_security();
  const ::grpc::channelz::v1::Security& security() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::Security* release_security();
  ::grpc::channelz::v1::Security* mutable_security();
  void set_allocated_security(::grpc::channelz::v1::Security* security);
  private:
  const ::grpc::channelz::v1::Security& _internal_security() const;
  ::grpc::channelz::v1::Security* _internal_mutable_security();
  public:
  void unsafe_arena_set_allocated_security(
      ::grpc::channelz::v1::Security* security);
  ::grpc::channelz::v1::Security* unsafe_arena_release_security();

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.Socket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_name_;
  ::grpc::channelz::v1::SocketRef* ref_;
  ::grpc::channelz::v1::SocketData* data_;
  ::grpc::channelz::v1::Address* local_;
  ::grpc::channelz::v1::Address* remote_;
  ::grpc::channelz::v1::Security* security_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT SocketData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.SocketData) */ {
 public:
  inline SocketData() : SocketData(nullptr) {}
  ~SocketData() override;
  explicit constexpr SocketData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SocketData(const SocketData& from);
  SocketData(SocketData&& from) noexcept
    : SocketData() {
    *this = ::std::move(from);
  }

  inline SocketData& operator=(const SocketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketData& operator=(SocketData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketData* internal_default_instance() {
    return reinterpret_cast<const SocketData*>(
               &_SocketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SocketData& a, SocketData& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SocketData* New() const final {
    return new SocketData();
  }

  SocketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SocketData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SocketData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SocketData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.SocketData";
  }
  protected:
  explicit SocketData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionFieldNumber = 13,
    kLastLocalStreamCreatedTimestampFieldNumber = 7,
    kLastRemoteStreamCreatedTimestampFieldNumber = 8,
    kLastMessageSentTimestampFieldNumber = 9,
    kLastMessageReceivedTimestampFieldNumber = 10,
    kLocalFlowControlWindowFieldNumber = 11,
    kRemoteFlowControlWindowFieldNumber = 12,
    kStreamsStartedFieldNumber = 1,
    kStreamsSucceededFieldNumber = 2,
    kStreamsFailedFieldNumber = 3,
    kMessagesSentFieldNumber = 4,
    kMessagesReceivedFieldNumber = 5,
    kKeepAlivesSentFieldNumber = 6,
  };
  // repeated .grpc.channelz.v1.SocketOption option = 13;
  int option_size() const;
  private:
  int _internal_option_size() const;
  public:
  void clear_option();
  ::grpc::channelz::v1::SocketOption* mutable_option(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketOption >*
      mutable_option();
  private:
  const ::grpc::channelz::v1::SocketOption& _internal_option(int index) const;
  ::grpc::channelz::v1::SocketOption* _internal_add_option();
  public:
  const ::grpc::channelz::v1::SocketOption& option(int index) const;
  ::grpc::channelz::v1::SocketOption* add_option();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketOption >&
      option() const;

  // .google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
  bool has_last_local_stream_created_timestamp() const;
  private:
  bool _internal_has_last_local_stream_created_timestamp() const;
  public:
  void clear_last_local_stream_created_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_local_stream_created_timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_last_local_stream_created_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_local_stream_created_timestamp();
  void set_allocated_last_local_stream_created_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* last_local_stream_created_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_local_stream_created_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_local_stream_created_timestamp();
  public:
  void unsafe_arena_set_allocated_last_local_stream_created_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_local_stream_created_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_local_stream_created_timestamp();

  // .google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
  bool has_last_remote_stream_created_timestamp() const;
  private:
  bool _internal_has_last_remote_stream_created_timestamp() const;
  public:
  void clear_last_remote_stream_created_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_remote_stream_created_timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_last_remote_stream_created_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_remote_stream_created_timestamp();
  void set_allocated_last_remote_stream_created_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* last_remote_stream_created_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_remote_stream_created_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_remote_stream_created_timestamp();
  public:
  void unsafe_arena_set_allocated_last_remote_stream_created_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_remote_stream_created_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_remote_stream_created_timestamp();

  // .google.protobuf.Timestamp last_message_sent_timestamp = 9;
  bool has_last_message_sent_timestamp() const;
  private:
  bool _internal_has_last_message_sent_timestamp() const;
  public:
  void clear_last_message_sent_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_message_sent_timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_last_message_sent_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_message_sent_timestamp();
  void set_allocated_last_message_sent_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* last_message_sent_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_message_sent_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_message_sent_timestamp();
  public:
  void unsafe_arena_set_allocated_last_message_sent_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_message_sent_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_message_sent_timestamp();

  // .google.protobuf.Timestamp last_message_received_timestamp = 10;
  bool has_last_message_received_timestamp() const;
  private:
  bool _internal_has_last_message_received_timestamp() const;
  public:
  void clear_last_message_received_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_message_received_timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_last_message_received_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_message_received_timestamp();
  void set_allocated_last_message_received_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* last_message_received_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_message_received_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_message_received_timestamp();
  public:
  void unsafe_arena_set_allocated_last_message_received_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_message_received_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_message_received_timestamp();

  // .google.protobuf.Int64Value local_flow_control_window = 11;
  bool has_local_flow_control_window() const;
  private:
  bool _internal_has_local_flow_control_window() const;
  public:
  void clear_local_flow_control_window();
  const PROTOBUF_NAMESPACE_ID::Int64Value& local_flow_control_window() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Int64Value* release_local_flow_control_window();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_local_flow_control_window();
  void set_allocated_local_flow_control_window(PROTOBUF_NAMESPACE_ID::Int64Value* local_flow_control_window);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_local_flow_control_window() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_local_flow_control_window();
  public:
  void unsafe_arena_set_allocated_local_flow_control_window(
      PROTOBUF_NAMESPACE_ID::Int64Value* local_flow_control_window);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_local_flow_control_window();

  // .google.protobuf.Int64Value remote_flow_control_window = 12;
  bool has_remote_flow_control_window() const;
  private:
  bool _internal_has_remote_flow_control_window() const;
  public:
  void clear_remote_flow_control_window();
  const PROTOBUF_NAMESPACE_ID::Int64Value& remote_flow_control_window() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Int64Value* release_remote_flow_control_window();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_remote_flow_control_window();
  void set_allocated_remote_flow_control_window(PROTOBUF_NAMESPACE_ID::Int64Value* remote_flow_control_window);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_remote_flow_control_window() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_remote_flow_control_window();
  public:
  void unsafe_arena_set_allocated_remote_flow_control_window(
      PROTOBUF_NAMESPACE_ID::Int64Value* remote_flow_control_window);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_remote_flow_control_window();

  // int64 streams_started = 1;
  void clear_streams_started();
  ::PROTOBUF_NAMESPACE_ID::int64 streams_started() const;
  void set_streams_started(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_streams_started() const;
  void _internal_set_streams_started(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 streams_succeeded = 2;
  void clear_streams_succeeded();
  ::PROTOBUF_NAMESPACE_ID::int64 streams_succeeded() const;
  void set_streams_succeeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_streams_succeeded() const;
  void _internal_set_streams_succeeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 streams_failed = 3;
  void clear_streams_failed();
  ::PROTOBUF_NAMESPACE_ID::int64 streams_failed() const;
  void set_streams_failed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_streams_failed() const;
  void _internal_set_streams_failed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 messages_sent = 4;
  void clear_messages_sent();
  ::PROTOBUF_NAMESPACE_ID::int64 messages_sent() const;
  void set_messages_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_messages_sent() const;
  void _internal_set_messages_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 messages_received = 5;
  void clear_messages_received();
  ::PROTOBUF_NAMESPACE_ID::int64 messages_received() const;
  void set_messages_received(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_messages_received() const;
  void _internal_set_messages_received(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 keep_alives_sent = 6;
  void clear_keep_alives_sent();
  ::PROTOBUF_NAMESPACE_ID::int64 keep_alives_sent() const;
  void set_keep_alives_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_keep_alives_sent() const;
  void _internal_set_keep_alives_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.SocketData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketOption > option_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_local_stream_created_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_remote_stream_created_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_message_sent_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_message_received_timestamp_;
  PROTOBUF_NAMESPACE_ID::Int64Value* local_flow_control_window_;
  PROTOBUF_NAMESPACE_ID::Int64Value* remote_flow_control_window_;
  ::PROTOBUF_NAMESPACE_ID::int64 streams_started_;
  ::PROTOBUF_NAMESPACE_ID::int64 streams_succeeded_;
  ::PROTOBUF_NAMESPACE_ID::int64 streams_failed_;
  ::PROTOBUF_NAMESPACE_ID::int64 messages_sent_;
  ::PROTOBUF_NAMESPACE_ID::int64 messages_received_;
  ::PROTOBUF_NAMESPACE_ID::int64 keep_alives_sent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Address_TcpIpAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.Address.TcpIpAddress) */ {
 public:
  inline Address_TcpIpAddress() : Address_TcpIpAddress(nullptr) {}
  ~Address_TcpIpAddress() override;
  explicit constexpr Address_TcpIpAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Address_TcpIpAddress(const Address_TcpIpAddress& from);
  Address_TcpIpAddress(Address_TcpIpAddress&& from) noexcept
    : Address_TcpIpAddress() {
    *this = ::std::move(from);
  }

  inline Address_TcpIpAddress& operator=(const Address_TcpIpAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address_TcpIpAddress& operator=(Address_TcpIpAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Address_TcpIpAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const Address_TcpIpAddress* internal_default_instance() {
    return reinterpret_cast<const Address_TcpIpAddress*>(
               &_Address_TcpIpAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Address_TcpIpAddress& a, Address_TcpIpAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(Address_TcpIpAddress* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address_TcpIpAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address_TcpIpAddress* New() const final {
    return new Address_TcpIpAddress();
  }

  Address_TcpIpAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address_TcpIpAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Address_TcpIpAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Address_TcpIpAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address_TcpIpAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.Address.TcpIpAddress";
  }
  protected:
  explicit Address_TcpIpAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // bytes ip_address = 1;
  void clear_ip_address();
  const std::string& ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.Address.TcpIpAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Address_UdsAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.Address.UdsAddress) */ {
 public:
  inline Address_UdsAddress() : Address_UdsAddress(nullptr) {}
  ~Address_UdsAddress() override;
  explicit constexpr Address_UdsAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Address_UdsAddress(const Address_UdsAddress& from);
  Address_UdsAddress(Address_UdsAddress&& from) noexcept
    : Address_UdsAddress() {
    *this = ::std::move(from);
  }

  inline Address_UdsAddress& operator=(const Address_UdsAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address_UdsAddress& operator=(Address_UdsAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Address_UdsAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const Address_UdsAddress* internal_default_instance() {
    return reinterpret_cast<const Address_UdsAddress*>(
               &_Address_UdsAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Address_UdsAddress& a, Address_UdsAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(Address_UdsAddress* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address_UdsAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address_UdsAddress* New() const final {
    return new Address_UdsAddress();
  }

  Address_UdsAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address_UdsAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Address_UdsAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Address_UdsAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address_UdsAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.Address.UdsAddress";
  }
  protected:
  explicit Address_UdsAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.Address.UdsAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Address_OtherAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.Address.OtherAddress) */ {
 public:
  inline Address_OtherAddress() : Address_OtherAddress(nullptr) {}
  ~Address_OtherAddress() override;
  explicit constexpr Address_OtherAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Address_OtherAddress(const Address_OtherAddress& from);
  Address_OtherAddress(Address_OtherAddress&& from) noexcept
    : Address_OtherAddress() {
    *this = ::std::move(from);
  }

  inline Address_OtherAddress& operator=(const Address_OtherAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address_OtherAddress& operator=(Address_OtherAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Address_OtherAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const Address_OtherAddress* internal_default_instance() {
    return reinterpret_cast<const Address_OtherAddress*>(
               &_Address_OtherAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Address_OtherAddress& a, Address_OtherAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(Address_OtherAddress* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address_OtherAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address_OtherAddress* New() const final {
    return new Address_OtherAddress();
  }

  Address_OtherAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address_OtherAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Address_OtherAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Address_OtherAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address_OtherAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.Address.OtherAddress";
  }
  protected:
  explicit Address_OtherAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Any value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const PROTOBUF_NAMESPACE_ID::Any& value() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_value();
  PROTOBUF_NAMESPACE_ID::Any* mutable_value();
  void set_allocated_value(PROTOBUF_NAMESPACE_ID::Any* value);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_value() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      PROTOBUF_NAMESPACE_ID::Any* value);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.Address.OtherAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Any* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.Address) */ {
 public:
  inline Address() : Address(nullptr) {}
  ~Address() override;
  explicit constexpr Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Address& default_instance() {
    return *internal_default_instance();
  }
  enum AddressCase {
    kTcpipAddress = 1,
    kUdsAddress = 2,
    kOtherAddress = 3,
    ADDRESS_NOT_SET = 0,
  };

  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return new Address();
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Address& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.Address";
  }
  protected:
  explicit Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Address_TcpIpAddress TcpIpAddress;
  typedef Address_UdsAddress UdsAddress;
  typedef Address_OtherAddress OtherAddress;

  // accessors -------------------------------------------------------

  enum : int {
    kTcpipAddressFieldNumber = 1,
    kUdsAddressFieldNumber = 2,
    kOtherAddressFieldNumber = 3,
  };
  // .grpc.channelz.v1.Address.TcpIpAddress tcpip_address = 1;
  bool has_tcpip_address() const;
  private:
  bool _internal_has_tcpip_address() const;
  public:
  void clear_tcpip_address();
  const ::grpc::channelz::v1::Address_TcpIpAddress& tcpip_address() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::Address_TcpIpAddress* release_tcpip_address();
  ::grpc::channelz::v1::Address_TcpIpAddress* mutable_tcpip_address();
  void set_allocated_tcpip_address(::grpc::channelz::v1::Address_TcpIpAddress* tcpip_address);
  private:
  const ::grpc::channelz::v1::Address_TcpIpAddress& _internal_tcpip_address() const;
  ::grpc::channelz::v1::Address_TcpIpAddress* _internal_mutable_tcpip_address();
  public:
  void unsafe_arena_set_allocated_tcpip_address(
      ::grpc::channelz::v1::Address_TcpIpAddress* tcpip_address);
  ::grpc::channelz::v1::Address_TcpIpAddress* unsafe_arena_release_tcpip_address();

  // .grpc.channelz.v1.Address.UdsAddress uds_address = 2;
  bool has_uds_address() const;
  private:
  bool _internal_has_uds_address() const;
  public:
  void clear_uds_address();
  const ::grpc::channelz::v1::Address_UdsAddress& uds_address() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::Address_UdsAddress* release_uds_address();
  ::grpc::channelz::v1::Address_UdsAddress* mutable_uds_address();
  void set_allocated_uds_address(::grpc::channelz::v1::Address_UdsAddress* uds_address);
  private:
  const ::grpc::channelz::v1::Address_UdsAddress& _internal_uds_address() const;
  ::grpc::channelz::v1::Address_UdsAddress* _internal_mutable_uds_address();
  public:
  void unsafe_arena_set_allocated_uds_address(
      ::grpc::channelz::v1::Address_UdsAddress* uds_address);
  ::grpc::channelz::v1::Address_UdsAddress* unsafe_arena_release_uds_address();

  // .grpc.channelz.v1.Address.OtherAddress other_address = 3;
  bool has_other_address() const;
  private:
  bool _internal_has_other_address() const;
  public:
  void clear_other_address();
  const ::grpc::channelz::v1::Address_OtherAddress& other_address() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::Address_OtherAddress* release_other_address();
  ::grpc::channelz::v1::Address_OtherAddress* mutable_other_address();
  void set_allocated_other_address(::grpc::channelz::v1::Address_OtherAddress* other_address);
  private:
  const ::grpc::channelz::v1::Address_OtherAddress& _internal_other_address() const;
  ::grpc::channelz::v1::Address_OtherAddress* _internal_mutable_other_address();
  public:
  void unsafe_arena_set_allocated_other_address(
      ::grpc::channelz::v1::Address_OtherAddress* other_address);
  ::grpc::channelz::v1::Address_OtherAddress* unsafe_arena_release_other_address();

  void clear_address();
  AddressCase address_case() const;
  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.Address)
 private:
  class _Internal;
  void set_has_tcpip_address();
  void set_has_uds_address();
  void set_has_other_address();

  inline bool has_address() const;
  inline void clear_has_address();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AddressUnion {
    constexpr AddressUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::grpc::channelz::v1::Address_TcpIpAddress* tcpip_address_;
    ::grpc::channelz::v1::Address_UdsAddress* uds_address_;
    ::grpc::channelz::v1::Address_OtherAddress* other_address_;
  } address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Security_Tls final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.Security.Tls) */ {
 public:
  inline Security_Tls() : Security_Tls(nullptr) {}
  ~Security_Tls() override;
  explicit constexpr Security_Tls(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Security_Tls(const Security_Tls& from);
  Security_Tls(Security_Tls&& from) noexcept
    : Security_Tls() {
    *this = ::std::move(from);
  }

  inline Security_Tls& operator=(const Security_Tls& from) {
    CopyFrom(from);
    return *this;
  }
  inline Security_Tls& operator=(Security_Tls&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Security_Tls& default_instance() {
    return *internal_default_instance();
  }
  enum CipherSuiteCase {
    kStandardName = 1,
    kOtherName = 2,
    CIPHER_SUITE_NOT_SET = 0,
  };

  static inline const Security_Tls* internal_default_instance() {
    return reinterpret_cast<const Security_Tls*>(
               &_Security_Tls_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Security_Tls& a, Security_Tls& b) {
    a.Swap(&b);
  }
  inline void Swap(Security_Tls* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Security_Tls* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Security_Tls* New() const final {
    return new Security_Tls();
  }

  Security_Tls* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Security_Tls>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Security_Tls& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Security_Tls& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Security_Tls* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.Security.Tls";
  }
  protected:
  explicit Security_Tls(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalCertificateFieldNumber = 3,
    kRemoteCertificateFieldNumber = 4,
    kStandardNameFieldNumber = 1,
    kOtherNameFieldNumber = 2,
  };
  // bytes local_certificate = 3;
  void clear_local_certificate();
  const std::string& local_certificate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_certificate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_certificate();
  PROTOBUF_MUST_USE_RESULT std::string* release_local_certificate();
  void set_allocated_local_certificate(std::string* local_certificate);
  private:
  const std::string& _internal_local_certificate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_certificate(const std::string& value);
  std::string* _internal_mutable_local_certificate();
  public:

  // bytes remote_certificate = 4;
  void clear_remote_certificate();
  const std::string& remote_certificate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_certificate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_certificate();
  PROTOBUF_MUST_USE_RESULT std::string* release_remote_certificate();
  void set_allocated_remote_certificate(std::string* remote_certificate);
  private:
  const std::string& _internal_remote_certificate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_certificate(const std::string& value);
  std::string* _internal_mutable_remote_certificate();
  public:

  // string standard_name = 1;
  bool has_standard_name() const;
  private:
  bool _internal_has_standard_name() const;
  public:
  void clear_standard_name();
  const std::string& standard_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_standard_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_standard_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_standard_name();
  void set_allocated_standard_name(std::string* standard_name);
  private:
  const std::string& _internal_standard_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_standard_name(const std::string& value);
  std::string* _internal_mutable_standard_name();
  public:

  // string other_name = 2;
  bool has_other_name() const;
  private:
  bool _internal_has_other_name() const;
  public:
  void clear_other_name();
  const std::string& other_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_other_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_other_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_other_name();
  void set_allocated_other_name(std::string* other_name);
  private:
  const std::string& _internal_other_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_other_name(const std::string& value);
  std::string* _internal_mutable_other_name();
  public:

  void clear_cipher_suite();
  CipherSuiteCase cipher_suite_case() const;
  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.Security.Tls)
 private:
  class _Internal;
  void set_has_standard_name();
  void set_has_other_name();

  inline bool has_cipher_suite() const;
  inline void clear_has_cipher_suite();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_certificate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_certificate_;
  union CipherSuiteUnion {
    constexpr CipherSuiteUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr standard_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr other_name_;
  } cipher_suite_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Security_OtherSecurity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.Security.OtherSecurity) */ {
 public:
  inline Security_OtherSecurity() : Security_OtherSecurity(nullptr) {}
  ~Security_OtherSecurity() override;
  explicit constexpr Security_OtherSecurity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Security_OtherSecurity(const Security_OtherSecurity& from);
  Security_OtherSecurity(Security_OtherSecurity&& from) noexcept
    : Security_OtherSecurity() {
    *this = ::std::move(from);
  }

  inline Security_OtherSecurity& operator=(const Security_OtherSecurity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Security_OtherSecurity& operator=(Security_OtherSecurity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Security_OtherSecurity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Security_OtherSecurity* internal_default_instance() {
    return reinterpret_cast<const Security_OtherSecurity*>(
               &_Security_OtherSecurity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Security_OtherSecurity& a, Security_OtherSecurity& b) {
    a.Swap(&b);
  }
  inline void Swap(Security_OtherSecurity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Security_OtherSecurity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Security_OtherSecurity* New() const final {
    return new Security_OtherSecurity();
  }

  Security_OtherSecurity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Security_OtherSecurity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Security_OtherSecurity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Security_OtherSecurity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Security_OtherSecurity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.Security.OtherSecurity";
  }
  protected:
  explicit Security_OtherSecurity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Any value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const PROTOBUF_NAMESPACE_ID::Any& value() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_value();
  PROTOBUF_NAMESPACE_ID::Any* mutable_value();
  void set_allocated_value(PROTOBUF_NAMESPACE_ID::Any* value);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_value() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      PROTOBUF_NAMESPACE_ID::Any* value);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.Security.OtherSecurity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Any* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Security final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.Security) */ {
 public:
  inline Security() : Security(nullptr) {}
  ~Security() override;
  explicit constexpr Security(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Security(const Security& from);
  Security(Security&& from) noexcept
    : Security() {
    *this = ::std::move(from);
  }

  inline Security& operator=(const Security& from) {
    CopyFrom(from);
    return *this;
  }
  inline Security& operator=(Security&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Security& default_instance() {
    return *internal_default_instance();
  }
  enum ModelCase {
    kTls = 1,
    kOther = 2,
    MODEL_NOT_SET = 0,
  };

  static inline const Security* internal_default_instance() {
    return reinterpret_cast<const Security*>(
               &_Security_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Security& a, Security& b) {
    a.Swap(&b);
  }
  inline void Swap(Security* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Security* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Security* New() const final {
    return new Security();
  }

  Security* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Security>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Security& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Security& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Security* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.Security";
  }
  protected:
  explicit Security(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Security_Tls Tls;
  typedef Security_OtherSecurity OtherSecurity;

  // accessors -------------------------------------------------------

  enum : int {
    kTlsFieldNumber = 1,
    kOtherFieldNumber = 2,
  };
  // .grpc.channelz.v1.Security.Tls tls = 1;
  bool has_tls() const;
  private:
  bool _internal_has_tls() const;
  public:
  void clear_tls();
  const ::grpc::channelz::v1::Security_Tls& tls() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::Security_Tls* release_tls();
  ::grpc::channelz::v1::Security_Tls* mutable_tls();
  void set_allocated_tls(::grpc::channelz::v1::Security_Tls* tls);
  private:
  const ::grpc::channelz::v1::Security_Tls& _internal_tls() const;
  ::grpc::channelz::v1::Security_Tls* _internal_mutable_tls();
  public:
  void unsafe_arena_set_allocated_tls(
      ::grpc::channelz::v1::Security_Tls* tls);
  ::grpc::channelz::v1::Security_Tls* unsafe_arena_release_tls();

  // .grpc.channelz.v1.Security.OtherSecurity other = 2;
  bool has_other() const;
  private:
  bool _internal_has_other() const;
  public:
  void clear_other();
  const ::grpc::channelz::v1::Security_OtherSecurity& other() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::Security_OtherSecurity* release_other();
  ::grpc::channelz::v1::Security_OtherSecurity* mutable_other();
  void set_allocated_other(::grpc::channelz::v1::Security_OtherSecurity* other);
  private:
  const ::grpc::channelz::v1::Security_OtherSecurity& _internal_other() const;
  ::grpc::channelz::v1::Security_OtherSecurity* _internal_mutable_other();
  public:
  void unsafe_arena_set_allocated_other(
      ::grpc::channelz::v1::Security_OtherSecurity* other);
  ::grpc::channelz::v1::Security_OtherSecurity* unsafe_arena_release_other();

  void clear_model();
  ModelCase model_case() const;
  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.Security)
 private:
  class _Internal;
  void set_has_tls();
  void set_has_other();

  inline bool has_model() const;
  inline void clear_has_model();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ModelUnion {
    constexpr ModelUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::grpc::channelz::v1::Security_Tls* tls_;
    ::grpc::channelz::v1::Security_OtherSecurity* other_;
  } model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT SocketOption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.SocketOption) */ {
 public:
  inline SocketOption() : SocketOption(nullptr) {}
  ~SocketOption() override;
  explicit constexpr SocketOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SocketOption(const SocketOption& from);
  SocketOption(SocketOption&& from) noexcept
    : SocketOption() {
    *this = ::std::move(from);
  }

  inline SocketOption& operator=(const SocketOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketOption& operator=(SocketOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketOption* internal_default_instance() {
    return reinterpret_cast<const SocketOption*>(
               &_SocketOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SocketOption& a, SocketOption& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketOption* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SocketOption* New() const final {
    return new SocketOption();
  }

  SocketOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SocketOption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SocketOption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SocketOption& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.SocketOption";
  }
  protected:
  explicit SocketOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kAdditionalFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .google.protobuf.Any additional = 3;
  bool has_additional() const;
  private:
  bool _internal_has_additional() const;
  public:
  void clear_additional();
  const PROTOBUF_NAMESPACE_ID::Any& additional() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_additional();
  PROTOBUF_NAMESPACE_ID::Any* mutable_additional();
  void set_allocated_additional(PROTOBUF_NAMESPACE_ID::Any* additional);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_additional() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_additional();
  public:
  void unsafe_arena_set_allocated_additional(
      PROTOBUF_NAMESPACE_ID::Any* additional);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_additional();

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.SocketOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  PROTOBUF_NAMESPACE_ID::Any* additional_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT SocketOptionTimeout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.SocketOptionTimeout) */ {
 public:
  inline SocketOptionTimeout() : SocketOptionTimeout(nullptr) {}
  ~SocketOptionTimeout() override;
  explicit constexpr SocketOptionTimeout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SocketOptionTimeout(const SocketOptionTimeout& from);
  SocketOptionTimeout(SocketOptionTimeout&& from) noexcept
    : SocketOptionTimeout() {
    *this = ::std::move(from);
  }

  inline SocketOptionTimeout& operator=(const SocketOptionTimeout& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketOptionTimeout& operator=(SocketOptionTimeout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketOptionTimeout& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketOptionTimeout* internal_default_instance() {
    return reinterpret_cast<const SocketOptionTimeout*>(
               &_SocketOptionTimeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SocketOptionTimeout& a, SocketOptionTimeout& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketOptionTimeout* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketOptionTimeout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SocketOptionTimeout* New() const final {
    return new SocketOptionTimeout();
  }

  SocketOptionTimeout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SocketOptionTimeout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SocketOptionTimeout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SocketOptionTimeout& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketOptionTimeout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.SocketOptionTimeout";
  }
  protected:
  explicit SocketOptionTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 1,
  };
  // .google.protobuf.Duration duration = 1;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      PROTOBUF_NAMESPACE_ID::Duration* duration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.SocketOptionTimeout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT SocketOptionLinger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.SocketOptionLinger) */ {
 public:
  inline SocketOptionLinger() : SocketOptionLinger(nullptr) {}
  ~SocketOptionLinger() override;
  explicit constexpr SocketOptionLinger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SocketOptionLinger(const SocketOptionLinger& from);
  SocketOptionLinger(SocketOptionLinger&& from) noexcept
    : SocketOptionLinger() {
    *this = ::std::move(from);
  }

  inline SocketOptionLinger& operator=(const SocketOptionLinger& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketOptionLinger& operator=(SocketOptionLinger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketOptionLinger& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketOptionLinger* internal_default_instance() {
    return reinterpret_cast<const SocketOptionLinger*>(
               &_SocketOptionLinger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SocketOptionLinger& a, SocketOptionLinger& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketOptionLinger* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketOptionLinger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SocketOptionLinger* New() const final {
    return new SocketOptionLinger();
  }

  SocketOptionLinger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SocketOptionLinger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SocketOptionLinger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SocketOptionLinger& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketOptionLinger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.SocketOptionLinger";
  }
  protected:
  explicit SocketOptionLinger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 2,
    kActiveFieldNumber = 1,
  };
  // .google.protobuf.Duration duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      PROTOBUF_NAMESPACE_ID::Duration* duration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // bool active = 1;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.SocketOptionLinger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT SocketOptionTcpInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.SocketOptionTcpInfo) */ {
 public:
  inline SocketOptionTcpInfo() : SocketOptionTcpInfo(nullptr) {}
  ~SocketOptionTcpInfo() override;
  explicit constexpr SocketOptionTcpInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SocketOptionTcpInfo(const SocketOptionTcpInfo& from);
  SocketOptionTcpInfo(SocketOptionTcpInfo&& from) noexcept
    : SocketOptionTcpInfo() {
    *this = ::std::move(from);
  }

  inline SocketOptionTcpInfo& operator=(const SocketOptionTcpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketOptionTcpInfo& operator=(SocketOptionTcpInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketOptionTcpInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketOptionTcpInfo* internal_default_instance() {
    return reinterpret_cast<const SocketOptionTcpInfo*>(
               &_SocketOptionTcpInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SocketOptionTcpInfo& a, SocketOptionTcpInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketOptionTcpInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketOptionTcpInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SocketOptionTcpInfo* New() const final {
    return new SocketOptionTcpInfo();
  }

  SocketOptionTcpInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SocketOptionTcpInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SocketOptionTcpInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SocketOptionTcpInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketOptionTcpInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.SocketOptionTcpInfo";
  }
  protected:
  explicit SocketOptionTcpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTcpiStateFieldNumber = 1,
    kTcpiCaStateFieldNumber = 2,
    kTcpiRetransmitsFieldNumber = 3,
    kTcpiProbesFieldNumber = 4,
    kTcpiBackoffFieldNumber = 5,
    kTcpiOptionsFieldNumber = 6,
    kTcpiSndWscaleFieldNumber = 7,
    kTcpiRcvWscaleFieldNumber = 8,
    kTcpiRtoFieldNumber = 9,
    kTcpiAtoFieldNumber = 10,
    kTcpiSndMssFieldNumber = 11,
    kTcpiRcvMssFieldNumber = 12,
    kTcpiUnackedFieldNumber = 13,
    kTcpiSackedFieldNumber = 14,
    kTcpiLostFieldNumber = 15,
    kTcpiRetransFieldNumber = 16,
    kTcpiFacketsFieldNumber = 17,
    kTcpiLastDataSentFieldNumber = 18,
    kTcpiLastAckSentFieldNumber = 19,
    kTcpiLastDataRecvFieldNumber = 20,
    kTcpiLastAckRecvFieldNumber = 21,
    kTcpiPmtuFieldNumber = 22,
    kTcpiRcvSsthreshFieldNumber = 23,
    kTcpiRttFieldNumber = 24,
    kTcpiRttvarFieldNumber = 25,
    kTcpiSndSsthreshFieldNumber = 26,
    kTcpiSndCwndFieldNumber = 27,
    kTcpiAdvmssFieldNumber = 28,
    kTcpiReorderingFieldNumber = 29,
  };
  // uint32 tcpi_state = 1;
  void clear_tcpi_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_state() const;
  void set_tcpi_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_state() const;
  void _internal_set_tcpi_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_ca_state = 2;
  void clear_tcpi_ca_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_ca_state() const;
  void set_tcpi_ca_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_ca_state() const;
  void _internal_set_tcpi_ca_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_retransmits = 3;
  void clear_tcpi_retransmits();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_retransmits() const;
  void set_tcpi_retransmits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_retransmits() const;
  void _internal_set_tcpi_retransmits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_probes = 4;
  void clear_tcpi_probes();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_probes() const;
  void set_tcpi_probes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_probes() const;
  void _internal_set_tcpi_probes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_backoff = 5;
  void clear_tcpi_backoff();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_backoff() const;
  void set_tcpi_backoff(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_backoff() const;
  void _internal_set_tcpi_backoff(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_options = 6;
  void clear_tcpi_options();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_options() const;
  void set_tcpi_options(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_options() const;
  void _internal_set_tcpi_options(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_snd_wscale = 7;
  void clear_tcpi_snd_wscale();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_snd_wscale() const;
  void set_tcpi_snd_wscale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_snd_wscale() const;
  void _internal_set_tcpi_snd_wscale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_rcv_wscale = 8;
  void clear_tcpi_rcv_wscale();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_rcv_wscale() const;
  void set_tcpi_rcv_wscale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_rcv_wscale() const;
  void _internal_set_tcpi_rcv_wscale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_rto = 9;
  void clear_tcpi_rto();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_rto() const;
  void set_tcpi_rto(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_rto() const;
  void _internal_set_tcpi_rto(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_ato = 10;
  void clear_tcpi_ato();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_ato() const;
  void set_tcpi_ato(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_ato() const;
  void _internal_set_tcpi_ato(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_snd_mss = 11;
  void clear_tcpi_snd_mss();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_snd_mss() const;
  void set_tcpi_snd_mss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_snd_mss() const;
  void _internal_set_tcpi_snd_mss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_rcv_mss = 12;
  void clear_tcpi_rcv_mss();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_rcv_mss() const;
  void set_tcpi_rcv_mss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_rcv_mss() const;
  void _internal_set_tcpi_rcv_mss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_unacked = 13;
  void clear_tcpi_unacked();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_unacked() const;
  void set_tcpi_unacked(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_unacked() const;
  void _internal_set_tcpi_unacked(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_sacked = 14;
  void clear_tcpi_sacked();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_sacked() const;
  void set_tcpi_sacked(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_sacked() const;
  void _internal_set_tcpi_sacked(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_lost = 15;
  void clear_tcpi_lost();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_lost() const;
  void set_tcpi_lost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_lost() const;
  void _internal_set_tcpi_lost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_retrans = 16;
  void clear_tcpi_retrans();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_retrans() const;
  void set_tcpi_retrans(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_retrans() const;
  void _internal_set_tcpi_retrans(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_fackets = 17;
  void clear_tcpi_fackets();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_fackets() const;
  void set_tcpi_fackets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_fackets() const;
  void _internal_set_tcpi_fackets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_last_data_sent = 18;
  void clear_tcpi_last_data_sent();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_last_data_sent() const;
  void set_tcpi_last_data_sent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_last_data_sent() const;
  void _internal_set_tcpi_last_data_sent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_last_ack_sent = 19;
  void clear_tcpi_last_ack_sent();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_last_ack_sent() const;
  void set_tcpi_last_ack_sent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_last_ack_sent() const;
  void _internal_set_tcpi_last_ack_sent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_last_data_recv = 20;
  void clear_tcpi_last_data_recv();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_last_data_recv() const;
  void set_tcpi_last_data_recv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_last_data_recv() const;
  void _internal_set_tcpi_last_data_recv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_last_ack_recv = 21;
  void clear_tcpi_last_ack_recv();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_last_ack_recv() const;
  void set_tcpi_last_ack_recv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_last_ack_recv() const;
  void _internal_set_tcpi_last_ack_recv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_pmtu = 22;
  void clear_tcpi_pmtu();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_pmtu() const;
  void set_tcpi_pmtu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_pmtu() const;
  void _internal_set_tcpi_pmtu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_rcv_ssthresh = 23;
  void clear_tcpi_rcv_ssthresh();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_rcv_ssthresh() const;
  void set_tcpi_rcv_ssthresh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_rcv_ssthresh() const;
  void _internal_set_tcpi_rcv_ssthresh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_rtt = 24;
  void clear_tcpi_rtt();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_rtt() const;
  void set_tcpi_rtt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_rtt() const;
  void _internal_set_tcpi_rtt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_rttvar = 25;
  void clear_tcpi_rttvar();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_rttvar() const;
  void set_tcpi_rttvar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_rttvar() const;
  void _internal_set_tcpi_rttvar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_snd_ssthresh = 26;
  void clear_tcpi_snd_ssthresh();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_snd_ssthresh() const;
  void set_tcpi_snd_ssthresh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_snd_ssthresh() const;
  void _internal_set_tcpi_snd_ssthresh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_snd_cwnd = 27;
  void clear_tcpi_snd_cwnd();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_snd_cwnd() const;
  void set_tcpi_snd_cwnd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_snd_cwnd() const;
  void _internal_set_tcpi_snd_cwnd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_advmss = 28;
  void clear_tcpi_advmss();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_advmss() const;
  void set_tcpi_advmss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_advmss() const;
  void _internal_set_tcpi_advmss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcpi_reordering = 29;
  void clear_tcpi_reordering();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_reordering() const;
  void set_tcpi_reordering(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpi_reordering() const;
  void _internal_set_tcpi_reordering(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.SocketOptionTcpInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_ca_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_retransmits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_probes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_backoff_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_options_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_snd_wscale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_rcv_wscale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_rto_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_ato_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_snd_mss_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_rcv_mss_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_unacked_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_sacked_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_lost_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_retrans_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_fackets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_last_data_sent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_last_ack_sent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_last_data_recv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_last_ack_recv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_pmtu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_rcv_ssthresh_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_rtt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_rttvar_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_snd_ssthresh_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_snd_cwnd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_advmss_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpi_reordering_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetTopChannelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetTopChannelsRequest) */ {
 public:
  inline GetTopChannelsRequest() : GetTopChannelsRequest(nullptr) {}
  ~GetTopChannelsRequest() override;
  explicit constexpr GetTopChannelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTopChannelsRequest(const GetTopChannelsRequest& from);
  GetTopChannelsRequest(GetTopChannelsRequest&& from) noexcept
    : GetTopChannelsRequest() {
    *this = ::std::move(from);
  }

  inline GetTopChannelsRequest& operator=(const GetTopChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTopChannelsRequest& operator=(GetTopChannelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTopChannelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTopChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const GetTopChannelsRequest*>(
               &_GetTopChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetTopChannelsRequest& a, GetTopChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTopChannelsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTopChannelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTopChannelsRequest* New() const final {
    return new GetTopChannelsRequest();
  }

  GetTopChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTopChannelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTopChannelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTopChannelsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTopChannelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetTopChannelsRequest";
  }
  protected:
  explicit GetTopChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartChannelIdFieldNumber = 1,
    kMaxResultsFieldNumber = 2,
  };
  // int64 start_channel_id = 1;
  void clear_start_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int64 start_channel_id() const;
  void set_start_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_channel_id() const;
  void _internal_set_start_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_results = 2;
  void clear_max_results();
  ::PROTOBUF_NAMESPACE_ID::int64 max_results() const;
  void set_max_results(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_results() const;
  void _internal_set_max_results(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetTopChannelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_channel_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetTopChannelsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetTopChannelsResponse) */ {
 public:
  inline GetTopChannelsResponse() : GetTopChannelsResponse(nullptr) {}
  ~GetTopChannelsResponse() override;
  explicit constexpr GetTopChannelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTopChannelsResponse(const GetTopChannelsResponse& from);
  GetTopChannelsResponse(GetTopChannelsResponse&& from) noexcept
    : GetTopChannelsResponse() {
    *this = ::std::move(from);
  }

  inline GetTopChannelsResponse& operator=(const GetTopChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTopChannelsResponse& operator=(GetTopChannelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTopChannelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTopChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const GetTopChannelsResponse*>(
               &_GetTopChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetTopChannelsResponse& a, GetTopChannelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTopChannelsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTopChannelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTopChannelsResponse* New() const final {
    return new GetTopChannelsResponse();
  }

  GetTopChannelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTopChannelsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTopChannelsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTopChannelsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTopChannelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetTopChannelsResponse";
  }
  protected:
  explicit GetTopChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // repeated .grpc.channelz.v1.Channel channel = 1;
  int channel_size() const;
  private:
  int _internal_channel_size() const;
  public:
  void clear_channel();
  ::grpc::channelz::v1::Channel* mutable_channel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::Channel >*
      mutable_channel();
  private:
  const ::grpc::channelz::v1::Channel& _internal_channel(int index) const;
  ::grpc::channelz::v1::Channel* _internal_add_channel();
  public:
  const ::grpc::channelz::v1::Channel& channel(int index) const;
  ::grpc::channelz::v1::Channel* add_channel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::Channel >&
      channel() const;

  // bool end = 2;
  void clear_end();
  bool end() const;
  void set_end(bool value);
  private:
  bool _internal_end() const;
  void _internal_set_end(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetTopChannelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::Channel > channel_;
  bool end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetServersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetServersRequest) */ {
 public:
  inline GetServersRequest() : GetServersRequest(nullptr) {}
  ~GetServersRequest() override;
  explicit constexpr GetServersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServersRequest(const GetServersRequest& from);
  GetServersRequest(GetServersRequest&& from) noexcept
    : GetServersRequest() {
    *this = ::std::move(from);
  }

  inline GetServersRequest& operator=(const GetServersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServersRequest& operator=(GetServersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServersRequest* internal_default_instance() {
    return reinterpret_cast<const GetServersRequest*>(
               &_GetServersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetServersRequest& a, GetServersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServersRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServersRequest* New() const final {
    return new GetServersRequest();
  }

  GetServersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetServersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetServersRequest";
  }
  protected:
  explicit GetServersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartServerIdFieldNumber = 1,
    kMaxResultsFieldNumber = 2,
  };
  // int64 start_server_id = 1;
  void clear_start_server_id();
  ::PROTOBUF_NAMESPACE_ID::int64 start_server_id() const;
  void set_start_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_server_id() const;
  void _internal_set_start_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_results = 2;
  void clear_max_results();
  ::PROTOBUF_NAMESPACE_ID::int64 max_results() const;
  void set_max_results(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_results() const;
  void _internal_set_max_results(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetServersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_server_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetServersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetServersResponse) */ {
 public:
  inline GetServersResponse() : GetServersResponse(nullptr) {}
  ~GetServersResponse() override;
  explicit constexpr GetServersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServersResponse(const GetServersResponse& from);
  GetServersResponse(GetServersResponse&& from) noexcept
    : GetServersResponse() {
    *this = ::std::move(from);
  }

  inline GetServersResponse& operator=(const GetServersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServersResponse& operator=(GetServersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServersResponse* internal_default_instance() {
    return reinterpret_cast<const GetServersResponse*>(
               &_GetServersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetServersResponse& a, GetServersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServersResponse* New() const final {
    return new GetServersResponse();
  }

  GetServersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetServersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetServersResponse";
  }
  protected:
  explicit GetServersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // repeated .grpc.channelz.v1.Server server = 1;
  int server_size() const;
  private:
  int _internal_server_size() const;
  public:
  void clear_server();
  ::grpc::channelz::v1::Server* mutable_server(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::Server >*
      mutable_server();
  private:
  const ::grpc::channelz::v1::Server& _internal_server(int index) const;
  ::grpc::channelz::v1::Server* _internal_add_server();
  public:
  const ::grpc::channelz::v1::Server& server(int index) const;
  ::grpc::channelz::v1::Server* add_server();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::Server >&
      server() const;

  // bool end = 2;
  void clear_end();
  bool end() const;
  void set_end(bool value);
  private:
  bool _internal_end() const;
  void _internal_set_end(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetServersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::Server > server_;
  bool end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetServerRequest) */ {
 public:
  inline GetServerRequest() : GetServerRequest(nullptr) {}
  ~GetServerRequest() override;
  explicit constexpr GetServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServerRequest(const GetServerRequest& from);
  GetServerRequest(GetServerRequest&& from) noexcept
    : GetServerRequest() {
    *this = ::std::move(from);
  }

  inline GetServerRequest& operator=(const GetServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerRequest& operator=(GetServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServerRequest* internal_default_instance() {
    return reinterpret_cast<const GetServerRequest*>(
               &_GetServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetServerRequest& a, GetServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerRequest* New() const final {
    return new GetServerRequest();
  }

  GetServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetServerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetServerRequest";
  }
  protected:
  explicit GetServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // int64 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetServerResponse) */ {
 public:
  inline GetServerResponse() : GetServerResponse(nullptr) {}
  ~GetServerResponse() override;
  explicit constexpr GetServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServerResponse(const GetServerResponse& from);
  GetServerResponse(GetServerResponse&& from) noexcept
    : GetServerResponse() {
    *this = ::std::move(from);
  }

  inline GetServerResponse& operator=(const GetServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerResponse& operator=(GetServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServerResponse* internal_default_instance() {
    return reinterpret_cast<const GetServerResponse*>(
               &_GetServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetServerResponse& a, GetServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerResponse* New() const final {
    return new GetServerResponse();
  }

  GetServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetServerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetServerResponse";
  }
  protected:
  explicit GetServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
  };
  // .grpc.channelz.v1.Server server = 1;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::grpc::channelz::v1::Server& server() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::Server* release_server();
  ::grpc::channelz::v1::Server* mutable_server();
  void set_allocated_server(::grpc::channelz::v1::Server* server);
  private:
  const ::grpc::channelz::v1::Server& _internal_server() const;
  ::grpc::channelz::v1::Server* _internal_mutable_server();
  public:
  void unsafe_arena_set_allocated_server(
      ::grpc::channelz::v1::Server* server);
  ::grpc::channelz::v1::Server* unsafe_arena_release_server();

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc::channelz::v1::Server* server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetServerSocketsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetServerSocketsRequest) */ {
 public:
  inline GetServerSocketsRequest() : GetServerSocketsRequest(nullptr) {}
  ~GetServerSocketsRequest() override;
  explicit constexpr GetServerSocketsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServerSocketsRequest(const GetServerSocketsRequest& from);
  GetServerSocketsRequest(GetServerSocketsRequest&& from) noexcept
    : GetServerSocketsRequest() {
    *this = ::std::move(from);
  }

  inline GetServerSocketsRequest& operator=(const GetServerSocketsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerSocketsRequest& operator=(GetServerSocketsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServerSocketsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServerSocketsRequest* internal_default_instance() {
    return reinterpret_cast<const GetServerSocketsRequest*>(
               &_GetServerSocketsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetServerSocketsRequest& a, GetServerSocketsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerSocketsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServerSocketsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerSocketsRequest* New() const final {
    return new GetServerSocketsRequest();
  }

  GetServerSocketsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerSocketsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServerSocketsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetServerSocketsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerSocketsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetServerSocketsRequest";
  }
  protected:
  explicit GetServerSocketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kStartSocketIdFieldNumber = 2,
    kMaxResultsFieldNumber = 3,
  };
  // int64 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 start_socket_id = 2;
  void clear_start_socket_id();
  ::PROTOBUF_NAMESPACE_ID::int64 start_socket_id() const;
  void set_start_socket_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_socket_id() const;
  void _internal_set_start_socket_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_results = 3;
  void clear_max_results();
  ::PROTOBUF_NAMESPACE_ID::int64 max_results() const;
  void set_max_results(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_results() const;
  void _internal_set_max_results(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetServerSocketsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_socket_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetServerSocketsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetServerSocketsResponse) */ {
 public:
  inline GetServerSocketsResponse() : GetServerSocketsResponse(nullptr) {}
  ~GetServerSocketsResponse() override;
  explicit constexpr GetServerSocketsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServerSocketsResponse(const GetServerSocketsResponse& from);
  GetServerSocketsResponse(GetServerSocketsResponse&& from) noexcept
    : GetServerSocketsResponse() {
    *this = ::std::move(from);
  }

  inline GetServerSocketsResponse& operator=(const GetServerSocketsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerSocketsResponse& operator=(GetServerSocketsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServerSocketsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServerSocketsResponse* internal_default_instance() {
    return reinterpret_cast<const GetServerSocketsResponse*>(
               &_GetServerSocketsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetServerSocketsResponse& a, GetServerSocketsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerSocketsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServerSocketsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerSocketsResponse* New() const final {
    return new GetServerSocketsResponse();
  }

  GetServerSocketsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerSocketsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServerSocketsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetServerSocketsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerSocketsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetServerSocketsResponse";
  }
  protected:
  explicit GetServerSocketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocketRefFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // repeated .grpc.channelz.v1.SocketRef socket_ref = 1;
  int socket_ref_size() const;
  private:
  int _internal_socket_ref_size() const;
  public:
  void clear_socket_ref();
  ::grpc::channelz::v1::SocketRef* mutable_socket_ref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >*
      mutable_socket_ref();
  private:
  const ::grpc::channelz::v1::SocketRef& _internal_socket_ref(int index) const;
  ::grpc::channelz::v1::SocketRef* _internal_add_socket_ref();
  public:
  const ::grpc::channelz::v1::SocketRef& socket_ref(int index) const;
  ::grpc::channelz::v1::SocketRef* add_socket_ref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >&
      socket_ref() const;

  // bool end = 2;
  void clear_end();
  bool end() const;
  void set_end(bool value);
  private:
  bool _internal_end() const;
  void _internal_set_end(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetServerSocketsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef > socket_ref_;
  bool end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetChannelRequest) */ {
 public:
  inline GetChannelRequest() : GetChannelRequest(nullptr) {}
  ~GetChannelRequest() override;
  explicit constexpr GetChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChannelRequest(const GetChannelRequest& from);
  GetChannelRequest(GetChannelRequest&& from) noexcept
    : GetChannelRequest() {
    *this = ::std::move(from);
  }

  inline GetChannelRequest& operator=(const GetChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelRequest& operator=(GetChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChannelRequest* internal_default_instance() {
    return reinterpret_cast<const GetChannelRequest*>(
               &_GetChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetChannelRequest& a, GetChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelRequest* New() const final {
    return new GetChannelRequest();
  }

  GetChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetChannelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetChannelRequest";
  }
  protected:
  explicit GetChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // int64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetChannelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetChannelResponse) */ {
 public:
  inline GetChannelResponse() : GetChannelResponse(nullptr) {}
  ~GetChannelResponse() override;
  explicit constexpr GetChannelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChannelResponse(const GetChannelResponse& from);
  GetChannelResponse(GetChannelResponse&& from) noexcept
    : GetChannelResponse() {
    *this = ::std::move(from);
  }

  inline GetChannelResponse& operator=(const GetChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelResponse& operator=(GetChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChannelResponse* internal_default_instance() {
    return reinterpret_cast<const GetChannelResponse*>(
               &_GetChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetChannelResponse& a, GetChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelResponse* New() const final {
    return new GetChannelResponse();
  }

  GetChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChannelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetChannelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetChannelResponse";
  }
  protected:
  explicit GetChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
  };
  // .grpc.channelz.v1.Channel channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::grpc::channelz::v1::Channel& channel() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::Channel* release_channel();
  ::grpc::channelz::v1::Channel* mutable_channel();
  void set_allocated_channel(::grpc::channelz::v1::Channel* channel);
  private:
  const ::grpc::channelz::v1::Channel& _internal_channel() const;
  ::grpc::channelz::v1::Channel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::grpc::channelz::v1::Channel* channel);
  ::grpc::channelz::v1::Channel* unsafe_arena_release_channel();

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc::channelz::v1::Channel* channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetSubchannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetSubchannelRequest) */ {
 public:
  inline GetSubchannelRequest() : GetSubchannelRequest(nullptr) {}
  ~GetSubchannelRequest() override;
  explicit constexpr GetSubchannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSubchannelRequest(const GetSubchannelRequest& from);
  GetSubchannelRequest(GetSubchannelRequest&& from) noexcept
    : GetSubchannelRequest() {
    *this = ::std::move(from);
  }

  inline GetSubchannelRequest& operator=(const GetSubchannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSubchannelRequest& operator=(GetSubchannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSubchannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSubchannelRequest* internal_default_instance() {
    return reinterpret_cast<const GetSubchannelRequest*>(
               &_GetSubchannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetSubchannelRequest& a, GetSubchannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSubchannelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSubchannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSubchannelRequest* New() const final {
    return new GetSubchannelRequest();
  }

  GetSubchannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSubchannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSubchannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSubchannelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSubchannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetSubchannelRequest";
  }
  protected:
  explicit GetSubchannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubchannelIdFieldNumber = 1,
  };
  // int64 subchannel_id = 1;
  void clear_subchannel_id();
  ::PROTOBUF_NAMESPACE_ID::int64 subchannel_id() const;
  void set_subchannel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_subchannel_id() const;
  void _internal_set_subchannel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetSubchannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 subchannel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetSubchannelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetSubchannelResponse) */ {
 public:
  inline GetSubchannelResponse() : GetSubchannelResponse(nullptr) {}
  ~GetSubchannelResponse() override;
  explicit constexpr GetSubchannelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSubchannelResponse(const GetSubchannelResponse& from);
  GetSubchannelResponse(GetSubchannelResponse&& from) noexcept
    : GetSubchannelResponse() {
    *this = ::std::move(from);
  }

  inline GetSubchannelResponse& operator=(const GetSubchannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSubchannelResponse& operator=(GetSubchannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSubchannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSubchannelResponse* internal_default_instance() {
    return reinterpret_cast<const GetSubchannelResponse*>(
               &_GetSubchannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetSubchannelResponse& a, GetSubchannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSubchannelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSubchannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSubchannelResponse* New() const final {
    return new GetSubchannelResponse();
  }

  GetSubchannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSubchannelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSubchannelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSubchannelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSubchannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetSubchannelResponse";
  }
  protected:
  explicit GetSubchannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubchannelFieldNumber = 1,
  };
  // .grpc.channelz.v1.Subchannel subchannel = 1;
  bool has_subchannel() const;
  private:
  bool _internal_has_subchannel() const;
  public:
  void clear_subchannel();
  const ::grpc::channelz::v1::Subchannel& subchannel() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::Subchannel* release_subchannel();
  ::grpc::channelz::v1::Subchannel* mutable_subchannel();
  void set_allocated_subchannel(::grpc::channelz::v1::Subchannel* subchannel);
  private:
  const ::grpc::channelz::v1::Subchannel& _internal_subchannel() const;
  ::grpc::channelz::v1::Subchannel* _internal_mutable_subchannel();
  public:
  void unsafe_arena_set_allocated_subchannel(
      ::grpc::channelz::v1::Subchannel* subchannel);
  ::grpc::channelz::v1::Subchannel* unsafe_arena_release_subchannel();

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetSubchannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc::channelz::v1::Subchannel* subchannel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetSocketRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetSocketRequest) */ {
 public:
  inline GetSocketRequest() : GetSocketRequest(nullptr) {}
  ~GetSocketRequest() override;
  explicit constexpr GetSocketRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSocketRequest(const GetSocketRequest& from);
  GetSocketRequest(GetSocketRequest&& from) noexcept
    : GetSocketRequest() {
    *this = ::std::move(from);
  }

  inline GetSocketRequest& operator=(const GetSocketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSocketRequest& operator=(GetSocketRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSocketRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSocketRequest* internal_default_instance() {
    return reinterpret_cast<const GetSocketRequest*>(
               &_GetSocketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetSocketRequest& a, GetSocketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSocketRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSocketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSocketRequest* New() const final {
    return new GetSocketRequest();
  }

  GetSocketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSocketRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSocketRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSocketRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSocketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetSocketRequest";
  }
  protected:
  explicit GetSocketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocketIdFieldNumber = 1,
    kSummaryFieldNumber = 2,
  };
  // int64 socket_id = 1;
  void clear_socket_id();
  ::PROTOBUF_NAMESPACE_ID::int64 socket_id() const;
  void set_socket_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_socket_id() const;
  void _internal_set_socket_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool summary = 2;
  void clear_summary();
  bool summary() const;
  void set_summary(bool value);
  private:
  bool _internal_summary() const;
  void _internal_set_summary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetSocketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 socket_id_;
  bool summary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT GetSocketResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.channelz.v1.GetSocketResponse) */ {
 public:
  inline GetSocketResponse() : GetSocketResponse(nullptr) {}
  ~GetSocketResponse() override;
  explicit constexpr GetSocketResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSocketResponse(const GetSocketResponse& from);
  GetSocketResponse(GetSocketResponse&& from) noexcept
    : GetSocketResponse() {
    *this = ::std::move(from);
  }

  inline GetSocketResponse& operator=(const GetSocketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSocketResponse& operator=(GetSocketResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSocketResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSocketResponse* internal_default_instance() {
    return reinterpret_cast<const GetSocketResponse*>(
               &_GetSocketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetSocketResponse& a, GetSocketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSocketResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSocketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSocketResponse* New() const final {
    return new GetSocketResponse();
  }

  GetSocketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSocketResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSocketResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSocketResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSocketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.channelz.v1.GetSocketResponse";
  }
  protected:
  explicit GetSocketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocketFieldNumber = 1,
  };
  // .grpc.channelz.v1.Socket socket = 1;
  bool has_socket() const;
  private:
  bool _internal_has_socket() const;
  public:
  void clear_socket();
  const ::grpc::channelz::v1::Socket& socket() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::channelz::v1::Socket* release_socket();
  ::grpc::channelz::v1::Socket* mutable_socket();
  void set_allocated_socket(::grpc::channelz::v1::Socket* socket);
  private:
  const ::grpc::channelz::v1::Socket& _internal_socket() const;
  ::grpc::channelz::v1::Socket* _internal_mutable_socket();
  public:
  void unsafe_arena_set_allocated_socket(
      ::grpc::channelz::v1::Socket* socket);
  ::grpc::channelz::v1::Socket* unsafe_arena_release_socket();

  // @@protoc_insertion_point(class_scope:grpc.channelz.v1.GetSocketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc::channelz::v1::Socket* socket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channelz_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Channel

// .grpc.channelz.v1.ChannelRef ref = 1;
inline bool Channel::_internal_has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline bool Channel::has_ref() const {
  return _internal_has_ref();
}
inline void Channel::clear_ref() {
  if (GetArenaForAllocation() == nullptr && ref_ != nullptr) {
    delete ref_;
  }
  ref_ = nullptr;
}
inline const ::grpc::channelz::v1::ChannelRef& Channel::_internal_ref() const {
  const ::grpc::channelz::v1::ChannelRef* p = ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::ChannelRef&>(
      ::grpc::channelz::v1::_ChannelRef_default_instance_);
}
inline const ::grpc::channelz::v1::ChannelRef& Channel::ref() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Channel.ref)
  return _internal_ref();
}
inline void Channel::unsafe_arena_set_allocated_ref(
    ::grpc::channelz::v1::ChannelRef* ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_);
  }
  ref_ = ref;
  if (ref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Channel.ref)
}
inline ::grpc::channelz::v1::ChannelRef* Channel::release_ref() {
  
  ::grpc::channelz::v1::ChannelRef* temp = ref_;
  ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::ChannelRef* Channel::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Channel.ref)
  
  ::grpc::channelz::v1::ChannelRef* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::ChannelRef* Channel::_internal_mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::ChannelRef>(GetArenaForAllocation());
    ref_ = p;
  }
  return ref_;
}
inline ::grpc::channelz::v1::ChannelRef* Channel::mutable_ref() {
  ::grpc::channelz::v1::ChannelRef* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Channel.ref)
  return _msg;
}
inline void Channel::set_allocated_ref(::grpc::channelz::v1::ChannelRef* ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ref_;
  }
  if (ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::ChannelRef>::GetOwningArena(ref);
    if (message_arena != submessage_arena) {
      ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Channel.ref)
}

// .grpc.channelz.v1.ChannelData data = 2;
inline bool Channel::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Channel::has_data() const {
  return _internal_has_data();
}
inline void Channel::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc::channelz::v1::ChannelData& Channel::_internal_data() const {
  const ::grpc::channelz::v1::ChannelData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::ChannelData&>(
      ::grpc::channelz::v1::_ChannelData_default_instance_);
}
inline const ::grpc::channelz::v1::ChannelData& Channel::data() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Channel.data)
  return _internal_data();
}
inline void Channel::unsafe_arena_set_allocated_data(
    ::grpc::channelz::v1::ChannelData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Channel.data)
}
inline ::grpc::channelz::v1::ChannelData* Channel::release_data() {
  
  ::grpc::channelz::v1::ChannelData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::ChannelData* Channel::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Channel.data)
  
  ::grpc::channelz::v1::ChannelData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::ChannelData* Channel::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::ChannelData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::grpc::channelz::v1::ChannelData* Channel::mutable_data() {
  ::grpc::channelz::v1::ChannelData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Channel.data)
  return _msg;
}
inline void Channel::set_allocated_data(::grpc::channelz::v1::ChannelData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::ChannelData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Channel.data)
}

// repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
inline int Channel::_internal_channel_ref_size() const {
  return channel_ref_.size();
}
inline int Channel::channel_ref_size() const {
  return _internal_channel_ref_size();
}
inline void Channel::clear_channel_ref() {
  channel_ref_.Clear();
}
inline ::grpc::channelz::v1::ChannelRef* Channel::mutable_channel_ref(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Channel.channel_ref)
  return channel_ref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelRef >*
Channel::mutable_channel_ref() {
  // @@protoc_insertion_point(field_mutable_list:grpc.channelz.v1.Channel.channel_ref)
  return &channel_ref_;
}
inline const ::grpc::channelz::v1::ChannelRef& Channel::_internal_channel_ref(int index) const {
  return channel_ref_.Get(index);
}
inline const ::grpc::channelz::v1::ChannelRef& Channel::channel_ref(int index) const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Channel.channel_ref)
  return _internal_channel_ref(index);
}
inline ::grpc::channelz::v1::ChannelRef* Channel::_internal_add_channel_ref() {
  return channel_ref_.Add();
}
inline ::grpc::channelz::v1::ChannelRef* Channel::add_channel_ref() {
  ::grpc::channelz::v1::ChannelRef* _add = _internal_add_channel_ref();
  // @@protoc_insertion_point(field_add:grpc.channelz.v1.Channel.channel_ref)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelRef >&
Channel::channel_ref() const {
  // @@protoc_insertion_point(field_list:grpc.channelz.v1.Channel.channel_ref)
  return channel_ref_;
}

// repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
inline int Channel::_internal_subchannel_ref_size() const {
  return subchannel_ref_.size();
}
inline int Channel::subchannel_ref_size() const {
  return _internal_subchannel_ref_size();
}
inline void Channel::clear_subchannel_ref() {
  subchannel_ref_.Clear();
}
inline ::grpc::channelz::v1::SubchannelRef* Channel::mutable_subchannel_ref(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Channel.subchannel_ref)
  return subchannel_ref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SubchannelRef >*
Channel::mutable_subchannel_ref() {
  // @@protoc_insertion_point(field_mutable_list:grpc.channelz.v1.Channel.subchannel_ref)
  return &subchannel_ref_;
}
inline const ::grpc::channelz::v1::SubchannelRef& Channel::_internal_subchannel_ref(int index) const {
  return subchannel_ref_.Get(index);
}
inline const ::grpc::channelz::v1::SubchannelRef& Channel::subchannel_ref(int index) const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Channel.subchannel_ref)
  return _internal_subchannel_ref(index);
}
inline ::grpc::channelz::v1::SubchannelRef* Channel::_internal_add_subchannel_ref() {
  return subchannel_ref_.Add();
}
inline ::grpc::channelz::v1::SubchannelRef* Channel::add_subchannel_ref() {
  ::grpc::channelz::v1::SubchannelRef* _add = _internal_add_subchannel_ref();
  // @@protoc_insertion_point(field_add:grpc.channelz.v1.Channel.subchannel_ref)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SubchannelRef >&
Channel::subchannel_ref() const {
  // @@protoc_insertion_point(field_list:grpc.channelz.v1.Channel.subchannel_ref)
  return subchannel_ref_;
}

// repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
inline int Channel::_internal_socket_ref_size() const {
  return socket_ref_.size();
}
inline int Channel::socket_ref_size() const {
  return _internal_socket_ref_size();
}
inline void Channel::clear_socket_ref() {
  socket_ref_.Clear();
}
inline ::grpc::channelz::v1::SocketRef* Channel::mutable_socket_ref(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Channel.socket_ref)
  return socket_ref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >*
Channel::mutable_socket_ref() {
  // @@protoc_insertion_point(field_mutable_list:grpc.channelz.v1.Channel.socket_ref)
  return &socket_ref_;
}
inline const ::grpc::channelz::v1::SocketRef& Channel::_internal_socket_ref(int index) const {
  return socket_ref_.Get(index);
}
inline const ::grpc::channelz::v1::SocketRef& Channel::socket_ref(int index) const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Channel.socket_ref)
  return _internal_socket_ref(index);
}
inline ::grpc::channelz::v1::SocketRef* Channel::_internal_add_socket_ref() {
  return socket_ref_.Add();
}
inline ::grpc::channelz::v1::SocketRef* Channel::add_socket_ref() {
  ::grpc::channelz::v1::SocketRef* _add = _internal_add_socket_ref();
  // @@protoc_insertion_point(field_add:grpc.channelz.v1.Channel.socket_ref)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >&
Channel::socket_ref() const {
  // @@protoc_insertion_point(field_list:grpc.channelz.v1.Channel.socket_ref)
  return socket_ref_;
}

// -------------------------------------------------------------------

// Subchannel

// .grpc.channelz.v1.SubchannelRef ref = 1;
inline bool Subchannel::_internal_has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline bool Subchannel::has_ref() const {
  return _internal_has_ref();
}
inline void Subchannel::clear_ref() {
  if (GetArenaForAllocation() == nullptr && ref_ != nullptr) {
    delete ref_;
  }
  ref_ = nullptr;
}
inline const ::grpc::channelz::v1::SubchannelRef& Subchannel::_internal_ref() const {
  const ::grpc::channelz::v1::SubchannelRef* p = ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::SubchannelRef&>(
      ::grpc::channelz::v1::_SubchannelRef_default_instance_);
}
inline const ::grpc::channelz::v1::SubchannelRef& Subchannel::ref() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Subchannel.ref)
  return _internal_ref();
}
inline void Subchannel::unsafe_arena_set_allocated_ref(
    ::grpc::channelz::v1::SubchannelRef* ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_);
  }
  ref_ = ref;
  if (ref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Subchannel.ref)
}
inline ::grpc::channelz::v1::SubchannelRef* Subchannel::release_ref() {
  
  ::grpc::channelz::v1::SubchannelRef* temp = ref_;
  ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::SubchannelRef* Subchannel::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Subchannel.ref)
  
  ::grpc::channelz::v1::SubchannelRef* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::SubchannelRef* Subchannel::_internal_mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::SubchannelRef>(GetArenaForAllocation());
    ref_ = p;
  }
  return ref_;
}
inline ::grpc::channelz::v1::SubchannelRef* Subchannel::mutable_ref() {
  ::grpc::channelz::v1::SubchannelRef* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Subchannel.ref)
  return _msg;
}
inline void Subchannel::set_allocated_ref(::grpc::channelz::v1::SubchannelRef* ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ref_;
  }
  if (ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::SubchannelRef>::GetOwningArena(ref);
    if (message_arena != submessage_arena) {
      ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Subchannel.ref)
}

// .grpc.channelz.v1.ChannelData data = 2;
inline bool Subchannel::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Subchannel::has_data() const {
  return _internal_has_data();
}
inline void Subchannel::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc::channelz::v1::ChannelData& Subchannel::_internal_data() const {
  const ::grpc::channelz::v1::ChannelData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::ChannelData&>(
      ::grpc::channelz::v1::_ChannelData_default_instance_);
}
inline const ::grpc::channelz::v1::ChannelData& Subchannel::data() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Subchannel.data)
  return _internal_data();
}
inline void Subchannel::unsafe_arena_set_allocated_data(
    ::grpc::channelz::v1::ChannelData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Subchannel.data)
}
inline ::grpc::channelz::v1::ChannelData* Subchannel::release_data() {
  
  ::grpc::channelz::v1::ChannelData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::ChannelData* Subchannel::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Subchannel.data)
  
  ::grpc::channelz::v1::ChannelData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::ChannelData* Subchannel::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::ChannelData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::grpc::channelz::v1::ChannelData* Subchannel::mutable_data() {
  ::grpc::channelz::v1::ChannelData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Subchannel.data)
  return _msg;
}
inline void Subchannel::set_allocated_data(::grpc::channelz::v1::ChannelData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::ChannelData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Subchannel.data)
}

// repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
inline int Subchannel::_internal_channel_ref_size() const {
  return channel_ref_.size();
}
inline int Subchannel::channel_ref_size() const {
  return _internal_channel_ref_size();
}
inline void Subchannel::clear_channel_ref() {
  channel_ref_.Clear();
}
inline ::grpc::channelz::v1::ChannelRef* Subchannel::mutable_channel_ref(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Subchannel.channel_ref)
  return channel_ref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelRef >*
Subchannel::mutable_channel_ref() {
  // @@protoc_insertion_point(field_mutable_list:grpc.channelz.v1.Subchannel.channel_ref)
  return &channel_ref_;
}
inline const ::grpc::channelz::v1::ChannelRef& Subchannel::_internal_channel_ref(int index) const {
  return channel_ref_.Get(index);
}
inline const ::grpc::channelz::v1::ChannelRef& Subchannel::channel_ref(int index) const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Subchannel.channel_ref)
  return _internal_channel_ref(index);
}
inline ::grpc::channelz::v1::ChannelRef* Subchannel::_internal_add_channel_ref() {
  return channel_ref_.Add();
}
inline ::grpc::channelz::v1::ChannelRef* Subchannel::add_channel_ref() {
  ::grpc::channelz::v1::ChannelRef* _add = _internal_add_channel_ref();
  // @@protoc_insertion_point(field_add:grpc.channelz.v1.Subchannel.channel_ref)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelRef >&
Subchannel::channel_ref() const {
  // @@protoc_insertion_point(field_list:grpc.channelz.v1.Subchannel.channel_ref)
  return channel_ref_;
}

// repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
inline int Subchannel::_internal_subchannel_ref_size() const {
  return subchannel_ref_.size();
}
inline int Subchannel::subchannel_ref_size() const {
  return _internal_subchannel_ref_size();
}
inline void Subchannel::clear_subchannel_ref() {
  subchannel_ref_.Clear();
}
inline ::grpc::channelz::v1::SubchannelRef* Subchannel::mutable_subchannel_ref(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Subchannel.subchannel_ref)
  return subchannel_ref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SubchannelRef >*
Subchannel::mutable_subchannel_ref() {
  // @@protoc_insertion_point(field_mutable_list:grpc.channelz.v1.Subchannel.subchannel_ref)
  return &subchannel_ref_;
}
inline const ::grpc::channelz::v1::SubchannelRef& Subchannel::_internal_subchannel_ref(int index) const {
  return subchannel_ref_.Get(index);
}
inline const ::grpc::channelz::v1::SubchannelRef& Subchannel::subchannel_ref(int index) const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Subchannel.subchannel_ref)
  return _internal_subchannel_ref(index);
}
inline ::grpc::channelz::v1::SubchannelRef* Subchannel::_internal_add_subchannel_ref() {
  return subchannel_ref_.Add();
}
inline ::grpc::channelz::v1::SubchannelRef* Subchannel::add_subchannel_ref() {
  ::grpc::channelz::v1::SubchannelRef* _add = _internal_add_subchannel_ref();
  // @@protoc_insertion_point(field_add:grpc.channelz.v1.Subchannel.subchannel_ref)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SubchannelRef >&
Subchannel::subchannel_ref() const {
  // @@protoc_insertion_point(field_list:grpc.channelz.v1.Subchannel.subchannel_ref)
  return subchannel_ref_;
}

// repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
inline int Subchannel::_internal_socket_ref_size() const {
  return socket_ref_.size();
}
inline int Subchannel::socket_ref_size() const {
  return _internal_socket_ref_size();
}
inline void Subchannel::clear_socket_ref() {
  socket_ref_.Clear();
}
inline ::grpc::channelz::v1::SocketRef* Subchannel::mutable_socket_ref(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Subchannel.socket_ref)
  return socket_ref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >*
Subchannel::mutable_socket_ref() {
  // @@protoc_insertion_point(field_mutable_list:grpc.channelz.v1.Subchannel.socket_ref)
  return &socket_ref_;
}
inline const ::grpc::channelz::v1::SocketRef& Subchannel::_internal_socket_ref(int index) const {
  return socket_ref_.Get(index);
}
inline const ::grpc::channelz::v1::SocketRef& Subchannel::socket_ref(int index) const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Subchannel.socket_ref)
  return _internal_socket_ref(index);
}
inline ::grpc::channelz::v1::SocketRef* Subchannel::_internal_add_socket_ref() {
  return socket_ref_.Add();
}
inline ::grpc::channelz::v1::SocketRef* Subchannel::add_socket_ref() {
  ::grpc::channelz::v1::SocketRef* _add = _internal_add_socket_ref();
  // @@protoc_insertion_point(field_add:grpc.channelz.v1.Subchannel.socket_ref)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >&
Subchannel::socket_ref() const {
  // @@protoc_insertion_point(field_list:grpc.channelz.v1.Subchannel.socket_ref)
  return socket_ref_;
}

// -------------------------------------------------------------------

// ChannelConnectivityState

// .grpc.channelz.v1.ChannelConnectivityState.State state = 1;
inline void ChannelConnectivityState::clear_state() {
  state_ = 0;
}
inline ::grpc::channelz::v1::ChannelConnectivityState_State ChannelConnectivityState::_internal_state() const {
  return static_cast< ::grpc::channelz::v1::ChannelConnectivityState_State >(state_);
}
inline ::grpc::channelz::v1::ChannelConnectivityState_State ChannelConnectivityState::state() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelConnectivityState.state)
  return _internal_state();
}
inline void ChannelConnectivityState::_internal_set_state(::grpc::channelz::v1::ChannelConnectivityState_State value) {
  
  state_ = value;
}
inline void ChannelConnectivityState::set_state(::grpc::channelz::v1::ChannelConnectivityState_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ChannelConnectivityState.state)
}

// -------------------------------------------------------------------

// ChannelData

// .grpc.channelz.v1.ChannelConnectivityState state = 1;
inline bool ChannelData::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool ChannelData::has_state() const {
  return _internal_has_state();
}
inline void ChannelData::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::grpc::channelz::v1::ChannelConnectivityState& ChannelData::_internal_state() const {
  const ::grpc::channelz::v1::ChannelConnectivityState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::ChannelConnectivityState&>(
      ::grpc::channelz::v1::_ChannelConnectivityState_default_instance_);
}
inline const ::grpc::channelz::v1::ChannelConnectivityState& ChannelData::state() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelData.state)
  return _internal_state();
}
inline void ChannelData::unsafe_arena_set_allocated_state(
    ::grpc::channelz::v1::ChannelConnectivityState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.ChannelData.state)
}
inline ::grpc::channelz::v1::ChannelConnectivityState* ChannelData::release_state() {
  
  ::grpc::channelz::v1::ChannelConnectivityState* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::ChannelConnectivityState* ChannelData::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ChannelData.state)
  
  ::grpc::channelz::v1::ChannelConnectivityState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::ChannelConnectivityState* ChannelData::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::ChannelConnectivityState>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::grpc::channelz::v1::ChannelConnectivityState* ChannelData::mutable_state() {
  ::grpc::channelz::v1::ChannelConnectivityState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ChannelData.state)
  return _msg;
}
inline void ChannelData::set_allocated_state(::grpc::channelz::v1::ChannelConnectivityState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::ChannelConnectivityState>::GetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelData.state)
}

// string target = 2;
inline void ChannelData::clear_target() {
  target_.ClearToEmpty();
}
inline const std::string& ChannelData::target() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelData.target)
  return _internal_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelData::set_target(ArgT0&& arg0, ArgT... args) {
 
 target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ChannelData.target)
}
inline std::string* ChannelData::mutable_target() {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ChannelData.target)
  return _s;
}
inline const std::string& ChannelData::_internal_target() const {
  return target_.Get();
}
inline void ChannelData::_internal_set_target(const std::string& value) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelData::_internal_mutable_target() {
  
  return target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelData::release_target() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ChannelData.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelData::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelData.target)
}

// .grpc.channelz.v1.ChannelTrace trace = 3;
inline bool ChannelData::_internal_has_trace() const {
  return this != internal_default_instance() && trace_ != nullptr;
}
inline bool ChannelData::has_trace() const {
  return _internal_has_trace();
}
inline void ChannelData::clear_trace() {
  if (GetArenaForAllocation() == nullptr && trace_ != nullptr) {
    delete trace_;
  }
  trace_ = nullptr;
}
inline const ::grpc::channelz::v1::ChannelTrace& ChannelData::_internal_trace() const {
  const ::grpc::channelz::v1::ChannelTrace* p = trace_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::ChannelTrace&>(
      ::grpc::channelz::v1::_ChannelTrace_default_instance_);
}
inline const ::grpc::channelz::v1::ChannelTrace& ChannelData::trace() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelData.trace)
  return _internal_trace();
}
inline void ChannelData::unsafe_arena_set_allocated_trace(
    ::grpc::channelz::v1::ChannelTrace* trace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_);
  }
  trace_ = trace;
  if (trace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.ChannelData.trace)
}
inline ::grpc::channelz::v1::ChannelTrace* ChannelData::release_trace() {
  
  ::grpc::channelz::v1::ChannelTrace* temp = trace_;
  trace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::ChannelTrace* ChannelData::unsafe_arena_release_trace() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ChannelData.trace)
  
  ::grpc::channelz::v1::ChannelTrace* temp = trace_;
  trace_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::ChannelTrace* ChannelData::_internal_mutable_trace() {
  
  if (trace_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::ChannelTrace>(GetArenaForAllocation());
    trace_ = p;
  }
  return trace_;
}
inline ::grpc::channelz::v1::ChannelTrace* ChannelData::mutable_trace() {
  ::grpc::channelz::v1::ChannelTrace* _msg = _internal_mutable_trace();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ChannelData.trace)
  return _msg;
}
inline void ChannelData::set_allocated_trace(::grpc::channelz::v1::ChannelTrace* trace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete trace_;
  }
  if (trace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::ChannelTrace>::GetOwningArena(trace);
    if (message_arena != submessage_arena) {
      trace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace, submessage_arena);
    }
    
  } else {
    
  }
  trace_ = trace;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelData.trace)
}

// int64 calls_started = 4;
inline void ChannelData::clear_calls_started() {
  calls_started_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelData::_internal_calls_started() const {
  return calls_started_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelData::calls_started() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelData.calls_started)
  return _internal_calls_started();
}
inline void ChannelData::_internal_set_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  calls_started_ = value;
}
inline void ChannelData::set_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_calls_started(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ChannelData.calls_started)
}

// int64 calls_succeeded = 5;
inline void ChannelData::clear_calls_succeeded() {
  calls_succeeded_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelData::_internal_calls_succeeded() const {
  return calls_succeeded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelData::calls_succeeded() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelData.calls_succeeded)
  return _internal_calls_succeeded();
}
inline void ChannelData::_internal_set_calls_succeeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  calls_succeeded_ = value;
}
inline void ChannelData::set_calls_succeeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_calls_succeeded(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ChannelData.calls_succeeded)
}

// int64 calls_failed = 6;
inline void ChannelData::clear_calls_failed() {
  calls_failed_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelData::_internal_calls_failed() const {
  return calls_failed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelData::calls_failed() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelData.calls_failed)
  return _internal_calls_failed();
}
inline void ChannelData::_internal_set_calls_failed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  calls_failed_ = value;
}
inline void ChannelData::set_calls_failed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_calls_failed(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ChannelData.calls_failed)
}

// .google.protobuf.Timestamp last_call_started_timestamp = 7;
inline bool ChannelData::_internal_has_last_call_started_timestamp() const {
  return this != internal_default_instance() && last_call_started_timestamp_ != nullptr;
}
inline bool ChannelData::has_last_call_started_timestamp() const {
  return _internal_has_last_call_started_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ChannelData::_internal_last_call_started_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_call_started_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ChannelData::last_call_started_timestamp() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelData.last_call_started_timestamp)
  return _internal_last_call_started_timestamp();
}
inline void ChannelData::unsafe_arena_set_allocated_last_call_started_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_call_started_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_call_started_timestamp_);
  }
  last_call_started_timestamp_ = last_call_started_timestamp;
  if (last_call_started_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.ChannelData.last_call_started_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelData::release_last_call_started_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_call_started_timestamp_;
  last_call_started_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelData::unsafe_arena_release_last_call_started_timestamp() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ChannelData.last_call_started_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_call_started_timestamp_;
  last_call_started_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelData::_internal_mutable_last_call_started_timestamp() {
  
  if (last_call_started_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_call_started_timestamp_ = p;
  }
  return last_call_started_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelData::mutable_last_call_started_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_call_started_timestamp();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ChannelData.last_call_started_timestamp)
  return _msg;
}
inline void ChannelData::set_allocated_last_call_started_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* last_call_started_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_call_started_timestamp_);
  }
  if (last_call_started_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_call_started_timestamp));
    if (message_arena != submessage_arena) {
      last_call_started_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_call_started_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  last_call_started_timestamp_ = last_call_started_timestamp;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelData.last_call_started_timestamp)
}

// -------------------------------------------------------------------

// ChannelTraceEvent

// string description = 1;
inline void ChannelTraceEvent::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ChannelTraceEvent::description() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelTraceEvent.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelTraceEvent::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ChannelTraceEvent.description)
}
inline std::string* ChannelTraceEvent::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ChannelTraceEvent.description)
  return _s;
}
inline const std::string& ChannelTraceEvent::_internal_description() const {
  return description_.Get();
}
inline void ChannelTraceEvent::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelTraceEvent::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelTraceEvent::release_description() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ChannelTraceEvent.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelTraceEvent::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelTraceEvent.description)
}

// .grpc.channelz.v1.ChannelTraceEvent.Severity severity = 2;
inline void ChannelTraceEvent::clear_severity() {
  severity_ = 0;
}
inline ::grpc::channelz::v1::ChannelTraceEvent_Severity ChannelTraceEvent::_internal_severity() const {
  return static_cast< ::grpc::channelz::v1::ChannelTraceEvent_Severity >(severity_);
}
inline ::grpc::channelz::v1::ChannelTraceEvent_Severity ChannelTraceEvent::severity() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelTraceEvent.severity)
  return _internal_severity();
}
inline void ChannelTraceEvent::_internal_set_severity(::grpc::channelz::v1::ChannelTraceEvent_Severity value) {
  
  severity_ = value;
}
inline void ChannelTraceEvent::set_severity(::grpc::channelz::v1::ChannelTraceEvent_Severity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ChannelTraceEvent.severity)
}

// .google.protobuf.Timestamp timestamp = 3;
inline bool ChannelTraceEvent::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool ChannelTraceEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ChannelTraceEvent::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ChannelTraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelTraceEvent.timestamp)
  return _internal_timestamp();
}
inline void ChannelTraceEvent::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.ChannelTraceEvent.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelTraceEvent::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelTraceEvent::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ChannelTraceEvent.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelTraceEvent::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelTraceEvent::mutable_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ChannelTraceEvent.timestamp)
  return _msg;
}
inline void ChannelTraceEvent::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelTraceEvent.timestamp)
}

// .grpc.channelz.v1.ChannelRef channel_ref = 4;
inline bool ChannelTraceEvent::_internal_has_channel_ref() const {
  return child_ref_case() == kChannelRef;
}
inline bool ChannelTraceEvent::has_channel_ref() const {
  return _internal_has_channel_ref();
}
inline void ChannelTraceEvent::set_has_channel_ref() {
  _oneof_case_[0] = kChannelRef;
}
inline void ChannelTraceEvent::clear_channel_ref() {
  if (_internal_has_channel_ref()) {
    if (GetArenaForAllocation() == nullptr) {
      delete child_ref_.channel_ref_;
    }
    clear_has_child_ref();
  }
}
inline ::grpc::channelz::v1::ChannelRef* ChannelTraceEvent::release_channel_ref() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ChannelTraceEvent.channel_ref)
  if (_internal_has_channel_ref()) {
    clear_has_child_ref();
      ::grpc::channelz::v1::ChannelRef* temp = child_ref_.channel_ref_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    child_ref_.channel_ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::channelz::v1::ChannelRef& ChannelTraceEvent::_internal_channel_ref() const {
  return _internal_has_channel_ref()
      ? *child_ref_.channel_ref_
      : reinterpret_cast< ::grpc::channelz::v1::ChannelRef&>(::grpc::channelz::v1::_ChannelRef_default_instance_);
}
inline const ::grpc::channelz::v1::ChannelRef& ChannelTraceEvent::channel_ref() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelTraceEvent.channel_ref)
  return _internal_channel_ref();
}
inline ::grpc::channelz::v1::ChannelRef* ChannelTraceEvent::unsafe_arena_release_channel_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.channelz.v1.ChannelTraceEvent.channel_ref)
  if (_internal_has_channel_ref()) {
    clear_has_child_ref();
    ::grpc::channelz::v1::ChannelRef* temp = child_ref_.channel_ref_;
    child_ref_.channel_ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChannelTraceEvent::unsafe_arena_set_allocated_channel_ref(::grpc::channelz::v1::ChannelRef* channel_ref) {
  clear_child_ref();
  if (channel_ref) {
    set_has_channel_ref();
    child_ref_.channel_ref_ = channel_ref;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.ChannelTraceEvent.channel_ref)
}
inline ::grpc::channelz::v1::ChannelRef* ChannelTraceEvent::_internal_mutable_channel_ref() {
  if (!_internal_has_channel_ref()) {
    clear_child_ref();
    set_has_channel_ref();
    child_ref_.channel_ref_ = CreateMaybeMessage< ::grpc::channelz::v1::ChannelRef >(GetArenaForAllocation());
  }
  return child_ref_.channel_ref_;
}
inline ::grpc::channelz::v1::ChannelRef* ChannelTraceEvent::mutable_channel_ref() {
  ::grpc::channelz::v1::ChannelRef* _msg = _internal_mutable_channel_ref();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ChannelTraceEvent.channel_ref)
  return _msg;
}

// .grpc.channelz.v1.SubchannelRef subchannel_ref = 5;
inline bool ChannelTraceEvent::_internal_has_subchannel_ref() const {
  return child_ref_case() == kSubchannelRef;
}
inline bool ChannelTraceEvent::has_subchannel_ref() const {
  return _internal_has_subchannel_ref();
}
inline void ChannelTraceEvent::set_has_subchannel_ref() {
  _oneof_case_[0] = kSubchannelRef;
}
inline void ChannelTraceEvent::clear_subchannel_ref() {
  if (_internal_has_subchannel_ref()) {
    if (GetArenaForAllocation() == nullptr) {
      delete child_ref_.subchannel_ref_;
    }
    clear_has_child_ref();
  }
}
inline ::grpc::channelz::v1::SubchannelRef* ChannelTraceEvent::release_subchannel_ref() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ChannelTraceEvent.subchannel_ref)
  if (_internal_has_subchannel_ref()) {
    clear_has_child_ref();
      ::grpc::channelz::v1::SubchannelRef* temp = child_ref_.subchannel_ref_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    child_ref_.subchannel_ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::channelz::v1::SubchannelRef& ChannelTraceEvent::_internal_subchannel_ref() const {
  return _internal_has_subchannel_ref()
      ? *child_ref_.subchannel_ref_
      : reinterpret_cast< ::grpc::channelz::v1::SubchannelRef&>(::grpc::channelz::v1::_SubchannelRef_default_instance_);
}
inline const ::grpc::channelz::v1::SubchannelRef& ChannelTraceEvent::subchannel_ref() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelTraceEvent.subchannel_ref)
  return _internal_subchannel_ref();
}
inline ::grpc::channelz::v1::SubchannelRef* ChannelTraceEvent::unsafe_arena_release_subchannel_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.channelz.v1.ChannelTraceEvent.subchannel_ref)
  if (_internal_has_subchannel_ref()) {
    clear_has_child_ref();
    ::grpc::channelz::v1::SubchannelRef* temp = child_ref_.subchannel_ref_;
    child_ref_.subchannel_ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChannelTraceEvent::unsafe_arena_set_allocated_subchannel_ref(::grpc::channelz::v1::SubchannelRef* subchannel_ref) {
  clear_child_ref();
  if (subchannel_ref) {
    set_has_subchannel_ref();
    child_ref_.subchannel_ref_ = subchannel_ref;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.ChannelTraceEvent.subchannel_ref)
}
inline ::grpc::channelz::v1::SubchannelRef* ChannelTraceEvent::_internal_mutable_subchannel_ref() {
  if (!_internal_has_subchannel_ref()) {
    clear_child_ref();
    set_has_subchannel_ref();
    child_ref_.subchannel_ref_ = CreateMaybeMessage< ::grpc::channelz::v1::SubchannelRef >(GetArenaForAllocation());
  }
  return child_ref_.subchannel_ref_;
}
inline ::grpc::channelz::v1::SubchannelRef* ChannelTraceEvent::mutable_subchannel_ref() {
  ::grpc::channelz::v1::SubchannelRef* _msg = _internal_mutable_subchannel_ref();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ChannelTraceEvent.subchannel_ref)
  return _msg;
}

inline bool ChannelTraceEvent::has_child_ref() const {
  return child_ref_case() != CHILD_REF_NOT_SET;
}
inline void ChannelTraceEvent::clear_has_child_ref() {
  _oneof_case_[0] = CHILD_REF_NOT_SET;
}
inline ChannelTraceEvent::ChildRefCase ChannelTraceEvent::child_ref_case() const {
  return ChannelTraceEvent::ChildRefCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChannelTrace

// int64 num_events_logged = 1;
inline void ChannelTrace::clear_num_events_logged() {
  num_events_logged_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelTrace::_internal_num_events_logged() const {
  return num_events_logged_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelTrace::num_events_logged() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelTrace.num_events_logged)
  return _internal_num_events_logged();
}
inline void ChannelTrace::_internal_set_num_events_logged(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_events_logged_ = value;
}
inline void ChannelTrace::set_num_events_logged(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_events_logged(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ChannelTrace.num_events_logged)
}

// .google.protobuf.Timestamp creation_timestamp = 2;
inline bool ChannelTrace::_internal_has_creation_timestamp() const {
  return this != internal_default_instance() && creation_timestamp_ != nullptr;
}
inline bool ChannelTrace::has_creation_timestamp() const {
  return _internal_has_creation_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ChannelTrace::_internal_creation_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = creation_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ChannelTrace::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelTrace.creation_timestamp)
  return _internal_creation_timestamp();
}
inline void ChannelTrace::unsafe_arena_set_allocated_creation_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* creation_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_timestamp_);
  }
  creation_timestamp_ = creation_timestamp;
  if (creation_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.ChannelTrace.creation_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelTrace::release_creation_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = creation_timestamp_;
  creation_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelTrace::unsafe_arena_release_creation_timestamp() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ChannelTrace.creation_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = creation_timestamp_;
  creation_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelTrace::_internal_mutable_creation_timestamp() {
  
  if (creation_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    creation_timestamp_ = p;
  }
  return creation_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChannelTrace::mutable_creation_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_creation_timestamp();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ChannelTrace.creation_timestamp)
  return _msg;
}
inline void ChannelTrace::set_allocated_creation_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* creation_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_timestamp_);
  }
  if (creation_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_timestamp));
    if (message_arena != submessage_arena) {
      creation_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creation_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  creation_timestamp_ = creation_timestamp;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelTrace.creation_timestamp)
}

// repeated .grpc.channelz.v1.ChannelTraceEvent events = 3;
inline int ChannelTrace::_internal_events_size() const {
  return events_.size();
}
inline int ChannelTrace::events_size() const {
  return _internal_events_size();
}
inline void ChannelTrace::clear_events() {
  events_.Clear();
}
inline ::grpc::channelz::v1::ChannelTraceEvent* ChannelTrace::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ChannelTrace.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelTraceEvent >*
ChannelTrace::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:grpc.channelz.v1.ChannelTrace.events)
  return &events_;
}
inline const ::grpc::channelz::v1::ChannelTraceEvent& ChannelTrace::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::grpc::channelz::v1::ChannelTraceEvent& ChannelTrace::events(int index) const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelTrace.events)
  return _internal_events(index);
}
inline ::grpc::channelz::v1::ChannelTraceEvent* ChannelTrace::_internal_add_events() {
  return events_.Add();
}
inline ::grpc::channelz::v1::ChannelTraceEvent* ChannelTrace::add_events() {
  ::grpc::channelz::v1::ChannelTraceEvent* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:grpc.channelz.v1.ChannelTrace.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::ChannelTraceEvent >&
ChannelTrace::events() const {
  // @@protoc_insertion_point(field_list:grpc.channelz.v1.ChannelTrace.events)
  return events_;
}

// -------------------------------------------------------------------

// ChannelRef

// int64 channel_id = 1;
inline void ChannelRef::clear_channel_id() {
  channel_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelRef::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelRef::channel_id() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelRef.channel_id)
  return _internal_channel_id();
}
inline void ChannelRef::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  channel_id_ = value;
}
inline void ChannelRef::set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ChannelRef.channel_id)
}

// string name = 2;
inline void ChannelRef::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ChannelRef::name() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ChannelRef.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelRef::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ChannelRef.name)
}
inline std::string* ChannelRef::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ChannelRef.name)
  return _s;
}
inline const std::string& ChannelRef::_internal_name() const {
  return name_.Get();
}
inline void ChannelRef::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelRef::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelRef::release_name() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ChannelRef.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelRef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelRef.name)
}

// -------------------------------------------------------------------

// SubchannelRef

// int64 subchannel_id = 7;
inline void SubchannelRef::clear_subchannel_id() {
  subchannel_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubchannelRef::_internal_subchannel_id() const {
  return subchannel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubchannelRef::subchannel_id() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SubchannelRef.subchannel_id)
  return _internal_subchannel_id();
}
inline void SubchannelRef::_internal_set_subchannel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  subchannel_id_ = value;
}
inline void SubchannelRef::set_subchannel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_subchannel_id(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SubchannelRef.subchannel_id)
}

// string name = 8;
inline void SubchannelRef::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SubchannelRef::name() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SubchannelRef.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubchannelRef::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SubchannelRef.name)
}
inline std::string* SubchannelRef::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SubchannelRef.name)
  return _s;
}
inline const std::string& SubchannelRef::_internal_name() const {
  return name_.Get();
}
inline void SubchannelRef::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SubchannelRef::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SubchannelRef::release_name() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SubchannelRef.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SubchannelRef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SubchannelRef.name)
}

// -------------------------------------------------------------------

// SocketRef

// int64 socket_id = 3;
inline void SocketRef::clear_socket_id() {
  socket_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketRef::_internal_socket_id() const {
  return socket_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketRef::socket_id() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketRef.socket_id)
  return _internal_socket_id();
}
inline void SocketRef::_internal_set_socket_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  socket_id_ = value;
}
inline void SocketRef::set_socket_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_socket_id(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketRef.socket_id)
}

// string name = 4;
inline void SocketRef::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SocketRef::name() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketRef.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SocketRef::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketRef.name)
}
inline std::string* SocketRef::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketRef.name)
  return _s;
}
inline const std::string& SocketRef::_internal_name() const {
  return name_.Get();
}
inline void SocketRef::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SocketRef::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SocketRef::release_name() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SocketRef.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SocketRef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SocketRef.name)
}

// -------------------------------------------------------------------

// ServerRef

// int64 server_id = 5;
inline void ServerRef::clear_server_id() {
  server_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerRef::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerRef::server_id() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ServerRef.server_id)
  return _internal_server_id();
}
inline void ServerRef::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_id_ = value;
}
inline void ServerRef::set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ServerRef.server_id)
}

// string name = 6;
inline void ServerRef::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ServerRef::name() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ServerRef.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerRef::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ServerRef.name)
}
inline std::string* ServerRef::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ServerRef.name)
  return _s;
}
inline const std::string& ServerRef::_internal_name() const {
  return name_.Get();
}
inline void ServerRef::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerRef::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerRef::release_name() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ServerRef.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerRef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ServerRef.name)
}

// -------------------------------------------------------------------

// Server

// .grpc.channelz.v1.ServerRef ref = 1;
inline bool Server::_internal_has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline bool Server::has_ref() const {
  return _internal_has_ref();
}
inline void Server::clear_ref() {
  if (GetArenaForAllocation() == nullptr && ref_ != nullptr) {
    delete ref_;
  }
  ref_ = nullptr;
}
inline const ::grpc::channelz::v1::ServerRef& Server::_internal_ref() const {
  const ::grpc::channelz::v1::ServerRef* p = ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::ServerRef&>(
      ::grpc::channelz::v1::_ServerRef_default_instance_);
}
inline const ::grpc::channelz::v1::ServerRef& Server::ref() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Server.ref)
  return _internal_ref();
}
inline void Server::unsafe_arena_set_allocated_ref(
    ::grpc::channelz::v1::ServerRef* ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_);
  }
  ref_ = ref;
  if (ref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Server.ref)
}
inline ::grpc::channelz::v1::ServerRef* Server::release_ref() {
  
  ::grpc::channelz::v1::ServerRef* temp = ref_;
  ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::ServerRef* Server::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Server.ref)
  
  ::grpc::channelz::v1::ServerRef* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::ServerRef* Server::_internal_mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::ServerRef>(GetArenaForAllocation());
    ref_ = p;
  }
  return ref_;
}
inline ::grpc::channelz::v1::ServerRef* Server::mutable_ref() {
  ::grpc::channelz::v1::ServerRef* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Server.ref)
  return _msg;
}
inline void Server::set_allocated_ref(::grpc::channelz::v1::ServerRef* ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ref_;
  }
  if (ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::ServerRef>::GetOwningArena(ref);
    if (message_arena != submessage_arena) {
      ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Server.ref)
}

// .grpc.channelz.v1.ServerData data = 2;
inline bool Server::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Server::has_data() const {
  return _internal_has_data();
}
inline void Server::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc::channelz::v1::ServerData& Server::_internal_data() const {
  const ::grpc::channelz::v1::ServerData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::ServerData&>(
      ::grpc::channelz::v1::_ServerData_default_instance_);
}
inline const ::grpc::channelz::v1::ServerData& Server::data() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Server.data)
  return _internal_data();
}
inline void Server::unsafe_arena_set_allocated_data(
    ::grpc::channelz::v1::ServerData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Server.data)
}
inline ::grpc::channelz::v1::ServerData* Server::release_data() {
  
  ::grpc::channelz::v1::ServerData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::ServerData* Server::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Server.data)
  
  ::grpc::channelz::v1::ServerData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::ServerData* Server::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::ServerData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::grpc::channelz::v1::ServerData* Server::mutable_data() {
  ::grpc::channelz::v1::ServerData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Server.data)
  return _msg;
}
inline void Server::set_allocated_data(::grpc::channelz::v1::ServerData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::ServerData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Server.data)
}

// repeated .grpc.channelz.v1.SocketRef listen_socket = 3;
inline int Server::_internal_listen_socket_size() const {
  return listen_socket_.size();
}
inline int Server::listen_socket_size() const {
  return _internal_listen_socket_size();
}
inline void Server::clear_listen_socket() {
  listen_socket_.Clear();
}
inline ::grpc::channelz::v1::SocketRef* Server::mutable_listen_socket(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Server.listen_socket)
  return listen_socket_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >*
Server::mutable_listen_socket() {
  // @@protoc_insertion_point(field_mutable_list:grpc.channelz.v1.Server.listen_socket)
  return &listen_socket_;
}
inline const ::grpc::channelz::v1::SocketRef& Server::_internal_listen_socket(int index) const {
  return listen_socket_.Get(index);
}
inline const ::grpc::channelz::v1::SocketRef& Server::listen_socket(int index) const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Server.listen_socket)
  return _internal_listen_socket(index);
}
inline ::grpc::channelz::v1::SocketRef* Server::_internal_add_listen_socket() {
  return listen_socket_.Add();
}
inline ::grpc::channelz::v1::SocketRef* Server::add_listen_socket() {
  ::grpc::channelz::v1::SocketRef* _add = _internal_add_listen_socket();
  // @@protoc_insertion_point(field_add:grpc.channelz.v1.Server.listen_socket)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >&
Server::listen_socket() const {
  // @@protoc_insertion_point(field_list:grpc.channelz.v1.Server.listen_socket)
  return listen_socket_;
}

// -------------------------------------------------------------------

// ServerData

// .grpc.channelz.v1.ChannelTrace trace = 1;
inline bool ServerData::_internal_has_trace() const {
  return this != internal_default_instance() && trace_ != nullptr;
}
inline bool ServerData::has_trace() const {
  return _internal_has_trace();
}
inline void ServerData::clear_trace() {
  if (GetArenaForAllocation() == nullptr && trace_ != nullptr) {
    delete trace_;
  }
  trace_ = nullptr;
}
inline const ::grpc::channelz::v1::ChannelTrace& ServerData::_internal_trace() const {
  const ::grpc::channelz::v1::ChannelTrace* p = trace_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::ChannelTrace&>(
      ::grpc::channelz::v1::_ChannelTrace_default_instance_);
}
inline const ::grpc::channelz::v1::ChannelTrace& ServerData::trace() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ServerData.trace)
  return _internal_trace();
}
inline void ServerData::unsafe_arena_set_allocated_trace(
    ::grpc::channelz::v1::ChannelTrace* trace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_);
  }
  trace_ = trace;
  if (trace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.ServerData.trace)
}
inline ::grpc::channelz::v1::ChannelTrace* ServerData::release_trace() {
  
  ::grpc::channelz::v1::ChannelTrace* temp = trace_;
  trace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::ChannelTrace* ServerData::unsafe_arena_release_trace() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ServerData.trace)
  
  ::grpc::channelz::v1::ChannelTrace* temp = trace_;
  trace_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::ChannelTrace* ServerData::_internal_mutable_trace() {
  
  if (trace_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::ChannelTrace>(GetArenaForAllocation());
    trace_ = p;
  }
  return trace_;
}
inline ::grpc::channelz::v1::ChannelTrace* ServerData::mutable_trace() {
  ::grpc::channelz::v1::ChannelTrace* _msg = _internal_mutable_trace();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ServerData.trace)
  return _msg;
}
inline void ServerData::set_allocated_trace(::grpc::channelz::v1::ChannelTrace* trace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete trace_;
  }
  if (trace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::ChannelTrace>::GetOwningArena(trace);
    if (message_arena != submessage_arena) {
      trace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace, submessage_arena);
    }
    
  } else {
    
  }
  trace_ = trace;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ServerData.trace)
}

// int64 calls_started = 2;
inline void ServerData::clear_calls_started() {
  calls_started_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerData::_internal_calls_started() const {
  return calls_started_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerData::calls_started() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ServerData.calls_started)
  return _internal_calls_started();
}
inline void ServerData::_internal_set_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  calls_started_ = value;
}
inline void ServerData::set_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_calls_started(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ServerData.calls_started)
}

// int64 calls_succeeded = 3;
inline void ServerData::clear_calls_succeeded() {
  calls_succeeded_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerData::_internal_calls_succeeded() const {
  return calls_succeeded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerData::calls_succeeded() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ServerData.calls_succeeded)
  return _internal_calls_succeeded();
}
inline void ServerData::_internal_set_calls_succeeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  calls_succeeded_ = value;
}
inline void ServerData::set_calls_succeeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_calls_succeeded(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ServerData.calls_succeeded)
}

// int64 calls_failed = 4;
inline void ServerData::clear_calls_failed() {
  calls_failed_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerData::_internal_calls_failed() const {
  return calls_failed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerData::calls_failed() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ServerData.calls_failed)
  return _internal_calls_failed();
}
inline void ServerData::_internal_set_calls_failed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  calls_failed_ = value;
}
inline void ServerData::set_calls_failed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_calls_failed(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.ServerData.calls_failed)
}

// .google.protobuf.Timestamp last_call_started_timestamp = 5;
inline bool ServerData::_internal_has_last_call_started_timestamp() const {
  return this != internal_default_instance() && last_call_started_timestamp_ != nullptr;
}
inline bool ServerData::has_last_call_started_timestamp() const {
  return _internal_has_last_call_started_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ServerData::_internal_last_call_started_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_call_started_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ServerData::last_call_started_timestamp() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.ServerData.last_call_started_timestamp)
  return _internal_last_call_started_timestamp();
}
inline void ServerData::unsafe_arena_set_allocated_last_call_started_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_call_started_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_call_started_timestamp_);
  }
  last_call_started_timestamp_ = last_call_started_timestamp;
  if (last_call_started_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.ServerData.last_call_started_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServerData::release_last_call_started_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_call_started_timestamp_;
  last_call_started_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServerData::unsafe_arena_release_last_call_started_timestamp() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.ServerData.last_call_started_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_call_started_timestamp_;
  last_call_started_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServerData::_internal_mutable_last_call_started_timestamp() {
  
  if (last_call_started_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_call_started_timestamp_ = p;
  }
  return last_call_started_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServerData::mutable_last_call_started_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_call_started_timestamp();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.ServerData.last_call_started_timestamp)
  return _msg;
}
inline void ServerData::set_allocated_last_call_started_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* last_call_started_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_call_started_timestamp_);
  }
  if (last_call_started_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_call_started_timestamp));
    if (message_arena != submessage_arena) {
      last_call_started_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_call_started_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  last_call_started_timestamp_ = last_call_started_timestamp;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ServerData.last_call_started_timestamp)
}

// -------------------------------------------------------------------

// Socket

// .grpc.channelz.v1.SocketRef ref = 1;
inline bool Socket::_internal_has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline bool Socket::has_ref() const {
  return _internal_has_ref();
}
inline void Socket::clear_ref() {
  if (GetArenaForAllocation() == nullptr && ref_ != nullptr) {
    delete ref_;
  }
  ref_ = nullptr;
}
inline const ::grpc::channelz::v1::SocketRef& Socket::_internal_ref() const {
  const ::grpc::channelz::v1::SocketRef* p = ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::SocketRef&>(
      ::grpc::channelz::v1::_SocketRef_default_instance_);
}
inline const ::grpc::channelz::v1::SocketRef& Socket::ref() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Socket.ref)
  return _internal_ref();
}
inline void Socket::unsafe_arena_set_allocated_ref(
    ::grpc::channelz::v1::SocketRef* ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_);
  }
  ref_ = ref;
  if (ref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Socket.ref)
}
inline ::grpc::channelz::v1::SocketRef* Socket::release_ref() {
  
  ::grpc::channelz::v1::SocketRef* temp = ref_;
  ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::SocketRef* Socket::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Socket.ref)
  
  ::grpc::channelz::v1::SocketRef* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::SocketRef* Socket::_internal_mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::SocketRef>(GetArenaForAllocation());
    ref_ = p;
  }
  return ref_;
}
inline ::grpc::channelz::v1::SocketRef* Socket::mutable_ref() {
  ::grpc::channelz::v1::SocketRef* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Socket.ref)
  return _msg;
}
inline void Socket::set_allocated_ref(::grpc::channelz::v1::SocketRef* ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ref_;
  }
  if (ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::SocketRef>::GetOwningArena(ref);
    if (message_arena != submessage_arena) {
      ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Socket.ref)
}

// .grpc.channelz.v1.SocketData data = 2;
inline bool Socket::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Socket::has_data() const {
  return _internal_has_data();
}
inline void Socket::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc::channelz::v1::SocketData& Socket::_internal_data() const {
  const ::grpc::channelz::v1::SocketData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::SocketData&>(
      ::grpc::channelz::v1::_SocketData_default_instance_);
}
inline const ::grpc::channelz::v1::SocketData& Socket::data() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Socket.data)
  return _internal_data();
}
inline void Socket::unsafe_arena_set_allocated_data(
    ::grpc::channelz::v1::SocketData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Socket.data)
}
inline ::grpc::channelz::v1::SocketData* Socket::release_data() {
  
  ::grpc::channelz::v1::SocketData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::SocketData* Socket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Socket.data)
  
  ::grpc::channelz::v1::SocketData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::SocketData* Socket::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::SocketData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::grpc::channelz::v1::SocketData* Socket::mutable_data() {
  ::grpc::channelz::v1::SocketData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Socket.data)
  return _msg;
}
inline void Socket::set_allocated_data(::grpc::channelz::v1::SocketData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::SocketData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Socket.data)
}

// .grpc.channelz.v1.Address local = 3;
inline bool Socket::_internal_has_local() const {
  return this != internal_default_instance() && local_ != nullptr;
}
inline bool Socket::has_local() const {
  return _internal_has_local();
}
inline void Socket::clear_local() {
  if (GetArenaForAllocation() == nullptr && local_ != nullptr) {
    delete local_;
  }
  local_ = nullptr;
}
inline const ::grpc::channelz::v1::Address& Socket::_internal_local() const {
  const ::grpc::channelz::v1::Address* p = local_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::Address&>(
      ::grpc::channelz::v1::_Address_default_instance_);
}
inline const ::grpc::channelz::v1::Address& Socket::local() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Socket.local)
  return _internal_local();
}
inline void Socket::unsafe_arena_set_allocated_local(
    ::grpc::channelz::v1::Address* local) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_);
  }
  local_ = local;
  if (local) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Socket.local)
}
inline ::grpc::channelz::v1::Address* Socket::release_local() {
  
  ::grpc::channelz::v1::Address* temp = local_;
  local_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::Address* Socket::unsafe_arena_release_local() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Socket.local)
  
  ::grpc::channelz::v1::Address* temp = local_;
  local_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::Address* Socket::_internal_mutable_local() {
  
  if (local_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::Address>(GetArenaForAllocation());
    local_ = p;
  }
  return local_;
}
inline ::grpc::channelz::v1::Address* Socket::mutable_local() {
  ::grpc::channelz::v1::Address* _msg = _internal_mutable_local();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Socket.local)
  return _msg;
}
inline void Socket::set_allocated_local(::grpc::channelz::v1::Address* local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete local_;
  }
  if (local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::Address>::GetOwningArena(local);
    if (message_arena != submessage_arena) {
      local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local, submessage_arena);
    }
    
  } else {
    
  }
  local_ = local;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Socket.local)
}

// .grpc.channelz.v1.Address remote = 4;
inline bool Socket::_internal_has_remote() const {
  return this != internal_default_instance() && remote_ != nullptr;
}
inline bool Socket::has_remote() const {
  return _internal_has_remote();
}
inline void Socket::clear_remote() {
  if (GetArenaForAllocation() == nullptr && remote_ != nullptr) {
    delete remote_;
  }
  remote_ = nullptr;
}
inline const ::grpc::channelz::v1::Address& Socket::_internal_remote() const {
  const ::grpc::channelz::v1::Address* p = remote_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::Address&>(
      ::grpc::channelz::v1::_Address_default_instance_);
}
inline const ::grpc::channelz::v1::Address& Socket::remote() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Socket.remote)
  return _internal_remote();
}
inline void Socket::unsafe_arena_set_allocated_remote(
    ::grpc::channelz::v1::Address* remote) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_);
  }
  remote_ = remote;
  if (remote) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Socket.remote)
}
inline ::grpc::channelz::v1::Address* Socket::release_remote() {
  
  ::grpc::channelz::v1::Address* temp = remote_;
  remote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::Address* Socket::unsafe_arena_release_remote() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Socket.remote)
  
  ::grpc::channelz::v1::Address* temp = remote_;
  remote_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::Address* Socket::_internal_mutable_remote() {
  
  if (remote_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::Address>(GetArenaForAllocation());
    remote_ = p;
  }
  return remote_;
}
inline ::grpc::channelz::v1::Address* Socket::mutable_remote() {
  ::grpc::channelz::v1::Address* _msg = _internal_mutable_remote();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Socket.remote)
  return _msg;
}
inline void Socket::set_allocated_remote(::grpc::channelz::v1::Address* remote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete remote_;
  }
  if (remote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::Address>::GetOwningArena(remote);
    if (message_arena != submessage_arena) {
      remote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote, submessage_arena);
    }
    
  } else {
    
  }
  remote_ = remote;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Socket.remote)
}

// .grpc.channelz.v1.Security security = 5;
inline bool Socket::_internal_has_security() const {
  return this != internal_default_instance() && security_ != nullptr;
}
inline bool Socket::has_security() const {
  return _internal_has_security();
}
inline void Socket::clear_security() {
  if (GetArenaForAllocation() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
}
inline const ::grpc::channelz::v1::Security& Socket::_internal_security() const {
  const ::grpc::channelz::v1::Security* p = security_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::Security&>(
      ::grpc::channelz::v1::_Security_default_instance_);
}
inline const ::grpc::channelz::v1::Security& Socket::security() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Socket.security)
  return _internal_security();
}
inline void Socket::unsafe_arena_set_allocated_security(
    ::grpc::channelz::v1::Security* security) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_);
  }
  security_ = security;
  if (security) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Socket.security)
}
inline ::grpc::channelz::v1::Security* Socket::release_security() {
  
  ::grpc::channelz::v1::Security* temp = security_;
  security_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::Security* Socket::unsafe_arena_release_security() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Socket.security)
  
  ::grpc::channelz::v1::Security* temp = security_;
  security_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::Security* Socket::_internal_mutable_security() {
  
  if (security_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::Security>(GetArenaForAllocation());
    security_ = p;
  }
  return security_;
}
inline ::grpc::channelz::v1::Security* Socket::mutable_security() {
  ::grpc::channelz::v1::Security* _msg = _internal_mutable_security();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Socket.security)
  return _msg;
}
inline void Socket::set_allocated_security(::grpc::channelz::v1::Security* security) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete security_;
  }
  if (security) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::Security>::GetOwningArena(security);
    if (message_arena != submessage_arena) {
      security = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    
  } else {
    
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Socket.security)
}

// string remote_name = 6;
inline void Socket::clear_remote_name() {
  remote_name_.ClearToEmpty();
}
inline const std::string& Socket::remote_name() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Socket.remote_name)
  return _internal_remote_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Socket::set_remote_name(ArgT0&& arg0, ArgT... args) {
 
 remote_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.Socket.remote_name)
}
inline std::string* Socket::mutable_remote_name() {
  std::string* _s = _internal_mutable_remote_name();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Socket.remote_name)
  return _s;
}
inline const std::string& Socket::_internal_remote_name() const {
  return remote_name_.Get();
}
inline void Socket::_internal_set_remote_name(const std::string& value) {
  
  remote_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Socket::_internal_mutable_remote_name() {
  
  return remote_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Socket::release_remote_name() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Socket.remote_name)
  return remote_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Socket::set_allocated_remote_name(std::string* remote_name) {
  if (remote_name != nullptr) {
    
  } else {
    
  }
  remote_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Socket.remote_name)
}

// -------------------------------------------------------------------

// SocketData

// int64 streams_started = 1;
inline void SocketData::clear_streams_started() {
  streams_started_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketData::_internal_streams_started() const {
  return streams_started_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketData::streams_started() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.streams_started)
  return _internal_streams_started();
}
inline void SocketData::_internal_set_streams_started(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  streams_started_ = value;
}
inline void SocketData::set_streams_started(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_streams_started(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketData.streams_started)
}

// int64 streams_succeeded = 2;
inline void SocketData::clear_streams_succeeded() {
  streams_succeeded_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketData::_internal_streams_succeeded() const {
  return streams_succeeded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketData::streams_succeeded() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.streams_succeeded)
  return _internal_streams_succeeded();
}
inline void SocketData::_internal_set_streams_succeeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  streams_succeeded_ = value;
}
inline void SocketData::set_streams_succeeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_streams_succeeded(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketData.streams_succeeded)
}

// int64 streams_failed = 3;
inline void SocketData::clear_streams_failed() {
  streams_failed_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketData::_internal_streams_failed() const {
  return streams_failed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketData::streams_failed() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.streams_failed)
  return _internal_streams_failed();
}
inline void SocketData::_internal_set_streams_failed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  streams_failed_ = value;
}
inline void SocketData::set_streams_failed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_streams_failed(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketData.streams_failed)
}

// int64 messages_sent = 4;
inline void SocketData::clear_messages_sent() {
  messages_sent_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketData::_internal_messages_sent() const {
  return messages_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketData::messages_sent() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.messages_sent)
  return _internal_messages_sent();
}
inline void SocketData::_internal_set_messages_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  messages_sent_ = value;
}
inline void SocketData::set_messages_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_messages_sent(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketData.messages_sent)
}

// int64 messages_received = 5;
inline void SocketData::clear_messages_received() {
  messages_received_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketData::_internal_messages_received() const {
  return messages_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketData::messages_received() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.messages_received)
  return _internal_messages_received();
}
inline void SocketData::_internal_set_messages_received(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  messages_received_ = value;
}
inline void SocketData::set_messages_received(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_messages_received(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketData.messages_received)
}

// int64 keep_alives_sent = 6;
inline void SocketData::clear_keep_alives_sent() {
  keep_alives_sent_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketData::_internal_keep_alives_sent() const {
  return keep_alives_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SocketData::keep_alives_sent() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.keep_alives_sent)
  return _internal_keep_alives_sent();
}
inline void SocketData::_internal_set_keep_alives_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  keep_alives_sent_ = value;
}
inline void SocketData::set_keep_alives_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_keep_alives_sent(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketData.keep_alives_sent)
}

// .google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
inline bool SocketData::_internal_has_last_local_stream_created_timestamp() const {
  return this != internal_default_instance() && last_local_stream_created_timestamp_ != nullptr;
}
inline bool SocketData::has_last_local_stream_created_timestamp() const {
  return _internal_has_last_local_stream_created_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SocketData::_internal_last_local_stream_created_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_local_stream_created_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SocketData::last_local_stream_created_timestamp() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.last_local_stream_created_timestamp)
  return _internal_last_local_stream_created_timestamp();
}
inline void SocketData::unsafe_arena_set_allocated_last_local_stream_created_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_local_stream_created_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_local_stream_created_timestamp_);
  }
  last_local_stream_created_timestamp_ = last_local_stream_created_timestamp;
  if (last_local_stream_created_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.SocketData.last_local_stream_created_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::release_last_local_stream_created_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_local_stream_created_timestamp_;
  last_local_stream_created_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::unsafe_arena_release_last_local_stream_created_timestamp() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SocketData.last_local_stream_created_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_local_stream_created_timestamp_;
  last_local_stream_created_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::_internal_mutable_last_local_stream_created_timestamp() {
  
  if (last_local_stream_created_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_local_stream_created_timestamp_ = p;
  }
  return last_local_stream_created_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::mutable_last_local_stream_created_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_local_stream_created_timestamp();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketData.last_local_stream_created_timestamp)
  return _msg;
}
inline void SocketData::set_allocated_last_local_stream_created_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* last_local_stream_created_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_local_stream_created_timestamp_);
  }
  if (last_local_stream_created_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_local_stream_created_timestamp));
    if (message_arena != submessage_arena) {
      last_local_stream_created_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_local_stream_created_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  last_local_stream_created_timestamp_ = last_local_stream_created_timestamp;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SocketData.last_local_stream_created_timestamp)
}

// .google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
inline bool SocketData::_internal_has_last_remote_stream_created_timestamp() const {
  return this != internal_default_instance() && last_remote_stream_created_timestamp_ != nullptr;
}
inline bool SocketData::has_last_remote_stream_created_timestamp() const {
  return _internal_has_last_remote_stream_created_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SocketData::_internal_last_remote_stream_created_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_remote_stream_created_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SocketData::last_remote_stream_created_timestamp() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.last_remote_stream_created_timestamp)
  return _internal_last_remote_stream_created_timestamp();
}
inline void SocketData::unsafe_arena_set_allocated_last_remote_stream_created_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_remote_stream_created_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_remote_stream_created_timestamp_);
  }
  last_remote_stream_created_timestamp_ = last_remote_stream_created_timestamp;
  if (last_remote_stream_created_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.SocketData.last_remote_stream_created_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::release_last_remote_stream_created_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_remote_stream_created_timestamp_;
  last_remote_stream_created_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::unsafe_arena_release_last_remote_stream_created_timestamp() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SocketData.last_remote_stream_created_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_remote_stream_created_timestamp_;
  last_remote_stream_created_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::_internal_mutable_last_remote_stream_created_timestamp() {
  
  if (last_remote_stream_created_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_remote_stream_created_timestamp_ = p;
  }
  return last_remote_stream_created_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::mutable_last_remote_stream_created_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_remote_stream_created_timestamp();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketData.last_remote_stream_created_timestamp)
  return _msg;
}
inline void SocketData::set_allocated_last_remote_stream_created_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* last_remote_stream_created_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_remote_stream_created_timestamp_);
  }
  if (last_remote_stream_created_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_remote_stream_created_timestamp));
    if (message_arena != submessage_arena) {
      last_remote_stream_created_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_remote_stream_created_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  last_remote_stream_created_timestamp_ = last_remote_stream_created_timestamp;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SocketData.last_remote_stream_created_timestamp)
}

// .google.protobuf.Timestamp last_message_sent_timestamp = 9;
inline bool SocketData::_internal_has_last_message_sent_timestamp() const {
  return this != internal_default_instance() && last_message_sent_timestamp_ != nullptr;
}
inline bool SocketData::has_last_message_sent_timestamp() const {
  return _internal_has_last_message_sent_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SocketData::_internal_last_message_sent_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_message_sent_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SocketData::last_message_sent_timestamp() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.last_message_sent_timestamp)
  return _internal_last_message_sent_timestamp();
}
inline void SocketData::unsafe_arena_set_allocated_last_message_sent_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_message_sent_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_message_sent_timestamp_);
  }
  last_message_sent_timestamp_ = last_message_sent_timestamp;
  if (last_message_sent_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.SocketData.last_message_sent_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::release_last_message_sent_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_message_sent_timestamp_;
  last_message_sent_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::unsafe_arena_release_last_message_sent_timestamp() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SocketData.last_message_sent_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_message_sent_timestamp_;
  last_message_sent_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::_internal_mutable_last_message_sent_timestamp() {
  
  if (last_message_sent_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_message_sent_timestamp_ = p;
  }
  return last_message_sent_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::mutable_last_message_sent_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_message_sent_timestamp();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketData.last_message_sent_timestamp)
  return _msg;
}
inline void SocketData::set_allocated_last_message_sent_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* last_message_sent_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_message_sent_timestamp_);
  }
  if (last_message_sent_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_message_sent_timestamp));
    if (message_arena != submessage_arena) {
      last_message_sent_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_message_sent_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  last_message_sent_timestamp_ = last_message_sent_timestamp;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SocketData.last_message_sent_timestamp)
}

// .google.protobuf.Timestamp last_message_received_timestamp = 10;
inline bool SocketData::_internal_has_last_message_received_timestamp() const {
  return this != internal_default_instance() && last_message_received_timestamp_ != nullptr;
}
inline bool SocketData::has_last_message_received_timestamp() const {
  return _internal_has_last_message_received_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SocketData::_internal_last_message_received_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_message_received_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SocketData::last_message_received_timestamp() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.last_message_received_timestamp)
  return _internal_last_message_received_timestamp();
}
inline void SocketData::unsafe_arena_set_allocated_last_message_received_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_message_received_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_message_received_timestamp_);
  }
  last_message_received_timestamp_ = last_message_received_timestamp;
  if (last_message_received_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.SocketData.last_message_received_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::release_last_message_received_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_message_received_timestamp_;
  last_message_received_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::unsafe_arena_release_last_message_received_timestamp() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SocketData.last_message_received_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_message_received_timestamp_;
  last_message_received_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::_internal_mutable_last_message_received_timestamp() {
  
  if (last_message_received_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_message_received_timestamp_ = p;
  }
  return last_message_received_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SocketData::mutable_last_message_received_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_message_received_timestamp();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketData.last_message_received_timestamp)
  return _msg;
}
inline void SocketData::set_allocated_last_message_received_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* last_message_received_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_message_received_timestamp_);
  }
  if (last_message_received_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_message_received_timestamp));
    if (message_arena != submessage_arena) {
      last_message_received_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_message_received_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  last_message_received_timestamp_ = last_message_received_timestamp;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SocketData.last_message_received_timestamp)
}

// .google.protobuf.Int64Value local_flow_control_window = 11;
inline bool SocketData::_internal_has_local_flow_control_window() const {
  return this != internal_default_instance() && local_flow_control_window_ != nullptr;
}
inline bool SocketData::has_local_flow_control_window() const {
  return _internal_has_local_flow_control_window();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& SocketData::_internal_local_flow_control_window() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = local_flow_control_window_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value&>(
      PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& SocketData::local_flow_control_window() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.local_flow_control_window)
  return _internal_local_flow_control_window();
}
inline void SocketData::unsafe_arena_set_allocated_local_flow_control_window(
    PROTOBUF_NAMESPACE_ID::Int64Value* local_flow_control_window) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_flow_control_window_);
  }
  local_flow_control_window_ = local_flow_control_window;
  if (local_flow_control_window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.SocketData.local_flow_control_window)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* SocketData::release_local_flow_control_window() {
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = local_flow_control_window_;
  local_flow_control_window_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* SocketData::unsafe_arena_release_local_flow_control_window() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SocketData.local_flow_control_window)
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = local_flow_control_window_;
  local_flow_control_window_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* SocketData::_internal_mutable_local_flow_control_window() {
  
  if (local_flow_control_window_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArenaForAllocation());
    local_flow_control_window_ = p;
  }
  return local_flow_control_window_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* SocketData::mutable_local_flow_control_window() {
  PROTOBUF_NAMESPACE_ID::Int64Value* _msg = _internal_mutable_local_flow_control_window();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketData.local_flow_control_window)
  return _msg;
}
inline void SocketData::set_allocated_local_flow_control_window(PROTOBUF_NAMESPACE_ID::Int64Value* local_flow_control_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_flow_control_window_);
  }
  if (local_flow_control_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_flow_control_window));
    if (message_arena != submessage_arena) {
      local_flow_control_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_flow_control_window, submessage_arena);
    }
    
  } else {
    
  }
  local_flow_control_window_ = local_flow_control_window;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SocketData.local_flow_control_window)
}

// .google.protobuf.Int64Value remote_flow_control_window = 12;
inline bool SocketData::_internal_has_remote_flow_control_window() const {
  return this != internal_default_instance() && remote_flow_control_window_ != nullptr;
}
inline bool SocketData::has_remote_flow_control_window() const {
  return _internal_has_remote_flow_control_window();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& SocketData::_internal_remote_flow_control_window() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = remote_flow_control_window_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value&>(
      PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& SocketData::remote_flow_control_window() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.remote_flow_control_window)
  return _internal_remote_flow_control_window();
}
inline void SocketData::unsafe_arena_set_allocated_remote_flow_control_window(
    PROTOBUF_NAMESPACE_ID::Int64Value* remote_flow_control_window) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_flow_control_window_);
  }
  remote_flow_control_window_ = remote_flow_control_window;
  if (remote_flow_control_window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.SocketData.remote_flow_control_window)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* SocketData::release_remote_flow_control_window() {
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = remote_flow_control_window_;
  remote_flow_control_window_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* SocketData::unsafe_arena_release_remote_flow_control_window() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SocketData.remote_flow_control_window)
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = remote_flow_control_window_;
  remote_flow_control_window_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* SocketData::_internal_mutable_remote_flow_control_window() {
  
  if (remote_flow_control_window_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArenaForAllocation());
    remote_flow_control_window_ = p;
  }
  return remote_flow_control_window_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* SocketData::mutable_remote_flow_control_window() {
  PROTOBUF_NAMESPACE_ID::Int64Value* _msg = _internal_mutable_remote_flow_control_window();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketData.remote_flow_control_window)
  return _msg;
}
inline void SocketData::set_allocated_remote_flow_control_window(PROTOBUF_NAMESPACE_ID::Int64Value* remote_flow_control_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_flow_control_window_);
  }
  if (remote_flow_control_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_flow_control_window));
    if (message_arena != submessage_arena) {
      remote_flow_control_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_flow_control_window, submessage_arena);
    }
    
  } else {
    
  }
  remote_flow_control_window_ = remote_flow_control_window;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SocketData.remote_flow_control_window)
}

// repeated .grpc.channelz.v1.SocketOption option = 13;
inline int SocketData::_internal_option_size() const {
  return option_.size();
}
inline int SocketData::option_size() const {
  return _internal_option_size();
}
inline void SocketData::clear_option() {
  option_.Clear();
}
inline ::grpc::channelz::v1::SocketOption* SocketData::mutable_option(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketData.option)
  return option_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketOption >*
SocketData::mutable_option() {
  // @@protoc_insertion_point(field_mutable_list:grpc.channelz.v1.SocketData.option)
  return &option_;
}
inline const ::grpc::channelz::v1::SocketOption& SocketData::_internal_option(int index) const {
  return option_.Get(index);
}
inline const ::grpc::channelz::v1::SocketOption& SocketData::option(int index) const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketData.option)
  return _internal_option(index);
}
inline ::grpc::channelz::v1::SocketOption* SocketData::_internal_add_option() {
  return option_.Add();
}
inline ::grpc::channelz::v1::SocketOption* SocketData::add_option() {
  ::grpc::channelz::v1::SocketOption* _add = _internal_add_option();
  // @@protoc_insertion_point(field_add:grpc.channelz.v1.SocketData.option)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketOption >&
SocketData::option() const {
  // @@protoc_insertion_point(field_list:grpc.channelz.v1.SocketData.option)
  return option_;
}

// -------------------------------------------------------------------

// Address_TcpIpAddress

// bytes ip_address = 1;
inline void Address_TcpIpAddress::clear_ip_address() {
  ip_address_.ClearToEmpty();
}
inline const std::string& Address_TcpIpAddress::ip_address() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Address.TcpIpAddress.ip_address)
  return _internal_ip_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Address_TcpIpAddress::set_ip_address(ArgT0&& arg0, ArgT... args) {
 
 ip_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.Address.TcpIpAddress.ip_address)
}
inline std::string* Address_TcpIpAddress::mutable_ip_address() {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Address.TcpIpAddress.ip_address)
  return _s;
}
inline const std::string& Address_TcpIpAddress::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void Address_TcpIpAddress::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Address_TcpIpAddress::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Address_TcpIpAddress::release_ip_address() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Address.TcpIpAddress.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Address_TcpIpAddress::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.TcpIpAddress.ip_address)
}

// int32 port = 2;
inline void Address_TcpIpAddress::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Address_TcpIpAddress::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Address_TcpIpAddress::port() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Address.TcpIpAddress.port)
  return _internal_port();
}
inline void Address_TcpIpAddress::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void Address_TcpIpAddress::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.Address.TcpIpAddress.port)
}

// -------------------------------------------------------------------

// Address_UdsAddress

// string filename = 1;
inline void Address_UdsAddress::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& Address_UdsAddress::filename() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Address.UdsAddress.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Address_UdsAddress::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.Address.UdsAddress.filename)
}
inline std::string* Address_UdsAddress::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Address.UdsAddress.filename)
  return _s;
}
inline const std::string& Address_UdsAddress::_internal_filename() const {
  return filename_.Get();
}
inline void Address_UdsAddress::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Address_UdsAddress::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Address_UdsAddress::release_filename() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Address.UdsAddress.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Address_UdsAddress::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.UdsAddress.filename)
}

// -------------------------------------------------------------------

// Address_OtherAddress

// string name = 1;
inline void Address_OtherAddress::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Address_OtherAddress::name() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Address.OtherAddress.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Address_OtherAddress::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.Address.OtherAddress.name)
}
inline std::string* Address_OtherAddress::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Address.OtherAddress.name)
  return _s;
}
inline const std::string& Address_OtherAddress::_internal_name() const {
  return name_.Get();
}
inline void Address_OtherAddress::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Address_OtherAddress::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Address_OtherAddress::release_name() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Address.OtherAddress.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Address_OtherAddress::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.OtherAddress.name)
}

// .google.protobuf.Any value = 2;
inline bool Address_OtherAddress::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Address_OtherAddress::has_value() const {
  return _internal_has_value();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Address_OtherAddress::_internal_value() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Address_OtherAddress::value() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Address.OtherAddress.value)
  return _internal_value();
}
inline void Address_OtherAddress::unsafe_arena_set_allocated_value(
    PROTOBUF_NAMESPACE_ID::Any* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Address.OtherAddress.value)
}
inline PROTOBUF_NAMESPACE_ID::Any* Address_OtherAddress::release_value() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Address_OtherAddress::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Address.OtherAddress.value)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = value_;
  value_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Address_OtherAddress::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Address_OtherAddress::mutable_value() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Address.OtherAddress.value)
  return _msg;
}
inline void Address_OtherAddress::set_allocated_value(PROTOBUF_NAMESPACE_ID::Any* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.OtherAddress.value)
}

// -------------------------------------------------------------------

// Address

// .grpc.channelz.v1.Address.TcpIpAddress tcpip_address = 1;
inline bool Address::_internal_has_tcpip_address() const {
  return address_case() == kTcpipAddress;
}
inline bool Address::has_tcpip_address() const {
  return _internal_has_tcpip_address();
}
inline void Address::set_has_tcpip_address() {
  _oneof_case_[0] = kTcpipAddress;
}
inline void Address::clear_tcpip_address() {
  if (_internal_has_tcpip_address()) {
    if (GetArenaForAllocation() == nullptr) {
      delete address_.tcpip_address_;
    }
    clear_has_address();
  }
}
inline ::grpc::channelz::v1::Address_TcpIpAddress* Address::release_tcpip_address() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Address.tcpip_address)
  if (_internal_has_tcpip_address()) {
    clear_has_address();
      ::grpc::channelz::v1::Address_TcpIpAddress* temp = address_.tcpip_address_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    address_.tcpip_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::channelz::v1::Address_TcpIpAddress& Address::_internal_tcpip_address() const {
  return _internal_has_tcpip_address()
      ? *address_.tcpip_address_
      : reinterpret_cast< ::grpc::channelz::v1::Address_TcpIpAddress&>(::grpc::channelz::v1::_Address_TcpIpAddress_default_instance_);
}
inline const ::grpc::channelz::v1::Address_TcpIpAddress& Address::tcpip_address() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Address.tcpip_address)
  return _internal_tcpip_address();
}
inline ::grpc::channelz::v1::Address_TcpIpAddress* Address::unsafe_arena_release_tcpip_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.channelz.v1.Address.tcpip_address)
  if (_internal_has_tcpip_address()) {
    clear_has_address();
    ::grpc::channelz::v1::Address_TcpIpAddress* temp = address_.tcpip_address_;
    address_.tcpip_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Address::unsafe_arena_set_allocated_tcpip_address(::grpc::channelz::v1::Address_TcpIpAddress* tcpip_address) {
  clear_address();
  if (tcpip_address) {
    set_has_tcpip_address();
    address_.tcpip_address_ = tcpip_address;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Address.tcpip_address)
}
inline ::grpc::channelz::v1::Address_TcpIpAddress* Address::_internal_mutable_tcpip_address() {
  if (!_internal_has_tcpip_address()) {
    clear_address();
    set_has_tcpip_address();
    address_.tcpip_address_ = CreateMaybeMessage< ::grpc::channelz::v1::Address_TcpIpAddress >(GetArenaForAllocation());
  }
  return address_.tcpip_address_;
}
inline ::grpc::channelz::v1::Address_TcpIpAddress* Address::mutable_tcpip_address() {
  ::grpc::channelz::v1::Address_TcpIpAddress* _msg = _internal_mutable_tcpip_address();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Address.tcpip_address)
  return _msg;
}

// .grpc.channelz.v1.Address.UdsAddress uds_address = 2;
inline bool Address::_internal_has_uds_address() const {
  return address_case() == kUdsAddress;
}
inline bool Address::has_uds_address() const {
  return _internal_has_uds_address();
}
inline void Address::set_has_uds_address() {
  _oneof_case_[0] = kUdsAddress;
}
inline void Address::clear_uds_address() {
  if (_internal_has_uds_address()) {
    if (GetArenaForAllocation() == nullptr) {
      delete address_.uds_address_;
    }
    clear_has_address();
  }
}
inline ::grpc::channelz::v1::Address_UdsAddress* Address::release_uds_address() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Address.uds_address)
  if (_internal_has_uds_address()) {
    clear_has_address();
      ::grpc::channelz::v1::Address_UdsAddress* temp = address_.uds_address_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    address_.uds_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::channelz::v1::Address_UdsAddress& Address::_internal_uds_address() const {
  return _internal_has_uds_address()
      ? *address_.uds_address_
      : reinterpret_cast< ::grpc::channelz::v1::Address_UdsAddress&>(::grpc::channelz::v1::_Address_UdsAddress_default_instance_);
}
inline const ::grpc::channelz::v1::Address_UdsAddress& Address::uds_address() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Address.uds_address)
  return _internal_uds_address();
}
inline ::grpc::channelz::v1::Address_UdsAddress* Address::unsafe_arena_release_uds_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.channelz.v1.Address.uds_address)
  if (_internal_has_uds_address()) {
    clear_has_address();
    ::grpc::channelz::v1::Address_UdsAddress* temp = address_.uds_address_;
    address_.uds_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Address::unsafe_arena_set_allocated_uds_address(::grpc::channelz::v1::Address_UdsAddress* uds_address) {
  clear_address();
  if (uds_address) {
    set_has_uds_address();
    address_.uds_address_ = uds_address;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Address.uds_address)
}
inline ::grpc::channelz::v1::Address_UdsAddress* Address::_internal_mutable_uds_address() {
  if (!_internal_has_uds_address()) {
    clear_address();
    set_has_uds_address();
    address_.uds_address_ = CreateMaybeMessage< ::grpc::channelz::v1::Address_UdsAddress >(GetArenaForAllocation());
  }
  return address_.uds_address_;
}
inline ::grpc::channelz::v1::Address_UdsAddress* Address::mutable_uds_address() {
  ::grpc::channelz::v1::Address_UdsAddress* _msg = _internal_mutable_uds_address();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Address.uds_address)
  return _msg;
}

// .grpc.channelz.v1.Address.OtherAddress other_address = 3;
inline bool Address::_internal_has_other_address() const {
  return address_case() == kOtherAddress;
}
inline bool Address::has_other_address() const {
  return _internal_has_other_address();
}
inline void Address::set_has_other_address() {
  _oneof_case_[0] = kOtherAddress;
}
inline void Address::clear_other_address() {
  if (_internal_has_other_address()) {
    if (GetArenaForAllocation() == nullptr) {
      delete address_.other_address_;
    }
    clear_has_address();
  }
}
inline ::grpc::channelz::v1::Address_OtherAddress* Address::release_other_address() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Address.other_address)
  if (_internal_has_other_address()) {
    clear_has_address();
      ::grpc::channelz::v1::Address_OtherAddress* temp = address_.other_address_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    address_.other_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::channelz::v1::Address_OtherAddress& Address::_internal_other_address() const {
  return _internal_has_other_address()
      ? *address_.other_address_
      : reinterpret_cast< ::grpc::channelz::v1::Address_OtherAddress&>(::grpc::channelz::v1::_Address_OtherAddress_default_instance_);
}
inline const ::grpc::channelz::v1::Address_OtherAddress& Address::other_address() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Address.other_address)
  return _internal_other_address();
}
inline ::grpc::channelz::v1::Address_OtherAddress* Address::unsafe_arena_release_other_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.channelz.v1.Address.other_address)
  if (_internal_has_other_address()) {
    clear_has_address();
    ::grpc::channelz::v1::Address_OtherAddress* temp = address_.other_address_;
    address_.other_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Address::unsafe_arena_set_allocated_other_address(::grpc::channelz::v1::Address_OtherAddress* other_address) {
  clear_address();
  if (other_address) {
    set_has_other_address();
    address_.other_address_ = other_address;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Address.other_address)
}
inline ::grpc::channelz::v1::Address_OtherAddress* Address::_internal_mutable_other_address() {
  if (!_internal_has_other_address()) {
    clear_address();
    set_has_other_address();
    address_.other_address_ = CreateMaybeMessage< ::grpc::channelz::v1::Address_OtherAddress >(GetArenaForAllocation());
  }
  return address_.other_address_;
}
inline ::grpc::channelz::v1::Address_OtherAddress* Address::mutable_other_address() {
  ::grpc::channelz::v1::Address_OtherAddress* _msg = _internal_mutable_other_address();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Address.other_address)
  return _msg;
}

inline bool Address::has_address() const {
  return address_case() != ADDRESS_NOT_SET;
}
inline void Address::clear_has_address() {
  _oneof_case_[0] = ADDRESS_NOT_SET;
}
inline Address::AddressCase Address::address_case() const {
  return Address::AddressCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Security_Tls

// string standard_name = 1;
inline bool Security_Tls::_internal_has_standard_name() const {
  return cipher_suite_case() == kStandardName;
}
inline bool Security_Tls::has_standard_name() const {
  return _internal_has_standard_name();
}
inline void Security_Tls::set_has_standard_name() {
  _oneof_case_[0] = kStandardName;
}
inline void Security_Tls::clear_standard_name() {
  if (_internal_has_standard_name()) {
    cipher_suite_.standard_name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_cipher_suite();
  }
}
inline const std::string& Security_Tls::standard_name() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Security.Tls.standard_name)
  return _internal_standard_name();
}
template <typename ArgT0, typename... ArgT>
inline void Security_Tls::set_standard_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_standard_name()) {
    clear_cipher_suite();
    set_has_standard_name();
    cipher_suite_.standard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  cipher_suite_.standard_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.Security.Tls.standard_name)
}
inline std::string* Security_Tls::mutable_standard_name() {
  std::string* _s = _internal_mutable_standard_name();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Security.Tls.standard_name)
  return _s;
}
inline const std::string& Security_Tls::_internal_standard_name() const {
  if (_internal_has_standard_name()) {
    return cipher_suite_.standard_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Security_Tls::_internal_set_standard_name(const std::string& value) {
  if (!_internal_has_standard_name()) {
    clear_cipher_suite();
    set_has_standard_name();
    cipher_suite_.standard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  cipher_suite_.standard_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Security_Tls::_internal_mutable_standard_name() {
  if (!_internal_has_standard_name()) {
    clear_cipher_suite();
    set_has_standard_name();
    cipher_suite_.standard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return cipher_suite_.standard_name_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Security_Tls::release_standard_name() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Security.Tls.standard_name)
  if (_internal_has_standard_name()) {
    clear_has_cipher_suite();
    return cipher_suite_.standard_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Security_Tls::set_allocated_standard_name(std::string* standard_name) {
  if (has_cipher_suite()) {
    clear_cipher_suite();
  }
  if (standard_name != nullptr) {
    set_has_standard_name();
    cipher_suite_.standard_name_.UnsafeSetDefault(standard_name);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(standard_name);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Security.Tls.standard_name)
}

// string other_name = 2;
inline bool Security_Tls::_internal_has_other_name() const {
  return cipher_suite_case() == kOtherName;
}
inline bool Security_Tls::has_other_name() const {
  return _internal_has_other_name();
}
inline void Security_Tls::set_has_other_name() {
  _oneof_case_[0] = kOtherName;
}
inline void Security_Tls::clear_other_name() {
  if (_internal_has_other_name()) {
    cipher_suite_.other_name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_cipher_suite();
  }
}
inline const std::string& Security_Tls::other_name() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Security.Tls.other_name)
  return _internal_other_name();
}
template <typename ArgT0, typename... ArgT>
inline void Security_Tls::set_other_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_other_name()) {
    clear_cipher_suite();
    set_has_other_name();
    cipher_suite_.other_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  cipher_suite_.other_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.Security.Tls.other_name)
}
inline std::string* Security_Tls::mutable_other_name() {
  std::string* _s = _internal_mutable_other_name();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Security.Tls.other_name)
  return _s;
}
inline const std::string& Security_Tls::_internal_other_name() const {
  if (_internal_has_other_name()) {
    return cipher_suite_.other_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Security_Tls::_internal_set_other_name(const std::string& value) {
  if (!_internal_has_other_name()) {
    clear_cipher_suite();
    set_has_other_name();
    cipher_suite_.other_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  cipher_suite_.other_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Security_Tls::_internal_mutable_other_name() {
  if (!_internal_has_other_name()) {
    clear_cipher_suite();
    set_has_other_name();
    cipher_suite_.other_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return cipher_suite_.other_name_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Security_Tls::release_other_name() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Security.Tls.other_name)
  if (_internal_has_other_name()) {
    clear_has_cipher_suite();
    return cipher_suite_.other_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Security_Tls::set_allocated_other_name(std::string* other_name) {
  if (has_cipher_suite()) {
    clear_cipher_suite();
  }
  if (other_name != nullptr) {
    set_has_other_name();
    cipher_suite_.other_name_.UnsafeSetDefault(other_name);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(other_name);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Security.Tls.other_name)
}

// bytes local_certificate = 3;
inline void Security_Tls::clear_local_certificate() {
  local_certificate_.ClearToEmpty();
}
inline const std::string& Security_Tls::local_certificate() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Security.Tls.local_certificate)
  return _internal_local_certificate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Security_Tls::set_local_certificate(ArgT0&& arg0, ArgT... args) {
 
 local_certificate_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.Security.Tls.local_certificate)
}
inline std::string* Security_Tls::mutable_local_certificate() {
  std::string* _s = _internal_mutable_local_certificate();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Security.Tls.local_certificate)
  return _s;
}
inline const std::string& Security_Tls::_internal_local_certificate() const {
  return local_certificate_.Get();
}
inline void Security_Tls::_internal_set_local_certificate(const std::string& value) {
  
  local_certificate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Security_Tls::_internal_mutable_local_certificate() {
  
  return local_certificate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Security_Tls::release_local_certificate() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Security.Tls.local_certificate)
  return local_certificate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Security_Tls::set_allocated_local_certificate(std::string* local_certificate) {
  if (local_certificate != nullptr) {
    
  } else {
    
  }
  local_certificate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_certificate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Security.Tls.local_certificate)
}

// bytes remote_certificate = 4;
inline void Security_Tls::clear_remote_certificate() {
  remote_certificate_.ClearToEmpty();
}
inline const std::string& Security_Tls::remote_certificate() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Security.Tls.remote_certificate)
  return _internal_remote_certificate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Security_Tls::set_remote_certificate(ArgT0&& arg0, ArgT... args) {
 
 remote_certificate_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.Security.Tls.remote_certificate)
}
inline std::string* Security_Tls::mutable_remote_certificate() {
  std::string* _s = _internal_mutable_remote_certificate();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Security.Tls.remote_certificate)
  return _s;
}
inline const std::string& Security_Tls::_internal_remote_certificate() const {
  return remote_certificate_.Get();
}
inline void Security_Tls::_internal_set_remote_certificate(const std::string& value) {
  
  remote_certificate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Security_Tls::_internal_mutable_remote_certificate() {
  
  return remote_certificate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Security_Tls::release_remote_certificate() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Security.Tls.remote_certificate)
  return remote_certificate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Security_Tls::set_allocated_remote_certificate(std::string* remote_certificate) {
  if (remote_certificate != nullptr) {
    
  } else {
    
  }
  remote_certificate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_certificate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Security.Tls.remote_certificate)
}

inline bool Security_Tls::has_cipher_suite() const {
  return cipher_suite_case() != CIPHER_SUITE_NOT_SET;
}
inline void Security_Tls::clear_has_cipher_suite() {
  _oneof_case_[0] = CIPHER_SUITE_NOT_SET;
}
inline Security_Tls::CipherSuiteCase Security_Tls::cipher_suite_case() const {
  return Security_Tls::CipherSuiteCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Security_OtherSecurity

// string name = 1;
inline void Security_OtherSecurity::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Security_OtherSecurity::name() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Security.OtherSecurity.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Security_OtherSecurity::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.Security.OtherSecurity.name)
}
inline std::string* Security_OtherSecurity::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Security.OtherSecurity.name)
  return _s;
}
inline const std::string& Security_OtherSecurity::_internal_name() const {
  return name_.Get();
}
inline void Security_OtherSecurity::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Security_OtherSecurity::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Security_OtherSecurity::release_name() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Security.OtherSecurity.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Security_OtherSecurity::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Security.OtherSecurity.name)
}

// .google.protobuf.Any value = 2;
inline bool Security_OtherSecurity::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Security_OtherSecurity::has_value() const {
  return _internal_has_value();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Security_OtherSecurity::_internal_value() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Security_OtherSecurity::value() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Security.OtherSecurity.value)
  return _internal_value();
}
inline void Security_OtherSecurity::unsafe_arena_set_allocated_value(
    PROTOBUF_NAMESPACE_ID::Any* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Security.OtherSecurity.value)
}
inline PROTOBUF_NAMESPACE_ID::Any* Security_OtherSecurity::release_value() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Security_OtherSecurity::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Security.OtherSecurity.value)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = value_;
  value_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Security_OtherSecurity::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Security_OtherSecurity::mutable_value() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Security.OtherSecurity.value)
  return _msg;
}
inline void Security_OtherSecurity::set_allocated_value(PROTOBUF_NAMESPACE_ID::Any* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Security.OtherSecurity.value)
}

// -------------------------------------------------------------------

// Security

// .grpc.channelz.v1.Security.Tls tls = 1;
inline bool Security::_internal_has_tls() const {
  return model_case() == kTls;
}
inline bool Security::has_tls() const {
  return _internal_has_tls();
}
inline void Security::set_has_tls() {
  _oneof_case_[0] = kTls;
}
inline void Security::clear_tls() {
  if (_internal_has_tls()) {
    if (GetArenaForAllocation() == nullptr) {
      delete model_.tls_;
    }
    clear_has_model();
  }
}
inline ::grpc::channelz::v1::Security_Tls* Security::release_tls() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Security.tls)
  if (_internal_has_tls()) {
    clear_has_model();
      ::grpc::channelz::v1::Security_Tls* temp = model_.tls_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    model_.tls_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::channelz::v1::Security_Tls& Security::_internal_tls() const {
  return _internal_has_tls()
      ? *model_.tls_
      : reinterpret_cast< ::grpc::channelz::v1::Security_Tls&>(::grpc::channelz::v1::_Security_Tls_default_instance_);
}
inline const ::grpc::channelz::v1::Security_Tls& Security::tls() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Security.tls)
  return _internal_tls();
}
inline ::grpc::channelz::v1::Security_Tls* Security::unsafe_arena_release_tls() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.channelz.v1.Security.tls)
  if (_internal_has_tls()) {
    clear_has_model();
    ::grpc::channelz::v1::Security_Tls* temp = model_.tls_;
    model_.tls_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Security::unsafe_arena_set_allocated_tls(::grpc::channelz::v1::Security_Tls* tls) {
  clear_model();
  if (tls) {
    set_has_tls();
    model_.tls_ = tls;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Security.tls)
}
inline ::grpc::channelz::v1::Security_Tls* Security::_internal_mutable_tls() {
  if (!_internal_has_tls()) {
    clear_model();
    set_has_tls();
    model_.tls_ = CreateMaybeMessage< ::grpc::channelz::v1::Security_Tls >(GetArenaForAllocation());
  }
  return model_.tls_;
}
inline ::grpc::channelz::v1::Security_Tls* Security::mutable_tls() {
  ::grpc::channelz::v1::Security_Tls* _msg = _internal_mutable_tls();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Security.tls)
  return _msg;
}

// .grpc.channelz.v1.Security.OtherSecurity other = 2;
inline bool Security::_internal_has_other() const {
  return model_case() == kOther;
}
inline bool Security::has_other() const {
  return _internal_has_other();
}
inline void Security::set_has_other() {
  _oneof_case_[0] = kOther;
}
inline void Security::clear_other() {
  if (_internal_has_other()) {
    if (GetArenaForAllocation() == nullptr) {
      delete model_.other_;
    }
    clear_has_model();
  }
}
inline ::grpc::channelz::v1::Security_OtherSecurity* Security::release_other() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.Security.other)
  if (_internal_has_other()) {
    clear_has_model();
      ::grpc::channelz::v1::Security_OtherSecurity* temp = model_.other_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    model_.other_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::channelz::v1::Security_OtherSecurity& Security::_internal_other() const {
  return _internal_has_other()
      ? *model_.other_
      : reinterpret_cast< ::grpc::channelz::v1::Security_OtherSecurity&>(::grpc::channelz::v1::_Security_OtherSecurity_default_instance_);
}
inline const ::grpc::channelz::v1::Security_OtherSecurity& Security::other() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.Security.other)
  return _internal_other();
}
inline ::grpc::channelz::v1::Security_OtherSecurity* Security::unsafe_arena_release_other() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.channelz.v1.Security.other)
  if (_internal_has_other()) {
    clear_has_model();
    ::grpc::channelz::v1::Security_OtherSecurity* temp = model_.other_;
    model_.other_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Security::unsafe_arena_set_allocated_other(::grpc::channelz::v1::Security_OtherSecurity* other) {
  clear_model();
  if (other) {
    set_has_other();
    model_.other_ = other;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.Security.other)
}
inline ::grpc::channelz::v1::Security_OtherSecurity* Security::_internal_mutable_other() {
  if (!_internal_has_other()) {
    clear_model();
    set_has_other();
    model_.other_ = CreateMaybeMessage< ::grpc::channelz::v1::Security_OtherSecurity >(GetArenaForAllocation());
  }
  return model_.other_;
}
inline ::grpc::channelz::v1::Security_OtherSecurity* Security::mutable_other() {
  ::grpc::channelz::v1::Security_OtherSecurity* _msg = _internal_mutable_other();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.Security.other)
  return _msg;
}

inline bool Security::has_model() const {
  return model_case() != MODEL_NOT_SET;
}
inline void Security::clear_has_model() {
  _oneof_case_[0] = MODEL_NOT_SET;
}
inline Security::ModelCase Security::model_case() const {
  return Security::ModelCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SocketOption

// string name = 1;
inline void SocketOption::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SocketOption::name() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOption.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SocketOption::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOption.name)
}
inline std::string* SocketOption::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketOption.name)
  return _s;
}
inline const std::string& SocketOption::_internal_name() const {
  return name_.Get();
}
inline void SocketOption::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SocketOption::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SocketOption::release_name() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SocketOption.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SocketOption::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SocketOption.name)
}

// string value = 2;
inline void SocketOption::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& SocketOption::value() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOption.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SocketOption::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOption.value)
}
inline std::string* SocketOption::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketOption.value)
  return _s;
}
inline const std::string& SocketOption::_internal_value() const {
  return value_.Get();
}
inline void SocketOption::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SocketOption::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SocketOption::release_value() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SocketOption.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SocketOption::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SocketOption.value)
}

// .google.protobuf.Any additional = 3;
inline bool SocketOption::_internal_has_additional() const {
  return this != internal_default_instance() && additional_ != nullptr;
}
inline bool SocketOption::has_additional() const {
  return _internal_has_additional();
}
inline const PROTOBUF_NAMESPACE_ID::Any& SocketOption::_internal_additional() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = additional_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& SocketOption::additional() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOption.additional)
  return _internal_additional();
}
inline void SocketOption::unsafe_arena_set_allocated_additional(
    PROTOBUF_NAMESPACE_ID::Any* additional) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(additional_);
  }
  additional_ = additional;
  if (additional) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.SocketOption.additional)
}
inline PROTOBUF_NAMESPACE_ID::Any* SocketOption::release_additional() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = additional_;
  additional_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* SocketOption::unsafe_arena_release_additional() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SocketOption.additional)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = additional_;
  additional_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* SocketOption::_internal_mutable_additional() {
  
  if (additional_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    additional_ = p;
  }
  return additional_;
}
inline PROTOBUF_NAMESPACE_ID::Any* SocketOption::mutable_additional() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_additional();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketOption.additional)
  return _msg;
}
inline void SocketOption::set_allocated_additional(PROTOBUF_NAMESPACE_ID::Any* additional) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(additional_);
  }
  if (additional) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(additional));
    if (message_arena != submessage_arena) {
      additional = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, additional, submessage_arena);
    }
    
  } else {
    
  }
  additional_ = additional;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SocketOption.additional)
}

// -------------------------------------------------------------------

// SocketOptionTimeout

// .google.protobuf.Duration duration = 1;
inline bool SocketOptionTimeout::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool SocketOptionTimeout::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SocketOptionTimeout::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SocketOptionTimeout::duration() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTimeout.duration)
  return _internal_duration();
}
inline void SocketOptionTimeout::unsafe_arena_set_allocated_duration(
    PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.SocketOptionTimeout.duration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* SocketOptionTimeout::release_duration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SocketOptionTimeout::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SocketOptionTimeout.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SocketOptionTimeout::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SocketOptionTimeout::mutable_duration() {
  PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketOptionTimeout.duration)
  return _msg;
}
inline void SocketOptionTimeout::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SocketOptionTimeout.duration)
}

// -------------------------------------------------------------------

// SocketOptionLinger

// bool active = 1;
inline void SocketOptionLinger::clear_active() {
  active_ = false;
}
inline bool SocketOptionLinger::_internal_active() const {
  return active_;
}
inline bool SocketOptionLinger::active() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionLinger.active)
  return _internal_active();
}
inline void SocketOptionLinger::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void SocketOptionLinger::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionLinger.active)
}

// .google.protobuf.Duration duration = 2;
inline bool SocketOptionLinger::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool SocketOptionLinger::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SocketOptionLinger::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SocketOptionLinger::duration() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionLinger.duration)
  return _internal_duration();
}
inline void SocketOptionLinger::unsafe_arena_set_allocated_duration(
    PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.SocketOptionLinger.duration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* SocketOptionLinger::release_duration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SocketOptionLinger::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.SocketOptionLinger.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SocketOptionLinger::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SocketOptionLinger::mutable_duration() {
  PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.SocketOptionLinger.duration)
  return _msg;
}
inline void SocketOptionLinger::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.SocketOptionLinger.duration)
}

// -------------------------------------------------------------------

// SocketOptionTcpInfo

// uint32 tcpi_state = 1;
inline void SocketOptionTcpInfo::clear_tcpi_state() {
  tcpi_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_state() const {
  return tcpi_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_state() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_state)
  return _internal_tcpi_state();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_state_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_state(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_state)
}

// uint32 tcpi_ca_state = 2;
inline void SocketOptionTcpInfo::clear_tcpi_ca_state() {
  tcpi_ca_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_ca_state() const {
  return tcpi_ca_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_ca_state() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_ca_state)
  return _internal_tcpi_ca_state();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_ca_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_ca_state_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_ca_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_ca_state(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_ca_state)
}

// uint32 tcpi_retransmits = 3;
inline void SocketOptionTcpInfo::clear_tcpi_retransmits() {
  tcpi_retransmits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_retransmits() const {
  return tcpi_retransmits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_retransmits() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_retransmits)
  return _internal_tcpi_retransmits();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_retransmits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_retransmits_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_retransmits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_retransmits(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_retransmits)
}

// uint32 tcpi_probes = 4;
inline void SocketOptionTcpInfo::clear_tcpi_probes() {
  tcpi_probes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_probes() const {
  return tcpi_probes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_probes() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_probes)
  return _internal_tcpi_probes();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_probes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_probes_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_probes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_probes(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_probes)
}

// uint32 tcpi_backoff = 5;
inline void SocketOptionTcpInfo::clear_tcpi_backoff() {
  tcpi_backoff_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_backoff() const {
  return tcpi_backoff_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_backoff() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_backoff)
  return _internal_tcpi_backoff();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_backoff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_backoff_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_backoff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_backoff(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_backoff)
}

// uint32 tcpi_options = 6;
inline void SocketOptionTcpInfo::clear_tcpi_options() {
  tcpi_options_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_options() const {
  return tcpi_options_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_options() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_options)
  return _internal_tcpi_options();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_options(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_options_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_options(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_options(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_options)
}

// uint32 tcpi_snd_wscale = 7;
inline void SocketOptionTcpInfo::clear_tcpi_snd_wscale() {
  tcpi_snd_wscale_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_snd_wscale() const {
  return tcpi_snd_wscale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_snd_wscale() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_snd_wscale)
  return _internal_tcpi_snd_wscale();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_snd_wscale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_snd_wscale_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_snd_wscale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_snd_wscale(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_snd_wscale)
}

// uint32 tcpi_rcv_wscale = 8;
inline void SocketOptionTcpInfo::clear_tcpi_rcv_wscale() {
  tcpi_rcv_wscale_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_rcv_wscale() const {
  return tcpi_rcv_wscale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_rcv_wscale() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_rcv_wscale)
  return _internal_tcpi_rcv_wscale();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_rcv_wscale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_rcv_wscale_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_rcv_wscale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_rcv_wscale(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_rcv_wscale)
}

// uint32 tcpi_rto = 9;
inline void SocketOptionTcpInfo::clear_tcpi_rto() {
  tcpi_rto_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_rto() const {
  return tcpi_rto_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_rto() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_rto)
  return _internal_tcpi_rto();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_rto(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_rto_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_rto(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_rto(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_rto)
}

// uint32 tcpi_ato = 10;
inline void SocketOptionTcpInfo::clear_tcpi_ato() {
  tcpi_ato_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_ato() const {
  return tcpi_ato_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_ato() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_ato)
  return _internal_tcpi_ato();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_ato(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_ato_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_ato(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_ato(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_ato)
}

// uint32 tcpi_snd_mss = 11;
inline void SocketOptionTcpInfo::clear_tcpi_snd_mss() {
  tcpi_snd_mss_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_snd_mss() const {
  return tcpi_snd_mss_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_snd_mss() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_snd_mss)
  return _internal_tcpi_snd_mss();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_snd_mss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_snd_mss_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_snd_mss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_snd_mss(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_snd_mss)
}

// uint32 tcpi_rcv_mss = 12;
inline void SocketOptionTcpInfo::clear_tcpi_rcv_mss() {
  tcpi_rcv_mss_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_rcv_mss() const {
  return tcpi_rcv_mss_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_rcv_mss() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_rcv_mss)
  return _internal_tcpi_rcv_mss();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_rcv_mss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_rcv_mss_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_rcv_mss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_rcv_mss(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_rcv_mss)
}

// uint32 tcpi_unacked = 13;
inline void SocketOptionTcpInfo::clear_tcpi_unacked() {
  tcpi_unacked_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_unacked() const {
  return tcpi_unacked_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_unacked() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_unacked)
  return _internal_tcpi_unacked();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_unacked(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_unacked_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_unacked(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_unacked(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_unacked)
}

// uint32 tcpi_sacked = 14;
inline void SocketOptionTcpInfo::clear_tcpi_sacked() {
  tcpi_sacked_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_sacked() const {
  return tcpi_sacked_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_sacked() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_sacked)
  return _internal_tcpi_sacked();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_sacked(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_sacked_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_sacked(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_sacked(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_sacked)
}

// uint32 tcpi_lost = 15;
inline void SocketOptionTcpInfo::clear_tcpi_lost() {
  tcpi_lost_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_lost() const {
  return tcpi_lost_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_lost() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_lost)
  return _internal_tcpi_lost();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_lost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_lost_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_lost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_lost(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_lost)
}

// uint32 tcpi_retrans = 16;
inline void SocketOptionTcpInfo::clear_tcpi_retrans() {
  tcpi_retrans_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_retrans() const {
  return tcpi_retrans_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_retrans() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_retrans)
  return _internal_tcpi_retrans();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_retrans(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_retrans_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_retrans(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_retrans(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_retrans)
}

// uint32 tcpi_fackets = 17;
inline void SocketOptionTcpInfo::clear_tcpi_fackets() {
  tcpi_fackets_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_fackets() const {
  return tcpi_fackets_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_fackets() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_fackets)
  return _internal_tcpi_fackets();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_fackets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_fackets_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_fackets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_fackets(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_fackets)
}

// uint32 tcpi_last_data_sent = 18;
inline void SocketOptionTcpInfo::clear_tcpi_last_data_sent() {
  tcpi_last_data_sent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_last_data_sent() const {
  return tcpi_last_data_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_last_data_sent() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_last_data_sent)
  return _internal_tcpi_last_data_sent();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_last_data_sent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_last_data_sent_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_last_data_sent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_last_data_sent(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_last_data_sent)
}

// uint32 tcpi_last_ack_sent = 19;
inline void SocketOptionTcpInfo::clear_tcpi_last_ack_sent() {
  tcpi_last_ack_sent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_last_ack_sent() const {
  return tcpi_last_ack_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_last_ack_sent() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_last_ack_sent)
  return _internal_tcpi_last_ack_sent();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_last_ack_sent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_last_ack_sent_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_last_ack_sent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_last_ack_sent(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_last_ack_sent)
}

// uint32 tcpi_last_data_recv = 20;
inline void SocketOptionTcpInfo::clear_tcpi_last_data_recv() {
  tcpi_last_data_recv_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_last_data_recv() const {
  return tcpi_last_data_recv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_last_data_recv() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_last_data_recv)
  return _internal_tcpi_last_data_recv();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_last_data_recv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_last_data_recv_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_last_data_recv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_last_data_recv(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_last_data_recv)
}

// uint32 tcpi_last_ack_recv = 21;
inline void SocketOptionTcpInfo::clear_tcpi_last_ack_recv() {
  tcpi_last_ack_recv_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_last_ack_recv() const {
  return tcpi_last_ack_recv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_last_ack_recv() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_last_ack_recv)
  return _internal_tcpi_last_ack_recv();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_last_ack_recv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_last_ack_recv_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_last_ack_recv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_last_ack_recv(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_last_ack_recv)
}

// uint32 tcpi_pmtu = 22;
inline void SocketOptionTcpInfo::clear_tcpi_pmtu() {
  tcpi_pmtu_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_pmtu() const {
  return tcpi_pmtu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_pmtu() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_pmtu)
  return _internal_tcpi_pmtu();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_pmtu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_pmtu_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_pmtu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_pmtu(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_pmtu)
}

// uint32 tcpi_rcv_ssthresh = 23;
inline void SocketOptionTcpInfo::clear_tcpi_rcv_ssthresh() {
  tcpi_rcv_ssthresh_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_rcv_ssthresh() const {
  return tcpi_rcv_ssthresh_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_rcv_ssthresh() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_rcv_ssthresh)
  return _internal_tcpi_rcv_ssthresh();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_rcv_ssthresh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_rcv_ssthresh_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_rcv_ssthresh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_rcv_ssthresh(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_rcv_ssthresh)
}

// uint32 tcpi_rtt = 24;
inline void SocketOptionTcpInfo::clear_tcpi_rtt() {
  tcpi_rtt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_rtt() const {
  return tcpi_rtt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_rtt() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_rtt)
  return _internal_tcpi_rtt();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_rtt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_rtt_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_rtt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_rtt(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_rtt)
}

// uint32 tcpi_rttvar = 25;
inline void SocketOptionTcpInfo::clear_tcpi_rttvar() {
  tcpi_rttvar_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_rttvar() const {
  return tcpi_rttvar_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_rttvar() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_rttvar)
  return _internal_tcpi_rttvar();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_rttvar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_rttvar_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_rttvar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_rttvar(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_rttvar)
}

// uint32 tcpi_snd_ssthresh = 26;
inline void SocketOptionTcpInfo::clear_tcpi_snd_ssthresh() {
  tcpi_snd_ssthresh_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_snd_ssthresh() const {
  return tcpi_snd_ssthresh_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_snd_ssthresh() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_snd_ssthresh)
  return _internal_tcpi_snd_ssthresh();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_snd_ssthresh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_snd_ssthresh_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_snd_ssthresh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_snd_ssthresh(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_snd_ssthresh)
}

// uint32 tcpi_snd_cwnd = 27;
inline void SocketOptionTcpInfo::clear_tcpi_snd_cwnd() {
  tcpi_snd_cwnd_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_snd_cwnd() const {
  return tcpi_snd_cwnd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_snd_cwnd() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_snd_cwnd)
  return _internal_tcpi_snd_cwnd();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_snd_cwnd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_snd_cwnd_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_snd_cwnd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_snd_cwnd(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_snd_cwnd)
}

// uint32 tcpi_advmss = 28;
inline void SocketOptionTcpInfo::clear_tcpi_advmss() {
  tcpi_advmss_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_advmss() const {
  return tcpi_advmss_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_advmss() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_advmss)
  return _internal_tcpi_advmss();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_advmss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_advmss_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_advmss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_advmss(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_advmss)
}

// uint32 tcpi_reordering = 29;
inline void SocketOptionTcpInfo::clear_tcpi_reordering() {
  tcpi_reordering_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::_internal_tcpi_reordering() const {
  return tcpi_reordering_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketOptionTcpInfo::tcpi_reordering() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_reordering)
  return _internal_tcpi_reordering();
}
inline void SocketOptionTcpInfo::_internal_set_tcpi_reordering(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpi_reordering_ = value;
}
inline void SocketOptionTcpInfo::set_tcpi_reordering(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpi_reordering(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.SocketOptionTcpInfo.tcpi_reordering)
}

// -------------------------------------------------------------------

// GetTopChannelsRequest

// int64 start_channel_id = 1;
inline void GetTopChannelsRequest::clear_start_channel_id() {
  start_channel_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTopChannelsRequest::_internal_start_channel_id() const {
  return start_channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTopChannelsRequest::start_channel_id() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetTopChannelsRequest.start_channel_id)
  return _internal_start_channel_id();
}
inline void GetTopChannelsRequest::_internal_set_start_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_channel_id_ = value;
}
inline void GetTopChannelsRequest::set_start_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_channel_id(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetTopChannelsRequest.start_channel_id)
}

// int64 max_results = 2;
inline void GetTopChannelsRequest::clear_max_results() {
  max_results_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTopChannelsRequest::_internal_max_results() const {
  return max_results_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTopChannelsRequest::max_results() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetTopChannelsRequest.max_results)
  return _internal_max_results();
}
inline void GetTopChannelsRequest::_internal_set_max_results(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_results_ = value;
}
inline void GetTopChannelsRequest::set_max_results(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_results(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetTopChannelsRequest.max_results)
}

// -------------------------------------------------------------------

// GetTopChannelsResponse

// repeated .grpc.channelz.v1.Channel channel = 1;
inline int GetTopChannelsResponse::_internal_channel_size() const {
  return channel_.size();
}
inline int GetTopChannelsResponse::channel_size() const {
  return _internal_channel_size();
}
inline void GetTopChannelsResponse::clear_channel() {
  channel_.Clear();
}
inline ::grpc::channelz::v1::Channel* GetTopChannelsResponse::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.GetTopChannelsResponse.channel)
  return channel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::Channel >*
GetTopChannelsResponse::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:grpc.channelz.v1.GetTopChannelsResponse.channel)
  return &channel_;
}
inline const ::grpc::channelz::v1::Channel& GetTopChannelsResponse::_internal_channel(int index) const {
  return channel_.Get(index);
}
inline const ::grpc::channelz::v1::Channel& GetTopChannelsResponse::channel(int index) const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetTopChannelsResponse.channel)
  return _internal_channel(index);
}
inline ::grpc::channelz::v1::Channel* GetTopChannelsResponse::_internal_add_channel() {
  return channel_.Add();
}
inline ::grpc::channelz::v1::Channel* GetTopChannelsResponse::add_channel() {
  ::grpc::channelz::v1::Channel* _add = _internal_add_channel();
  // @@protoc_insertion_point(field_add:grpc.channelz.v1.GetTopChannelsResponse.channel)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::Channel >&
GetTopChannelsResponse::channel() const {
  // @@protoc_insertion_point(field_list:grpc.channelz.v1.GetTopChannelsResponse.channel)
  return channel_;
}

// bool end = 2;
inline void GetTopChannelsResponse::clear_end() {
  end_ = false;
}
inline bool GetTopChannelsResponse::_internal_end() const {
  return end_;
}
inline bool GetTopChannelsResponse::end() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetTopChannelsResponse.end)
  return _internal_end();
}
inline void GetTopChannelsResponse::_internal_set_end(bool value) {
  
  end_ = value;
}
inline void GetTopChannelsResponse::set_end(bool value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetTopChannelsResponse.end)
}

// -------------------------------------------------------------------

// GetServersRequest

// int64 start_server_id = 1;
inline void GetServersRequest::clear_start_server_id() {
  start_server_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServersRequest::_internal_start_server_id() const {
  return start_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServersRequest::start_server_id() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetServersRequest.start_server_id)
  return _internal_start_server_id();
}
inline void GetServersRequest::_internal_set_start_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_server_id_ = value;
}
inline void GetServersRequest::set_start_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_server_id(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetServersRequest.start_server_id)
}

// int64 max_results = 2;
inline void GetServersRequest::clear_max_results() {
  max_results_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServersRequest::_internal_max_results() const {
  return max_results_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServersRequest::max_results() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetServersRequest.max_results)
  return _internal_max_results();
}
inline void GetServersRequest::_internal_set_max_results(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_results_ = value;
}
inline void GetServersRequest::set_max_results(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_results(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetServersRequest.max_results)
}

// -------------------------------------------------------------------

// GetServersResponse

// repeated .grpc.channelz.v1.Server server = 1;
inline int GetServersResponse::_internal_server_size() const {
  return server_.size();
}
inline int GetServersResponse::server_size() const {
  return _internal_server_size();
}
inline void GetServersResponse::clear_server() {
  server_.Clear();
}
inline ::grpc::channelz::v1::Server* GetServersResponse::mutable_server(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.GetServersResponse.server)
  return server_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::Server >*
GetServersResponse::mutable_server() {
  // @@protoc_insertion_point(field_mutable_list:grpc.channelz.v1.GetServersResponse.server)
  return &server_;
}
inline const ::grpc::channelz::v1::Server& GetServersResponse::_internal_server(int index) const {
  return server_.Get(index);
}
inline const ::grpc::channelz::v1::Server& GetServersResponse::server(int index) const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetServersResponse.server)
  return _internal_server(index);
}
inline ::grpc::channelz::v1::Server* GetServersResponse::_internal_add_server() {
  return server_.Add();
}
inline ::grpc::channelz::v1::Server* GetServersResponse::add_server() {
  ::grpc::channelz::v1::Server* _add = _internal_add_server();
  // @@protoc_insertion_point(field_add:grpc.channelz.v1.GetServersResponse.server)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::Server >&
GetServersResponse::server() const {
  // @@protoc_insertion_point(field_list:grpc.channelz.v1.GetServersResponse.server)
  return server_;
}

// bool end = 2;
inline void GetServersResponse::clear_end() {
  end_ = false;
}
inline bool GetServersResponse::_internal_end() const {
  return end_;
}
inline bool GetServersResponse::end() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetServersResponse.end)
  return _internal_end();
}
inline void GetServersResponse::_internal_set_end(bool value) {
  
  end_ = value;
}
inline void GetServersResponse::set_end(bool value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetServersResponse.end)
}

// -------------------------------------------------------------------

// GetServerRequest

// int64 server_id = 1;
inline void GetServerRequest::clear_server_id() {
  server_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServerRequest::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServerRequest::server_id() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetServerRequest.server_id)
  return _internal_server_id();
}
inline void GetServerRequest::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_id_ = value;
}
inline void GetServerRequest::set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetServerRequest.server_id)
}

// -------------------------------------------------------------------

// GetServerResponse

// .grpc.channelz.v1.Server server = 1;
inline bool GetServerResponse::_internal_has_server() const {
  return this != internal_default_instance() && server_ != nullptr;
}
inline bool GetServerResponse::has_server() const {
  return _internal_has_server();
}
inline void GetServerResponse::clear_server() {
  if (GetArenaForAllocation() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
}
inline const ::grpc::channelz::v1::Server& GetServerResponse::_internal_server() const {
  const ::grpc::channelz::v1::Server* p = server_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::Server&>(
      ::grpc::channelz::v1::_Server_default_instance_);
}
inline const ::grpc::channelz::v1::Server& GetServerResponse::server() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetServerResponse.server)
  return _internal_server();
}
inline void GetServerResponse::unsafe_arena_set_allocated_server(
    ::grpc::channelz::v1::Server* server) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_);
  }
  server_ = server;
  if (server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.GetServerResponse.server)
}
inline ::grpc::channelz::v1::Server* GetServerResponse::release_server() {
  
  ::grpc::channelz::v1::Server* temp = server_;
  server_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::Server* GetServerResponse::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.GetServerResponse.server)
  
  ::grpc::channelz::v1::Server* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::Server* GetServerResponse::_internal_mutable_server() {
  
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::Server>(GetArenaForAllocation());
    server_ = p;
  }
  return server_;
}
inline ::grpc::channelz::v1::Server* GetServerResponse::mutable_server() {
  ::grpc::channelz::v1::Server* _msg = _internal_mutable_server();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.GetServerResponse.server)
  return _msg;
}
inline void GetServerResponse::set_allocated_server(::grpc::channelz::v1::Server* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete server_;
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::Server>::GetOwningArena(server);
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.GetServerResponse.server)
}

// -------------------------------------------------------------------

// GetServerSocketsRequest

// int64 server_id = 1;
inline void GetServerSocketsRequest::clear_server_id() {
  server_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServerSocketsRequest::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServerSocketsRequest::server_id() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetServerSocketsRequest.server_id)
  return _internal_server_id();
}
inline void GetServerSocketsRequest::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_id_ = value;
}
inline void GetServerSocketsRequest::set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetServerSocketsRequest.server_id)
}

// int64 start_socket_id = 2;
inline void GetServerSocketsRequest::clear_start_socket_id() {
  start_socket_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServerSocketsRequest::_internal_start_socket_id() const {
  return start_socket_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServerSocketsRequest::start_socket_id() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetServerSocketsRequest.start_socket_id)
  return _internal_start_socket_id();
}
inline void GetServerSocketsRequest::_internal_set_start_socket_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_socket_id_ = value;
}
inline void GetServerSocketsRequest::set_start_socket_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_socket_id(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetServerSocketsRequest.start_socket_id)
}

// int64 max_results = 3;
inline void GetServerSocketsRequest::clear_max_results() {
  max_results_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServerSocketsRequest::_internal_max_results() const {
  return max_results_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServerSocketsRequest::max_results() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetServerSocketsRequest.max_results)
  return _internal_max_results();
}
inline void GetServerSocketsRequest::_internal_set_max_results(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_results_ = value;
}
inline void GetServerSocketsRequest::set_max_results(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_results(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetServerSocketsRequest.max_results)
}

// -------------------------------------------------------------------

// GetServerSocketsResponse

// repeated .grpc.channelz.v1.SocketRef socket_ref = 1;
inline int GetServerSocketsResponse::_internal_socket_ref_size() const {
  return socket_ref_.size();
}
inline int GetServerSocketsResponse::socket_ref_size() const {
  return _internal_socket_ref_size();
}
inline void GetServerSocketsResponse::clear_socket_ref() {
  socket_ref_.Clear();
}
inline ::grpc::channelz::v1::SocketRef* GetServerSocketsResponse::mutable_socket_ref(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.GetServerSocketsResponse.socket_ref)
  return socket_ref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >*
GetServerSocketsResponse::mutable_socket_ref() {
  // @@protoc_insertion_point(field_mutable_list:grpc.channelz.v1.GetServerSocketsResponse.socket_ref)
  return &socket_ref_;
}
inline const ::grpc::channelz::v1::SocketRef& GetServerSocketsResponse::_internal_socket_ref(int index) const {
  return socket_ref_.Get(index);
}
inline const ::grpc::channelz::v1::SocketRef& GetServerSocketsResponse::socket_ref(int index) const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetServerSocketsResponse.socket_ref)
  return _internal_socket_ref(index);
}
inline ::grpc::channelz::v1::SocketRef* GetServerSocketsResponse::_internal_add_socket_ref() {
  return socket_ref_.Add();
}
inline ::grpc::channelz::v1::SocketRef* GetServerSocketsResponse::add_socket_ref() {
  ::grpc::channelz::v1::SocketRef* _add = _internal_add_socket_ref();
  // @@protoc_insertion_point(field_add:grpc.channelz.v1.GetServerSocketsResponse.socket_ref)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::channelz::v1::SocketRef >&
GetServerSocketsResponse::socket_ref() const {
  // @@protoc_insertion_point(field_list:grpc.channelz.v1.GetServerSocketsResponse.socket_ref)
  return socket_ref_;
}

// bool end = 2;
inline void GetServerSocketsResponse::clear_end() {
  end_ = false;
}
inline bool GetServerSocketsResponse::_internal_end() const {
  return end_;
}
inline bool GetServerSocketsResponse::end() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetServerSocketsResponse.end)
  return _internal_end();
}
inline void GetServerSocketsResponse::_internal_set_end(bool value) {
  
  end_ = value;
}
inline void GetServerSocketsResponse::set_end(bool value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetServerSocketsResponse.end)
}

// -------------------------------------------------------------------

// GetChannelRequest

// int64 channel_id = 1;
inline void GetChannelRequest::clear_channel_id() {
  channel_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChannelRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChannelRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetChannelRequest.channel_id)
  return _internal_channel_id();
}
inline void GetChannelRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  channel_id_ = value;
}
inline void GetChannelRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetChannelRequest.channel_id)
}

// -------------------------------------------------------------------

// GetChannelResponse

// .grpc.channelz.v1.Channel channel = 1;
inline bool GetChannelResponse::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool GetChannelResponse::has_channel() const {
  return _internal_has_channel();
}
inline void GetChannelResponse::clear_channel() {
  if (GetArenaForAllocation() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
inline const ::grpc::channelz::v1::Channel& GetChannelResponse::_internal_channel() const {
  const ::grpc::channelz::v1::Channel* p = channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::Channel&>(
      ::grpc::channelz::v1::_Channel_default_instance_);
}
inline const ::grpc::channelz::v1::Channel& GetChannelResponse::channel() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetChannelResponse.channel)
  return _internal_channel();
}
inline void GetChannelResponse::unsafe_arena_set_allocated_channel(
    ::grpc::channelz::v1::Channel* channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.GetChannelResponse.channel)
}
inline ::grpc::channelz::v1::Channel* GetChannelResponse::release_channel() {
  
  ::grpc::channelz::v1::Channel* temp = channel_;
  channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::Channel* GetChannelResponse::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.GetChannelResponse.channel)
  
  ::grpc::channelz::v1::Channel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::Channel* GetChannelResponse::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::Channel>(GetArenaForAllocation());
    channel_ = p;
  }
  return channel_;
}
inline ::grpc::channelz::v1::Channel* GetChannelResponse::mutable_channel() {
  ::grpc::channelz::v1::Channel* _msg = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.GetChannelResponse.channel)
  return _msg;
}
inline void GetChannelResponse::set_allocated_channel(::grpc::channelz::v1::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::Channel>::GetOwningArena(channel);
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.GetChannelResponse.channel)
}

// -------------------------------------------------------------------

// GetSubchannelRequest

// int64 subchannel_id = 1;
inline void GetSubchannelRequest::clear_subchannel_id() {
  subchannel_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSubchannelRequest::_internal_subchannel_id() const {
  return subchannel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSubchannelRequest::subchannel_id() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetSubchannelRequest.subchannel_id)
  return _internal_subchannel_id();
}
inline void GetSubchannelRequest::_internal_set_subchannel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  subchannel_id_ = value;
}
inline void GetSubchannelRequest::set_subchannel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_subchannel_id(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetSubchannelRequest.subchannel_id)
}

// -------------------------------------------------------------------

// GetSubchannelResponse

// .grpc.channelz.v1.Subchannel subchannel = 1;
inline bool GetSubchannelResponse::_internal_has_subchannel() const {
  return this != internal_default_instance() && subchannel_ != nullptr;
}
inline bool GetSubchannelResponse::has_subchannel() const {
  return _internal_has_subchannel();
}
inline void GetSubchannelResponse::clear_subchannel() {
  if (GetArenaForAllocation() == nullptr && subchannel_ != nullptr) {
    delete subchannel_;
  }
  subchannel_ = nullptr;
}
inline const ::grpc::channelz::v1::Subchannel& GetSubchannelResponse::_internal_subchannel() const {
  const ::grpc::channelz::v1::Subchannel* p = subchannel_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::Subchannel&>(
      ::grpc::channelz::v1::_Subchannel_default_instance_);
}
inline const ::grpc::channelz::v1::Subchannel& GetSubchannelResponse::subchannel() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetSubchannelResponse.subchannel)
  return _internal_subchannel();
}
inline void GetSubchannelResponse::unsafe_arena_set_allocated_subchannel(
    ::grpc::channelz::v1::Subchannel* subchannel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subchannel_);
  }
  subchannel_ = subchannel;
  if (subchannel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.GetSubchannelResponse.subchannel)
}
inline ::grpc::channelz::v1::Subchannel* GetSubchannelResponse::release_subchannel() {
  
  ::grpc::channelz::v1::Subchannel* temp = subchannel_;
  subchannel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::Subchannel* GetSubchannelResponse::unsafe_arena_release_subchannel() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.GetSubchannelResponse.subchannel)
  
  ::grpc::channelz::v1::Subchannel* temp = subchannel_;
  subchannel_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::Subchannel* GetSubchannelResponse::_internal_mutable_subchannel() {
  
  if (subchannel_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::Subchannel>(GetArenaForAllocation());
    subchannel_ = p;
  }
  return subchannel_;
}
inline ::grpc::channelz::v1::Subchannel* GetSubchannelResponse::mutable_subchannel() {
  ::grpc::channelz::v1::Subchannel* _msg = _internal_mutable_subchannel();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.GetSubchannelResponse.subchannel)
  return _msg;
}
inline void GetSubchannelResponse::set_allocated_subchannel(::grpc::channelz::v1::Subchannel* subchannel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete subchannel_;
  }
  if (subchannel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::Subchannel>::GetOwningArena(subchannel);
    if (message_arena != submessage_arena) {
      subchannel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subchannel, submessage_arena);
    }
    
  } else {
    
  }
  subchannel_ = subchannel;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.GetSubchannelResponse.subchannel)
}

// -------------------------------------------------------------------

// GetSocketRequest

// int64 socket_id = 1;
inline void GetSocketRequest::clear_socket_id() {
  socket_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSocketRequest::_internal_socket_id() const {
  return socket_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetSocketRequest::socket_id() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetSocketRequest.socket_id)
  return _internal_socket_id();
}
inline void GetSocketRequest::_internal_set_socket_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  socket_id_ = value;
}
inline void GetSocketRequest::set_socket_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_socket_id(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetSocketRequest.socket_id)
}

// bool summary = 2;
inline void GetSocketRequest::clear_summary() {
  summary_ = false;
}
inline bool GetSocketRequest::_internal_summary() const {
  return summary_;
}
inline bool GetSocketRequest::summary() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetSocketRequest.summary)
  return _internal_summary();
}
inline void GetSocketRequest::_internal_set_summary(bool value) {
  
  summary_ = value;
}
inline void GetSocketRequest::set_summary(bool value) {
  _internal_set_summary(value);
  // @@protoc_insertion_point(field_set:grpc.channelz.v1.GetSocketRequest.summary)
}

// -------------------------------------------------------------------

// GetSocketResponse

// .grpc.channelz.v1.Socket socket = 1;
inline bool GetSocketResponse::_internal_has_socket() const {
  return this != internal_default_instance() && socket_ != nullptr;
}
inline bool GetSocketResponse::has_socket() const {
  return _internal_has_socket();
}
inline void GetSocketResponse::clear_socket() {
  if (GetArenaForAllocation() == nullptr && socket_ != nullptr) {
    delete socket_;
  }
  socket_ = nullptr;
}
inline const ::grpc::channelz::v1::Socket& GetSocketResponse::_internal_socket() const {
  const ::grpc::channelz::v1::Socket* p = socket_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::channelz::v1::Socket&>(
      ::grpc::channelz::v1::_Socket_default_instance_);
}
inline const ::grpc::channelz::v1::Socket& GetSocketResponse::socket() const {
  // @@protoc_insertion_point(field_get:grpc.channelz.v1.GetSocketResponse.socket)
  return _internal_socket();
}
inline void GetSocketResponse::unsafe_arena_set_allocated_socket(
    ::grpc::channelz::v1::Socket* socket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socket_);
  }
  socket_ = socket;
  if (socket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.channelz.v1.GetSocketResponse.socket)
}
inline ::grpc::channelz::v1::Socket* GetSocketResponse::release_socket() {
  
  ::grpc::channelz::v1::Socket* temp = socket_;
  socket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::channelz::v1::Socket* GetSocketResponse::unsafe_arena_release_socket() {
  // @@protoc_insertion_point(field_release:grpc.channelz.v1.GetSocketResponse.socket)
  
  ::grpc::channelz::v1::Socket* temp = socket_;
  socket_ = nullptr;
  return temp;
}
inline ::grpc::channelz::v1::Socket* GetSocketResponse::_internal_mutable_socket() {
  
  if (socket_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::channelz::v1::Socket>(GetArenaForAllocation());
    socket_ = p;
  }
  return socket_;
}
inline ::grpc::channelz::v1::Socket* GetSocketResponse::mutable_socket() {
  ::grpc::channelz::v1::Socket* _msg = _internal_mutable_socket();
  // @@protoc_insertion_point(field_mutable:grpc.channelz.v1.GetSocketResponse.socket)
  return _msg;
}
inline void GetSocketResponse::set_allocated_socket(::grpc::channelz::v1::Socket* socket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete socket_;
  }
  if (socket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::channelz::v1::Socket>::GetOwningArena(socket);
    if (message_arena != submessage_arena) {
      socket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socket, submessage_arena);
    }
    
  } else {
    
  }
  socket_ = socket;
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.GetSocketResponse.socket)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace channelz
}  // namespace grpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::grpc::channelz::v1::ChannelConnectivityState_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc::channelz::v1::ChannelConnectivityState_State>() {
  return ::grpc::channelz::v1::ChannelConnectivityState_State_descriptor();
}
template <> struct is_proto_enum< ::grpc::channelz::v1::ChannelTraceEvent_Severity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc::channelz::v1::ChannelTraceEvent_Severity>() {
  return ::grpc::channelz::v1::ChannelTraceEvent_Severity_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_channelz_2eproto
