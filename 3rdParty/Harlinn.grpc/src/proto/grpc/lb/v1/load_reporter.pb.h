// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: load_reporter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_load_5freporter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_load_5freporter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_load_5freporter_2eproto GRPC_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GRPC_EXPORT TableStruct_load_5freporter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
GRPC_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_load_5freporter_2eproto;
namespace grpc {
namespace lb {
namespace v1 {
class CallMetricData;
struct CallMetricDataDefaultTypeInternal;
GRPC_EXPORT extern CallMetricDataDefaultTypeInternal _CallMetricData_default_instance_;
class InitialLoadReportRequest;
struct InitialLoadReportRequestDefaultTypeInternal;
GRPC_EXPORT extern InitialLoadReportRequestDefaultTypeInternal _InitialLoadReportRequest_default_instance_;
class InitialLoadReportResponse;
struct InitialLoadReportResponseDefaultTypeInternal;
GRPC_EXPORT extern InitialLoadReportResponseDefaultTypeInternal _InitialLoadReportResponse_default_instance_;
class Load;
struct LoadDefaultTypeInternal;
GRPC_EXPORT extern LoadDefaultTypeInternal _Load_default_instance_;
class LoadBalancingFeedback;
struct LoadBalancingFeedbackDefaultTypeInternal;
GRPC_EXPORT extern LoadBalancingFeedbackDefaultTypeInternal _LoadBalancingFeedback_default_instance_;
class LoadReportRequest;
struct LoadReportRequestDefaultTypeInternal;
GRPC_EXPORT extern LoadReportRequestDefaultTypeInternal _LoadReportRequest_default_instance_;
class LoadReportResponse;
struct LoadReportResponseDefaultTypeInternal;
GRPC_EXPORT extern LoadReportResponseDefaultTypeInternal _LoadReportResponse_default_instance_;
class OrphanedLoadIdentifier;
struct OrphanedLoadIdentifierDefaultTypeInternal;
GRPC_EXPORT extern OrphanedLoadIdentifierDefaultTypeInternal _OrphanedLoadIdentifier_default_instance_;
}  // namespace v1
}  // namespace lb
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> GRPC_EXPORT ::grpc::lb::v1::CallMetricData* Arena::CreateMaybeMessage<::grpc::lb::v1::CallMetricData>(Arena*);
template<> GRPC_EXPORT ::grpc::lb::v1::InitialLoadReportRequest* Arena::CreateMaybeMessage<::grpc::lb::v1::InitialLoadReportRequest>(Arena*);
template<> GRPC_EXPORT ::grpc::lb::v1::InitialLoadReportResponse* Arena::CreateMaybeMessage<::grpc::lb::v1::InitialLoadReportResponse>(Arena*);
template<> GRPC_EXPORT ::grpc::lb::v1::Load* Arena::CreateMaybeMessage<::grpc::lb::v1::Load>(Arena*);
template<> GRPC_EXPORT ::grpc::lb::v1::LoadBalancingFeedback* Arena::CreateMaybeMessage<::grpc::lb::v1::LoadBalancingFeedback>(Arena*);
template<> GRPC_EXPORT ::grpc::lb::v1::LoadReportRequest* Arena::CreateMaybeMessage<::grpc::lb::v1::LoadReportRequest>(Arena*);
template<> GRPC_EXPORT ::grpc::lb::v1::LoadReportResponse* Arena::CreateMaybeMessage<::grpc::lb::v1::LoadReportResponse>(Arena*);
template<> GRPC_EXPORT ::grpc::lb::v1::OrphanedLoadIdentifier* Arena::CreateMaybeMessage<::grpc::lb::v1::OrphanedLoadIdentifier>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc {
namespace lb {
namespace v1 {

enum InitialLoadReportResponse_ImplementationIdentifier : int {
  InitialLoadReportResponse_ImplementationIdentifier_IMPL_UNSPECIFIED = 0,
  InitialLoadReportResponse_ImplementationIdentifier_CPP = 1,
  InitialLoadReportResponse_ImplementationIdentifier_JAVA = 2,
  InitialLoadReportResponse_ImplementationIdentifier_GO = 3,
  InitialLoadReportResponse_ImplementationIdentifier_InitialLoadReportResponse_ImplementationIdentifier_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InitialLoadReportResponse_ImplementationIdentifier_InitialLoadReportResponse_ImplementationIdentifier_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
GRPC_EXPORT bool InitialLoadReportResponse_ImplementationIdentifier_IsValid(int value);
constexpr InitialLoadReportResponse_ImplementationIdentifier InitialLoadReportResponse_ImplementationIdentifier_ImplementationIdentifier_MIN = InitialLoadReportResponse_ImplementationIdentifier_IMPL_UNSPECIFIED;
constexpr InitialLoadReportResponse_ImplementationIdentifier InitialLoadReportResponse_ImplementationIdentifier_ImplementationIdentifier_MAX = InitialLoadReportResponse_ImplementationIdentifier_GO;
constexpr int InitialLoadReportResponse_ImplementationIdentifier_ImplementationIdentifier_ARRAYSIZE = InitialLoadReportResponse_ImplementationIdentifier_ImplementationIdentifier_MAX + 1;

GRPC_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InitialLoadReportResponse_ImplementationIdentifier_descriptor();
template<typename T>
inline const std::string& InitialLoadReportResponse_ImplementationIdentifier_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InitialLoadReportResponse_ImplementationIdentifier>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InitialLoadReportResponse_ImplementationIdentifier_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InitialLoadReportResponse_ImplementationIdentifier_descriptor(), enum_t_value);
}
inline bool InitialLoadReportResponse_ImplementationIdentifier_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InitialLoadReportResponse_ImplementationIdentifier* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InitialLoadReportResponse_ImplementationIdentifier>(
    InitialLoadReportResponse_ImplementationIdentifier_descriptor(), name, value);
}
// ===================================================================

class GRPC_EXPORT LoadReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.LoadReportRequest) */ {
 public:
  inline LoadReportRequest() : LoadReportRequest(nullptr) {}
  ~LoadReportRequest() override;
  explicit constexpr LoadReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadReportRequest(const LoadReportRequest& from);
  LoadReportRequest(LoadReportRequest&& from) noexcept
    : LoadReportRequest() {
    *this = ::std::move(from);
  }

  inline LoadReportRequest& operator=(const LoadReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadReportRequest& operator=(LoadReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadReportRequest* internal_default_instance() {
    return reinterpret_cast<const LoadReportRequest*>(
               &_LoadReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadReportRequest& a, LoadReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadReportRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadReportRequest* New() const final {
    return new LoadReportRequest();
  }

  LoadReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadReportRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadReportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.LoadReportRequest";
  }
  protected:
  explicit LoadReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitialRequestFieldNumber = 1,
  };
  // .grpc.lb.v1.InitialLoadReportRequest initial_request = 1;
  bool has_initial_request() const;
  private:
  bool _internal_has_initial_request() const;
  public:
  void clear_initial_request();
  const ::grpc::lb::v1::InitialLoadReportRequest& initial_request() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::lb::v1::InitialLoadReportRequest* release_initial_request();
  ::grpc::lb::v1::InitialLoadReportRequest* mutable_initial_request();
  void set_allocated_initial_request(::grpc::lb::v1::InitialLoadReportRequest* initial_request);
  private:
  const ::grpc::lb::v1::InitialLoadReportRequest& _internal_initial_request() const;
  ::grpc::lb::v1::InitialLoadReportRequest* _internal_mutable_initial_request();
  public:
  void unsafe_arena_set_allocated_initial_request(
      ::grpc::lb::v1::InitialLoadReportRequest* initial_request);
  ::grpc::lb::v1::InitialLoadReportRequest* unsafe_arena_release_initial_request();

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.LoadReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc::lb::v1::InitialLoadReportRequest* initial_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_load_5freporter_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT InitialLoadReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.InitialLoadReportRequest) */ {
 public:
  inline InitialLoadReportRequest() : InitialLoadReportRequest(nullptr) {}
  ~InitialLoadReportRequest() override;
  explicit constexpr InitialLoadReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitialLoadReportRequest(const InitialLoadReportRequest& from);
  InitialLoadReportRequest(InitialLoadReportRequest&& from) noexcept
    : InitialLoadReportRequest() {
    *this = ::std::move(from);
  }

  inline InitialLoadReportRequest& operator=(const InitialLoadReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitialLoadReportRequest& operator=(InitialLoadReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitialLoadReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitialLoadReportRequest* internal_default_instance() {
    return reinterpret_cast<const InitialLoadReportRequest*>(
               &_InitialLoadReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitialLoadReportRequest& a, InitialLoadReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitialLoadReportRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitialLoadReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitialLoadReportRequest* New() const final {
    return new InitialLoadReportRequest();
  }

  InitialLoadReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitialLoadReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitialLoadReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitialLoadReportRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialLoadReportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.InitialLoadReportRequest";
  }
  protected:
  explicit InitialLoadReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadBalancedHostnameFieldNumber = 1,
    kLoadKeyFieldNumber = 2,
    kLoadReportIntervalFieldNumber = 3,
  };
  // string load_balanced_hostname = 1;
  void clear_load_balanced_hostname();
  const std::string& load_balanced_hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_load_balanced_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_load_balanced_hostname();
  PROTOBUF_MUST_USE_RESULT std::string* release_load_balanced_hostname();
  void set_allocated_load_balanced_hostname(std::string* load_balanced_hostname);
  private:
  const std::string& _internal_load_balanced_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load_balanced_hostname(const std::string& value);
  std::string* _internal_mutable_load_balanced_hostname();
  public:

  // bytes load_key = 2;
  void clear_load_key();
  const std::string& load_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_load_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_load_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_load_key();
  void set_allocated_load_key(std::string* load_key);
  private:
  const std::string& _internal_load_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load_key(const std::string& value);
  std::string* _internal_mutable_load_key();
  public:

  // .google.protobuf.Duration load_report_interval = 3;
  bool has_load_report_interval() const;
  private:
  bool _internal_has_load_report_interval() const;
  public:
  void clear_load_report_interval();
  const PROTOBUF_NAMESPACE_ID::Duration& load_report_interval() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Duration* release_load_report_interval();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_load_report_interval();
  void set_allocated_load_report_interval(PROTOBUF_NAMESPACE_ID::Duration* load_report_interval);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_load_report_interval() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_load_report_interval();
  public:
  void unsafe_arena_set_allocated_load_report_interval(
      PROTOBUF_NAMESPACE_ID::Duration* load_report_interval);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_load_report_interval();

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.InitialLoadReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_balanced_hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_key_;
  PROTOBUF_NAMESPACE_ID::Duration* load_report_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_load_5freporter_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT LoadReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.LoadReportResponse) */ {
 public:
  inline LoadReportResponse() : LoadReportResponse(nullptr) {}
  ~LoadReportResponse() override;
  explicit constexpr LoadReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadReportResponse(const LoadReportResponse& from);
  LoadReportResponse(LoadReportResponse&& from) noexcept
    : LoadReportResponse() {
    *this = ::std::move(from);
  }

  inline LoadReportResponse& operator=(const LoadReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadReportResponse& operator=(LoadReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadReportResponse* internal_default_instance() {
    return reinterpret_cast<const LoadReportResponse*>(
               &_LoadReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoadReportResponse& a, LoadReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadReportResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadReportResponse* New() const final {
    return new LoadReportResponse();
  }

  LoadReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadReportResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadReportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.LoadReportResponse";
  }
  protected:
  explicit LoadReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadFieldNumber = 3,
    kInitialResponseFieldNumber = 1,
    kLoadBalancingFeedbackFieldNumber = 2,
  };
  // repeated .grpc.lb.v1.Load load = 3;
  int load_size() const;
  private:
  int _internal_load_size() const;
  public:
  void clear_load();
  ::grpc::lb::v1::Load* mutable_load(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::Load >*
      mutable_load();
  private:
  const ::grpc::lb::v1::Load& _internal_load(int index) const;
  ::grpc::lb::v1::Load* _internal_add_load();
  public:
  const ::grpc::lb::v1::Load& load(int index) const;
  ::grpc::lb::v1::Load* add_load();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::Load >&
      load() const;

  // .grpc.lb.v1.InitialLoadReportResponse initial_response = 1;
  bool has_initial_response() const;
  private:
  bool _internal_has_initial_response() const;
  public:
  void clear_initial_response();
  const ::grpc::lb::v1::InitialLoadReportResponse& initial_response() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::lb::v1::InitialLoadReportResponse* release_initial_response();
  ::grpc::lb::v1::InitialLoadReportResponse* mutable_initial_response();
  void set_allocated_initial_response(::grpc::lb::v1::InitialLoadReportResponse* initial_response);
  private:
  const ::grpc::lb::v1::InitialLoadReportResponse& _internal_initial_response() const;
  ::grpc::lb::v1::InitialLoadReportResponse* _internal_mutable_initial_response();
  public:
  void unsafe_arena_set_allocated_initial_response(
      ::grpc::lb::v1::InitialLoadReportResponse* initial_response);
  ::grpc::lb::v1::InitialLoadReportResponse* unsafe_arena_release_initial_response();

  // .grpc.lb.v1.LoadBalancingFeedback load_balancing_feedback = 2;
  bool has_load_balancing_feedback() const;
  private:
  bool _internal_has_load_balancing_feedback() const;
  public:
  void clear_load_balancing_feedback();
  const ::grpc::lb::v1::LoadBalancingFeedback& load_balancing_feedback() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::lb::v1::LoadBalancingFeedback* release_load_balancing_feedback();
  ::grpc::lb::v1::LoadBalancingFeedback* mutable_load_balancing_feedback();
  void set_allocated_load_balancing_feedback(::grpc::lb::v1::LoadBalancingFeedback* load_balancing_feedback);
  private:
  const ::grpc::lb::v1::LoadBalancingFeedback& _internal_load_balancing_feedback() const;
  ::grpc::lb::v1::LoadBalancingFeedback* _internal_mutable_load_balancing_feedback();
  public:
  void unsafe_arena_set_allocated_load_balancing_feedback(
      ::grpc::lb::v1::LoadBalancingFeedback* load_balancing_feedback);
  ::grpc::lb::v1::LoadBalancingFeedback* unsafe_arena_release_load_balancing_feedback();

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.LoadReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::Load > load_;
  ::grpc::lb::v1::InitialLoadReportResponse* initial_response_;
  ::grpc::lb::v1::LoadBalancingFeedback* load_balancing_feedback_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_load_5freporter_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT InitialLoadReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.InitialLoadReportResponse) */ {
 public:
  inline InitialLoadReportResponse() : InitialLoadReportResponse(nullptr) {}
  ~InitialLoadReportResponse() override;
  explicit constexpr InitialLoadReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitialLoadReportResponse(const InitialLoadReportResponse& from);
  InitialLoadReportResponse(InitialLoadReportResponse&& from) noexcept
    : InitialLoadReportResponse() {
    *this = ::std::move(from);
  }

  inline InitialLoadReportResponse& operator=(const InitialLoadReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitialLoadReportResponse& operator=(InitialLoadReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitialLoadReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitialLoadReportResponse* internal_default_instance() {
    return reinterpret_cast<const InitialLoadReportResponse*>(
               &_InitialLoadReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitialLoadReportResponse& a, InitialLoadReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InitialLoadReportResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitialLoadReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitialLoadReportResponse* New() const final {
    return new InitialLoadReportResponse();
  }

  InitialLoadReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitialLoadReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitialLoadReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitialLoadReportResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialLoadReportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.InitialLoadReportResponse";
  }
  protected:
  explicit InitialLoadReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InitialLoadReportResponse_ImplementationIdentifier ImplementationIdentifier;
  static constexpr ImplementationIdentifier IMPL_UNSPECIFIED =
    InitialLoadReportResponse_ImplementationIdentifier_IMPL_UNSPECIFIED;
  static constexpr ImplementationIdentifier CPP =
    InitialLoadReportResponse_ImplementationIdentifier_CPP;
  static constexpr ImplementationIdentifier JAVA =
    InitialLoadReportResponse_ImplementationIdentifier_JAVA;
  static constexpr ImplementationIdentifier GO =
    InitialLoadReportResponse_ImplementationIdentifier_GO;
  static inline bool ImplementationIdentifier_IsValid(int value) {
    return InitialLoadReportResponse_ImplementationIdentifier_IsValid(value);
  }
  static constexpr ImplementationIdentifier ImplementationIdentifier_MIN =
    InitialLoadReportResponse_ImplementationIdentifier_ImplementationIdentifier_MIN;
  static constexpr ImplementationIdentifier ImplementationIdentifier_MAX =
    InitialLoadReportResponse_ImplementationIdentifier_ImplementationIdentifier_MAX;
  static constexpr int ImplementationIdentifier_ARRAYSIZE =
    InitialLoadReportResponse_ImplementationIdentifier_ImplementationIdentifier_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ImplementationIdentifier_descriptor() {
    return InitialLoadReportResponse_ImplementationIdentifier_descriptor();
  }
  template<typename T>
  static inline const std::string& ImplementationIdentifier_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImplementationIdentifier>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImplementationIdentifier_Name.");
    return InitialLoadReportResponse_ImplementationIdentifier_Name(enum_t_value);
  }
  static inline bool ImplementationIdentifier_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImplementationIdentifier* value) {
    return InitialLoadReportResponse_ImplementationIdentifier_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLoadBalancerIdFieldNumber = 1,
    kServerVersionFieldNumber = 3,
    kImplementationIdFieldNumber = 2,
  };
  // string load_balancer_id = 1;
  void clear_load_balancer_id();
  const std::string& load_balancer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_load_balancer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_load_balancer_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_load_balancer_id();
  void set_allocated_load_balancer_id(std::string* load_balancer_id);
  private:
  const std::string& _internal_load_balancer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load_balancer_id(const std::string& value);
  std::string* _internal_mutable_load_balancer_id();
  public:

  // int64 server_version = 3;
  void clear_server_version();
  ::PROTOBUF_NAMESPACE_ID::int64 server_version() const;
  void set_server_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_version() const;
  void _internal_set_server_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .grpc.lb.v1.InitialLoadReportResponse.ImplementationIdentifier implementation_id = 2;
  void clear_implementation_id();
  ::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier implementation_id() const;
  void set_implementation_id(::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier value);
  private:
  ::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier _internal_implementation_id() const;
  void _internal_set_implementation_id(::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.InitialLoadReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_balancer_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_version_;
  int implementation_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_load_5freporter_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT LoadBalancingFeedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.LoadBalancingFeedback) */ {
 public:
  inline LoadBalancingFeedback() : LoadBalancingFeedback(nullptr) {}
  ~LoadBalancingFeedback() override;
  explicit constexpr LoadBalancingFeedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadBalancingFeedback(const LoadBalancingFeedback& from);
  LoadBalancingFeedback(LoadBalancingFeedback&& from) noexcept
    : LoadBalancingFeedback() {
    *this = ::std::move(from);
  }

  inline LoadBalancingFeedback& operator=(const LoadBalancingFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadBalancingFeedback& operator=(LoadBalancingFeedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadBalancingFeedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadBalancingFeedback* internal_default_instance() {
    return reinterpret_cast<const LoadBalancingFeedback*>(
               &_LoadBalancingFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoadBalancingFeedback& a, LoadBalancingFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadBalancingFeedback* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadBalancingFeedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadBalancingFeedback* New() const final {
    return new LoadBalancingFeedback();
  }

  LoadBalancingFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadBalancingFeedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadBalancingFeedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadBalancingFeedback& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadBalancingFeedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.LoadBalancingFeedback";
  }
  protected:
  explicit LoadBalancingFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerUtilizationFieldNumber = 1,
    kCallsPerSecondFieldNumber = 2,
    kErrorsPerSecondFieldNumber = 3,
  };
  // float server_utilization = 1;
  void clear_server_utilization();
  float server_utilization() const;
  void set_server_utilization(float value);
  private:
  float _internal_server_utilization() const;
  void _internal_set_server_utilization(float value);
  public:

  // float calls_per_second = 2;
  void clear_calls_per_second();
  float calls_per_second() const;
  void set_calls_per_second(float value);
  private:
  float _internal_calls_per_second() const;
  void _internal_set_calls_per_second(float value);
  public:

  // float errors_per_second = 3;
  void clear_errors_per_second();
  float errors_per_second() const;
  void set_errors_per_second(float value);
  private:
  float _internal_errors_per_second() const;
  void _internal_set_errors_per_second(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.LoadBalancingFeedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float server_utilization_;
  float calls_per_second_;
  float errors_per_second_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_load_5freporter_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT Load final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.Load) */ {
 public:
  inline Load() : Load(nullptr) {}
  ~Load() override;
  explicit constexpr Load(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Load(const Load& from);
  Load(Load&& from) noexcept
    : Load() {
    *this = ::std::move(from);
  }

  inline Load& operator=(const Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline Load& operator=(Load&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Load& default_instance() {
    return *internal_default_instance();
  }
  enum InProgressReportCase {
    kNumCallsInProgress = 5,
    IN_PROGRESS_REPORT_NOT_SET = 0,
  };

  enum OrphanedLoadCase {
    kLoadKey = 12,
    kLoadKeyUnknown = 13,
    kOrphanedLoadIdentifier = 14,
    ORPHANED_LOAD_NOT_SET = 0,
  };

  static inline const Load* internal_default_instance() {
    return reinterpret_cast<const Load*>(
               &_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Load& a, Load& b) {
    a.Swap(&b);
  }
  inline void Swap(Load* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Load* New() const final {
    return new Load();
  }

  Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Load>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Load& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Load& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Load* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.Load";
  }
  protected:
  explicit Load(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricDataFieldNumber = 11,
    kLoadBalanceTagFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kClientIpAddressFieldNumber = 15,
    kTotalLatencyFieldNumber = 10,
    kNumCallsStartedFieldNumber = 4,
    kNumCallsFinishedWithoutErrorFieldNumber = 6,
    kNumCallsFinishedWithErrorFieldNumber = 7,
    kTotalBytesSentFieldNumber = 8,
    kTotalBytesReceivedFieldNumber = 9,
    kNumCallsFinishedWithServerErrorFieldNumber = 16,
    kNumCallsInProgressFieldNumber = 5,
    kLoadKeyFieldNumber = 12,
    kLoadKeyUnknownFieldNumber = 13,
    kOrphanedLoadIdentifierFieldNumber = 14,
  };
  // repeated .grpc.lb.v1.CallMetricData metric_data = 11;
  int metric_data_size() const;
  private:
  int _internal_metric_data_size() const;
  public:
  void clear_metric_data();
  ::grpc::lb::v1::CallMetricData* mutable_metric_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::CallMetricData >*
      mutable_metric_data();
  private:
  const ::grpc::lb::v1::CallMetricData& _internal_metric_data(int index) const;
  ::grpc::lb::v1::CallMetricData* _internal_add_metric_data();
  public:
  const ::grpc::lb::v1::CallMetricData& metric_data(int index) const;
  ::grpc::lb::v1::CallMetricData* add_metric_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::CallMetricData >&
      metric_data() const;

  // string load_balance_tag = 1;
  void clear_load_balance_tag();
  const std::string& load_balance_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_load_balance_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_load_balance_tag();
  PROTOBUF_MUST_USE_RESULT std::string* release_load_balance_tag();
  void set_allocated_load_balance_tag(std::string* load_balance_tag);
  private:
  const std::string& _internal_load_balance_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load_balance_tag(const std::string& value);
  std::string* _internal_mutable_load_balance_tag();
  public:

  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes client_ip_address = 15;
  void clear_client_ip_address();
  const std::string& client_ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_ip_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_client_ip_address();
  void set_allocated_client_ip_address(std::string* client_ip_address);
  private:
  const std::string& _internal_client_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_ip_address(const std::string& value);
  std::string* _internal_mutable_client_ip_address();
  public:

  // .google.protobuf.Duration total_latency = 10;
  bool has_total_latency() const;
  private:
  bool _internal_has_total_latency() const;
  public:
  void clear_total_latency();
  const PROTOBUF_NAMESPACE_ID::Duration& total_latency() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Duration* release_total_latency();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_total_latency();
  void set_allocated_total_latency(PROTOBUF_NAMESPACE_ID::Duration* total_latency);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_total_latency() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_total_latency();
  public:
  void unsafe_arena_set_allocated_total_latency(
      PROTOBUF_NAMESPACE_ID::Duration* total_latency);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_total_latency();

  // int64 num_calls_started = 4;
  void clear_num_calls_started();
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_started() const;
  void set_num_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_calls_started() const;
  void _internal_set_num_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_calls_finished_without_error = 6;
  void clear_num_calls_finished_without_error();
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_without_error() const;
  void set_num_calls_finished_without_error(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_calls_finished_without_error() const;
  void _internal_set_num_calls_finished_without_error(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_calls_finished_with_error = 7;
  void clear_num_calls_finished_with_error();
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_with_error() const;
  void set_num_calls_finished_with_error(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_calls_finished_with_error() const;
  void _internal_set_num_calls_finished_with_error(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_bytes_sent = 8;
  void clear_total_bytes_sent();
  ::PROTOBUF_NAMESPACE_ID::int64 total_bytes_sent() const;
  void set_total_bytes_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_bytes_sent() const;
  void _internal_set_total_bytes_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_bytes_received = 9;
  void clear_total_bytes_received();
  ::PROTOBUF_NAMESPACE_ID::int64 total_bytes_received() const;
  void set_total_bytes_received(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_bytes_received() const;
  void _internal_set_total_bytes_received(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_calls_finished_with_server_error = 16;
  void clear_num_calls_finished_with_server_error();
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_with_server_error() const;
  void set_num_calls_finished_with_server_error(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_calls_finished_with_server_error() const;
  void _internal_set_num_calls_finished_with_server_error(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_calls_in_progress = 5;
  bool has_num_calls_in_progress() const;
  private:
  bool _internal_has_num_calls_in_progress() const;
  public:
  void clear_num_calls_in_progress();
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_in_progress() const;
  void set_num_calls_in_progress(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_calls_in_progress() const;
  void _internal_set_num_calls_in_progress(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bytes load_key = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_load_key() const;
  private:
  bool _internal_has_load_key() const;
  public:
  PROTOBUF_DEPRECATED void clear_load_key();
  PROTOBUF_DEPRECATED const std::string& load_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_load_key(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_load_key();
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED std::string* release_load_key();
  PROTOBUF_DEPRECATED void set_allocated_load_key(std::string* load_key);
  private:
  const std::string& _internal_load_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load_key(const std::string& value);
  std::string* _internal_mutable_load_key();
  public:

  // bool load_key_unknown = 13;
  bool has_load_key_unknown() const;
  private:
  bool _internal_has_load_key_unknown() const;
  public:
  void clear_load_key_unknown();
  bool load_key_unknown() const;
  void set_load_key_unknown(bool value);
  private:
  bool _internal_load_key_unknown() const;
  void _internal_set_load_key_unknown(bool value);
  public:

  // .grpc.lb.v1.OrphanedLoadIdentifier orphaned_load_identifier = 14;
  bool has_orphaned_load_identifier() const;
  private:
  bool _internal_has_orphaned_load_identifier() const;
  public:
  void clear_orphaned_load_identifier();
  const ::grpc::lb::v1::OrphanedLoadIdentifier& orphaned_load_identifier() const;
  PROTOBUF_MUST_USE_RESULT ::grpc::lb::v1::OrphanedLoadIdentifier* release_orphaned_load_identifier();
  ::grpc::lb::v1::OrphanedLoadIdentifier* mutable_orphaned_load_identifier();
  void set_allocated_orphaned_load_identifier(::grpc::lb::v1::OrphanedLoadIdentifier* orphaned_load_identifier);
  private:
  const ::grpc::lb::v1::OrphanedLoadIdentifier& _internal_orphaned_load_identifier() const;
  ::grpc::lb::v1::OrphanedLoadIdentifier* _internal_mutable_orphaned_load_identifier();
  public:
  void unsafe_arena_set_allocated_orphaned_load_identifier(
      ::grpc::lb::v1::OrphanedLoadIdentifier* orphaned_load_identifier);
  ::grpc::lb::v1::OrphanedLoadIdentifier* unsafe_arena_release_orphaned_load_identifier();

  void clear_in_progress_report();
  InProgressReportCase in_progress_report_case() const;
  void clear_orphaned_load();
  OrphanedLoadCase orphaned_load_case() const;
  // @@protoc_insertion_point(class_scope:grpc.lb.v1.Load)
 private:
  class _Internal;
  void set_has_num_calls_in_progress();
  void set_has_load_key();
  void set_has_load_key_unknown();
  void set_has_orphaned_load_identifier();

  inline bool has_in_progress_report() const;
  inline void clear_has_in_progress_report();

  inline bool has_orphaned_load() const;
  inline void clear_has_orphaned_load();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::CallMetricData > metric_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_balance_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_address_;
  PROTOBUF_NAMESPACE_ID::Duration* total_latency_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_started_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_without_error_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_with_error_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_bytes_sent_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_bytes_received_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_with_server_error_;
  union InProgressReportUnion {
    constexpr InProgressReportUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int64 num_calls_in_progress_;
  } in_progress_report_;
  union OrphanedLoadUnion {
    constexpr OrphanedLoadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_key_;
    bool load_key_unknown_;
    ::grpc::lb::v1::OrphanedLoadIdentifier* orphaned_load_identifier_;
  } orphaned_load_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_load_5freporter_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT CallMetricData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.CallMetricData) */ {
 public:
  inline CallMetricData() : CallMetricData(nullptr) {}
  ~CallMetricData() override;
  explicit constexpr CallMetricData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallMetricData(const CallMetricData& from);
  CallMetricData(CallMetricData&& from) noexcept
    : CallMetricData() {
    *this = ::std::move(from);
  }

  inline CallMetricData& operator=(const CallMetricData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallMetricData& operator=(CallMetricData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallMetricData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallMetricData* internal_default_instance() {
    return reinterpret_cast<const CallMetricData*>(
               &_CallMetricData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CallMetricData& a, CallMetricData& b) {
    a.Swap(&b);
  }
  inline void Swap(CallMetricData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallMetricData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallMetricData* New() const final {
    return new CallMetricData();
  }

  CallMetricData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallMetricData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallMetricData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CallMetricData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallMetricData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.CallMetricData";
  }
  protected:
  explicit CallMetricData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricNameFieldNumber = 1,
    kNumCallsFinishedWithMetricFieldNumber = 2,
    kTotalMetricValueFieldNumber = 3,
  };
  // string metric_name = 1;
  void clear_metric_name();
  const std::string& metric_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_metric_name();
  void set_allocated_metric_name(std::string* metric_name);
  private:
  const std::string& _internal_metric_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric_name(const std::string& value);
  std::string* _internal_mutable_metric_name();
  public:

  // int64 num_calls_finished_with_metric = 2;
  void clear_num_calls_finished_with_metric();
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_with_metric() const;
  void set_num_calls_finished_with_metric(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_calls_finished_with_metric() const;
  void _internal_set_num_calls_finished_with_metric(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double total_metric_value = 3;
  void clear_total_metric_value();
  double total_metric_value() const;
  void set_total_metric_value(double value);
  private:
  double _internal_total_metric_value() const;
  void _internal_set_total_metric_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.CallMetricData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_with_metric_;
  double total_metric_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_load_5freporter_2eproto;
};
// -------------------------------------------------------------------

class GRPC_EXPORT OrphanedLoadIdentifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.OrphanedLoadIdentifier) */ {
 public:
  inline OrphanedLoadIdentifier() : OrphanedLoadIdentifier(nullptr) {}
  ~OrphanedLoadIdentifier() override;
  explicit constexpr OrphanedLoadIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrphanedLoadIdentifier(const OrphanedLoadIdentifier& from);
  OrphanedLoadIdentifier(OrphanedLoadIdentifier&& from) noexcept
    : OrphanedLoadIdentifier() {
    *this = ::std::move(from);
  }

  inline OrphanedLoadIdentifier& operator=(const OrphanedLoadIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrphanedLoadIdentifier& operator=(OrphanedLoadIdentifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrphanedLoadIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrphanedLoadIdentifier* internal_default_instance() {
    return reinterpret_cast<const OrphanedLoadIdentifier*>(
               &_OrphanedLoadIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OrphanedLoadIdentifier& a, OrphanedLoadIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(OrphanedLoadIdentifier* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrphanedLoadIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrphanedLoadIdentifier* New() const final {
    return new OrphanedLoadIdentifier();
  }

  OrphanedLoadIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrphanedLoadIdentifier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrphanedLoadIdentifier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrphanedLoadIdentifier& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrphanedLoadIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.OrphanedLoadIdentifier";
  }
  protected:
  explicit OrphanedLoadIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadKeyFieldNumber = 1,
    kLoadBalancerIdFieldNumber = 2,
  };
  // bytes load_key = 1;
  void clear_load_key();
  const std::string& load_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_load_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_load_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_load_key();
  void set_allocated_load_key(std::string* load_key);
  private:
  const std::string& _internal_load_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load_key(const std::string& value);
  std::string* _internal_mutable_load_key();
  public:

  // string load_balancer_id = 2;
  void clear_load_balancer_id();
  const std::string& load_balancer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_load_balancer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_load_balancer_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_load_balancer_id();
  void set_allocated_load_balancer_id(std::string* load_balancer_id);
  private:
  const std::string& _internal_load_balancer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load_balancer_id(const std::string& value);
  std::string* _internal_mutable_load_balancer_id();
  public:

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.OrphanedLoadIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_balancer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_load_5freporter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadReportRequest

// .grpc.lb.v1.InitialLoadReportRequest initial_request = 1;
inline bool LoadReportRequest::_internal_has_initial_request() const {
  return this != internal_default_instance() && initial_request_ != nullptr;
}
inline bool LoadReportRequest::has_initial_request() const {
  return _internal_has_initial_request();
}
inline void LoadReportRequest::clear_initial_request() {
  if (GetArenaForAllocation() == nullptr && initial_request_ != nullptr) {
    delete initial_request_;
  }
  initial_request_ = nullptr;
}
inline const ::grpc::lb::v1::InitialLoadReportRequest& LoadReportRequest::_internal_initial_request() const {
  const ::grpc::lb::v1::InitialLoadReportRequest* p = initial_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::lb::v1::InitialLoadReportRequest&>(
      ::grpc::lb::v1::_InitialLoadReportRequest_default_instance_);
}
inline const ::grpc::lb::v1::InitialLoadReportRequest& LoadReportRequest::initial_request() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.LoadReportRequest.initial_request)
  return _internal_initial_request();
}
inline void LoadReportRequest::unsafe_arena_set_allocated_initial_request(
    ::grpc::lb::v1::InitialLoadReportRequest* initial_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_request_);
  }
  initial_request_ = initial_request;
  if (initial_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.LoadReportRequest.initial_request)
}
inline ::grpc::lb::v1::InitialLoadReportRequest* LoadReportRequest::release_initial_request() {
  
  ::grpc::lb::v1::InitialLoadReportRequest* temp = initial_request_;
  initial_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::lb::v1::InitialLoadReportRequest* LoadReportRequest::unsafe_arena_release_initial_request() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.LoadReportRequest.initial_request)
  
  ::grpc::lb::v1::InitialLoadReportRequest* temp = initial_request_;
  initial_request_ = nullptr;
  return temp;
}
inline ::grpc::lb::v1::InitialLoadReportRequest* LoadReportRequest::_internal_mutable_initial_request() {
  
  if (initial_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::lb::v1::InitialLoadReportRequest>(GetArenaForAllocation());
    initial_request_ = p;
  }
  return initial_request_;
}
inline ::grpc::lb::v1::InitialLoadReportRequest* LoadReportRequest::mutable_initial_request() {
  ::grpc::lb::v1::InitialLoadReportRequest* _msg = _internal_mutable_initial_request();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.LoadReportRequest.initial_request)
  return _msg;
}
inline void LoadReportRequest::set_allocated_initial_request(::grpc::lb::v1::InitialLoadReportRequest* initial_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete initial_request_;
  }
  if (initial_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::lb::v1::InitialLoadReportRequest>::GetOwningArena(initial_request);
    if (message_arena != submessage_arena) {
      initial_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_request, submessage_arena);
    }
    
  } else {
    
  }
  initial_request_ = initial_request;
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.LoadReportRequest.initial_request)
}

// -------------------------------------------------------------------

// InitialLoadReportRequest

// string load_balanced_hostname = 1;
inline void InitialLoadReportRequest::clear_load_balanced_hostname() {
  load_balanced_hostname_.ClearToEmpty();
}
inline const std::string& InitialLoadReportRequest::load_balanced_hostname() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.InitialLoadReportRequest.load_balanced_hostname)
  return _internal_load_balanced_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitialLoadReportRequest::set_load_balanced_hostname(ArgT0&& arg0, ArgT... args) {
 
 load_balanced_hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.lb.v1.InitialLoadReportRequest.load_balanced_hostname)
}
inline std::string* InitialLoadReportRequest::mutable_load_balanced_hostname() {
  std::string* _s = _internal_mutable_load_balanced_hostname();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.InitialLoadReportRequest.load_balanced_hostname)
  return _s;
}
inline const std::string& InitialLoadReportRequest::_internal_load_balanced_hostname() const {
  return load_balanced_hostname_.Get();
}
inline void InitialLoadReportRequest::_internal_set_load_balanced_hostname(const std::string& value) {
  
  load_balanced_hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitialLoadReportRequest::_internal_mutable_load_balanced_hostname() {
  
  return load_balanced_hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitialLoadReportRequest::release_load_balanced_hostname() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.InitialLoadReportRequest.load_balanced_hostname)
  return load_balanced_hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitialLoadReportRequest::set_allocated_load_balanced_hostname(std::string* load_balanced_hostname) {
  if (load_balanced_hostname != nullptr) {
    
  } else {
    
  }
  load_balanced_hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), load_balanced_hostname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.InitialLoadReportRequest.load_balanced_hostname)
}

// bytes load_key = 2;
inline void InitialLoadReportRequest::clear_load_key() {
  load_key_.ClearToEmpty();
}
inline const std::string& InitialLoadReportRequest::load_key() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.InitialLoadReportRequest.load_key)
  return _internal_load_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitialLoadReportRequest::set_load_key(ArgT0&& arg0, ArgT... args) {
 
 load_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.lb.v1.InitialLoadReportRequest.load_key)
}
inline std::string* InitialLoadReportRequest::mutable_load_key() {
  std::string* _s = _internal_mutable_load_key();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.InitialLoadReportRequest.load_key)
  return _s;
}
inline const std::string& InitialLoadReportRequest::_internal_load_key() const {
  return load_key_.Get();
}
inline void InitialLoadReportRequest::_internal_set_load_key(const std::string& value) {
  
  load_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitialLoadReportRequest::_internal_mutable_load_key() {
  
  return load_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitialLoadReportRequest::release_load_key() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.InitialLoadReportRequest.load_key)
  return load_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitialLoadReportRequest::set_allocated_load_key(std::string* load_key) {
  if (load_key != nullptr) {
    
  } else {
    
  }
  load_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), load_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.InitialLoadReportRequest.load_key)
}

// .google.protobuf.Duration load_report_interval = 3;
inline bool InitialLoadReportRequest::_internal_has_load_report_interval() const {
  return this != internal_default_instance() && load_report_interval_ != nullptr;
}
inline bool InitialLoadReportRequest::has_load_report_interval() const {
  return _internal_has_load_report_interval();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& InitialLoadReportRequest::_internal_load_report_interval() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = load_report_interval_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& InitialLoadReportRequest::load_report_interval() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.InitialLoadReportRequest.load_report_interval)
  return _internal_load_report_interval();
}
inline void InitialLoadReportRequest::unsafe_arena_set_allocated_load_report_interval(
    PROTOBUF_NAMESPACE_ID::Duration* load_report_interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(load_report_interval_);
  }
  load_report_interval_ = load_report_interval;
  if (load_report_interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.InitialLoadReportRequest.load_report_interval)
}
inline PROTOBUF_NAMESPACE_ID::Duration* InitialLoadReportRequest::release_load_report_interval() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = load_report_interval_;
  load_report_interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* InitialLoadReportRequest::unsafe_arena_release_load_report_interval() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.InitialLoadReportRequest.load_report_interval)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = load_report_interval_;
  load_report_interval_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* InitialLoadReportRequest::_internal_mutable_load_report_interval() {
  
  if (load_report_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    load_report_interval_ = p;
  }
  return load_report_interval_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* InitialLoadReportRequest::mutable_load_report_interval() {
  PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_load_report_interval();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.InitialLoadReportRequest.load_report_interval)
  return _msg;
}
inline void InitialLoadReportRequest::set_allocated_load_report_interval(PROTOBUF_NAMESPACE_ID::Duration* load_report_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(load_report_interval_);
  }
  if (load_report_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(load_report_interval));
    if (message_arena != submessage_arena) {
      load_report_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_report_interval, submessage_arena);
    }
    
  } else {
    
  }
  load_report_interval_ = load_report_interval;
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.InitialLoadReportRequest.load_report_interval)
}

// -------------------------------------------------------------------

// LoadReportResponse

// .grpc.lb.v1.InitialLoadReportResponse initial_response = 1;
inline bool LoadReportResponse::_internal_has_initial_response() const {
  return this != internal_default_instance() && initial_response_ != nullptr;
}
inline bool LoadReportResponse::has_initial_response() const {
  return _internal_has_initial_response();
}
inline void LoadReportResponse::clear_initial_response() {
  if (GetArenaForAllocation() == nullptr && initial_response_ != nullptr) {
    delete initial_response_;
  }
  initial_response_ = nullptr;
}
inline const ::grpc::lb::v1::InitialLoadReportResponse& LoadReportResponse::_internal_initial_response() const {
  const ::grpc::lb::v1::InitialLoadReportResponse* p = initial_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::lb::v1::InitialLoadReportResponse&>(
      ::grpc::lb::v1::_InitialLoadReportResponse_default_instance_);
}
inline const ::grpc::lb::v1::InitialLoadReportResponse& LoadReportResponse::initial_response() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.LoadReportResponse.initial_response)
  return _internal_initial_response();
}
inline void LoadReportResponse::unsafe_arena_set_allocated_initial_response(
    ::grpc::lb::v1::InitialLoadReportResponse* initial_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_response_);
  }
  initial_response_ = initial_response;
  if (initial_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.LoadReportResponse.initial_response)
}
inline ::grpc::lb::v1::InitialLoadReportResponse* LoadReportResponse::release_initial_response() {
  
  ::grpc::lb::v1::InitialLoadReportResponse* temp = initial_response_;
  initial_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::lb::v1::InitialLoadReportResponse* LoadReportResponse::unsafe_arena_release_initial_response() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.LoadReportResponse.initial_response)
  
  ::grpc::lb::v1::InitialLoadReportResponse* temp = initial_response_;
  initial_response_ = nullptr;
  return temp;
}
inline ::grpc::lb::v1::InitialLoadReportResponse* LoadReportResponse::_internal_mutable_initial_response() {
  
  if (initial_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::lb::v1::InitialLoadReportResponse>(GetArenaForAllocation());
    initial_response_ = p;
  }
  return initial_response_;
}
inline ::grpc::lb::v1::InitialLoadReportResponse* LoadReportResponse::mutable_initial_response() {
  ::grpc::lb::v1::InitialLoadReportResponse* _msg = _internal_mutable_initial_response();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.LoadReportResponse.initial_response)
  return _msg;
}
inline void LoadReportResponse::set_allocated_initial_response(::grpc::lb::v1::InitialLoadReportResponse* initial_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete initial_response_;
  }
  if (initial_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::lb::v1::InitialLoadReportResponse>::GetOwningArena(initial_response);
    if (message_arena != submessage_arena) {
      initial_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_response, submessage_arena);
    }
    
  } else {
    
  }
  initial_response_ = initial_response;
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.LoadReportResponse.initial_response)
}

// .grpc.lb.v1.LoadBalancingFeedback load_balancing_feedback = 2;
inline bool LoadReportResponse::_internal_has_load_balancing_feedback() const {
  return this != internal_default_instance() && load_balancing_feedback_ != nullptr;
}
inline bool LoadReportResponse::has_load_balancing_feedback() const {
  return _internal_has_load_balancing_feedback();
}
inline void LoadReportResponse::clear_load_balancing_feedback() {
  if (GetArenaForAllocation() == nullptr && load_balancing_feedback_ != nullptr) {
    delete load_balancing_feedback_;
  }
  load_balancing_feedback_ = nullptr;
}
inline const ::grpc::lb::v1::LoadBalancingFeedback& LoadReportResponse::_internal_load_balancing_feedback() const {
  const ::grpc::lb::v1::LoadBalancingFeedback* p = load_balancing_feedback_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::lb::v1::LoadBalancingFeedback&>(
      ::grpc::lb::v1::_LoadBalancingFeedback_default_instance_);
}
inline const ::grpc::lb::v1::LoadBalancingFeedback& LoadReportResponse::load_balancing_feedback() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.LoadReportResponse.load_balancing_feedback)
  return _internal_load_balancing_feedback();
}
inline void LoadReportResponse::unsafe_arena_set_allocated_load_balancing_feedback(
    ::grpc::lb::v1::LoadBalancingFeedback* load_balancing_feedback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(load_balancing_feedback_);
  }
  load_balancing_feedback_ = load_balancing_feedback;
  if (load_balancing_feedback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.LoadReportResponse.load_balancing_feedback)
}
inline ::grpc::lb::v1::LoadBalancingFeedback* LoadReportResponse::release_load_balancing_feedback() {
  
  ::grpc::lb::v1::LoadBalancingFeedback* temp = load_balancing_feedback_;
  load_balancing_feedback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::lb::v1::LoadBalancingFeedback* LoadReportResponse::unsafe_arena_release_load_balancing_feedback() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.LoadReportResponse.load_balancing_feedback)
  
  ::grpc::lb::v1::LoadBalancingFeedback* temp = load_balancing_feedback_;
  load_balancing_feedback_ = nullptr;
  return temp;
}
inline ::grpc::lb::v1::LoadBalancingFeedback* LoadReportResponse::_internal_mutable_load_balancing_feedback() {
  
  if (load_balancing_feedback_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::lb::v1::LoadBalancingFeedback>(GetArenaForAllocation());
    load_balancing_feedback_ = p;
  }
  return load_balancing_feedback_;
}
inline ::grpc::lb::v1::LoadBalancingFeedback* LoadReportResponse::mutable_load_balancing_feedback() {
  ::grpc::lb::v1::LoadBalancingFeedback* _msg = _internal_mutable_load_balancing_feedback();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.LoadReportResponse.load_balancing_feedback)
  return _msg;
}
inline void LoadReportResponse::set_allocated_load_balancing_feedback(::grpc::lb::v1::LoadBalancingFeedback* load_balancing_feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete load_balancing_feedback_;
  }
  if (load_balancing_feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::lb::v1::LoadBalancingFeedback>::GetOwningArena(load_balancing_feedback);
    if (message_arena != submessage_arena) {
      load_balancing_feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_balancing_feedback, submessage_arena);
    }
    
  } else {
    
  }
  load_balancing_feedback_ = load_balancing_feedback;
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.LoadReportResponse.load_balancing_feedback)
}

// repeated .grpc.lb.v1.Load load = 3;
inline int LoadReportResponse::_internal_load_size() const {
  return load_.size();
}
inline int LoadReportResponse::load_size() const {
  return _internal_load_size();
}
inline void LoadReportResponse::clear_load() {
  load_.Clear();
}
inline ::grpc::lb::v1::Load* LoadReportResponse::mutable_load(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.LoadReportResponse.load)
  return load_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::Load >*
LoadReportResponse::mutable_load() {
  // @@protoc_insertion_point(field_mutable_list:grpc.lb.v1.LoadReportResponse.load)
  return &load_;
}
inline const ::grpc::lb::v1::Load& LoadReportResponse::_internal_load(int index) const {
  return load_.Get(index);
}
inline const ::grpc::lb::v1::Load& LoadReportResponse::load(int index) const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.LoadReportResponse.load)
  return _internal_load(index);
}
inline ::grpc::lb::v1::Load* LoadReportResponse::_internal_add_load() {
  return load_.Add();
}
inline ::grpc::lb::v1::Load* LoadReportResponse::add_load() {
  ::grpc::lb::v1::Load* _add = _internal_add_load();
  // @@protoc_insertion_point(field_add:grpc.lb.v1.LoadReportResponse.load)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::Load >&
LoadReportResponse::load() const {
  // @@protoc_insertion_point(field_list:grpc.lb.v1.LoadReportResponse.load)
  return load_;
}

// -------------------------------------------------------------------

// InitialLoadReportResponse

// string load_balancer_id = 1;
inline void InitialLoadReportResponse::clear_load_balancer_id() {
  load_balancer_id_.ClearToEmpty();
}
inline const std::string& InitialLoadReportResponse::load_balancer_id() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.InitialLoadReportResponse.load_balancer_id)
  return _internal_load_balancer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitialLoadReportResponse::set_load_balancer_id(ArgT0&& arg0, ArgT... args) {
 
 load_balancer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.lb.v1.InitialLoadReportResponse.load_balancer_id)
}
inline std::string* InitialLoadReportResponse::mutable_load_balancer_id() {
  std::string* _s = _internal_mutable_load_balancer_id();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.InitialLoadReportResponse.load_balancer_id)
  return _s;
}
inline const std::string& InitialLoadReportResponse::_internal_load_balancer_id() const {
  return load_balancer_id_.Get();
}
inline void InitialLoadReportResponse::_internal_set_load_balancer_id(const std::string& value) {
  
  load_balancer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitialLoadReportResponse::_internal_mutable_load_balancer_id() {
  
  return load_balancer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitialLoadReportResponse::release_load_balancer_id() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.InitialLoadReportResponse.load_balancer_id)
  return load_balancer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitialLoadReportResponse::set_allocated_load_balancer_id(std::string* load_balancer_id) {
  if (load_balancer_id != nullptr) {
    
  } else {
    
  }
  load_balancer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), load_balancer_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.InitialLoadReportResponse.load_balancer_id)
}

// .grpc.lb.v1.InitialLoadReportResponse.ImplementationIdentifier implementation_id = 2;
inline void InitialLoadReportResponse::clear_implementation_id() {
  implementation_id_ = 0;
}
inline ::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier InitialLoadReportResponse::_internal_implementation_id() const {
  return static_cast< ::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier >(implementation_id_);
}
inline ::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier InitialLoadReportResponse::implementation_id() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.InitialLoadReportResponse.implementation_id)
  return _internal_implementation_id();
}
inline void InitialLoadReportResponse::_internal_set_implementation_id(::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier value) {
  
  implementation_id_ = value;
}
inline void InitialLoadReportResponse::set_implementation_id(::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier value) {
  _internal_set_implementation_id(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.InitialLoadReportResponse.implementation_id)
}

// int64 server_version = 3;
inline void InitialLoadReportResponse::clear_server_version() {
  server_version_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InitialLoadReportResponse::_internal_server_version() const {
  return server_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InitialLoadReportResponse::server_version() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.InitialLoadReportResponse.server_version)
  return _internal_server_version();
}
inline void InitialLoadReportResponse::_internal_set_server_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_version_ = value;
}
inline void InitialLoadReportResponse::set_server_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_version(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.InitialLoadReportResponse.server_version)
}

// -------------------------------------------------------------------

// LoadBalancingFeedback

// float server_utilization = 1;
inline void LoadBalancingFeedback::clear_server_utilization() {
  server_utilization_ = 0;
}
inline float LoadBalancingFeedback::_internal_server_utilization() const {
  return server_utilization_;
}
inline float LoadBalancingFeedback::server_utilization() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.LoadBalancingFeedback.server_utilization)
  return _internal_server_utilization();
}
inline void LoadBalancingFeedback::_internal_set_server_utilization(float value) {
  
  server_utilization_ = value;
}
inline void LoadBalancingFeedback::set_server_utilization(float value) {
  _internal_set_server_utilization(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.LoadBalancingFeedback.server_utilization)
}

// float calls_per_second = 2;
inline void LoadBalancingFeedback::clear_calls_per_second() {
  calls_per_second_ = 0;
}
inline float LoadBalancingFeedback::_internal_calls_per_second() const {
  return calls_per_second_;
}
inline float LoadBalancingFeedback::calls_per_second() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.LoadBalancingFeedback.calls_per_second)
  return _internal_calls_per_second();
}
inline void LoadBalancingFeedback::_internal_set_calls_per_second(float value) {
  
  calls_per_second_ = value;
}
inline void LoadBalancingFeedback::set_calls_per_second(float value) {
  _internal_set_calls_per_second(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.LoadBalancingFeedback.calls_per_second)
}

// float errors_per_second = 3;
inline void LoadBalancingFeedback::clear_errors_per_second() {
  errors_per_second_ = 0;
}
inline float LoadBalancingFeedback::_internal_errors_per_second() const {
  return errors_per_second_;
}
inline float LoadBalancingFeedback::errors_per_second() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.LoadBalancingFeedback.errors_per_second)
  return _internal_errors_per_second();
}
inline void LoadBalancingFeedback::_internal_set_errors_per_second(float value) {
  
  errors_per_second_ = value;
}
inline void LoadBalancingFeedback::set_errors_per_second(float value) {
  _internal_set_errors_per_second(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.LoadBalancingFeedback.errors_per_second)
}

// -------------------------------------------------------------------

// Load

// string load_balance_tag = 1;
inline void Load::clear_load_balance_tag() {
  load_balance_tag_.ClearToEmpty();
}
inline const std::string& Load::load_balance_tag() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.load_balance_tag)
  return _internal_load_balance_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Load::set_load_balance_tag(ArgT0&& arg0, ArgT... args) {
 
 load_balance_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Load.load_balance_tag)
}
inline std::string* Load::mutable_load_balance_tag() {
  std::string* _s = _internal_mutable_load_balance_tag();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.Load.load_balance_tag)
  return _s;
}
inline const std::string& Load::_internal_load_balance_tag() const {
  return load_balance_tag_.Get();
}
inline void Load::_internal_set_load_balance_tag(const std::string& value) {
  
  load_balance_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Load::_internal_mutable_load_balance_tag() {
  
  return load_balance_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Load::release_load_balance_tag() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.Load.load_balance_tag)
  return load_balance_tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Load::set_allocated_load_balance_tag(std::string* load_balance_tag) {
  if (load_balance_tag != nullptr) {
    
  } else {
    
  }
  load_balance_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), load_balance_tag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.Load.load_balance_tag)
}

// string user_id = 3;
inline void Load::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& Load::user_id() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Load::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Load.user_id)
}
inline std::string* Load::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.Load.user_id)
  return _s;
}
inline const std::string& Load::_internal_user_id() const {
  return user_id_.Get();
}
inline void Load::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Load::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Load::release_user_id() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.Load.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Load::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.Load.user_id)
}

// bytes client_ip_address = 15;
inline void Load::clear_client_ip_address() {
  client_ip_address_.ClearToEmpty();
}
inline const std::string& Load::client_ip_address() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.client_ip_address)
  return _internal_client_ip_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Load::set_client_ip_address(ArgT0&& arg0, ArgT... args) {
 
 client_ip_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Load.client_ip_address)
}
inline std::string* Load::mutable_client_ip_address() {
  std::string* _s = _internal_mutable_client_ip_address();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.Load.client_ip_address)
  return _s;
}
inline const std::string& Load::_internal_client_ip_address() const {
  return client_ip_address_.Get();
}
inline void Load::_internal_set_client_ip_address(const std::string& value) {
  
  client_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Load::_internal_mutable_client_ip_address() {
  
  return client_ip_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Load::release_client_ip_address() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.Load.client_ip_address)
  return client_ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Load::set_allocated_client_ip_address(std::string* client_ip_address) {
  if (client_ip_address != nullptr) {
    
  } else {
    
  }
  client_ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_ip_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.Load.client_ip_address)
}

// int64 num_calls_started = 4;
inline void Load::clear_num_calls_started() {
  num_calls_started_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::_internal_num_calls_started() const {
  return num_calls_started_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::num_calls_started() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.num_calls_started)
  return _internal_num_calls_started();
}
inline void Load::_internal_set_num_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_calls_started_ = value;
}
inline void Load::set_num_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_calls_started(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Load.num_calls_started)
}

// int64 num_calls_in_progress = 5;
inline bool Load::_internal_has_num_calls_in_progress() const {
  return in_progress_report_case() == kNumCallsInProgress;
}
inline bool Load::has_num_calls_in_progress() const {
  return _internal_has_num_calls_in_progress();
}
inline void Load::set_has_num_calls_in_progress() {
  _oneof_case_[0] = kNumCallsInProgress;
}
inline void Load::clear_num_calls_in_progress() {
  if (_internal_has_num_calls_in_progress()) {
    in_progress_report_.num_calls_in_progress_ = int64_t{0};
    clear_has_in_progress_report();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::_internal_num_calls_in_progress() const {
  if (_internal_has_num_calls_in_progress()) {
    return in_progress_report_.num_calls_in_progress_;
  }
  return int64_t{0};
}
inline void Load::_internal_set_num_calls_in_progress(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_num_calls_in_progress()) {
    clear_in_progress_report();
    set_has_num_calls_in_progress();
  }
  in_progress_report_.num_calls_in_progress_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::num_calls_in_progress() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.num_calls_in_progress)
  return _internal_num_calls_in_progress();
}
inline void Load::set_num_calls_in_progress(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_calls_in_progress(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Load.num_calls_in_progress)
}

// int64 num_calls_finished_without_error = 6;
inline void Load::clear_num_calls_finished_without_error() {
  num_calls_finished_without_error_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::_internal_num_calls_finished_without_error() const {
  return num_calls_finished_without_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::num_calls_finished_without_error() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.num_calls_finished_without_error)
  return _internal_num_calls_finished_without_error();
}
inline void Load::_internal_set_num_calls_finished_without_error(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_calls_finished_without_error_ = value;
}
inline void Load::set_num_calls_finished_without_error(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_calls_finished_without_error(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Load.num_calls_finished_without_error)
}

// int64 num_calls_finished_with_error = 7;
inline void Load::clear_num_calls_finished_with_error() {
  num_calls_finished_with_error_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::_internal_num_calls_finished_with_error() const {
  return num_calls_finished_with_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::num_calls_finished_with_error() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.num_calls_finished_with_error)
  return _internal_num_calls_finished_with_error();
}
inline void Load::_internal_set_num_calls_finished_with_error(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_calls_finished_with_error_ = value;
}
inline void Load::set_num_calls_finished_with_error(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_calls_finished_with_error(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Load.num_calls_finished_with_error)
}

// int64 num_calls_finished_with_server_error = 16;
inline void Load::clear_num_calls_finished_with_server_error() {
  num_calls_finished_with_server_error_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::_internal_num_calls_finished_with_server_error() const {
  return num_calls_finished_with_server_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::num_calls_finished_with_server_error() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.num_calls_finished_with_server_error)
  return _internal_num_calls_finished_with_server_error();
}
inline void Load::_internal_set_num_calls_finished_with_server_error(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_calls_finished_with_server_error_ = value;
}
inline void Load::set_num_calls_finished_with_server_error(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_calls_finished_with_server_error(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Load.num_calls_finished_with_server_error)
}

// int64 total_bytes_sent = 8;
inline void Load::clear_total_bytes_sent() {
  total_bytes_sent_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::_internal_total_bytes_sent() const {
  return total_bytes_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::total_bytes_sent() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.total_bytes_sent)
  return _internal_total_bytes_sent();
}
inline void Load::_internal_set_total_bytes_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_bytes_sent_ = value;
}
inline void Load::set_total_bytes_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_bytes_sent(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Load.total_bytes_sent)
}

// int64 total_bytes_received = 9;
inline void Load::clear_total_bytes_received() {
  total_bytes_received_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::_internal_total_bytes_received() const {
  return total_bytes_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Load::total_bytes_received() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.total_bytes_received)
  return _internal_total_bytes_received();
}
inline void Load::_internal_set_total_bytes_received(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_bytes_received_ = value;
}
inline void Load::set_total_bytes_received(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_bytes_received(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Load.total_bytes_received)
}

// .google.protobuf.Duration total_latency = 10;
inline bool Load::_internal_has_total_latency() const {
  return this != internal_default_instance() && total_latency_ != nullptr;
}
inline bool Load::has_total_latency() const {
  return _internal_has_total_latency();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Load::_internal_total_latency() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = total_latency_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Load::total_latency() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.total_latency)
  return _internal_total_latency();
}
inline void Load::unsafe_arena_set_allocated_total_latency(
    PROTOBUF_NAMESPACE_ID::Duration* total_latency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_latency_);
  }
  total_latency_ = total_latency;
  if (total_latency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.Load.total_latency)
}
inline PROTOBUF_NAMESPACE_ID::Duration* Load::release_total_latency() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = total_latency_;
  total_latency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Load::unsafe_arena_release_total_latency() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.Load.total_latency)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = total_latency_;
  total_latency_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Load::_internal_mutable_total_latency() {
  
  if (total_latency_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    total_latency_ = p;
  }
  return total_latency_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Load::mutable_total_latency() {
  PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_total_latency();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.Load.total_latency)
  return _msg;
}
inline void Load::set_allocated_total_latency(PROTOBUF_NAMESPACE_ID::Duration* total_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_latency_);
  }
  if (total_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_latency));
    if (message_arena != submessage_arena) {
      total_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_latency, submessage_arena);
    }
    
  } else {
    
  }
  total_latency_ = total_latency;
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.Load.total_latency)
}

// repeated .grpc.lb.v1.CallMetricData metric_data = 11;
inline int Load::_internal_metric_data_size() const {
  return metric_data_.size();
}
inline int Load::metric_data_size() const {
  return _internal_metric_data_size();
}
inline void Load::clear_metric_data() {
  metric_data_.Clear();
}
inline ::grpc::lb::v1::CallMetricData* Load::mutable_metric_data(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.Load.metric_data)
  return metric_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::CallMetricData >*
Load::mutable_metric_data() {
  // @@protoc_insertion_point(field_mutable_list:grpc.lb.v1.Load.metric_data)
  return &metric_data_;
}
inline const ::grpc::lb::v1::CallMetricData& Load::_internal_metric_data(int index) const {
  return metric_data_.Get(index);
}
inline const ::grpc::lb::v1::CallMetricData& Load::metric_data(int index) const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.metric_data)
  return _internal_metric_data(index);
}
inline ::grpc::lb::v1::CallMetricData* Load::_internal_add_metric_data() {
  return metric_data_.Add();
}
inline ::grpc::lb::v1::CallMetricData* Load::add_metric_data() {
  ::grpc::lb::v1::CallMetricData* _add = _internal_add_metric_data();
  // @@protoc_insertion_point(field_add:grpc.lb.v1.Load.metric_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::CallMetricData >&
Load::metric_data() const {
  // @@protoc_insertion_point(field_list:grpc.lb.v1.Load.metric_data)
  return metric_data_;
}

// bytes load_key = 12 [deprecated = true];
inline bool Load::_internal_has_load_key() const {
  return orphaned_load_case() == kLoadKey;
}
inline bool Load::has_load_key() const {
  return _internal_has_load_key();
}
inline void Load::set_has_load_key() {
  _oneof_case_[1] = kLoadKey;
}
inline void Load::clear_load_key() {
  if (_internal_has_load_key()) {
    orphaned_load_.load_key_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_orphaned_load();
  }
}
inline const std::string& Load::load_key() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.load_key)
  return _internal_load_key();
}
template <typename ArgT0, typename... ArgT>
inline void Load::set_load_key(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_load_key()) {
    clear_orphaned_load();
    set_has_load_key();
    orphaned_load_.load_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  orphaned_load_.load_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Load.load_key)
}
inline std::string* Load::mutable_load_key() {
  std::string* _s = _internal_mutable_load_key();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.Load.load_key)
  return _s;
}
inline const std::string& Load::_internal_load_key() const {
  if (_internal_has_load_key()) {
    return orphaned_load_.load_key_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Load::_internal_set_load_key(const std::string& value) {
  if (!_internal_has_load_key()) {
    clear_orphaned_load();
    set_has_load_key();
    orphaned_load_.load_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  orphaned_load_.load_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Load::_internal_mutable_load_key() {
  if (!_internal_has_load_key()) {
    clear_orphaned_load();
    set_has_load_key();
    orphaned_load_.load_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return orphaned_load_.load_key_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Load::release_load_key() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.Load.load_key)
  if (_internal_has_load_key()) {
    clear_has_orphaned_load();
    return orphaned_load_.load_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Load::set_allocated_load_key(std::string* load_key) {
  if (has_orphaned_load()) {
    clear_orphaned_load();
  }
  if (load_key != nullptr) {
    set_has_load_key();
    orphaned_load_.load_key_.UnsafeSetDefault(load_key);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(load_key);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.Load.load_key)
}

// bool load_key_unknown = 13;
inline bool Load::_internal_has_load_key_unknown() const {
  return orphaned_load_case() == kLoadKeyUnknown;
}
inline bool Load::has_load_key_unknown() const {
  return _internal_has_load_key_unknown();
}
inline void Load::set_has_load_key_unknown() {
  _oneof_case_[1] = kLoadKeyUnknown;
}
inline void Load::clear_load_key_unknown() {
  if (_internal_has_load_key_unknown()) {
    orphaned_load_.load_key_unknown_ = false;
    clear_has_orphaned_load();
  }
}
inline bool Load::_internal_load_key_unknown() const {
  if (_internal_has_load_key_unknown()) {
    return orphaned_load_.load_key_unknown_;
  }
  return false;
}
inline void Load::_internal_set_load_key_unknown(bool value) {
  if (!_internal_has_load_key_unknown()) {
    clear_orphaned_load();
    set_has_load_key_unknown();
  }
  orphaned_load_.load_key_unknown_ = value;
}
inline bool Load::load_key_unknown() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.load_key_unknown)
  return _internal_load_key_unknown();
}
inline void Load::set_load_key_unknown(bool value) {
  _internal_set_load_key_unknown(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Load.load_key_unknown)
}

// .grpc.lb.v1.OrphanedLoadIdentifier orphaned_load_identifier = 14;
inline bool Load::_internal_has_orphaned_load_identifier() const {
  return orphaned_load_case() == kOrphanedLoadIdentifier;
}
inline bool Load::has_orphaned_load_identifier() const {
  return _internal_has_orphaned_load_identifier();
}
inline void Load::set_has_orphaned_load_identifier() {
  _oneof_case_[1] = kOrphanedLoadIdentifier;
}
inline void Load::clear_orphaned_load_identifier() {
  if (_internal_has_orphaned_load_identifier()) {
    if (GetArenaForAllocation() == nullptr) {
      delete orphaned_load_.orphaned_load_identifier_;
    }
    clear_has_orphaned_load();
  }
}
inline ::grpc::lb::v1::OrphanedLoadIdentifier* Load::release_orphaned_load_identifier() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.Load.orphaned_load_identifier)
  if (_internal_has_orphaned_load_identifier()) {
    clear_has_orphaned_load();
      ::grpc::lb::v1::OrphanedLoadIdentifier* temp = orphaned_load_.orphaned_load_identifier_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    orphaned_load_.orphaned_load_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::lb::v1::OrphanedLoadIdentifier& Load::_internal_orphaned_load_identifier() const {
  return _internal_has_orphaned_load_identifier()
      ? *orphaned_load_.orphaned_load_identifier_
      : reinterpret_cast< ::grpc::lb::v1::OrphanedLoadIdentifier&>(::grpc::lb::v1::_OrphanedLoadIdentifier_default_instance_);
}
inline const ::grpc::lb::v1::OrphanedLoadIdentifier& Load::orphaned_load_identifier() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Load.orphaned_load_identifier)
  return _internal_orphaned_load_identifier();
}
inline ::grpc::lb::v1::OrphanedLoadIdentifier* Load::unsafe_arena_release_orphaned_load_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.lb.v1.Load.orphaned_load_identifier)
  if (_internal_has_orphaned_load_identifier()) {
    clear_has_orphaned_load();
    ::grpc::lb::v1::OrphanedLoadIdentifier* temp = orphaned_load_.orphaned_load_identifier_;
    orphaned_load_.orphaned_load_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Load::unsafe_arena_set_allocated_orphaned_load_identifier(::grpc::lb::v1::OrphanedLoadIdentifier* orphaned_load_identifier) {
  clear_orphaned_load();
  if (orphaned_load_identifier) {
    set_has_orphaned_load_identifier();
    orphaned_load_.orphaned_load_identifier_ = orphaned_load_identifier;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.Load.orphaned_load_identifier)
}
inline ::grpc::lb::v1::OrphanedLoadIdentifier* Load::_internal_mutable_orphaned_load_identifier() {
  if (!_internal_has_orphaned_load_identifier()) {
    clear_orphaned_load();
    set_has_orphaned_load_identifier();
    orphaned_load_.orphaned_load_identifier_ = CreateMaybeMessage< ::grpc::lb::v1::OrphanedLoadIdentifier >(GetArenaForAllocation());
  }
  return orphaned_load_.orphaned_load_identifier_;
}
inline ::grpc::lb::v1::OrphanedLoadIdentifier* Load::mutable_orphaned_load_identifier() {
  ::grpc::lb::v1::OrphanedLoadIdentifier* _msg = _internal_mutable_orphaned_load_identifier();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.Load.orphaned_load_identifier)
  return _msg;
}

inline bool Load::has_in_progress_report() const {
  return in_progress_report_case() != IN_PROGRESS_REPORT_NOT_SET;
}
inline void Load::clear_has_in_progress_report() {
  _oneof_case_[0] = IN_PROGRESS_REPORT_NOT_SET;
}
inline bool Load::has_orphaned_load() const {
  return orphaned_load_case() != ORPHANED_LOAD_NOT_SET;
}
inline void Load::clear_has_orphaned_load() {
  _oneof_case_[1] = ORPHANED_LOAD_NOT_SET;
}
inline Load::InProgressReportCase Load::in_progress_report_case() const {
  return Load::InProgressReportCase(_oneof_case_[0]);
}
inline Load::OrphanedLoadCase Load::orphaned_load_case() const {
  return Load::OrphanedLoadCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// CallMetricData

// string metric_name = 1;
inline void CallMetricData::clear_metric_name() {
  metric_name_.ClearToEmpty();
}
inline const std::string& CallMetricData::metric_name() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.CallMetricData.metric_name)
  return _internal_metric_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CallMetricData::set_metric_name(ArgT0&& arg0, ArgT... args) {
 
 metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.lb.v1.CallMetricData.metric_name)
}
inline std::string* CallMetricData::mutable_metric_name() {
  std::string* _s = _internal_mutable_metric_name();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.CallMetricData.metric_name)
  return _s;
}
inline const std::string& CallMetricData::_internal_metric_name() const {
  return metric_name_.Get();
}
inline void CallMetricData::_internal_set_metric_name(const std::string& value) {
  
  metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CallMetricData::_internal_mutable_metric_name() {
  
  return metric_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CallMetricData::release_metric_name() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.CallMetricData.metric_name)
  return metric_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CallMetricData::set_allocated_metric_name(std::string* metric_name) {
  if (metric_name != nullptr) {
    
  } else {
    
  }
  metric_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metric_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.CallMetricData.metric_name)
}

// int64 num_calls_finished_with_metric = 2;
inline void CallMetricData::clear_num_calls_finished_with_metric() {
  num_calls_finished_with_metric_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CallMetricData::_internal_num_calls_finished_with_metric() const {
  return num_calls_finished_with_metric_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CallMetricData::num_calls_finished_with_metric() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.CallMetricData.num_calls_finished_with_metric)
  return _internal_num_calls_finished_with_metric();
}
inline void CallMetricData::_internal_set_num_calls_finished_with_metric(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_calls_finished_with_metric_ = value;
}
inline void CallMetricData::set_num_calls_finished_with_metric(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_calls_finished_with_metric(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.CallMetricData.num_calls_finished_with_metric)
}

// double total_metric_value = 3;
inline void CallMetricData::clear_total_metric_value() {
  total_metric_value_ = 0;
}
inline double CallMetricData::_internal_total_metric_value() const {
  return total_metric_value_;
}
inline double CallMetricData::total_metric_value() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.CallMetricData.total_metric_value)
  return _internal_total_metric_value();
}
inline void CallMetricData::_internal_set_total_metric_value(double value) {
  
  total_metric_value_ = value;
}
inline void CallMetricData::set_total_metric_value(double value) {
  _internal_set_total_metric_value(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.CallMetricData.total_metric_value)
}

// -------------------------------------------------------------------

// OrphanedLoadIdentifier

// bytes load_key = 1;
inline void OrphanedLoadIdentifier::clear_load_key() {
  load_key_.ClearToEmpty();
}
inline const std::string& OrphanedLoadIdentifier::load_key() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.OrphanedLoadIdentifier.load_key)
  return _internal_load_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrphanedLoadIdentifier::set_load_key(ArgT0&& arg0, ArgT... args) {
 
 load_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.lb.v1.OrphanedLoadIdentifier.load_key)
}
inline std::string* OrphanedLoadIdentifier::mutable_load_key() {
  std::string* _s = _internal_mutable_load_key();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.OrphanedLoadIdentifier.load_key)
  return _s;
}
inline const std::string& OrphanedLoadIdentifier::_internal_load_key() const {
  return load_key_.Get();
}
inline void OrphanedLoadIdentifier::_internal_set_load_key(const std::string& value) {
  
  load_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrphanedLoadIdentifier::_internal_mutable_load_key() {
  
  return load_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrphanedLoadIdentifier::release_load_key() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.OrphanedLoadIdentifier.load_key)
  return load_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrphanedLoadIdentifier::set_allocated_load_key(std::string* load_key) {
  if (load_key != nullptr) {
    
  } else {
    
  }
  load_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), load_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.OrphanedLoadIdentifier.load_key)
}

// string load_balancer_id = 2;
inline void OrphanedLoadIdentifier::clear_load_balancer_id() {
  load_balancer_id_.ClearToEmpty();
}
inline const std::string& OrphanedLoadIdentifier::load_balancer_id() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.OrphanedLoadIdentifier.load_balancer_id)
  return _internal_load_balancer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrphanedLoadIdentifier::set_load_balancer_id(ArgT0&& arg0, ArgT... args) {
 
 load_balancer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.lb.v1.OrphanedLoadIdentifier.load_balancer_id)
}
inline std::string* OrphanedLoadIdentifier::mutable_load_balancer_id() {
  std::string* _s = _internal_mutable_load_balancer_id();
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.OrphanedLoadIdentifier.load_balancer_id)
  return _s;
}
inline const std::string& OrphanedLoadIdentifier::_internal_load_balancer_id() const {
  return load_balancer_id_.Get();
}
inline void OrphanedLoadIdentifier::_internal_set_load_balancer_id(const std::string& value) {
  
  load_balancer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrphanedLoadIdentifier::_internal_mutable_load_balancer_id() {
  
  return load_balancer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrphanedLoadIdentifier::release_load_balancer_id() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.OrphanedLoadIdentifier.load_balancer_id)
  return load_balancer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrphanedLoadIdentifier::set_allocated_load_balancer_id(std::string* load_balancer_id) {
  if (load_balancer_id != nullptr) {
    
  } else {
    
  }
  load_balancer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), load_balancer_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.OrphanedLoadIdentifier.load_balancer_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace lb
}  // namespace grpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier>() {
  return ::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_load_5freporter_2eproto
