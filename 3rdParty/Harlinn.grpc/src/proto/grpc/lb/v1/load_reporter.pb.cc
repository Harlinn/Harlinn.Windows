// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: load_reporter.proto

#include "load_reporter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace grpc {
namespace lb {
namespace v1 {
constexpr LoadReportRequest::LoadReportRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : initial_request_(nullptr){}
struct LoadReportRequestDefaultTypeInternal {
  constexpr LoadReportRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadReportRequestDefaultTypeInternal() {}
  union {
    LoadReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadReportRequestDefaultTypeInternal _LoadReportRequest_default_instance_;
constexpr InitialLoadReportRequest::InitialLoadReportRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : load_balanced_hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , load_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , load_report_interval_(nullptr){}
struct InitialLoadReportRequestDefaultTypeInternal {
  constexpr InitialLoadReportRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitialLoadReportRequestDefaultTypeInternal() {}
  union {
    InitialLoadReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitialLoadReportRequestDefaultTypeInternal _InitialLoadReportRequest_default_instance_;
constexpr LoadReportResponse::LoadReportResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : load_()
  , initial_response_(nullptr)
  , load_balancing_feedback_(nullptr){}
struct LoadReportResponseDefaultTypeInternal {
  constexpr LoadReportResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadReportResponseDefaultTypeInternal() {}
  union {
    LoadReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadReportResponseDefaultTypeInternal _LoadReportResponse_default_instance_;
constexpr InitialLoadReportResponse::InitialLoadReportResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : load_balancer_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_version_(int64_t{0})
  , implementation_id_(0)
{}
struct InitialLoadReportResponseDefaultTypeInternal {
  constexpr InitialLoadReportResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitialLoadReportResponseDefaultTypeInternal() {}
  union {
    InitialLoadReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitialLoadReportResponseDefaultTypeInternal _InitialLoadReportResponse_default_instance_;
constexpr LoadBalancingFeedback::LoadBalancingFeedback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_utilization_(0)
  , calls_per_second_(0)
  , errors_per_second_(0){}
struct LoadBalancingFeedbackDefaultTypeInternal {
  constexpr LoadBalancingFeedbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadBalancingFeedbackDefaultTypeInternal() {}
  union {
    LoadBalancingFeedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadBalancingFeedbackDefaultTypeInternal _LoadBalancingFeedback_default_instance_;
constexpr Load::Load(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metric_data_()
  , load_balance_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_latency_(nullptr)
  , num_calls_started_(int64_t{0})
  , num_calls_finished_without_error_(int64_t{0})
  , num_calls_finished_with_error_(int64_t{0})
  , total_bytes_sent_(int64_t{0})
  , total_bytes_received_(int64_t{0})
  , num_calls_finished_with_server_error_(int64_t{0})
  , _oneof_case_{}{}
struct LoadDefaultTypeInternal {
  constexpr LoadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadDefaultTypeInternal() {}
  union {
    Load _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadDefaultTypeInternal _Load_default_instance_;
constexpr CallMetricData::CallMetricData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metric_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , num_calls_finished_with_metric_(int64_t{0})
  , total_metric_value_(0){}
struct CallMetricDataDefaultTypeInternal {
  constexpr CallMetricDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CallMetricDataDefaultTypeInternal() {}
  union {
    CallMetricData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CallMetricDataDefaultTypeInternal _CallMetricData_default_instance_;
constexpr OrphanedLoadIdentifier::OrphanedLoadIdentifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : load_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , load_balancer_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OrphanedLoadIdentifierDefaultTypeInternal {
  constexpr OrphanedLoadIdentifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrphanedLoadIdentifierDefaultTypeInternal() {}
  union {
    OrphanedLoadIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrphanedLoadIdentifierDefaultTypeInternal _OrphanedLoadIdentifier_default_instance_;
}  // namespace v1
}  // namespace lb
}  // namespace grpc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_load_5freporter_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_load_5freporter_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_load_5freporter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_load_5freporter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadReportRequest, initial_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadReportRequest, load_balanced_hostname_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadReportRequest, load_key_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadReportRequest, load_report_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadReportResponse, initial_response_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadReportResponse, load_balancing_feedback_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadReportResponse, load_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadReportResponse, load_balancer_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadReportResponse, implementation_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadReportResponse, server_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadBalancingFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadBalancingFeedback, server_utilization_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadBalancingFeedback, calls_per_second_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadBalancingFeedback, errors_per_second_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, load_balance_tag_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, user_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, client_ip_address_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, num_calls_started_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, num_calls_finished_without_error_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, num_calls_finished_with_error_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, num_calls_finished_with_server_error_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, total_bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, total_bytes_received_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, total_latency_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, metric_data_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, in_progress_report_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Load, orphaned_load_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::CallMetricData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::CallMetricData, metric_name_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::CallMetricData, num_calls_finished_with_metric_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::CallMetricData, total_metric_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::OrphanedLoadIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::OrphanedLoadIdentifier, load_key_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::OrphanedLoadIdentifier, load_balancer_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpc::lb::v1::LoadReportRequest)},
  { 6, -1, sizeof(::grpc::lb::v1::InitialLoadReportRequest)},
  { 14, -1, sizeof(::grpc::lb::v1::LoadReportResponse)},
  { 22, -1, sizeof(::grpc::lb::v1::InitialLoadReportResponse)},
  { 30, -1, sizeof(::grpc::lb::v1::LoadBalancingFeedback)},
  { 38, -1, sizeof(::grpc::lb::v1::Load)},
  { 60, -1, sizeof(::grpc::lb::v1::CallMetricData)},
  { 68, -1, sizeof(::grpc::lb::v1::OrphanedLoadIdentifier)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_LoadReportRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_InitialLoadReportRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_LoadReportResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_InitialLoadReportResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_LoadBalancingFeedback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_Load_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_CallMetricData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_OrphanedLoadIdentifier_default_instance_),
};

const char descriptor_table_protodef_load_5freporter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023load_reporter.proto\022\ngrpc.lb.v1\032\036googl"
  "e/protobuf/duration.proto\"R\n\021LoadReportR"
  "equest\022=\n\017initial_request\030\001 \001(\0132$.grpc.l"
  "b.v1.InitialLoadReportRequest\"\205\001\n\030Initia"
  "lLoadReportRequest\022\036\n\026load_balanced_host"
  "name\030\001 \001(\t\022\020\n\010load_key\030\002 \001(\014\0227\n\024load_rep"
  "ort_interval\030\003 \001(\0132\031.google.protobuf.Dur"
  "ation\"\271\001\n\022LoadReportResponse\022\?\n\020initial_"
  "response\030\001 \001(\0132%.grpc.lb.v1.InitialLoadR"
  "eportResponse\022B\n\027load_balancing_feedback"
  "\030\002 \001(\0132!.grpc.lb.v1.LoadBalancingFeedbac"
  "k\022\036\n\004load\030\003 \003(\0132\020.grpc.lb.v1.Load\"\365\001\n\031In"
  "itialLoadReportResponse\022\030\n\020load_balancer"
  "_id\030\001 \001(\t\022Y\n\021implementation_id\030\002 \001(\0162>.g"
  "rpc.lb.v1.InitialLoadReportResponse.Impl"
  "ementationIdentifier\022\026\n\016server_version\030\003"
  " \001(\003\"K\n\030ImplementationIdentifier\022\024\n\020IMPL"
  "_UNSPECIFIED\020\000\022\007\n\003CPP\020\001\022\010\n\004JAVA\020\002\022\006\n\002GO\020"
  "\003\"h\n\025LoadBalancingFeedback\022\032\n\022server_uti"
  "lization\030\001 \001(\002\022\030\n\020calls_per_second\030\002 \001(\002"
  "\022\031\n\021errors_per_second\030\003 \001(\002\"\313\004\n\004Load\022\030\n\020"
  "load_balance_tag\030\001 \001(\t\022\017\n\007user_id\030\003 \001(\t\022"
  "\031\n\021client_ip_address\030\017 \001(\014\022\031\n\021num_calls_"
  "started\030\004 \001(\003\022\037\n\025num_calls_in_progress\030\005"
  " \001(\003H\000\022(\n num_calls_finished_without_err"
  "or\030\006 \001(\003\022%\n\035num_calls_finished_with_erro"
  "r\030\007 \001(\003\022,\n$num_calls_finished_with_serve"
  "r_error\030\020 \001(\003\022\030\n\020total_bytes_sent\030\010 \001(\003\022"
  "\034\n\024total_bytes_received\030\t \001(\003\0220\n\rtotal_l"
  "atency\030\n \001(\0132\031.google.protobuf.Duration\022"
  "/\n\013metric_data\030\013 \003(\0132\032.grpc.lb.v1.CallMe"
  "tricData\022\026\n\010load_key\030\014 \001(\014B\002\030\001H\001\022\032\n\020load"
  "_key_unknown\030\r \001(\010H\001\022F\n\030orphaned_load_id"
  "entifier\030\016 \001(\0132\".grpc.lb.v1.OrphanedLoad"
  "IdentifierH\001B\024\n\022in_progress_reportB\017\n\ror"
  "phaned_loadJ\004\010\002\020\003\"i\n\016CallMetricData\022\023\n\013m"
  "etric_name\030\001 \001(\t\022&\n\036num_calls_finished_w"
  "ith_metric\030\002 \001(\003\022\032\n\022total_metric_value\030\003"
  " \001(\001\"D\n\026OrphanedLoadIdentifier\022\020\n\010load_k"
  "ey\030\001 \001(\014\022\030\n\020load_balancer_id\030\002 \001(\t2a\n\014Lo"
  "adReporter\022Q\n\nReportLoad\022\035.grpc.lb.v1.Lo"
  "adReportRequest\032\036.grpc.lb.v1.LoadReportR"
  "esponse\"\000(\0010\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_load_5freporter_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_load_5freporter_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_load_5freporter_2eproto = {
  false, false, 1701, descriptor_table_protodef_load_5freporter_2eproto, "load_reporter.proto", 
  &descriptor_table_load_5freporter_2eproto_once, descriptor_table_load_5freporter_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_load_5freporter_2eproto::offsets,
  file_level_metadata_load_5freporter_2eproto, file_level_enum_descriptors_load_5freporter_2eproto, file_level_service_descriptors_load_5freporter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_load_5freporter_2eproto_getter() {
  return &descriptor_table_load_5freporter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_load_5freporter_2eproto(&descriptor_table_load_5freporter_2eproto);
namespace grpc {
namespace lb {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InitialLoadReportResponse_ImplementationIdentifier_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_load_5freporter_2eproto);
  return file_level_enum_descriptors_load_5freporter_2eproto[0];
}
bool InitialLoadReportResponse_ImplementationIdentifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InitialLoadReportResponse_ImplementationIdentifier InitialLoadReportResponse::IMPL_UNSPECIFIED;
constexpr InitialLoadReportResponse_ImplementationIdentifier InitialLoadReportResponse::CPP;
constexpr InitialLoadReportResponse_ImplementationIdentifier InitialLoadReportResponse::JAVA;
constexpr InitialLoadReportResponse_ImplementationIdentifier InitialLoadReportResponse::GO;
constexpr InitialLoadReportResponse_ImplementationIdentifier InitialLoadReportResponse::ImplementationIdentifier_MIN;
constexpr InitialLoadReportResponse_ImplementationIdentifier InitialLoadReportResponse::ImplementationIdentifier_MAX;
constexpr int InitialLoadReportResponse::ImplementationIdentifier_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class LoadReportRequest::_Internal {
 public:
  static const ::grpc::lb::v1::InitialLoadReportRequest& initial_request(const LoadReportRequest* msg);
};

const ::grpc::lb::v1::InitialLoadReportRequest&
LoadReportRequest::_Internal::initial_request(const LoadReportRequest* msg) {
  return *msg->initial_request_;
}
LoadReportRequest::LoadReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.LoadReportRequest)
}
LoadReportRequest::LoadReportRequest(const LoadReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_initial_request()) {
    initial_request_ = new ::grpc::lb::v1::InitialLoadReportRequest(*from.initial_request_);
  } else {
    initial_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.LoadReportRequest)
}

inline void LoadReportRequest::SharedCtor() {
initial_request_ = nullptr;
}

LoadReportRequest::~LoadReportRequest() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.LoadReportRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete initial_request_;
}

void LoadReportRequest::ArenaDtor(void* object) {
  LoadReportRequest* _this = reinterpret_cast< LoadReportRequest* >(object);
  (void)_this;
}
void LoadReportRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.LoadReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && initial_request_ != nullptr) {
    delete initial_request_;
  }
  initial_request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.lb.v1.InitialLoadReportRequest initial_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadReportRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.LoadReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.lb.v1.InitialLoadReportRequest initial_request = 1;
  if (this->_internal_has_initial_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::initial_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.LoadReportRequest)
  return target;
}

size_t LoadReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.LoadReportRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.lb.v1.InitialLoadReportRequest initial_request = 1;
  if (this->_internal_has_initial_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadReportRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadReportRequest::GetClassData() const { return &_class_data_; }

void LoadReportRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LoadReportRequest *>(to)->MergeFrom(
      static_cast<const LoadReportRequest &>(from));
}


void LoadReportRequest::MergeFrom(const LoadReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.LoadReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_initial_request()) {
    _internal_mutable_initial_request()->::grpc::lb::v1::InitialLoadReportRequest::MergeFrom(from._internal_initial_request());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadReportRequest::CopyFrom(const LoadReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.LoadReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadReportRequest::IsInitialized() const {
  return true;
}

void LoadReportRequest::InternalSwap(LoadReportRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(initial_request_, other->initial_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadReportRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_load_5freporter_2eproto_getter, &descriptor_table_load_5freporter_2eproto_once,
      file_level_metadata_load_5freporter_2eproto[0]);
}

// ===================================================================

class InitialLoadReportRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& load_report_interval(const InitialLoadReportRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
InitialLoadReportRequest::_Internal::load_report_interval(const InitialLoadReportRequest* msg) {
  return *msg->load_report_interval_;
}
void InitialLoadReportRequest::clear_load_report_interval() {
  if (GetArenaForAllocation() == nullptr && load_report_interval_ != nullptr) {
    delete load_report_interval_;
  }
  load_report_interval_ = nullptr;
}
InitialLoadReportRequest::InitialLoadReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.InitialLoadReportRequest)
}
InitialLoadReportRequest::InitialLoadReportRequest(const InitialLoadReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  load_balanced_hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_load_balanced_hostname().empty()) {
    load_balanced_hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_load_balanced_hostname(), 
      GetArenaForAllocation());
  }
  load_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_load_key().empty()) {
    load_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_load_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_load_report_interval()) {
    load_report_interval_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.load_report_interval_);
  } else {
    load_report_interval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.InitialLoadReportRequest)
}

inline void InitialLoadReportRequest::SharedCtor() {
load_balanced_hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
load_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
load_report_interval_ = nullptr;
}

InitialLoadReportRequest::~InitialLoadReportRequest() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.InitialLoadReportRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitialLoadReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  load_balanced_hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  load_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete load_report_interval_;
}

void InitialLoadReportRequest::ArenaDtor(void* object) {
  InitialLoadReportRequest* _this = reinterpret_cast< InitialLoadReportRequest* >(object);
  (void)_this;
}
void InitialLoadReportRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitialLoadReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitialLoadReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.InitialLoadReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_balanced_hostname_.ClearToEmpty();
  load_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && load_report_interval_ != nullptr) {
    delete load_report_interval_;
  }
  load_report_interval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitialLoadReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string load_balanced_hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_load_balanced_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.lb.v1.InitialLoadReportRequest.load_balanced_hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes load_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_load_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration load_report_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_report_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitialLoadReportRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.InitialLoadReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string load_balanced_hostname = 1;
  if (!this->_internal_load_balanced_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_balanced_hostname().data(), static_cast<int>(this->_internal_load_balanced_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.lb.v1.InitialLoadReportRequest.load_balanced_hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_load_balanced_hostname(), target);
  }

  // bytes load_key = 2;
  if (!this->_internal_load_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_load_key(), target);
  }

  // .google.protobuf.Duration load_report_interval = 3;
  if (this->_internal_has_load_report_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::load_report_interval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.InitialLoadReportRequest)
  return target;
}

size_t InitialLoadReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.InitialLoadReportRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string load_balanced_hostname = 1;
  if (!this->_internal_load_balanced_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_balanced_hostname());
  }

  // bytes load_key = 2;
  if (!this->_internal_load_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_load_key());
  }

  // .google.protobuf.Duration load_report_interval = 3;
  if (this->_internal_has_load_report_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *load_report_interval_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitialLoadReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitialLoadReportRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitialLoadReportRequest::GetClassData() const { return &_class_data_; }

void InitialLoadReportRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InitialLoadReportRequest *>(to)->MergeFrom(
      static_cast<const InitialLoadReportRequest &>(from));
}


void InitialLoadReportRequest::MergeFrom(const InitialLoadReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.InitialLoadReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_load_balanced_hostname().empty()) {
    _internal_set_load_balanced_hostname(from._internal_load_balanced_hostname());
  }
  if (!from._internal_load_key().empty()) {
    _internal_set_load_key(from._internal_load_key());
  }
  if (from._internal_has_load_report_interval()) {
    _internal_mutable_load_report_interval()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_load_report_interval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitialLoadReportRequest::CopyFrom(const InitialLoadReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.InitialLoadReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialLoadReportRequest::IsInitialized() const {
  return true;
}

void InitialLoadReportRequest::InternalSwap(InitialLoadReportRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &load_balanced_hostname_, GetArenaForAllocation(),
      &other->load_balanced_hostname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &load_key_, GetArenaForAllocation(),
      &other->load_key_, other->GetArenaForAllocation()
  );
  swap(load_report_interval_, other->load_report_interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialLoadReportRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_load_5freporter_2eproto_getter, &descriptor_table_load_5freporter_2eproto_once,
      file_level_metadata_load_5freporter_2eproto[1]);
}

// ===================================================================

class LoadReportResponse::_Internal {
 public:
  static const ::grpc::lb::v1::InitialLoadReportResponse& initial_response(const LoadReportResponse* msg);
  static const ::grpc::lb::v1::LoadBalancingFeedback& load_balancing_feedback(const LoadReportResponse* msg);
};

const ::grpc::lb::v1::InitialLoadReportResponse&
LoadReportResponse::_Internal::initial_response(const LoadReportResponse* msg) {
  return *msg->initial_response_;
}
const ::grpc::lb::v1::LoadBalancingFeedback&
LoadReportResponse::_Internal::load_balancing_feedback(const LoadReportResponse* msg) {
  return *msg->load_balancing_feedback_;
}
LoadReportResponse::LoadReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  load_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.LoadReportResponse)
}
LoadReportResponse::LoadReportResponse(const LoadReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      load_(from.load_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_initial_response()) {
    initial_response_ = new ::grpc::lb::v1::InitialLoadReportResponse(*from.initial_response_);
  } else {
    initial_response_ = nullptr;
  }
  if (from._internal_has_load_balancing_feedback()) {
    load_balancing_feedback_ = new ::grpc::lb::v1::LoadBalancingFeedback(*from.load_balancing_feedback_);
  } else {
    load_balancing_feedback_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.LoadReportResponse)
}

inline void LoadReportResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&initial_response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&load_balancing_feedback_) -
    reinterpret_cast<char*>(&initial_response_)) + sizeof(load_balancing_feedback_));
}

LoadReportResponse::~LoadReportResponse() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.LoadReportResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete initial_response_;
  if (this != internal_default_instance()) delete load_balancing_feedback_;
}

void LoadReportResponse::ArenaDtor(void* object) {
  LoadReportResponse* _this = reinterpret_cast< LoadReportResponse* >(object);
  (void)_this;
}
void LoadReportResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.LoadReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_.Clear();
  if (GetArenaForAllocation() == nullptr && initial_response_ != nullptr) {
    delete initial_response_;
  }
  initial_response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && load_balancing_feedback_ != nullptr) {
    delete load_balancing_feedback_;
  }
  load_balancing_feedback_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.lb.v1.InitialLoadReportResponse initial_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.lb.v1.LoadBalancingFeedback load_balancing_feedback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_balancing_feedback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .grpc.lb.v1.Load load = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_load(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadReportResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.LoadReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.lb.v1.InitialLoadReportResponse initial_response = 1;
  if (this->_internal_has_initial_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::initial_response(this), target, stream);
  }

  // .grpc.lb.v1.LoadBalancingFeedback load_balancing_feedback = 2;
  if (this->_internal_has_load_balancing_feedback()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::load_balancing_feedback(this), target, stream);
  }

  // repeated .grpc.lb.v1.Load load = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_load_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_load(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.LoadReportResponse)
  return target;
}

size_t LoadReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.LoadReportResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.lb.v1.Load load = 3;
  total_size += 1UL * this->_internal_load_size();
  for (const auto& msg : this->load_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .grpc.lb.v1.InitialLoadReportResponse initial_response = 1;
  if (this->_internal_has_initial_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_response_);
  }

  // .grpc.lb.v1.LoadBalancingFeedback load_balancing_feedback = 2;
  if (this->_internal_has_load_balancing_feedback()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *load_balancing_feedback_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadReportResponse::GetClassData() const { return &_class_data_; }

void LoadReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LoadReportResponse *>(to)->MergeFrom(
      static_cast<const LoadReportResponse &>(from));
}


void LoadReportResponse::MergeFrom(const LoadReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.LoadReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  load_.MergeFrom(from.load_);
  if (from._internal_has_initial_response()) {
    _internal_mutable_initial_response()->::grpc::lb::v1::InitialLoadReportResponse::MergeFrom(from._internal_initial_response());
  }
  if (from._internal_has_load_balancing_feedback()) {
    _internal_mutable_load_balancing_feedback()->::grpc::lb::v1::LoadBalancingFeedback::MergeFrom(from._internal_load_balancing_feedback());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadReportResponse::CopyFrom(const LoadReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.LoadReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadReportResponse::IsInitialized() const {
  return true;
}

void LoadReportResponse::InternalSwap(LoadReportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  load_.InternalSwap(&other->load_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadReportResponse, load_balancing_feedback_)
      + sizeof(LoadReportResponse::load_balancing_feedback_)
      - PROTOBUF_FIELD_OFFSET(LoadReportResponse, initial_response_)>(
          reinterpret_cast<char*>(&initial_response_),
          reinterpret_cast<char*>(&other->initial_response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadReportResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_load_5freporter_2eproto_getter, &descriptor_table_load_5freporter_2eproto_once,
      file_level_metadata_load_5freporter_2eproto[2]);
}

// ===================================================================

class InitialLoadReportResponse::_Internal {
 public:
};

InitialLoadReportResponse::InitialLoadReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.InitialLoadReportResponse)
}
InitialLoadReportResponse::InitialLoadReportResponse(const InitialLoadReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  load_balancer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_load_balancer_id().empty()) {
    load_balancer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_load_balancer_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&server_version_, &from.server_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&implementation_id_) -
    reinterpret_cast<char*>(&server_version_)) + sizeof(implementation_id_));
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.InitialLoadReportResponse)
}

inline void InitialLoadReportResponse::SharedCtor() {
load_balancer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&implementation_id_) -
    reinterpret_cast<char*>(&server_version_)) + sizeof(implementation_id_));
}

InitialLoadReportResponse::~InitialLoadReportResponse() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.InitialLoadReportResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitialLoadReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  load_balancer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitialLoadReportResponse::ArenaDtor(void* object) {
  InitialLoadReportResponse* _this = reinterpret_cast< InitialLoadReportResponse* >(object);
  (void)_this;
}
void InitialLoadReportResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitialLoadReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitialLoadReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.InitialLoadReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_balancer_id_.ClearToEmpty();
  ::memset(&server_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&implementation_id_) -
      reinterpret_cast<char*>(&server_version_)) + sizeof(implementation_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitialLoadReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string load_balancer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_load_balancer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.lb.v1.InitialLoadReportResponse.load_balancer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.lb.v1.InitialLoadReportResponse.ImplementationIdentifier implementation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_implementation_id(static_cast<::grpc::lb::v1::InitialLoadReportResponse_ImplementationIdentifier>(val));
        } else goto handle_unusual;
        continue;
      // int64 server_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitialLoadReportResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.InitialLoadReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string load_balancer_id = 1;
  if (!this->_internal_load_balancer_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_balancer_id().data(), static_cast<int>(this->_internal_load_balancer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.lb.v1.InitialLoadReportResponse.load_balancer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_load_balancer_id(), target);
  }

  // .grpc.lb.v1.InitialLoadReportResponse.ImplementationIdentifier implementation_id = 2;
  if (this->_internal_implementation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_implementation_id(), target);
  }

  // int64 server_version = 3;
  if (this->_internal_server_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_server_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.InitialLoadReportResponse)
  return target;
}

size_t InitialLoadReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.InitialLoadReportResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string load_balancer_id = 1;
  if (!this->_internal_load_balancer_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_balancer_id());
  }

  // int64 server_version = 3;
  if (this->_internal_server_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_server_version());
  }

  // .grpc.lb.v1.InitialLoadReportResponse.ImplementationIdentifier implementation_id = 2;
  if (this->_internal_implementation_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_implementation_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitialLoadReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitialLoadReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitialLoadReportResponse::GetClassData() const { return &_class_data_; }

void InitialLoadReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InitialLoadReportResponse *>(to)->MergeFrom(
      static_cast<const InitialLoadReportResponse &>(from));
}


void InitialLoadReportResponse::MergeFrom(const InitialLoadReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.InitialLoadReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_load_balancer_id().empty()) {
    _internal_set_load_balancer_id(from._internal_load_balancer_id());
  }
  if (from._internal_server_version() != 0) {
    _internal_set_server_version(from._internal_server_version());
  }
  if (from._internal_implementation_id() != 0) {
    _internal_set_implementation_id(from._internal_implementation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitialLoadReportResponse::CopyFrom(const InitialLoadReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.InitialLoadReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialLoadReportResponse::IsInitialized() const {
  return true;
}

void InitialLoadReportResponse::InternalSwap(InitialLoadReportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &load_balancer_id_, GetArenaForAllocation(),
      &other->load_balancer_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitialLoadReportResponse, implementation_id_)
      + sizeof(InitialLoadReportResponse::implementation_id_)
      - PROTOBUF_FIELD_OFFSET(InitialLoadReportResponse, server_version_)>(
          reinterpret_cast<char*>(&server_version_),
          reinterpret_cast<char*>(&other->server_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialLoadReportResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_load_5freporter_2eproto_getter, &descriptor_table_load_5freporter_2eproto_once,
      file_level_metadata_load_5freporter_2eproto[3]);
}

// ===================================================================

class LoadBalancingFeedback::_Internal {
 public:
};

LoadBalancingFeedback::LoadBalancingFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.LoadBalancingFeedback)
}
LoadBalancingFeedback::LoadBalancingFeedback(const LoadBalancingFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_utilization_, &from.server_utilization_,
    static_cast<size_t>(reinterpret_cast<char*>(&errors_per_second_) -
    reinterpret_cast<char*>(&server_utilization_)) + sizeof(errors_per_second_));
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.LoadBalancingFeedback)
}

inline void LoadBalancingFeedback::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_utilization_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errors_per_second_) -
    reinterpret_cast<char*>(&server_utilization_)) + sizeof(errors_per_second_));
}

LoadBalancingFeedback::~LoadBalancingFeedback() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.LoadBalancingFeedback)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadBalancingFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoadBalancingFeedback::ArenaDtor(void* object) {
  LoadBalancingFeedback* _this = reinterpret_cast< LoadBalancingFeedback* >(object);
  (void)_this;
}
void LoadBalancingFeedback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadBalancingFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadBalancingFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.LoadBalancingFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_utilization_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errors_per_second_) -
      reinterpret_cast<char*>(&server_utilization_)) + sizeof(errors_per_second_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadBalancingFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float server_utilization = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          server_utilization_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float calls_per_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          calls_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float errors_per_second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          errors_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadBalancingFeedback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.LoadBalancingFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float server_utilization = 1;
  if (!(this->_internal_server_utilization() <= 0 && this->_internal_server_utilization() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_server_utilization(), target);
  }

  // float calls_per_second = 2;
  if (!(this->_internal_calls_per_second() <= 0 && this->_internal_calls_per_second() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_calls_per_second(), target);
  }

  // float errors_per_second = 3;
  if (!(this->_internal_errors_per_second() <= 0 && this->_internal_errors_per_second() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_errors_per_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.LoadBalancingFeedback)
  return target;
}

size_t LoadBalancingFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.LoadBalancingFeedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float server_utilization = 1;
  if (!(this->_internal_server_utilization() <= 0 && this->_internal_server_utilization() >= 0)) {
    total_size += 1 + 4;
  }

  // float calls_per_second = 2;
  if (!(this->_internal_calls_per_second() <= 0 && this->_internal_calls_per_second() >= 0)) {
    total_size += 1 + 4;
  }

  // float errors_per_second = 3;
  if (!(this->_internal_errors_per_second() <= 0 && this->_internal_errors_per_second() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadBalancingFeedback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadBalancingFeedback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadBalancingFeedback::GetClassData() const { return &_class_data_; }

void LoadBalancingFeedback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LoadBalancingFeedback *>(to)->MergeFrom(
      static_cast<const LoadBalancingFeedback &>(from));
}


void LoadBalancingFeedback::MergeFrom(const LoadBalancingFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.LoadBalancingFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_server_utilization() <= 0 && from._internal_server_utilization() >= 0)) {
    _internal_set_server_utilization(from._internal_server_utilization());
  }
  if (!(from._internal_calls_per_second() <= 0 && from._internal_calls_per_second() >= 0)) {
    _internal_set_calls_per_second(from._internal_calls_per_second());
  }
  if (!(from._internal_errors_per_second() <= 0 && from._internal_errors_per_second() >= 0)) {
    _internal_set_errors_per_second(from._internal_errors_per_second());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadBalancingFeedback::CopyFrom(const LoadBalancingFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.LoadBalancingFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadBalancingFeedback::IsInitialized() const {
  return true;
}

void LoadBalancingFeedback::InternalSwap(LoadBalancingFeedback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadBalancingFeedback, errors_per_second_)
      + sizeof(LoadBalancingFeedback::errors_per_second_)
      - PROTOBUF_FIELD_OFFSET(LoadBalancingFeedback, server_utilization_)>(
          reinterpret_cast<char*>(&server_utilization_),
          reinterpret_cast<char*>(&other->server_utilization_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadBalancingFeedback::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_load_5freporter_2eproto_getter, &descriptor_table_load_5freporter_2eproto_once,
      file_level_metadata_load_5freporter_2eproto[4]);
}

// ===================================================================

class Load::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& total_latency(const Load* msg);
  static const ::grpc::lb::v1::OrphanedLoadIdentifier& orphaned_load_identifier(const Load* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
Load::_Internal::total_latency(const Load* msg) {
  return *msg->total_latency_;
}
const ::grpc::lb::v1::OrphanedLoadIdentifier&
Load::_Internal::orphaned_load_identifier(const Load* msg) {
  return *msg->orphaned_load_.orphaned_load_identifier_;
}
void Load::clear_total_latency() {
  if (GetArenaForAllocation() == nullptr && total_latency_ != nullptr) {
    delete total_latency_;
  }
  total_latency_ = nullptr;
}
void Load::set_allocated_orphaned_load_identifier(::grpc::lb::v1::OrphanedLoadIdentifier* orphaned_load_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_orphaned_load();
  if (orphaned_load_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::grpc::lb::v1::OrphanedLoadIdentifier>::GetOwningArena(orphaned_load_identifier);
    if (message_arena != submessage_arena) {
      orphaned_load_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orphaned_load_identifier, submessage_arena);
    }
    set_has_orphaned_load_identifier();
    orphaned_load_.orphaned_load_identifier_ = orphaned_load_identifier;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.Load.orphaned_load_identifier)
}
Load::Load(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metric_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.Load)
}
Load::Load(const Load& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metric_data_(from.metric_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  load_balance_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_load_balance_tag().empty()) {
    load_balance_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_load_balance_tag(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  client_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_ip_address().empty()) {
    client_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_ip_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_total_latency()) {
    total_latency_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.total_latency_);
  } else {
    total_latency_ = nullptr;
  }
  ::memcpy(&num_calls_started_, &from.num_calls_started_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_calls_finished_with_server_error_) -
    reinterpret_cast<char*>(&num_calls_started_)) + sizeof(num_calls_finished_with_server_error_));
  clear_has_in_progress_report();
  switch (from.in_progress_report_case()) {
    case kNumCallsInProgress: {
      _internal_set_num_calls_in_progress(from._internal_num_calls_in_progress());
      break;
    }
    case IN_PROGRESS_REPORT_NOT_SET: {
      break;
    }
  }
  clear_has_orphaned_load();
  switch (from.orphaned_load_case()) {
    case kLoadKey: {
      _internal_set_load_key(from._internal_load_key());
      break;
    }
    case kLoadKeyUnknown: {
      _internal_set_load_key_unknown(from._internal_load_key_unknown());
      break;
    }
    case kOrphanedLoadIdentifier: {
      _internal_mutable_orphaned_load_identifier()->::grpc::lb::v1::OrphanedLoadIdentifier::MergeFrom(from._internal_orphaned_load_identifier());
      break;
    }
    case ORPHANED_LOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.Load)
}

inline void Load::SharedCtor() {
load_balance_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
client_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_latency_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_calls_finished_with_server_error_) -
    reinterpret_cast<char*>(&total_latency_)) + sizeof(num_calls_finished_with_server_error_));
clear_has_in_progress_report();
clear_has_orphaned_load();
}

Load::~Load() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.Load)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Load::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  load_balance_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete total_latency_;
  if (has_in_progress_report()) {
    clear_in_progress_report();
  }
  if (has_orphaned_load()) {
    clear_orphaned_load();
  }
}

void Load::ArenaDtor(void* object) {
  Load* _this = reinterpret_cast< Load* >(object);
  (void)_this;
}
void Load::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Load::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Load::clear_in_progress_report() {
// @@protoc_insertion_point(one_of_clear_start:grpc.lb.v1.Load)
  switch (in_progress_report_case()) {
    case kNumCallsInProgress: {
      // No need to clear
      break;
    }
    case IN_PROGRESS_REPORT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IN_PROGRESS_REPORT_NOT_SET;
}

void Load::clear_orphaned_load() {
// @@protoc_insertion_point(one_of_clear_start:grpc.lb.v1.Load)
  switch (orphaned_load_case()) {
    case kLoadKey: {
      orphaned_load_.load_key_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kLoadKeyUnknown: {
      // No need to clear
      break;
    }
    case kOrphanedLoadIdentifier: {
      if (GetArenaForAllocation() == nullptr) {
        delete orphaned_load_.orphaned_load_identifier_;
      }
      break;
    }
    case ORPHANED_LOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ORPHANED_LOAD_NOT_SET;
}


void Load::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.Load)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_data_.Clear();
  load_balance_tag_.ClearToEmpty();
  user_id_.ClearToEmpty();
  client_ip_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && total_latency_ != nullptr) {
    delete total_latency_;
  }
  total_latency_ = nullptr;
  ::memset(&num_calls_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_calls_finished_with_server_error_) -
      reinterpret_cast<char*>(&num_calls_started_)) + sizeof(num_calls_finished_with_server_error_));
  clear_in_progress_report();
  clear_orphaned_load();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Load::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string load_balance_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_load_balance_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.lb.v1.Load.load_balance_tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.lb.v1.Load.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_calls_started = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_calls_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_calls_in_progress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_num_calls_in_progress(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_calls_finished_without_error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num_calls_finished_without_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_calls_finished_with_error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_calls_finished_with_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_bytes_sent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          total_bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_bytes_received = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          total_bytes_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration total_latency = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .grpc.lb.v1.CallMetricData metric_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metric_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes load_key = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_load_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool load_key_unknown = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _internal_set_load_key_unknown(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.lb.v1.OrphanedLoadIdentifier orphaned_load_identifier = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_orphaned_load_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes client_ip_address = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_client_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_calls_finished_with_server_error = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          num_calls_finished_with_server_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Load::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.Load)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string load_balance_tag = 1;
  if (!this->_internal_load_balance_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_balance_tag().data(), static_cast<int>(this->_internal_load_balance_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.lb.v1.Load.load_balance_tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_load_balance_tag(), target);
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.lb.v1.Load.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // int64 num_calls_started = 4;
  if (this->_internal_num_calls_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_num_calls_started(), target);
  }

  // int64 num_calls_in_progress = 5;
  if (_internal_has_num_calls_in_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_calls_in_progress(), target);
  }

  // int64 num_calls_finished_without_error = 6;
  if (this->_internal_num_calls_finished_without_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_num_calls_finished_without_error(), target);
  }

  // int64 num_calls_finished_with_error = 7;
  if (this->_internal_num_calls_finished_with_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_num_calls_finished_with_error(), target);
  }

  // int64 total_bytes_sent = 8;
  if (this->_internal_total_bytes_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_total_bytes_sent(), target);
  }

  // int64 total_bytes_received = 9;
  if (this->_internal_total_bytes_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_total_bytes_received(), target);
  }

  // .google.protobuf.Duration total_latency = 10;
  if (this->_internal_has_total_latency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::total_latency(this), target, stream);
  }

  // repeated .grpc.lb.v1.CallMetricData metric_data = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metric_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_metric_data(i), target, stream);
  }

  // bytes load_key = 12 [deprecated = true];
  if (_internal_has_load_key()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_load_key(), target);
  }

  // bool load_key_unknown = 13;
  if (_internal_has_load_key_unknown()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_load_key_unknown(), target);
  }

  // .grpc.lb.v1.OrphanedLoadIdentifier orphaned_load_identifier = 14;
  if (_internal_has_orphaned_load_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::orphaned_load_identifier(this), target, stream);
  }

  // bytes client_ip_address = 15;
  if (!this->_internal_client_ip_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_client_ip_address(), target);
  }

  // int64 num_calls_finished_with_server_error = 16;
  if (this->_internal_num_calls_finished_with_server_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_num_calls_finished_with_server_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.Load)
  return target;
}

size_t Load::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.Load)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.lb.v1.CallMetricData metric_data = 11;
  total_size += 1UL * this->_internal_metric_data_size();
  for (const auto& msg : this->metric_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string load_balance_tag = 1;
  if (!this->_internal_load_balance_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_balance_tag());
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes client_ip_address = 15;
  if (!this->_internal_client_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_client_ip_address());
  }

  // .google.protobuf.Duration total_latency = 10;
  if (this->_internal_has_total_latency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_latency_);
  }

  // int64 num_calls_started = 4;
  if (this->_internal_num_calls_started() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_calls_started());
  }

  // int64 num_calls_finished_without_error = 6;
  if (this->_internal_num_calls_finished_without_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_calls_finished_without_error());
  }

  // int64 num_calls_finished_with_error = 7;
  if (this->_internal_num_calls_finished_with_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_calls_finished_with_error());
  }

  // int64 total_bytes_sent = 8;
  if (this->_internal_total_bytes_sent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_bytes_sent());
  }

  // int64 total_bytes_received = 9;
  if (this->_internal_total_bytes_received() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_bytes_received());
  }

  // int64 num_calls_finished_with_server_error = 16;
  if (this->_internal_num_calls_finished_with_server_error() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_calls_finished_with_server_error());
  }

  switch (in_progress_report_case()) {
    // int64 num_calls_in_progress = 5;
    case kNumCallsInProgress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_num_calls_in_progress());
      break;
    }
    case IN_PROGRESS_REPORT_NOT_SET: {
      break;
    }
  }
  switch (orphaned_load_case()) {
    // bytes load_key = 12 [deprecated = true];
    case kLoadKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_load_key());
      break;
    }
    // bool load_key_unknown = 13;
    case kLoadKeyUnknown: {
      total_size += 1 + 1;
      break;
    }
    // .grpc.lb.v1.OrphanedLoadIdentifier orphaned_load_identifier = 14;
    case kOrphanedLoadIdentifier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orphaned_load_.orphaned_load_identifier_);
      break;
    }
    case ORPHANED_LOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Load::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Load::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Load::GetClassData() const { return &_class_data_; }

void Load::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Load *>(to)->MergeFrom(
      static_cast<const Load &>(from));
}


void Load::MergeFrom(const Load& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.Load)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metric_data_.MergeFrom(from.metric_data_);
  if (!from._internal_load_balance_tag().empty()) {
    _internal_set_load_balance_tag(from._internal_load_balance_tag());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_client_ip_address().empty()) {
    _internal_set_client_ip_address(from._internal_client_ip_address());
  }
  if (from._internal_has_total_latency()) {
    _internal_mutable_total_latency()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_total_latency());
  }
  if (from._internal_num_calls_started() != 0) {
    _internal_set_num_calls_started(from._internal_num_calls_started());
  }
  if (from._internal_num_calls_finished_without_error() != 0) {
    _internal_set_num_calls_finished_without_error(from._internal_num_calls_finished_without_error());
  }
  if (from._internal_num_calls_finished_with_error() != 0) {
    _internal_set_num_calls_finished_with_error(from._internal_num_calls_finished_with_error());
  }
  if (from._internal_total_bytes_sent() != 0) {
    _internal_set_total_bytes_sent(from._internal_total_bytes_sent());
  }
  if (from._internal_total_bytes_received() != 0) {
    _internal_set_total_bytes_received(from._internal_total_bytes_received());
  }
  if (from._internal_num_calls_finished_with_server_error() != 0) {
    _internal_set_num_calls_finished_with_server_error(from._internal_num_calls_finished_with_server_error());
  }
  switch (from.in_progress_report_case()) {
    case kNumCallsInProgress: {
      _internal_set_num_calls_in_progress(from._internal_num_calls_in_progress());
      break;
    }
    case IN_PROGRESS_REPORT_NOT_SET: {
      break;
    }
  }
  switch (from.orphaned_load_case()) {
    case kLoadKey: {
      _internal_set_load_key(from._internal_load_key());
      break;
    }
    case kLoadKeyUnknown: {
      _internal_set_load_key_unknown(from._internal_load_key_unknown());
      break;
    }
    case kOrphanedLoadIdentifier: {
      _internal_mutable_orphaned_load_identifier()->::grpc::lb::v1::OrphanedLoadIdentifier::MergeFrom(from._internal_orphaned_load_identifier());
      break;
    }
    case ORPHANED_LOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Load::CopyFrom(const Load& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Load::IsInitialized() const {
  return true;
}

void Load::InternalSwap(Load* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metric_data_.InternalSwap(&other->metric_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &load_balance_tag_, GetArenaForAllocation(),
      &other->load_balance_tag_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_ip_address_, GetArenaForAllocation(),
      &other->client_ip_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Load, num_calls_finished_with_server_error_)
      + sizeof(Load::num_calls_finished_with_server_error_)
      - PROTOBUF_FIELD_OFFSET(Load, total_latency_)>(
          reinterpret_cast<char*>(&total_latency_),
          reinterpret_cast<char*>(&other->total_latency_));
  swap(in_progress_report_, other->in_progress_report_);
  swap(orphaned_load_, other->orphaned_load_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Load::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_load_5freporter_2eproto_getter, &descriptor_table_load_5freporter_2eproto_once,
      file_level_metadata_load_5freporter_2eproto[5]);
}

// ===================================================================

class CallMetricData::_Internal {
 public:
};

CallMetricData::CallMetricData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.CallMetricData)
}
CallMetricData::CallMetricData(const CallMetricData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metric_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metric_name().empty()) {
    metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metric_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&num_calls_finished_with_metric_, &from.num_calls_finished_with_metric_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_metric_value_) -
    reinterpret_cast<char*>(&num_calls_finished_with_metric_)) + sizeof(total_metric_value_));
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.CallMetricData)
}

inline void CallMetricData::SharedCtor() {
metric_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_calls_finished_with_metric_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_metric_value_) -
    reinterpret_cast<char*>(&num_calls_finished_with_metric_)) + sizeof(total_metric_value_));
}

CallMetricData::~CallMetricData() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.CallMetricData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CallMetricData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metric_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CallMetricData::ArenaDtor(void* object) {
  CallMetricData* _this = reinterpret_cast< CallMetricData* >(object);
  (void)_this;
}
void CallMetricData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallMetricData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CallMetricData::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.CallMetricData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_name_.ClearToEmpty();
  ::memset(&num_calls_finished_with_metric_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_metric_value_) -
      reinterpret_cast<char*>(&num_calls_finished_with_metric_)) + sizeof(total_metric_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallMetricData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string metric_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_metric_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.lb.v1.CallMetricData.metric_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_calls_finished_with_metric = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_calls_finished_with_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double total_metric_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          total_metric_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CallMetricData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.CallMetricData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string metric_name = 1;
  if (!this->_internal_metric_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metric_name().data(), static_cast<int>(this->_internal_metric_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.lb.v1.CallMetricData.metric_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metric_name(), target);
  }

  // int64 num_calls_finished_with_metric = 2;
  if (this->_internal_num_calls_finished_with_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_calls_finished_with_metric(), target);
  }

  // double total_metric_value = 3;
  if (!(this->_internal_total_metric_value() <= 0 && this->_internal_total_metric_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_total_metric_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.CallMetricData)
  return target;
}

size_t CallMetricData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.CallMetricData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metric_name = 1;
  if (!this->_internal_metric_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metric_name());
  }

  // int64 num_calls_finished_with_metric = 2;
  if (this->_internal_num_calls_finished_with_metric() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_calls_finished_with_metric());
  }

  // double total_metric_value = 3;
  if (!(this->_internal_total_metric_value() <= 0 && this->_internal_total_metric_value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallMetricData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CallMetricData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallMetricData::GetClassData() const { return &_class_data_; }

void CallMetricData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CallMetricData *>(to)->MergeFrom(
      static_cast<const CallMetricData &>(from));
}


void CallMetricData::MergeFrom(const CallMetricData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.CallMetricData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_metric_name().empty()) {
    _internal_set_metric_name(from._internal_metric_name());
  }
  if (from._internal_num_calls_finished_with_metric() != 0) {
    _internal_set_num_calls_finished_with_metric(from._internal_num_calls_finished_with_metric());
  }
  if (!(from._internal_total_metric_value() <= 0 && from._internal_total_metric_value() >= 0)) {
    _internal_set_total_metric_value(from._internal_total_metric_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallMetricData::CopyFrom(const CallMetricData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.CallMetricData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallMetricData::IsInitialized() const {
  return true;
}

void CallMetricData::InternalSwap(CallMetricData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metric_name_, GetArenaForAllocation(),
      &other->metric_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallMetricData, total_metric_value_)
      + sizeof(CallMetricData::total_metric_value_)
      - PROTOBUF_FIELD_OFFSET(CallMetricData, num_calls_finished_with_metric_)>(
          reinterpret_cast<char*>(&num_calls_finished_with_metric_),
          reinterpret_cast<char*>(&other->num_calls_finished_with_metric_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallMetricData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_load_5freporter_2eproto_getter, &descriptor_table_load_5freporter_2eproto_once,
      file_level_metadata_load_5freporter_2eproto[6]);
}

// ===================================================================

class OrphanedLoadIdentifier::_Internal {
 public:
};

OrphanedLoadIdentifier::OrphanedLoadIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.OrphanedLoadIdentifier)
}
OrphanedLoadIdentifier::OrphanedLoadIdentifier(const OrphanedLoadIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  load_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_load_key().empty()) {
    load_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_load_key(), 
      GetArenaForAllocation());
  }
  load_balancer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_load_balancer_id().empty()) {
    load_balancer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_load_balancer_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.OrphanedLoadIdentifier)
}

inline void OrphanedLoadIdentifier::SharedCtor() {
load_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
load_balancer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OrphanedLoadIdentifier::~OrphanedLoadIdentifier() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.OrphanedLoadIdentifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OrphanedLoadIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  load_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  load_balancer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrphanedLoadIdentifier::ArenaDtor(void* object) {
  OrphanedLoadIdentifier* _this = reinterpret_cast< OrphanedLoadIdentifier* >(object);
  (void)_this;
}
void OrphanedLoadIdentifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrphanedLoadIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrphanedLoadIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.OrphanedLoadIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_key_.ClearToEmpty();
  load_balancer_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrphanedLoadIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes load_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_load_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string load_balancer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_load_balancer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.lb.v1.OrphanedLoadIdentifier.load_balancer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrphanedLoadIdentifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.OrphanedLoadIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes load_key = 1;
  if (!this->_internal_load_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_load_key(), target);
  }

  // string load_balancer_id = 2;
  if (!this->_internal_load_balancer_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_balancer_id().data(), static_cast<int>(this->_internal_load_balancer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.lb.v1.OrphanedLoadIdentifier.load_balancer_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_load_balancer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.OrphanedLoadIdentifier)
  return target;
}

size_t OrphanedLoadIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.OrphanedLoadIdentifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes load_key = 1;
  if (!this->_internal_load_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_load_key());
  }

  // string load_balancer_id = 2;
  if (!this->_internal_load_balancer_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_balancer_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrphanedLoadIdentifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrphanedLoadIdentifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrphanedLoadIdentifier::GetClassData() const { return &_class_data_; }

void OrphanedLoadIdentifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OrphanedLoadIdentifier *>(to)->MergeFrom(
      static_cast<const OrphanedLoadIdentifier &>(from));
}


void OrphanedLoadIdentifier::MergeFrom(const OrphanedLoadIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.OrphanedLoadIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_load_key().empty()) {
    _internal_set_load_key(from._internal_load_key());
  }
  if (!from._internal_load_balancer_id().empty()) {
    _internal_set_load_balancer_id(from._internal_load_balancer_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrphanedLoadIdentifier::CopyFrom(const OrphanedLoadIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.OrphanedLoadIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrphanedLoadIdentifier::IsInitialized() const {
  return true;
}

void OrphanedLoadIdentifier::InternalSwap(OrphanedLoadIdentifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &load_key_, GetArenaForAllocation(),
      &other->load_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &load_balancer_id_, GetArenaForAllocation(),
      &other->load_balancer_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OrphanedLoadIdentifier::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_load_5freporter_2eproto_getter, &descriptor_table_load_5freporter_2eproto_once,
      file_level_metadata_load_5freporter_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace lb
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::LoadReportRequest* Arena::CreateMaybeMessage< ::grpc::lb::v1::LoadReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::LoadReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::InitialLoadReportRequest* Arena::CreateMaybeMessage< ::grpc::lb::v1::InitialLoadReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::InitialLoadReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::LoadReportResponse* Arena::CreateMaybeMessage< ::grpc::lb::v1::LoadReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::LoadReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::InitialLoadReportResponse* Arena::CreateMaybeMessage< ::grpc::lb::v1::InitialLoadReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::InitialLoadReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::LoadBalancingFeedback* Arena::CreateMaybeMessage< ::grpc::lb::v1::LoadBalancingFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::LoadBalancingFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::Load* Arena::CreateMaybeMessage< ::grpc::lb::v1::Load >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::Load >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::CallMetricData* Arena::CreateMaybeMessage< ::grpc::lb::v1::CallMetricData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::CallMetricData >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::OrphanedLoadIdentifier* Arena::CreateMaybeMessage< ::grpc::lb::v1::OrphanedLoadIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::OrphanedLoadIdentifier >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
