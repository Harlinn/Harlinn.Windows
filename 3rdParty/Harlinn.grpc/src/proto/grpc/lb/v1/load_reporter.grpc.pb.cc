// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: load_reporter.proto

#include "load_reporter.pb.h"
#include "load_reporter.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc {
namespace lb {
namespace v1 {

static const char* LoadReporter_method_names[] = {
  "/grpc.lb.v1.LoadReporter/ReportLoad",
};

std::unique_ptr< LoadReporter::Stub> LoadReporter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LoadReporter::Stub> stub(new LoadReporter::Stub(channel, options));
  return stub;
}

LoadReporter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReportLoad_(LoadReporter_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::grpc::lb::v1::LoadReportRequest, ::grpc::lb::v1::LoadReportResponse>* LoadReporter::Stub::ReportLoadRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::grpc::lb::v1::LoadReportRequest, ::grpc::lb::v1::LoadReportResponse>::Create(channel_.get(), rpcmethod_ReportLoad_, context);
}

void LoadReporter::Stub::async::ReportLoad(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpc::lb::v1::LoadReportRequest,::grpc::lb::v1::LoadReportResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::grpc::lb::v1::LoadReportRequest,::grpc::lb::v1::LoadReportResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ReportLoad_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::grpc::lb::v1::LoadReportRequest, ::grpc::lb::v1::LoadReportResponse>* LoadReporter::Stub::AsyncReportLoadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpc::lb::v1::LoadReportRequest, ::grpc::lb::v1::LoadReportResponse>::Create(channel_.get(), cq, rpcmethod_ReportLoad_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::grpc::lb::v1::LoadReportRequest, ::grpc::lb::v1::LoadReportResponse>* LoadReporter::Stub::PrepareAsyncReportLoadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpc::lb::v1::LoadReportRequest, ::grpc::lb::v1::LoadReportResponse>::Create(channel_.get(), cq, rpcmethod_ReportLoad_, context, false, nullptr);
}

LoadReporter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoadReporter_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< LoadReporter::Service, ::grpc::lb::v1::LoadReportRequest, ::grpc::lb::v1::LoadReportResponse>(
          [](LoadReporter::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::grpc::lb::v1::LoadReportResponse,
             ::grpc::lb::v1::LoadReportRequest>* stream) {
               return service->ReportLoad(ctx, stream);
             }, this)));
}

LoadReporter::Service::~Service() {
}

::grpc::Status LoadReporter::Service::ReportLoad(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::lb::v1::LoadReportResponse, ::grpc::lb::v1::LoadReportRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc
}  // namespace lb
}  // namespace v1

