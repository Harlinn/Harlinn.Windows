// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: reflection.proto

#include "reflection.pb.h"
#include "reflection.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc {
namespace reflection {
namespace v1alpha {

static const char* ServerReflection_method_names[] = {
  "/grpc.reflection.v1alpha.ServerReflection/ServerReflectionInfo",
};

std::unique_ptr< ServerReflection::Stub> ServerReflection::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServerReflection::Stub> stub(new ServerReflection::Stub(channel, options));
  return stub;
}

ServerReflection::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ServerReflectionInfo_(ServerReflection_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::grpc::reflection::v1alpha::ServerReflectionRequest, ::grpc::reflection::v1alpha::ServerReflectionResponse>* ServerReflection::Stub::ServerReflectionInfoRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::grpc::reflection::v1alpha::ServerReflectionRequest, ::grpc::reflection::v1alpha::ServerReflectionResponse>::Create(channel_.get(), rpcmethod_ServerReflectionInfo_, context);
}

void ServerReflection::Stub::async::ServerReflectionInfo(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpc::reflection::v1alpha::ServerReflectionRequest,::grpc::reflection::v1alpha::ServerReflectionResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::grpc::reflection::v1alpha::ServerReflectionRequest,::grpc::reflection::v1alpha::ServerReflectionResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ServerReflectionInfo_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::grpc::reflection::v1alpha::ServerReflectionRequest, ::grpc::reflection::v1alpha::ServerReflectionResponse>* ServerReflection::Stub::AsyncServerReflectionInfoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpc::reflection::v1alpha::ServerReflectionRequest, ::grpc::reflection::v1alpha::ServerReflectionResponse>::Create(channel_.get(), cq, rpcmethod_ServerReflectionInfo_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::grpc::reflection::v1alpha::ServerReflectionRequest, ::grpc::reflection::v1alpha::ServerReflectionResponse>* ServerReflection::Stub::PrepareAsyncServerReflectionInfoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpc::reflection::v1alpha::ServerReflectionRequest, ::grpc::reflection::v1alpha::ServerReflectionResponse>::Create(channel_.get(), cq, rpcmethod_ServerReflectionInfo_, context, false, nullptr);
}

ServerReflection::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerReflection_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ServerReflection::Service, ::grpc::reflection::v1alpha::ServerReflectionRequest, ::grpc::reflection::v1alpha::ServerReflectionResponse>(
          [](ServerReflection::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::grpc::reflection::v1alpha::ServerReflectionResponse,
             ::grpc::reflection::v1alpha::ServerReflectionRequest>* stream) {
               return service->ServerReflectionInfo(ctx, stream);
             }, this)));
}

ServerReflection::Service::~Service() {
}

::grpc::Status ServerReflection::Service::ServerReflectionInfo(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::reflection::v1alpha::ServerReflectionResponse, ::grpc::reflection::v1alpha::ServerReflectionRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc
}  // namespace reflection
}  // namespace v1alpha

