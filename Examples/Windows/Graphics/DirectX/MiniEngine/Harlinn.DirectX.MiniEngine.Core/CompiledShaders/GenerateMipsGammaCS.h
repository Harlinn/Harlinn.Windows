#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: c33cac857c12c9becbcc2f78d2695355
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer CB0
; {
;
;   struct CB0
;   {
;
;       uint SrcMipLevel;                             ; Offset:    0
;       uint NumMipLevels;                            ; Offset:    4
;       float2 TexelSize;                             ; Offset:    8
;   
;   } CB0;                                            ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; CB0                               cbuffer      NA          NA     CB0            cb0     1
; BilinearClamp                     sampler      NA          NA      S0             s0     1
; SrcMip                            texture     f32          2d      T0             t0     1
; OutMip1                               UAV     f32          2d      U0             u0     1
; OutMip2                               UAV     f32          2d      U1             u1     1
; OutMip3                               UAV     f32          2d      U2             u2     1
; OutMip4                               UAV     f32          2d      U3             u3     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%CB0 = type { i32, i32, <2 x float> }
%struct.SamplerState = type { i32 }

@"\01?gs_R@@3PAMA" = external addrspace(3) global [64 x float], align 4
@"\01?gs_G@@3PAMA" = external addrspace(3) global [64 x float], align 4
@"\01?gs_B@@3PAMA" = external addrspace(3) global [64 x float], align 4
@"\01?gs_A@@3PAMA" = external addrspace(3) global [64 x float], align 4

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 3, i32 3, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %9 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %10 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %11 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %12 = extractvalue %dx.types.CBufRet.f32 %11, 2
  %13 = extractvalue %dx.types.CBufRet.f32 %11, 3
  %14 = uitofp i32 %9 to float
  %15 = uitofp i32 %10 to float
  %16 = fadd fast float %14, 5.000000e-01
  %17 = fadd fast float %15, 5.000000e-01
  %18 = fmul fast float %12, %16
  %19 = fmul fast float %13, %17
  %20 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %21 = extractvalue %dx.types.CBufRet.i32 %20, 0
  %22 = uitofp i32 %21 to float
  %23 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5, %dx.types.Handle %6, float %18, float %19, float undef, float undef, i32 0, i32 0, i32 undef, float %22)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %24 = extractvalue %dx.types.ResRet.f32 %23, 0
  %25 = extractvalue %dx.types.ResRet.f32 %23, 1
  %26 = extractvalue %dx.types.ResRet.f32 %23, 2
  %27 = extractvalue %dx.types.ResRet.f32 %23, 3
  %28 = fcmp fast olt float %24, 0x3F69A5C380000000
  %29 = fcmp fast olt float %25, 0x3F69A5C380000000
  %30 = fcmp fast olt float %26, 0x3F69A5C380000000
  %31 = fmul fast float %24, 0x4029D70A40000000
  %32 = fmul fast float %25, 0x4029D70A40000000
  %33 = fmul fast float %26, 0x4029D70A40000000
  %34 = fadd fast float %24, 0xBF62AD81A0000000
  %35 = fadd fast float %25, 0xBF62AD81A0000000
  %36 = fadd fast float %26, 0xBF62AD81A0000000
  %37 = call float @dx.op.unary.f32(i32 6, float %34)  ; FAbs(value)
  %38 = call float @dx.op.unary.f32(i32 6, float %35)  ; FAbs(value)
  %39 = call float @dx.op.unary.f32(i32 6, float %36)  ; FAbs(value)
  %40 = call float @dx.op.unary.f32(i32 24, float %37)  ; Sqrt(value)
  %41 = call float @dx.op.unary.f32(i32 24, float %38)  ; Sqrt(value)
  %42 = call float @dx.op.unary.f32(i32 24, float %39)  ; Sqrt(value)
  %43 = fmul fast float %40, 0x3FF214AF40000000
  %44 = fmul fast float %41, 0x3FF214AF40000000
  %45 = fmul fast float %42, 0x3FF214AF40000000
  %46 = fmul fast float %24, 0x3FC136A400000000
  %47 = fmul fast float %25, 0x3FC136A400000000
  %48 = fmul fast float %26, 0x3FC136A400000000
  %49 = fsub fast float 0x3F776CCE60000000, %46
  %50 = fadd fast float %49, %43
  %51 = fsub fast float 0x3F776CCE60000000, %47
  %52 = fadd fast float %51, %44
  %53 = fsub fast float 0x3F776CCE60000000, %48
  %54 = fadd fast float %53, %45
  %55 = select i1 %28, float %31, float %50
  %56 = select i1 %29, float %32, float %52
  %57 = select i1 %30, float %33, float %54
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %4, i32 %9, i32 %10, i32 undef, float %55, float %56, float %57, float %27, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %58 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.i32 %58, 1
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %302, label %61

; <label>:61                                      ; preds = %0
  %62 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %8
  store float %24, float addrspace(3)* %62, align 4, !tbaa !20
  %63 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %8
  store float %25, float addrspace(3)* %63, align 4, !tbaa !20
  %64 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %8
  store float %26, float addrspace(3)* %64, align 4, !tbaa !20
  %65 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %8
  store float %27, float addrspace(3)* %65, align 4, !tbaa !20
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %66 = and i32 %8, 9
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %144

; <label>:68                                      ; preds = %61
  %69 = add i32 %8, 1
  %70 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %69
  %71 = load float, float addrspace(3)* %70, align 4, !tbaa !20
  %72 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %69
  %73 = load float, float addrspace(3)* %72, align 4, !tbaa !20
  %74 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %69
  %75 = load float, float addrspace(3)* %74, align 4, !tbaa !20
  %76 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %69
  %77 = load float, float addrspace(3)* %76, align 4, !tbaa !20
  %78 = add i32 %8, 8
  %79 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %78
  %80 = load float, float addrspace(3)* %79, align 4, !tbaa !20
  %81 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %78
  %82 = load float, float addrspace(3)* %81, align 4, !tbaa !20
  %83 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %78
  %84 = load float, float addrspace(3)* %83, align 4, !tbaa !20
  %85 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %78
  %86 = load float, float addrspace(3)* %85, align 4, !tbaa !20
  %87 = add i32 %8, 9
  %88 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %87
  %89 = load float, float addrspace(3)* %88, align 4, !tbaa !20
  %90 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %87
  %91 = load float, float addrspace(3)* %90, align 4, !tbaa !20
  %92 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %87
  %93 = load float, float addrspace(3)* %92, align 4, !tbaa !20
  %94 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %87
  %95 = load float, float addrspace(3)* %94, align 4, !tbaa !20
  %96 = fadd fast float %71, %24
  %97 = fadd fast float %73, %25
  %98 = fadd fast float %75, %26
  %99 = fadd fast float %77, %27
  %100 = fadd fast float %96, %80
  %101 = fadd fast float %97, %82
  %102 = fadd fast float %98, %84
  %103 = fadd fast float %99, %86
  %104 = fadd fast float %100, %89
  %105 = fadd fast float %101, %91
  %106 = fadd fast float %102, %93
  %107 = fadd fast float %103, %95
  %108 = fmul fast float %104, 2.500000e-01
  %109 = fmul fast float %105, 2.500000e-01
  %110 = fmul fast float %106, 2.500000e-01
  %111 = fmul fast float %107, 2.500000e-01
  %112 = fcmp fast olt float %108, 0x3F69A5C380000000
  %113 = fcmp fast olt float %109, 0x3F69A5C380000000
  %114 = fcmp fast olt float %110, 0x3F69A5C380000000
  %115 = fmul fast float %104, 0x4009D70A40000000
  %116 = fmul fast float %105, 0x4009D70A40000000
  %117 = fmul fast float %106, 0x4009D70A40000000
  %118 = fadd fast float %108, 0xBF62AD81A0000000
  %119 = fadd fast float %109, 0xBF62AD81A0000000
  %120 = fadd fast float %110, 0xBF62AD81A0000000
  %121 = call float @dx.op.unary.f32(i32 6, float %118)  ; FAbs(value)
  %122 = call float @dx.op.unary.f32(i32 6, float %119)  ; FAbs(value)
  %123 = call float @dx.op.unary.f32(i32 6, float %120)  ; FAbs(value)
  %124 = call float @dx.op.unary.f32(i32 24, float %121)  ; Sqrt(value)
  %125 = call float @dx.op.unary.f32(i32 24, float %122)  ; Sqrt(value)
  %126 = call float @dx.op.unary.f32(i32 24, float %123)  ; Sqrt(value)
  %127 = fmul fast float %124, 0x3FF214AF40000000
  %128 = fmul fast float %125, 0x3FF214AF40000000
  %129 = fmul fast float %126, 0x3FF214AF40000000
  %130 = fmul fast float %104, 0x3FA136A400000000
  %131 = fmul fast float %105, 0x3FA136A400000000
  %132 = fmul fast float %106, 0x3FA136A400000000
  %133 = fsub fast float 0x3F776CCE60000000, %130
  %134 = fadd fast float %133, %127
  %135 = fsub fast float 0x3F776CCE60000000, %131
  %136 = fadd fast float %135, %128
  %137 = fsub fast float 0x3F776CCE60000000, %132
  %138 = fadd fast float %137, %129
  %139 = select i1 %112, float %115, float %134
  %140 = select i1 %113, float %116, float %136
  %141 = select i1 %114, float %117, float %138
  %142 = lshr i32 %9, 1
  %143 = lshr i32 %10, 1
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3, i32 %142, i32 %143, i32 undef, float %139, float %140, float %141, float %111, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  store float %108, float addrspace(3)* %62, align 4, !tbaa !20
  store float %109, float addrspace(3)* %63, align 4, !tbaa !20
  store float %110, float addrspace(3)* %64, align 4, !tbaa !20
  store float %111, float addrspace(3)* %65, align 4, !tbaa !20
  br label %144

; <label>:144                                     ; preds = %68, %61
  %145 = phi float [ %108, %68 ], [ %24, %61 ]
  %146 = phi float [ %109, %68 ], [ %25, %61 ]
  %147 = phi float [ %110, %68 ], [ %26, %61 ]
  %148 = phi float [ %111, %68 ], [ %27, %61 ]
  %149 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %150 = extractvalue %dx.types.CBufRet.i32 %149, 1
  %151 = icmp eq i32 %150, 2
  br i1 %151, label %302, label %152

; <label>:152                                     ; preds = %144
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %153 = and i32 %8, 27
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %231

; <label>:155                                     ; preds = %152
  %156 = add i32 %8, 2
  %157 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %156
  %158 = load float, float addrspace(3)* %157, align 4, !tbaa !20
  %159 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %156
  %160 = load float, float addrspace(3)* %159, align 4, !tbaa !20
  %161 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %156
  %162 = load float, float addrspace(3)* %161, align 4, !tbaa !20
  %163 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %156
  %164 = load float, float addrspace(3)* %163, align 4, !tbaa !20
  %165 = add i32 %8, 16
  %166 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %165
  %167 = load float, float addrspace(3)* %166, align 4, !tbaa !20
  %168 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %165
  %169 = load float, float addrspace(3)* %168, align 4, !tbaa !20
  %170 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %165
  %171 = load float, float addrspace(3)* %170, align 4, !tbaa !20
  %172 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %165
  %173 = load float, float addrspace(3)* %172, align 4, !tbaa !20
  %174 = add i32 %8, 18
  %175 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %174
  %176 = load float, float addrspace(3)* %175, align 4, !tbaa !20
  %177 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %174
  %178 = load float, float addrspace(3)* %177, align 4, !tbaa !20
  %179 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %174
  %180 = load float, float addrspace(3)* %179, align 4, !tbaa !20
  %181 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %174
  %182 = load float, float addrspace(3)* %181, align 4, !tbaa !20
  %183 = fadd fast float %158, %145
  %184 = fadd fast float %160, %146
  %185 = fadd fast float %162, %147
  %186 = fadd fast float %164, %148
  %187 = fadd fast float %183, %167
  %188 = fadd fast float %184, %169
  %189 = fadd fast float %185, %171
  %190 = fadd fast float %186, %173
  %191 = fadd fast float %187, %176
  %192 = fadd fast float %188, %178
  %193 = fadd fast float %189, %180
  %194 = fadd fast float %190, %182
  %195 = fmul fast float %191, 2.500000e-01
  %196 = fmul fast float %192, 2.500000e-01
  %197 = fmul fast float %193, 2.500000e-01
  %198 = fmul fast float %194, 2.500000e-01
  %199 = fcmp fast olt float %195, 0x3F69A5C380000000
  %200 = fcmp fast olt float %196, 0x3F69A5C380000000
  %201 = fcmp fast olt float %197, 0x3F69A5C380000000
  %202 = fmul fast float %191, 0x4009D70A40000000
  %203 = fmul fast float %192, 0x4009D70A40000000
  %204 = fmul fast float %193, 0x4009D70A40000000
  %205 = fadd fast float %195, 0xBF62AD81A0000000
  %206 = fadd fast float %196, 0xBF62AD81A0000000
  %207 = fadd fast float %197, 0xBF62AD81A0000000
  %208 = call float @dx.op.unary.f32(i32 6, float %205)  ; FAbs(value)
  %209 = call float @dx.op.unary.f32(i32 6, float %206)  ; FAbs(value)
  %210 = call float @dx.op.unary.f32(i32 6, float %207)  ; FAbs(value)
  %211 = call float @dx.op.unary.f32(i32 24, float %208)  ; Sqrt(value)
  %212 = call float @dx.op.unary.f32(i32 24, float %209)  ; Sqrt(value)
  %213 = call float @dx.op.unary.f32(i32 24, float %210)  ; Sqrt(value)
  %214 = fmul fast float %211, 0x3FF214AF40000000
  %215 = fmul fast float %212, 0x3FF214AF40000000
  %216 = fmul fast float %213, 0x3FF214AF40000000
  %217 = fmul fast float %191, 0x3FA136A400000000
  %218 = fmul fast float %192, 0x3FA136A400000000
  %219 = fmul fast float %193, 0x3FA136A400000000
  %220 = fsub fast float 0x3F776CCE60000000, %217
  %221 = fadd fast float %220, %214
  %222 = fsub fast float 0x3F776CCE60000000, %218
  %223 = fadd fast float %222, %215
  %224 = fsub fast float 0x3F776CCE60000000, %219
  %225 = fadd fast float %224, %216
  %226 = select i1 %199, float %202, float %221
  %227 = select i1 %200, float %203, float %223
  %228 = select i1 %201, float %204, float %225
  %229 = lshr i32 %9, 2
  %230 = lshr i32 %10, 2
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2, i32 %229, i32 %230, i32 undef, float %226, float %227, float %228, float %198, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  store float %195, float addrspace(3)* %62, align 4, !tbaa !20
  store float %196, float addrspace(3)* %63, align 4, !tbaa !20
  store float %197, float addrspace(3)* %64, align 4, !tbaa !20
  store float %198, float addrspace(3)* %65, align 4, !tbaa !20
  br label %231

; <label>:231                                     ; preds = %155, %152
  %232 = phi float [ %195, %155 ], [ %145, %152 ]
  %233 = phi float [ %196, %155 ], [ %146, %152 ]
  %234 = phi float [ %197, %155 ], [ %147, %152 ]
  %235 = phi float [ %198, %155 ], [ %148, %152 ]
  %236 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %237 = extractvalue %dx.types.CBufRet.i32 %236, 1
  %238 = icmp eq i32 %237, 3
  br i1 %238, label %302, label %239

; <label>:239                                     ; preds = %231
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %240 = icmp eq i32 %8, 0
  br i1 %240, label %241, label %302

; <label>:241                                     ; preds = %239
  %242 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 4), align 4, !tbaa !20
  %243 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 4), align 4, !tbaa !20
  %244 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 4), align 4, !tbaa !20
  %245 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 4), align 4, !tbaa !20
  %246 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 32), align 4, !tbaa !20
  %247 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 32), align 4, !tbaa !20
  %248 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 32), align 4, !tbaa !20
  %249 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 32), align 4, !tbaa !20
  %250 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 36), align 4, !tbaa !20
  %251 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 36), align 4, !tbaa !20
  %252 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 36), align 4, !tbaa !20
  %253 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 36), align 4, !tbaa !20
  %254 = fadd fast float %242, %232
  %255 = fadd fast float %243, %233
  %256 = fadd fast float %244, %234
  %257 = fadd fast float %245, %235
  %258 = fadd fast float %254, %246
  %259 = fadd fast float %255, %247
  %260 = fadd fast float %256, %248
  %261 = fadd fast float %257, %249
  %262 = fadd fast float %258, %250
  %263 = fadd fast float %259, %251
  %264 = fadd fast float %260, %252
  %265 = fadd fast float %261, %253
  %266 = fmul fast float %262, 2.500000e-01
  %267 = fmul fast float %263, 2.500000e-01
  %268 = fmul fast float %264, 2.500000e-01
  %269 = fmul fast float %265, 2.500000e-01
  %270 = fcmp fast olt float %266, 0x3F69A5C380000000
  %271 = fcmp fast olt float %267, 0x3F69A5C380000000
  %272 = fcmp fast olt float %268, 0x3F69A5C380000000
  %273 = fmul fast float %262, 0x4009D70A40000000
  %274 = fmul fast float %263, 0x4009D70A40000000
  %275 = fmul fast float %264, 0x4009D70A40000000
  %276 = fadd fast float %266, 0xBF62AD81A0000000
  %277 = fadd fast float %267, 0xBF62AD81A0000000
  %278 = fadd fast float %268, 0xBF62AD81A0000000
  %279 = call float @dx.op.unary.f32(i32 6, float %276)  ; FAbs(value)
  %280 = call float @dx.op.unary.f32(i32 6, float %277)  ; FAbs(value)
  %281 = call float @dx.op.unary.f32(i32 6, float %278)  ; FAbs(value)
  %282 = call float @dx.op.unary.f32(i32 24, float %279)  ; Sqrt(value)
  %283 = call float @dx.op.unary.f32(i32 24, float %280)  ; Sqrt(value)
  %284 = call float @dx.op.unary.f32(i32 24, float %281)  ; Sqrt(value)
  %285 = fmul fast float %282, 0x3FF214AF40000000
  %286 = fmul fast float %283, 0x3FF214AF40000000
  %287 = fmul fast float %284, 0x3FF214AF40000000
  %288 = fmul fast float %262, 0x3FA136A400000000
  %289 = fmul fast float %263, 0x3FA136A400000000
  %290 = fmul fast float %264, 0x3FA136A400000000
  %291 = fsub fast float 0x3F776CCE60000000, %288
  %292 = fadd fast float %291, %285
  %293 = fsub fast float 0x3F776CCE60000000, %289
  %294 = fadd fast float %293, %286
  %295 = fsub fast float 0x3F776CCE60000000, %290
  %296 = fadd fast float %295, %287
  %297 = select i1 %270, float %273, float %292
  %298 = select i1 %271, float %274, float %294
  %299 = select i1 %272, float %275, float %296
  %300 = lshr i32 %9, 3
  %301 = lshr i32 %10, 3
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1, i32 %300, i32 %301, i32 undef, float %297, float %298, float %299, float %269, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %302

; <label>:302                                     ; preds = %241, %239, %231, %144, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #3

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }
attributes #3 = { noduplicate nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!17}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 2}
!2 = !{i32 1, i32 6}
!3 = !{!"cs", i32 6, i32 2}
!4 = !{!5, !8, !13, !15}
!5 = !{!6}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{!9, !10, !11, !12}
!9 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!10 = !{i32 1, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!11 = !{i32 2, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!12 = !{i32 3, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!13 = !{!14}
!14 = !{i32 0, %CB0* undef, !"", i32 0, i32 0, i32 1, i32 16, null}
!15 = !{!16}
!16 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!17 = !{void ()* @main, !"main", null, !4, !18}
!18 = !{i32 4, !19}
!19 = !{i32 8, i32 8, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"float", !22, i64 0}
!22 = !{!"omnipotent char", !23, i64 0}
!23 = !{!"Simple C/C++ TBAA"}

#endif

const unsigned char g_pGenerateMipsGammaCS[] = {
  0x44, 0x58, 0x42, 0x43, 0xe6, 0xf2, 0xb7, 0xb5, 0x6d, 0x36, 0x22, 0xdc,
  0xcd, 0x30, 0x66, 0xcf, 0xb6, 0xd1, 0x00, 0x5a, 0x01, 0x00, 0x00, 0x00,
  0x40, 0x1c, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x68, 0x01, 0x00, 0x00, 0xac, 0x02, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x00,
  0x9c, 0x0b, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0xf0, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x52, 0x54, 0x53, 0x30, 0x3c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x15, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x7f, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x7f,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x54, 0x41, 0x54, 0xcc, 0x08, 0x00, 0x00, 0x62, 0x00, 0x05, 0x00,
  0x33, 0x02, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x02, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x2a, 0x02, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff,
  0xff, 0x01, 0x90, 0x36, 0x18, 0xc4, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00,
  0x03, 0x48, 0x00, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x86, 0x09, 0x01, 0x01, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0xb0, 0xc1, 0x0c, 0x40, 0x02, 0x01, 0x83, 0x08, 0xc1, 0x30, 0x02,
  0x50, 0x82, 0x81, 0x88, 0x39, 0x02, 0x30, 0x28, 0x82, 0x61, 0xd0, 0x51,
  0x06, 0xc3, 0x30, 0x28, 0xb9, 0x69, 0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9,
  0x5f, 0x09, 0x69, 0x25, 0x26, 0xbf, 0xb8, 0x6d, 0x54, 0x00, 0x00, 0x00,
  0x18, 0x73, 0x04, 0x08, 0x31, 0xf7, 0x0c, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0x21, 0xd0, 0x0c, 0x0b, 0x81, 0x82, 0xa6, 0x30, 0x8b, 0xe1, 0x38,
  0x00, 0x00, 0x00, 0x86, 0x61, 0x00, 0xf4, 0x94, 0x65, 0x30, 0x1c, 0xc3,
  0x30, 0x00, 0x00, 0x00, 0x18, 0x8a, 0xca, 0x30, 0x18, 0x06, 0x4d, 0x65,
  0x00, 0x0c, 0x80, 0xaa, 0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c,
  0x6e, 0xa3, 0x8a, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x01, 0x00, 0x00,
  0x50, 0x88, 0xcb, 0x70, 0x0c, 0xc2, 0x8e, 0x1a, 0x2e, 0x7f, 0xc2, 0x1e,
  0x42, 0xf2, 0xb9, 0x8d, 0x2a, 0x56, 0x62, 0xf2, 0x91, 0xdb, 0x46, 0x84,
  0x61, 0x18, 0x46, 0x21, 0x34, 0xc3, 0x31, 0x68, 0x9b, 0x23, 0x08, 0x8a,
  0xe1, 0x18, 0x8c, 0x61, 0x74, 0xe4, 0x0d, 0x04, 0x0c, 0x23, 0x10, 0xc0,
  0x4c, 0x6d, 0x30, 0x0e, 0xec, 0x10, 0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x40,
  0x0b, 0xe5, 0x80, 0x0f, 0xf4, 0x50, 0x0f, 0xf2, 0x50, 0x0e, 0x72, 0x40,
  0x0a, 0x7c, 0x60, 0x0f, 0xe5, 0x30, 0x0e, 0xf4, 0xf0, 0x0e, 0xf2, 0xc0,
  0x07, 0xe6, 0xc0, 0x0e, 0xef, 0x10, 0x0e, 0xf4, 0xc0, 0x06, 0x60, 0x40,
  0x07, 0x7e, 0x00, 0x06, 0x7e, 0xa0, 0x07, 0x7a, 0xd0, 0x0e, 0xe9, 0x00,
  0x0f, 0xf3, 0xf0, 0x0b, 0xf4, 0x90, 0x0f, 0xf0, 0x50, 0x0e, 0x28, 0x30,
  0x66, 0x12, 0x83, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03,
  0x5a, 0x28, 0x07, 0x7c, 0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72, 0x90, 0x03,
  0x52, 0xe0, 0x03, 0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x07,
  0x3e, 0x30, 0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x36, 0x00, 0x03,
  0x3a, 0xf0, 0x03, 0x30, 0xf0, 0x03, 0x24, 0x84, 0x22, 0x8d, 0x33, 0x91,
  0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x81, 0x2c, 0xdc,
  0x02, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8,
  0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8,
  0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80,
  0x01, 0x1d, 0xf8, 0x01, 0x18, 0xf8, 0x01, 0x0a, 0x42, 0x2a, 0x87, 0x11,
  0x04, 0xe0, 0x06, 0x6e, 0xa3, 0xd1, 0x60, 0x18, 0x27, 0xa1, 0x37, 0x49,
  0x53, 0x44, 0x09, 0x93, 0xcf, 0x02, 0xcc, 0xb3, 0x10, 0x11, 0x3b, 0x01,
  0x13, 0x81, 0x02, 0x83, 0x54, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0,
  0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d,
  0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74,
  0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6,
  0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78,
  0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x3a, 0x0f, 0x24, 0x90, 0x21, 0x23, 0x45, 0x44, 0x00, 0x76,
  0x00, 0x30, 0x3b, 0x00, 0x98, 0x1d, 0x00, 0xcc, 0x0e, 0x00, 0x1e, 0xf2,
  0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
  0xe4, 0x39, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x93, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0xe7, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x4f, 0x04, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x09, 0x08, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x15, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x30, 0x20, 0x00, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x6c, 0x40, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xf1, 0x80,
  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0b, 0x04,
  0x11, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x32, 0x4a, 0xa0, 0x08, 0x46,
  0x00, 0x8a, 0xa1, 0x24, 0xca, 0xa0, 0x40, 0xca, 0xa1, 0x14, 0x0a, 0xa1,
  0x20, 0x0a, 0x10, 0xa2, 0xc0, 0xca, 0x58, 0xa0, 0x08, 0x0b, 0x0a, 0x83,
  0xba, 0x11, 0x80, 0x1a, 0x20, 0x72, 0x06, 0x80, 0xcc, 0x19, 0x00, 0x42,
  0x67, 0x00, 0x28, 0x9d, 0x01, 0xa0, 0x75, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0xab, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90,
  0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1,
  0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41,
  0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a,
  0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9,
  0x10, 0x04, 0x13, 0x04, 0xc3, 0x99, 0x20, 0x18, 0xcf, 0x06, 0x61, 0x20,
  0x26, 0x08, 0x06, 0xb4, 0x41, 0x30, 0x0c, 0x0a, 0x63, 0x73, 0x13, 0x04,
  0x23, 0xda, 0x30, 0x20, 0x09, 0x31, 0x41, 0x20, 0x03, 0x30, 0xa0, 0x31,
  0x25, 0x37, 0xd6, 0x94, 0x06, 0x37, 0x41, 0x30, 0xa4, 0x0d, 0x82, 0xd1,
  0x6c, 0x48, 0x8c, 0x85, 0x31, 0x8c, 0x81, 0x30, 0x9c, 0x0d, 0xc1, 0x33,
  0x41, 0x30, 0x83, 0x30, 0xe0, 0xf1, 0x54, 0x47, 0xd7, 0x94, 0x06, 0x17,
  0x33, 0x41, 0xe8, 0xbc, 0x0d, 0x8b, 0x11, 0x49, 0x86, 0x31, 0x10, 0xd3,
  0x34, 0x39, 0x3c, 0x9e, 0xea, 0xe8, 0x9a, 0xd2, 0xe0, 0x64, 0x36, 0x2c,
  0x43, 0x54, 0x19, 0xc3, 0x40, 0x4c, 0xd3, 0xe4, 0xf0, 0x78, 0xaa, 0xa3,
  0x6b, 0x4a, 0x83, 0x9b, 0xd9, 0xb0, 0x10, 0xd1, 0x65, 0x10, 0x03, 0x31,
  0x4d, 0x93, 0x33, 0x41, 0x30, 0x26, 0x1e, 0x4f, 0x75, 0x74, 0x4d, 0x69,
  0x70, 0x34, 0x1b, 0x96, 0x2c, 0xd2, 0x8c, 0x6c, 0x20, 0xa6, 0x69, 0x72,
  0x36, 0x10, 0x94, 0x85, 0x6d, 0x13, 0x84, 0x34, 0x18, 0x03, 0x0e, 0x43,
  0x42, 0x30, 0x13, 0x04, 0x83, 0xda, 0x80, 0x18, 0x9d, 0x67, 0x18, 0xc3,
  0x07, 0x6c, 0x08, 0xc0, 0x60, 0x82, 0xb0, 0x06, 0x64, 0xc0, 0x46, 0x28,
  0x8d, 0x2d, 0xcd, 0xad, 0x2c, 0x4c, 0x6e, 0x88, 0x2d, 0xac, 0x0d, 0x6e,
  0x03, 0x62, 0x88, 0xc1, 0x18, 0x18, 0xc6, 0x60, 0x00, 0x1b, 0x02, 0x32,
  0xd8, 0x40, 0x40, 0x5c, 0x18, 0x94, 0xc1, 0x04, 0x01, 0x0d, 0xc4, 0x80,
  0xcb, 0x94, 0xdc, 0x58, 0x53, 0x1a, 0x1c, 0x53, 0x99, 0x5d, 0x19, 0xdb,
  0x04, 0xc1, 0xa8, 0x26, 0x08, 0x86, 0x35, 0x41, 0xe8, 0xbe, 0x0d, 0x48,
  0x82, 0x06, 0x99, 0x91, 0x06, 0x6a, 0xd0, 0xac, 0x01, 0x19, 0xa7, 0xba,
  0xb6, 0xa6, 0x34, 0x38, 0xa6, 0x32, 0xbb, 0x32, 0xb6, 0xb9, 0x09, 0x82,
  0x71, 0x6d, 0x40, 0x92, 0x36, 0xc8, 0xdc, 0x20, 0x0d, 0xd4, 0xa0, 0x59,
  0x03, 0x26, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x13,
  0x04, 0x03, 0xdb, 0x80, 0x24, 0x70, 0x90, 0xc5, 0x41, 0x1a, 0x34, 0xcd,
  0x1a, 0x6c, 0x20, 0x3e, 0x36, 0x78, 0x03, 0x39, 0xd8, 0x30, 0x18, 0x67,
  0x30, 0x07, 0x13, 0x84, 0x82, 0xd8, 0x00, 0x6c, 0x18, 0x0c, 0x3b, 0xb0,
  0x83, 0x0d, 0xc1, 0x1d, 0x6c, 0x18, 0x86, 0x3a, 0xc0, 0x03, 0x12, 0x6d,
  0x61, 0x69, 0x6e, 0x1b, 0x86, 0x38, 0x88, 0x83, 0x61, 0x83, 0xe0, 0x06,
  0x7b, 0xb0, 0xa1, 0xa8, 0x03, 0x3d, 0x00, 0xcc, 0x80, 0x0f, 0x08, 0x85,
  0xc9, 0xc9, 0x85, 0xe5, 0x7d, 0xd1, 0x9d, 0xcd, 0xb5, 0x7d, 0x89, 0xe5,
  0xd1, 0x95, 0xcd, 0x4d, 0x10, 0x8c, 0x8c, 0x4f, 0x98, 0x9c, 0x5c, 0x58,
  0xde, 0x17, 0xdd, 0xd9, 0x5c, 0xdb, 0x17, 0x1b, 0xd9, 0x1c, 0xdd, 0x04,
  0xc1, 0xd0, 0x78, 0x88, 0x85, 0xc9, 0xc9, 0xa5, 0x95, 0xc9, 0x11, 0x11,
  0x93, 0x0b, 0x73, 0x1b, 0x43, 0x2b, 0x9b, 0xa3, 0x61, 0xc6, 0xf6, 0x16,
  0x46, 0x37, 0x37, 0x41, 0x30, 0x36, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x73,
  0x13, 0x04, 0x83, 0x23, 0x91, 0xe6, 0x46, 0x37, 0x37, 0x41, 0x30, 0x3a,
  0x22, 0x74, 0x65, 0x78, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x4c, 0xe8, 0xca,
  0xf0, 0xbe, 0xe6, 0xe8, 0xde, 0xe4, 0xca, 0x58, 0xd4, 0xa5, 0xb9, 0xd1,
  0xcd, 0x6d, 0xa0, 0xfc, 0xe0, 0x0f, 0x40, 0x21, 0x14, 0x44, 0x21, 0x1b,
  0x85, 0x84, 0x14, 0x4a, 0xc1, 0x14, 0x4e, 0x01, 0x15, 0x52, 0x41, 0x15,
  0x86, 0x55, 0x70, 0x03, 0x56, 0x88, 0x83, 0x2a, 0x6c, 0x6c, 0x76, 0x6d,
  0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x82, 0xa0, 0x0a, 0x19, 0x9e,
  0x8b, 0x5d, 0x99, 0xdc, 0x5c, 0xda, 0x9b, 0xdb, 0x94, 0x80, 0x68, 0x42,
  0x86, 0xe7, 0x62, 0x17, 0xc6, 0x66, 0x57, 0x26, 0x37, 0x25, 0x30, 0xea,
  0x90, 0xe1, 0xb9, 0xcc, 0xa1, 0x85, 0x91, 0x95, 0xc9, 0x35, 0xbd, 0x91,
  0x95, 0xb1, 0x4d, 0x09, 0x92, 0x32, 0x64, 0x78, 0x2e, 0x72, 0x65, 0x73,
  0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x82, 0x32, 0xa8, 0x44, 0x86,
  0xe7, 0x42, 0x97, 0x07, 0x57, 0x16, 0xe4, 0xe6, 0xf6, 0x46, 0x17, 0x46,
  0x97, 0xf6, 0xe6, 0x36, 0x37, 0x45, 0x98, 0x03, 0x3c, 0xa8, 0x43, 0x86,
  0xe7, 0x52, 0xe6, 0x46, 0x27, 0x97, 0x07, 0xf5, 0x96, 0xe6, 0x46, 0x37,
  0x37, 0x25, 0xe0, 0x83, 0x2e, 0x64, 0x78, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
  0x74, 0x65, 0x72, 0x73, 0x53, 0x02, 0x56, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20,
  0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90,
  0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc,
  0x40, 0x1c, 0xe4, 0xa1, 0x1c, 0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4,
  0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00,
  0x35, 0xd0, 0x04, 0x7e, 0xe7, 0xf9, 0x37, 0x08, 0x04, 0xce, 0xa0, 0xc1,
  0x66, 0xb0, 0x04, 0x9a, 0xc0, 0xef, 0x3c, 0xff, 0x0a, 0x81, 0xc0, 0x19,
  0x34, 0xd8, 0x0c, 0x56, 0x40, 0x13, 0xf8, 0x9d, 0xe7, 0xdf, 0x23, 0x10,
  0x38, 0x83, 0x06, 0x9b, 0xc1, 0x02, 0x68, 0x02, 0xbf, 0xf3, 0xfc, 0x2b,
  0x05, 0x02, 0x67, 0xd0, 0x60, 0x33, 0x68, 0x09, 0xcd, 0x70, 0xf9, 0xce,
  0xe3, 0x07, 0x40, 0x14, 0x21, 0x44, 0x64, 0x0b, 0xdb, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06,
  0x20, 0x60, 0x7e, 0x71, 0xdb, 0xc6, 0xb0, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25, 0x61, 0x00, 0x02,
  0xe6, 0x23, 0xb7, 0x6d, 0x0d, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x11,
  0x01, 0x4c, 0x44, 0x08, 0x34, 0xc3, 0x42, 0x58, 0x81, 0x18, 0x0c, 0x97,
  0xef, 0x3c, 0x7e, 0xb1, 0x00, 0xd3, 0x44, 0x34, 0xc4, 0xd0, 0x1e, 0x11,
  0x01, 0x0c, 0xe2, 0x20, 0x36, 0x60, 0xe4, 0x50, 0x8f, 0x8f, 0xdc, 0xb6,
  0x1d, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x01, 0xcc, 0xb3, 0x10, 0x25,
  0x51, 0x11, 0x8b, 0x5f, 0xdc, 0xb6, 0x21, 0x58, 0xc3, 0xe5, 0x3b, 0x8f,
  0x3f, 0x11, 0xd7, 0x44, 0x45, 0x04, 0x3b, 0x39, 0x11, 0xe1, 0x17, 0xb7,
  0x6d, 0x06, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x47, 0x44, 0x00, 0x83,
  0x38, 0xf8, 0xc8, 0x6d, 0x9b, 0xc2, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x54,
  0x03, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x11, 0x10, 0x0c, 0x80, 0x34, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc3, 0x3c, 0xac, 0x85, 0x7c, 0x12, 0xc9, 0xbe,
  0xcb, 0xcc, 0x2f, 0x78, 0xd2, 0x69, 0x53, 0x55, 0x44, 0x58, 0x49, 0x4c,
  0x9c, 0x10, 0x00, 0x00, 0x62, 0x00, 0x05, 0x00, 0x27, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x02, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x84, 0x10, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x1e, 0x04, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x36,
  0x18, 0xc4, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x03, 0x48, 0x00, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x86, 0x09, 0x01, 0x01, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x6b, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xbc, 0xc1, 0x0c,
  0x40, 0x02, 0x01, 0x83, 0x08, 0xc1, 0x30, 0x02, 0x50, 0x82, 0x81, 0x88,
  0x39, 0x02, 0x30, 0x28, 0x82, 0x61, 0xd0, 0x51, 0x06, 0xc3, 0x30, 0x28,
  0xb9, 0x69, 0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9, 0x5f, 0x09, 0x69, 0x25,
  0x26, 0xbf, 0xb8, 0x6d, 0x54, 0x00, 0x00, 0x00, 0x18, 0x73, 0x04, 0x08,
  0x31, 0xf7, 0x0c, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x21, 0xd0, 0x0c,
  0x0b, 0x81, 0x82, 0xa6, 0x30, 0x8b, 0xe1, 0x38, 0x00, 0x00, 0x00, 0x86,
  0x61, 0x00, 0xf4, 0x94, 0x65, 0x30, 0x1c, 0xc3, 0x30, 0x00, 0x00, 0x00,
  0x18, 0x8a, 0xca, 0x30, 0x18, 0x06, 0x4d, 0x65, 0x00, 0x0c, 0x80, 0xaa,
  0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95,
  0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x01, 0x00, 0x00, 0x50, 0x88, 0xcb, 0x70,
  0x0c, 0xc2, 0x8e, 0x1a, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2, 0xb9, 0x8d,
  0x2a, 0x56, 0x62, 0xf2, 0x91, 0xdb, 0x46, 0x84, 0x61, 0x18, 0x46, 0x21,
  0x34, 0xc3, 0x31, 0x68, 0x9b, 0x23, 0x08, 0x8a, 0xe1, 0x18, 0x8c, 0x61,
  0x74, 0xe4, 0x0d, 0x04, 0x0c, 0x23, 0x10, 0xc0, 0x4c, 0x6d, 0x30, 0x0e,
  0xec, 0x10, 0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x40, 0x0b, 0xe5, 0x80, 0x0f,
  0xf4, 0x50, 0x0f, 0xf2, 0x50, 0x0e, 0x72, 0x40, 0x0a, 0x7c, 0x60, 0x0f,
  0xe5, 0x30, 0x0e, 0xf4, 0xf0, 0x0e, 0xf2, 0xc0, 0x07, 0xe6, 0xc0, 0x0e,
  0xef, 0x10, 0x0e, 0xf4, 0xc0, 0x06, 0x60, 0x40, 0x07, 0x7e, 0x00, 0x06,
  0x7e, 0xa0, 0x07, 0x7a, 0xd0, 0x0e, 0xe9, 0x00, 0x0f, 0xf3, 0xf0, 0x0b,
  0xf4, 0x90, 0x0f, 0xf0, 0x50, 0x0e, 0x28, 0x30, 0x66, 0x12, 0x83, 0x71,
  0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c,
  0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72, 0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b,
  0x28, 0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x07, 0x3e, 0x30, 0x07, 0x76,
  0x78, 0x87, 0x70, 0xa0, 0x07, 0x36, 0x00, 0x03, 0x3a, 0xf0, 0x03, 0x30,
  0xf0, 0x03, 0x24, 0x84, 0x22, 0x8d, 0x33, 0x91, 0xc1, 0x38, 0xb0, 0x43,
  0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x81, 0x2c, 0xdc, 0x02, 0x2d, 0x94, 0x03,
  0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81,
  0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03,
  0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0x01, 0x1d, 0xf8, 0x01,
  0x18, 0xf8, 0x01, 0x0a, 0x42, 0x2a, 0x87, 0x11, 0x04, 0xe0, 0x06, 0x6e,
  0xa3, 0xd1, 0x60, 0x18, 0x27, 0xa1, 0x37, 0x49, 0x53, 0x44, 0x09, 0x93,
  0xcf, 0x02, 0xcc, 0xb3, 0x10, 0x11, 0x3b, 0x01, 0x13, 0x81, 0x02, 0x83,
  0xd4, 0x29, 0x80, 0x41, 0x04, 0x60, 0x98, 0x23, 0x00, 0x05, 0x00, 0x00,
  0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e,
  0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07,
  0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07,
  0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x3a, 0x0f, 0x24, 0x90, 0x21, 0x23,
  0x45, 0x44, 0x00, 0x76, 0x00, 0x30, 0x3b, 0x00, 0x98, 0x1d, 0x00, 0xcc,
  0x0e, 0x00, 0x1e, 0xf2, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x30, 0xe4, 0x39, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x93, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0xe7, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x04, 0x04, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x09, 0x08,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x15,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x30, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x6c, 0x40, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0xf1, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x0b, 0x04, 0x0d, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x32,
  0x4a, 0xa0, 0x08, 0x8a, 0x61, 0x04, 0xa0, 0x24, 0xca, 0xa0, 0x40, 0x0a,
  0xa1, 0x20, 0xa8, 0x1b, 0x01, 0x20, 0x77, 0x04, 0x80, 0xcc, 0x19, 0x00,
  0x4a, 0x67, 0x00, 0x68, 0x9d, 0x01, 0x20, 0x72, 0x06, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90,
  0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1,
  0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41,
  0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a,
  0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9,
  0x10, 0x04, 0x13, 0x04, 0xc3, 0x99, 0x20, 0x18, 0xcf, 0x06, 0x61, 0x20,
  0x26, 0x08, 0x06, 0xb4, 0x41, 0x18, 0x0c, 0x0a, 0x63, 0x73, 0x1b, 0x06,
  0xc4, 0x20, 0x26, 0x08, 0x46, 0x34, 0x41, 0x20, 0x03, 0x8e, 0xc0, 0x04,
  0xc1, 0x90, 0x36, 0x08, 0x4a, 0xb3, 0x21, 0x51, 0x16, 0x46, 0x51, 0x06,
  0x42, 0x71, 0x36, 0x04, 0xcf, 0x04, 0xc1, 0x0c, 0xb2, 0x09, 0x42, 0x77,
  0x6d, 0x58, 0x94, 0x88, 0x51, 0x94, 0x81, 0x90, 0x24, 0xc9, 0xd9, 0xb0,
  0x0c, 0x11, 0xa3, 0x0c, 0x03, 0x21, 0x49, 0x92, 0xb3, 0x61, 0x21, 0x22,
  0x46, 0x21, 0x06, 0x42, 0x92, 0x24, 0x67, 0x82, 0x60, 0x4c, 0x1b, 0x16,
  0x2b, 0x62, 0x14, 0x6b, 0x20, 0x24, 0x49, 0x72, 0x36, 0x10, 0x13, 0x55,
  0x5d, 0x13, 0x84, 0x34, 0xd0, 0x26, 0x08, 0x06, 0xb5, 0x01, 0x51, 0x32,
  0x46, 0x51, 0x06, 0x0d, 0xd8, 0x10, 0x6c, 0x13, 0x84, 0x35, 0xd8, 0x36,
  0x20, 0x4a, 0xc7, 0x28, 0xca, 0xa0, 0x00, 0x1b, 0x02, 0x6f, 0x03, 0x01,
  0x61, 0xdc, 0x37, 0x41, 0x28, 0x08, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x13,
  0x04, 0xa3, 0x9a, 0x20, 0x18, 0xd6, 0x86, 0x81, 0x0c, 0xc8, 0x60, 0xd8,
  0x20, 0x8c, 0x41, 0x19, 0x6c, 0x28, 0xc2, 0x40, 0x0c, 0x00, 0x30, 0x30,
  0x03, 0x16, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x7c, 0xde, 0xda, 0xdc, 0xd2,
  0xe0, 0xde, 0xe8, 0xca, 0xdc, 0xe8, 0x40, 0xc6, 0xd0, 0xc2, 0xe4, 0x18,
  0x4d, 0xa5, 0xb5, 0xc1, 0xb1, 0x95, 0x81, 0x0c, 0xbd, 0x0c, 0xad, 0xac,
  0x80, 0x50, 0x09, 0x05, 0x05, 0x6d, 0x08, 0xd4, 0x60, 0x82, 0xe0, 0x06,
  0xd8, 0x86, 0x21, 0x0d, 0xd6, 0x80, 0x0d, 0x36, 0x0c, 0x68, 0xd0, 0x06,
  0x6c, 0xb0, 0x61, 0x70, 0x03, 0x37, 0x60, 0x83, 0x2a, 0x6c, 0x6c, 0x76,
  0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x82, 0xa0, 0x0a, 0x19,
  0x9e, 0x8b, 0x5d, 0x99, 0xdc, 0x5c, 0xda, 0x9b, 0xdb, 0x94, 0x80, 0x68,
  0x42, 0x86, 0xe7, 0x62, 0x17, 0xc6, 0x66, 0x57, 0x26, 0x37, 0x25, 0x30,
  0xea, 0x90, 0xe1, 0xb9, 0xcc, 0xa1, 0x85, 0x91, 0x95, 0xc9, 0x35, 0xbd,
  0x91, 0x95, 0xb1, 0x4d, 0x09, 0x90, 0x32, 0x64, 0x78, 0x2e, 0x72, 0x65,
  0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x82, 0xaf, 0x0e, 0x19,
  0x9e, 0x4b, 0x99, 0x1b, 0x9d, 0x5c, 0x1e, 0xd4, 0x5b, 0x9a, 0x1b, 0xdd,
  0xdc, 0x94, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20,
  0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90,
  0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc,
  0x40, 0x1c, 0xe4, 0xa1, 0x1c, 0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4,
  0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00,
  0x35, 0xd0, 0x04, 0x7e, 0xe7, 0xf9, 0x37, 0x08, 0x04, 0xce, 0xa0, 0xc1,
  0x66, 0xb0, 0x04, 0x9a, 0xc0, 0xef, 0x3c, 0xff, 0x0a, 0x81, 0xc0, 0x19,
  0x34, 0xd8, 0x0c, 0x56, 0x40, 0x13, 0xf8, 0x9d, 0xe7, 0xdf, 0x23, 0x10,
  0x38, 0x83, 0x06, 0x9b, 0xc1, 0x02, 0x68, 0x02, 0xbf, 0xf3, 0xfc, 0x2b,
  0x05, 0x02, 0x67, 0xd0, 0x60, 0x33, 0x68, 0x09, 0xcd, 0x70, 0xf9, 0xce,
  0xe3, 0x07, 0x40, 0x14, 0x21, 0x44, 0x64, 0x0b, 0xdb, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06,
  0x20, 0x60, 0x7e, 0x71, 0xdb, 0xc6, 0xb0, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25, 0x61, 0x00, 0x02,
  0xe6, 0x23, 0xb7, 0x6d, 0x0d, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x11,
  0x01, 0x4c, 0x44, 0x08, 0x34, 0xc3, 0x42, 0x58, 0x81, 0x18, 0x0c, 0x97,
  0xef, 0x3c, 0x7e, 0xb1, 0x00, 0xd3, 0x44, 0x34, 0xc4, 0xd0, 0x1e, 0x11,
  0x01, 0x0c, 0xe2, 0x20, 0x36, 0x60, 0xe4, 0x50, 0x8f, 0x8f, 0xdc, 0xb6,
  0x1d, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x01, 0xcc, 0xb3, 0x10, 0x25,
  0x51, 0x11, 0x8b, 0x5f, 0xdc, 0xb6, 0x21, 0x58, 0xc3, 0xe5, 0x3b, 0x8f,
  0x3f, 0x11, 0xd7, 0x44, 0x45, 0x04, 0x3b, 0x39, 0x11, 0xe1, 0x17, 0xb7,
  0x6d, 0x06, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x47, 0x44, 0x00, 0x83,
  0x38, 0xf8, 0xc8, 0x6d, 0x9b, 0xc2, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x54,
  0x03, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x11, 0x10, 0x0c, 0x80, 0x34, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x13, 0x04, 0x4a, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xc4, 0x14, 0x41, 0x19,
  0x8c, 0x00, 0x94, 0x47, 0x09, 0x90, 0x51, 0x24, 0x65, 0x53, 0x7c, 0x05,
  0x1c, 0x50, 0xba, 0x01, 0x05, 0x1a, 0x50, 0x30, 0x25, 0x57, 0x76, 0x33,
  0x00, 0x65, 0x18, 0x50, 0x40, 0x85, 0x44, 0xc0, 0x0c, 0xc0, 0x18, 0x01,
  0x08, 0x82, 0x20, 0xfc, 0x8d, 0x11, 0x80, 0x69, 0x3b, 0x83, 0xdf, 0x18,
  0x81, 0x2c, 0xba, 0x3d, 0x0d, 0x06, 0x63, 0x04, 0x60, 0xda, 0xce, 0xb0,
  0x37, 0x46, 0x20, 0x8b, 0x6e, 0x4f, 0x82, 0xc1, 0x18, 0x01, 0x08, 0x82,
  0x20, 0xfa, 0x8d, 0x11, 0xcc, 0x73, 0x6e, 0xef, 0xdd, 0x18, 0x81, 0xbe,
  0xa6, 0x61, 0xfe, 0x8d, 0x11, 0xb4, 0xe0, 0xae, 0xc6, 0xbd, 0x30, 0x46,
  0xc0, 0xc3, 0xab, 0x4e, 0x77, 0xd4, 0x0e, 0x75, 0x04, 0x02, 0x60, 0x44,
  0x46, 0x35, 0xd4, 0x11, 0x08, 0x81, 0x11, 0x19, 0xd5, 0x50, 0x47, 0x20,
  0x08, 0x46, 0x64, 0x54, 0x43, 0x1d, 0x81, 0x30, 0x18, 0x91, 0x51, 0x0d,
  0x75, 0x04, 0x02, 0x60, 0x44, 0x46, 0x1b, 0x0c, 0x75, 0x04, 0x42, 0x60,
  0x44, 0x46, 0x1b, 0x0c, 0x75, 0x04, 0x82, 0x60, 0x44, 0x46, 0x1b, 0x0c,
  0x75, 0x04, 0xc2, 0x60, 0x44, 0x46, 0x1b, 0x0c, 0x75, 0x04, 0x02, 0x60,
  0x44, 0x86, 0x1b, 0x0c, 0x75, 0x04, 0x42, 0x60, 0x44, 0x86, 0x1b, 0x0c,
  0x75, 0x04, 0x82, 0x60, 0x44, 0x86, 0x1b, 0x0c, 0x75, 0x04, 0xc2, 0x60,
  0x44, 0x86, 0x1b, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xe0, 0xe5,
  0x41, 0x57, 0x06, 0x73, 0x30, 0x07, 0x6f, 0x30, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x9e, 0x1e, 0x78, 0x66, 0x80, 0x07, 0x78, 0x00, 0x07, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0xe0, 0xed, 0xc1, 0x77, 0x06, 0x7a, 0xa0,
  0x07, 0x71, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x1e, 0x1f, 0x80,
  0x01, 0x1a, 0xe0, 0x01, 0x1e, 0xc8, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x78, 0x7d, 0x10, 0x06, 0x6b, 0x90, 0x07, 0x79, 0x30, 0x07, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0xe0, 0xf9, 0x81, 0x18, 0xb4, 0x81, 0x1e,
  0xe8, 0x01, 0x1d, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xf7, 0x07,
  0x63, 0xf0, 0x06, 0x7b, 0xb0, 0x07, 0x75, 0x30, 0x62, 0x50, 0x00, 0x20,
  0x08, 0x06, 0x07, 0x2a, 0xa0, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x24, 0xa8, 0x80, 0x06, 0x7d, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06,
  0x49, 0x2a, 0xa4, 0x41, 0x28, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01,
  0x56, 0x0a, 0x66, 0x40, 0xfc, 0xc1, 0x68, 0x42, 0x20, 0x8c, 0x26, 0x08,
  0xc3, 0x15, 0x40, 0x5d, 0x01, 0x94, 0x09, 0x65, 0x00, 0x1f, 0x13, 0xcc,
  0x00, 0x3e, 0x66, 0x08, 0xf2, 0x31, 0x43, 0x90, 0xcf, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x6c, 0xad, 0xf0, 0x06, 0x0d, 0x2a, 0x8c, 0x26, 0x04,
  0xc0, 0x05, 0x40, 0x8d, 0x18, 0x3c, 0x00, 0x08, 0x82, 0xc1, 0x53, 0x0b,
  0x78, 0x20, 0x45, 0x05, 0xd1, 0x06, 0x6d, 0xb0, 0x0a, 0xab, 0x10, 0x07,
  0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c,
  0x26, 0x10, 0xc3, 0x70, 0x04, 0x81, 0x06, 0xc4, 0x37, 0x1c, 0x41, 0xa4,
  0x01, 0xf1, 0x0d, 0x47, 0x10, 0x6a, 0x40, 0x7c, 0x76, 0xc8, 0x81, 0x7c,
  0xec, 0x98, 0x03, 0xf9, 0xd8, 0x41, 0x07, 0xf2, 0x31, 0xe5, 0x0d, 0xe0,
  0x63, 0x0a, 0x1c, 0xc0, 0xc7, 0x94, 0x38, 0x80, 0xcf, 0x88, 0x81, 0x01,
  0x80, 0x20, 0x18, 0x54, 0xe0, 0xa0, 0x0b, 0xc3, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x54, 0xe1, 0xb0, 0x0b, 0xc3, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0x54, 0xe2, 0xc0, 0x0b, 0xc3, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x54, 0xe3, 0x50, 0x0a, 0xc3, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x54,
  0xe4, 0x60, 0x0a, 0xc3, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x54, 0xe5,
  0x70, 0x0a, 0x83, 0x0d, 0x79, 0x20, 0x1f, 0x1b, 0xf4, 0x40, 0x3e, 0x36,
  0xec, 0x81, 0x7c, 0xcc, 0x12, 0x05, 0xf9, 0x98, 0x35, 0x0a, 0xf2, 0x31,
  0x8b, 0x14, 0xe4, 0x63, 0xa0, 0x30, 0xc4, 0xc7, 0x82, 0x03, 0x3e, 0x26,
  0x0a, 0x44, 0x7c, 0x2c, 0x40, 0xe0, 0x63, 0xa4, 0x50, 0xc4, 0xc7, 0x82,
  0x04, 0x3e, 0xd3, 0x0d, 0x58, 0xb1, 0x4d, 0x37, 0x60, 0xc4, 0x36, 0xdd,
  0x80, 0x0d, 0xdb, 0x88, 0x81, 0x03, 0x80, 0x20, 0x18, 0x44, 0xf7, 0x30,
  0x0b, 0x76, 0x10, 0x07, 0x70, 0x40, 0x0b, 0x83, 0x10, 0x7c, 0xbf, 0x30,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xdb, 0x3c, 0xd4, 0xc2, 0x1c, 0xb8,
  0xc3, 0x68, 0x42, 0x10, 0x0c, 0x37, 0x04, 0xf3, 0x00, 0x06, 0xb3, 0x0c,
  0x49, 0x10, 0xac, 0x60, 0x10, 0x89, 0x78, 0xa8, 0x83, 0x61, 0x03, 0x22,
  0x30, 0x83, 0x01, 0x58, 0xc1, 0x20, 0x12, 0xf2, 0x60, 0x07, 0xc3, 0x06,
  0x44, 0x60, 0x06, 0x03, 0xb0, 0x82, 0x41, 0x24, 0xe6, 0xe1, 0x0e, 0x86,
  0x0d, 0x88, 0xc0, 0x0c, 0x06, 0x60, 0x05, 0x83, 0x48, 0xd0, 0x03, 0x1e,
  0x0c, 0x1b, 0x10, 0x81, 0x19, 0x0c, 0xc0, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0x4c, 0xfd, 0xf0, 0x0b, 0xf4, 0x50, 0x79, 0x40, 0x0f, 0x3a, 0xdc,
  0x10, 0xd8, 0x03, 0x18, 0xcc, 0x32, 0x08, 0x43, 0x50, 0x7b, 0xa0, 0x0f,
  0xb0, 0x82, 0x21, 0x25, 0xf0, 0x21, 0xa0, 0x00, 0x18, 0x2b, 0x18, 0x54,
  0x42, 0x1f, 0x06, 0x0a, 0x80, 0xb1, 0x82, 0x61, 0x25, 0xf8, 0xa1, 0xa0,
  0x00, 0x18, 0x2b, 0x18, 0x58, 0xc2, 0x1f, 0x0e, 0x0a, 0x80, 0x51, 0xa4,
  0xb0, 0x0f, 0xb0, 0x82, 0x41, 0x26, 0x42, 0x22, 0xa0, 0x00, 0x18, 0x2b,
  0x18, 0x66, 0x62, 0x24, 0x06, 0x0a, 0x80, 0xb1, 0x82, 0x81, 0x26, 0x4a,
  0xa2, 0xa0, 0x00, 0x18, 0x2b, 0x18, 0x6a, 0xe2, 0x24, 0x0e, 0x0a, 0x80,
  0x51, 0xad, 0x80, 0x12, 0xb0, 0x82, 0x61, 0x27, 0x54, 0x22, 0xa0, 0x00,
  0x18, 0x2b, 0x18, 0x78, 0x82, 0x25, 0x06, 0x0a, 0x80, 0xb1, 0x82, 0xa1,
  0x27, 0x5c, 0xa2, 0xa0, 0x00, 0x18, 0x2b, 0x18, 0x7c, 0x02, 0x26, 0x0e,
  0x0a, 0x80, 0x61, 0x99, 0x29, 0xc0, 0xc7, 0x30, 0x53, 0x80, 0x8f, 0x5d,
  0xa6, 0x00, 0x1f, 0xb3, 0x4c, 0x01, 0x3e, 0x46, 0x50, 0xf0, 0x31, 0x62,
  0x82, 0x8f, 0x11, 0x12, 0x7c, 0x8c, 0x88, 0xe0, 0x63, 0xc4, 0x03, 0x1f,
  0x23, 0x1c, 0xf8, 0x18, 0xd1, 0xc0, 0xc7, 0x08, 0x06, 0x3e, 0x46, 0xe8,
  0x83, 0x7c, 0x8c, 0xd8, 0x07, 0xf9, 0x18, 0xc1, 0x0f, 0xf2, 0x31, 0xa2,
  0x1f, 0xe4, 0x33, 0x1c, 0x41, 0xe8, 0x03, 0xf1, 0x0d, 0x47, 0x10, 0xfb,
  0x40, 0x7c, 0xc3, 0x11, 0x04, 0x3f, 0x10, 0x9f, 0x2d, 0x22, 0x21, 0x1f,
  0x5b, 0x46, 0x42, 0x3e, 0xb6, 0x90, 0x84, 0x7c, 0x4c, 0x09, 0x09, 0xf8,
  0x98, 0x22, 0x12, 0xf0, 0x31, 0x65, 0x24, 0xe0, 0x33, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x95, 0x5c, 0xb0, 0xc5, 0x30, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0xd5, 0x5c, 0xb4, 0xc5, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x15, 0x5d, 0xb8, 0xc5, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06,
  0x55, 0x5d, 0xdc, 0xc4, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x95,
  0x5d, 0xe0, 0xc4, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xd5, 0x5d,
  0xe4, 0xc4, 0x60, 0xc3, 0x4a, 0xc8, 0xc7, 0x06, 0x96, 0x90, 0x8f, 0x0d,
  0x2d, 0x21, 0x1f, 0xd3, 0x64, 0x42, 0x3e, 0xa6, 0xcd, 0x84, 0x7c, 0x4c,
  0xa3, 0x09, 0xf9, 0x98, 0x4c, 0x0c, 0xf1, 0xb1, 0xe0, 0x80, 0x8f, 0xd1,
  0x04, 0x11, 0x1f, 0x0b, 0x10, 0xf8, 0x98, 0x4d, 0x14, 0xf1, 0xb1, 0x20,
  0x81, 0xcf, 0x74, 0x03, 0x56, 0x6c, 0xd3, 0x0d, 0x18, 0xb1, 0x4d, 0x37,
  0x60, 0xc3, 0x56, 0x23, 0x31, 0x1a, 0x58, 0x23, 0x41, 0x1a, 0x38, 0x62,
  0xe0, 0x00, 0x20, 0x08, 0x06, 0xd1, 0x6a, 0x9c, 0xc5, 0x4a, 0x08, 0x01,
  0x5a, 0x14, 0xc4, 0x10, 0x06, 0x73, 0x31, 0x6c, 0x40, 0xc4, 0x02, 0x19,
  0x0c, 0xc0, 0xb0, 0x01, 0x01, 0x0b, 0x63, 0x30, 0x00, 0xc3, 0x06, 0xc4,
  0x2b, 0x88, 0xc1, 0x00, 0x0c, 0x1b, 0x10, 0xae, 0x10, 0x06, 0x03, 0x30,
  0x4b, 0x30, 0x0c, 0x54, 0x00, 0xa8, 0x20, 0xb0, 0x47, 0x30, 0x50, 0x01,
  0xa0, 0x82, 0xc0, 0x1e, 0xc1, 0x40, 0x05, 0x80, 0x0a, 0x02, 0x7b, 0x04,
  0x03, 0x15, 0x00, 0x2a, 0x08, 0xec, 0x11, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0xc1, 0xb6, 0x1a, 0x6d, 0xb1, 0x12, 0xa6, 0x31, 0x9a, 0x10, 0x04,
  0xc3, 0x0d, 0x81, 0x6a, 0x80, 0xc1, 0x2c, 0x43, 0x42, 0x04, 0x23, 0x06,
  0x06, 0x00, 0x82, 0x60, 0x30, 0xc5, 0xc6, 0x5c, 0xa0, 0x46, 0xb5, 0xc4,
  0x5d, 0xe8, 0x70, 0x43, 0xa0, 0x1a, 0x60, 0x30, 0xcb, 0x50, 0x18, 0x41,
  0xbd, 0x44, 0x6b, 0xc0, 0x0a, 0x86, 0xde, 0x60, 0x8d, 0x80, 0x02, 0x60,
  0xac, 0x60, 0xf0, 0x0d, 0xd7, 0x18, 0x28, 0x00, 0xc6, 0x0a, 0x86, 0xdf,
  0x80, 0x8d, 0x82, 0x02, 0x60, 0xac, 0x60, 0x00, 0x0f, 0xd9, 0x38, 0x28,
  0x00, 0x46, 0xe1, 0x44, 0x6c, 0xc0, 0x0a, 0x06, 0xf3, 0xa8, 0x8d, 0x80,
  0x02, 0x60, 0xac, 0x60, 0x38, 0x8f, 0xdb, 0x18, 0x28, 0x00, 0xc6, 0x0a,
  0x06, 0xf4, 0xc8, 0x8d, 0x82, 0x02, 0x60, 0xac, 0x60, 0x48, 0x8f, 0xdd,
  0x38, 0x28, 0x00, 0x46, 0x85, 0x05, 0x6b, 0xc0, 0x0a, 0x86, 0xf7, 0xf0,
  0x8d, 0x80, 0x02, 0x60, 0xac, 0x60, 0x80, 0x0f, 0xf0, 0x18, 0x28, 0x00,
  0xc6, 0x0a, 0x86, 0xf8, 0x10, 0x8f, 0x82, 0x02, 0x60, 0xac, 0x60, 0x90,
  0x0f, 0xf2, 0x38, 0x28, 0x00, 0x86, 0x65, 0x64, 0x00, 0x1f, 0xc3, 0xc8,
  0x00, 0x3e, 0x76, 0x91, 0x01, 0x7c, 0xcc, 0x22, 0x03, 0xf8, 0x18, 0x41,
  0xc1, 0xc7, 0x88, 0x09, 0x3e, 0x46, 0x48, 0xf0, 0x31, 0x22, 0x82, 0x8f,
  0x11, 0x0f, 0x7c, 0x8c, 0x70, 0xe0, 0x63, 0x44, 0x03, 0x1f, 0x23, 0x18,
  0xf8, 0x18, 0xe1, 0x1a, 0xf2, 0x31, 0xe2, 0x35, 0xe4, 0x63, 0x04, 0x6c,
  0xc8, 0xc7, 0x88, 0xd8, 0x90, 0xcf, 0x70, 0x04, 0xe1, 0x1a, 0xc4, 0x37,
  0x1c, 0x41, 0xbc, 0x06, 0xf1, 0x0d, 0x47, 0x10, 0xb0, 0x41, 0x7c, 0xb6,
  0xd8, 0x86, 0x7c, 0x6c, 0xb9, 0x0d, 0xf9, 0xd8, 0x82, 0x1b, 0xf2, 0x31,
  0xa5, 0x36, 0xe0, 0x63, 0x8a, 0x6d, 0xc0, 0xc7, 0x94, 0xdb, 0x80, 0xcf,
  0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x54, 0x26, 0x02, 0x22, 0xc3, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x54, 0x27, 0x12, 0x22, 0xc3, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0x54, 0x28, 0x22, 0x22, 0xc3, 0x88, 0x81, 0x01,
  0x80, 0x20, 0x18, 0x54, 0x29, 0xb2, 0x1e, 0xc3, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x54, 0x2a, 0xc2, 0x1e, 0xc3, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0x54, 0x2b, 0xd2, 0x1e, 0x83, 0x0d, 0xbf, 0x21, 0x1f, 0x1b, 0xc0,
  0x43, 0x3e, 0x36, 0x84, 0x87, 0x7c, 0x4c, 0x33, 0x0f, 0xf9, 0x98, 0x76,
  0x1e, 0xf2, 0x31, 0x0d, 0x3d, 0xe4, 0x63, 0xe6, 0x31, 0xc4, 0xc7, 0x82,
  0x03, 0x3e, 0x86, 0x1e, 0x44, 0x7c, 0x2c, 0x40, 0xe0, 0x63, 0xea, 0x51,
  0xc4, 0xc7, 0x82, 0x04, 0x3e, 0xd3, 0x0d, 0x58, 0xb1, 0x4d, 0x37, 0x60,
  0xc4, 0x36, 0xdd, 0x80, 0x0d, 0x5b, 0xdd, 0x86, 0x8d, 0x60, 0xdd, 0xc6,
  0x8d, 0xe0, 0x88, 0x81, 0x03, 0x80, 0x20, 0x18, 0x44, 0x3f, 0xb2, 0x1f,
  0xe0, 0x21, 0x04, 0xfc, 0x51, 0x10, 0x43, 0x18, 0x9c, 0xc8, 0xb0, 0x01,
  0x51, 0x16, 0x64, 0x30, 0x00, 0xc3, 0x06, 0x04, 0x59, 0x8c, 0xc1, 0x00,
  0x0c, 0x1b, 0x10, 0x63, 0x21, 0x06, 0x03, 0x30, 0x6c, 0x40, 0x88, 0x45,
  0x18, 0x0c, 0xc0, 0x2c, 0x81, 0x31, 0x50, 0x01, 0xa0, 0x42, 0x81, 0x16,
  0xc4, 0x40, 0x05, 0x80, 0x0a, 0x05, 0x5a, 0x10, 0x03, 0x15, 0x00, 0x2a,
  0x14, 0x68, 0x41, 0x0c, 0x54, 0x00, 0xa8, 0x50, 0xa0, 0x05, 0x31, 0x62,
  0x70, 0x00, 0x20, 0x08, 0x06, 0xdb, 0x8f, 0x84, 0xc8, 0x6f, 0xe8, 0xc8,
  0x68, 0x42, 0x10, 0x0c, 0x37, 0x04, 0x3a, 0x02, 0x06, 0xb3, 0x0c, 0xc9,
  0x11, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x54, 0x26, 0x27, 0xc2,
  0x23, 0xc3, 0x0d, 0xe1, 0xd1, 0x23, 0x60, 0x30, 0xcb, 0x80, 0x24, 0x01,
  0xd5, 0x07, 0x30, 0xa8, 0x3e, 0x80, 0x41, 0xf5, 0x01, 0x0c, 0xaa, 0x0f,
  0x60, 0x50, 0x7d, 0x00, 0x83, 0xea, 0x03, 0x18, 0x54, 0x1f, 0xc0, 0xa0,
  0xfa, 0x00, 0x06, 0xd5, 0x07, 0x30, 0xa8, 0x3e, 0x80, 0x41, 0xf5, 0x01,
  0x0c, 0xaa, 0x0f, 0x60, 0x18, 0x43, 0xc1, 0xc7, 0x18, 0x0a, 0x3e, 0xc6,
  0x50, 0xf0, 0x31, 0x86, 0x82, 0x8f, 0x11, 0x0c, 0x7c, 0x8c, 0x60, 0xe0,
  0x63, 0x04, 0x03, 0x1f, 0x23, 0x18, 0xf8, 0x18, 0xc1, 0xc0, 0xc7, 0x08,
  0x06, 0x3e, 0x46, 0x30, 0xf0, 0x31, 0x82, 0x81, 0x8f, 0x11, 0x32, 0x22,
  0x1f, 0x23, 0x66, 0x44, 0x3e, 0x46, 0xd0, 0x88, 0x7c, 0x8c, 0xa8, 0x11,
  0xf9, 0x0c, 0x47, 0x10, 0x32, 0x42, 0x7c, 0xc3, 0x11, 0xc4, 0x8c, 0x10,
  0xdf, 0x70, 0x04, 0x41, 0x23, 0xc4, 0x67, 0x8b, 0x8e, 0xc8, 0xc7, 0x96,
  0x1d, 0x91, 0x8f, 0x2d, 0x3c, 0x22, 0x1f, 0x53, 0x72, 0x04, 0x3e, 0xa6,
  0xe8, 0x08, 0x7c, 0x4c, 0xd9, 0x11, 0xf8, 0x8c, 0x18, 0x18, 0x00, 0x08,
  0x82, 0x41, 0xa5, 0x2a, 0xa4, 0x32, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x41, 0xb5, 0x2a, 0xa5, 0x32, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41,
  0xc5, 0x2a, 0xa6, 0x32, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0xd5,
  0x2a, 0x6f, 0x32, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0xe5, 0x2a,
  0x70, 0x32, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0xf5, 0x2a, 0x71,
  0x32, 0xd8, 0x30, 0x26, 0xf2, 0xb1, 0x81, 0x4c, 0xe4, 0x63, 0x43, 0x99,
  0xc8, 0xc7, 0x34, 0x35, 0x91, 0x8f, 0x69, 0x6b, 0x22, 0x1f, 0xd3, 0xd8,
  0x44, 0x3e, 0xa6, 0x26, 0x43, 0x7c, 0x2c, 0x38, 0xe0, 0x63, 0x6c, 0x42,
  0xc4, 0xc7, 0x02, 0x04, 0x3e, 0xe6, 0x26, 0x45, 0x7c, 0x2c, 0x48, 0xe0,
  0x33, 0xdd, 0x80, 0x15, 0xdb, 0x74, 0x03, 0x46, 0x6c, 0xd3, 0x0d, 0xd8,
  0xb0, 0xd5, 0x8e, 0xd8, 0x0a, 0xd6, 0x8e, 0xdc, 0x0a, 0x8e, 0x18, 0x38,
  0x00, 0x08, 0x82, 0x41, 0x34, 0x2e, 0x7f, 0x52, 0x26, 0x42, 0x00, 0x2a,
  0x05, 0x31, 0x84, 0xc1, 0xaa, 0xcc, 0x12, 0x24, 0x18, 0x10, 0x03, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x5b, 0x86, 0x3f, 0x08, 0xdc, 0x60, 0xcb, 0x10,
  0x0a, 0x81, 0x1b, 0x6c, 0x19, 0x46, 0x21, 0x70, 0x83, 0x2d, 0x43, 0x29,
  0x04, 0x6e, 0xb0, 0x65, 0x60, 0x85, 0xc0, 0x0d, 0xb6, 0x0c, 0xae, 0x10,
  0xb8, 0xc1, 0x96, 0x01, 0x16, 0x02, 0x37, 0xd8, 0x32, 0xc8, 0x42, 0xe0,
  0x06, 0x5b, 0x86, 0x5a, 0x08, 0xdc, 0x60, 0xcb, 0x70, 0x0b, 0x81, 0x1b,
  0x6c, 0x19, 0x72, 0x21, 0x70, 0x83, 0x2d, 0xc3, 0x2e, 0x04, 0x6e, 0xb0,
  0x65, 0xf0, 0x85, 0xc0, 0x0d, 0xb6, 0x0c, 0xe0, 0x10, 0xb8, 0xc1, 0x96,
  0x41, 0x1c, 0x02, 0x37, 0xd8, 0x32, 0x90, 0x43, 0xe0, 0x06, 0x5b, 0x06,
  0x9b, 0x08, 0xdc, 0x60, 0xcb, 0x70, 0x13, 0x81, 0x1b, 0x6c, 0x19, 0x70,
  0x22, 0x70, 0x83, 0x2d, 0x43, 0x4e, 0x04, 0x6e, 0xb0, 0x65, 0x48, 0x8b,
  0xc0, 0x0d, 0xb6, 0x0c, 0x6b, 0x11, 0xb8, 0xc1, 0x96, 0xa1, 0x2d, 0x02,
  0x37, 0xd8, 0x32, 0xbc, 0x45, 0xe0, 0x06, 0x5b, 0x06, 0xb9, 0x08, 0xdc,
  0x60, 0xcb, 0x40, 0x17, 0x81, 0x1b, 0x6c, 0x19, 0xec, 0x22, 0x70, 0x83,
  0x2d, 0x03, 0x5e, 0x04, 0x6e, 0xb0, 0x65, 0xd8, 0x8b, 0xc0, 0x0d, 0xb6,
  0x0c, 0x7d, 0x11, 0xb8, 0xc1, 0x96, 0xe1, 0x2f, 0x02, 0x37, 0xd8, 0x32,
  0x84, 0x46, 0xe0, 0x06, 0x5b, 0x86, 0xf9, 0x08, 0xdc, 0x60, 0xcb, 0x40,
  0x1f, 0x81, 0x1b, 0x6c, 0x19, 0xea, 0x23, 0x70, 0x83, 0x2d, 0x83, 0x7d,
  0x04, 0x6e, 0xb0, 0x65, 0x18, 0x91, 0xc0, 0x0d, 0xb6, 0x0c, 0x24, 0x12,
  0xb8, 0xc1, 0x96, 0xa1, 0x44, 0x02, 0x37, 0xd8, 0x32, 0x98, 0x48, 0xe0,
  0x06, 0x5b, 0x86, 0x13, 0x09, 0xdc, 0x60, 0xcb, 0x80, 0x22, 0x81, 0x1b,
  0x6c, 0x19, 0x52, 0x24, 0x70, 0x83, 0x2d, 0x83, 0x8a, 0x04, 0x6e, 0xb0,
  0x65, 0x58, 0x91, 0xc0, 0x0d, 0xb6, 0x0c, 0x2c, 0x12, 0xb8, 0xc1, 0x96,
  0xa1, 0x45, 0x02, 0x37, 0xd8, 0x32, 0xb8, 0x48, 0xe0, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
