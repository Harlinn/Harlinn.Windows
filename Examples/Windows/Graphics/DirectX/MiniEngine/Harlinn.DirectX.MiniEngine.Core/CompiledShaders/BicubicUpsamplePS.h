#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float       
; TexCoord                 0   xy          1     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyz         0   TARGET   float   xyz 
;
; shader hash: eed999c4d6af411968ad1aa0058dc145
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TexCoord                 0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer Constants
; {
;
;   struct Constants
;   {
;
;       uint2 TextureSize;                            ; Offset:    0
;       float A;                                      ; Offset:    8
;   
;   } Constants;                                      ; Offset:    0 Size:    12
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; Constants                         cbuffer      NA          NA     CB0            cb0     1
; ColorTex                          texture     f32          2d      T0             t0     1
;
;
; ViewId state:
;
; Number of inputs: 6, outputs: 3
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5 }
;   output 1 depends on inputs: { 4, 5 }
;   output 2 depends on inputs: { 4, 5 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%Constants = type { <2 x i32>, float }

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %2, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %6 = extractvalue %dx.types.CBufRet.i32 %5, 0
  %7 = extractvalue %dx.types.CBufRet.i32 %5, 1
  %8 = uitofp i32 %6 to float
  %9 = uitofp i32 %7 to float
  %10 = fmul fast float %8, %3
  %11 = fmul fast float %9, %4
  %12 = fadd fast float %10, 5.000000e-01
  %13 = fadd fast float %11, 5.000000e-01
  %14 = call float @dx.op.unary.f32(i32 22, float %12)  ; Frc(value)
  %15 = call float @dx.op.unary.f32(i32 22, float %13)  ; Frc(value)
  %16 = fptosi float %12 to i32
  %17 = fptosi float %13 to i32
  %18 = add i32 %6, -1
  %19 = add i32 %7, -1
  %20 = add nsw i32 %16, -2
  %21 = call i32 @dx.op.binary.i32(i32 37, i32 %20, i32 0)  ; IMax(a,b)
  %22 = add nsw i32 %16, -1
  %23 = call i32 @dx.op.binary.i32(i32 37, i32 %22, i32 0)  ; IMax(a,b)
  %24 = call i32 @dx.op.binary.i32(i32 40, i32 %16, i32 %18)  ; UMin(a,b)
  %25 = add nsw i32 %16, 1
  %26 = call i32 @dx.op.binary.i32(i32 40, i32 %25, i32 %18)  ; UMin(a,b)
  %27 = add nsw i32 %17, -2
  %28 = call i32 @dx.op.binary.i32(i32 37, i32 %27, i32 0)  ; IMax(a,b)
  %29 = add nsw i32 %17, -1
  %30 = call i32 @dx.op.binary.i32(i32 37, i32 %29, i32 0)  ; IMax(a,b)
  %31 = call i32 @dx.op.binary.i32(i32 40, i32 %17, i32 %19)  ; UMin(a,b)
  %32 = add nsw i32 %17, 1
  %33 = call i32 @dx.op.binary.i32(i32 40, i32 %32, i32 %19)  ; UMin(a,b)
  %34 = fadd fast float %14, 1.000000e+00
  %35 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %36 = extractvalue %dx.types.CBufRet.f32 %35, 2
  %37 = fadd fast float %14, -4.000000e+00
  %38 = fmul fast float %34, %37
  %39 = fadd fast float %38, 8.000000e+00
  %40 = fmul fast float %39, %34
  %41 = fadd fast float %40, -4.000000e+00
  %42 = fmul fast float %36, %41
  %43 = fmul fast float %14, %14
  %44 = fadd fast float %36, 2.000000e+00
  %45 = fmul fast float %44, %14
  %46 = fsub fast float -3.000000e+00, %36
  %47 = fadd fast float %46, %45
  %48 = fmul fast float %43, %47
  %49 = fadd fast float %48, 1.000000e+00
  %50 = fsub fast float 1.000000e+00, %14
  %51 = fmul fast float %50, %50
  %52 = fmul fast float %44, %50
  %53 = fadd fast float %46, %52
  %54 = fmul fast float %51, %53
  %55 = fadd fast float %54, 1.000000e+00
  %56 = fsub fast float 2.000000e+00, %14
  %57 = fsub fast float -3.000000e+00, %14
  %58 = fmul fast float %56, %57
  %59 = fadd fast float %58, 8.000000e+00
  %60 = fmul fast float %59, %56
  %61 = fadd fast float %60, -4.000000e+00
  %62 = fmul fast float %36, %61
  %63 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %26, i32 %28, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %64 = extractvalue %dx.types.ResRet.f32 %63, 0
  %65 = extractvalue %dx.types.ResRet.f32 %63, 1
  %66 = extractvalue %dx.types.ResRet.f32 %63, 2
  %67 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %24, i32 %28, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %68 = extractvalue %dx.types.ResRet.f32 %67, 0
  %69 = extractvalue %dx.types.ResRet.f32 %67, 1
  %70 = extractvalue %dx.types.ResRet.f32 %67, 2
  %71 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %23, i32 %28, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %72 = extractvalue %dx.types.ResRet.f32 %71, 0
  %73 = extractvalue %dx.types.ResRet.f32 %71, 1
  %74 = extractvalue %dx.types.ResRet.f32 %71, 2
  %75 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %21, i32 %28, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %76 = extractvalue %dx.types.ResRet.f32 %75, 0
  %77 = extractvalue %dx.types.ResRet.f32 %75, 1
  %78 = extractvalue %dx.types.ResRet.f32 %75, 2
  %79 = fmul fast float %76, %42
  %80 = fmul fast float %77, %42
  %81 = fmul fast float %78, %42
  %82 = fmul fast float %72, %49
  %83 = fmul fast float %73, %49
  %84 = fmul fast float %74, %49
  %85 = fmul fast float %68, %55
  %86 = fmul fast float %69, %55
  %87 = fmul fast float %70, %55
  %88 = fmul fast float %64, %62
  %89 = fmul fast float %65, %62
  %90 = fmul fast float %66, %62
  %91 = fadd fast float %85, %88
  %92 = fadd fast float %91, %82
  %93 = fadd fast float %92, %79
  %94 = fadd fast float %86, %89
  %95 = fadd fast float %94, %83
  %96 = fadd fast float %95, %80
  %97 = fadd fast float %87, %90
  %98 = fadd fast float %97, %84
  %99 = fadd fast float %98, %81
  %100 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %26, i32 %30, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %101 = extractvalue %dx.types.ResRet.f32 %100, 0
  %102 = extractvalue %dx.types.ResRet.f32 %100, 1
  %103 = extractvalue %dx.types.ResRet.f32 %100, 2
  %104 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %24, i32 %30, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %105 = extractvalue %dx.types.ResRet.f32 %104, 0
  %106 = extractvalue %dx.types.ResRet.f32 %104, 1
  %107 = extractvalue %dx.types.ResRet.f32 %104, 2
  %108 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %23, i32 %30, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %109 = extractvalue %dx.types.ResRet.f32 %108, 0
  %110 = extractvalue %dx.types.ResRet.f32 %108, 1
  %111 = extractvalue %dx.types.ResRet.f32 %108, 2
  %112 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %21, i32 %30, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %113 = extractvalue %dx.types.ResRet.f32 %112, 0
  %114 = extractvalue %dx.types.ResRet.f32 %112, 1
  %115 = extractvalue %dx.types.ResRet.f32 %112, 2
  %116 = fmul fast float %113, %42
  %117 = fmul fast float %114, %42
  %118 = fmul fast float %115, %42
  %119 = fmul fast float %109, %49
  %120 = fmul fast float %110, %49
  %121 = fmul fast float %111, %49
  %122 = fmul fast float %105, %55
  %123 = fmul fast float %106, %55
  %124 = fmul fast float %107, %55
  %125 = fmul fast float %101, %62
  %126 = fmul fast float %102, %62
  %127 = fmul fast float %103, %62
  %128 = fadd fast float %122, %125
  %129 = fadd fast float %128, %119
  %130 = fadd fast float %129, %116
  %131 = fadd fast float %123, %126
  %132 = fadd fast float %131, %120
  %133 = fadd fast float %132, %117
  %134 = fadd fast float %124, %127
  %135 = fadd fast float %134, %121
  %136 = fadd fast float %135, %118
  %137 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %26, i32 %31, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %138 = extractvalue %dx.types.ResRet.f32 %137, 0
  %139 = extractvalue %dx.types.ResRet.f32 %137, 1
  %140 = extractvalue %dx.types.ResRet.f32 %137, 2
  %141 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %24, i32 %31, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %142 = extractvalue %dx.types.ResRet.f32 %141, 0
  %143 = extractvalue %dx.types.ResRet.f32 %141, 1
  %144 = extractvalue %dx.types.ResRet.f32 %141, 2
  %145 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %23, i32 %31, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %146 = extractvalue %dx.types.ResRet.f32 %145, 0
  %147 = extractvalue %dx.types.ResRet.f32 %145, 1
  %148 = extractvalue %dx.types.ResRet.f32 %145, 2
  %149 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %21, i32 %31, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %150 = extractvalue %dx.types.ResRet.f32 %149, 0
  %151 = extractvalue %dx.types.ResRet.f32 %149, 1
  %152 = extractvalue %dx.types.ResRet.f32 %149, 2
  %153 = fmul fast float %150, %42
  %154 = fmul fast float %151, %42
  %155 = fmul fast float %152, %42
  %156 = fmul fast float %146, %49
  %157 = fmul fast float %147, %49
  %158 = fmul fast float %148, %49
  %159 = fmul fast float %142, %55
  %160 = fmul fast float %143, %55
  %161 = fmul fast float %144, %55
  %162 = fmul fast float %138, %62
  %163 = fmul fast float %139, %62
  %164 = fmul fast float %140, %62
  %165 = fadd fast float %159, %162
  %166 = fadd fast float %165, %156
  %167 = fadd fast float %166, %153
  %168 = fadd fast float %160, %163
  %169 = fadd fast float %168, %157
  %170 = fadd fast float %169, %154
  %171 = fadd fast float %161, %164
  %172 = fadd fast float %171, %158
  %173 = fadd fast float %172, %155
  %174 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %26, i32 %33, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %175 = extractvalue %dx.types.ResRet.f32 %174, 0
  %176 = extractvalue %dx.types.ResRet.f32 %174, 1
  %177 = extractvalue %dx.types.ResRet.f32 %174, 2
  %178 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %24, i32 %33, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %179 = extractvalue %dx.types.ResRet.f32 %178, 0
  %180 = extractvalue %dx.types.ResRet.f32 %178, 1
  %181 = extractvalue %dx.types.ResRet.f32 %178, 2
  %182 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %23, i32 %33, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %183 = extractvalue %dx.types.ResRet.f32 %182, 0
  %184 = extractvalue %dx.types.ResRet.f32 %182, 1
  %185 = extractvalue %dx.types.ResRet.f32 %182, 2
  %186 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %21, i32 %33, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %187 = extractvalue %dx.types.ResRet.f32 %186, 0
  %188 = extractvalue %dx.types.ResRet.f32 %186, 1
  %189 = extractvalue %dx.types.ResRet.f32 %186, 2
  %190 = fmul fast float %187, %42
  %191 = fmul fast float %188, %42
  %192 = fmul fast float %189, %42
  %193 = fmul fast float %183, %49
  %194 = fmul fast float %184, %49
  %195 = fmul fast float %185, %49
  %196 = fmul fast float %179, %55
  %197 = fmul fast float %180, %55
  %198 = fmul fast float %181, %55
  %199 = fmul fast float %175, %62
  %200 = fmul fast float %176, %62
  %201 = fmul fast float %177, %62
  %202 = fadd fast float %196, %199
  %203 = fadd fast float %202, %193
  %204 = fadd fast float %203, %190
  %205 = fadd fast float %197, %200
  %206 = fadd fast float %205, %194
  %207 = fadd fast float %206, %191
  %208 = fadd fast float %198, %201
  %209 = fadd fast float %208, %195
  %210 = fadd fast float %209, %192
  %211 = fadd fast float %15, 1.000000e+00
  %212 = fadd fast float %15, -4.000000e+00
  %213 = fmul fast float %211, %212
  %214 = fadd fast float %213, 8.000000e+00
  %215 = fmul fast float %214, %211
  %216 = fadd fast float %215, -4.000000e+00
  %217 = fmul fast float %36, %216
  %218 = fmul fast float %15, %15
  %219 = fmul fast float %44, %15
  %220 = fadd fast float %46, %219
  %221 = fmul fast float %218, %220
  %222 = fadd fast float %221, 1.000000e+00
  %223 = fsub fast float 1.000000e+00, %15
  %224 = fmul fast float %223, %223
  %225 = fmul fast float %44, %223
  %226 = fadd fast float %46, %225
  %227 = fmul fast float %224, %226
  %228 = fadd fast float %227, 1.000000e+00
  %229 = fsub fast float 2.000000e+00, %15
  %230 = fsub fast float -3.000000e+00, %15
  %231 = fmul fast float %229, %230
  %232 = fadd fast float %231, 8.000000e+00
  %233 = fmul fast float %232, %229
  %234 = fadd fast float %233, -4.000000e+00
  %235 = fmul fast float %36, %234
  %236 = fmul fast float %217, %93
  %237 = fmul fast float %217, %96
  %238 = fmul fast float %217, %99
  %239 = fmul fast float %222, %130
  %240 = fmul fast float %222, %133
  %241 = fmul fast float %222, %136
  %242 = fadd fast float %239, %236
  %243 = fadd fast float %240, %237
  %244 = fadd fast float %241, %238
  %245 = fmul fast float %228, %167
  %246 = fmul fast float %228, %170
  %247 = fmul fast float %228, %173
  %248 = fmul fast float %235, %204
  %249 = fmul fast float %235, %207
  %250 = fmul fast float %235, %210
  %251 = fadd fast float %242, %248
  %252 = fadd fast float %251, %245
  %253 = fadd fast float %243, %249
  %254 = fadd fast float %253, %246
  %255 = fadd fast float %244, %250
  %256 = fadd fast float %255, %247
  %257 = fcmp fast olt float %252, 0x3F69A5C380000000
  %258 = fcmp fast olt float %254, 0x3F69A5C380000000
  %259 = fcmp fast olt float %256, 0x3F69A5C380000000
  %260 = fmul fast float %252, 0x4029D70A40000000
  %261 = fmul fast float %254, 0x4029D70A40000000
  %262 = fmul fast float %256, 0x4029D70A40000000
  %263 = call float @dx.op.unary.f32(i32 23, float %252)  ; Log(value)
  %264 = call float @dx.op.unary.f32(i32 23, float %254)  ; Log(value)
  %265 = call float @dx.op.unary.f32(i32 23, float %256)  ; Log(value)
  %266 = fmul fast float %263, 0x3FDAAAAAA0000000
  %267 = fmul fast float %264, 0x3FDAAAAAA0000000
  %268 = fmul fast float %265, 0x3FDAAAAAA0000000
  %269 = call float @dx.op.unary.f32(i32 21, float %266)  ; Exp(value)
  %270 = call float @dx.op.unary.f32(i32 21, float %267)  ; Exp(value)
  %271 = call float @dx.op.unary.f32(i32 21, float %268)  ; Exp(value)
  %272 = fmul fast float %269, 0x3FF0E147A0000000
  %273 = fmul fast float %270, 0x3FF0E147A0000000
  %274 = fmul fast float %271, 0x3FF0E147A0000000
  %275 = fadd fast float %272, 0xBFAC28F5C0000000
  %276 = fadd fast float %273, 0xBFAC28F5C0000000
  %277 = fadd fast float %274, 0xBFAC28F5C0000000
  %278 = select i1 %257, float %260, float %275
  %279 = select i1 %258, float %261, float %276
  %280 = select i1 %259, float %262, float %277
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %278)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %279)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %280)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!10}
!dx.entryPoints = !{!11}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 2}
!2 = !{i32 1, i32 6}
!3 = !{!"ps", i32 6, i32 2}
!4 = !{!5, null, !8, null}
!5 = !{!6}
!6 = !{i32 0, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{!9}
!9 = !{i32 0, %Constants* undef, !"", i32 0, i32 0, i32 1, i32 12, null}
!10 = !{[8 x i32] [i32 6, i32 3, i32 0, i32 0, i32 0, i32 0, i32 7, i32 7]}
!11 = !{void ()* @main, !"main", !12, !4, null}
!12 = !{!13, !18, null}
!13 = !{!14, !16}
!14 = !{i32 0, !"SV_Position", i8 9, i8 3, !15, i8 4, i32 1, i8 4, i32 0, i8 0, null}
!15 = !{i32 0}
!16 = !{i32 1, !"TexCoord", i8 9, i8 0, !15, i8 2, i32 1, i8 2, i32 1, i8 0, !17}
!17 = !{i32 3, i32 3}
!18 = !{!19}
!19 = !{i32 0, !"SV_Target", i8 9, i8 16, !15, i8 0, i32 1, i8 3, i32 0, i8 0, !20}
!20 = !{i32 3, i32 7}

#endif

const unsigned char g_pBicubicUpsamplePS[] = {
  0x44, 0x58, 0x42, 0x43, 0x34, 0x63, 0x5d, 0xf4, 0x8b, 0xa6, 0x75, 0xf3,
  0xa2, 0xcb, 0xa0, 0x79, 0x9f, 0xbb, 0x97, 0xe5, 0x01, 0x00, 0x00, 0x00,
  0x0b, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00,
  0xcf, 0x01, 0x00, 0x00, 0xdf, 0x02, 0x00, 0x00, 0x87, 0x0a, 0x00, 0x00,
  0xa3, 0x0a, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x5d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x00, 0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64,
  0x00, 0x4f, 0x53, 0x47, 0x31, 0x32, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x50,
  0x53, 0x56, 0x30, 0xd8, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00,
  0x54, 0x65, 0x78, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x03, 0x03,
  0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x01, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x43, 0x10, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0x08,
  0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x7f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x04,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0x7f, 0x7f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x53, 0x54, 0x41, 0x54, 0xa0, 0x07, 0x00, 0x00, 0x62,
  0x00, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x02,
  0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x88, 0x07, 0x00, 0x00, 0x42,
  0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0x0b,
  0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07,
  0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92,
  0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80,
  0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38,
  0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43,
  0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11,
  0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04,
  0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b,
  0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84,
  0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff,
  0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x32,
  0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04,
  0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b,
  0x84, 0xc4, 0x4c, 0x10, 0x94, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66,
  0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44,
  0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x0c, 0x03,
  0x31, 0x90, 0x52, 0x08, 0x82, 0x20, 0x08, 0x62, 0x6e, 0x1a, 0x2e, 0x7f,
  0xc2, 0x1e, 0x42, 0xf2, 0x57, 0x42, 0x5a, 0x89, 0xc9, 0x2f, 0x6e, 0x1b,
  0x15, 0xc3, 0x30, 0x0c, 0x04, 0x15, 0xf7, 0x0c, 0x97, 0x3f, 0x61, 0x0f,
  0x21, 0xf9, 0x21, 0xd0, 0x0c, 0x0b, 0x81, 0x82, 0xa7, 0x28, 0x0e, 0x01,
  0x11, 0x04, 0x41, 0x10, 0x04, 0x41, 0xd1, 0x51, 0xc3, 0xe5, 0x4f, 0xd8,
  0x43, 0x48, 0x3e, 0xb7, 0x51, 0xc5, 0x4a, 0x4c, 0x7e, 0x71, 0xdb, 0x88,
  0x18, 0x86, 0x61, 0x28, 0xc4, 0x44, 0x40, 0x04, 0x51, 0x47, 0x0d, 0x97,
  0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc8,
  0x6d, 0x23, 0x82, 0x20, 0x08, 0xa2, 0x10, 0x16, 0x01, 0x11, 0x74, 0xcd,
  0x11, 0x04, 0xc5, 0x80, 0x88, 0x82, 0x20, 0x32, 0xd2, 0x06, 0x02, 0x86,
  0x11, 0x86, 0x61, 0xa6, 0x36, 0x18, 0x07, 0x76, 0x08, 0x87, 0x79, 0x98,
  0x07, 0x37, 0xa0, 0x85, 0x72, 0xc0, 0x07, 0x7a, 0xa8, 0x07, 0x79, 0x28,
  0x07, 0x39, 0x20, 0x05, 0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07, 0x7a, 0x78,
  0x07, 0x79, 0xe0, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a, 0x60,
  0x03, 0x30, 0x98, 0x03, 0x3f, 0x00, 0x03, 0x3f, 0xd0, 0x03, 0x3d, 0x68,
  0x87, 0x74, 0x80, 0x87, 0x79, 0xf8, 0x05, 0x7a, 0xc8, 0x07, 0x78, 0x28,
  0x07, 0x14, 0x10, 0x33, 0x89, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3,
  0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43,
  0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3,
  0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03,
  0x1b, 0x80, 0xc1, 0x1c, 0xf8, 0x01, 0x18, 0xf8, 0x01, 0x12, 0x3a, 0x8f,
  0xbe, 0x61, 0x04, 0x81, 0xb8, 0x84, 0x73, 0x1a, 0x69, 0x02, 0x9a, 0x49,
  0x42, 0x42, 0x38, 0x90, 0x98, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13,
  0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68,
  0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a,
  0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71,
  0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d,
  0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x28, 0x40,
  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x61,
  0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8,
  0x13, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x90, 0x87, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x21, 0xcf, 0x05, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x43, 0x1e, 0x0d, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xb2, 0x40, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x32,
  0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6,
  0x04, 0x43, 0x22, 0x4a, 0xa0, 0x08, 0x46, 0x00, 0x8a, 0xa1, 0x24, 0x0a,
  0xa3, 0x0c, 0xca, 0xa1, 0x14, 0x0a, 0xa2, 0xf0, 0x05, 0x0a, 0x97, 0xa0,
  0x40, 0x0a, 0x81, 0x8a, 0x92, 0x28, 0x83, 0x42, 0x18, 0x01, 0x28, 0x82,
  0x02, 0xa1, 0xac, 0x06, 0x08, 0x9c, 0x01, 0x20, 0x71, 0x06, 0x80, 0xc6,
  0x19, 0x00, 0x22, 0xc7, 0x42, 0x8c, 0x01, 0x00, 0x00, 0xe0, 0x38, 0x00,
  0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x1a,
  0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73,
  0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71,
  0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a,
  0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b,
  0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0x22, 0x99, 0x20, 0x10, 0xca,
  0x06, 0x61, 0x20, 0x26, 0x08, 0xc4, 0xb2, 0x41, 0x30, 0x0c, 0x0a, 0x70,
  0x73, 0x13, 0x04, 0x82, 0xd9, 0x30, 0x20, 0x09, 0x31, 0x41, 0x00, 0x03,
  0x8f, 0xc8, 0xd0, 0x1b, 0xdb, 0x9b, 0x1c, 0x55, 0x19, 0xde, 0x04, 0x81,
  0x68, 0x36, 0x08, 0x46, 0xb3, 0x21, 0x31, 0x16, 0xc6, 0x30, 0x06, 0xc2,
  0x70, 0x36, 0x04, 0xcf, 0x04, 0x61, 0x0c, 0xc0, 0x80, 0xc9, 0xd0, 0x9b,
  0xdb, 0x1c, 0x5d, 0x98, 0x1b, 0xdd, 0xdc, 0x04, 0x81, 0x70, 0x36, 0x20,
  0x46, 0x24, 0x19, 0xc6, 0x30, 0x01, 0x1b, 0x02, 0x6a, 0x03, 0x01, 0x01,
  0x15, 0x30, 0x41, 0x10, 0x83, 0x8f, 0x0b, 0x55, 0x19, 0x1e, 0x5d, 0x9d,
  0x5c, 0xd9, 0x54, 0x9a, 0x5e, 0xd9, 0x04, 0x81, 0x78, 0x26, 0x08, 0x04,
  0x34, 0x41, 0x20, 0xa2, 0x09, 0x42, 0xd6, 0x6d, 0x40, 0x12, 0x2c, 0x33,
  0xb4, 0xad, 0xe1, 0x18, 0x04, 0x4d, 0x10, 0x08, 0x69, 0x03, 0x92, 0x78,
  0xd9, 0xa7, 0x35, 0x0d, 0xb7, 0x61, 0x98, 0x3a, 0x30, 0xd8, 0x30, 0x18,
  0x57, 0x18, 0x4c, 0x10, 0x04, 0x60, 0x03, 0xb0, 0x61, 0x30, 0xc8, 0x80,
  0x0c, 0x36, 0x04, 0x65, 0xb0, 0x61, 0x18, 0xc6, 0xc0, 0x0c, 0x26, 0x08,
  0x64, 0x10, 0x06, 0x1b, 0x02, 0x34, 0x20, 0xd1, 0x16, 0x96, 0xe6, 0xc6,
  0x65, 0xca, 0xea, 0x0b, 0xea, 0x6d, 0x2e, 0x8d, 0x2e, 0xed, 0xcd, 0x6d,
  0x82, 0x50, 0x5c, 0x13, 0x84, 0x02, 0xdb, 0x10, 0x18, 0x13, 0x84, 0x22,
  0x9b, 0x20, 0x14, 0xda, 0x86, 0xc5, 0x58, 0x03, 0x36, 0x68, 0x03, 0x37,
  0x78, 0x83, 0xe1, 0x0d, 0x0c, 0x38, 0x00, 0x88, 0x50, 0x95, 0xe1, 0x0d,
  0xbd, 0xbd, 0xc9, 0x91, 0x4d, 0x10, 0x8a, 0x6d, 0x83, 0x90, 0x65, 0x1b,
  0x96, 0x41, 0x0e, 0xd8, 0x00, 0x0e, 0xdc, 0x60, 0x0e, 0x86, 0x39, 0x18,
  0xe0, 0x80, 0x0e, 0x36, 0x08, 0x71, 0x50, 0x07, 0x4c, 0xa6, 0xac, 0xbe,
  0xa8, 0xc2, 0xe4, 0xce, 0xca, 0xe8, 0x26, 0x08, 0x05, 0xb7, 0x41, 0xc8,
  0xb4, 0x0d, 0x8b, 0x71, 0x07, 0x6c, 0x80, 0x07, 0x6e, 0x00, 0x07, 0x43,
  0x1b, 0x18, 0x70, 0x90, 0x07, 0x1b, 0x02, 0x3d, 0xd8, 0x30, 0xd8, 0xc1,
  0x1e, 0x00, 0x1b, 0x8a, 0x31, 0x50, 0x03, 0x3e, 0xb0, 0x00, 0x1a, 0x66,
  0x6c, 0x6f, 0x61, 0x74, 0x73, 0x13, 0x04, 0x62, 0x62, 0x91, 0xe6, 0x36,
  0x47, 0x37, 0x37, 0x41, 0x20, 0x28, 0x12, 0x69, 0x6e, 0x74, 0x73, 0x34,
  0xe6, 0xd2, 0xce, 0xbe, 0xd8, 0xc8, 0x68, 0xcc, 0xa5, 0x9d, 0x7d, 0xcd,
  0xd1, 0x11, 0xa1, 0x2b, 0xc3, 0xfb, 0x62, 0x7b, 0x0b, 0x23, 0x9b, 0x20,
  0x10, 0x15, 0x8b, 0xba, 0x34, 0x37, 0xba, 0xb9, 0x09, 0x02, 0x61, 0x6d,
  0x70, 0xfc, 0xe0, 0x0f, 0x40, 0x21, 0x14, 0x44, 0x61, 0x1a, 0x05, 0x82,
  0x14, 0xb2, 0x52, 0x30, 0x85, 0x53, 0x40, 0x85, 0x2a, 0x6c, 0x6c, 0x76,
  0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x82, 0xa0, 0x0a, 0x19,
  0x9e, 0x8b, 0x5d, 0x99, 0xdc, 0x5c, 0xda, 0x9b, 0xdb, 0x94, 0x80, 0x68,
  0x42, 0x86, 0xe7, 0x62, 0x17, 0xc6, 0x66, 0x57, 0x26, 0x37, 0x25, 0x30,
  0xea, 0x90, 0xe1, 0xb9, 0xcc, 0xa1, 0x85, 0x91, 0x95, 0xc9, 0x35, 0xbd,
  0x91, 0x95, 0xb1, 0x4d, 0x09, 0x92, 0x32, 0x64, 0x78, 0x2e, 0x72, 0x65,
  0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x82, 0xaa, 0x12, 0x19,
  0x9e, 0x0b, 0x5d, 0x1e, 0x5c, 0x59, 0x90, 0x9b, 0xdb, 0x1b, 0x5d, 0x18,
  0x5d, 0xda, 0x9b, 0xdb, 0xdc, 0x14, 0x21, 0x0c, 0xcc, 0xa0, 0x0e, 0x19,
  0x9e, 0x8b, 0x5d, 0x5a, 0xd9, 0x5d, 0x12, 0xd9, 0x14, 0x5d, 0x18, 0x5d,
  0xd9, 0x94, 0x00, 0x0d, 0xea, 0x90, 0xe1, 0xb9, 0x94, 0xb9, 0xd1, 0xc9,
  0xe5, 0x41, 0xbd, 0xa5, 0xb9, 0xd1, 0xcd, 0x4d, 0x09, 0xf8, 0xa0, 0x0b,
  0x19, 0x9e, 0xcb, 0xd8, 0x5b, 0x9d, 0x1b, 0x5d, 0x99, 0xdc, 0xdc, 0x94,
  0x00, 0x15, 0x00, 0x79, 0x18, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x33,
  0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98,
  0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33,
  0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05,
  0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43,
  0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08,
  0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78,
  0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1,
  0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33,
  0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e,
  0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03,
  0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60,
  0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80,
  0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8,
  0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18,
  0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee,
  0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c,
  0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c,
  0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43,
  0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3,
  0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83,
  0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21,
  0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xd1,
  0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06, 0xf6,
  0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f, 0xf4,
  0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x46,
  0x00, 0x0d, 0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9, 0xc8,
  0x6d, 0x9b, 0xc1, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15, 0x05,
  0x11, 0x95, 0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc, 0xb6,
  0x1d, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x04, 0x54, 0x51, 0x10, 0x51,
  0xe9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xf9, 0xc8, 0x6d, 0x1b, 0x82,
  0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13, 0x11, 0x02, 0xcd,
  0xb0, 0x10, 0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00, 0x83,
  0xd8, 0x3c, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x02, 0xd5, 0x70, 0xf9, 0xce,
  0xe3, 0x4b, 0x93, 0x13, 0x11, 0x28, 0x35, 0x3d, 0xd4, 0xe4, 0x17, 0xb7,
  0x6d, 0x05, 0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0xc4, 0x35, 0x51, 0x11,
  0x51, 0x3a, 0xc0, 0xe0, 0x17, 0xb7, 0x6d, 0x03, 0xcf, 0x70, 0xf9, 0xce,
  0xe3, 0x53, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x06, 0x40, 0x30, 0x00,
  0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0xd9, 0x99, 0xc4, 0xd6,
  0xaf, 0x41, 0x19, 0x68, 0xad, 0x1a, 0xa0, 0x05, 0x8d, 0xc1, 0x45, 0x44,
  0x58, 0x49, 0x4c, 0x60, 0x0d, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x58,
  0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x02, 0x01, 0x00, 0x00, 0x10,
  0x00, 0x00, 0x00, 0x48, 0x0d, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21,
  0x0c, 0x00, 0x00, 0x4f, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41,
  0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25,
  0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42,
  0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a,
  0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00,
  0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41,
  0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51,
  0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff,
  0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff,
  0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00,
  0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13,
  0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89,
  0x20, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20,
  0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84,
  0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10,
  0x94, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0,
  0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c,
  0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x0c, 0x03, 0x31, 0x90, 0x52, 0x08,
  0x82, 0x20, 0x08, 0x62, 0x6e, 0x1a, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2,
  0x57, 0x42, 0x5a, 0x89, 0xc9, 0x2f, 0x6e, 0x1b, 0x15, 0xc3, 0x30, 0x0c,
  0x04, 0x15, 0xf7, 0x0c, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x21, 0xd0,
  0x0c, 0x0b, 0x81, 0x82, 0xa7, 0x28, 0x0e, 0x01, 0x11, 0x04, 0x41, 0x10,
  0x04, 0x41, 0xd1, 0x51, 0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x3e, 0xb7,
  0x51, 0xc5, 0x4a, 0x4c, 0x7e, 0x71, 0xdb, 0x88, 0x18, 0x86, 0x61, 0x28,
  0xc4, 0x44, 0x40, 0x04, 0x51, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc8, 0x6d, 0x23, 0x82, 0x20,
  0x08, 0xa2, 0x10, 0x16, 0x01, 0x11, 0x74, 0xcd, 0x11, 0x04, 0xc5, 0x80,
  0x88, 0x82, 0x20, 0x32, 0xd2, 0x06, 0x02, 0x86, 0x11, 0x86, 0x61, 0xa6,
  0x36, 0x18, 0x07, 0x76, 0x08, 0x87, 0x79, 0x98, 0x07, 0x37, 0xa0, 0x85,
  0x72, 0xc0, 0x07, 0x7a, 0xa8, 0x07, 0x79, 0x28, 0x07, 0x39, 0x20, 0x05,
  0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07, 0x7a, 0x78, 0x07, 0x79, 0xe0, 0x03,
  0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a, 0x60, 0x03, 0x30, 0x98, 0x03,
  0x3f, 0x00, 0x03, 0x3f, 0xd0, 0x03, 0x3d, 0x68, 0x87, 0x74, 0x80, 0x87,
  0x79, 0xf8, 0x05, 0x7a, 0xc8, 0x07, 0x78, 0x28, 0x07, 0x14, 0x10, 0x33,
  0x89, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x01, 0x2d,
  0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29,
  0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f,
  0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0xc1, 0x1c,
  0xf8, 0x01, 0x18, 0xf8, 0x01, 0x12, 0x3a, 0x8f, 0xbe, 0x61, 0x04, 0x81,
  0xb8, 0x84, 0x73, 0x1a, 0x69, 0x02, 0x9a, 0x49, 0x42, 0x42, 0x38, 0x90,
  0x98, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87,
  0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87,
  0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00,
  0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0,
  0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60,
  0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60,
  0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0,
  0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40,
  0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x28, 0x40, 0x00, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x61, 0x80, 0x00, 0x08, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x13, 0x01, 0x01, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x87, 0x02, 0x02,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0xcf, 0x05,
  0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e,
  0x0d, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb2,
  0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19,
  0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a,
  0xa0, 0x08, 0x8a, 0x61, 0x04, 0xa0, 0x24, 0x0a, 0xa3, 0x0c, 0xca, 0x81,
  0x8a, 0x92, 0x28, 0x83, 0x42, 0x18, 0x01, 0x28, 0x82, 0x02, 0x21, 0x70,
  0x06, 0x80, 0xc6, 0x19, 0x00, 0x22, 0xc7, 0x42, 0x8c, 0x01, 0x00, 0x00,
  0xe0, 0x38, 0x00, 0x79, 0x18, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x1a,
  0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73,
  0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71,
  0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a,
  0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b,
  0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0x22, 0x99, 0x20, 0x10, 0xca,
  0x06, 0x61, 0x20, 0x26, 0x08, 0xc4, 0xb2, 0x41, 0x18, 0x0c, 0x0a, 0x70,
  0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08, 0x04, 0x33, 0x41, 0x00, 0x83,
  0x8b, 0xc0, 0x04, 0x81, 0x68, 0x36, 0x08, 0x4a, 0xb3, 0x21, 0x51, 0x16,
  0x46, 0x51, 0x06, 0x42, 0x71, 0x36, 0x04, 0xcf, 0x04, 0x61, 0x0c, 0xb0,
  0x09, 0x02, 0xe1, 0x6c, 0x40, 0x94, 0x88, 0x51, 0x94, 0x41, 0x02, 0x36,
  0x04, 0xd3, 0x06, 0x02, 0x02, 0x28, 0x60, 0x82, 0x40, 0x06, 0xd9, 0x86,
  0xc0, 0x9a, 0x20, 0x08, 0x00, 0x89, 0xb6, 0xb0, 0x34, 0x37, 0x2e, 0x53,
  0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x13, 0x84,
  0x22, 0x9a, 0x20, 0x14, 0xd2, 0x86, 0x40, 0x99, 0x20, 0x14, 0xd3, 0x04,
  0xa1, 0xa0, 0x36, 0x2c, 0x8a, 0xb6, 0x71, 0x9d, 0x37, 0x78, 0xca, 0x07,
  0x10, 0xa1, 0x2a, 0xc3, 0x1b, 0x7a, 0x7b, 0x93, 0x23, 0x9b, 0x20, 0x14,
  0xd5, 0x04, 0x81, 0x78, 0x36, 0x08, 0x63, 0x30, 0x06, 0x1b, 0x96, 0x21,
  0x0c, 0xb6, 0xaf, 0x13, 0x83, 0x41, 0x0c, 0x86, 0x8f, 0x0c, 0x36, 0x08,
  0x60, 0x50, 0x06, 0x4c, 0xa6, 0xac, 0xbe, 0xa8, 0xc2, 0xe4, 0xce, 0xca,
  0xe8, 0x26, 0x08, 0x85, 0x35, 0x41, 0x20, 0xa0, 0x0d, 0xc2, 0x18, 0xa4,
  0xc1, 0x86, 0x45, 0x39, 0x83, 0x0d, 0x0d, 0xba, 0x6f, 0xe0, 0x94, 0x4f,
  0x0d, 0x36, 0x04, 0x6b, 0xb0, 0x61, 0x30, 0x03, 0x36, 0x00, 0x36, 0x14,
  0x58, 0xd6, 0x06, 0x15, 0x50, 0x85, 0x8d, 0xcd, 0xae, 0xcd, 0x25, 0x8d,
  0xac, 0xcc, 0x8d, 0x6e, 0x4a, 0x10, 0x54, 0x21, 0xc3, 0x73, 0xb1, 0x2b,
  0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x9b, 0x12, 0x10, 0x4d, 0xc8, 0xf0, 0x5c,
  0xec, 0xc2, 0xd8, 0xec, 0xca, 0xe4, 0xa6, 0x04, 0x46, 0x1d, 0x32, 0x3c,
  0x97, 0x39, 0xb4, 0x30, 0xb2, 0x32, 0xb9, 0xa6, 0x37, 0xb2, 0x32, 0xb6,
  0x29, 0x01, 0x52, 0x86, 0x0c, 0xcf, 0x45, 0xae, 0x6c, 0xee, 0xad, 0x4e,
  0x6e, 0xac, 0x6c, 0x6e, 0x4a, 0x40, 0xd5, 0x21, 0xc3, 0x73, 0xb1, 0x4b,
  0x2b, 0xbb, 0x4b, 0x22, 0x9b, 0xa2, 0x0b, 0xa3, 0x2b, 0x9b, 0x12, 0x58,
  0x75, 0xc8, 0xf0, 0x5c, 0xca, 0xdc, 0xe8, 0xe4, 0xf2, 0xa0, 0xde, 0xd2,
  0xdc, 0xe8, 0xe6, 0xa6, 0x04, 0x6d, 0x00, 0x79, 0x18, 0x00, 0x00, 0x4c,
  0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14,
  0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79,
  0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e,
  0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1,
  0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc,
  0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74,
  0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a,
  0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e,
  0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e,
  0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21,
  0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0,
  0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc,
  0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72,
  0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76,
  0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f,
  0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c,
  0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03,
  0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1,
  0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61,
  0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8,
  0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94,
  0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0,
  0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76,
  0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e,
  0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f,
  0xef, 0x50, 0x0f, 0xf4, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x25,
  0x00, 0x00, 0x00, 0x46, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34,
  0x40, 0x84, 0xf9, 0xc8, 0x6d, 0x9b, 0xc1, 0x36, 0x5c, 0xbe, 0xf3, 0xf8,
  0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0x94, 0x84, 0x01, 0x08,
  0x98, 0x5f, 0xdc, 0xb6, 0x1d, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x04,
  0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xf9,
  0xc8, 0x6d, 0x1b, 0x82, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x44, 0x00,
  0x13, 0x11, 0x02, 0xcd, 0xb0, 0x10, 0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c,
  0xfe, 0xe2, 0x00, 0x83, 0xd8, 0x3c, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x02,
  0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x4b, 0x93, 0x13, 0x11, 0x28, 0x35, 0x3d,
  0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x05, 0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x4f,
  0xc4, 0x35, 0x51, 0x11, 0x51, 0x3a, 0xc0, 0xe0, 0x17, 0xb7, 0x6d, 0x03,
  0xcf, 0x70, 0xf9, 0xce, 0xe3, 0x53, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb,
  0x06, 0x40, 0x30, 0x00, 0xd2, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0xab,
  0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x1b,
  0x00, 0x00, 0x00, 0x94, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x54, 0x41,
  0xb1, 0x94, 0x5d, 0x21, 0x94, 0x5c, 0x29, 0x94, 0x4a, 0xb9, 0x14, 0xd4,
  0x0c, 0x40, 0x11, 0x06, 0xd4, 0x40, 0x29, 0xd1, 0x30, 0x46, 0x00, 0x82,
  0x20, 0x08, 0x7f, 0x63, 0x04, 0x6e, 0x1f, 0x8b, 0xb6, 0x2f, 0x8c, 0x11,
  0xf4, 0xb1, 0xe8, 0xe2, 0xdf, 0x18, 0x41, 0xad, 0xd6, 0x6a, 0xfb, 0x8d,
  0x11, 0xc8, 0xa2, 0xdb, 0xd3, 0x60, 0x30, 0x46, 0xc0, 0xc3, 0xab, 0x4e,
  0x77, 0x63, 0x04, 0x20, 0x08, 0x82, 0x24, 0x38, 0x8c, 0x11, 0x80, 0x20,
  0x08, 0x82, 0x60, 0x30, 0x46, 0x00, 0x82, 0x20, 0x08, 0x83, 0xc1, 0x18,
  0x01, 0x08, 0x82, 0x20, 0x0a, 0x0e, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8,
  0x07, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xa0, 0xb1, 0x01,
  0x05, 0x06, 0x68, 0x80, 0x06, 0xda, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x68, 0x6d, 0x50, 0x81, 0x41, 0x1a, 0xa4, 0xc1, 0x36, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x46, 0x1d, 0x5c, 0x6d, 0xa0, 0x06, 0x62, 0x10, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x61, 0x07, 0x98, 0x1b, 0xac, 0x01,
  0x27, 0x8d, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x15, 0x07, 0xda, 0xc0,
  0x06, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0x27, 0x0c, 0x75, 0xc2,
  0x50, 0x26, 0x1c, 0xf2, 0x31, 0xe1, 0x90, 0x8f, 0x09, 0x16, 0x7c, 0x4c,
  0xb8, 0xe0, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x8a, 0x1f, 0x90,
  0x81, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xca, 0x1f, 0x94, 0x81,
  0x70, 0x04, 0x41, 0x47, 0x10, 0x54, 0x8c, 0x07, 0xc5, 0x7c, 0x60, 0xc4,
  0x1a, 0x80, 0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x18, 0x52, 0x00,
  0x83, 0x80, 0x0f, 0xcc, 0x10, 0x03, 0x10, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0x01, 0x63, 0x0a, 0x62, 0x10, 0xf8, 0xc1, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x30, 0xa7, 0x70, 0x06, 0x88, 0x61, 0xc9, 0x28, 0x80, 0x60,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x98, 0x54, 0x48, 0x83, 0x00, 0x31,
  0x45, 0x0e, 0x40, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xcc, 0x2a,
  0x9c, 0x41, 0x30, 0x0a, 0xc6, 0xa4, 0x01, 0x08, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0x80, 0x69, 0x85, 0x34, 0x08, 0x4a, 0x61, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0x18, 0x57, 0x70, 0x03, 0x87, 0xb1, 0x47, 0x15, 0x40,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x0c, 0x2c, 0xc0, 0x41, 0xe0,
  0x18, 0x25, 0x06, 0xf0, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x0a,
  0x16, 0xf0, 0x20, 0x0c, 0x54, 0x61, 0x34, 0x21, 0x10, 0xec, 0x32, 0x03,
  0xf8, 0x18, 0x11, 0xc8, 0xc7, 0x82, 0x34, 0x80, 0x8f, 0x05, 0x86, 0x7c,
  0x2c, 0x50, 0x03, 0xf8, 0x98, 0x11, 0xc8, 0xc7, 0xba, 0x4e, 0x3e, 0x86,
  0xbc, 0x01, 0x7c, 0x2c, 0xf8, 0xe4, 0x63, 0x72, 0xa0, 0xc4, 0xc7, 0x02,
  0x01, 0x3e, 0x56, 0x04, 0xf2, 0xb1, 0x20, 0x0e, 0xe0, 0x63, 0x72, 0x40,
  0x06, 0xf1, 0xb1, 0x20, 0x90, 0x8f, 0x21, 0x82, 0x7c, 0xec, 0x08, 0xe0,
  0x63, 0x43, 0x20, 0x1f, 0x0b, 0xee, 0x00, 0x3e, 0xb6, 0x07, 0x6a, 0x10,
  0x1f, 0xeb, 0x83, 0x35, 0x88, 0x8f, 0x09, 0x81, 0x7c, 0x2c, 0xe8, 0x03,
  0xf8, 0x58, 0x40, 0xc8, 0xc7, 0x02, 0x3f, 0x80, 0x8f, 0x69, 0x81, 0x7c,
  0x46, 0x0c, 0x1a, 0x00, 0x04, 0xc1, 0x20, 0x6a, 0x07, 0x56, 0xf0, 0x03,
  0x73, 0x28, 0x83, 0x31, 0x68, 0x85, 0x56, 0x68, 0x85, 0x56, 0x18, 0x4d,
  0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x06,
  0x00, 0x41, 0x30, 0x88, 0xe2, 0x01, 0x16, 0x44, 0x41, 0x1d, 0xd6, 0xe0,
  0x0c, 0x62, 0x21, 0x16, 0x62, 0x21, 0x16, 0x46, 0x13, 0x02, 0x60, 0x34,
  0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xa0, 0x01, 0x40, 0x10, 0x0c,
  0xa2, 0x7a, 0xa0, 0x05, 0x53, 0x70, 0x07, 0x38, 0x58, 0x83, 0x5a, 0xa8,
  0x85, 0x5a, 0xa8, 0x85, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1,
  0x84, 0x41, 0x18, 0x31, 0x68, 0x00, 0x10, 0x04, 0x83, 0x28, 0x1f, 0x70,
  0x41, 0x15, 0xe4, 0xc1, 0x0e, 0xde, 0x20, 0x17, 0x72, 0x21, 0x17, 0x72,
  0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x6c,
  0x28, 0x03, 0xf9, 0xd8, 0x60, 0x06, 0xf2, 0xb1, 0xe1, 0x0c, 0xe4, 0x63,
  0x4a, 0x18, 0xc8, 0xc7, 0x14, 0x31, 0x90, 0x8f, 0x29, 0x63, 0x20, 0x1f,
  0x8b, 0x3c, 0xf9, 0x58, 0xf4, 0xc9, 0xc7, 0x22, 0x30, 0x90, 0x8f, 0x61,
  0x9a, 0x7c, 0x0c, 0xdb, 0xe4, 0x63, 0x18, 0x27, 0x1f, 0x33, 0x06, 0xf8,
  0x58, 0xa0, 0xc0, 0xc7, 0x02, 0x07, 0x3e, 0x86, 0x14, 0xf0, 0xb1, 0x80,
  0x81, 0x8f, 0x05, 0x10, 0x7c, 0x4c, 0x39, 0xe0, 0x63, 0x81, 0x03, 0x1f,
  0x0b, 0x24, 0xf8, 0x8c, 0x18, 0x34, 0x00, 0x08, 0x82, 0x41, 0x24, 0x13,
  0xf1, 0x30, 0x0e, 0x2b, 0xa1, 0x0a, 0xa6, 0x20, 0x0f, 0xf2, 0x20, 0x0f,
  0xf2, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08,
  0x23, 0x06, 0x0d, 0x00, 0x82, 0x60, 0x10, 0xd9, 0x44, 0x3d, 0x9c, 0xc3,
  0x4b, 0xc0, 0x82, 0x2a, 0xd8, 0x83, 0x3d, 0xd8, 0x83, 0x3d, 0x8c, 0x26,
  0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x88, 0x41, 0x03,
  0x80, 0x20, 0x18, 0x44, 0x3a, 0x91, 0x0f, 0xeb, 0x30, 0x13, 0xb5, 0xe0,
  0x0a, 0xfa, 0xa0, 0x0f, 0xfa, 0xa0, 0x0f, 0xa3, 0x09, 0x01, 0x30, 0x9a,
  0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x62, 0xd0, 0x00, 0x20, 0x08, 0x06,
  0x91, 0x4f, 0xf4, 0xc3, 0x3b, 0xdc, 0xc4, 0x2e, 0xc8, 0x82, 0x3f, 0xf8,
  0x83, 0x3f, 0xf8, 0xc3, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68,
  0xc2, 0x20, 0xd8, 0xa0, 0x0a, 0xf2, 0xb1, 0x61, 0x15, 0xe4, 0x63, 0x03,
  0x2b, 0xc8, 0xc7, 0x14, 0x53, 0x90, 0x8f, 0x29, 0xa7, 0x20, 0x1f, 0x53,
  0x50, 0x41, 0x3e, 0x16, 0x8d, 0x82, 0x7c, 0x2c, 0x22, 0x05, 0xf9, 0x58,
  0x54, 0x0a, 0xf2, 0x31, 0xec, 0x0f, 0xe4, 0x63, 0x18, 0x28, 0xc8, 0xc7,
  0xb0, 0x50, 0x90, 0x8f, 0x19, 0x03, 0x7c, 0x2c, 0x50, 0xe0, 0x63, 0x81,
  0x03, 0x1f, 0x43, 0x0a, 0xf8, 0x58, 0xc0, 0xc0, 0xc7, 0x02, 0x08, 0x3e,
  0xa6, 0x1c, 0xf0, 0xb1, 0xc0, 0x81, 0x8f, 0x05, 0x12, 0x7c, 0x46, 0x0c,
  0x1a, 0x00, 0x04, 0xc1, 0x20, 0xba, 0x0b, 0x9b, 0x40, 0x09, 0xb8, 0x78,
  0x07, 0x75, 0xb8, 0x89, 0x9b, 0xb8, 0x89, 0x9b, 0x18, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x06, 0x00, 0x41,
  0x30, 0x88, 0xf6, 0x42, 0x27, 0x58, 0x82, 0x2e, 0xea, 0xc1, 0x1d, 0x76,
  0x62, 0x27, 0x76, 0x62, 0x27, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08,
  0x46, 0x13, 0x06, 0x61, 0xc4, 0xa0, 0x01, 0x40, 0x10, 0x0c, 0xa2, 0xbf,
  0xf0, 0x09, 0x98, 0xc0, 0x0b, 0x7d, 0x90, 0x87, 0x9f, 0xf8, 0x89, 0x9f,
  0xf8, 0x89, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0x18, 0x31, 0x68, 0x00, 0x10, 0x04, 0x83, 0x68, 0x34, 0xc4, 0x82, 0x26,
  0xf8, 0x02, 0x24, 0xec, 0x61, 0x2c, 0xc6, 0x62, 0x2c, 0xc6, 0x62, 0x34,
  0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x6c, 0x78, 0x07,
  0xf9, 0xd8, 0x00, 0x0f, 0xf2, 0xb1, 0x21, 0x1e, 0xe4, 0x63, 0xca, 0x3a,
  0xc8, 0xc7, 0x14, 0x76, 0x90, 0x8f, 0x29, 0xed, 0x20, 0x1f, 0x8b, 0xd0,
  0x41, 0x3e, 0x16, 0xa5, 0x83, 0x7c, 0x2c, 0x52, 0x07, 0xf9, 0x18, 0x46,
  0x0e, 0xf2, 0x31, 0xac, 0x1c, 0xe4, 0x63, 0x98, 0x39, 0xc8, 0xc7, 0x8c,
  0x01, 0x3e, 0x16, 0x28, 0xf0, 0xb1, 0xc0, 0x81, 0x8f, 0x21, 0x05, 0x7c,
  0x2c, 0x60, 0xe0, 0x63, 0x01, 0x04, 0x1f, 0x53, 0x0e, 0xf8, 0x58, 0xe0,
  0xc0, 0xc7, 0x02, 0x09, 0x3e, 0x23, 0x06, 0x0d, 0x00, 0x82, 0x60, 0x10,
  0xf1, 0xc6, 0x5e, 0xb4, 0x45, 0x6d, 0xd0, 0x44, 0x4b, 0xf0, 0x05, 0x5f,
  0xf0, 0x05, 0x5f, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0xc2, 0x88, 0x41, 0x03, 0x80, 0x20, 0x18, 0x44, 0xe0, 0xf1, 0x17,
  0x71, 0x91, 0x1b, 0x3a, 0x11, 0x13, 0xa0, 0x01, 0x1a, 0xa0, 0x01, 0x1a,
  0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x62,
  0xd0, 0x00, 0x20, 0x08, 0x06, 0x11, 0x79, 0x8c, 0x46, 0x5d, 0xf4, 0xc6,
  0x4f, 0xd4, 0x04, 0x69, 0x90, 0x06, 0x69, 0x90, 0xc6, 0x68, 0x42, 0x00,
  0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x34, 0x00, 0x08,
  0x82, 0x41, 0x84, 0x1e, 0xa7, 0x91, 0x17, 0xe1, 0x51, 0x16, 0x39, 0x81,
  0x1a, 0xa8, 0x81, 0x1a, 0xa8, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42,
  0x30, 0x9a, 0x30, 0x08, 0x36, 0xd0, 0x84, 0x7c, 0x6c, 0xa8, 0x09, 0xf9,
  0xd8, 0x60, 0x13, 0xf2, 0x31, 0x05, 0x26, 0xe4, 0x63, 0x4a, 0x4c, 0xc8,
  0xc7, 0x14, 0x99, 0x90, 0x8f, 0x45, 0x2d, 0x21, 0x1f, 0x8b, 0x5c, 0x42,
  0x3e, 0x16, 0xbd, 0x84, 0x7c, 0x0c, 0x4b, 0x09, 0xf9, 0x18, 0xa6, 0x12,
  0xf2, 0x31, 0x6c, 0x25, 0xe4, 0x63, 0xc6, 0x00, 0x1f, 0x0b, 0x14, 0xf8,
  0x58, 0xe0, 0xc0, 0xc7, 0x90, 0x02, 0x3e, 0x16, 0x30, 0xf0, 0xb1, 0x00,
  0x82, 0x8f, 0x29, 0x07, 0x7c, 0x2c, 0x70, 0xe0, 0x63, 0x81, 0x04, 0x1f,
  0x23, 0x8d, 0xd9, 0x80, 0x8f, 0x95, 0x46, 0x6d, 0xc0, 0xc7, 0x84, 0x40,
  0x3e, 0x16, 0xe0, 0x06, 0x7c, 0x2c, 0x20, 0xe4, 0x63, 0x41, 0x6e, 0xc0,
  0xc7, 0xea, 0x22, 0x90, 0x8f, 0xad, 0xc6, 0x6a, 0xc8, 0xc7, 0xde, 0x82,
  0x35, 0xe4, 0x63, 0x6e, 0x11, 0xc0, 0xc7, 0x86, 0x40, 0x3e, 0x16, 0xf8,
  0x06, 0x7c, 0xec, 0x37, 0x60, 0x23, 0x3e, 0x16, 0x04, 0xf2, 0xb1, 0xba,
  0x10, 0xe4, 0x63, 0x74, 0x11, 0xc0, 0xc7, 0x86, 0x40, 0x3e, 0x16, 0x90,
  0x07, 0x7c, 0x0c, 0x3d, 0x6c, 0x23, 0x3e, 0xa6, 0x1e, 0xb7, 0x11, 0x1f,
  0x13, 0x02, 0xf9, 0x58, 0xa0, 0x1e, 0xf0, 0xb1, 0x80, 0x90, 0x8f, 0x05,
  0xeb, 0x01, 0x1f, 0x3b, 0x8d, 0x40, 0x3e, 0x36, 0xbd, 0x84, 0x7c, 0x8c,
  0x6a, 0x09, 0xf9, 0x58, 0xb5, 0x12, 0xf2, 0xb1, 0xa8, 0x1d, 0xe4, 0x63,
  0xd2, 0x3a, 0xc8, 0xc7, 0xa6, 0x74, 0x90, 0x8f, 0x0d, 0x06, 0x7c, 0x6c,
  0x30, 0xe0, 0x63, 0x83, 0x01, 0x1f, 0x8b, 0x5c, 0x41, 0x3e, 0x26, 0xb1,
  0x82, 0x7c, 0x6c, 0x52, 0x05, 0xf9, 0x58, 0xc3, 0x06, 0xf2, 0x31, 0x47,
  0x0d, 0xe4, 0x63, 0x0f, 0x1a, 0xc8, 0xc7, 0x92, 0x01, 0x3e, 0x16, 0x1c,
  0xf0, 0x31, 0x85, 0x80, 0x8f, 0x05, 0x08, 0x7c, 0x6c, 0x29, 0xe0, 0x63,
  0x41, 0x02, 0x9f, 0xe1, 0x88, 0xc2, 0x44, 0x88, 0x6f, 0x38, 0x82, 0x38,
  0x11, 0xe2, 0x1b, 0x8e, 0x18, 0x50, 0x84, 0xf8, 0x0c, 0x51, 0x11, 0xf9,
  0xd8, 0xb1, 0x22, 0xf2, 0x31, 0x83, 0x45, 0xe4, 0x33, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0xca, 0x9d, 0xdc, 0xc8, 0x32, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0x0a, 0x9e, 0xe0, 0x88, 0x32, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x4a, 0x9e, 0xe4, 0x48, 0x62, 0x43, 0x8c, 0xc8, 0xc7, 0x06, 0x19,
  0x91, 0x8f, 0x0d, 0x33, 0x22, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30,
  0x50, 0xfa, 0xc4, 0x47, 0x86, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x50,
  0xfc, 0xe4, 0x47, 0x86, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x50, 0xfe,
  0x04, 0x4c, 0x06, 0x1b, 0x70, 0x44, 0x3e, 0x36, 0xe4, 0x88, 0x7c, 0x6c,
  0xd0, 0x11, 0xf9, 0xd8, 0xc0, 0x23, 0xf0, 0xb1, 0xa1, 0x47, 0xe0, 0x63,
  0x83, 0x8f, 0xc0, 0x67, 0xba, 0x41, 0x1a, 0xaa, 0xe9, 0x06, 0x69, 0xa8,
  0xa6, 0x1b, 0xa4, 0xa1, 0x1a, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x44,
  0x55, 0xd6, 0x04, 0x54, 0x40, 0x05, 0x4f, 0x86, 0x11, 0x83, 0x04, 0x00,
  0x41, 0x30, 0x40, 0x54, 0x65, 0x4d, 0x40, 0x05, 0x54, 0xe2, 0x44, 0x18,
  0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x44, 0x55, 0xd6, 0x04, 0x54, 0x40,
  0xe5, 0x4e, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
