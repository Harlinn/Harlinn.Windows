#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 5f4fc9d6793104f4bd91656b482f519c
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer CB0
; {
;
;   struct CB0
;   {
;
;       uint SrcMipLevel;                             ; Offset:    0
;       uint NumMipLevels;                            ; Offset:    4
;       float2 TexelSize;                             ; Offset:    8
;   
;   } CB0;                                            ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; CB0                               cbuffer      NA          NA     CB0            cb0     1
; BilinearClamp                     sampler      NA          NA      S0             s0     1
; SrcMip                            texture     f32          2d      T0             t0     1
; OutMip1                               UAV     f32          2d      U0             u0     1
; OutMip2                               UAV     f32          2d      U1             u1     1
; OutMip3                               UAV     f32          2d      U2             u2     1
; OutMip4                               UAV     f32          2d      U3             u3     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%CB0 = type { i32, i32, <2 x float> }
%struct.SamplerState = type { i32 }

@"\01?gs_R@@3PAMA" = external addrspace(3) global [64 x float], align 4
@"\01?gs_G@@3PAMA" = external addrspace(3) global [64 x float], align 4
@"\01?gs_B@@3PAMA" = external addrspace(3) global [64 x float], align 4
@"\01?gs_A@@3PAMA" = external addrspace(3) global [64 x float], align 4

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 3, i32 3, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %9 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %10 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %11 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %12 = extractvalue %dx.types.CBufRet.f32 %11, 2
  %13 = extractvalue %dx.types.CBufRet.f32 %11, 3
  %14 = uitofp i32 %9 to float
  %15 = uitofp i32 %10 to float
  %16 = fadd fast float %14, 2.500000e-01
  %17 = fadd fast float %15, 2.500000e-01
  %18 = fmul fast float %12, %16
  %19 = fmul fast float %13, %17
  %20 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %21 = extractvalue %dx.types.CBufRet.i32 %20, 0
  %22 = uitofp i32 %21 to float
  %23 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5, %dx.types.Handle %6, float %18, float %19, float undef, float undef, i32 0, i32 0, i32 undef, float %22)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %24 = extractvalue %dx.types.ResRet.f32 %23, 0
  %25 = extractvalue %dx.types.ResRet.f32 %23, 1
  %26 = extractvalue %dx.types.ResRet.f32 %23, 2
  %27 = extractvalue %dx.types.ResRet.f32 %23, 3
  %28 = fadd fast float %14, 7.500000e-01
  %29 = fmul fast float %12, %28
  %30 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5, %dx.types.Handle %6, float %29, float %19, float undef, float undef, i32 0, i32 0, i32 undef, float %22)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %31 = extractvalue %dx.types.ResRet.f32 %30, 0
  %32 = extractvalue %dx.types.ResRet.f32 %30, 1
  %33 = extractvalue %dx.types.ResRet.f32 %30, 2
  %34 = extractvalue %dx.types.ResRet.f32 %30, 3
  %35 = fadd fast float %31, %24
  %36 = fadd fast float %32, %25
  %37 = fadd fast float %33, %26
  %38 = fadd fast float %34, %27
  %39 = fadd fast float %15, 7.500000e-01
  %40 = fmul fast float %13, %39
  %41 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5, %dx.types.Handle %6, float %18, float %40, float undef, float undef, i32 0, i32 0, i32 undef, float %22)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %42 = extractvalue %dx.types.ResRet.f32 %41, 0
  %43 = extractvalue %dx.types.ResRet.f32 %41, 1
  %44 = extractvalue %dx.types.ResRet.f32 %41, 2
  %45 = extractvalue %dx.types.ResRet.f32 %41, 3
  %46 = fadd fast float %35, %42
  %47 = fadd fast float %36, %43
  %48 = fadd fast float %37, %44
  %49 = fadd fast float %38, %45
  %50 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5, %dx.types.Handle %6, float %29, float %40, float undef, float undef, i32 0, i32 0, i32 undef, float %22)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %51 = extractvalue %dx.types.ResRet.f32 %50, 0
  %52 = extractvalue %dx.types.ResRet.f32 %50, 1
  %53 = extractvalue %dx.types.ResRet.f32 %50, 2
  %54 = extractvalue %dx.types.ResRet.f32 %50, 3
  %55 = fadd fast float %46, %51
  %56 = fadd fast float %47, %52
  %57 = fadd fast float %48, %53
  %58 = fadd fast float %49, %54
  %59 = fmul fast float %55, 2.500000e-01
  %60 = fmul fast float %56, 2.500000e-01
  %61 = fmul fast float %57, 2.500000e-01
  %62 = fmul fast float %58, 2.500000e-01
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %4, i32 %9, i32 %10, i32 undef, float %59, float %60, float %61, float %62, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %63 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.i32 %63, 1
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %217, label %66

; <label>:66                                      ; preds = %0
  %67 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %8
  store float %59, float addrspace(3)* %67, align 4, !tbaa !20
  %68 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %8
  store float %60, float addrspace(3)* %68, align 4, !tbaa !20
  %69 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %8
  store float %61, float addrspace(3)* %69, align 4, !tbaa !20
  %70 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %8
  store float %62, float addrspace(3)* %70, align 4, !tbaa !20
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %71 = and i32 %8, 9
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %119

; <label>:73                                      ; preds = %66
  %74 = add i32 %8, 1
  %75 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %74
  %76 = load float, float addrspace(3)* %75, align 4, !tbaa !20
  %77 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %74
  %78 = load float, float addrspace(3)* %77, align 4, !tbaa !20
  %79 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %74
  %80 = load float, float addrspace(3)* %79, align 4, !tbaa !20
  %81 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %74
  %82 = load float, float addrspace(3)* %81, align 4, !tbaa !20
  %83 = add i32 %8, 8
  %84 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %83
  %85 = load float, float addrspace(3)* %84, align 4, !tbaa !20
  %86 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %83
  %87 = load float, float addrspace(3)* %86, align 4, !tbaa !20
  %88 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %83
  %89 = load float, float addrspace(3)* %88, align 4, !tbaa !20
  %90 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %83
  %91 = load float, float addrspace(3)* %90, align 4, !tbaa !20
  %92 = add i32 %8, 9
  %93 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %92
  %94 = load float, float addrspace(3)* %93, align 4, !tbaa !20
  %95 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %92
  %96 = load float, float addrspace(3)* %95, align 4, !tbaa !20
  %97 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %92
  %98 = load float, float addrspace(3)* %97, align 4, !tbaa !20
  %99 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %92
  %100 = load float, float addrspace(3)* %99, align 4, !tbaa !20
  %101 = fadd fast float %76, %59
  %102 = fadd fast float %78, %60
  %103 = fadd fast float %80, %61
  %104 = fadd fast float %82, %62
  %105 = fadd fast float %101, %85
  %106 = fadd fast float %102, %87
  %107 = fadd fast float %103, %89
  %108 = fadd fast float %104, %91
  %109 = fadd fast float %105, %94
  %110 = fadd fast float %106, %96
  %111 = fadd fast float %107, %98
  %112 = fadd fast float %108, %100
  %113 = fmul fast float %109, 2.500000e-01
  %114 = fmul fast float %110, 2.500000e-01
  %115 = fmul fast float %111, 2.500000e-01
  %116 = fmul fast float %112, 2.500000e-01
  %117 = lshr i32 %9, 1
  %118 = lshr i32 %10, 1
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3, i32 %117, i32 %118, i32 undef, float %113, float %114, float %115, float %116, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  store float %113, float addrspace(3)* %67, align 4, !tbaa !20
  store float %114, float addrspace(3)* %68, align 4, !tbaa !20
  store float %115, float addrspace(3)* %69, align 4, !tbaa !20
  store float %116, float addrspace(3)* %70, align 4, !tbaa !20
  br label %119

; <label>:119                                     ; preds = %73, %66
  %120 = phi float [ %113, %73 ], [ %59, %66 ]
  %121 = phi float [ %114, %73 ], [ %60, %66 ]
  %122 = phi float [ %115, %73 ], [ %61, %66 ]
  %123 = phi float [ %116, %73 ], [ %62, %66 ]
  %124 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.i32 %124, 1
  %126 = icmp eq i32 %125, 2
  br i1 %126, label %217, label %127

; <label>:127                                     ; preds = %119
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %128 = and i32 %8, 27
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %176

; <label>:130                                     ; preds = %127
  %131 = add i32 %8, 2
  %132 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %131
  %133 = load float, float addrspace(3)* %132, align 4, !tbaa !20
  %134 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %131
  %135 = load float, float addrspace(3)* %134, align 4, !tbaa !20
  %136 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %131
  %137 = load float, float addrspace(3)* %136, align 4, !tbaa !20
  %138 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %131
  %139 = load float, float addrspace(3)* %138, align 4, !tbaa !20
  %140 = add i32 %8, 16
  %141 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %140
  %142 = load float, float addrspace(3)* %141, align 4, !tbaa !20
  %143 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %140
  %144 = load float, float addrspace(3)* %143, align 4, !tbaa !20
  %145 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %140
  %146 = load float, float addrspace(3)* %145, align 4, !tbaa !20
  %147 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %140
  %148 = load float, float addrspace(3)* %147, align 4, !tbaa !20
  %149 = add i32 %8, 18
  %150 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 %149
  %151 = load float, float addrspace(3)* %150, align 4, !tbaa !20
  %152 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 %149
  %153 = load float, float addrspace(3)* %152, align 4, !tbaa !20
  %154 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 %149
  %155 = load float, float addrspace(3)* %154, align 4, !tbaa !20
  %156 = getelementptr [64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 %149
  %157 = load float, float addrspace(3)* %156, align 4, !tbaa !20
  %158 = fadd fast float %133, %120
  %159 = fadd fast float %135, %121
  %160 = fadd fast float %137, %122
  %161 = fadd fast float %139, %123
  %162 = fadd fast float %158, %142
  %163 = fadd fast float %159, %144
  %164 = fadd fast float %160, %146
  %165 = fadd fast float %161, %148
  %166 = fadd fast float %162, %151
  %167 = fadd fast float %163, %153
  %168 = fadd fast float %164, %155
  %169 = fadd fast float %165, %157
  %170 = fmul fast float %166, 2.500000e-01
  %171 = fmul fast float %167, 2.500000e-01
  %172 = fmul fast float %168, 2.500000e-01
  %173 = fmul fast float %169, 2.500000e-01
  %174 = lshr i32 %9, 2
  %175 = lshr i32 %10, 2
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2, i32 %174, i32 %175, i32 undef, float %170, float %171, float %172, float %173, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  store float %170, float addrspace(3)* %67, align 4, !tbaa !20
  store float %171, float addrspace(3)* %68, align 4, !tbaa !20
  store float %172, float addrspace(3)* %69, align 4, !tbaa !20
  store float %173, float addrspace(3)* %70, align 4, !tbaa !20
  br label %176

; <label>:176                                     ; preds = %130, %127
  %177 = phi float [ %170, %130 ], [ %120, %127 ]
  %178 = phi float [ %171, %130 ], [ %121, %127 ]
  %179 = phi float [ %172, %130 ], [ %122, %127 ]
  %180 = phi float [ %173, %130 ], [ %123, %127 ]
  %181 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %182 = extractvalue %dx.types.CBufRet.i32 %181, 1
  %183 = icmp eq i32 %182, 3
  br i1 %183, label %217, label %184

; <label>:184                                     ; preds = %176
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %185 = icmp eq i32 %8, 0
  br i1 %185, label %186, label %217

; <label>:186                                     ; preds = %184
  %187 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 4), align 4, !tbaa !20
  %188 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 4), align 4, !tbaa !20
  %189 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 4), align 4, !tbaa !20
  %190 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 4), align 4, !tbaa !20
  %191 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 32), align 4, !tbaa !20
  %192 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 32), align 4, !tbaa !20
  %193 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 32), align 4, !tbaa !20
  %194 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 32), align 4, !tbaa !20
  %195 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_R@@3PAMA", i32 0, i32 36), align 4, !tbaa !20
  %196 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_G@@3PAMA", i32 0, i32 36), align 4, !tbaa !20
  %197 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_B@@3PAMA", i32 0, i32 36), align 4, !tbaa !20
  %198 = load float, float addrspace(3)* getelementptr inbounds ([64 x float], [64 x float] addrspace(3)* @"\01?gs_A@@3PAMA", i32 0, i32 36), align 4, !tbaa !20
  %199 = fadd fast float %187, %177
  %200 = fadd fast float %188, %178
  %201 = fadd fast float %189, %179
  %202 = fadd fast float %190, %180
  %203 = fadd fast float %199, %191
  %204 = fadd fast float %200, %192
  %205 = fadd fast float %201, %193
  %206 = fadd fast float %202, %194
  %207 = fadd fast float %203, %195
  %208 = fadd fast float %204, %196
  %209 = fadd fast float %205, %197
  %210 = fadd fast float %206, %198
  %211 = fmul fast float %207, 2.500000e-01
  %212 = fmul fast float %208, 2.500000e-01
  %213 = fmul fast float %209, 2.500000e-01
  %214 = fmul fast float %210, 2.500000e-01
  %215 = lshr i32 %9, 3
  %216 = lshr i32 %10, 3
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1, i32 %215, i32 %216, i32 undef, float %211, float %212, float %213, float %214, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %217

; <label>:217                                     ; preds = %186, %184, %176, %119, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #3

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }
attributes #3 = { noduplicate nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!17}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 2}
!2 = !{i32 1, i32 6}
!3 = !{!"cs", i32 6, i32 2}
!4 = !{!5, !8, !13, !15}
!5 = !{!6}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{!9, !10, !11, !12}
!9 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!10 = !{i32 1, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!11 = !{i32 2, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!12 = !{i32 3, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!13 = !{!14}
!14 = !{i32 0, %CB0* undef, !"", i32 0, i32 0, i32 1, i32 16, null}
!15 = !{!16}
!16 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!17 = !{void ()* @main, !"main", null, !4, !18}
!18 = !{i32 4, !19}
!19 = !{i32 8, i32 8, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"float", !22, i64 0}
!22 = !{!"omnipotent char", !23, i64 0}
!23 = !{!"Simple C/C++ TBAA"}

#endif

const unsigned char g_pGenerateMipsLinearOddCS[] = {
  0x44, 0x58, 0x42, 0x43, 0x0f, 0x4f, 0x7f, 0xfd, 0x97, 0xc6, 0xfb, 0x31,
  0x8f, 0xa6, 0xa6, 0x6f, 0x5e, 0x0c, 0xce, 0xd1, 0x01, 0x00, 0x00, 0x00,
  0xd0, 0x19, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x68, 0x01, 0x00, 0x00, 0xac, 0x02, 0x00, 0x00, 0x64, 0x0b, 0x00, 0x00,
  0x80, 0x0b, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0xf0, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x52, 0x54, 0x53, 0x30, 0x3c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x15, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x7f, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x7f,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x54, 0x41, 0x54, 0xb0, 0x08, 0x00, 0x00, 0x62, 0x00, 0x05, 0x00,
  0x2c, 0x02, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x02, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff,
  0xff, 0x01, 0x90, 0x36, 0x18, 0xc4, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00,
  0x03, 0x48, 0x00, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x86, 0x09, 0x01, 0x01, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0xa8, 0xc1, 0x0c, 0x40, 0x02, 0x01, 0x83, 0x08, 0xc1, 0x30, 0x02,
  0x50, 0x82, 0x81, 0x88, 0x39, 0x02, 0x30, 0x28, 0x82, 0x61, 0xd0, 0x51,
  0x06, 0xc3, 0x30, 0x28, 0xb9, 0x69, 0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9,
  0x5f, 0x09, 0x69, 0x25, 0x26, 0xbf, 0xb8, 0x6d, 0x54, 0x00, 0x00, 0x00,
  0x18, 0x73, 0x04, 0x08, 0x31, 0xf7, 0x0c, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0x21, 0xd0, 0x0c, 0x0b, 0x81, 0x82, 0xa6, 0x30, 0x8b, 0xe1, 0x38,
  0x00, 0x00, 0x00, 0x86, 0x61, 0x00, 0xf4, 0x94, 0x65, 0x30, 0x1c, 0xc3,
  0x30, 0x00, 0x00, 0x00, 0x18, 0x8a, 0xca, 0x30, 0x18, 0x06, 0x4d, 0x47,
  0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31,
  0xf9, 0xc5, 0x6d, 0x23, 0x02, 0x00, 0x00, 0xa0, 0x10, 0x95, 0xe1, 0x18,
  0x64, 0x1d, 0x35, 0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4, 0x73, 0x1b, 0x55,
  0xac, 0xc4, 0xe4, 0x23, 0xb7, 0x8d, 0x08, 0xc3, 0x30, 0x8c, 0x42, 0x60,
  0x86, 0x63, 0x50, 0x36, 0x47, 0x10, 0x14, 0xc3, 0x31, 0x18, 0xc3, 0xd8,
  0x88, 0x1b, 0x08, 0x18, 0x46, 0x20, 0x80, 0x99, 0xda, 0x60, 0x1c, 0xd8,
  0x21, 0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x80, 0x16, 0xca, 0x01, 0x1f, 0xe8,
  0xa1, 0x1e, 0xe4, 0xa1, 0x1c, 0xe4, 0x80, 0x14, 0xf8, 0xc0, 0x1e, 0xca,
  0x61, 0x1c, 0xe8, 0xe1, 0x1d, 0xe4, 0x81, 0x0f, 0xcc, 0x81, 0x1d, 0xde,
  0x21, 0x1c, 0xe8, 0x81, 0x0d, 0xc0, 0x80, 0x0e, 0xfc, 0x00, 0x0c, 0xfc,
  0x40, 0x0f, 0xf4, 0xa0, 0x1d, 0xd2, 0x01, 0x1e, 0xe6, 0xe1, 0x17, 0xe8,
  0x21, 0x1f, 0xe0, 0xa1, 0x1c, 0x50, 0x60, 0xcc, 0x24, 0x06, 0xe3, 0xc0,
  0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40,
  0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07, 0xf6, 0x50,
  0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e, 0xec, 0xf0,
  0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74, 0xe0, 0x07, 0x60, 0xe0,
  0x07, 0x48, 0xf8, 0x40, 0x0a, 0x67, 0x22, 0x83, 0x71, 0x60, 0x87, 0x70,
  0x98, 0x87, 0x79, 0x70, 0x03, 0x59, 0xb8, 0x05, 0x5a, 0x28, 0x07, 0x7c,
  0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72, 0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b,
  0x28, 0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x07, 0x3e, 0x30, 0x07, 0x76,
  0x78, 0x87, 0x70, 0xa0, 0x07, 0x36, 0x00, 0x03, 0x3a, 0xf0, 0x03, 0x30,
  0xf0, 0x03, 0x14, 0x7c, 0x34, 0x0e, 0x23, 0x08, 0xc0, 0x0d, 0xdc, 0x46,
  0xa3, 0xc1, 0x30, 0x4a, 0x32, 0x6f, 0x92, 0xa6, 0x88, 0x12, 0x26, 0x9f,
  0x05, 0x98, 0x67, 0x21, 0x22, 0x76, 0x02, 0x26, 0x02, 0x05, 0x06, 0xa1,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0,
  0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x3a, 0x0f,
  0x24, 0x90, 0x21, 0x23, 0x45, 0x44, 0x00, 0x76, 0x00, 0x30, 0x3b, 0x00,
  0x98, 0x1d, 0x00, 0xcc, 0x0e, 0x00, 0x1e, 0xf2, 0x10, 0x40, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x39, 0x80, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x93, 0x00,
  0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0xe7,
  0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21,
  0x4f, 0x04, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x9e, 0x09, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x16, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x32, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0xf2, 0x70, 0x40, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x90, 0x05, 0x02, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x32, 0x4a, 0xa0, 0x08, 0x46, 0x00, 0x8a, 0xa1, 0x24,
  0xca, 0xa0, 0x40, 0xca, 0xa1, 0x14, 0x0a, 0xa1, 0x20, 0x0a, 0x10, 0xa2,
  0xc0, 0xca, 0x32, 0xa0, 0xb4, 0x07, 0x0a, 0x83, 0xb6, 0x11, 0x80, 0x1a,
  0x20, 0x71, 0x06, 0x80, 0xc8, 0x19, 0x00, 0x32, 0x67, 0x00, 0xe8, 0x9c,
  0x01, 0xa0, 0x74, 0x06, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0xab, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44,
  0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b,
  0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b,
  0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81,
  0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04,
  0xa3, 0x99, 0x20, 0x18, 0xce, 0x06, 0x61, 0x20, 0x26, 0x08, 0xc6, 0xb3,
  0x41, 0x30, 0x0c, 0x0a, 0x63, 0x73, 0x13, 0x04, 0x03, 0xda, 0x30, 0x20,
  0x09, 0x31, 0x41, 0x10, 0x83, 0x8f, 0xc6, 0x94, 0xdc, 0x58, 0x53, 0x1a,
  0xdc, 0x04, 0xc1, 0x88, 0x36, 0x08, 0x46, 0xb3, 0x21, 0x31, 0x16, 0xc6,
  0x30, 0x06, 0xc2, 0x70, 0x36, 0x04, 0xcf, 0x04, 0x81, 0x0c, 0xc0, 0x80,
  0xc7, 0x53, 0x1d, 0x5d, 0x53, 0x1a, 0x5c, 0xcc, 0x04, 0x61, 0xeb, 0x36,
  0x2c, 0x46, 0x24, 0x19, 0xc6, 0x40, 0x4c, 0xd3, 0xe4, 0xf0, 0x78, 0xaa,
  0xa3, 0x6b, 0x4a, 0x83, 0x93, 0xd9, 0xb0, 0x0c, 0x51, 0x65, 0x0c, 0x03,
  0x31, 0x4d, 0x93, 0xc3, 0xe3, 0xa9, 0x8e, 0xae, 0x29, 0x0d, 0x6e, 0x66,
  0xc3, 0x42, 0x44, 0x97, 0x41, 0x0c, 0xc4, 0x34, 0x4d, 0xce, 0x04, 0xc1,
  0x90, 0x78, 0x3c, 0xd5, 0xd1, 0x35, 0xa5, 0xc1, 0xd1, 0x6c, 0x58, 0xb2,
  0x48, 0x33, 0xb2, 0x81, 0x98, 0xa6, 0xc9, 0xd9, 0x40, 0x50, 0x16, 0xb6,
  0x4d, 0x10, 0xce, 0x40, 0x0c, 0x38, 0x0c, 0x09, 0xc1, 0x4c, 0x10, 0x8c,
  0x69, 0x03, 0x62, 0x74, 0x9e, 0x61, 0x0c, 0x1f, 0xb0, 0x21, 0x00, 0x83,
  0x09, 0x42, 0x1a, 0x8c, 0x01, 0x1b, 0xa1, 0x34, 0xb6, 0x34, 0xb7, 0xb2,
  0x30, 0xb9, 0x21, 0xb6, 0xb0, 0x36, 0xb8, 0x0d, 0x88, 0x21, 0x06, 0x63,
  0x60, 0x18, 0x83, 0x01, 0x6c, 0x08, 0xc8, 0x60, 0x03, 0x01, 0x71, 0x61,
  0x50, 0x06, 0x13, 0x04, 0x33, 0x08, 0x03, 0x2e, 0x53, 0x72, 0x63, 0x4d,
  0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x13, 0x04, 0x83, 0x9a, 0x20,
  0x18, 0xd5, 0x04, 0x61, 0xf3, 0x36, 0x20, 0x09, 0x1a, 0x64, 0x46, 0x1a,
  0xa8, 0x41, 0xb3, 0x06, 0x64, 0x9c, 0xea, 0xda, 0x9a, 0xd2, 0xe0, 0x98,
  0xca, 0xec, 0xca, 0xd8, 0xe6, 0x26, 0x08, 0x86, 0xb5, 0x01, 0x49, 0xda,
  0x20, 0x73, 0x83, 0x34, 0x50, 0x83, 0x66, 0x0d, 0x98, 0x50, 0x95, 0xe1,
  0x95, 0xb1, 0x4d, 0xa5, 0xe9, 0x95, 0x4d, 0x10, 0x8c, 0x6b, 0x03, 0x92,
  0xc0, 0x41, 0x16, 0x07, 0x69, 0xd0, 0x34, 0x6b, 0xb0, 0x81, 0xf8, 0xd8,
  0xe0, 0x0d, 0xe4, 0x60, 0xc3, 0x60, 0x9c, 0xc1, 0x1c, 0x4c, 0x10, 0x0a,
  0x62, 0x03, 0xb0, 0x61, 0x30, 0xec, 0xc0, 0x0e, 0x36, 0x04, 0x77, 0xb0,
  0x61, 0x18, 0xea, 0x00, 0x0f, 0x48, 0xb4, 0x85, 0xa5, 0xb9, 0x6d, 0x18,
  0xe2, 0x20, 0x0e, 0x86, 0x0d, 0x82, 0x1b, 0xec, 0xc1, 0x86, 0xa2, 0x0e,
  0xf4, 0x00, 0x30, 0x03, 0x3e, 0x20, 0x14, 0x26, 0x27, 0x17, 0x96, 0xf7,
  0x45, 0x77, 0x36, 0xd7, 0xf6, 0x25, 0x96, 0x47, 0x57, 0x36, 0x37, 0x41,
  0x30, 0x30, 0x3e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x67, 0x73,
  0x6d, 0x5f, 0x6c, 0x64, 0x73, 0x74, 0x13, 0x04, 0x23, 0xe3, 0x21, 0x16,
  0x26, 0x27, 0x97, 0x56, 0x26, 0x47, 0x44, 0x4c, 0x2e, 0xcc, 0x6d, 0x0c,
  0xad, 0x6c, 0x8e, 0x86, 0x19, 0xdb, 0x5b, 0x18, 0xdd, 0xdc, 0x04, 0xc1,
  0xd0, 0x58, 0xa4, 0xb9, 0xcd, 0xd1, 0xcd, 0x4d, 0x10, 0x8c, 0x8d, 0x44,
  0x9a, 0x1b, 0xdd, 0xdc, 0x04, 0xc1, 0xe0, 0x88, 0xd0, 0x95, 0xe1, 0x7d,
  0xb9, 0xbd, 0xc9, 0xb5, 0x31, 0xa1, 0x2b, 0xc3, 0xfb, 0x9a, 0xa3, 0x7b,
  0x93, 0x2b, 0x63, 0x51, 0x97, 0xe6, 0x46, 0x37, 0xb7, 0x81, 0xf2, 0x83,
  0x3f, 0x00, 0x85, 0x50, 0x10, 0x85, 0x6c, 0x14, 0x12, 0x52, 0x28, 0x05,
  0x53, 0x38, 0x05, 0x54, 0x48, 0x05, 0x55, 0x70, 0x83, 0x55, 0x70, 0x03,
  0x56, 0x88, 0x83, 0x2a, 0x6c, 0x6c, 0x76, 0x6d, 0x2e, 0x69, 0x64, 0x65,
  0x6e, 0x74, 0x53, 0x82, 0xa0, 0x0a, 0x19, 0x9e, 0x8b, 0x5d, 0x99, 0xdc,
  0x5c, 0xda, 0x9b, 0xdb, 0x94, 0x80, 0x68, 0x42, 0x86, 0xe7, 0x62, 0x17,
  0xc6, 0x66, 0x57, 0x26, 0x37, 0x25, 0x30, 0xea, 0x90, 0xe1, 0xb9, 0xcc,
  0xa1, 0x85, 0x91, 0x95, 0xc9, 0x35, 0xbd, 0x91, 0x95, 0xb1, 0x4d, 0x09,
  0x92, 0x32, 0x64, 0x78, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
  0x65, 0x73, 0x53, 0x82, 0x32, 0xa8, 0x44, 0x86, 0xe7, 0x42, 0x97, 0x07,
  0x57, 0x16, 0xe4, 0xe6, 0xf6, 0x46, 0x17, 0x46, 0x97, 0xf6, 0xe6, 0x36,
  0x37, 0x45, 0x98, 0x03, 0x3c, 0xa8, 0x43, 0x86, 0xe7, 0x52, 0xe6, 0x46,
  0x27, 0x97, 0x07, 0xf5, 0x96, 0xe6, 0x46, 0x37, 0x37, 0x25, 0xe0, 0x83,
  0x2e, 0x64, 0x78, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
  0x53, 0x02, 0x56, 0x00, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06,
  0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f,
  0xf4, 0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1,
  0x1c, 0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x35, 0xd0, 0x04, 0x7e,
  0xe7, 0xf9, 0x37, 0x08, 0x04, 0xce, 0xa0, 0xc1, 0x66, 0xb0, 0x04, 0x9a,
  0xc0, 0xef, 0x3c, 0xff, 0x0a, 0x81, 0xc0, 0x19, 0x34, 0xd8, 0x0c, 0x56,
  0x40, 0x13, 0xf8, 0x9d, 0xe7, 0xdf, 0x23, 0x10, 0x38, 0x83, 0x06, 0x9b,
  0xc1, 0x02, 0x68, 0x02, 0xbf, 0xf3, 0xfc, 0x2b, 0x05, 0x02, 0x67, 0xd0,
  0x60, 0x33, 0x68, 0x09, 0xcd, 0x70, 0xf9, 0xce, 0xe3, 0x07, 0x40, 0x14,
  0x21, 0x44, 0x64, 0x0a, 0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55,
  0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x7e, 0x71,
  0xdb, 0xb6, 0xb0, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41,
  0x44, 0xa5, 0x03, 0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6, 0x23, 0xb7, 0x6d,
  0x0c, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08,
  0x34, 0xc3, 0x42, 0x58, 0x81, 0x18, 0x0c, 0x97, 0xef, 0x3c, 0x7e, 0xb1,
  0x00, 0xd3, 0x44, 0x34, 0xc4, 0xd0, 0x1e, 0x11, 0x01, 0x0c, 0xe2, 0x20,
  0x36, 0x60, 0xe4, 0x50, 0x8f, 0x8f, 0xdc, 0xb6, 0x1d, 0x54, 0xc3, 0xe5,
  0x3b, 0x8f, 0x2f, 0x01, 0xcc, 0xb3, 0x10, 0x25, 0x51, 0x11, 0x8b, 0x5f,
  0xdc, 0xb6, 0x21, 0x58, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd7, 0x44,
  0x45, 0x04, 0x3b, 0x39, 0x11, 0xe1, 0x17, 0xb7, 0x6d, 0x06, 0xd2, 0x70,
  0xf9, 0xce, 0xe3, 0x4f, 0x47, 0x44, 0x00, 0x83, 0x38, 0xf8, 0xc8, 0x6d,
  0x1b, 0x01, 0xc1, 0x00, 0x48, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x5f, 0x4f, 0xc9, 0xd6, 0x79, 0x31, 0x04, 0xf4, 0xbd, 0x91, 0x65, 0x6b,
  0x48, 0x2f, 0x51, 0x9c, 0x44, 0x58, 0x49, 0x4c, 0x48, 0x0e, 0x00, 0x00,
  0x62, 0x00, 0x05, 0x00, 0x92, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x02, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x30, 0x0e, 0x00, 0x00,
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0x89, 0x03, 0x00, 0x00,
  0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39,
  0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62,
  0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14,
  0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20,
  0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90,
  0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a,
  0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d,
  0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x01, 0xd5, 0x06, 0x62,
  0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x36, 0x18, 0xc4, 0xff, 0xff,
  0xff, 0xff, 0x0f, 0x00, 0x03, 0x48, 0x00, 0x00, 0x49, 0x18, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x86,
  0x09, 0x01, 0x01, 0x00, 0x89, 0x20, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00,
  0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84,
  0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c,
  0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xb4, 0xc1, 0x0c, 0x40, 0x02, 0x01, 0x83,
  0x08, 0xc1, 0x30, 0x02, 0x50, 0x82, 0x81, 0x88, 0x39, 0x02, 0x30, 0x28,
  0x82, 0x61, 0xd0, 0x51, 0x06, 0xc3, 0x30, 0x28, 0xb9, 0x69, 0xb8, 0xfc,
  0x09, 0x7b, 0x08, 0xc9, 0x5f, 0x09, 0x69, 0x25, 0x26, 0xbf, 0xb8, 0x6d,
  0x54, 0x00, 0x00, 0x00, 0x18, 0x73, 0x04, 0x08, 0x31, 0xf7, 0x0c, 0x97,
  0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x21, 0xd0, 0x0c, 0x0b, 0x81, 0x82, 0xa6,
  0x30, 0x8b, 0xe1, 0x38, 0x00, 0x00, 0x00, 0x86, 0x61, 0x00, 0xf4, 0x94,
  0x65, 0x30, 0x1c, 0xc3, 0x30, 0x00, 0x00, 0x00, 0x18, 0x8a, 0xca, 0x30,
  0x18, 0x06, 0x4d, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc,
  0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc5, 0x6d, 0x23, 0x02, 0x00, 0x00, 0xa0,
  0x10, 0x95, 0xe1, 0x18, 0x64, 0x1d, 0x35, 0x5c, 0xfe, 0x84, 0x3d, 0x84,
  0xe4, 0x73, 0x1b, 0x55, 0xac, 0xc4, 0xe4, 0x23, 0xb7, 0x8d, 0x08, 0xc3,
  0x30, 0x8c, 0x42, 0x60, 0x86, 0x63, 0x50, 0x36, 0x47, 0x10, 0x14, 0xc3,
  0x31, 0x18, 0xc3, 0xd8, 0x88, 0x1b, 0x08, 0x18, 0x46, 0x20, 0x80, 0x99,
  0xda, 0x60, 0x1c, 0xd8, 0x21, 0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x80, 0x16,
  0xca, 0x01, 0x1f, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c, 0xe4, 0x80, 0x14,
  0xf8, 0xc0, 0x1e, 0xca, 0x61, 0x1c, 0xe8, 0xe1, 0x1d, 0xe4, 0x81, 0x0f,
  0xcc, 0x81, 0x1d, 0xde, 0x21, 0x1c, 0xe8, 0x81, 0x0d, 0xc0, 0x80, 0x0e,
  0xfc, 0x00, 0x0c, 0xfc, 0x40, 0x0f, 0xf4, 0xa0, 0x1d, 0xd2, 0x01, 0x1e,
  0xe6, 0xe1, 0x17, 0xe8, 0x21, 0x1f, 0xe0, 0xa1, 0x1c, 0x50, 0x60, 0xcc,
  0x24, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4,
  0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4,
  0xc0, 0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c,
  0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74,
  0xe0, 0x07, 0x60, 0xe0, 0x07, 0x48, 0xf8, 0x40, 0x0a, 0x67, 0x22, 0x83,
  0x71, 0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x59, 0xb8, 0x05,
  0x5a, 0x28, 0x07, 0x7c, 0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72, 0x90, 0x03,
  0x52, 0xe0, 0x03, 0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x07,
  0x3e, 0x30, 0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x36, 0x00, 0x03,
  0x3a, 0xf0, 0x03, 0x30, 0xf0, 0x03, 0x14, 0x7c, 0x34, 0x0e, 0x23, 0x08,
  0xc0, 0x0d, 0xdc, 0x46, 0xa3, 0xc1, 0x30, 0x4a, 0x32, 0x6f, 0x92, 0xa6,
  0x88, 0x12, 0x26, 0x9f, 0x05, 0x98, 0x67, 0x21, 0x22, 0x76, 0x02, 0x26,
  0x02, 0x05, 0x06, 0xa1, 0x53, 0x00, 0x83, 0x08, 0xc0, 0x30, 0x47, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0,
  0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x3a, 0x0f,
  0x24, 0x90, 0x21, 0x23, 0x45, 0x44, 0x00, 0x76, 0x00, 0x30, 0x3b, 0x00,
  0x98, 0x1d, 0x00, 0xcc, 0x0e, 0x00, 0x1e, 0xf2, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x39, 0x80, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x93, 0x00,
  0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0xe7,
  0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21,
  0x4f, 0x04, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x9e, 0x09, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x16, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x32, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0xf2, 0x70, 0x40, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x90, 0x05, 0x02, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x32, 0x4a, 0xa0, 0x08, 0x8a, 0x61, 0x04, 0xa0, 0x24,
  0xca, 0xa0, 0x40, 0x0a, 0xa1, 0x20, 0x68, 0x1b, 0x01, 0x20, 0x76, 0x04,
  0x80, 0xc8, 0x19, 0x00, 0x3a, 0x67, 0x00, 0x28, 0x9d, 0x01, 0x20, 0x71,
  0x06, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b,
  0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99,
  0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62,
  0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73,
  0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0xa3, 0x99, 0x20, 0x18,
  0xce, 0x06, 0x61, 0x20, 0x26, 0x08, 0xc6, 0xb3, 0x41, 0x18, 0x0c, 0x0a,
  0x63, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08, 0x06, 0x34, 0x41, 0x10,
  0x83, 0x8d, 0xc0, 0x04, 0xc1, 0x88, 0x36, 0x08, 0x4a, 0xb3, 0x21, 0x51,
  0x16, 0x46, 0x51, 0x06, 0x42, 0x71, 0x36, 0x04, 0xcf, 0x04, 0x81, 0x0c,
  0xb0, 0x09, 0xc2, 0x66, 0x6d, 0x58, 0x94, 0x88, 0x51, 0x94, 0x81, 0x90,
  0x24, 0xc9, 0xd9, 0xb0, 0x0c, 0x11, 0xa3, 0x0c, 0x03, 0x21, 0x49, 0x92,
  0xb3, 0x61, 0x21, 0x22, 0x46, 0x21, 0x06, 0x42, 0x92, 0x24, 0x67, 0x82,
  0x60, 0x48, 0x1b, 0x16, 0x2b, 0x62, 0x14, 0x6b, 0x20, 0x24, 0x49, 0x72,
  0x36, 0x10, 0x13, 0x55, 0x5d, 0x13, 0x84, 0x33, 0xc8, 0x26, 0x08, 0xc6,
  0xb4, 0x01, 0x51, 0x32, 0x46, 0x51, 0x06, 0x0d, 0xd8, 0x10, 0x6c, 0x13,
  0x84, 0x34, 0xd0, 0x36, 0x20, 0x4a, 0xc7, 0x28, 0xca, 0xa0, 0x00, 0x1b,
  0x02, 0x6f, 0x03, 0x01, 0x61, 0xdc, 0x37, 0x41, 0x28, 0x08, 0x12, 0x6d,
  0x61, 0x69, 0x6e, 0x13, 0x04, 0x83, 0x9a, 0x20, 0x18, 0xd5, 0x86, 0x81,
  0x0c, 0xc8, 0x60, 0xd8, 0x20, 0x8c, 0x41, 0x19, 0x6c, 0x28, 0xc2, 0x40,
  0x0c, 0x00, 0x30, 0x30, 0x03, 0x16, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x7c,
  0xde, 0xda, 0xdc, 0xd2, 0xe0, 0xde, 0xe8, 0xca, 0xdc, 0xe8, 0x40, 0xc6,
  0xd0, 0xc2, 0xe4, 0x18, 0x4d, 0xa5, 0xb5, 0xc1, 0xb1, 0x95, 0x81, 0x0c,
  0xbd, 0x0c, 0xad, 0xac, 0x80, 0x50, 0x09, 0x05, 0x05, 0x6d, 0x08, 0xd4,
  0x60, 0x82, 0xc0, 0x06, 0xd7, 0x86, 0x21, 0x0d, 0xd6, 0x80, 0x0d, 0x36,
  0x0c, 0x68, 0xd0, 0x06, 0x6c, 0xb0, 0x61, 0x70, 0x03, 0x37, 0x60, 0x83,
  0x2a, 0x6c, 0x6c, 0x76, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53,
  0x82, 0xa0, 0x0a, 0x19, 0x9e, 0x8b, 0x5d, 0x99, 0xdc, 0x5c, 0xda, 0x9b,
  0xdb, 0x94, 0x80, 0x68, 0x42, 0x86, 0xe7, 0x62, 0x17, 0xc6, 0x66, 0x57,
  0x26, 0x37, 0x25, 0x30, 0xea, 0x90, 0xe1, 0xb9, 0xcc, 0xa1, 0x85, 0x91,
  0x95, 0xc9, 0x35, 0xbd, 0x91, 0x95, 0xb1, 0x4d, 0x09, 0x90, 0x32, 0x64,
  0x78, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53,
  0x82, 0xaf, 0x0e, 0x19, 0x9e, 0x4b, 0x99, 0x1b, 0x9d, 0x5c, 0x1e, 0xd4,
  0x5b, 0x9a, 0x1b, 0xdd, 0xdc, 0x94, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8,
  0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2,
  0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x30, 0x83, 0x81,
  0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1, 0x1c, 0xc2, 0x61, 0x1d,
  0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x36, 0x00, 0x00, 0x00, 0x35, 0xd0, 0x04, 0x7e, 0xe7, 0xf9, 0x37, 0x08,
  0x04, 0xce, 0xa0, 0xc1, 0x66, 0xb0, 0x04, 0x9a, 0xc0, 0xef, 0x3c, 0xff,
  0x0a, 0x81, 0xc0, 0x19, 0x34, 0xd8, 0x0c, 0x56, 0x40, 0x13, 0xf8, 0x9d,
  0xe7, 0xdf, 0x23, 0x10, 0x38, 0x83, 0x06, 0x9b, 0xc1, 0x02, 0x68, 0x02,
  0xbf, 0xf3, 0xfc, 0x2b, 0x05, 0x02, 0x67, 0xd0, 0x60, 0x33, 0x68, 0x09,
  0xcd, 0x70, 0xf9, 0xce, 0xe3, 0x07, 0x40, 0x14, 0x21, 0x44, 0x64, 0x0a,
  0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a,
  0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x7e, 0x71, 0xdb, 0xb6, 0xb0, 0x0d,
  0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c,
  0x25, 0x61, 0x00, 0x02, 0xe6, 0x23, 0xb7, 0x6d, 0x0c, 0xd2, 0x70, 0xf9,
  0xce, 0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08, 0x34, 0xc3, 0x42, 0x58,
  0x81, 0x18, 0x0c, 0x97, 0xef, 0x3c, 0x7e, 0xb1, 0x00, 0xd3, 0x44, 0x34,
  0xc4, 0xd0, 0x1e, 0x11, 0x01, 0x0c, 0xe2, 0x20, 0x36, 0x60, 0xe4, 0x50,
  0x8f, 0x8f, 0xdc, 0xb6, 0x1d, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x01,
  0xcc, 0xb3, 0x10, 0x25, 0x51, 0x11, 0x8b, 0x5f, 0xdc, 0xb6, 0x21, 0x58,
  0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd7, 0x44, 0x45, 0x04, 0x3b, 0x39,
  0x11, 0xe1, 0x17, 0xb7, 0x6d, 0x06, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x4f,
  0x47, 0x44, 0x00, 0x83, 0x38, 0xf8, 0xc8, 0x6d, 0x1b, 0x01, 0xc1, 0x00,
  0x48, 0x03, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00,
  0x13, 0x04, 0x4a, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
  0xc4, 0x14, 0x41, 0x19, 0x8c, 0x00, 0x90, 0x31, 0x03, 0x50, 0x72, 0x65,
  0x57, 0x7c, 0x65, 0x18, 0x50, 0x40, 0x85, 0x54, 0xa0, 0x01, 0xa5, 0x1b,
  0x50, 0xc0, 0x01, 0x65, 0x53, 0x24, 0xc4, 0x94, 0x40, 0x79, 0x10, 0x30,
  0x46, 0x00, 0x82, 0x20, 0x48, 0x7f, 0x33, 0x00, 0x63, 0x04, 0x20, 0x08,
  0x82, 0xe8, 0x47, 0xeb, 0x50, 0x47, 0x20, 0x00, 0x06, 0x64, 0x50, 0x43,
  0x1d, 0x81, 0x10, 0x18, 0x90, 0x41, 0x0d, 0x75, 0x04, 0x82, 0x60, 0x40,
  0x06, 0x35, 0xd4, 0x11, 0x08, 0x83, 0x01, 0x19, 0xd4, 0x50, 0x47, 0x20,
  0x00, 0x06, 0x64, 0x90, 0xc1, 0x50, 0x47, 0x20, 0x04, 0x06, 0x64, 0x90,
  0xc1, 0x50, 0x47, 0x20, 0x08, 0x06, 0x64, 0x90, 0xc1, 0x50, 0x47, 0x20,
  0x0c, 0x06, 0x64, 0x90, 0xc1, 0x50, 0x47, 0x20, 0x00, 0x06, 0x64, 0x94,
  0xc1, 0x50, 0x47, 0x20, 0x04, 0x06, 0x64, 0x94, 0xc1, 0x50, 0x47, 0x20,
  0x08, 0x06, 0x64, 0x94, 0xc1, 0x50, 0x47, 0x20, 0x0c, 0x06, 0x64, 0x94,
  0x01, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xc0, 0xc1,
  0x01, 0x17, 0xa9, 0x81, 0x1a, 0x98, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x70, 0x71, 0xd0, 0x49, 0x6f, 0xf0, 0x06, 0x67, 0x30, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x9c, 0x1c, 0x78, 0x53, 0x1c, 0xc4, 0x01, 0x1a,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x37, 0x07, 0x1f, 0xf5, 0x06,
  0x6f, 0x90, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xc0, 0xd1, 0x01,
  0x18, 0x88, 0x01, 0x1c, 0xc0, 0x81, 0x1a, 0x8c, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x01, 0x57, 0x07, 0x61, 0x40, 0x06, 0x71, 0x10, 0x07, 0x6b, 0x30,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x9c, 0x1d, 0x88, 0x81, 0x19, 0xc8,
  0x81, 0x1c, 0xb0, 0xc1, 0x88, 0x41, 0x01, 0x80, 0x20, 0x18, 0x1c, 0x7e,
  0xb0, 0x8d, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0xe2, 0x07, 0x1d, 0x1d,
  0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0xf2, 0x07, 0x1e, 0x1e, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0xc5, 0x07, 0x65, 0x40, 0xd8, 0xc1,
  0x68, 0x42, 0x20, 0x8c, 0x26, 0x08, 0xc3, 0x15, 0x40, 0x5d, 0x01, 0x94,
  0x09, 0x1c, 0x7c, 0x4c, 0xe8, 0xe0, 0x63, 0x86, 0x20, 0x1f, 0x33, 0x04,
  0xf9, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x46, 0x0a, 0x6e, 0xd0,
  0xfc, 0xc1, 0x68, 0x42, 0x00, 0x5c, 0x00, 0xd4, 0x88, 0xc1, 0x03, 0x80,
  0x20, 0x18, 0x3c, 0xab, 0x00, 0x07, 0x52, 0x54, 0x10, 0x64, 0x40, 0x06,
  0xa2, 0x20, 0x0a, 0x73, 0x10, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10,
  0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x98, 0xa3, 0x06, 0xf0, 0xb1,
  0x28, 0x90, 0xcf, 0x88, 0xc1, 0x03, 0x80, 0x20, 0x18, 0x3c, 0xb2, 0x70,
  0x07, 0x19, 0x16, 0x2c, 0x6b, 0xb0, 0x06, 0xa9, 0x90, 0x0a, 0x7a, 0x80,
  0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68,
  0x02, 0x31, 0x18, 0xb1, 0xc0, 0xc7, 0x88, 0x05, 0x3e, 0x46, 0x2c, 0xf0,
  0x31, 0x62, 0x81, 0x8f, 0x61, 0x75, 0x00, 0x1f, 0xdb, 0x02, 0xf9, 0x8c,
  0x18, 0x3c, 0x00, 0x08, 0x82, 0xc1, 0xd3, 0x0b, 0xa2, 0x40, 0x06, 0x63,
  0x70, 0x05, 0x76, 0x60, 0x07, 0xb4, 0x40, 0x0b, 0xa5, 0x30, 0x8d, 0x26,
  0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31,
  0xd8, 0x42, 0xc0, 0xc7, 0x16, 0x02, 0x3e, 0xb6, 0x10, 0xf0, 0xb1, 0x85,
  0x80, 0xcf, 0x88, 0xc1, 0x03, 0x80, 0x20, 0x18, 0x3c, 0xe6, 0xb0, 0x0a,
  0x6d, 0xc0, 0x06, 0x95, 0xf2, 0x07, 0x7f, 0xd0, 0x0b, 0xbd, 0xe0, 0x0a,
  0xdc, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c,
  0x26, 0x10, 0x83, 0x25, 0x04, 0x7c, 0x2c, 0x21, 0xe0, 0x63, 0x09, 0x01,
  0x1f, 0x4b, 0x08, 0xf8, 0x18, 0x71, 0x0a, 0xf2, 0x31, 0x02, 0x15, 0xe4,
  0x63, 0x44, 0x2a, 0xc8, 0xc7, 0x08, 0x55, 0x90, 0xcf, 0x88, 0x81, 0x03,
  0x80, 0x20, 0x18, 0x44, 0xf2, 0x70, 0x0b, 0x7b, 0x60, 0x07, 0x75, 0xb0,
  0x0b, 0xc4, 0x20, 0x04, 0xae, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0xd9, 0x3b, 0xe4, 0x02, 0x1e, 0xa8, 0xc3, 0x68, 0x42, 0x10, 0x0c, 0x37,
  0x04, 0xef, 0x00, 0x06, 0xb3, 0x0c, 0x49, 0x10, 0xac, 0x60, 0xe8, 0x87,
  0x76, 0xd0, 0x83, 0x61, 0x03, 0x22, 0x40, 0x06, 0x60, 0x05, 0x43, 0x3f,
  0xb8, 0xc3, 0x1e, 0x0c, 0x1b, 0x10, 0x01, 0x32, 0x00, 0x2b, 0x18, 0xfa,
  0xe1, 0x1d, 0xf8, 0x60, 0xd8, 0x80, 0x08, 0x90, 0x01, 0x58, 0xc1, 0xd0,
  0x0f, 0xf0, 0xd0, 0x07, 0xc3, 0x06, 0x44, 0x80, 0x0c, 0xc0, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0x4c, 0xf8, 0xb0, 0x0b, 0xf0, 0x50, 0x7e, 0x00,
  0x0f, 0x3a, 0xdc, 0x10, 0xc8, 0x03, 0x18, 0xcc, 0x32, 0x08, 0x43, 0x50,
  0xa0, 0x60, 0x0f, 0xb0, 0x82, 0x81, 0x24, 0xe8, 0x21, 0xa0, 0x00, 0x18,
  0x2b, 0x18, 0x4a, 0xc2, 0x1e, 0x06, 0x0a, 0x80, 0xb1, 0x82, 0xc1, 0x24,
  0xf0, 0xa1, 0xa0, 0x00, 0x18, 0x2b, 0x18, 0x4e, 0x42, 0x1f, 0x0e, 0x0a,
  0x80, 0x51, 0xa9, 0x70, 0x0f, 0xb0, 0x82, 0xa1, 0x25, 0xfa, 0x21, 0xa0,
  0x00, 0x18, 0x2b, 0x18, 0x5c, 0xe2, 0x1f, 0x06, 0x0a, 0x80, 0xb1, 0x82,
  0xe1, 0x25, 0x42, 0xa2, 0xa0, 0x00, 0x18, 0x2b, 0x18, 0x60, 0x62, 0x24,
  0x0e, 0x0a, 0x80, 0x51, 0xb2, 0x40, 0x12, 0xb0, 0x82, 0xc1, 0x26, 0x4c,
  0x22, 0xa0, 0x00, 0x18, 0x2b, 0x18, 0x6e, 0x02, 0x25, 0x06, 0x0a, 0x80,
  0xb1, 0x82, 0x01, 0x27, 0x54, 0xa2, 0xa0, 0x00, 0x18, 0x2b, 0x18, 0x72,
  0x82, 0x25, 0x0e, 0x0a, 0x80, 0x61, 0x19, 0x1a, 0xc0, 0xc7, 0x30, 0x34,
  0x80, 0x8f, 0x5d, 0x68, 0x00, 0x1f, 0xb3, 0xd0, 0x00, 0x3e, 0x46, 0x50,
  0xf0, 0x31, 0x62, 0x82, 0x8f, 0x11, 0x12, 0x7c, 0x8c, 0x88, 0xe0, 0x63,
  0xc4, 0x03, 0x1f, 0x23, 0x1c, 0xf8, 0x18, 0xd1, 0xc0, 0xc7, 0x08, 0x06,
  0x3e, 0x46, 0xec, 0x83, 0x7c, 0x8c, 0xe0, 0x07, 0xf9, 0x18, 0xd1, 0x0f,
  0xf2, 0x31, 0xc2, 0x1f, 0xe4, 0x53, 0xea, 0x10, 0x16, 0x58, 0xea, 0x20,
  0x16, 0x38, 0x62, 0xe0, 0x00, 0x20, 0x08, 0x06, 0x11, 0x5a, 0xb4, 0x84,
  0x3c, 0x08, 0x41, 0x4c, 0x18, 0x05, 0x31, 0x90, 0xc4, 0xb0, 0x01, 0x31,
  0x07, 0xc6, 0x00, 0x0c, 0x1b, 0x10, 0x72, 0x50, 0x0c, 0xc0, 0xb0, 0x01,
  0x11, 0x07, 0xc4, 0x00, 0x0c, 0x1b, 0x10, 0x70, 0x30, 0x0c, 0xc0, 0x2c,
  0xc1, 0x30, 0x50, 0x01, 0x30, 0x02, 0x3d, 0x04, 0x03, 0x15, 0x00, 0x23,
  0xd0, 0x43, 0x30, 0x50, 0x01, 0x30, 0x02, 0x3d, 0x04, 0x03, 0x15, 0x00,
  0x23, 0xd0, 0x43, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x59, 0x5a,
  0xcc, 0x84, 0x3c, 0x90, 0xc5, 0x68, 0x42, 0x10, 0x0c, 0x37, 0x04, 0x68,
  0x01, 0x06, 0xb3, 0x0c, 0x09, 0x11, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0xc1, 0xe4, 0x16, 0x31, 0x61, 0x16, 0x45, 0x0f, 0x2e, 0xa1, 0xc3, 0x0d,
  0x01, 0x5a, 0x80, 0xc1, 0x2c, 0x43, 0x61, 0x04, 0x65, 0x0f, 0x6b, 0x01,
  0x2b, 0x18, 0xf4, 0x42, 0x2d, 0x02, 0x0a, 0x80, 0xb1, 0x82, 0x61, 0x2f,
  0xd8, 0x62, 0xa0, 0x00, 0x18, 0x2b, 0x18, 0xf8, 0xc2, 0x2d, 0x0a, 0x0a,
  0x80, 0xb1, 0x82, 0xa1, 0x2f, 0xe0, 0xe2, 0xa0, 0x00, 0x18, 0xf5, 0x0f,
  0x6f, 0x01, 0x2b, 0x18, 0x46, 0x63, 0x2e, 0x02, 0x0a, 0x80, 0xb1, 0x82,
  0x81, 0x34, 0xea, 0x62, 0xa0, 0x00, 0x18, 0x2b, 0x18, 0x4a, 0xe3, 0x2e,
  0x0a, 0x0a, 0x80, 0xb1, 0x82, 0xc1, 0x34, 0xf2, 0xe2, 0xa0, 0x00, 0x18,
  0x85, 0x12, 0x61, 0x01, 0x2b, 0x18, 0x58, 0x83, 0x2f, 0x02, 0x0a, 0x80,
  0xb1, 0x82, 0xa1, 0x35, 0xfc, 0x62, 0xa0, 0x00, 0x18, 0x2b, 0x18, 0x5c,
  0x03, 0x34, 0x0a, 0x0a, 0x80, 0xb1, 0x82, 0xe1, 0x35, 0x44, 0xe3, 0xa0,
  0x00, 0x18, 0x96, 0x91, 0x01, 0x7c, 0x0c, 0x23, 0x03, 0xf8, 0xd8, 0x45,
  0x06, 0xf0, 0x31, 0x8b, 0x0c, 0xe0, 0x63, 0x04, 0x05, 0x1f, 0x23, 0x26,
  0xf8, 0x18, 0x21, 0xc1, 0xc7, 0x88, 0x08, 0x3e, 0x46, 0x3c, 0xf0, 0x31,
  0xc2, 0x81, 0x8f, 0x11, 0x0d, 0x7c, 0x8c, 0x60, 0xe0, 0x63, 0x44, 0x5c,
  0xc8, 0xc7, 0x08, 0xb9, 0x90, 0x8f, 0x11, 0x73, 0x21, 0x1f, 0x23, 0xe8,
  0x42, 0x3e, 0x05, 0x16, 0xb6, 0x81, 0x05, 0x16, 0xb7, 0x81, 0x23, 0x06,
  0x0e, 0x00, 0x82, 0x60, 0x10, 0xf9, 0xc6, 0x68, 0xa4, 0x85, 0x10, 0x9c,
  0x86, 0x51, 0x10, 0x83, 0x5e, 0x0c, 0x1b, 0x10, 0xe9, 0x60, 0x0c, 0xc0,
  0xb0, 0x01, 0x81, 0x0e, 0xc5, 0x00, 0x0c, 0x1b, 0x10, 0xe7, 0x40, 0x0c,
  0xc0, 0xb0, 0x01, 0x61, 0x0e, 0xc3, 0x00, 0xcc, 0x12, 0x18, 0x03, 0x15,
  0x00, 0x53, 0xb0, 0x03, 0x31, 0x50, 0x01, 0x30, 0x05, 0x3b, 0x10, 0x03,
  0x15, 0x00, 0x53, 0xb0, 0x03, 0x31, 0x50, 0x01, 0x30, 0x05, 0x3b, 0x10,
  0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x90, 0xfd, 0x46, 0x6a, 0xa0, 0x85,
  0x6e, 0x8c, 0x26, 0x04, 0xc1, 0x70, 0x43, 0xa0, 0x1b, 0x60, 0x30, 0xcb,
  0x90, 0x1c, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x4c, 0xe4, 0x71,
  0x1a, 0xbc, 0x31, 0xdc, 0xa0, 0x16, 0xbd, 0x01, 0x06, 0xb3, 0x0c, 0x48,
  0x12, 0x90, 0x5f, 0x00, 0x83, 0xfc, 0x02, 0x18, 0xe4, 0x17, 0xc0, 0x20,
  0xbf, 0x00, 0x06, 0xf9, 0x05, 0x30, 0xc8, 0x2f, 0x80, 0x41, 0x7e, 0x01,
  0x0c, 0xf2, 0x0b, 0x60, 0x90, 0x5f, 0x00, 0x83, 0xfc, 0x02, 0x18, 0xe4,
  0x17, 0xc0, 0x20, 0xbf, 0x00, 0x86, 0x31, 0x14, 0x7c, 0x8c, 0xa1, 0xe0,
  0x63, 0x0c, 0x05, 0x1f, 0x63, 0x28, 0xf8, 0x18, 0xc1, 0xc0, 0xc7, 0x08,
  0x06, 0x3e, 0x46, 0x30, 0xf0, 0x31, 0x82, 0x81, 0x8f, 0x11, 0x0c, 0x7c,
  0x8c, 0x60, 0xe0, 0x63, 0x04, 0x03, 0x1f, 0x23, 0x18, 0xf8, 0x18, 0x71,
  0x1b, 0xf2, 0x31, 0x02, 0x37, 0xe4, 0x63, 0x44, 0x6e, 0xc8, 0xc7, 0x08,
  0xdd, 0x90, 0x4f, 0x99, 0x06, 0x7e, 0x60, 0x99, 0x46, 0x7e, 0xe0, 0x88,
  0x81, 0x03, 0x80, 0x20, 0x18, 0x44, 0x24, 0x92, 0x1e, 0xb0, 0x21, 0x04,
  0xed, 0x61, 0x14, 0xc4, 0x00, 0x1e, 0xb3, 0x04, 0x09, 0x06, 0xc4, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x5b, 0x06, 0x52, 0x08, 0xdc, 0x60, 0xcb, 0x60,
  0x0a, 0x81, 0x1b, 0x6c, 0x19, 0x50, 0x21, 0x70, 0x83, 0x2d, 0x83, 0x2a,
  0x04, 0x6e, 0xb0, 0x65, 0x88, 0x85, 0xc0, 0x0d, 0xb6, 0x0c, 0xb3, 0x10,
  0xb8, 0xc1, 0x96, 0xa1, 0x16, 0x02, 0x37, 0xd8, 0x32, 0xdc, 0x42, 0xe0,
  0x06, 0x5b, 0x06, 0x5d, 0x08, 0xdc, 0x60, 0xcb, 0xc0, 0x0b, 0x81, 0x1b,
  0x6c, 0x19, 0x7c, 0x21, 0x70, 0x83, 0x2d, 0x03, 0x38, 0x04, 0x6e, 0xb0,
  0x65, 0x18, 0x87, 0xc0, 0x0d, 0xb6, 0x0c, 0xe5, 0x10, 0xb8, 0xc1, 0x96,
  0xe1, 0x1c, 0x02, 0x37, 0xd8, 0x32, 0xa4, 0x43, 0xe0, 0x06, 0x5b, 0x86,
  0x7e, 0x08, 0xdc, 0x60, 0xcb, 0xe0, 0x0f, 0x81, 0x1b, 0x6c, 0x19, 0xfe,
  0x21, 0x70, 0x83, 0x2d, 0x03, 0x48, 0x04, 0x6e, 0xb0, 0x65, 0x80, 0x89,
  0xc0, 0x0d, 0xb6, 0x0c, 0x32, 0x11, 0xb8, 0xc1, 0x96, 0x81, 0x26, 0x02,
  0x37, 0xd8, 0x32, 0xd8, 0x44, 0xe0, 0x06, 0x5b, 0x86, 0x9c, 0x08, 0xdc,
  0x60, 0xcb, 0xb0, 0x13, 0x81, 0x1b, 0x6c, 0x19, 0x7a, 0x22, 0x70, 0x83,
  0x2d, 0xc3, 0x4f, 0x04, 0x6e, 0xb0, 0x65, 0x10, 0x8b, 0xc0, 0x0d, 0xb6,
  0x0c, 0x64, 0x11, 0xb8, 0xc1, 0x96, 0xc1, 0x2c, 0x02, 0x37, 0xd8, 0x32,
  0xa0, 0x45, 0xe0, 0x06, 0x5b, 0x06, 0xbe, 0x08, 0xdc, 0x60, 0xcb, 0xd0,
  0x17, 0x81, 0x1b, 0x6c, 0x19, 0xfc, 0x22, 0x70, 0x83, 0x2d, 0xc3, 0x5f,
  0x04, 0x6e, 0xb0, 0x65, 0x60, 0x8d, 0xc0, 0x0d, 0xb6, 0x0c, 0xad, 0x11,
  0xb8, 0xc1, 0x96, 0xc1, 0x35, 0x02, 0x37, 0xd8, 0x32, 0xbc, 0x46, 0xe0,
  0x06, 0x5b, 0x06, 0xd8, 0x08, 0xdc, 0x60, 0xcb, 0x10, 0x1b, 0x81, 0x1b,
  0x6c, 0x19, 0x64, 0x23, 0x70, 0x83, 0x2d, 0xc3, 0x6c, 0x04, 0x6e, 0xb0,
  0x65, 0xa0, 0x8d, 0xc0, 0x0d, 0xb6, 0x0c, 0xb5, 0x11, 0xb8, 0xc1, 0x96,
  0xc1, 0x36, 0x02, 0x37, 0xd8, 0x32, 0xdc, 0x46, 0xe0, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
