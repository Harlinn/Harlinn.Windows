#pragma once
#ifndef DATABASE_DATABASEREADERS_H_
#define DATABASE_DATABASEREADERS_H_

#include <HODBC.h>
#include <HCCData.h>
#include "Types/DataTypes.h"


namespace Barrelman::Database
{
    using namespace Harlinn;
    using namespace Harlinn::ODBC;
    using namespace Harlinn::Common::Core;

    class BaseColumnData
    {
    public:
        using Kind = Types::Kind;
        virtual ~BaseColumnData( ) = default;
        virtual Kind GetKind() const = 0;
        void ReadUnboundData( const ODBC::Statement& statement )
        {
        }
    protected:
        static void ThrowBoundsExceededException( )
        {
            throw Exception( L"Bounds exceeded." );
        }
        static void Assign( const WideString& str, WideString& destination, SQLLEN& lengthOrNullIndicator )
        {
            auto strLength = str.Length( );
            destination = str;
            lengthOrNullIndicator = static_cast< SQLLEN >( strLength );
        }
        static void Assign( const std::vector<Byte>& data, std::vector<Byte>& destination, SQLLEN& lengthOrNullIndicator )
        {
            auto dataLength = data.size( );
            destination = data;
            lengthOrNullIndicator = static_cast< SQLLEN >( dataLength );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, bool& value )
        {
            statement.BindBooleanColumn( fieldId, reinterpret_cast< Byte* >( &value ), nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBBoolean& value )
        {
            statement.BindBooleanColumn( fieldId, reinterpret_cast< Byte* >( value.data() ), value.Indicator() );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, SByte& value )
        {
            statement.BindSByteColumn( fieldId, &value, nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBSByte& value )
        {
            statement.BindSByteColumn( fieldId, value.data( ), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, Byte& value )
        {
            statement.BindByteColumn( fieldId, &value, nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBByte& value )
        {
            statement.BindByteColumn( fieldId, value.data(), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, Int16& value )
        {
            statement.BindInt16Column( fieldId, &value, nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBInt16& value )
        {
            statement.BindInt16Column( fieldId, value.data(), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, UInt16& value )
        {
            statement.BindUInt16Column( fieldId, &value, nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBUInt16& value )
        {
            statement.BindUInt16Column( fieldId, value.data( ), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, Int32& value )
        {
            statement.BindInt32Column( fieldId, &value, nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBInt32& value )
        {
            statement.BindInt32Column( fieldId, value.data( ), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, UInt32& value )
        {
            statement.BindUInt32Column( fieldId, &value, nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBUInt32& value )
        {
            statement.BindUInt32Column( fieldId, value.data( ), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, Int64& value )
        {
            statement.BindInt64Column( fieldId, &value, nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBInt64& value )
        {
            statement.BindInt64Column( fieldId, value.data( ), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, UInt64& value )
        {
            statement.BindUInt64Column( fieldId, &value, nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBUInt64& value )
        {
            statement.BindUInt64Column( fieldId, value.data( ), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, float& value )
        {
            statement.BindSingleColumn( fieldId, &value, nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBSingle& value )
        {
            statement.BindSingleColumn( fieldId, value.data( ), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, double& value )
        {
            statement.BindDoubleColumn( fieldId, &value, nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBDouble& value )
        {
            statement.BindDoubleColumn( fieldId, value.data( ), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, Currency& value )
        {
            statement.BindInt64Column( fieldId, reinterpret_cast< Int64* >( &value ), nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBCurrency& value )
        {
            statement.BindInt64Column( fieldId, reinterpret_cast< Int64* >( value.data() ), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DateTime& value )
        {
            statement.BindInt64Column( fieldId, reinterpret_cast< Int64* >( &value ), nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBDateTime& value )
        {
            statement.BindInt64Column( fieldId, reinterpret_cast< Int64* >( value.data() ), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, TimeSpan& value )
        {
            statement.BindInt64Column( fieldId, reinterpret_cast< Int64* >( &value ), nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBTimeSpan& value )
        {
            statement.BindInt64Column( fieldId, reinterpret_cast< Int64* >( value.data() ), value.Indicator( ) );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, Guid& value )
        {
            statement.BindGuidColumn( fieldId, &value, nullptr );
        }
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, DBGuid& value )
        {
            statement.BindGuidColumn( fieldId, value.data( ), value.Indicator( ) );
        }
        template<typename T>
            requires std::is_enum_v<T>
        static void Bind( const ODBC::Statement & statement, SQLUSMALLINT fieldId, T& value )
        {
            using IntegerType = std::underlying_type_t<T>;
            statement.BindColumn( fieldId, NativeType::Int32, &value, sizeof( IntegerType ), nullptr );
        }
        template<typename T>
            requires std::is_enum_v<T>
        static void Bind( const ODBC::Statement & statement, SQLUSMALLINT fieldId, DBEnum<T>& value )
        {
            using IntegerType = std::underlying_type_t<T>;
            statement.BindColumn( fieldId, NativeType::Int32, value.data( ), sizeof( IntegerType ), value.Indicator( ) );
        }
        template<size_t N>
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, FixedDBWideString<N>& value )
        {
            statement.BindColumn( fieldId, NativeType::WideChar, value.data( ), static_cast< SQLLEN >( N * sizeof( wchar_t ) ), value.Indicator( ) );
        }
        template<size_t N>
        static void Bind( const ODBC::Statement& statement, SQLUSMALLINT fieldId, FixedDBBinary<N>& value )
        {
            statement.BindColumn( fieldId, NativeType::Binary, value.data( ), static_cast< SQLLEN >( N ), value.Indicator( ) );
        }
        template<IO::StreamWriter StreamT, typename T>
            requires std::is_same_v<Currency, T> || std::is_same_v<DateTime, T> || std::is_same_v<TimeSpan, T> || std::is_same_v<Guid, T> || std::is_floating_point_v<T> || std::is_integral_v<T> || std::is_enum_v<T>
        void WriteColumnValue( IO::BinaryWriter<StreamT>& destination, T value )
        {
            destination.Write( value );
        }
        template<IO::StreamWriter StreamT, typename T>
            requires std::is_same_v<Currency, T> || std::is_same_v<DateTime, T> || std::is_same_v<TimeSpan, T> || std::is_same_v<Guid, T> || std::is_floating_point_v<T> || std::is_integral_v<T> || std::is_enum_v<T>
        void WriteColumnValue( IO::BinaryWriter<StreamT>& destination, T value, SQLLEN nullIndicator )
        {
            if ( nullIndicator != SQL_NULL_DATA )
            {
                destination.Write( true );
                destination.Write( value );
            }
            else
            {
                destination.Write( false );
            }
        }
        template<IO::StreamWriter StreamT, typename T, size_t N>
        void WriteNullableColumnValue( IO::BinaryWriter<StreamT>& destination, const std::array<T, N>& value, SQLLEN lengthOrNullIndicator )
        {
            if ( lengthOrNullIndicator != SQL_NULL_DATA )
            {
                destination.Write( true );

                if constexpr ( std::is_same_v<T, Byte> )
                {
                    auto size = static_cast< size_t >( lengthOrNullIndicator ) * sizeof( wchar_t );
                    destination.Write7BitEncoded( size );
                    destination.Write( value.data( ), size );
                }
                else
                {
                    auto size = static_cast< size_t >( lengthOrNullIndicator );
                    destination.WriteSize( size );
                    destination.Write( value.data( ), size );
                }

            }
            else
            {
                destination.Write( false );
            }
        }
        template<IO::StreamWriter StreamT, typename T, size_t N>
        void WriteColumnValue( IO::BinaryWriter<StreamT>& destination, const std::array<T, N>& value, SQLLEN length )
        {
            if constexpr ( std::is_same_v<T, wchar_t> )
            {
                auto size = static_cast< size_t >( length ) * sizeof( wchar_t );
                destination.Write7BitEncoded( size );
                destination.Write( value.data( ), size );
            }
            else
            {
                auto size = static_cast< size_t >( length );
                destination.WriteSize( size );
                destination.Write( value.data( ), size );
            }
        }
        template<IO::StreamWriter StreamT, typename T>
            requires std::is_same_v<WideString, T> || std::is_same_v<std::vector<Byte>, T> || std::is_same_v<std::optional<WideString>, T> || std::is_same_v<std::optional<std::vector<Byte>>, T>
        void WriteColumnValue( IO::BinaryWriter<StreamT>& destination, const T& value )
        {
            destination.Write( value );
        }
    };

    template<typename T>
        requires std::is_base_of_v<BaseColumnData, T>
    class SimpleColumnDataReader : public ODBC::DataReader, public T
    {
    public:
        using Base = ODBC::DataReader;
        SimpleColumnDataReader( const ODBC::Statement* statement )
            : Base( statement )
        {
            T::BindColumns( *statement );
        }
    protected:
        virtual void AfterFetch( ) override
        {
            T::ReadUnboundData( Base::Statement( ) );
        }
    };

    class AircraftTypeColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        FixedDBWideString<127> name_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;

        AircraftTypeColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AircraftType;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::AircraftType );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, name_);
        }
        void AssignTo( Types::AircraftTypeObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetName( name_ );
        }
    };

    using SimpleAircraftTypeDataReader = SimpleColumnDataReader<AircraftTypeColumnData>;

    class AisDeviceCommandColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid aisDevice_;
        DateTime timestamp_;
        Types::DeviceCommandSourceType deviceCommandSourceType_ = Types::DeviceCommandSourceType::Unknown;
        Guid deviceCommandSourceId_;
        DBGuid reply_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT AISDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCETYPE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCEID_FIELD_ID = 6;
        static constexpr SQLUSMALLINT REPLY_FIELD_ID = 7;

        AisDeviceCommandColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisDeviceCommand;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& AisDevice( ) const
        {
            return aisDevice_;
        }
        void SetAisDevice( const Guid& aisDevice )
        {
            aisDevice_ = aisDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::DeviceCommandSourceType DeviceCommandSourceType( ) const
        {
            return deviceCommandSourceType_;
        }
        void SetDeviceCommandSourceType( Types::DeviceCommandSourceType deviceCommandSourceType )
        {
            deviceCommandSourceType_ = deviceCommandSourceType;
        }
        const Guid& DeviceCommandSourceId( ) const
        {
            return deviceCommandSourceId_;
        }
        void SetDeviceCommandSourceId( const Guid& deviceCommandSourceId )
        {
            deviceCommandSourceId_ = deviceCommandSourceId;
        }
        const DBGuid& Reply( ) const
        {
            return reply_;
        }
        void SetReply( const DBGuid& reply )
        {
            reply_ = reply;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, AISDEVICE_FIELD_ID, aisDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEVICECOMMANDSOURCETYPE_FIELD_ID, deviceCommandSourceType_);
            Bind(statement, DEVICECOMMANDSOURCEID_FIELD_ID, deviceCommandSourceId_);
            Bind(statement, REPLY_FIELD_ID, reply_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::AisDeviceCommand );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, aisDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, deviceCommandSourceType_);
            WriteColumnValue( destination, deviceCommandSourceId_);
            WriteColumnValue( destination, reply_);
        }
        void AssignTo( Types::AisDeviceCommandObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetAisDevice( aisDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDeviceCommandSourceType( deviceCommandSourceType_ );
            destination.SetDeviceCommandSourceId( deviceCommandSourceId_ );
            destination.SetReply( reply_ );
        }
    };

    using SimpleAisDeviceCommandDataReader = SimpleColumnDataReader<AisDeviceCommandColumnData>;

    class AisDeviceCommandReplyColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid aisDevice_;
        DateTime timestamp_;
        Guid command_;
        Types::DeviceCommandReplyStatus status_ = Types::DeviceCommandReplyStatus::Unknown;
        WideString message_;
        SQLLEN messageLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT AISDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT COMMAND_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STATUS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MESSAGE_FIELD_ID = 7;

        AisDeviceCommandReplyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisDeviceCommandReply;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& AisDevice( ) const
        {
            return aisDevice_;
        }
        void SetAisDevice( const Guid& aisDevice )
        {
            aisDevice_ = aisDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const Guid& Command( ) const
        {
            return command_;
        }
        void SetCommand( const Guid& command )
        {
            command_ = command;
        }
        Types::DeviceCommandReplyStatus Status( ) const
        {
            return status_;
        }
        void SetStatus( Types::DeviceCommandReplyStatus status )
        {
            status_ = status;
        }
        const WideString& Message( ) const
        {
            return message_;
        }
        void SetMessage( const WideString& message )
        {
            message_ = message;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, AISDEVICE_FIELD_ID, aisDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, COMMAND_FIELD_ID, command_);
            Bind(statement, STATUS_FIELD_ID, status_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            message_ = statement.GetWideString(MESSAGE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::AisDeviceCommandReply );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, aisDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, command_);
            WriteColumnValue( destination, status_);
            WriteColumnValue( destination, message_);
        }
        void AssignTo( Types::AisDeviceCommandReplyObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetAisDevice( aisDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetCommand( command_ );
            destination.SetStatus( status_ );
            destination.SetMessage( message_ );
        }
    };

    using SimpleAisDeviceCommandReplyDataReader = SimpleColumnDataReader<AisDeviceCommandReplyColumnData>;

    class AisDeviceConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid aisDevice_;
        DateTime timestamp_;
        bool filter_ = false;
        double northWestLatitude_ = 0.0;
        double northWestLongitude_ = 0.0;
        double southEastLatitude_ = 0.0;
        double southEastLongitude_ = 0.0;
        FixedDBWideString<32> comPort_;
        Int32 baudRate_ = 0;
        FixedDBWideString<127> iPAddress_;
        Int32 port_ = 0;
        Int32 udpPort_ = 0;
        bool authenticate_ = false;
        FixedDBWideString<127> userName_;
        FixedDBWideString<127> password_;
        FixedDBWideString<127> authenticationURL_;
        Types::AisDeviceConnectionType connectionType_ = Types::AisDeviceConnectionType::Unknown;
        Int32 sourceUpdateRate_ = 0;
        FixedDBWideString<127> configurationURL_;
        bool storeReceivedSentences_ = false;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT AISDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT FILTER_FIELD_ID = 5;
        static constexpr SQLUSMALLINT NORTHWESTLATITUDE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT NORTHWESTLONGITUDE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT SOUTHEASTLATITUDE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT SOUTHEASTLONGITUDE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT COMPORT_FIELD_ID = 10;
        static constexpr SQLUSMALLINT BAUDRATE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT IPADDRESS_FIELD_ID = 12;
        static constexpr SQLUSMALLINT PORT_FIELD_ID = 13;
        static constexpr SQLUSMALLINT UDPPORT_FIELD_ID = 14;
        static constexpr SQLUSMALLINT AUTHENTICATE_FIELD_ID = 15;
        static constexpr SQLUSMALLINT USERNAME_FIELD_ID = 16;
        static constexpr SQLUSMALLINT PASSWORD_FIELD_ID = 17;
        static constexpr SQLUSMALLINT AUTHENTICATIONURL_FIELD_ID = 18;
        static constexpr SQLUSMALLINT CONNECTIONTYPE_FIELD_ID = 19;
        static constexpr SQLUSMALLINT SOURCEUPDATERATE_FIELD_ID = 20;
        static constexpr SQLUSMALLINT CONFIGURATIONURL_FIELD_ID = 21;
        static constexpr SQLUSMALLINT STORERECEIVEDSENTENCES_FIELD_ID = 22;

        AisDeviceConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisDeviceConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& AisDevice( ) const
        {
            return aisDevice_;
        }
        void SetAisDevice( const Guid& aisDevice )
        {
            aisDevice_ = aisDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        bool Filter( ) const
        {
            return filter_;
        }
        void SetFilter( bool filter )
        {
            filter_ = filter;
        }
        double NorthWestLatitude( ) const
        {
            return northWestLatitude_;
        }
        void SetNorthWestLatitude( double northWestLatitude )
        {
            northWestLatitude_ = northWestLatitude;
        }
        double NorthWestLongitude( ) const
        {
            return northWestLongitude_;
        }
        void SetNorthWestLongitude( double northWestLongitude )
        {
            northWestLongitude_ = northWestLongitude;
        }
        double SouthEastLatitude( ) const
        {
            return southEastLatitude_;
        }
        void SetSouthEastLatitude( double southEastLatitude )
        {
            southEastLatitude_ = southEastLatitude;
        }
        double SouthEastLongitude( ) const
        {
            return southEastLongitude_;
        }
        void SetSouthEastLongitude( double southEastLongitude )
        {
            southEastLongitude_ = southEastLongitude;
        }
        const FixedDBWideString<32>& ComPort( ) const
        {
            return comPort_;
        }
        void SetComPort( const FixedDBWideString<32>& comPort )
        {
            comPort_ = comPort;
        }
        Int32 BaudRate( ) const
        {
            return baudRate_;
        }
        void SetBaudRate( Int32 baudRate )
        {
            baudRate_ = baudRate;
        }
        const FixedDBWideString<127>& IPAddress( ) const
        {
            return iPAddress_;
        }
        void SetIPAddress( const FixedDBWideString<127>& iPAddress )
        {
            iPAddress_ = iPAddress;
        }
        Int32 Port( ) const
        {
            return port_;
        }
        void SetPort( Int32 port )
        {
            port_ = port;
        }
        Int32 UdpPort( ) const
        {
            return udpPort_;
        }
        void SetUdpPort( Int32 udpPort )
        {
            udpPort_ = udpPort;
        }
        bool Authenticate( ) const
        {
            return authenticate_;
        }
        void SetAuthenticate( bool authenticate )
        {
            authenticate_ = authenticate;
        }
        const FixedDBWideString<127>& UserName( ) const
        {
            return userName_;
        }
        void SetUserName( const FixedDBWideString<127>& userName )
        {
            userName_ = userName;
        }
        const FixedDBWideString<127>& Password( ) const
        {
            return password_;
        }
        void SetPassword( const FixedDBWideString<127>& password )
        {
            password_ = password;
        }
        const FixedDBWideString<127>& AuthenticationURL( ) const
        {
            return authenticationURL_;
        }
        void SetAuthenticationURL( const FixedDBWideString<127>& authenticationURL )
        {
            authenticationURL_ = authenticationURL;
        }
        Types::AisDeviceConnectionType ConnectionType( ) const
        {
            return connectionType_;
        }
        void SetConnectionType( Types::AisDeviceConnectionType connectionType )
        {
            connectionType_ = connectionType;
        }
        Int32 SourceUpdateRate( ) const
        {
            return sourceUpdateRate_;
        }
        void SetSourceUpdateRate( Int32 sourceUpdateRate )
        {
            sourceUpdateRate_ = sourceUpdateRate;
        }
        const FixedDBWideString<127>& ConfigurationURL( ) const
        {
            return configurationURL_;
        }
        void SetConfigurationURL( const FixedDBWideString<127>& configurationURL )
        {
            configurationURL_ = configurationURL;
        }
        bool StoreReceivedSentences( ) const
        {
            return storeReceivedSentences_;
        }
        void SetStoreReceivedSentences( bool storeReceivedSentences )
        {
            storeReceivedSentences_ = storeReceivedSentences;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, AISDEVICE_FIELD_ID, aisDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, FILTER_FIELD_ID, filter_);
            Bind(statement, NORTHWESTLATITUDE_FIELD_ID, northWestLatitude_);
            Bind(statement, NORTHWESTLONGITUDE_FIELD_ID, northWestLongitude_);
            Bind(statement, SOUTHEASTLATITUDE_FIELD_ID, southEastLatitude_);
            Bind(statement, SOUTHEASTLONGITUDE_FIELD_ID, southEastLongitude_);
            Bind(statement, COMPORT_FIELD_ID, comPort_);
            Bind(statement, BAUDRATE_FIELD_ID, baudRate_);
            Bind(statement, IPADDRESS_FIELD_ID, iPAddress_);
            Bind(statement, PORT_FIELD_ID, port_);
            Bind(statement, UDPPORT_FIELD_ID, udpPort_);
            Bind(statement, AUTHENTICATE_FIELD_ID, authenticate_);
            Bind(statement, USERNAME_FIELD_ID, userName_);
            Bind(statement, PASSWORD_FIELD_ID, password_);
            Bind(statement, AUTHENTICATIONURL_FIELD_ID, authenticationURL_);
            Bind(statement, CONNECTIONTYPE_FIELD_ID, connectionType_);
            Bind(statement, SOURCEUPDATERATE_FIELD_ID, sourceUpdateRate_);
            Bind(statement, CONFIGURATIONURL_FIELD_ID, configurationURL_);
            Bind(statement, STORERECEIVEDSENTENCES_FIELD_ID, storeReceivedSentences_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::AisDeviceConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, aisDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, filter_);
            WriteColumnValue( destination, northWestLatitude_);
            WriteColumnValue( destination, northWestLongitude_);
            WriteColumnValue( destination, southEastLatitude_);
            WriteColumnValue( destination, southEastLongitude_);
            WriteColumnValue( destination, comPort_);
            WriteColumnValue( destination, baudRate_);
            WriteColumnValue( destination, iPAddress_);
            WriteColumnValue( destination, port_);
            WriteColumnValue( destination, udpPort_);
            WriteColumnValue( destination, authenticate_);
            WriteColumnValue( destination, userName_);
            WriteColumnValue( destination, password_);
            WriteColumnValue( destination, authenticationURL_);
            WriteColumnValue( destination, connectionType_);
            WriteColumnValue( destination, sourceUpdateRate_);
            WriteColumnValue( destination, configurationURL_);
            WriteColumnValue( destination, storeReceivedSentences_);
        }
        void AssignTo( Types::AisDeviceConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetAisDevice( aisDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetFilter( filter_ );
            destination.SetNorthWestLatitude( northWestLatitude_ );
            destination.SetNorthWestLongitude( northWestLongitude_ );
            destination.SetSouthEastLatitude( southEastLatitude_ );
            destination.SetSouthEastLongitude( southEastLongitude_ );
            destination.SetComPort( comPort_ );
            destination.SetBaudRate( baudRate_ );
            destination.SetIPAddress( iPAddress_ );
            destination.SetPort( port_ );
            destination.SetUdpPort( udpPort_ );
            destination.SetAuthenticate( authenticate_ );
            destination.SetUserName( userName_ );
            destination.SetPassword( password_ );
            destination.SetAuthenticationURL( authenticationURL_ );
            destination.SetConnectionType( connectionType_ );
            destination.SetSourceUpdateRate( sourceUpdateRate_ );
            destination.SetConfigurationURL( configurationURL_ );
            destination.SetStoreReceivedSentences( storeReceivedSentences_ );
        }
    };

    using SimpleAisDeviceConfigurationDataReader = SimpleColumnDataReader<AisDeviceConfigurationColumnData>;

    class AisDeviceRawMessageColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid aisDevice_;
        DateTime timestamp_;
        bool isSent_ = false;
        FixedDBWideString<127> message_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT AISDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT ISSENT_FIELD_ID = 5;
        static constexpr SQLUSMALLINT MESSAGE_FIELD_ID = 6;

        AisDeviceRawMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisDeviceRawMessage;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& AisDevice( ) const
        {
            return aisDevice_;
        }
        void SetAisDevice( const Guid& aisDevice )
        {
            aisDevice_ = aisDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        bool IsSent( ) const
        {
            return isSent_;
        }
        void SetIsSent( bool isSent )
        {
            isSent_ = isSent;
        }
        const FixedDBWideString<127>& Message( ) const
        {
            return message_;
        }
        void SetMessage( const FixedDBWideString<127>& message )
        {
            message_ = message;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, AISDEVICE_FIELD_ID, aisDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, ISSENT_FIELD_ID, isSent_);
            Bind(statement, MESSAGE_FIELD_ID, message_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::AisDeviceRawMessage );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, aisDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, isSent_);
            WriteColumnValue( destination, message_);
        }
        void AssignTo( Types::AisDeviceRawMessageObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetAisDevice( aisDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetIsSent( isSent_ );
            destination.SetMessage( message_ );
        }
    };

    using SimpleAisDeviceRawMessageDataReader = SimpleColumnDataReader<AisDeviceRawMessageColumnData>;

    class AisDeviceRawSentenceColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid aisDevice_;
        DateTime timestamp_;
        WideString sentence_;
        SQLLEN sentenceLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT AISDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT SENTENCE_FIELD_ID = 5;

        AisDeviceRawSentenceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisDeviceRawSentence;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& AisDevice( ) const
        {
            return aisDevice_;
        }
        void SetAisDevice( const Guid& aisDevice )
        {
            aisDevice_ = aisDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const WideString& Sentence( ) const
        {
            return sentence_;
        }
        void SetSentence( const WideString& sentence )
        {
            sentence_ = sentence;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, AISDEVICE_FIELD_ID, aisDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            sentence_ = statement.GetWideString(SENTENCE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::AisDeviceRawSentence );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, aisDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, sentence_);
        }
        void AssignTo( Types::AisDeviceRawSentenceObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetAisDevice( aisDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetSentence( sentence_ );
        }
    };

    using SimpleAisDeviceRawSentenceDataReader = SimpleColumnDataReader<AisDeviceRawSentenceColumnData>;

    class AisMessageColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
        Guid aisDevice_;
        DateTime receivedTimestamp_;
        Int64 messageSequenceNumber_ = 0;
        Int32 repeat_ = 0;
        Guid mmsi_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT AISDEVICE_FIELD_ID = 4;
        static constexpr SQLUSMALLINT RECEIVEDTIMESTAMP_FIELD_ID = 5;
        static constexpr SQLUSMALLINT MESSAGESEQUENCENUMBER_FIELD_ID = 6;
        static constexpr SQLUSMALLINT REPEAT_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MMSI_FIELD_ID = 8;

        AisMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisMessage;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& AisDevice( ) const
        {
            return aisDevice_;
        }
        void SetAisDevice( const Guid& aisDevice )
        {
            aisDevice_ = aisDevice;
        }
        const DateTime& ReceivedTimestamp( ) const
        {
            return receivedTimestamp_;
        }
        void SetReceivedTimestamp( const DateTime& receivedTimestamp )
        {
            receivedTimestamp_ = receivedTimestamp;
        }
        Int64 MessageSequenceNumber( ) const
        {
            return messageSequenceNumber_;
        }
        void SetMessageSequenceNumber( Int64 messageSequenceNumber )
        {
            messageSequenceNumber_ = messageSequenceNumber;
        }
        Int32 Repeat( ) const
        {
            return repeat_;
        }
        void SetRepeat( Int32 repeat )
        {
            repeat_ = repeat;
        }
        const Guid& Mmsi( ) const
        {
            return mmsi_;
        }
        void SetMmsi( const Guid& mmsi )
        {
            mmsi_ = mmsi;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, AISDEVICE_FIELD_ID, aisDevice_);
            Bind(statement, RECEIVEDTIMESTAMP_FIELD_ID, receivedTimestamp_);
            Bind(statement, MESSAGESEQUENCENUMBER_FIELD_ID, messageSequenceNumber_);
            Bind(statement, REPEAT_FIELD_ID, repeat_);
            Bind(statement, MMSI_FIELD_ID, mmsi_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::AisMessage );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, aisDevice_);
            WriteColumnValue( destination, receivedTimestamp_);
            WriteColumnValue( destination, messageSequenceNumber_);
            WriteColumnValue( destination, repeat_);
            WriteColumnValue( destination, mmsi_);
        }
        void AssignTo( Types::AisMessageObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetAisDevice( aisDevice_ );
            destination.SetReceivedTimestamp( receivedTimestamp_ );
            destination.SetMessageSequenceNumber( messageSequenceNumber_ );
            destination.SetRepeat( repeat_ );
            destination.SetMmsi( mmsi_ );
        }
    };

    using SimpleAisMessageDataReader = SimpleColumnDataReader<AisMessageColumnData>;

    class AidToNavigationReportMessageColumnData : public AisMessageColumnData
    {
        Types::NavigationalAidType navigationalAidType_ = Types::NavigationalAidType::NotSpecified;
        FixedDBWideString<127> name_;
        Types::PositionAccuracy positionAccuracy_ = Types::PositionAccuracy::Low;
        double longitude_ = 0.0;
        double latitude_ = 0.0;
        Int32 dimensionToBow_ = 0;
        Int32 dimensionToStern_ = 0;
        Int32 dimensionToPort_ = 0;
        Int32 dimensionToStarboard_ = 0;
        Types::PositionFixType positionFixType_ = Types::PositionFixType::Undefined1;
        Int32 timestamp_ = 0;
        bool offPosition_ = false;
        Int32 regionalReserved_ = 0;
        Types::Raim raim_ = Types::Raim::NotInUse;
        bool virtualAid_ = false;
        bool assigned_ = false;
        Int32 spare_ = 0;
        FixedDBWideString<127> nameExtension_;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT NAVIGATIONALAIDTYPE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 9;
        static constexpr SQLUSMALLINT POSITIONACCURACY_FIELD_ID = 10;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT DIMENSIONTOBOW_FIELD_ID = 13;
        static constexpr SQLUSMALLINT DIMENSIONTOSTERN_FIELD_ID = 14;
        static constexpr SQLUSMALLINT DIMENSIONTOPORT_FIELD_ID = 15;
        static constexpr SQLUSMALLINT DIMENSIONTOSTARBOARD_FIELD_ID = 16;
        static constexpr SQLUSMALLINT POSITIONFIXTYPE_FIELD_ID = 17;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 18;
        static constexpr SQLUSMALLINT OFFPOSITION_FIELD_ID = 19;
        static constexpr SQLUSMALLINT REGIONALRESERVED_FIELD_ID = 20;
        static constexpr SQLUSMALLINT RAIM_FIELD_ID = 21;
        static constexpr SQLUSMALLINT VIRTUALAID_FIELD_ID = 22;
        static constexpr SQLUSMALLINT ASSIGNED_FIELD_ID = 23;
        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 24;
        static constexpr SQLUSMALLINT NAMEEXTENSION_FIELD_ID = 25;

        AidToNavigationReportMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AidToNavigationReportMessage;
        }

        Types::NavigationalAidType NavigationalAidType( ) const
        {
            return navigationalAidType_;
        }
        void SetNavigationalAidType( Types::NavigationalAidType navigationalAidType )
        {
            navigationalAidType_ = navigationalAidType;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        Types::PositionAccuracy PositionAccuracy( ) const
        {
            return positionAccuracy_;
        }
        void SetPositionAccuracy( Types::PositionAccuracy positionAccuracy )
        {
            positionAccuracy_ = positionAccuracy;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        Int32 DimensionToBow( ) const
        {
            return dimensionToBow_;
        }
        void SetDimensionToBow( Int32 dimensionToBow )
        {
            dimensionToBow_ = dimensionToBow;
        }
        Int32 DimensionToStern( ) const
        {
            return dimensionToStern_;
        }
        void SetDimensionToStern( Int32 dimensionToStern )
        {
            dimensionToStern_ = dimensionToStern;
        }
        Int32 DimensionToPort( ) const
        {
            return dimensionToPort_;
        }
        void SetDimensionToPort( Int32 dimensionToPort )
        {
            dimensionToPort_ = dimensionToPort;
        }
        Int32 DimensionToStarboard( ) const
        {
            return dimensionToStarboard_;
        }
        void SetDimensionToStarboard( Int32 dimensionToStarboard )
        {
            dimensionToStarboard_ = dimensionToStarboard;
        }
        Types::PositionFixType PositionFixType( ) const
        {
            return positionFixType_;
        }
        void SetPositionFixType( Types::PositionFixType positionFixType )
        {
            positionFixType_ = positionFixType;
        }
        Int32 Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( Int32 timestamp )
        {
            timestamp_ = timestamp;
        }
        bool OffPosition( ) const
        {
            return offPosition_;
        }
        void SetOffPosition( bool offPosition )
        {
            offPosition_ = offPosition;
        }
        Int32 RegionalReserved( ) const
        {
            return regionalReserved_;
        }
        void SetRegionalReserved( Int32 regionalReserved )
        {
            regionalReserved_ = regionalReserved;
        }
        Types::Raim Raim( ) const
        {
            return raim_;
        }
        void SetRaim( Types::Raim raim )
        {
            raim_ = raim;
        }
        bool VirtualAid( ) const
        {
            return virtualAid_;
        }
        void SetVirtualAid( bool virtualAid )
        {
            virtualAid_ = virtualAid;
        }
        bool Assigned( ) const
        {
            return assigned_;
        }
        void SetAssigned( bool assigned )
        {
            assigned_ = assigned;
        }
        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        const FixedDBWideString<127>& NameExtension( ) const
        {
            return nameExtension_;
        }
        void SetNameExtension( const FixedDBWideString<127>& nameExtension )
        {
            nameExtension_ = nameExtension;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, NAVIGATIONALAIDTYPE_FIELD_ID, navigationalAidType_);
            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, POSITIONACCURACY_FIELD_ID, positionAccuracy_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, DIMENSIONTOBOW_FIELD_ID, dimensionToBow_);
            Bind(statement, DIMENSIONTOSTERN_FIELD_ID, dimensionToStern_);
            Bind(statement, DIMENSIONTOPORT_FIELD_ID, dimensionToPort_);
            Bind(statement, DIMENSIONTOSTARBOARD_FIELD_ID, dimensionToStarboard_);
            Bind(statement, POSITIONFIXTYPE_FIELD_ID, positionFixType_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, OFFPOSITION_FIELD_ID, offPosition_);
            Bind(statement, REGIONALRESERVED_FIELD_ID, regionalReserved_);
            Bind(statement, RAIM_FIELD_ID, raim_);
            Bind(statement, VIRTUALAID_FIELD_ID, virtualAid_);
            Bind(statement, ASSIGNED_FIELD_ID, assigned_);
            Bind(statement, SPARE_FIELD_ID, spare_);
            Bind(statement, NAMEEXTENSION_FIELD_ID, nameExtension_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, navigationalAidType_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, positionAccuracy_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, dimensionToBow_);
            WriteColumnValue( destination, dimensionToStern_);
            WriteColumnValue( destination, dimensionToPort_);
            WriteColumnValue( destination, dimensionToStarboard_);
            WriteColumnValue( destination, positionFixType_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, offPosition_);
            WriteColumnValue( destination, regionalReserved_);
            WriteColumnValue( destination, raim_);
            WriteColumnValue( destination, virtualAid_);
            WriteColumnValue( destination, assigned_);
            WriteColumnValue( destination, spare_);
            WriteColumnValue( destination, nameExtension_);
        }
        void AssignTo( Types::AidToNavigationReportMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetNavigationalAidType( navigationalAidType_ );
            destination.SetName( name_ );
            destination.SetPositionAccuracy( positionAccuracy_ );
            destination.SetLongitude( longitude_ );
            destination.SetLatitude( latitude_ );
            destination.SetDimensionToBow( dimensionToBow_ );
            destination.SetDimensionToStern( dimensionToStern_ );
            destination.SetDimensionToPort( dimensionToPort_ );
            destination.SetDimensionToStarboard( dimensionToStarboard_ );
            destination.SetPositionFixType( positionFixType_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetOffPosition( offPosition_ );
            destination.SetRegionalReserved( regionalReserved_ );
            destination.SetRaim( raim_ );
            destination.SetVirtualAid( virtualAid_ );
            destination.SetAssigned( assigned_ );
            destination.SetSpare( spare_ );
            destination.SetNameExtension( nameExtension_ );
        }
    };

    using SimpleAidToNavigationReportMessageDataReader = SimpleColumnDataReader<AidToNavigationReportMessageColumnData>;

    class AisAddressedSafetyRelatedMessageColumnData : public AisMessageColumnData
    {
        Int32 sequenceNumber_ = 0;
        Guid destinationMmsi_;
        bool retransmitFlag_ = false;
        Int32 spare_ = 0;
        FixedDBWideString<127> text_;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT SEQUENCENUMBER_FIELD_ID = 8;
        static constexpr SQLUSMALLINT DESTINATIONMMSI_FIELD_ID = 9;
        static constexpr SQLUSMALLINT RETRANSMITFLAG_FIELD_ID = 10;
        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT TEXT_FIELD_ID = 12;

        AisAddressedSafetyRelatedMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisAddressedSafetyRelatedMessage;
        }

        Int32 SequenceNumber( ) const
        {
            return sequenceNumber_;
        }
        void SetSequenceNumber( Int32 sequenceNumber )
        {
            sequenceNumber_ = sequenceNumber;
        }
        const Guid& DestinationMmsi( ) const
        {
            return destinationMmsi_;
        }
        void SetDestinationMmsi( const Guid& destinationMmsi )
        {
            destinationMmsi_ = destinationMmsi;
        }
        bool RetransmitFlag( ) const
        {
            return retransmitFlag_;
        }
        void SetRetransmitFlag( bool retransmitFlag )
        {
            retransmitFlag_ = retransmitFlag;
        }
        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        const FixedDBWideString<127>& Text( ) const
        {
            return text_;
        }
        void SetText( const FixedDBWideString<127>& text )
        {
            text_ = text;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, SEQUENCENUMBER_FIELD_ID, sequenceNumber_);
            Bind(statement, DESTINATIONMMSI_FIELD_ID, destinationMmsi_);
            Bind(statement, RETRANSMITFLAG_FIELD_ID, retransmitFlag_);
            Bind(statement, SPARE_FIELD_ID, spare_);
            Bind(statement, TEXT_FIELD_ID, text_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, sequenceNumber_);
            WriteColumnValue( destination, destinationMmsi_);
            WriteColumnValue( destination, retransmitFlag_);
            WriteColumnValue( destination, spare_);
            WriteColumnValue( destination, text_);
        }
        void AssignTo( Types::AisAddressedSafetyRelatedMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetSequenceNumber( sequenceNumber_ );
            destination.SetDestinationMmsi( destinationMmsi_ );
            destination.SetRetransmitFlag( retransmitFlag_ );
            destination.SetSpare( spare_ );
            destination.SetText( text_ );
        }
    };

    using SimpleAisAddressedSafetyRelatedMessageDataReader = SimpleColumnDataReader<AisAddressedSafetyRelatedMessageColumnData>;

    class AisBaseStationReportMessageColumnData : public AisMessageColumnData
    {
        DateTime timestamp_;
        Types::PositionAccuracy positionAccuracy_ = Types::PositionAccuracy::Low;
        double longitude_ = 0.0;
        double latitude_ = 0.0;
        Types::PositionFixType positionFixType_ = Types::PositionFixType::Undefined1;
        Int32 spare_ = 0;
        Types::Raim raim_ = Types::Raim::NotInUse;
        Int32 radioStatus_ = 0;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 8;
        static constexpr SQLUSMALLINT POSITIONACCURACY_FIELD_ID = 9;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 10;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT POSITIONFIXTYPE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 13;
        static constexpr SQLUSMALLINT RAIM_FIELD_ID = 14;
        static constexpr SQLUSMALLINT RADIOSTATUS_FIELD_ID = 15;

        AisBaseStationReportMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisBaseStationReportMessage;
        }

        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::PositionAccuracy PositionAccuracy( ) const
        {
            return positionAccuracy_;
        }
        void SetPositionAccuracy( Types::PositionAccuracy positionAccuracy )
        {
            positionAccuracy_ = positionAccuracy;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        Types::PositionFixType PositionFixType( ) const
        {
            return positionFixType_;
        }
        void SetPositionFixType( Types::PositionFixType positionFixType )
        {
            positionFixType_ = positionFixType;
        }
        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        Types::Raim Raim( ) const
        {
            return raim_;
        }
        void SetRaim( Types::Raim raim )
        {
            raim_ = raim;
        }
        Int32 RadioStatus( ) const
        {
            return radioStatus_;
        }
        void SetRadioStatus( Int32 radioStatus )
        {
            radioStatus_ = radioStatus;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, POSITIONACCURACY_FIELD_ID, positionAccuracy_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, POSITIONFIXTYPE_FIELD_ID, positionFixType_);
            Bind(statement, SPARE_FIELD_ID, spare_);
            Bind(statement, RAIM_FIELD_ID, raim_);
            Bind(statement, RADIOSTATUS_FIELD_ID, radioStatus_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, positionAccuracy_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, positionFixType_);
            WriteColumnValue( destination, spare_);
            WriteColumnValue( destination, raim_);
            WriteColumnValue( destination, radioStatus_);
        }
        void AssignTo( Types::AisBaseStationReportMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetTimestamp( timestamp_ );
            destination.SetPositionAccuracy( positionAccuracy_ );
            destination.SetLongitude( longitude_ );
            destination.SetLatitude( latitude_ );
            destination.SetPositionFixType( positionFixType_ );
            destination.SetSpare( spare_ );
            destination.SetRaim( raim_ );
            destination.SetRadioStatus( radioStatus_ );
        }
    };

    using SimpleAisBaseStationReportMessageDataReader = SimpleColumnDataReader<AisBaseStationReportMessageColumnData>;

    class AisBinaryAcknowledgeMessageColumnData : public AisMessageColumnData
    {
        Int32 spare_ = 0;
        Int32 sequenceNumber1_ = 0;
        Guid mmsi1_;
        DBInt32 sequenceNumber2_;
        DBGuid mmsi2_;
        DBInt32 sequenceNumber3_;
        DBGuid mmsi3_;
        DBInt32 sequenceNumber4_;
        DBGuid mmsi4_;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT SEQUENCENUMBER1_FIELD_ID = 9;
        static constexpr SQLUSMALLINT MMSI1_FIELD_ID = 10;
        static constexpr SQLUSMALLINT SEQUENCENUMBER2_FIELD_ID = 11;
        static constexpr SQLUSMALLINT MMSI2_FIELD_ID = 12;
        static constexpr SQLUSMALLINT SEQUENCENUMBER3_FIELD_ID = 13;
        static constexpr SQLUSMALLINT MMSI3_FIELD_ID = 14;
        static constexpr SQLUSMALLINT SEQUENCENUMBER4_FIELD_ID = 15;
        static constexpr SQLUSMALLINT MMSI4_FIELD_ID = 16;

        AisBinaryAcknowledgeMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisBinaryAcknowledgeMessage;
        }

        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        Int32 SequenceNumber1( ) const
        {
            return sequenceNumber1_;
        }
        void SetSequenceNumber1( Int32 sequenceNumber1 )
        {
            sequenceNumber1_ = sequenceNumber1;
        }
        const Guid& Mmsi1( ) const
        {
            return mmsi1_;
        }
        void SetMmsi1( const Guid& mmsi1 )
        {
            mmsi1_ = mmsi1;
        }
        const DBInt32& SequenceNumber2( ) const
        {
            return sequenceNumber2_;
        }
        void SetSequenceNumber2( const DBInt32& sequenceNumber2 )
        {
            sequenceNumber2_ = sequenceNumber2;
        }
        const DBGuid& Mmsi2( ) const
        {
            return mmsi2_;
        }
        void SetMmsi2( const DBGuid& mmsi2 )
        {
            mmsi2_ = mmsi2;
        }
        const DBInt32& SequenceNumber3( ) const
        {
            return sequenceNumber3_;
        }
        void SetSequenceNumber3( const DBInt32& sequenceNumber3 )
        {
            sequenceNumber3_ = sequenceNumber3;
        }
        const DBGuid& Mmsi3( ) const
        {
            return mmsi3_;
        }
        void SetMmsi3( const DBGuid& mmsi3 )
        {
            mmsi3_ = mmsi3;
        }
        const DBInt32& SequenceNumber4( ) const
        {
            return sequenceNumber4_;
        }
        void SetSequenceNumber4( const DBInt32& sequenceNumber4 )
        {
            sequenceNumber4_ = sequenceNumber4;
        }
        const DBGuid& Mmsi4( ) const
        {
            return mmsi4_;
        }
        void SetMmsi4( const DBGuid& mmsi4 )
        {
            mmsi4_ = mmsi4;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, SPARE_FIELD_ID, spare_);
            Bind(statement, SEQUENCENUMBER1_FIELD_ID, sequenceNumber1_);
            Bind(statement, MMSI1_FIELD_ID, mmsi1_);
            Bind(statement, SEQUENCENUMBER2_FIELD_ID, sequenceNumber2_);
            Bind(statement, MMSI2_FIELD_ID, mmsi2_);
            Bind(statement, SEQUENCENUMBER3_FIELD_ID, sequenceNumber3_);
            Bind(statement, MMSI3_FIELD_ID, mmsi3_);
            Bind(statement, SEQUENCENUMBER4_FIELD_ID, sequenceNumber4_);
            Bind(statement, MMSI4_FIELD_ID, mmsi4_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, spare_);
            WriteColumnValue( destination, sequenceNumber1_);
            WriteColumnValue( destination, mmsi1_);
            WriteColumnValue( destination, sequenceNumber2_);
            WriteColumnValue( destination, mmsi2_);
            WriteColumnValue( destination, sequenceNumber3_);
            WriteColumnValue( destination, mmsi3_);
            WriteColumnValue( destination, sequenceNumber4_);
            WriteColumnValue( destination, mmsi4_);
        }
        void AssignTo( Types::AisBinaryAcknowledgeMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetSpare( spare_ );
            destination.SetSequenceNumber1( sequenceNumber1_ );
            destination.SetMmsi1( mmsi1_ );
            destination.SetSequenceNumber2( sequenceNumber2_ );
            destination.SetMmsi2( mmsi2_ );
            destination.SetSequenceNumber3( sequenceNumber3_ );
            destination.SetMmsi3( mmsi3_ );
            destination.SetSequenceNumber4( sequenceNumber4_ );
            destination.SetMmsi4( mmsi4_ );
        }
    };

    using SimpleAisBinaryAcknowledgeMessageDataReader = SimpleColumnDataReader<AisBinaryAcknowledgeMessageColumnData>;

    class AisBinaryAddressedMessageColumnData : public AisMessageColumnData
    {
        Int32 sequenceNumber_ = 0;
        Guid destinationMmsi_;
        bool retransmitFlag_ = false;
        Int32 spare_ = 0;
        Int32 designatedAreaCode_ = 0;
        Int32 functionalId_ = 0;
        WideString data_;
        SQLLEN dataLength_ = SQL_NULL_DATA;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT SEQUENCENUMBER_FIELD_ID = 8;
        static constexpr SQLUSMALLINT DESTINATIONMMSI_FIELD_ID = 9;
        static constexpr SQLUSMALLINT RETRANSMITFLAG_FIELD_ID = 10;
        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT DESIGNATEDAREACODE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT FUNCTIONALID_FIELD_ID = 13;
        static constexpr SQLUSMALLINT DATA_FIELD_ID = 14;

        AisBinaryAddressedMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisBinaryAddressedMessage;
        }

        Int32 SequenceNumber( ) const
        {
            return sequenceNumber_;
        }
        void SetSequenceNumber( Int32 sequenceNumber )
        {
            sequenceNumber_ = sequenceNumber;
        }
        const Guid& DestinationMmsi( ) const
        {
            return destinationMmsi_;
        }
        void SetDestinationMmsi( const Guid& destinationMmsi )
        {
            destinationMmsi_ = destinationMmsi;
        }
        bool RetransmitFlag( ) const
        {
            return retransmitFlag_;
        }
        void SetRetransmitFlag( bool retransmitFlag )
        {
            retransmitFlag_ = retransmitFlag;
        }
        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        Int32 DesignatedAreaCode( ) const
        {
            return designatedAreaCode_;
        }
        void SetDesignatedAreaCode( Int32 designatedAreaCode )
        {
            designatedAreaCode_ = designatedAreaCode;
        }
        Int32 FunctionalId( ) const
        {
            return functionalId_;
        }
        void SetFunctionalId( Int32 functionalId )
        {
            functionalId_ = functionalId;
        }
        const WideString& Data( ) const
        {
            return data_;
        }
        void SetData( const WideString& data )
        {
            data_ = data;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, SEQUENCENUMBER_FIELD_ID, sequenceNumber_);
            Bind(statement, DESTINATIONMMSI_FIELD_ID, destinationMmsi_);
            Bind(statement, RETRANSMITFLAG_FIELD_ID, retransmitFlag_);
            Bind(statement, SPARE_FIELD_ID, spare_);
            Bind(statement, DESIGNATEDAREACODE_FIELD_ID, designatedAreaCode_);
            Bind(statement, FUNCTIONALID_FIELD_ID, functionalId_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            data_ = statement.GetWideString(DATA_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, sequenceNumber_);
            WriteColumnValue( destination, destinationMmsi_);
            WriteColumnValue( destination, retransmitFlag_);
            WriteColumnValue( destination, spare_);
            WriteColumnValue( destination, designatedAreaCode_);
            WriteColumnValue( destination, functionalId_);
            WriteColumnValue( destination, data_);
        }
        void AssignTo( Types::AisBinaryAddressedMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetSequenceNumber( sequenceNumber_ );
            destination.SetDestinationMmsi( destinationMmsi_ );
            destination.SetRetransmitFlag( retransmitFlag_ );
            destination.SetSpare( spare_ );
            destination.SetDesignatedAreaCode( designatedAreaCode_ );
            destination.SetFunctionalId( functionalId_ );
            destination.SetData( data_ );
        }
    };

    using SimpleAisBinaryAddressedMessageDataReader = SimpleColumnDataReader<AisBinaryAddressedMessageColumnData>;

    class AisBinaryBroadcastMessageColumnData : public AisMessageColumnData
    {
        Int32 spare_ = 0;
        Int32 designatedAreaCode_ = 0;
        Int32 functionalId_ = 0;
        WideString data_;
        SQLLEN dataLength_ = SQL_NULL_DATA;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT DESIGNATEDAREACODE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT FUNCTIONALID_FIELD_ID = 10;
        static constexpr SQLUSMALLINT DATA_FIELD_ID = 11;

        AisBinaryBroadcastMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisBinaryBroadcastMessage;
        }

        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        Int32 DesignatedAreaCode( ) const
        {
            return designatedAreaCode_;
        }
        void SetDesignatedAreaCode( Int32 designatedAreaCode )
        {
            designatedAreaCode_ = designatedAreaCode;
        }
        Int32 FunctionalId( ) const
        {
            return functionalId_;
        }
        void SetFunctionalId( Int32 functionalId )
        {
            functionalId_ = functionalId;
        }
        const WideString& Data( ) const
        {
            return data_;
        }
        void SetData( const WideString& data )
        {
            data_ = data;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, SPARE_FIELD_ID, spare_);
            Bind(statement, DESIGNATEDAREACODE_FIELD_ID, designatedAreaCode_);
            Bind(statement, FUNCTIONALID_FIELD_ID, functionalId_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            data_ = statement.GetWideString(DATA_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, spare_);
            WriteColumnValue( destination, designatedAreaCode_);
            WriteColumnValue( destination, functionalId_);
            WriteColumnValue( destination, data_);
        }
        void AssignTo( Types::AisBinaryBroadcastMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetSpare( spare_ );
            destination.SetDesignatedAreaCode( designatedAreaCode_ );
            destination.SetFunctionalId( functionalId_ );
            destination.SetData( data_ );
        }
    };

    using SimpleAisBinaryBroadcastMessageDataReader = SimpleColumnDataReader<AisBinaryBroadcastMessageColumnData>;

    class AisDataLinkManagementMessageColumnData : public AisMessageColumnData
    {
        Int32 spare_ = 0;
        Int32 offset1_ = 0;
        Int32 reservedSlots1_ = 0;
        Int32 timeout1_ = 0;
        Int32 increment1_ = 0;
        DBInt32 offset2_;
        DBInt32 reservedSlots2_;
        DBInt32 timeout2_;
        DBInt32 increment2_;
        DBInt32 offset3_;
        DBInt32 reservedSlots3_;
        DBInt32 timeout3_;
        DBInt32 increment3_;
        DBInt32 offset4_;
        DBInt32 reservedSlots4_;
        DBInt32 timeout4_;
        DBInt32 increment4_;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT OFFSET1_FIELD_ID = 9;
        static constexpr SQLUSMALLINT RESERVEDSLOTS1_FIELD_ID = 10;
        static constexpr SQLUSMALLINT TIMEOUT1_FIELD_ID = 11;
        static constexpr SQLUSMALLINT INCREMENT1_FIELD_ID = 12;
        static constexpr SQLUSMALLINT OFFSET2_FIELD_ID = 13;
        static constexpr SQLUSMALLINT RESERVEDSLOTS2_FIELD_ID = 14;
        static constexpr SQLUSMALLINT TIMEOUT2_FIELD_ID = 15;
        static constexpr SQLUSMALLINT INCREMENT2_FIELD_ID = 16;
        static constexpr SQLUSMALLINT OFFSET3_FIELD_ID = 17;
        static constexpr SQLUSMALLINT RESERVEDSLOTS3_FIELD_ID = 18;
        static constexpr SQLUSMALLINT TIMEOUT3_FIELD_ID = 19;
        static constexpr SQLUSMALLINT INCREMENT3_FIELD_ID = 20;
        static constexpr SQLUSMALLINT OFFSET4_FIELD_ID = 21;
        static constexpr SQLUSMALLINT RESERVEDSLOTS4_FIELD_ID = 22;
        static constexpr SQLUSMALLINT TIMEOUT4_FIELD_ID = 23;
        static constexpr SQLUSMALLINT INCREMENT4_FIELD_ID = 24;

        AisDataLinkManagementMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisDataLinkManagementMessage;
        }

        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        Int32 Offset1( ) const
        {
            return offset1_;
        }
        void SetOffset1( Int32 offset1 )
        {
            offset1_ = offset1;
        }
        Int32 ReservedSlots1( ) const
        {
            return reservedSlots1_;
        }
        void SetReservedSlots1( Int32 reservedSlots1 )
        {
            reservedSlots1_ = reservedSlots1;
        }
        Int32 Timeout1( ) const
        {
            return timeout1_;
        }
        void SetTimeout1( Int32 timeout1 )
        {
            timeout1_ = timeout1;
        }
        Int32 Increment1( ) const
        {
            return increment1_;
        }
        void SetIncrement1( Int32 increment1 )
        {
            increment1_ = increment1;
        }
        const DBInt32& Offset2( ) const
        {
            return offset2_;
        }
        void SetOffset2( const DBInt32& offset2 )
        {
            offset2_ = offset2;
        }
        const DBInt32& ReservedSlots2( ) const
        {
            return reservedSlots2_;
        }
        void SetReservedSlots2( const DBInt32& reservedSlots2 )
        {
            reservedSlots2_ = reservedSlots2;
        }
        const DBInt32& Timeout2( ) const
        {
            return timeout2_;
        }
        void SetTimeout2( const DBInt32& timeout2 )
        {
            timeout2_ = timeout2;
        }
        const DBInt32& Increment2( ) const
        {
            return increment2_;
        }
        void SetIncrement2( const DBInt32& increment2 )
        {
            increment2_ = increment2;
        }
        const DBInt32& Offset3( ) const
        {
            return offset3_;
        }
        void SetOffset3( const DBInt32& offset3 )
        {
            offset3_ = offset3;
        }
        const DBInt32& ReservedSlots3( ) const
        {
            return reservedSlots3_;
        }
        void SetReservedSlots3( const DBInt32& reservedSlots3 )
        {
            reservedSlots3_ = reservedSlots3;
        }
        const DBInt32& Timeout3( ) const
        {
            return timeout3_;
        }
        void SetTimeout3( const DBInt32& timeout3 )
        {
            timeout3_ = timeout3;
        }
        const DBInt32& Increment3( ) const
        {
            return increment3_;
        }
        void SetIncrement3( const DBInt32& increment3 )
        {
            increment3_ = increment3;
        }
        const DBInt32& Offset4( ) const
        {
            return offset4_;
        }
        void SetOffset4( const DBInt32& offset4 )
        {
            offset4_ = offset4;
        }
        const DBInt32& ReservedSlots4( ) const
        {
            return reservedSlots4_;
        }
        void SetReservedSlots4( const DBInt32& reservedSlots4 )
        {
            reservedSlots4_ = reservedSlots4;
        }
        const DBInt32& Timeout4( ) const
        {
            return timeout4_;
        }
        void SetTimeout4( const DBInt32& timeout4 )
        {
            timeout4_ = timeout4;
        }
        const DBInt32& Increment4( ) const
        {
            return increment4_;
        }
        void SetIncrement4( const DBInt32& increment4 )
        {
            increment4_ = increment4;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, SPARE_FIELD_ID, spare_);
            Bind(statement, OFFSET1_FIELD_ID, offset1_);
            Bind(statement, RESERVEDSLOTS1_FIELD_ID, reservedSlots1_);
            Bind(statement, TIMEOUT1_FIELD_ID, timeout1_);
            Bind(statement, INCREMENT1_FIELD_ID, increment1_);
            Bind(statement, OFFSET2_FIELD_ID, offset2_);
            Bind(statement, RESERVEDSLOTS2_FIELD_ID, reservedSlots2_);
            Bind(statement, TIMEOUT2_FIELD_ID, timeout2_);
            Bind(statement, INCREMENT2_FIELD_ID, increment2_);
            Bind(statement, OFFSET3_FIELD_ID, offset3_);
            Bind(statement, RESERVEDSLOTS3_FIELD_ID, reservedSlots3_);
            Bind(statement, TIMEOUT3_FIELD_ID, timeout3_);
            Bind(statement, INCREMENT3_FIELD_ID, increment3_);
            Bind(statement, OFFSET4_FIELD_ID, offset4_);
            Bind(statement, RESERVEDSLOTS4_FIELD_ID, reservedSlots4_);
            Bind(statement, TIMEOUT4_FIELD_ID, timeout4_);
            Bind(statement, INCREMENT4_FIELD_ID, increment4_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, spare_);
            WriteColumnValue( destination, offset1_);
            WriteColumnValue( destination, reservedSlots1_);
            WriteColumnValue( destination, timeout1_);
            WriteColumnValue( destination, increment1_);
            WriteColumnValue( destination, offset2_);
            WriteColumnValue( destination, reservedSlots2_);
            WriteColumnValue( destination, timeout2_);
            WriteColumnValue( destination, increment2_);
            WriteColumnValue( destination, offset3_);
            WriteColumnValue( destination, reservedSlots3_);
            WriteColumnValue( destination, timeout3_);
            WriteColumnValue( destination, increment3_);
            WriteColumnValue( destination, offset4_);
            WriteColumnValue( destination, reservedSlots4_);
            WriteColumnValue( destination, timeout4_);
            WriteColumnValue( destination, increment4_);
        }
        void AssignTo( Types::AisDataLinkManagementMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetSpare( spare_ );
            destination.SetOffset1( offset1_ );
            destination.SetReservedSlots1( reservedSlots1_ );
            destination.SetTimeout1( timeout1_ );
            destination.SetIncrement1( increment1_ );
            destination.SetOffset2( offset2_ );
            destination.SetReservedSlots2( reservedSlots2_ );
            destination.SetTimeout2( timeout2_ );
            destination.SetIncrement2( increment2_ );
            destination.SetOffset3( offset3_ );
            destination.SetReservedSlots3( reservedSlots3_ );
            destination.SetTimeout3( timeout3_ );
            destination.SetIncrement3( increment3_ );
            destination.SetOffset4( offset4_ );
            destination.SetReservedSlots4( reservedSlots4_ );
            destination.SetTimeout4( timeout4_ );
            destination.SetIncrement4( increment4_ );
        }
    };

    using SimpleAisDataLinkManagementMessageDataReader = SimpleColumnDataReader<AisDataLinkManagementMessageColumnData>;

    class AisExtendedClassBCsPositionReportMessageColumnData : public AisMessageColumnData
    {
        Int32 reserved_ = 0;
        double speedOverGround_ = 0.0;
        Types::PositionAccuracy positionAccuracy_ = Types::PositionAccuracy::Low;
        double longitude_ = 0.0;
        double latitude_ = 0.0;
        double courseOverGround_ = 0.0;
        DBInt32 trueHeading_;
        Int32 timestamp_ = 0;
        Int32 regionalReserved_ = 0;
        Guid name_;
        Types::ShipType shipType_ = Types::ShipType::NotAvailable;
        Int32 dimensionToBow_ = 0;
        Int32 dimensionToStern_ = 0;
        Int32 dimensionToPort_ = 0;
        Int32 dimensionToStarboard_ = 0;
        Types::PositionFixType positionFixType_ = Types::PositionFixType::Undefined1;
        Types::Raim raim_ = Types::Raim::NotInUse;
        bool dataTerminalReady_ = false;
        bool assigned_ = false;
        Int32 spare_ = 0;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RESERVED_FIELD_ID = 8;
        static constexpr SQLUSMALLINT SPEEDOVERGROUND_FIELD_ID = 9;
        static constexpr SQLUSMALLINT POSITIONACCURACY_FIELD_ID = 10;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT COURSEOVERGROUND_FIELD_ID = 13;
        static constexpr SQLUSMALLINT TRUEHEADING_FIELD_ID = 14;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 15;
        static constexpr SQLUSMALLINT REGIONALRESERVED_FIELD_ID = 16;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 17;
        static constexpr SQLUSMALLINT SHIPTYPE_FIELD_ID = 18;
        static constexpr SQLUSMALLINT DIMENSIONTOBOW_FIELD_ID = 19;
        static constexpr SQLUSMALLINT DIMENSIONTOSTERN_FIELD_ID = 20;
        static constexpr SQLUSMALLINT DIMENSIONTOPORT_FIELD_ID = 21;
        static constexpr SQLUSMALLINT DIMENSIONTOSTARBOARD_FIELD_ID = 22;
        static constexpr SQLUSMALLINT POSITIONFIXTYPE_FIELD_ID = 23;
        static constexpr SQLUSMALLINT RAIM_FIELD_ID = 24;
        static constexpr SQLUSMALLINT DATATERMINALREADY_FIELD_ID = 25;
        static constexpr SQLUSMALLINT ASSIGNED_FIELD_ID = 26;
        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 27;

        AisExtendedClassBCsPositionReportMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisExtendedClassBCsPositionReportMessage;
        }

        Int32 Reserved( ) const
        {
            return reserved_;
        }
        void SetReserved( Int32 reserved )
        {
            reserved_ = reserved;
        }
        double SpeedOverGround( ) const
        {
            return speedOverGround_;
        }
        void SetSpeedOverGround( double speedOverGround )
        {
            speedOverGround_ = speedOverGround;
        }
        Types::PositionAccuracy PositionAccuracy( ) const
        {
            return positionAccuracy_;
        }
        void SetPositionAccuracy( Types::PositionAccuracy positionAccuracy )
        {
            positionAccuracy_ = positionAccuracy;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double CourseOverGround( ) const
        {
            return courseOverGround_;
        }
        void SetCourseOverGround( double courseOverGround )
        {
            courseOverGround_ = courseOverGround;
        }
        const DBInt32& TrueHeading( ) const
        {
            return trueHeading_;
        }
        void SetTrueHeading( const DBInt32& trueHeading )
        {
            trueHeading_ = trueHeading;
        }
        Int32 Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( Int32 timestamp )
        {
            timestamp_ = timestamp;
        }
        Int32 RegionalReserved( ) const
        {
            return regionalReserved_;
        }
        void SetRegionalReserved( Int32 regionalReserved )
        {
            regionalReserved_ = regionalReserved;
        }
        const Guid& Name( ) const
        {
            return name_;
        }
        void SetName( const Guid& name )
        {
            name_ = name;
        }
        Types::ShipType ShipType( ) const
        {
            return shipType_;
        }
        void SetShipType( Types::ShipType shipType )
        {
            shipType_ = shipType;
        }
        Int32 DimensionToBow( ) const
        {
            return dimensionToBow_;
        }
        void SetDimensionToBow( Int32 dimensionToBow )
        {
            dimensionToBow_ = dimensionToBow;
        }
        Int32 DimensionToStern( ) const
        {
            return dimensionToStern_;
        }
        void SetDimensionToStern( Int32 dimensionToStern )
        {
            dimensionToStern_ = dimensionToStern;
        }
        Int32 DimensionToPort( ) const
        {
            return dimensionToPort_;
        }
        void SetDimensionToPort( Int32 dimensionToPort )
        {
            dimensionToPort_ = dimensionToPort;
        }
        Int32 DimensionToStarboard( ) const
        {
            return dimensionToStarboard_;
        }
        void SetDimensionToStarboard( Int32 dimensionToStarboard )
        {
            dimensionToStarboard_ = dimensionToStarboard;
        }
        Types::PositionFixType PositionFixType( ) const
        {
            return positionFixType_;
        }
        void SetPositionFixType( Types::PositionFixType positionFixType )
        {
            positionFixType_ = positionFixType;
        }
        Types::Raim Raim( ) const
        {
            return raim_;
        }
        void SetRaim( Types::Raim raim )
        {
            raim_ = raim;
        }
        bool DataTerminalReady( ) const
        {
            return dataTerminalReady_;
        }
        void SetDataTerminalReady( bool dataTerminalReady )
        {
            dataTerminalReady_ = dataTerminalReady;
        }
        bool Assigned( ) const
        {
            return assigned_;
        }
        void SetAssigned( bool assigned )
        {
            assigned_ = assigned;
        }
        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RESERVED_FIELD_ID, reserved_);
            Bind(statement, SPEEDOVERGROUND_FIELD_ID, speedOverGround_);
            Bind(statement, POSITIONACCURACY_FIELD_ID, positionAccuracy_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, COURSEOVERGROUND_FIELD_ID, courseOverGround_);
            Bind(statement, TRUEHEADING_FIELD_ID, trueHeading_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, REGIONALRESERVED_FIELD_ID, regionalReserved_);
            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, SHIPTYPE_FIELD_ID, shipType_);
            Bind(statement, DIMENSIONTOBOW_FIELD_ID, dimensionToBow_);
            Bind(statement, DIMENSIONTOSTERN_FIELD_ID, dimensionToStern_);
            Bind(statement, DIMENSIONTOPORT_FIELD_ID, dimensionToPort_);
            Bind(statement, DIMENSIONTOSTARBOARD_FIELD_ID, dimensionToStarboard_);
            Bind(statement, POSITIONFIXTYPE_FIELD_ID, positionFixType_);
            Bind(statement, RAIM_FIELD_ID, raim_);
            Bind(statement, DATATERMINALREADY_FIELD_ID, dataTerminalReady_);
            Bind(statement, ASSIGNED_FIELD_ID, assigned_);
            Bind(statement, SPARE_FIELD_ID, spare_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, reserved_);
            WriteColumnValue( destination, speedOverGround_);
            WriteColumnValue( destination, positionAccuracy_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, courseOverGround_);
            WriteColumnValue( destination, trueHeading_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, regionalReserved_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, shipType_);
            WriteColumnValue( destination, dimensionToBow_);
            WriteColumnValue( destination, dimensionToStern_);
            WriteColumnValue( destination, dimensionToPort_);
            WriteColumnValue( destination, dimensionToStarboard_);
            WriteColumnValue( destination, positionFixType_);
            WriteColumnValue( destination, raim_);
            WriteColumnValue( destination, dataTerminalReady_);
            WriteColumnValue( destination, assigned_);
            WriteColumnValue( destination, spare_);
        }
        void AssignTo( Types::AisExtendedClassBCsPositionReportMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetReserved( reserved_ );
            destination.SetSpeedOverGround( speedOverGround_ );
            destination.SetPositionAccuracy( positionAccuracy_ );
            destination.SetLongitude( longitude_ );
            destination.SetLatitude( latitude_ );
            destination.SetCourseOverGround( courseOverGround_ );
            destination.SetTrueHeading( trueHeading_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetRegionalReserved( regionalReserved_ );
            destination.SetName( name_ );
            destination.SetShipType( shipType_ );
            destination.SetDimensionToBow( dimensionToBow_ );
            destination.SetDimensionToStern( dimensionToStern_ );
            destination.SetDimensionToPort( dimensionToPort_ );
            destination.SetDimensionToStarboard( dimensionToStarboard_ );
            destination.SetPositionFixType( positionFixType_ );
            destination.SetRaim( raim_ );
            destination.SetDataTerminalReady( dataTerminalReady_ );
            destination.SetAssigned( assigned_ );
            destination.SetSpare( spare_ );
        }
    };

    using SimpleAisExtendedClassBCsPositionReportMessageDataReader = SimpleColumnDataReader<AisExtendedClassBCsPositionReportMessageColumnData>;

    class AisInterrogationMessageColumnData : public AisMessageColumnData
    {
        Guid interrogatedMmsi_;
        Types::AisMessageType firstMessageType_ = Types::AisMessageType::PositionReportClassA;
        Int32 firstSlotOffset_ = 0;
        DBEnum<Types::AisMessageType> secondMessageType_;
        DBInt32 secondSlotOffset_;
        DBGuid secondStationInterrogationMmsi_;
        DBEnum<Types::AisMessageType> secondStationFirstMessageType_;
        DBInt32 secondStationFirstSlotOffset_;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT INTERROGATEDMMSI_FIELD_ID = 8;
        static constexpr SQLUSMALLINT FIRSTMESSAGETYPE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT FIRSTSLOTOFFSET_FIELD_ID = 10;
        static constexpr SQLUSMALLINT SECONDMESSAGETYPE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT SECONDSLOTOFFSET_FIELD_ID = 12;
        static constexpr SQLUSMALLINT SECONDSTATIONINTERROGATIONMMSI_FIELD_ID = 13;
        static constexpr SQLUSMALLINT SECONDSTATIONFIRSTMESSAGETYPE_FIELD_ID = 14;
        static constexpr SQLUSMALLINT SECONDSTATIONFIRSTSLOTOFFSET_FIELD_ID = 15;

        AisInterrogationMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisInterrogationMessage;
        }

        const Guid& InterrogatedMmsi( ) const
        {
            return interrogatedMmsi_;
        }
        void SetInterrogatedMmsi( const Guid& interrogatedMmsi )
        {
            interrogatedMmsi_ = interrogatedMmsi;
        }
        Types::AisMessageType FirstMessageType( ) const
        {
            return firstMessageType_;
        }
        void SetFirstMessageType( Types::AisMessageType firstMessageType )
        {
            firstMessageType_ = firstMessageType;
        }
        Int32 FirstSlotOffset( ) const
        {
            return firstSlotOffset_;
        }
        void SetFirstSlotOffset( Int32 firstSlotOffset )
        {
            firstSlotOffset_ = firstSlotOffset;
        }
        const DBEnum<Types::AisMessageType>& SecondMessageType( ) const
        {
            return secondMessageType_;
        }
        void SetSecondMessageType( const DBEnum<Types::AisMessageType>& secondMessageType )
        {
            secondMessageType_ = secondMessageType;
        }
        const DBInt32& SecondSlotOffset( ) const
        {
            return secondSlotOffset_;
        }
        void SetSecondSlotOffset( const DBInt32& secondSlotOffset )
        {
            secondSlotOffset_ = secondSlotOffset;
        }
        const DBGuid& SecondStationInterrogationMmsi( ) const
        {
            return secondStationInterrogationMmsi_;
        }
        void SetSecondStationInterrogationMmsi( const DBGuid& secondStationInterrogationMmsi )
        {
            secondStationInterrogationMmsi_ = secondStationInterrogationMmsi;
        }
        const DBEnum<Types::AisMessageType>& SecondStationFirstMessageType( ) const
        {
            return secondStationFirstMessageType_;
        }
        void SetSecondStationFirstMessageType( const DBEnum<Types::AisMessageType>& secondStationFirstMessageType )
        {
            secondStationFirstMessageType_ = secondStationFirstMessageType;
        }
        const DBInt32& SecondStationFirstSlotOffset( ) const
        {
            return secondStationFirstSlotOffset_;
        }
        void SetSecondStationFirstSlotOffset( const DBInt32& secondStationFirstSlotOffset )
        {
            secondStationFirstSlotOffset_ = secondStationFirstSlotOffset;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, INTERROGATEDMMSI_FIELD_ID, interrogatedMmsi_);
            Bind(statement, FIRSTMESSAGETYPE_FIELD_ID, firstMessageType_);
            Bind(statement, FIRSTSLOTOFFSET_FIELD_ID, firstSlotOffset_);
            Bind(statement, SECONDMESSAGETYPE_FIELD_ID, secondMessageType_);
            Bind(statement, SECONDSLOTOFFSET_FIELD_ID, secondSlotOffset_);
            Bind(statement, SECONDSTATIONINTERROGATIONMMSI_FIELD_ID, secondStationInterrogationMmsi_);
            Bind(statement, SECONDSTATIONFIRSTMESSAGETYPE_FIELD_ID, secondStationFirstMessageType_);
            Bind(statement, SECONDSTATIONFIRSTSLOTOFFSET_FIELD_ID, secondStationFirstSlotOffset_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, interrogatedMmsi_);
            WriteColumnValue( destination, firstMessageType_);
            WriteColumnValue( destination, firstSlotOffset_);
            WriteColumnValue( destination, secondMessageType_);
            WriteColumnValue( destination, secondSlotOffset_);
            WriteColumnValue( destination, secondStationInterrogationMmsi_);
            WriteColumnValue( destination, secondStationFirstMessageType_);
            WriteColumnValue( destination, secondStationFirstSlotOffset_);
        }
        void AssignTo( Types::AisInterrogationMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetInterrogatedMmsi( interrogatedMmsi_ );
            destination.SetFirstMessageType( firstMessageType_ );
            destination.SetFirstSlotOffset( firstSlotOffset_ );
            destination.SetSecondMessageType( secondMessageType_ );
            destination.SetSecondSlotOffset( secondSlotOffset_ );
            destination.SetSecondStationInterrogationMmsi( secondStationInterrogationMmsi_ );
            destination.SetSecondStationFirstMessageType( secondStationFirstMessageType_ );
            destination.SetSecondStationFirstSlotOffset( secondStationFirstSlotOffset_ );
        }
    };

    using SimpleAisInterrogationMessageDataReader = SimpleColumnDataReader<AisInterrogationMessageColumnData>;

    class AisPositionReportClassAMessageBaseColumnData : public AisMessageColumnData
    {
        Types::NavigationStatus navigationStatus_ = Types::NavigationStatus::UnderWayUsingEngine;
        DBInt32 rateOfTurn_;
        double speedOverGround_ = 0.0;
        Types::PositionAccuracy positionAccuracy_ = Types::PositionAccuracy::Low;
        double longitude_ = 0.0;
        double latitude_ = 0.0;
        double courseOverGround_ = 0.0;
        DBInt32 trueHeading_;
        Int32 timestamp_ = 0;
        Types::ManeuverIndicator maneuverIndicator_ = Types::ManeuverIndicator::NotAvailable;
        Int32 spare_ = 0;
        Types::Raim raim_ = Types::Raim::NotInUse;
        Int32 radioStatus_ = 0;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT NAVIGATIONSTATUS_FIELD_ID = 8;
        static constexpr SQLUSMALLINT RATEOFTURN_FIELD_ID = 9;
        static constexpr SQLUSMALLINT SPEEDOVERGROUND_FIELD_ID = 10;
        static constexpr SQLUSMALLINT POSITIONACCURACY_FIELD_ID = 11;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 13;
        static constexpr SQLUSMALLINT COURSEOVERGROUND_FIELD_ID = 14;
        static constexpr SQLUSMALLINT TRUEHEADING_FIELD_ID = 15;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 16;
        static constexpr SQLUSMALLINT MANEUVERINDICATOR_FIELD_ID = 17;
        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 18;
        static constexpr SQLUSMALLINT RAIM_FIELD_ID = 19;
        static constexpr SQLUSMALLINT RADIOSTATUS_FIELD_ID = 20;

        AisPositionReportClassAMessageBaseColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisPositionReportClassAMessageBase;
        }

        Types::NavigationStatus NavigationStatus( ) const
        {
            return navigationStatus_;
        }
        void SetNavigationStatus( Types::NavigationStatus navigationStatus )
        {
            navigationStatus_ = navigationStatus;
        }
        const DBInt32& RateOfTurn( ) const
        {
            return rateOfTurn_;
        }
        void SetRateOfTurn( const DBInt32& rateOfTurn )
        {
            rateOfTurn_ = rateOfTurn;
        }
        double SpeedOverGround( ) const
        {
            return speedOverGround_;
        }
        void SetSpeedOverGround( double speedOverGround )
        {
            speedOverGround_ = speedOverGround;
        }
        Types::PositionAccuracy PositionAccuracy( ) const
        {
            return positionAccuracy_;
        }
        void SetPositionAccuracy( Types::PositionAccuracy positionAccuracy )
        {
            positionAccuracy_ = positionAccuracy;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double CourseOverGround( ) const
        {
            return courseOverGround_;
        }
        void SetCourseOverGround( double courseOverGround )
        {
            courseOverGround_ = courseOverGround;
        }
        const DBInt32& TrueHeading( ) const
        {
            return trueHeading_;
        }
        void SetTrueHeading( const DBInt32& trueHeading )
        {
            trueHeading_ = trueHeading;
        }
        Int32 Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( Int32 timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::ManeuverIndicator ManeuverIndicator( ) const
        {
            return maneuverIndicator_;
        }
        void SetManeuverIndicator( Types::ManeuverIndicator maneuverIndicator )
        {
            maneuverIndicator_ = maneuverIndicator;
        }
        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        Types::Raim Raim( ) const
        {
            return raim_;
        }
        void SetRaim( Types::Raim raim )
        {
            raim_ = raim;
        }
        Int32 RadioStatus( ) const
        {
            return radioStatus_;
        }
        void SetRadioStatus( Int32 radioStatus )
        {
            radioStatus_ = radioStatus;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, NAVIGATIONSTATUS_FIELD_ID, navigationStatus_);
            Bind(statement, RATEOFTURN_FIELD_ID, rateOfTurn_);
            Bind(statement, SPEEDOVERGROUND_FIELD_ID, speedOverGround_);
            Bind(statement, POSITIONACCURACY_FIELD_ID, positionAccuracy_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, COURSEOVERGROUND_FIELD_ID, courseOverGround_);
            Bind(statement, TRUEHEADING_FIELD_ID, trueHeading_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, MANEUVERINDICATOR_FIELD_ID, maneuverIndicator_);
            Bind(statement, SPARE_FIELD_ID, spare_);
            Bind(statement, RAIM_FIELD_ID, raim_);
            Bind(statement, RADIOSTATUS_FIELD_ID, radioStatus_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, navigationStatus_);
            WriteColumnValue( destination, rateOfTurn_);
            WriteColumnValue( destination, speedOverGround_);
            WriteColumnValue( destination, positionAccuracy_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, courseOverGround_);
            WriteColumnValue( destination, trueHeading_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, maneuverIndicator_);
            WriteColumnValue( destination, spare_);
            WriteColumnValue( destination, raim_);
            WriteColumnValue( destination, radioStatus_);
        }
        void AssignTo( Types::AisPositionReportClassAMessageBaseObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetNavigationStatus( navigationStatus_ );
            destination.SetRateOfTurn( rateOfTurn_ );
            destination.SetSpeedOverGround( speedOverGround_ );
            destination.SetPositionAccuracy( positionAccuracy_ );
            destination.SetLongitude( longitude_ );
            destination.SetLatitude( latitude_ );
            destination.SetCourseOverGround( courseOverGround_ );
            destination.SetTrueHeading( trueHeading_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetManeuverIndicator( maneuverIndicator_ );
            destination.SetSpare( spare_ );
            destination.SetRaim( raim_ );
            destination.SetRadioStatus( radioStatus_ );
        }
    };

    using SimpleAisPositionReportClassAMessageBaseDataReader = SimpleColumnDataReader<AisPositionReportClassAMessageBaseColumnData>;

    class AisPositionReportClassAAssignedScheduleMessageColumnData : public AisPositionReportClassAMessageBaseColumnData
    {
    public:
        using Base = AisPositionReportClassAMessageBaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        AisPositionReportClassAAssignedScheduleMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisPositionReportClassAAssignedScheduleMessage;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::AisPositionReportClassAAssignedScheduleMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisPositionReportClassAMessageBaseObject&>( destination ) );
        }
    };

    using SimpleAisPositionReportClassAAssignedScheduleMessageDataReader = SimpleColumnDataReader<AisPositionReportClassAAssignedScheduleMessageColumnData>;

    class AisPositionReportClassAMessageColumnData : public AisPositionReportClassAMessageBaseColumnData
    {
    public:
        using Base = AisPositionReportClassAMessageBaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        AisPositionReportClassAMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisPositionReportClassAMessage;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::AisPositionReportClassAMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisPositionReportClassAMessageBaseObject&>( destination ) );
        }
    };

    using SimpleAisPositionReportClassAMessageDataReader = SimpleColumnDataReader<AisPositionReportClassAMessageColumnData>;

    class AisPositionReportClassAResponseToInterrogationMessageColumnData : public AisPositionReportClassAMessageBaseColumnData
    {
    public:
        using Base = AisPositionReportClassAMessageBaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        AisPositionReportClassAResponseToInterrogationMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisPositionReportClassAResponseToInterrogationMessage;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::AisPositionReportClassAResponseToInterrogationMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisPositionReportClassAMessageBaseObject&>( destination ) );
        }
    };

    using SimpleAisPositionReportClassAResponseToInterrogationMessageDataReader = SimpleColumnDataReader<AisPositionReportClassAResponseToInterrogationMessageColumnData>;

    class AisPositionReportForLongRangeApplicationsMessageColumnData : public AisMessageColumnData
    {
        Types::PositionAccuracy positionAccuracy_ = Types::PositionAccuracy::Low;
        Types::Raim raim_ = Types::Raim::NotInUse;
        Types::NavigationStatus navigationStatus_ = Types::NavigationStatus::UnderWayUsingEngine;
        double longitude_ = 0.0;
        double latitude_ = 0.0;
        double speedOverGround_ = 0.0;
        double courseOverGround_ = 0.0;
        Types::GnssPositionStatus gnssPositionStatus_ = Types::GnssPositionStatus::CurrentGnssPosition;
        Int32 spare_ = 0;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT POSITIONACCURACY_FIELD_ID = 8;
        static constexpr SQLUSMALLINT RAIM_FIELD_ID = 9;
        static constexpr SQLUSMALLINT NAVIGATIONSTATUS_FIELD_ID = 10;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT SPEEDOVERGROUND_FIELD_ID = 13;
        static constexpr SQLUSMALLINT COURSEOVERGROUND_FIELD_ID = 14;
        static constexpr SQLUSMALLINT GNSSPOSITIONSTATUS_FIELD_ID = 15;
        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 16;

        AisPositionReportForLongRangeApplicationsMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisPositionReportForLongRangeApplicationsMessage;
        }

        Types::PositionAccuracy PositionAccuracy( ) const
        {
            return positionAccuracy_;
        }
        void SetPositionAccuracy( Types::PositionAccuracy positionAccuracy )
        {
            positionAccuracy_ = positionAccuracy;
        }
        Types::Raim Raim( ) const
        {
            return raim_;
        }
        void SetRaim( Types::Raim raim )
        {
            raim_ = raim;
        }
        Types::NavigationStatus NavigationStatus( ) const
        {
            return navigationStatus_;
        }
        void SetNavigationStatus( Types::NavigationStatus navigationStatus )
        {
            navigationStatus_ = navigationStatus;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double SpeedOverGround( ) const
        {
            return speedOverGround_;
        }
        void SetSpeedOverGround( double speedOverGround )
        {
            speedOverGround_ = speedOverGround;
        }
        double CourseOverGround( ) const
        {
            return courseOverGround_;
        }
        void SetCourseOverGround( double courseOverGround )
        {
            courseOverGround_ = courseOverGround;
        }
        Types::GnssPositionStatus GnssPositionStatus( ) const
        {
            return gnssPositionStatus_;
        }
        void SetGnssPositionStatus( Types::GnssPositionStatus gnssPositionStatus )
        {
            gnssPositionStatus_ = gnssPositionStatus;
        }
        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, POSITIONACCURACY_FIELD_ID, positionAccuracy_);
            Bind(statement, RAIM_FIELD_ID, raim_);
            Bind(statement, NAVIGATIONSTATUS_FIELD_ID, navigationStatus_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, SPEEDOVERGROUND_FIELD_ID, speedOverGround_);
            Bind(statement, COURSEOVERGROUND_FIELD_ID, courseOverGround_);
            Bind(statement, GNSSPOSITIONSTATUS_FIELD_ID, gnssPositionStatus_);
            Bind(statement, SPARE_FIELD_ID, spare_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, positionAccuracy_);
            WriteColumnValue( destination, raim_);
            WriteColumnValue( destination, navigationStatus_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, speedOverGround_);
            WriteColumnValue( destination, courseOverGround_);
            WriteColumnValue( destination, gnssPositionStatus_);
            WriteColumnValue( destination, spare_);
        }
        void AssignTo( Types::AisPositionReportForLongRangeApplicationsMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetPositionAccuracy( positionAccuracy_ );
            destination.SetRaim( raim_ );
            destination.SetNavigationStatus( navigationStatus_ );
            destination.SetLongitude( longitude_ );
            destination.SetLatitude( latitude_ );
            destination.SetSpeedOverGround( speedOverGround_ );
            destination.SetCourseOverGround( courseOverGround_ );
            destination.SetGnssPositionStatus( gnssPositionStatus_ );
            destination.SetSpare( spare_ );
        }
    };

    using SimpleAisPositionReportForLongRangeApplicationsMessageDataReader = SimpleColumnDataReader<AisPositionReportForLongRangeApplicationsMessageColumnData>;

    class AisSafetyRelatedAcknowledgmentMessageColumnData : public AisMessageColumnData
    {
        Int32 spare_ = 0;
        Int32 sequenceNumber1_ = 0;
        Guid mmsi1_;
        DBInt32 sequenceNumber2_;
        DBGuid mmsi2_;
        DBInt32 sequenceNumber3_;
        DBGuid mmsi3_;
        DBInt32 sequenceNumber4_;
        DBGuid mmsi4_;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT SEQUENCENUMBER1_FIELD_ID = 9;
        static constexpr SQLUSMALLINT MMSI1_FIELD_ID = 10;
        static constexpr SQLUSMALLINT SEQUENCENUMBER2_FIELD_ID = 11;
        static constexpr SQLUSMALLINT MMSI2_FIELD_ID = 12;
        static constexpr SQLUSMALLINT SEQUENCENUMBER3_FIELD_ID = 13;
        static constexpr SQLUSMALLINT MMSI3_FIELD_ID = 14;
        static constexpr SQLUSMALLINT SEQUENCENUMBER4_FIELD_ID = 15;
        static constexpr SQLUSMALLINT MMSI4_FIELD_ID = 16;

        AisSafetyRelatedAcknowledgmentMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisSafetyRelatedAcknowledgmentMessage;
        }

        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        Int32 SequenceNumber1( ) const
        {
            return sequenceNumber1_;
        }
        void SetSequenceNumber1( Int32 sequenceNumber1 )
        {
            sequenceNumber1_ = sequenceNumber1;
        }
        const Guid& Mmsi1( ) const
        {
            return mmsi1_;
        }
        void SetMmsi1( const Guid& mmsi1 )
        {
            mmsi1_ = mmsi1;
        }
        const DBInt32& SequenceNumber2( ) const
        {
            return sequenceNumber2_;
        }
        void SetSequenceNumber2( const DBInt32& sequenceNumber2 )
        {
            sequenceNumber2_ = sequenceNumber2;
        }
        const DBGuid& Mmsi2( ) const
        {
            return mmsi2_;
        }
        void SetMmsi2( const DBGuid& mmsi2 )
        {
            mmsi2_ = mmsi2;
        }
        const DBInt32& SequenceNumber3( ) const
        {
            return sequenceNumber3_;
        }
        void SetSequenceNumber3( const DBInt32& sequenceNumber3 )
        {
            sequenceNumber3_ = sequenceNumber3;
        }
        const DBGuid& Mmsi3( ) const
        {
            return mmsi3_;
        }
        void SetMmsi3( const DBGuid& mmsi3 )
        {
            mmsi3_ = mmsi3;
        }
        const DBInt32& SequenceNumber4( ) const
        {
            return sequenceNumber4_;
        }
        void SetSequenceNumber4( const DBInt32& sequenceNumber4 )
        {
            sequenceNumber4_ = sequenceNumber4;
        }
        const DBGuid& Mmsi4( ) const
        {
            return mmsi4_;
        }
        void SetMmsi4( const DBGuid& mmsi4 )
        {
            mmsi4_ = mmsi4;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, SPARE_FIELD_ID, spare_);
            Bind(statement, SEQUENCENUMBER1_FIELD_ID, sequenceNumber1_);
            Bind(statement, MMSI1_FIELD_ID, mmsi1_);
            Bind(statement, SEQUENCENUMBER2_FIELD_ID, sequenceNumber2_);
            Bind(statement, MMSI2_FIELD_ID, mmsi2_);
            Bind(statement, SEQUENCENUMBER3_FIELD_ID, sequenceNumber3_);
            Bind(statement, MMSI3_FIELD_ID, mmsi3_);
            Bind(statement, SEQUENCENUMBER4_FIELD_ID, sequenceNumber4_);
            Bind(statement, MMSI4_FIELD_ID, mmsi4_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, spare_);
            WriteColumnValue( destination, sequenceNumber1_);
            WriteColumnValue( destination, mmsi1_);
            WriteColumnValue( destination, sequenceNumber2_);
            WriteColumnValue( destination, mmsi2_);
            WriteColumnValue( destination, sequenceNumber3_);
            WriteColumnValue( destination, mmsi3_);
            WriteColumnValue( destination, sequenceNumber4_);
            WriteColumnValue( destination, mmsi4_);
        }
        void AssignTo( Types::AisSafetyRelatedAcknowledgmentMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetSpare( spare_ );
            destination.SetSequenceNumber1( sequenceNumber1_ );
            destination.SetMmsi1( mmsi1_ );
            destination.SetSequenceNumber2( sequenceNumber2_ );
            destination.SetMmsi2( mmsi2_ );
            destination.SetSequenceNumber3( sequenceNumber3_ );
            destination.SetMmsi3( mmsi3_ );
            destination.SetSequenceNumber4( sequenceNumber4_ );
            destination.SetMmsi4( mmsi4_ );
        }
    };

    using SimpleAisSafetyRelatedAcknowledgmentMessageDataReader = SimpleColumnDataReader<AisSafetyRelatedAcknowledgmentMessageColumnData>;

    class AisStandardClassBCsPositionReportMessageColumnData : public AisMessageColumnData
    {
        Int32 reserved_ = 0;
        double speedOverGround_ = 0.0;
        Types::PositionAccuracy positionAccuracy_ = Types::PositionAccuracy::Low;
        double longitude_ = 0.0;
        double latitude_ = 0.0;
        double courseOverGround_ = 0.0;
        DBInt32 trueHeading_;
        Int32 timestamp_ = 0;
        Int32 regionalReserved_ = 0;
        bool isCsUnit_ = false;
        bool hasDisplay_ = false;
        bool hasDscCapability_ = false;
        bool band_ = false;
        bool canAcceptMessage22_ = false;
        bool assigned_ = false;
        Types::Raim raim_ = Types::Raim::NotInUse;
        Int32 radioStatus_ = 0;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RESERVED_FIELD_ID = 8;
        static constexpr SQLUSMALLINT SPEEDOVERGROUND_FIELD_ID = 9;
        static constexpr SQLUSMALLINT POSITIONACCURACY_FIELD_ID = 10;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT COURSEOVERGROUND_FIELD_ID = 13;
        static constexpr SQLUSMALLINT TRUEHEADING_FIELD_ID = 14;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 15;
        static constexpr SQLUSMALLINT REGIONALRESERVED_FIELD_ID = 16;
        static constexpr SQLUSMALLINT ISCSUNIT_FIELD_ID = 17;
        static constexpr SQLUSMALLINT HASDISPLAY_FIELD_ID = 18;
        static constexpr SQLUSMALLINT HASDSCCAPABILITY_FIELD_ID = 19;
        static constexpr SQLUSMALLINT BAND_FIELD_ID = 20;
        static constexpr SQLUSMALLINT CANACCEPTMESSAGE22_FIELD_ID = 21;
        static constexpr SQLUSMALLINT ASSIGNED_FIELD_ID = 22;
        static constexpr SQLUSMALLINT RAIM_FIELD_ID = 23;
        static constexpr SQLUSMALLINT RADIOSTATUS_FIELD_ID = 24;

        AisStandardClassBCsPositionReportMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisStandardClassBCsPositionReportMessage;
        }

        Int32 Reserved( ) const
        {
            return reserved_;
        }
        void SetReserved( Int32 reserved )
        {
            reserved_ = reserved;
        }
        double SpeedOverGround( ) const
        {
            return speedOverGround_;
        }
        void SetSpeedOverGround( double speedOverGround )
        {
            speedOverGround_ = speedOverGround;
        }
        Types::PositionAccuracy PositionAccuracy( ) const
        {
            return positionAccuracy_;
        }
        void SetPositionAccuracy( Types::PositionAccuracy positionAccuracy )
        {
            positionAccuracy_ = positionAccuracy;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double CourseOverGround( ) const
        {
            return courseOverGround_;
        }
        void SetCourseOverGround( double courseOverGround )
        {
            courseOverGround_ = courseOverGround;
        }
        const DBInt32& TrueHeading( ) const
        {
            return trueHeading_;
        }
        void SetTrueHeading( const DBInt32& trueHeading )
        {
            trueHeading_ = trueHeading;
        }
        Int32 Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( Int32 timestamp )
        {
            timestamp_ = timestamp;
        }
        Int32 RegionalReserved( ) const
        {
            return regionalReserved_;
        }
        void SetRegionalReserved( Int32 regionalReserved )
        {
            regionalReserved_ = regionalReserved;
        }
        bool IsCsUnit( ) const
        {
            return isCsUnit_;
        }
        void SetIsCsUnit( bool isCsUnit )
        {
            isCsUnit_ = isCsUnit;
        }
        bool HasDisplay( ) const
        {
            return hasDisplay_;
        }
        void SetHasDisplay( bool hasDisplay )
        {
            hasDisplay_ = hasDisplay;
        }
        bool HasDscCapability( ) const
        {
            return hasDscCapability_;
        }
        void SetHasDscCapability( bool hasDscCapability )
        {
            hasDscCapability_ = hasDscCapability;
        }
        bool Band( ) const
        {
            return band_;
        }
        void SetBand( bool band )
        {
            band_ = band;
        }
        bool CanAcceptMessage22( ) const
        {
            return canAcceptMessage22_;
        }
        void SetCanAcceptMessage22( bool canAcceptMessage22 )
        {
            canAcceptMessage22_ = canAcceptMessage22;
        }
        bool Assigned( ) const
        {
            return assigned_;
        }
        void SetAssigned( bool assigned )
        {
            assigned_ = assigned;
        }
        Types::Raim Raim( ) const
        {
            return raim_;
        }
        void SetRaim( Types::Raim raim )
        {
            raim_ = raim;
        }
        Int32 RadioStatus( ) const
        {
            return radioStatus_;
        }
        void SetRadioStatus( Int32 radioStatus )
        {
            radioStatus_ = radioStatus;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RESERVED_FIELD_ID, reserved_);
            Bind(statement, SPEEDOVERGROUND_FIELD_ID, speedOverGround_);
            Bind(statement, POSITIONACCURACY_FIELD_ID, positionAccuracy_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, COURSEOVERGROUND_FIELD_ID, courseOverGround_);
            Bind(statement, TRUEHEADING_FIELD_ID, trueHeading_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, REGIONALRESERVED_FIELD_ID, regionalReserved_);
            Bind(statement, ISCSUNIT_FIELD_ID, isCsUnit_);
            Bind(statement, HASDISPLAY_FIELD_ID, hasDisplay_);
            Bind(statement, HASDSCCAPABILITY_FIELD_ID, hasDscCapability_);
            Bind(statement, BAND_FIELD_ID, band_);
            Bind(statement, CANACCEPTMESSAGE22_FIELD_ID, canAcceptMessage22_);
            Bind(statement, ASSIGNED_FIELD_ID, assigned_);
            Bind(statement, RAIM_FIELD_ID, raim_);
            Bind(statement, RADIOSTATUS_FIELD_ID, radioStatus_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, reserved_);
            WriteColumnValue( destination, speedOverGround_);
            WriteColumnValue( destination, positionAccuracy_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, courseOverGround_);
            WriteColumnValue( destination, trueHeading_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, regionalReserved_);
            WriteColumnValue( destination, isCsUnit_);
            WriteColumnValue( destination, hasDisplay_);
            WriteColumnValue( destination, hasDscCapability_);
            WriteColumnValue( destination, band_);
            WriteColumnValue( destination, canAcceptMessage22_);
            WriteColumnValue( destination, assigned_);
            WriteColumnValue( destination, raim_);
            WriteColumnValue( destination, radioStatus_);
        }
        void AssignTo( Types::AisStandardClassBCsPositionReportMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetReserved( reserved_ );
            destination.SetSpeedOverGround( speedOverGround_ );
            destination.SetPositionAccuracy( positionAccuracy_ );
            destination.SetLongitude( longitude_ );
            destination.SetLatitude( latitude_ );
            destination.SetCourseOverGround( courseOverGround_ );
            destination.SetTrueHeading( trueHeading_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetRegionalReserved( regionalReserved_ );
            destination.SetIsCsUnit( isCsUnit_ );
            destination.SetHasDisplay( hasDisplay_ );
            destination.SetHasDscCapability( hasDscCapability_ );
            destination.SetBand( band_ );
            destination.SetCanAcceptMessage22( canAcceptMessage22_ );
            destination.SetAssigned( assigned_ );
            destination.SetRaim( raim_ );
            destination.SetRadioStatus( radioStatus_ );
        }
    };

    using SimpleAisStandardClassBCsPositionReportMessageDataReader = SimpleColumnDataReader<AisStandardClassBCsPositionReportMessageColumnData>;

    class AisStandardSarAircraftPositionReportMessageColumnData : public AisMessageColumnData
    {
        Int32 altitude_ = 0;
        Int32 speedOverGround_ = 0;
        Types::PositionAccuracy positionAccuracy_ = Types::PositionAccuracy::Low;
        double longitude_ = 0.0;
        double latitude_ = 0.0;
        double courseOverGround_ = 0.0;
        Int32 timestamp_ = 0;
        Int32 reserved_ = 0;
        bool dataTerminalReady_ = false;
        Int32 spare_ = 0;
        bool assigned_ = false;
        Types::Raim raim_ = Types::Raim::NotInUse;
        Int32 radioStatus_ = 0;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ALTITUDE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT SPEEDOVERGROUND_FIELD_ID = 9;
        static constexpr SQLUSMALLINT POSITIONACCURACY_FIELD_ID = 10;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT COURSEOVERGROUND_FIELD_ID = 13;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 14;
        static constexpr SQLUSMALLINT RESERVED_FIELD_ID = 15;
        static constexpr SQLUSMALLINT DATATERMINALREADY_FIELD_ID = 16;
        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 17;
        static constexpr SQLUSMALLINT ASSIGNED_FIELD_ID = 18;
        static constexpr SQLUSMALLINT RAIM_FIELD_ID = 19;
        static constexpr SQLUSMALLINT RADIOSTATUS_FIELD_ID = 20;

        AisStandardSarAircraftPositionReportMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisStandardSarAircraftPositionReportMessage;
        }

        Int32 Altitude( ) const
        {
            return altitude_;
        }
        void SetAltitude( Int32 altitude )
        {
            altitude_ = altitude;
        }
        Int32 SpeedOverGround( ) const
        {
            return speedOverGround_;
        }
        void SetSpeedOverGround( Int32 speedOverGround )
        {
            speedOverGround_ = speedOverGround;
        }
        Types::PositionAccuracy PositionAccuracy( ) const
        {
            return positionAccuracy_;
        }
        void SetPositionAccuracy( Types::PositionAccuracy positionAccuracy )
        {
            positionAccuracy_ = positionAccuracy;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double CourseOverGround( ) const
        {
            return courseOverGround_;
        }
        void SetCourseOverGround( double courseOverGround )
        {
            courseOverGround_ = courseOverGround;
        }
        Int32 Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( Int32 timestamp )
        {
            timestamp_ = timestamp;
        }
        Int32 Reserved( ) const
        {
            return reserved_;
        }
        void SetReserved( Int32 reserved )
        {
            reserved_ = reserved;
        }
        bool DataTerminalReady( ) const
        {
            return dataTerminalReady_;
        }
        void SetDataTerminalReady( bool dataTerminalReady )
        {
            dataTerminalReady_ = dataTerminalReady;
        }
        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        bool Assigned( ) const
        {
            return assigned_;
        }
        void SetAssigned( bool assigned )
        {
            assigned_ = assigned;
        }
        Types::Raim Raim( ) const
        {
            return raim_;
        }
        void SetRaim( Types::Raim raim )
        {
            raim_ = raim;
        }
        Int32 RadioStatus( ) const
        {
            return radioStatus_;
        }
        void SetRadioStatus( Int32 radioStatus )
        {
            radioStatus_ = radioStatus;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, ALTITUDE_FIELD_ID, altitude_);
            Bind(statement, SPEEDOVERGROUND_FIELD_ID, speedOverGround_);
            Bind(statement, POSITIONACCURACY_FIELD_ID, positionAccuracy_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, COURSEOVERGROUND_FIELD_ID, courseOverGround_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, RESERVED_FIELD_ID, reserved_);
            Bind(statement, DATATERMINALREADY_FIELD_ID, dataTerminalReady_);
            Bind(statement, SPARE_FIELD_ID, spare_);
            Bind(statement, ASSIGNED_FIELD_ID, assigned_);
            Bind(statement, RAIM_FIELD_ID, raim_);
            Bind(statement, RADIOSTATUS_FIELD_ID, radioStatus_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, altitude_);
            WriteColumnValue( destination, speedOverGround_);
            WriteColumnValue( destination, positionAccuracy_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, courseOverGround_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, reserved_);
            WriteColumnValue( destination, dataTerminalReady_);
            WriteColumnValue( destination, spare_);
            WriteColumnValue( destination, assigned_);
            WriteColumnValue( destination, raim_);
            WriteColumnValue( destination, radioStatus_);
        }
        void AssignTo( Types::AisStandardSarAircraftPositionReportMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetAltitude( altitude_ );
            destination.SetSpeedOverGround( speedOverGround_ );
            destination.SetPositionAccuracy( positionAccuracy_ );
            destination.SetLongitude( longitude_ );
            destination.SetLatitude( latitude_ );
            destination.SetCourseOverGround( courseOverGround_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetReserved( reserved_ );
            destination.SetDataTerminalReady( dataTerminalReady_ );
            destination.SetSpare( spare_ );
            destination.SetAssigned( assigned_ );
            destination.SetRaim( raim_ );
            destination.SetRadioStatus( radioStatus_ );
        }
    };

    using SimpleAisStandardSarAircraftPositionReportMessageDataReader = SimpleColumnDataReader<AisStandardSarAircraftPositionReportMessageColumnData>;

    class AisStaticAndVoyageRelatedDataMessageColumnData : public AisMessageColumnData
    {
        Int32 aisVersion_ = 0;
        Guid imoNumber_;
        Guid callsign_;
        Guid shipName_;
        Types::ShipType shipType_ = Types::ShipType::NotAvailable;
        Int32 dimensionToBow_ = 0;
        Int32 dimensionToStern_ = 0;
        Int32 dimensionToPort_ = 0;
        Int32 dimensionToStarboard_ = 0;
        Types::PositionFixType positionFixType_ = Types::PositionFixType::Undefined1;
        DBDateTime estimatedTimeOfArrival_;
        double draught_ = 0.0;
        FixedDBWideString<127> destination_;
        bool dataTerminalReady_ = false;
        Int32 spare_ = 0;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT AISVERSION_FIELD_ID = 8;
        static constexpr SQLUSMALLINT IMONUMBER_FIELD_ID = 9;
        static constexpr SQLUSMALLINT CALLSIGN_FIELD_ID = 10;
        static constexpr SQLUSMALLINT SHIPNAME_FIELD_ID = 11;
        static constexpr SQLUSMALLINT SHIPTYPE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT DIMENSIONTOBOW_FIELD_ID = 13;
        static constexpr SQLUSMALLINT DIMENSIONTOSTERN_FIELD_ID = 14;
        static constexpr SQLUSMALLINT DIMENSIONTOPORT_FIELD_ID = 15;
        static constexpr SQLUSMALLINT DIMENSIONTOSTARBOARD_FIELD_ID = 16;
        static constexpr SQLUSMALLINT POSITIONFIXTYPE_FIELD_ID = 17;
        static constexpr SQLUSMALLINT ESTIMATEDTIMEOFARRIVAL_FIELD_ID = 18;
        static constexpr SQLUSMALLINT DRAUGHT_FIELD_ID = 19;
        static constexpr SQLUSMALLINT DESTINATION_FIELD_ID = 20;
        static constexpr SQLUSMALLINT DATATERMINALREADY_FIELD_ID = 21;
        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 22;

        AisStaticAndVoyageRelatedDataMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisStaticAndVoyageRelatedDataMessage;
        }

        Int32 AisVersion( ) const
        {
            return aisVersion_;
        }
        void SetAisVersion( Int32 aisVersion )
        {
            aisVersion_ = aisVersion;
        }
        const Guid& ImoNumber( ) const
        {
            return imoNumber_;
        }
        void SetImoNumber( const Guid& imoNumber )
        {
            imoNumber_ = imoNumber;
        }
        const Guid& Callsign( ) const
        {
            return callsign_;
        }
        void SetCallsign( const Guid& callsign )
        {
            callsign_ = callsign;
        }
        const Guid& ShipName( ) const
        {
            return shipName_;
        }
        void SetShipName( const Guid& shipName )
        {
            shipName_ = shipName;
        }
        Types::ShipType ShipType( ) const
        {
            return shipType_;
        }
        void SetShipType( Types::ShipType shipType )
        {
            shipType_ = shipType;
        }
        Int32 DimensionToBow( ) const
        {
            return dimensionToBow_;
        }
        void SetDimensionToBow( Int32 dimensionToBow )
        {
            dimensionToBow_ = dimensionToBow;
        }
        Int32 DimensionToStern( ) const
        {
            return dimensionToStern_;
        }
        void SetDimensionToStern( Int32 dimensionToStern )
        {
            dimensionToStern_ = dimensionToStern;
        }
        Int32 DimensionToPort( ) const
        {
            return dimensionToPort_;
        }
        void SetDimensionToPort( Int32 dimensionToPort )
        {
            dimensionToPort_ = dimensionToPort;
        }
        Int32 DimensionToStarboard( ) const
        {
            return dimensionToStarboard_;
        }
        void SetDimensionToStarboard( Int32 dimensionToStarboard )
        {
            dimensionToStarboard_ = dimensionToStarboard;
        }
        Types::PositionFixType PositionFixType( ) const
        {
            return positionFixType_;
        }
        void SetPositionFixType( Types::PositionFixType positionFixType )
        {
            positionFixType_ = positionFixType;
        }
        const DBDateTime& EstimatedTimeOfArrival( ) const
        {
            return estimatedTimeOfArrival_;
        }
        void SetEstimatedTimeOfArrival( const DBDateTime& estimatedTimeOfArrival )
        {
            estimatedTimeOfArrival_ = estimatedTimeOfArrival;
        }
        double Draught( ) const
        {
            return draught_;
        }
        void SetDraught( double draught )
        {
            draught_ = draught;
        }
        const FixedDBWideString<127>& Destination( ) const
        {
            return destination_;
        }
        void SetDestination( const FixedDBWideString<127>& destination )
        {
            destination_ = destination;
        }
        bool DataTerminalReady( ) const
        {
            return dataTerminalReady_;
        }
        void SetDataTerminalReady( bool dataTerminalReady )
        {
            dataTerminalReady_ = dataTerminalReady;
        }
        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, AISVERSION_FIELD_ID, aisVersion_);
            Bind(statement, IMONUMBER_FIELD_ID, imoNumber_);
            Bind(statement, CALLSIGN_FIELD_ID, callsign_);
            Bind(statement, SHIPNAME_FIELD_ID, shipName_);
            Bind(statement, SHIPTYPE_FIELD_ID, shipType_);
            Bind(statement, DIMENSIONTOBOW_FIELD_ID, dimensionToBow_);
            Bind(statement, DIMENSIONTOSTERN_FIELD_ID, dimensionToStern_);
            Bind(statement, DIMENSIONTOPORT_FIELD_ID, dimensionToPort_);
            Bind(statement, DIMENSIONTOSTARBOARD_FIELD_ID, dimensionToStarboard_);
            Bind(statement, POSITIONFIXTYPE_FIELD_ID, positionFixType_);
            Bind(statement, ESTIMATEDTIMEOFARRIVAL_FIELD_ID, estimatedTimeOfArrival_);
            Bind(statement, DRAUGHT_FIELD_ID, draught_);
            Bind(statement, DESTINATION_FIELD_ID, destination_);
            Bind(statement, DATATERMINALREADY_FIELD_ID, dataTerminalReady_);
            Bind(statement, SPARE_FIELD_ID, spare_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, aisVersion_);
            WriteColumnValue( destination, imoNumber_);
            WriteColumnValue( destination, callsign_);
            WriteColumnValue( destination, shipName_);
            WriteColumnValue( destination, shipType_);
            WriteColumnValue( destination, dimensionToBow_);
            WriteColumnValue( destination, dimensionToStern_);
            WriteColumnValue( destination, dimensionToPort_);
            WriteColumnValue( destination, dimensionToStarboard_);
            WriteColumnValue( destination, positionFixType_);
            WriteColumnValue( destination, estimatedTimeOfArrival_);
            WriteColumnValue( destination, draught_);
            WriteColumnValue( destination, destination_);
            WriteColumnValue( destination, dataTerminalReady_);
            WriteColumnValue( destination, spare_);
        }
        void AssignTo( Types::AisStaticAndVoyageRelatedDataMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetAisVersion( aisVersion_ );
            destination.SetImoNumber( imoNumber_ );
            destination.SetCallsign( callsign_ );
            destination.SetShipName( shipName_ );
            destination.SetShipType( shipType_ );
            destination.SetDimensionToBow( dimensionToBow_ );
            destination.SetDimensionToStern( dimensionToStern_ );
            destination.SetDimensionToPort( dimensionToPort_ );
            destination.SetDimensionToStarboard( dimensionToStarboard_ );
            destination.SetPositionFixType( positionFixType_ );
            destination.SetEstimatedTimeOfArrival( estimatedTimeOfArrival_ );
            destination.SetDraught( draught_ );
            destination.SetDestination( destination_ );
            destination.SetDataTerminalReady( dataTerminalReady_ );
            destination.SetSpare( spare_ );
        }
    };

    using SimpleAisStaticAndVoyageRelatedDataMessageDataReader = SimpleColumnDataReader<AisStaticAndVoyageRelatedDataMessageColumnData>;

    class AisStaticDataReportMessageColumnData : public AisMessageColumnData
    {
        Int32 partNumber_ = 0;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT PARTNUMBER_FIELD_ID = 8;

        AisStaticDataReportMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisStaticDataReportMessage;
        }

        Int32 PartNumber( ) const
        {
            return partNumber_;
        }
        void SetPartNumber( Int32 partNumber )
        {
            partNumber_ = partNumber;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, PARTNUMBER_FIELD_ID, partNumber_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, partNumber_);
        }
        void AssignTo( Types::AisStaticDataReportMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetPartNumber( partNumber_ );
        }
    };

    using SimpleAisStaticDataReportMessageDataReader = SimpleColumnDataReader<AisStaticDataReportMessageColumnData>;

    class AisStaticDataReportPartAMessageColumnData : public AisStaticDataReportMessageColumnData
    {
        Guid shipName_;
        Int32 spare_ = 0;
    public:
        using Base = AisStaticDataReportMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT SHIPNAME_FIELD_ID = 9;
        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 10;

        AisStaticDataReportPartAMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisStaticDataReportPartAMessage;
        }

        const Guid& ShipName( ) const
        {
            return shipName_;
        }
        void SetShipName( const Guid& shipName )
        {
            shipName_ = shipName;
        }
        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, SHIPNAME_FIELD_ID, shipName_);
            Bind(statement, SPARE_FIELD_ID, spare_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, shipName_);
            WriteColumnValue( destination, spare_);
        }
        void AssignTo( Types::AisStaticDataReportPartAMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisStaticDataReportMessageObject&>( destination ) );
            destination.SetShipName( shipName_ );
            destination.SetSpare( spare_ );
        }
    };

    using SimpleAisStaticDataReportPartAMessageDataReader = SimpleColumnDataReader<AisStaticDataReportPartAMessageColumnData>;

    class AisStaticDataReportPartBMessageColumnData : public AisStaticDataReportMessageColumnData
    {
        Types::ShipType shipType_ = Types::ShipType::NotAvailable;
        FixedDBWideString<127> vendorId_;
        Int32 unitModelCode_ = 0;
        Int32 serialNumber_ = 0;
        Guid callsign_;
        Int32 dimensionToBow_ = 0;
        Int32 dimensionToStern_ = 0;
        Int32 dimensionToPort_ = 0;
        Int32 dimensionToStarboard_ = 0;
        DBGuid mothershipMmsi_;
        Types::PositionFixType positionFixType_ = Types::PositionFixType::Undefined1;
        Int32 spare_ = 0;
    public:
        using Base = AisStaticDataReportMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT SHIPTYPE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT VENDORID_FIELD_ID = 10;
        static constexpr SQLUSMALLINT UNITMODELCODE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT SERIALNUMBER_FIELD_ID = 12;
        static constexpr SQLUSMALLINT CALLSIGN_FIELD_ID = 13;
        static constexpr SQLUSMALLINT DIMENSIONTOBOW_FIELD_ID = 14;
        static constexpr SQLUSMALLINT DIMENSIONTOSTERN_FIELD_ID = 15;
        static constexpr SQLUSMALLINT DIMENSIONTOPORT_FIELD_ID = 16;
        static constexpr SQLUSMALLINT DIMENSIONTOSTARBOARD_FIELD_ID = 17;
        static constexpr SQLUSMALLINT MOTHERSHIPMMSI_FIELD_ID = 18;
        static constexpr SQLUSMALLINT POSITIONFIXTYPE_FIELD_ID = 19;
        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 20;

        AisStaticDataReportPartBMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisStaticDataReportPartBMessage;
        }

        Types::ShipType ShipType( ) const
        {
            return shipType_;
        }
        void SetShipType( Types::ShipType shipType )
        {
            shipType_ = shipType;
        }
        const FixedDBWideString<127>& VendorId( ) const
        {
            return vendorId_;
        }
        void SetVendorId( const FixedDBWideString<127>& vendorId )
        {
            vendorId_ = vendorId;
        }
        Int32 UnitModelCode( ) const
        {
            return unitModelCode_;
        }
        void SetUnitModelCode( Int32 unitModelCode )
        {
            unitModelCode_ = unitModelCode;
        }
        Int32 SerialNumber( ) const
        {
            return serialNumber_;
        }
        void SetSerialNumber( Int32 serialNumber )
        {
            serialNumber_ = serialNumber;
        }
        const Guid& Callsign( ) const
        {
            return callsign_;
        }
        void SetCallsign( const Guid& callsign )
        {
            callsign_ = callsign;
        }
        Int32 DimensionToBow( ) const
        {
            return dimensionToBow_;
        }
        void SetDimensionToBow( Int32 dimensionToBow )
        {
            dimensionToBow_ = dimensionToBow;
        }
        Int32 DimensionToStern( ) const
        {
            return dimensionToStern_;
        }
        void SetDimensionToStern( Int32 dimensionToStern )
        {
            dimensionToStern_ = dimensionToStern;
        }
        Int32 DimensionToPort( ) const
        {
            return dimensionToPort_;
        }
        void SetDimensionToPort( Int32 dimensionToPort )
        {
            dimensionToPort_ = dimensionToPort;
        }
        Int32 DimensionToStarboard( ) const
        {
            return dimensionToStarboard_;
        }
        void SetDimensionToStarboard( Int32 dimensionToStarboard )
        {
            dimensionToStarboard_ = dimensionToStarboard;
        }
        const DBGuid& MothershipMmsi( ) const
        {
            return mothershipMmsi_;
        }
        void SetMothershipMmsi( const DBGuid& mothershipMmsi )
        {
            mothershipMmsi_ = mothershipMmsi;
        }
        Types::PositionFixType PositionFixType( ) const
        {
            return positionFixType_;
        }
        void SetPositionFixType( Types::PositionFixType positionFixType )
        {
            positionFixType_ = positionFixType;
        }
        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, SHIPTYPE_FIELD_ID, shipType_);
            Bind(statement, VENDORID_FIELD_ID, vendorId_);
            Bind(statement, UNITMODELCODE_FIELD_ID, unitModelCode_);
            Bind(statement, SERIALNUMBER_FIELD_ID, serialNumber_);
            Bind(statement, CALLSIGN_FIELD_ID, callsign_);
            Bind(statement, DIMENSIONTOBOW_FIELD_ID, dimensionToBow_);
            Bind(statement, DIMENSIONTOSTERN_FIELD_ID, dimensionToStern_);
            Bind(statement, DIMENSIONTOPORT_FIELD_ID, dimensionToPort_);
            Bind(statement, DIMENSIONTOSTARBOARD_FIELD_ID, dimensionToStarboard_);
            Bind(statement, MOTHERSHIPMMSI_FIELD_ID, mothershipMmsi_);
            Bind(statement, POSITIONFIXTYPE_FIELD_ID, positionFixType_);
            Bind(statement, SPARE_FIELD_ID, spare_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, shipType_);
            WriteColumnValue( destination, vendorId_);
            WriteColumnValue( destination, unitModelCode_);
            WriteColumnValue( destination, serialNumber_);
            WriteColumnValue( destination, callsign_);
            WriteColumnValue( destination, dimensionToBow_);
            WriteColumnValue( destination, dimensionToStern_);
            WriteColumnValue( destination, dimensionToPort_);
            WriteColumnValue( destination, dimensionToStarboard_);
            WriteColumnValue( destination, mothershipMmsi_);
            WriteColumnValue( destination, positionFixType_);
            WriteColumnValue( destination, spare_);
        }
        void AssignTo( Types::AisStaticDataReportPartBMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisStaticDataReportMessageObject&>( destination ) );
            destination.SetShipType( shipType_ );
            destination.SetVendorId( vendorId_ );
            destination.SetUnitModelCode( unitModelCode_ );
            destination.SetSerialNumber( serialNumber_ );
            destination.SetCallsign( callsign_ );
            destination.SetDimensionToBow( dimensionToBow_ );
            destination.SetDimensionToStern( dimensionToStern_ );
            destination.SetDimensionToPort( dimensionToPort_ );
            destination.SetDimensionToStarboard( dimensionToStarboard_ );
            destination.SetMothershipMmsi( mothershipMmsi_ );
            destination.SetPositionFixType( positionFixType_ );
            destination.SetSpare( spare_ );
        }
    };

    using SimpleAisStaticDataReportPartBMessageDataReader = SimpleColumnDataReader<AisStaticDataReportPartBMessageColumnData>;

    class AisUtcAndDateInquiryMessageColumnData : public AisMessageColumnData
    {
        Int32 spare1_ = 0;
        Int32 destinationMmsi_ = 0;
        Int32 spare2_ = 0;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT SPARE1_FIELD_ID = 8;
        static constexpr SQLUSMALLINT DESTINATIONMMSI_FIELD_ID = 9;
        static constexpr SQLUSMALLINT SPARE2_FIELD_ID = 10;

        AisUtcAndDateInquiryMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisUtcAndDateInquiryMessage;
        }

        Int32 Spare1( ) const
        {
            return spare1_;
        }
        void SetSpare1( Int32 spare1 )
        {
            spare1_ = spare1;
        }
        Int32 DestinationMmsi( ) const
        {
            return destinationMmsi_;
        }
        void SetDestinationMmsi( Int32 destinationMmsi )
        {
            destinationMmsi_ = destinationMmsi;
        }
        Int32 Spare2( ) const
        {
            return spare2_;
        }
        void SetSpare2( Int32 spare2 )
        {
            spare2_ = spare2;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, SPARE1_FIELD_ID, spare1_);
            Bind(statement, DESTINATIONMMSI_FIELD_ID, destinationMmsi_);
            Bind(statement, SPARE2_FIELD_ID, spare2_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, spare1_);
            WriteColumnValue( destination, destinationMmsi_);
            WriteColumnValue( destination, spare2_);
        }
        void AssignTo( Types::AisUtcAndDateInquiryMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetSpare1( spare1_ );
            destination.SetDestinationMmsi( destinationMmsi_ );
            destination.SetSpare2( spare2_ );
        }
    };

    using SimpleAisUtcAndDateInquiryMessageDataReader = SimpleColumnDataReader<AisUtcAndDateInquiryMessageColumnData>;

    class AisUtcAndDateResponseMessageColumnData : public AisMessageColumnData
    {
        DateTime datetime_;
        Types::PositionAccuracy positionAccuracy_ = Types::PositionAccuracy::Low;
        double longitude_ = 0.0;
        double latitude_ = 0.0;
        Types::PositionFixType positionFixType_ = Types::PositionFixType::Undefined1;
        Int32 spare_ = 0;
        Types::Raim raim_ = Types::Raim::NotInUse;
        Int32 radioStatus_ = 0;
    public:
        using Base = AisMessageColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DATETIME_FIELD_ID = 8;
        static constexpr SQLUSMALLINT POSITIONACCURACY_FIELD_ID = 9;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 10;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT POSITIONFIXTYPE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT SPARE_FIELD_ID = 13;
        static constexpr SQLUSMALLINT RAIM_FIELD_ID = 14;
        static constexpr SQLUSMALLINT RADIOSTATUS_FIELD_ID = 15;

        AisUtcAndDateResponseMessageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisUtcAndDateResponseMessage;
        }

        const DateTime& Datetime( ) const
        {
            return datetime_;
        }
        void SetDatetime( const DateTime& datetime )
        {
            datetime_ = datetime;
        }
        Types::PositionAccuracy PositionAccuracy( ) const
        {
            return positionAccuracy_;
        }
        void SetPositionAccuracy( Types::PositionAccuracy positionAccuracy )
        {
            positionAccuracy_ = positionAccuracy;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        Types::PositionFixType PositionFixType( ) const
        {
            return positionFixType_;
        }
        void SetPositionFixType( Types::PositionFixType positionFixType )
        {
            positionFixType_ = positionFixType;
        }
        Int32 Spare( ) const
        {
            return spare_;
        }
        void SetSpare( Int32 spare )
        {
            spare_ = spare;
        }
        Types::Raim Raim( ) const
        {
            return raim_;
        }
        void SetRaim( Types::Raim raim )
        {
            raim_ = raim;
        }
        Int32 RadioStatus( ) const
        {
            return radioStatus_;
        }
        void SetRadioStatus( Int32 radioStatus )
        {
            radioStatus_ = radioStatus;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DATETIME_FIELD_ID, datetime_);
            Bind(statement, POSITIONACCURACY_FIELD_ID, positionAccuracy_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, POSITIONFIXTYPE_FIELD_ID, positionFixType_);
            Bind(statement, SPARE_FIELD_ID, spare_);
            Bind(statement, RAIM_FIELD_ID, raim_);
            Bind(statement, RADIOSTATUS_FIELD_ID, radioStatus_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, datetime_);
            WriteColumnValue( destination, positionAccuracy_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, positionFixType_);
            WriteColumnValue( destination, spare_);
            WriteColumnValue( destination, raim_);
            WriteColumnValue( destination, radioStatus_);
        }
        void AssignTo( Types::AisUtcAndDateResponseMessageObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::AisMessageObject&>( destination ) );
            destination.SetDatetime( datetime_ );
            destination.SetPositionAccuracy( positionAccuracy_ );
            destination.SetLongitude( longitude_ );
            destination.SetLatitude( latitude_ );
            destination.SetPositionFixType( positionFixType_ );
            destination.SetSpare( spare_ );
            destination.SetRaim( raim_ );
            destination.SetRadioStatus( radioStatus_ );
        }
    };

    using SimpleAisUtcAndDateResponseMessageDataReader = SimpleColumnDataReader<AisUtcAndDateResponseMessageColumnData>;

    class AlarmStateChangeColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid alarm_;
        DateTime timestamp_;
        Types::AlarmState state_ = Types::AlarmState::Unknown;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ALARM_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT STATE_FIELD_ID = 5;

        AlarmStateChangeColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AlarmStateChange;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Alarm( ) const
        {
            return alarm_;
        }
        void SetAlarm( const Guid& alarm )
        {
            alarm_ = alarm;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::AlarmState State( ) const
        {
            return state_;
        }
        void SetState( Types::AlarmState state )
        {
            state_ = state;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, ALARM_FIELD_ID, alarm_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, STATE_FIELD_ID, state_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::AlarmStateChange );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, alarm_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, state_);
        }
        void AssignTo( Types::AlarmStateChangeObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetAlarm( alarm_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetState( state_ );
        }
    };

    using SimpleAlarmStateChangeDataReader = SimpleColumnDataReader<AlarmStateChangeColumnData>;

    class BaseStationTypeColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        FixedDBWideString<127> name_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;

        BaseStationTypeColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BaseStationType;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::BaseStationType );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, name_);
        }
        void AssignTo( Types::BaseStationTypeObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetName( name_ );
        }
    };

    using SimpleBaseStationTypeDataReader = SimpleColumnDataReader<BaseStationTypeColumnData>;

    class BinaryTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        Binary value_;
        SQLLEN valueLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        BinaryTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BinaryTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const Binary& Value( ) const
        {
            return value_;
        }
        void SetValue( const Binary& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            value_ = statement.GetBinary(VALUE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::BinaryTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::BinaryTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleBinaryTimeseriesValueDataReader = SimpleColumnDataReader<BinaryTimeseriesValueColumnData>;

    class BookmarkColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid view_;
        FixedDBWideString<127> name_;
        DBDateTime timestamp_;
        double latitude_ = 0.0;
        double longitude_ = 0.0;
        double zoomLevel_ = 0.0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT VIEW_FIELD_ID = 3;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 4;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 5;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT ZOOMLEVEL_FIELD_ID = 8;

        BookmarkColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Bookmark;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& View( ) const
        {
            return view_;
        }
        void SetView( const Guid& view )
        {
            view_ = view;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const DBDateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DBDateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double ZoomLevel( ) const
        {
            return zoomLevel_;
        }
        void SetZoomLevel( double zoomLevel )
        {
            zoomLevel_ = zoomLevel;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, VIEW_FIELD_ID, view_);
            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, ZOOMLEVEL_FIELD_ID, zoomLevel_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::Bookmark );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, view_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, zoomLevel_);
        }
        void AssignTo( Types::BookmarkObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetView( view_ );
            destination.SetName( name_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetLatitude( latitude_ );
            destination.SetLongitude( longitude_ );
            destination.SetZoomLevel( zoomLevel_ );
        }
    };

    using SimpleBookmarkDataReader = SimpleColumnDataReader<BookmarkColumnData>;

    class BooleanTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBBoolean  value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        BooleanTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BooleanTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBBoolean & Value( ) const
        {
            return value_;
        }
        void SetValue( const DBBoolean & value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::BooleanTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::BooleanTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleBooleanTimeseriesValueDataReader = SimpleColumnDataReader<BooleanTimeseriesValueColumnData>;

    class ByteTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBByte value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        ByteTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ByteTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBByte& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBByte& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::ByteTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::ByteTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleByteTimeseriesValueDataReader = SimpleColumnDataReader<ByteTimeseriesValueColumnData>;

    class CameraCommandColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
        Guid camera_;
        DateTime timestamp_;
        Types::DeviceCommandSourceType deviceCommandSourceType_ = Types::DeviceCommandSourceType::Unknown;
        Guid deviceCommandSourceId_;
        Guid reply_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT CAMERA_FIELD_ID = 4;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCETYPE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCEID_FIELD_ID = 7;
        static constexpr SQLUSMALLINT REPLY_FIELD_ID = 8;

        CameraCommandColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommand;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Camera( ) const
        {
            return camera_;
        }
        void SetCamera( const Guid& camera )
        {
            camera_ = camera;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::DeviceCommandSourceType DeviceCommandSourceType( ) const
        {
            return deviceCommandSourceType_;
        }
        void SetDeviceCommandSourceType( Types::DeviceCommandSourceType deviceCommandSourceType )
        {
            deviceCommandSourceType_ = deviceCommandSourceType;
        }
        const Guid& DeviceCommandSourceId( ) const
        {
            return deviceCommandSourceId_;
        }
        void SetDeviceCommandSourceId( const Guid& deviceCommandSourceId )
        {
            deviceCommandSourceId_ = deviceCommandSourceId;
        }
        const Guid& Reply( ) const
        {
            return reply_;
        }
        void SetReply( const Guid& reply )
        {
            reply_ = reply;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, CAMERA_FIELD_ID, camera_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEVICECOMMANDSOURCETYPE_FIELD_ID, deviceCommandSourceType_);
            Bind(statement, DEVICECOMMANDSOURCEID_FIELD_ID, deviceCommandSourceId_);
            Bind(statement, REPLY_FIELD_ID, reply_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CameraCommand );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, camera_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, deviceCommandSourceType_);
            WriteColumnValue( destination, deviceCommandSourceId_);
            WriteColumnValue( destination, reply_);
        }
        void AssignTo( Types::CameraCommandObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetCamera( camera_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDeviceCommandSourceType( deviceCommandSourceType_ );
            destination.SetDeviceCommandSourceId( deviceCommandSourceId_ );
            destination.SetReply( reply_ );
        }
    };

    using SimpleCameraCommandDataReader = SimpleColumnDataReader<CameraCommandColumnData>;

    class CameraCommandAbsoluteMoveColumnData : public CameraCommandColumnData
    {
        Types::CameraPanTiltMode positionPanTiltMode_ = Types::CameraPanTiltMode::Unknown;
        DBDouble panAngle_;
        DBDouble tiltAngle_;
        Types::CameraFocalLengthMode positionFocalLengthMode_ = Types::CameraFocalLengthMode::Unknown;
        DBDouble focalLength_;
        Types::CameraPanTiltMode speedPanTiltMode_ = Types::CameraPanTiltMode::Unknown;
        DBDouble panSpeed_;
        DBDouble tiltSpeed_;
        Types::CameraFocalLengthMode speedFocalLengthMode_ = Types::CameraFocalLengthMode::Unknown;
        DBDouble zoomSpeed_;
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT POSITIONPANTILTMODE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT PANANGLE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT TILTANGLE_FIELD_ID = 10;
        static constexpr SQLUSMALLINT POSITIONFOCALLENGTHMODE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT FOCALLENGTH_FIELD_ID = 12;
        static constexpr SQLUSMALLINT SPEEDPANTILTMODE_FIELD_ID = 13;
        static constexpr SQLUSMALLINT PANSPEED_FIELD_ID = 14;
        static constexpr SQLUSMALLINT TILTSPEED_FIELD_ID = 15;
        static constexpr SQLUSMALLINT SPEEDFOCALLENGTHMODE_FIELD_ID = 16;
        static constexpr SQLUSMALLINT ZOOMSPEED_FIELD_ID = 17;

        CameraCommandAbsoluteMoveColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandAbsoluteMove;
        }

        Types::CameraPanTiltMode PositionPanTiltMode( ) const
        {
            return positionPanTiltMode_;
        }
        void SetPositionPanTiltMode( Types::CameraPanTiltMode positionPanTiltMode )
        {
            positionPanTiltMode_ = positionPanTiltMode;
        }
        const DBDouble& PanAngle( ) const
        {
            return panAngle_;
        }
        void SetPanAngle( const DBDouble& panAngle )
        {
            panAngle_ = panAngle;
        }
        const DBDouble& TiltAngle( ) const
        {
            return tiltAngle_;
        }
        void SetTiltAngle( const DBDouble& tiltAngle )
        {
            tiltAngle_ = tiltAngle;
        }
        Types::CameraFocalLengthMode PositionFocalLengthMode( ) const
        {
            return positionFocalLengthMode_;
        }
        void SetPositionFocalLengthMode( Types::CameraFocalLengthMode positionFocalLengthMode )
        {
            positionFocalLengthMode_ = positionFocalLengthMode;
        }
        const DBDouble& FocalLength( ) const
        {
            return focalLength_;
        }
        void SetFocalLength( const DBDouble& focalLength )
        {
            focalLength_ = focalLength;
        }
        Types::CameraPanTiltMode SpeedPanTiltMode( ) const
        {
            return speedPanTiltMode_;
        }
        void SetSpeedPanTiltMode( Types::CameraPanTiltMode speedPanTiltMode )
        {
            speedPanTiltMode_ = speedPanTiltMode;
        }
        const DBDouble& PanSpeed( ) const
        {
            return panSpeed_;
        }
        void SetPanSpeed( const DBDouble& panSpeed )
        {
            panSpeed_ = panSpeed;
        }
        const DBDouble& TiltSpeed( ) const
        {
            return tiltSpeed_;
        }
        void SetTiltSpeed( const DBDouble& tiltSpeed )
        {
            tiltSpeed_ = tiltSpeed;
        }
        Types::CameraFocalLengthMode SpeedFocalLengthMode( ) const
        {
            return speedFocalLengthMode_;
        }
        void SetSpeedFocalLengthMode( Types::CameraFocalLengthMode speedFocalLengthMode )
        {
            speedFocalLengthMode_ = speedFocalLengthMode;
        }
        const DBDouble& ZoomSpeed( ) const
        {
            return zoomSpeed_;
        }
        void SetZoomSpeed( const DBDouble& zoomSpeed )
        {
            zoomSpeed_ = zoomSpeed;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, POSITIONPANTILTMODE_FIELD_ID, positionPanTiltMode_);
            Bind(statement, PANANGLE_FIELD_ID, panAngle_);
            Bind(statement, TILTANGLE_FIELD_ID, tiltAngle_);
            Bind(statement, POSITIONFOCALLENGTHMODE_FIELD_ID, positionFocalLengthMode_);
            Bind(statement, FOCALLENGTH_FIELD_ID, focalLength_);
            Bind(statement, SPEEDPANTILTMODE_FIELD_ID, speedPanTiltMode_);
            Bind(statement, PANSPEED_FIELD_ID, panSpeed_);
            Bind(statement, TILTSPEED_FIELD_ID, tiltSpeed_);
            Bind(statement, SPEEDFOCALLENGTHMODE_FIELD_ID, speedFocalLengthMode_);
            Bind(statement, ZOOMSPEED_FIELD_ID, zoomSpeed_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, positionPanTiltMode_);
            WriteColumnValue( destination, panAngle_);
            WriteColumnValue( destination, tiltAngle_);
            WriteColumnValue( destination, positionFocalLengthMode_);
            WriteColumnValue( destination, focalLength_);
            WriteColumnValue( destination, speedPanTiltMode_);
            WriteColumnValue( destination, panSpeed_);
            WriteColumnValue( destination, tiltSpeed_);
            WriteColumnValue( destination, speedFocalLengthMode_);
            WriteColumnValue( destination, zoomSpeed_);
        }
        void AssignTo( Types::CameraCommandAbsoluteMoveObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
            destination.SetPositionPanTiltMode( positionPanTiltMode_ );
            destination.SetPanAngle( panAngle_ );
            destination.SetTiltAngle( tiltAngle_ );
            destination.SetPositionFocalLengthMode( positionFocalLengthMode_ );
            destination.SetFocalLength( focalLength_ );
            destination.SetSpeedPanTiltMode( speedPanTiltMode_ );
            destination.SetPanSpeed( panSpeed_ );
            destination.SetTiltSpeed( tiltSpeed_ );
            destination.SetSpeedFocalLengthMode( speedFocalLengthMode_ );
            destination.SetZoomSpeed( zoomSpeed_ );
        }
    };

    using SimpleCameraCommandAbsoluteMoveDataReader = SimpleColumnDataReader<CameraCommandAbsoluteMoveColumnData>;

    class CameraCommandAdjustPanTiltZoomColumnData : public CameraCommandColumnData
    {
        DBDouble x_;
        DBDouble y_;
        DBDouble z_;
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT X_FIELD_ID = 8;
        static constexpr SQLUSMALLINT Y_FIELD_ID = 9;
        static constexpr SQLUSMALLINT Z_FIELD_ID = 10;

        CameraCommandAdjustPanTiltZoomColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandAdjustPanTiltZoom;
        }

        const DBDouble& X( ) const
        {
            return x_;
        }
        void SetX( const DBDouble& x )
        {
            x_ = x;
        }
        const DBDouble& Y( ) const
        {
            return y_;
        }
        void SetY( const DBDouble& y )
        {
            y_ = y;
        }
        const DBDouble& Z( ) const
        {
            return z_;
        }
        void SetZ( const DBDouble& z )
        {
            z_ = z;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, X_FIELD_ID, x_);
            Bind(statement, Y_FIELD_ID, y_);
            Bind(statement, Z_FIELD_ID, z_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, x_);
            WriteColumnValue( destination, y_);
            WriteColumnValue( destination, z_);
        }
        void AssignTo( Types::CameraCommandAdjustPanTiltZoomObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
            destination.SetX( x_ );
            destination.SetY( y_ );
            destination.SetZ( z_ );
        }
    };

    using SimpleCameraCommandAdjustPanTiltZoomDataReader = SimpleColumnDataReader<CameraCommandAdjustPanTiltZoomColumnData>;

    class CameraCommandContinuousMoveColumnData : public CameraCommandColumnData
    {
        bool normalized_ = false;
        DBDouble panVelocity_;
        DBDouble tiltVelocity_;
        DBDouble zoomVelocity_;
        DBTimeSpan duration_;
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT NORMALIZED_FIELD_ID = 8;
        static constexpr SQLUSMALLINT PANVELOCITY_FIELD_ID = 9;
        static constexpr SQLUSMALLINT TILTVELOCITY_FIELD_ID = 10;
        static constexpr SQLUSMALLINT ZOOMVELOCITY_FIELD_ID = 11;
        static constexpr SQLUSMALLINT DURATION_FIELD_ID = 12;

        CameraCommandContinuousMoveColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandContinuousMove;
        }

        bool Normalized( ) const
        {
            return normalized_;
        }
        void SetNormalized( bool normalized )
        {
            normalized_ = normalized;
        }
        const DBDouble& PanVelocity( ) const
        {
            return panVelocity_;
        }
        void SetPanVelocity( const DBDouble& panVelocity )
        {
            panVelocity_ = panVelocity;
        }
        const DBDouble& TiltVelocity( ) const
        {
            return tiltVelocity_;
        }
        void SetTiltVelocity( const DBDouble& tiltVelocity )
        {
            tiltVelocity_ = tiltVelocity;
        }
        const DBDouble& ZoomVelocity( ) const
        {
            return zoomVelocity_;
        }
        void SetZoomVelocity( const DBDouble& zoomVelocity )
        {
            zoomVelocity_ = zoomVelocity;
        }
        const DBTimeSpan& Duration( ) const
        {
            return duration_;
        }
        void SetDuration( const DBTimeSpan& duration )
        {
            duration_ = duration;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, NORMALIZED_FIELD_ID, normalized_);
            Bind(statement, PANVELOCITY_FIELD_ID, panVelocity_);
            Bind(statement, TILTVELOCITY_FIELD_ID, tiltVelocity_);
            Bind(statement, ZOOMVELOCITY_FIELD_ID, zoomVelocity_);
            Bind(statement, DURATION_FIELD_ID, duration_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, normalized_);
            WriteColumnValue( destination, panVelocity_);
            WriteColumnValue( destination, tiltVelocity_);
            WriteColumnValue( destination, zoomVelocity_);
            WriteColumnValue( destination, duration_);
        }
        void AssignTo( Types::CameraCommandContinuousMoveObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
            destination.SetNormalized( normalized_ );
            destination.SetPanVelocity( panVelocity_ );
            destination.SetTiltVelocity( tiltVelocity_ );
            destination.SetZoomVelocity( zoomVelocity_ );
            destination.SetDuration( duration_ );
        }
    };

    using SimpleCameraCommandContinuousMoveDataReader = SimpleColumnDataReader<CameraCommandContinuousMoveColumnData>;

    class CameraCommandGeoMoveColumnData : public CameraCommandColumnData
    {
        double latitude_ = 0.0;
        double longitude_ = 0.0;
        DBDouble altitude_;
        DBDouble viewportWidth_;
        DBDouble viewportHeight_;
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT ALTITUDE_FIELD_ID = 10;
        static constexpr SQLUSMALLINT VIEWPORTWIDTH_FIELD_ID = 11;
        static constexpr SQLUSMALLINT VIEWPORTHEIGHT_FIELD_ID = 12;

        CameraCommandGeoMoveColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandGeoMove;
        }

        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        const DBDouble& Altitude( ) const
        {
            return altitude_;
        }
        void SetAltitude( const DBDouble& altitude )
        {
            altitude_ = altitude;
        }
        const DBDouble& ViewportWidth( ) const
        {
            return viewportWidth_;
        }
        void SetViewportWidth( const DBDouble& viewportWidth )
        {
            viewportWidth_ = viewportWidth;
        }
        const DBDouble& ViewportHeight( ) const
        {
            return viewportHeight_;
        }
        void SetViewportHeight( const DBDouble& viewportHeight )
        {
            viewportHeight_ = viewportHeight;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, ALTITUDE_FIELD_ID, altitude_);
            Bind(statement, VIEWPORTWIDTH_FIELD_ID, viewportWidth_);
            Bind(statement, VIEWPORTHEIGHT_FIELD_ID, viewportHeight_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, altitude_);
            WriteColumnValue( destination, viewportWidth_);
            WriteColumnValue( destination, viewportHeight_);
        }
        void AssignTo( Types::CameraCommandGeoMoveObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
            destination.SetLatitude( latitude_ );
            destination.SetLongitude( longitude_ );
            destination.SetAltitude( altitude_ );
            destination.SetViewportWidth( viewportWidth_ );
            destination.SetViewportHeight( viewportHeight_ );
        }
    };

    using SimpleCameraCommandGeoMoveDataReader = SimpleColumnDataReader<CameraCommandGeoMoveColumnData>;

    class CameraCommandRelativeMoveColumnData : public CameraCommandColumnData
    {
        bool normalized_ = false;
        DBDouble panAngle_;
        DBDouble tiltAngle_;
        DBDouble focalLength_;
        DBDouble panSpeed_;
        DBDouble tiltSpeed_;
        DBDouble zoomSpeed_;
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT NORMALIZED_FIELD_ID = 8;
        static constexpr SQLUSMALLINT PANANGLE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT TILTANGLE_FIELD_ID = 10;
        static constexpr SQLUSMALLINT FOCALLENGTH_FIELD_ID = 11;
        static constexpr SQLUSMALLINT PANSPEED_FIELD_ID = 12;
        static constexpr SQLUSMALLINT TILTSPEED_FIELD_ID = 13;
        static constexpr SQLUSMALLINT ZOOMSPEED_FIELD_ID = 14;

        CameraCommandRelativeMoveColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandRelativeMove;
        }

        bool Normalized( ) const
        {
            return normalized_;
        }
        void SetNormalized( bool normalized )
        {
            normalized_ = normalized;
        }
        const DBDouble& PanAngle( ) const
        {
            return panAngle_;
        }
        void SetPanAngle( const DBDouble& panAngle )
        {
            panAngle_ = panAngle;
        }
        const DBDouble& TiltAngle( ) const
        {
            return tiltAngle_;
        }
        void SetTiltAngle( const DBDouble& tiltAngle )
        {
            tiltAngle_ = tiltAngle;
        }
        const DBDouble& FocalLength( ) const
        {
            return focalLength_;
        }
        void SetFocalLength( const DBDouble& focalLength )
        {
            focalLength_ = focalLength;
        }
        const DBDouble& PanSpeed( ) const
        {
            return panSpeed_;
        }
        void SetPanSpeed( const DBDouble& panSpeed )
        {
            panSpeed_ = panSpeed;
        }
        const DBDouble& TiltSpeed( ) const
        {
            return tiltSpeed_;
        }
        void SetTiltSpeed( const DBDouble& tiltSpeed )
        {
            tiltSpeed_ = tiltSpeed;
        }
        const DBDouble& ZoomSpeed( ) const
        {
            return zoomSpeed_;
        }
        void SetZoomSpeed( const DBDouble& zoomSpeed )
        {
            zoomSpeed_ = zoomSpeed;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, NORMALIZED_FIELD_ID, normalized_);
            Bind(statement, PANANGLE_FIELD_ID, panAngle_);
            Bind(statement, TILTANGLE_FIELD_ID, tiltAngle_);
            Bind(statement, FOCALLENGTH_FIELD_ID, focalLength_);
            Bind(statement, PANSPEED_FIELD_ID, panSpeed_);
            Bind(statement, TILTSPEED_FIELD_ID, tiltSpeed_);
            Bind(statement, ZOOMSPEED_FIELD_ID, zoomSpeed_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, normalized_);
            WriteColumnValue( destination, panAngle_);
            WriteColumnValue( destination, tiltAngle_);
            WriteColumnValue( destination, focalLength_);
            WriteColumnValue( destination, panSpeed_);
            WriteColumnValue( destination, tiltSpeed_);
            WriteColumnValue( destination, zoomSpeed_);
        }
        void AssignTo( Types::CameraCommandRelativeMoveObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
            destination.SetNormalized( normalized_ );
            destination.SetPanAngle( panAngle_ );
            destination.SetTiltAngle( tiltAngle_ );
            destination.SetFocalLength( focalLength_ );
            destination.SetPanSpeed( panSpeed_ );
            destination.SetTiltSpeed( tiltSpeed_ );
            destination.SetZoomSpeed( zoomSpeed_ );
        }
    };

    using SimpleCameraCommandRelativeMoveDataReader = SimpleColumnDataReader<CameraCommandRelativeMoveColumnData>;

    class CameraCommandReleasePTZOwnershipColumnData : public CameraCommandColumnData
    {
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        CameraCommandReleasePTZOwnershipColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandReleasePTZOwnership;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::CameraCommandReleasePTZOwnershipObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
        }
    };

    using SimpleCameraCommandReleasePTZOwnershipDataReader = SimpleColumnDataReader<CameraCommandReleasePTZOwnershipColumnData>;

    class CameraCommandRequestPTZOwnershipColumnData : public CameraCommandColumnData
    {
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        CameraCommandRequestPTZOwnershipColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandRequestPTZOwnership;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::CameraCommandRequestPTZOwnershipObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
        }
    };

    using SimpleCameraCommandRequestPTZOwnershipDataReader = SimpleColumnDataReader<CameraCommandRequestPTZOwnershipColumnData>;

    class CameraCommandSetAutoFocusColumnData : public CameraCommandColumnData
    {
        bool enabled_ = false;
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ENABLED_FIELD_ID = 8;

        CameraCommandSetAutoFocusColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandSetAutoFocus;
        }

        bool Enabled( ) const
        {
            return enabled_;
        }
        void SetEnabled( bool enabled )
        {
            enabled_ = enabled;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, ENABLED_FIELD_ID, enabled_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, enabled_);
        }
        void AssignTo( Types::CameraCommandSetAutoFocusObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
            destination.SetEnabled( enabled_ );
        }
    };

    using SimpleCameraCommandSetAutoFocusDataReader = SimpleColumnDataReader<CameraCommandSetAutoFocusColumnData>;

    class CameraCommandSetBlackAndWhiteColumnData : public CameraCommandColumnData
    {
        bool enabled_ = false;
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ENABLED_FIELD_ID = 8;

        CameraCommandSetBlackAndWhiteColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandSetBlackAndWhite;
        }

        bool Enabled( ) const
        {
            return enabled_;
        }
        void SetEnabled( bool enabled )
        {
            enabled_ = enabled;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, ENABLED_FIELD_ID, enabled_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, enabled_);
        }
        void AssignTo( Types::CameraCommandSetBlackAndWhiteObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
            destination.SetEnabled( enabled_ );
        }
    };

    using SimpleCameraCommandSetBlackAndWhiteDataReader = SimpleColumnDataReader<CameraCommandSetBlackAndWhiteColumnData>;

    class CameraCommandSetFollowedColumnData : public CameraCommandColumnData
    {
        Guid trackId_;
        Types::CameraFollowReason reason_ = Types::CameraFollowReason::Alarm;
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TRACKID_FIELD_ID = 8;
        static constexpr SQLUSMALLINT REASON_FIELD_ID = 9;

        CameraCommandSetFollowedColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandSetFollowed;
        }

        const Guid& TrackId( ) const
        {
            return trackId_;
        }
        void SetTrackId( const Guid& trackId )
        {
            trackId_ = trackId;
        }
        Types::CameraFollowReason Reason( ) const
        {
            return reason_;
        }
        void SetReason( Types::CameraFollowReason reason )
        {
            reason_ = reason;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TRACKID_FIELD_ID, trackId_);
            Bind(statement, REASON_FIELD_ID, reason_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, trackId_);
            WriteColumnValue( destination, reason_);
        }
        void AssignTo( Types::CameraCommandSetFollowedObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
            destination.SetTrackId( trackId_ );
            destination.SetReason( reason_ );
        }
    };

    using SimpleCameraCommandSetFollowedDataReader = SimpleColumnDataReader<CameraCommandSetFollowedColumnData>;

    class CameraCommandSetInfraRedLampColumnData : public CameraCommandColumnData
    {
        bool enabled_ = false;
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ENABLED_FIELD_ID = 8;

        CameraCommandSetInfraRedLampColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandSetInfraRedLamp;
        }

        bool Enabled( ) const
        {
            return enabled_;
        }
        void SetEnabled( bool enabled )
        {
            enabled_ = enabled;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, ENABLED_FIELD_ID, enabled_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, enabled_);
        }
        void AssignTo( Types::CameraCommandSetInfraRedLampObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
            destination.SetEnabled( enabled_ );
        }
    };

    using SimpleCameraCommandSetInfraRedLampDataReader = SimpleColumnDataReader<CameraCommandSetInfraRedLampColumnData>;

    class CameraCommandSetWasherColumnData : public CameraCommandColumnData
    {
        bool enabled_ = false;
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ENABLED_FIELD_ID = 8;

        CameraCommandSetWasherColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandSetWasher;
        }

        bool Enabled( ) const
        {
            return enabled_;
        }
        void SetEnabled( bool enabled )
        {
            enabled_ = enabled;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, ENABLED_FIELD_ID, enabled_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, enabled_);
        }
        void AssignTo( Types::CameraCommandSetWasherObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
            destination.SetEnabled( enabled_ );
        }
    };

    using SimpleCameraCommandSetWasherDataReader = SimpleColumnDataReader<CameraCommandSetWasherColumnData>;

    class CameraCommandSetWiperColumnData : public CameraCommandColumnData
    {
        bool enabled_ = false;
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ENABLED_FIELD_ID = 8;

        CameraCommandSetWiperColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandSetWiper;
        }

        bool Enabled( ) const
        {
            return enabled_;
        }
        void SetEnabled( bool enabled )
        {
            enabled_ = enabled;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, ENABLED_FIELD_ID, enabled_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, enabled_);
        }
        void AssignTo( Types::CameraCommandSetWiperObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
            destination.SetEnabled( enabled_ );
        }
    };

    using SimpleCameraCommandSetWiperDataReader = SimpleColumnDataReader<CameraCommandSetWiperColumnData>;

    class CameraCommandStopColumnData : public CameraCommandColumnData
    {
        bool panTilt_ = false;
        bool zoom_ = false;
    public:
        using Base = CameraCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT PANTILT_FIELD_ID = 8;
        static constexpr SQLUSMALLINT ZOOM_FIELD_ID = 9;

        CameraCommandStopColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandStop;
        }

        bool PanTilt( ) const
        {
            return panTilt_;
        }
        void SetPanTilt( bool panTilt )
        {
            panTilt_ = panTilt;
        }
        bool Zoom( ) const
        {
            return zoom_;
        }
        void SetZoom( bool zoom )
        {
            zoom_ = zoom;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, PANTILT_FIELD_ID, panTilt_);
            Bind(statement, ZOOM_FIELD_ID, zoom_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, panTilt_);
            WriteColumnValue( destination, zoom_);
        }
        void AssignTo( Types::CameraCommandStopObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CameraCommandObject&>( destination ) );
            destination.SetPanTilt( panTilt_ );
            destination.SetZoom( zoom_ );
        }
    };

    using SimpleCameraCommandStopDataReader = SimpleColumnDataReader<CameraCommandStopColumnData>;

    class CameraCommandReplyColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid camera_;
        DateTime timestamp_;
        Guid command_;
        Types::DeviceCommandReplyStatus status_ = Types::DeviceCommandReplyStatus::Unknown;
        WideString message_;
        SQLLEN messageLength_ = SQL_NULL_DATA;
        double panAngle_ = 0.0;
        double tiltAngle_ = 0.0;
        double focalLength_ = 0.0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT CAMERA_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT COMMAND_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STATUS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT PANANGLE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT TILTANGLE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT FOCALLENGTH_FIELD_ID = 9;
        static constexpr SQLUSMALLINT MESSAGE_FIELD_ID = 10;

        CameraCommandReplyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraCommandReply;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Camera( ) const
        {
            return camera_;
        }
        void SetCamera( const Guid& camera )
        {
            camera_ = camera;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const Guid& Command( ) const
        {
            return command_;
        }
        void SetCommand( const Guid& command )
        {
            command_ = command;
        }
        Types::DeviceCommandReplyStatus Status( ) const
        {
            return status_;
        }
        void SetStatus( Types::DeviceCommandReplyStatus status )
        {
            status_ = status;
        }
        const WideString& Message( ) const
        {
            return message_;
        }
        void SetMessage( const WideString& message )
        {
            message_ = message;
        }
        double PanAngle( ) const
        {
            return panAngle_;
        }
        void SetPanAngle( double panAngle )
        {
            panAngle_ = panAngle;
        }
        double TiltAngle( ) const
        {
            return tiltAngle_;
        }
        void SetTiltAngle( double tiltAngle )
        {
            tiltAngle_ = tiltAngle;
        }
        double FocalLength( ) const
        {
            return focalLength_;
        }
        void SetFocalLength( double focalLength )
        {
            focalLength_ = focalLength;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, CAMERA_FIELD_ID, camera_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, COMMAND_FIELD_ID, command_);
            Bind(statement, STATUS_FIELD_ID, status_);
            Bind(statement, PANANGLE_FIELD_ID, panAngle_);
            Bind(statement, TILTANGLE_FIELD_ID, tiltAngle_);
            Bind(statement, FOCALLENGTH_FIELD_ID, focalLength_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            message_ = statement.GetWideString(MESSAGE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CameraCommandReply );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, camera_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, command_);
            WriteColumnValue( destination, status_);
            WriteColumnValue( destination, message_);
            WriteColumnValue( destination, panAngle_);
            WriteColumnValue( destination, tiltAngle_);
            WriteColumnValue( destination, focalLength_);
        }
        void AssignTo( Types::CameraCommandReplyObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetCamera( camera_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetCommand( command_ );
            destination.SetStatus( status_ );
            destination.SetMessage( message_ );
            destination.SetPanAngle( panAngle_ );
            destination.SetTiltAngle( tiltAngle_ );
            destination.SetFocalLength( focalLength_ );
        }
    };

    using SimpleCameraCommandReplyDataReader = SimpleColumnDataReader<CameraCommandReplyColumnData>;

    class CameraConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid camera_;
        DateTime timestamp_;
        Types::CameraControlProtocol cameraControlProtocol_ = Types::CameraControlProtocol::Unknown;
        FixedDBWideString<127> cameraURL_;
        FixedDBWideString<127> configurationURL_;
        FixedDBWideString<127> userName_;
        FixedDBWideString<127> password_;
        bool useRtspUriOverride_ = false;
        FixedDBWideString<127> rtspUriOverride_;
        double latitude_ = 0.0;
        double longitude_ = 0.0;
        double altitude_ = 0.0;
        bool useRelativePosition_ = false;
        Types::CameraPanTiltMode panTiltMode_ = Types::CameraPanTiltMode::Unknown;
        double minTiltAngle_ = 0.0;
        double maxTiltAngle_ = 0.0;
        double minTiltScaleAngle_ = 0.0;
        double maxTiltScaleAngle_ = 0.0;
        bool useReverseTiltAngle_ = false;
        bool useReverseNormalizedTiltAngle_ = false;
        double minTiltVelocity_ = 0.0;
        double maxTiltVelocity_ = 0.0;
        double minTiltSpeed_ = 0.0;
        double maxTiltSpeed_ = 0.0;
        double minPanAngle_ = 0.0;
        double maxPanAngle_ = 0.0;
        double minPanScaleAngle_ = 0.0;
        double maxPanScaleAngle_ = 0.0;
        bool useReversePanAngle_ = false;
        bool useReverseNormalizedPanAngle_ = false;
        double minPanVelocity_ = 0.0;
        double maxPanVelocity_ = 0.0;
        double minPanSpeed_ = 0.0;
        double maxPanSpeed_ = 0.0;
        Types::CameraFocalLengthMode focalLengthMode_ = Types::CameraFocalLengthMode::Unknown;
        double minFocalLength_ = 0.0;
        double maxFocalLength_ = 0.0;
        double minFocalLengthScale_ = 0.0;
        double maxFocalLengthScale_ = 0.0;
        double minZoomVelocity_ = 0.0;
        double maxZoomVelocity_ = 0.0;
        double minZoomSpeed_ = 0.0;
        double maxZoomSpeed_ = 0.0;
        double imageSensorWidth_ = 0.0;
        double imageSensorHeight_ = 0.0;
        double homePanAngle_ = 0.0;
        double homeTiltAngle_ = 0.0;
        double homeFocalLength_ = 0.0;
        double panOffset_ = 0.0;
        double tiltOffset_ = 0.0;
        double aimAltitude_ = 0.0;
        double minimumTargetWidth_ = 0.0;
        TimeSpan targetLockTimeout_;
        TimeSpan updateStatusInterval_;
        TimeSpan readTimeout_;
        TimeSpan moveCommandStatusDelay_;
        FixedDBWideString<127> ptzProfileName_;
        FixedDBWideString<127> ptzConfigurationToken_;
        FixedDBWideString<127> videoSourceToken_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT CAMERA_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT CAMERACONTROLPROTOCOL_FIELD_ID = 5;
        static constexpr SQLUSMALLINT CAMERAURL_FIELD_ID = 6;
        static constexpr SQLUSMALLINT CONFIGURATIONURL_FIELD_ID = 7;
        static constexpr SQLUSMALLINT USERNAME_FIELD_ID = 8;
        static constexpr SQLUSMALLINT PASSWORD_FIELD_ID = 9;
        static constexpr SQLUSMALLINT USERTSPURIOVERRIDE_FIELD_ID = 10;
        static constexpr SQLUSMALLINT RTSPURIOVERRIDE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 13;
        static constexpr SQLUSMALLINT ALTITUDE_FIELD_ID = 14;
        static constexpr SQLUSMALLINT USERELATIVEPOSITION_FIELD_ID = 15;
        static constexpr SQLUSMALLINT PANTILTMODE_FIELD_ID = 16;
        static constexpr SQLUSMALLINT MINTILTANGLE_FIELD_ID = 17;
        static constexpr SQLUSMALLINT MAXTILTANGLE_FIELD_ID = 18;
        static constexpr SQLUSMALLINT MINTILTSCALEANGLE_FIELD_ID = 19;
        static constexpr SQLUSMALLINT MAXTILTSCALEANGLE_FIELD_ID = 20;
        static constexpr SQLUSMALLINT USEREVERSETILTANGLE_FIELD_ID = 21;
        static constexpr SQLUSMALLINT USEREVERSENORMALIZEDTILTANGLE_FIELD_ID = 22;
        static constexpr SQLUSMALLINT MINTILTVELOCITY_FIELD_ID = 23;
        static constexpr SQLUSMALLINT MAXTILTVELOCITY_FIELD_ID = 24;
        static constexpr SQLUSMALLINT MINTILTSPEED_FIELD_ID = 25;
        static constexpr SQLUSMALLINT MAXTILTSPEED_FIELD_ID = 26;
        static constexpr SQLUSMALLINT MINPANANGLE_FIELD_ID = 27;
        static constexpr SQLUSMALLINT MAXPANANGLE_FIELD_ID = 28;
        static constexpr SQLUSMALLINT MINPANSCALEANGLE_FIELD_ID = 29;
        static constexpr SQLUSMALLINT MAXPANSCALEANGLE_FIELD_ID = 30;
        static constexpr SQLUSMALLINT USEREVERSEPANANGLE_FIELD_ID = 31;
        static constexpr SQLUSMALLINT USEREVERSENORMALIZEDPANANGLE_FIELD_ID = 32;
        static constexpr SQLUSMALLINT MINPANVELOCITY_FIELD_ID = 33;
        static constexpr SQLUSMALLINT MAXPANVELOCITY_FIELD_ID = 34;
        static constexpr SQLUSMALLINT MINPANSPEED_FIELD_ID = 35;
        static constexpr SQLUSMALLINT MAXPANSPEED_FIELD_ID = 36;
        static constexpr SQLUSMALLINT FOCALLENGTHMODE_FIELD_ID = 37;
        static constexpr SQLUSMALLINT MINFOCALLENGTH_FIELD_ID = 38;
        static constexpr SQLUSMALLINT MAXFOCALLENGTH_FIELD_ID = 39;
        static constexpr SQLUSMALLINT MINFOCALLENGTHSCALE_FIELD_ID = 40;
        static constexpr SQLUSMALLINT MAXFOCALLENGTHSCALE_FIELD_ID = 41;
        static constexpr SQLUSMALLINT MINZOOMVELOCITY_FIELD_ID = 42;
        static constexpr SQLUSMALLINT MAXZOOMVELOCITY_FIELD_ID = 43;
        static constexpr SQLUSMALLINT MINZOOMSPEED_FIELD_ID = 44;
        static constexpr SQLUSMALLINT MAXZOOMSPEED_FIELD_ID = 45;
        static constexpr SQLUSMALLINT IMAGESENSORWIDTH_FIELD_ID = 46;
        static constexpr SQLUSMALLINT IMAGESENSORHEIGHT_FIELD_ID = 47;
        static constexpr SQLUSMALLINT HOMEPANANGLE_FIELD_ID = 48;
        static constexpr SQLUSMALLINT HOMETILTANGLE_FIELD_ID = 49;
        static constexpr SQLUSMALLINT HOMEFOCALLENGTH_FIELD_ID = 50;
        static constexpr SQLUSMALLINT PANOFFSET_FIELD_ID = 51;
        static constexpr SQLUSMALLINT TILTOFFSET_FIELD_ID = 52;
        static constexpr SQLUSMALLINT AIMALTITUDE_FIELD_ID = 53;
        static constexpr SQLUSMALLINT MINIMUMTARGETWIDTH_FIELD_ID = 54;
        static constexpr SQLUSMALLINT TARGETLOCKTIMEOUT_FIELD_ID = 55;
        static constexpr SQLUSMALLINT UPDATESTATUSINTERVAL_FIELD_ID = 56;
        static constexpr SQLUSMALLINT READTIMEOUT_FIELD_ID = 57;
        static constexpr SQLUSMALLINT MOVECOMMANDSTATUSDELAY_FIELD_ID = 58;
        static constexpr SQLUSMALLINT PTZPROFILENAME_FIELD_ID = 59;
        static constexpr SQLUSMALLINT PTZCONFIGURATIONTOKEN_FIELD_ID = 60;
        static constexpr SQLUSMALLINT VIDEOSOURCETOKEN_FIELD_ID = 61;

        CameraConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Camera( ) const
        {
            return camera_;
        }
        void SetCamera( const Guid& camera )
        {
            camera_ = camera;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::CameraControlProtocol CameraControlProtocol( ) const
        {
            return cameraControlProtocol_;
        }
        void SetCameraControlProtocol( Types::CameraControlProtocol cameraControlProtocol )
        {
            cameraControlProtocol_ = cameraControlProtocol;
        }
        const FixedDBWideString<127>& CameraURL( ) const
        {
            return cameraURL_;
        }
        void SetCameraURL( const FixedDBWideString<127>& cameraURL )
        {
            cameraURL_ = cameraURL;
        }
        const FixedDBWideString<127>& ConfigurationURL( ) const
        {
            return configurationURL_;
        }
        void SetConfigurationURL( const FixedDBWideString<127>& configurationURL )
        {
            configurationURL_ = configurationURL;
        }
        const FixedDBWideString<127>& UserName( ) const
        {
            return userName_;
        }
        void SetUserName( const FixedDBWideString<127>& userName )
        {
            userName_ = userName;
        }
        const FixedDBWideString<127>& Password( ) const
        {
            return password_;
        }
        void SetPassword( const FixedDBWideString<127>& password )
        {
            password_ = password;
        }
        bool UseRtspUriOverride( ) const
        {
            return useRtspUriOverride_;
        }
        void SetUseRtspUriOverride( bool useRtspUriOverride )
        {
            useRtspUriOverride_ = useRtspUriOverride;
        }
        const FixedDBWideString<127>& RtspUriOverride( ) const
        {
            return rtspUriOverride_;
        }
        void SetRtspUriOverride( const FixedDBWideString<127>& rtspUriOverride )
        {
            rtspUriOverride_ = rtspUriOverride;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Altitude( ) const
        {
            return altitude_;
        }
        void SetAltitude( double altitude )
        {
            altitude_ = altitude;
        }
        bool UseRelativePosition( ) const
        {
            return useRelativePosition_;
        }
        void SetUseRelativePosition( bool useRelativePosition )
        {
            useRelativePosition_ = useRelativePosition;
        }
        Types::CameraPanTiltMode PanTiltMode( ) const
        {
            return panTiltMode_;
        }
        void SetPanTiltMode( Types::CameraPanTiltMode panTiltMode )
        {
            panTiltMode_ = panTiltMode;
        }
        double MinTiltAngle( ) const
        {
            return minTiltAngle_;
        }
        void SetMinTiltAngle( double minTiltAngle )
        {
            minTiltAngle_ = minTiltAngle;
        }
        double MaxTiltAngle( ) const
        {
            return maxTiltAngle_;
        }
        void SetMaxTiltAngle( double maxTiltAngle )
        {
            maxTiltAngle_ = maxTiltAngle;
        }
        double MinTiltScaleAngle( ) const
        {
            return minTiltScaleAngle_;
        }
        void SetMinTiltScaleAngle( double minTiltScaleAngle )
        {
            minTiltScaleAngle_ = minTiltScaleAngle;
        }
        double MaxTiltScaleAngle( ) const
        {
            return maxTiltScaleAngle_;
        }
        void SetMaxTiltScaleAngle( double maxTiltScaleAngle )
        {
            maxTiltScaleAngle_ = maxTiltScaleAngle;
        }
        bool UseReverseTiltAngle( ) const
        {
            return useReverseTiltAngle_;
        }
        void SetUseReverseTiltAngle( bool useReverseTiltAngle )
        {
            useReverseTiltAngle_ = useReverseTiltAngle;
        }
        bool UseReverseNormalizedTiltAngle( ) const
        {
            return useReverseNormalizedTiltAngle_;
        }
        void SetUseReverseNormalizedTiltAngle( bool useReverseNormalizedTiltAngle )
        {
            useReverseNormalizedTiltAngle_ = useReverseNormalizedTiltAngle;
        }
        double MinTiltVelocity( ) const
        {
            return minTiltVelocity_;
        }
        void SetMinTiltVelocity( double minTiltVelocity )
        {
            minTiltVelocity_ = minTiltVelocity;
        }
        double MaxTiltVelocity( ) const
        {
            return maxTiltVelocity_;
        }
        void SetMaxTiltVelocity( double maxTiltVelocity )
        {
            maxTiltVelocity_ = maxTiltVelocity;
        }
        double MinTiltSpeed( ) const
        {
            return minTiltSpeed_;
        }
        void SetMinTiltSpeed( double minTiltSpeed )
        {
            minTiltSpeed_ = minTiltSpeed;
        }
        double MaxTiltSpeed( ) const
        {
            return maxTiltSpeed_;
        }
        void SetMaxTiltSpeed( double maxTiltSpeed )
        {
            maxTiltSpeed_ = maxTiltSpeed;
        }
        double MinPanAngle( ) const
        {
            return minPanAngle_;
        }
        void SetMinPanAngle( double minPanAngle )
        {
            minPanAngle_ = minPanAngle;
        }
        double MaxPanAngle( ) const
        {
            return maxPanAngle_;
        }
        void SetMaxPanAngle( double maxPanAngle )
        {
            maxPanAngle_ = maxPanAngle;
        }
        double MinPanScaleAngle( ) const
        {
            return minPanScaleAngle_;
        }
        void SetMinPanScaleAngle( double minPanScaleAngle )
        {
            minPanScaleAngle_ = minPanScaleAngle;
        }
        double MaxPanScaleAngle( ) const
        {
            return maxPanScaleAngle_;
        }
        void SetMaxPanScaleAngle( double maxPanScaleAngle )
        {
            maxPanScaleAngle_ = maxPanScaleAngle;
        }
        bool UseReversePanAngle( ) const
        {
            return useReversePanAngle_;
        }
        void SetUseReversePanAngle( bool useReversePanAngle )
        {
            useReversePanAngle_ = useReversePanAngle;
        }
        bool UseReverseNormalizedPanAngle( ) const
        {
            return useReverseNormalizedPanAngle_;
        }
        void SetUseReverseNormalizedPanAngle( bool useReverseNormalizedPanAngle )
        {
            useReverseNormalizedPanAngle_ = useReverseNormalizedPanAngle;
        }
        double MinPanVelocity( ) const
        {
            return minPanVelocity_;
        }
        void SetMinPanVelocity( double minPanVelocity )
        {
            minPanVelocity_ = minPanVelocity;
        }
        double MaxPanVelocity( ) const
        {
            return maxPanVelocity_;
        }
        void SetMaxPanVelocity( double maxPanVelocity )
        {
            maxPanVelocity_ = maxPanVelocity;
        }
        double MinPanSpeed( ) const
        {
            return minPanSpeed_;
        }
        void SetMinPanSpeed( double minPanSpeed )
        {
            minPanSpeed_ = minPanSpeed;
        }
        double MaxPanSpeed( ) const
        {
            return maxPanSpeed_;
        }
        void SetMaxPanSpeed( double maxPanSpeed )
        {
            maxPanSpeed_ = maxPanSpeed;
        }
        Types::CameraFocalLengthMode FocalLengthMode( ) const
        {
            return focalLengthMode_;
        }
        void SetFocalLengthMode( Types::CameraFocalLengthMode focalLengthMode )
        {
            focalLengthMode_ = focalLengthMode;
        }
        double MinFocalLength( ) const
        {
            return minFocalLength_;
        }
        void SetMinFocalLength( double minFocalLength )
        {
            minFocalLength_ = minFocalLength;
        }
        double MaxFocalLength( ) const
        {
            return maxFocalLength_;
        }
        void SetMaxFocalLength( double maxFocalLength )
        {
            maxFocalLength_ = maxFocalLength;
        }
        double MinFocalLengthScale( ) const
        {
            return minFocalLengthScale_;
        }
        void SetMinFocalLengthScale( double minFocalLengthScale )
        {
            minFocalLengthScale_ = minFocalLengthScale;
        }
        double MaxFocalLengthScale( ) const
        {
            return maxFocalLengthScale_;
        }
        void SetMaxFocalLengthScale( double maxFocalLengthScale )
        {
            maxFocalLengthScale_ = maxFocalLengthScale;
        }
        double MinZoomVelocity( ) const
        {
            return minZoomVelocity_;
        }
        void SetMinZoomVelocity( double minZoomVelocity )
        {
            minZoomVelocity_ = minZoomVelocity;
        }
        double MaxZoomVelocity( ) const
        {
            return maxZoomVelocity_;
        }
        void SetMaxZoomVelocity( double maxZoomVelocity )
        {
            maxZoomVelocity_ = maxZoomVelocity;
        }
        double MinZoomSpeed( ) const
        {
            return minZoomSpeed_;
        }
        void SetMinZoomSpeed( double minZoomSpeed )
        {
            minZoomSpeed_ = minZoomSpeed;
        }
        double MaxZoomSpeed( ) const
        {
            return maxZoomSpeed_;
        }
        void SetMaxZoomSpeed( double maxZoomSpeed )
        {
            maxZoomSpeed_ = maxZoomSpeed;
        }
        double ImageSensorWidth( ) const
        {
            return imageSensorWidth_;
        }
        void SetImageSensorWidth( double imageSensorWidth )
        {
            imageSensorWidth_ = imageSensorWidth;
        }
        double ImageSensorHeight( ) const
        {
            return imageSensorHeight_;
        }
        void SetImageSensorHeight( double imageSensorHeight )
        {
            imageSensorHeight_ = imageSensorHeight;
        }
        double HomePanAngle( ) const
        {
            return homePanAngle_;
        }
        void SetHomePanAngle( double homePanAngle )
        {
            homePanAngle_ = homePanAngle;
        }
        double HomeTiltAngle( ) const
        {
            return homeTiltAngle_;
        }
        void SetHomeTiltAngle( double homeTiltAngle )
        {
            homeTiltAngle_ = homeTiltAngle;
        }
        double HomeFocalLength( ) const
        {
            return homeFocalLength_;
        }
        void SetHomeFocalLength( double homeFocalLength )
        {
            homeFocalLength_ = homeFocalLength;
        }
        double PanOffset( ) const
        {
            return panOffset_;
        }
        void SetPanOffset( double panOffset )
        {
            panOffset_ = panOffset;
        }
        double TiltOffset( ) const
        {
            return tiltOffset_;
        }
        void SetTiltOffset( double tiltOffset )
        {
            tiltOffset_ = tiltOffset;
        }
        double AimAltitude( ) const
        {
            return aimAltitude_;
        }
        void SetAimAltitude( double aimAltitude )
        {
            aimAltitude_ = aimAltitude;
        }
        double MinimumTargetWidth( ) const
        {
            return minimumTargetWidth_;
        }
        void SetMinimumTargetWidth( double minimumTargetWidth )
        {
            minimumTargetWidth_ = minimumTargetWidth;
        }
        const TimeSpan& TargetLockTimeout( ) const
        {
            return targetLockTimeout_;
        }
        void SetTargetLockTimeout( const TimeSpan& targetLockTimeout )
        {
            targetLockTimeout_ = targetLockTimeout;
        }
        const TimeSpan& UpdateStatusInterval( ) const
        {
            return updateStatusInterval_;
        }
        void SetUpdateStatusInterval( const TimeSpan& updateStatusInterval )
        {
            updateStatusInterval_ = updateStatusInterval;
        }
        const TimeSpan& ReadTimeout( ) const
        {
            return readTimeout_;
        }
        void SetReadTimeout( const TimeSpan& readTimeout )
        {
            readTimeout_ = readTimeout;
        }
        const TimeSpan& MoveCommandStatusDelay( ) const
        {
            return moveCommandStatusDelay_;
        }
        void SetMoveCommandStatusDelay( const TimeSpan& moveCommandStatusDelay )
        {
            moveCommandStatusDelay_ = moveCommandStatusDelay;
        }
        const FixedDBWideString<127>& PtzProfileName( ) const
        {
            return ptzProfileName_;
        }
        void SetPtzProfileName( const FixedDBWideString<127>& ptzProfileName )
        {
            ptzProfileName_ = ptzProfileName;
        }
        const FixedDBWideString<127>& PtzConfigurationToken( ) const
        {
            return ptzConfigurationToken_;
        }
        void SetPtzConfigurationToken( const FixedDBWideString<127>& ptzConfigurationToken )
        {
            ptzConfigurationToken_ = ptzConfigurationToken;
        }
        const FixedDBWideString<127>& VideoSourceToken( ) const
        {
            return videoSourceToken_;
        }
        void SetVideoSourceToken( const FixedDBWideString<127>& videoSourceToken )
        {
            videoSourceToken_ = videoSourceToken;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, CAMERA_FIELD_ID, camera_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, CAMERACONTROLPROTOCOL_FIELD_ID, cameraControlProtocol_);
            Bind(statement, CAMERAURL_FIELD_ID, cameraURL_);
            Bind(statement, CONFIGURATIONURL_FIELD_ID, configurationURL_);
            Bind(statement, USERNAME_FIELD_ID, userName_);
            Bind(statement, PASSWORD_FIELD_ID, password_);
            Bind(statement, USERTSPURIOVERRIDE_FIELD_ID, useRtspUriOverride_);
            Bind(statement, RTSPURIOVERRIDE_FIELD_ID, rtspUriOverride_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, ALTITUDE_FIELD_ID, altitude_);
            Bind(statement, USERELATIVEPOSITION_FIELD_ID, useRelativePosition_);
            Bind(statement, PANTILTMODE_FIELD_ID, panTiltMode_);
            Bind(statement, MINTILTANGLE_FIELD_ID, minTiltAngle_);
            Bind(statement, MAXTILTANGLE_FIELD_ID, maxTiltAngle_);
            Bind(statement, MINTILTSCALEANGLE_FIELD_ID, minTiltScaleAngle_);
            Bind(statement, MAXTILTSCALEANGLE_FIELD_ID, maxTiltScaleAngle_);
            Bind(statement, USEREVERSETILTANGLE_FIELD_ID, useReverseTiltAngle_);
            Bind(statement, USEREVERSENORMALIZEDTILTANGLE_FIELD_ID, useReverseNormalizedTiltAngle_);
            Bind(statement, MINTILTVELOCITY_FIELD_ID, minTiltVelocity_);
            Bind(statement, MAXTILTVELOCITY_FIELD_ID, maxTiltVelocity_);
            Bind(statement, MINTILTSPEED_FIELD_ID, minTiltSpeed_);
            Bind(statement, MAXTILTSPEED_FIELD_ID, maxTiltSpeed_);
            Bind(statement, MINPANANGLE_FIELD_ID, minPanAngle_);
            Bind(statement, MAXPANANGLE_FIELD_ID, maxPanAngle_);
            Bind(statement, MINPANSCALEANGLE_FIELD_ID, minPanScaleAngle_);
            Bind(statement, MAXPANSCALEANGLE_FIELD_ID, maxPanScaleAngle_);
            Bind(statement, USEREVERSEPANANGLE_FIELD_ID, useReversePanAngle_);
            Bind(statement, USEREVERSENORMALIZEDPANANGLE_FIELD_ID, useReverseNormalizedPanAngle_);
            Bind(statement, MINPANVELOCITY_FIELD_ID, minPanVelocity_);
            Bind(statement, MAXPANVELOCITY_FIELD_ID, maxPanVelocity_);
            Bind(statement, MINPANSPEED_FIELD_ID, minPanSpeed_);
            Bind(statement, MAXPANSPEED_FIELD_ID, maxPanSpeed_);
            Bind(statement, FOCALLENGTHMODE_FIELD_ID, focalLengthMode_);
            Bind(statement, MINFOCALLENGTH_FIELD_ID, minFocalLength_);
            Bind(statement, MAXFOCALLENGTH_FIELD_ID, maxFocalLength_);
            Bind(statement, MINFOCALLENGTHSCALE_FIELD_ID, minFocalLengthScale_);
            Bind(statement, MAXFOCALLENGTHSCALE_FIELD_ID, maxFocalLengthScale_);
            Bind(statement, MINZOOMVELOCITY_FIELD_ID, minZoomVelocity_);
            Bind(statement, MAXZOOMVELOCITY_FIELD_ID, maxZoomVelocity_);
            Bind(statement, MINZOOMSPEED_FIELD_ID, minZoomSpeed_);
            Bind(statement, MAXZOOMSPEED_FIELD_ID, maxZoomSpeed_);
            Bind(statement, IMAGESENSORWIDTH_FIELD_ID, imageSensorWidth_);
            Bind(statement, IMAGESENSORHEIGHT_FIELD_ID, imageSensorHeight_);
            Bind(statement, HOMEPANANGLE_FIELD_ID, homePanAngle_);
            Bind(statement, HOMETILTANGLE_FIELD_ID, homeTiltAngle_);
            Bind(statement, HOMEFOCALLENGTH_FIELD_ID, homeFocalLength_);
            Bind(statement, PANOFFSET_FIELD_ID, panOffset_);
            Bind(statement, TILTOFFSET_FIELD_ID, tiltOffset_);
            Bind(statement, AIMALTITUDE_FIELD_ID, aimAltitude_);
            Bind(statement, MINIMUMTARGETWIDTH_FIELD_ID, minimumTargetWidth_);
            Bind(statement, TARGETLOCKTIMEOUT_FIELD_ID, targetLockTimeout_);
            Bind(statement, UPDATESTATUSINTERVAL_FIELD_ID, updateStatusInterval_);
            Bind(statement, READTIMEOUT_FIELD_ID, readTimeout_);
            Bind(statement, MOVECOMMANDSTATUSDELAY_FIELD_ID, moveCommandStatusDelay_);
            Bind(statement, PTZPROFILENAME_FIELD_ID, ptzProfileName_);
            Bind(statement, PTZCONFIGURATIONTOKEN_FIELD_ID, ptzConfigurationToken_);
            Bind(statement, VIDEOSOURCETOKEN_FIELD_ID, videoSourceToken_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CameraConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, camera_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, cameraControlProtocol_);
            WriteColumnValue( destination, cameraURL_);
            WriteColumnValue( destination, configurationURL_);
            WriteColumnValue( destination, userName_);
            WriteColumnValue( destination, password_);
            WriteColumnValue( destination, useRtspUriOverride_);
            WriteColumnValue( destination, rtspUriOverride_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, altitude_);
            WriteColumnValue( destination, useRelativePosition_);
            WriteColumnValue( destination, panTiltMode_);
            WriteColumnValue( destination, minTiltAngle_);
            WriteColumnValue( destination, maxTiltAngle_);
            WriteColumnValue( destination, minTiltScaleAngle_);
            WriteColumnValue( destination, maxTiltScaleAngle_);
            WriteColumnValue( destination, useReverseTiltAngle_);
            WriteColumnValue( destination, useReverseNormalizedTiltAngle_);
            WriteColumnValue( destination, minTiltVelocity_);
            WriteColumnValue( destination, maxTiltVelocity_);
            WriteColumnValue( destination, minTiltSpeed_);
            WriteColumnValue( destination, maxTiltSpeed_);
            WriteColumnValue( destination, minPanAngle_);
            WriteColumnValue( destination, maxPanAngle_);
            WriteColumnValue( destination, minPanScaleAngle_);
            WriteColumnValue( destination, maxPanScaleAngle_);
            WriteColumnValue( destination, useReversePanAngle_);
            WriteColumnValue( destination, useReverseNormalizedPanAngle_);
            WriteColumnValue( destination, minPanVelocity_);
            WriteColumnValue( destination, maxPanVelocity_);
            WriteColumnValue( destination, minPanSpeed_);
            WriteColumnValue( destination, maxPanSpeed_);
            WriteColumnValue( destination, focalLengthMode_);
            WriteColumnValue( destination, minFocalLength_);
            WriteColumnValue( destination, maxFocalLength_);
            WriteColumnValue( destination, minFocalLengthScale_);
            WriteColumnValue( destination, maxFocalLengthScale_);
            WriteColumnValue( destination, minZoomVelocity_);
            WriteColumnValue( destination, maxZoomVelocity_);
            WriteColumnValue( destination, minZoomSpeed_);
            WriteColumnValue( destination, maxZoomSpeed_);
            WriteColumnValue( destination, imageSensorWidth_);
            WriteColumnValue( destination, imageSensorHeight_);
            WriteColumnValue( destination, homePanAngle_);
            WriteColumnValue( destination, homeTiltAngle_);
            WriteColumnValue( destination, homeFocalLength_);
            WriteColumnValue( destination, panOffset_);
            WriteColumnValue( destination, tiltOffset_);
            WriteColumnValue( destination, aimAltitude_);
            WriteColumnValue( destination, minimumTargetWidth_);
            WriteColumnValue( destination, targetLockTimeout_);
            WriteColumnValue( destination, updateStatusInterval_);
            WriteColumnValue( destination, readTimeout_);
            WriteColumnValue( destination, moveCommandStatusDelay_);
            WriteColumnValue( destination, ptzProfileName_);
            WriteColumnValue( destination, ptzConfigurationToken_);
            WriteColumnValue( destination, videoSourceToken_);
        }
        void AssignTo( Types::CameraConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetCamera( camera_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetCameraControlProtocol( cameraControlProtocol_ );
            destination.SetCameraURL( cameraURL_ );
            destination.SetConfigurationURL( configurationURL_ );
            destination.SetUserName( userName_ );
            destination.SetPassword( password_ );
            destination.SetUseRtspUriOverride( useRtspUriOverride_ );
            destination.SetRtspUriOverride( rtspUriOverride_ );
            destination.SetLatitude( latitude_ );
            destination.SetLongitude( longitude_ );
            destination.SetAltitude( altitude_ );
            destination.SetUseRelativePosition( useRelativePosition_ );
            destination.SetPanTiltMode( panTiltMode_ );
            destination.SetMinTiltAngle( minTiltAngle_ );
            destination.SetMaxTiltAngle( maxTiltAngle_ );
            destination.SetMinTiltScaleAngle( minTiltScaleAngle_ );
            destination.SetMaxTiltScaleAngle( maxTiltScaleAngle_ );
            destination.SetUseReverseTiltAngle( useReverseTiltAngle_ );
            destination.SetUseReverseNormalizedTiltAngle( useReverseNormalizedTiltAngle_ );
            destination.SetMinTiltVelocity( minTiltVelocity_ );
            destination.SetMaxTiltVelocity( maxTiltVelocity_ );
            destination.SetMinTiltSpeed( minTiltSpeed_ );
            destination.SetMaxTiltSpeed( maxTiltSpeed_ );
            destination.SetMinPanAngle( minPanAngle_ );
            destination.SetMaxPanAngle( maxPanAngle_ );
            destination.SetMinPanScaleAngle( minPanScaleAngle_ );
            destination.SetMaxPanScaleAngle( maxPanScaleAngle_ );
            destination.SetUseReversePanAngle( useReversePanAngle_ );
            destination.SetUseReverseNormalizedPanAngle( useReverseNormalizedPanAngle_ );
            destination.SetMinPanVelocity( minPanVelocity_ );
            destination.SetMaxPanVelocity( maxPanVelocity_ );
            destination.SetMinPanSpeed( minPanSpeed_ );
            destination.SetMaxPanSpeed( maxPanSpeed_ );
            destination.SetFocalLengthMode( focalLengthMode_ );
            destination.SetMinFocalLength( minFocalLength_ );
            destination.SetMaxFocalLength( maxFocalLength_ );
            destination.SetMinFocalLengthScale( minFocalLengthScale_ );
            destination.SetMaxFocalLengthScale( maxFocalLengthScale_ );
            destination.SetMinZoomVelocity( minZoomVelocity_ );
            destination.SetMaxZoomVelocity( maxZoomVelocity_ );
            destination.SetMinZoomSpeed( minZoomSpeed_ );
            destination.SetMaxZoomSpeed( maxZoomSpeed_ );
            destination.SetImageSensorWidth( imageSensorWidth_ );
            destination.SetImageSensorHeight( imageSensorHeight_ );
            destination.SetHomePanAngle( homePanAngle_ );
            destination.SetHomeTiltAngle( homeTiltAngle_ );
            destination.SetHomeFocalLength( homeFocalLength_ );
            destination.SetPanOffset( panOffset_ );
            destination.SetTiltOffset( tiltOffset_ );
            destination.SetAimAltitude( aimAltitude_ );
            destination.SetMinimumTargetWidth( minimumTargetWidth_ );
            destination.SetTargetLockTimeout( targetLockTimeout_ );
            destination.SetUpdateStatusInterval( updateStatusInterval_ );
            destination.SetReadTimeout( readTimeout_ );
            destination.SetMoveCommandStatusDelay( moveCommandStatusDelay_ );
            destination.SetPtzProfileName( ptzProfileName_ );
            destination.SetPtzConfigurationToken( ptzConfigurationToken_ );
            destination.SetVideoSourceToken( videoSourceToken_ );
        }
    };

    using SimpleCameraConfigurationDataReader = SimpleColumnDataReader<CameraConfigurationColumnData>;

    class CameraPanCalibrationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid camera_;
        DateTime timestamp_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT CAMERA_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;

        CameraPanCalibrationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraPanCalibration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Camera( ) const
        {
            return camera_;
        }
        void SetCamera( const Guid& camera )
        {
            camera_ = camera;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, CAMERA_FIELD_ID, camera_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CameraPanCalibration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, camera_);
            WriteColumnValue( destination, timestamp_);
        }
        void AssignTo( Types::CameraPanCalibrationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetCamera( camera_ );
            destination.SetTimestamp( timestamp_ );
        }
    };

    using SimpleCameraPanCalibrationDataReader = SimpleColumnDataReader<CameraPanCalibrationColumnData>;

    class CameraPanCalibrationValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid panCalibration_;
        double panAngle_ = 0.0;
        double panOffset_ = 0.0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT PANCALIBRATION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT PANANGLE_FIELD_ID = 4;
        static constexpr SQLUSMALLINT PANOFFSET_FIELD_ID = 5;

        CameraPanCalibrationValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraPanCalibrationValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& PanCalibration( ) const
        {
            return panCalibration_;
        }
        void SetPanCalibration( const Guid& panCalibration )
        {
            panCalibration_ = panCalibration;
        }
        double PanAngle( ) const
        {
            return panAngle_;
        }
        void SetPanAngle( double panAngle )
        {
            panAngle_ = panAngle;
        }
        double PanOffset( ) const
        {
            return panOffset_;
        }
        void SetPanOffset( double panOffset )
        {
            panOffset_ = panOffset;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, PANCALIBRATION_FIELD_ID, panCalibration_);
            Bind(statement, PANANGLE_FIELD_ID, panAngle_);
            Bind(statement, PANOFFSET_FIELD_ID, panOffset_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CameraPanCalibrationValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, panCalibration_);
            WriteColumnValue( destination, panAngle_);
            WriteColumnValue( destination, panOffset_);
        }
        void AssignTo( Types::CameraPanCalibrationValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetPanCalibration( panCalibration_ );
            destination.SetPanAngle( panAngle_ );
            destination.SetPanOffset( panOffset_ );
        }
    };

    using SimpleCameraPanCalibrationValueDataReader = SimpleColumnDataReader<CameraPanCalibrationValueColumnData>;

    class CameraStatusColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid camera_;
        Guid track_;
        DateTime timestamp_;
        Types::CameraPanTiltMode positionPanTiltMode_ = Types::CameraPanTiltMode::Unknown;
        double panAngle_ = 0.0;
        double tiltAngle_ = 0.0;
        Types::CameraFocalLengthMode positionFocalLengthMode_ = Types::CameraFocalLengthMode::Unknown;
        double focalLength_ = 0.0;
        Types::CameraMoveStatus panTiltMoveStatus_ = Types::CameraMoveStatus::Unknown;
        Types::CameraMoveStatus zoomMoveStatus_ = Types::CameraMoveStatus::Unknown;
        Types::CameraPanTiltMode velocityPanTiltMode_ = Types::CameraPanTiltMode::Unknown;
        DBDouble panVelocity_;
        DBDouble tiltVelocity_;
        Types::CameraFocalLengthMode velocityFocalLengthMode_ = Types::CameraFocalLengthMode::Unknown;
        DBDouble zoomVelocity_;
        Types::CameraFeatures activeFeatures_ = Types::CameraFeatures::None;
        WideString error_;
        SQLLEN errorLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT CAMERA_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TRACK_FIELD_ID = 4;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 5;
        static constexpr SQLUSMALLINT POSITIONPANTILTMODE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT PANANGLE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT TILTANGLE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT POSITIONFOCALLENGTHMODE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT FOCALLENGTH_FIELD_ID = 10;
        static constexpr SQLUSMALLINT PANTILTMOVESTATUS_FIELD_ID = 11;
        static constexpr SQLUSMALLINT ZOOMMOVESTATUS_FIELD_ID = 12;
        static constexpr SQLUSMALLINT VELOCITYPANTILTMODE_FIELD_ID = 13;
        static constexpr SQLUSMALLINT PANVELOCITY_FIELD_ID = 14;
        static constexpr SQLUSMALLINT TILTVELOCITY_FIELD_ID = 15;
        static constexpr SQLUSMALLINT VELOCITYFOCALLENGTHMODE_FIELD_ID = 16;
        static constexpr SQLUSMALLINT ZOOMVELOCITY_FIELD_ID = 17;
        static constexpr SQLUSMALLINT ACTIVEFEATURES_FIELD_ID = 18;
        static constexpr SQLUSMALLINT ERROR_FIELD_ID = 19;

        CameraStatusColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraStatus;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Camera( ) const
        {
            return camera_;
        }
        void SetCamera( const Guid& camera )
        {
            camera_ = camera;
        }
        const Guid& Track( ) const
        {
            return track_;
        }
        void SetTrack( const Guid& track )
        {
            track_ = track;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::CameraPanTiltMode PositionPanTiltMode( ) const
        {
            return positionPanTiltMode_;
        }
        void SetPositionPanTiltMode( Types::CameraPanTiltMode positionPanTiltMode )
        {
            positionPanTiltMode_ = positionPanTiltMode;
        }
        double PanAngle( ) const
        {
            return panAngle_;
        }
        void SetPanAngle( double panAngle )
        {
            panAngle_ = panAngle;
        }
        double TiltAngle( ) const
        {
            return tiltAngle_;
        }
        void SetTiltAngle( double tiltAngle )
        {
            tiltAngle_ = tiltAngle;
        }
        Types::CameraFocalLengthMode PositionFocalLengthMode( ) const
        {
            return positionFocalLengthMode_;
        }
        void SetPositionFocalLengthMode( Types::CameraFocalLengthMode positionFocalLengthMode )
        {
            positionFocalLengthMode_ = positionFocalLengthMode;
        }
        double FocalLength( ) const
        {
            return focalLength_;
        }
        void SetFocalLength( double focalLength )
        {
            focalLength_ = focalLength;
        }
        Types::CameraMoveStatus PanTiltMoveStatus( ) const
        {
            return panTiltMoveStatus_;
        }
        void SetPanTiltMoveStatus( Types::CameraMoveStatus panTiltMoveStatus )
        {
            panTiltMoveStatus_ = panTiltMoveStatus;
        }
        Types::CameraMoveStatus ZoomMoveStatus( ) const
        {
            return zoomMoveStatus_;
        }
        void SetZoomMoveStatus( Types::CameraMoveStatus zoomMoveStatus )
        {
            zoomMoveStatus_ = zoomMoveStatus;
        }
        Types::CameraPanTiltMode VelocityPanTiltMode( ) const
        {
            return velocityPanTiltMode_;
        }
        void SetVelocityPanTiltMode( Types::CameraPanTiltMode velocityPanTiltMode )
        {
            velocityPanTiltMode_ = velocityPanTiltMode;
        }
        const DBDouble& PanVelocity( ) const
        {
            return panVelocity_;
        }
        void SetPanVelocity( const DBDouble& panVelocity )
        {
            panVelocity_ = panVelocity;
        }
        const DBDouble& TiltVelocity( ) const
        {
            return tiltVelocity_;
        }
        void SetTiltVelocity( const DBDouble& tiltVelocity )
        {
            tiltVelocity_ = tiltVelocity;
        }
        Types::CameraFocalLengthMode VelocityFocalLengthMode( ) const
        {
            return velocityFocalLengthMode_;
        }
        void SetVelocityFocalLengthMode( Types::CameraFocalLengthMode velocityFocalLengthMode )
        {
            velocityFocalLengthMode_ = velocityFocalLengthMode;
        }
        const DBDouble& ZoomVelocity( ) const
        {
            return zoomVelocity_;
        }
        void SetZoomVelocity( const DBDouble& zoomVelocity )
        {
            zoomVelocity_ = zoomVelocity;
        }
        Types::CameraFeatures ActiveFeatures( ) const
        {
            return activeFeatures_;
        }
        void SetActiveFeatures( Types::CameraFeatures activeFeatures )
        {
            activeFeatures_ = activeFeatures;
        }
        const WideString& Error( ) const
        {
            return error_;
        }
        void SetError( const WideString& error )
        {
            error_ = error;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, CAMERA_FIELD_ID, camera_);
            Bind(statement, TRACK_FIELD_ID, track_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, POSITIONPANTILTMODE_FIELD_ID, positionPanTiltMode_);
            Bind(statement, PANANGLE_FIELD_ID, panAngle_);
            Bind(statement, TILTANGLE_FIELD_ID, tiltAngle_);
            Bind(statement, POSITIONFOCALLENGTHMODE_FIELD_ID, positionFocalLengthMode_);
            Bind(statement, FOCALLENGTH_FIELD_ID, focalLength_);
            Bind(statement, PANTILTMOVESTATUS_FIELD_ID, panTiltMoveStatus_);
            Bind(statement, ZOOMMOVESTATUS_FIELD_ID, zoomMoveStatus_);
            Bind(statement, VELOCITYPANTILTMODE_FIELD_ID, velocityPanTiltMode_);
            Bind(statement, PANVELOCITY_FIELD_ID, panVelocity_);
            Bind(statement, TILTVELOCITY_FIELD_ID, tiltVelocity_);
            Bind(statement, VELOCITYFOCALLENGTHMODE_FIELD_ID, velocityFocalLengthMode_);
            Bind(statement, ZOOMVELOCITY_FIELD_ID, zoomVelocity_);
            Bind(statement, ACTIVEFEATURES_FIELD_ID, activeFeatures_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            error_ = statement.GetWideString(ERROR_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CameraStatus );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, camera_);
            WriteColumnValue( destination, track_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, positionPanTiltMode_);
            WriteColumnValue( destination, panAngle_);
            WriteColumnValue( destination, tiltAngle_);
            WriteColumnValue( destination, positionFocalLengthMode_);
            WriteColumnValue( destination, focalLength_);
            WriteColumnValue( destination, panTiltMoveStatus_);
            WriteColumnValue( destination, zoomMoveStatus_);
            WriteColumnValue( destination, velocityPanTiltMode_);
            WriteColumnValue( destination, panVelocity_);
            WriteColumnValue( destination, tiltVelocity_);
            WriteColumnValue( destination, velocityFocalLengthMode_);
            WriteColumnValue( destination, zoomVelocity_);
            WriteColumnValue( destination, activeFeatures_);
            WriteColumnValue( destination, error_);
        }
        void AssignTo( Types::CameraStatusObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetCamera( camera_ );
            destination.SetTrack( track_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetPositionPanTiltMode( positionPanTiltMode_ );
            destination.SetPanAngle( panAngle_ );
            destination.SetTiltAngle( tiltAngle_ );
            destination.SetPositionFocalLengthMode( positionFocalLengthMode_ );
            destination.SetFocalLength( focalLength_ );
            destination.SetPanTiltMoveStatus( panTiltMoveStatus_ );
            destination.SetZoomMoveStatus( zoomMoveStatus_ );
            destination.SetVelocityPanTiltMode( velocityPanTiltMode_ );
            destination.SetPanVelocity( panVelocity_ );
            destination.SetTiltVelocity( tiltVelocity_ );
            destination.SetVelocityFocalLengthMode( velocityFocalLengthMode_ );
            destination.SetZoomVelocity( zoomVelocity_ );
            destination.SetActiveFeatures( activeFeatures_ );
            destination.SetError( error_ );
        }
    };

    using SimpleCameraStatusDataReader = SimpleColumnDataReader<CameraStatusColumnData>;

    class CameraTiltCalibrationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid camera_;
        DateTime timestamp_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT CAMERA_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;

        CameraTiltCalibrationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraTiltCalibration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Camera( ) const
        {
            return camera_;
        }
        void SetCamera( const Guid& camera )
        {
            camera_ = camera;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, CAMERA_FIELD_ID, camera_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CameraTiltCalibration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, camera_);
            WriteColumnValue( destination, timestamp_);
        }
        void AssignTo( Types::CameraTiltCalibrationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetCamera( camera_ );
            destination.SetTimestamp( timestamp_ );
        }
    };

    using SimpleCameraTiltCalibrationDataReader = SimpleColumnDataReader<CameraTiltCalibrationColumnData>;

    class CameraTiltCalibrationValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid tiltCalibration_;
        double panAngle_ = 0.0;
        double tiltOffset_ = 0.0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TILTCALIBRATION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT PANANGLE_FIELD_ID = 4;
        static constexpr SQLUSMALLINT TILTOFFSET_FIELD_ID = 5;

        CameraTiltCalibrationValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraTiltCalibrationValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& TiltCalibration( ) const
        {
            return tiltCalibration_;
        }
        void SetTiltCalibration( const Guid& tiltCalibration )
        {
            tiltCalibration_ = tiltCalibration;
        }
        double PanAngle( ) const
        {
            return panAngle_;
        }
        void SetPanAngle( double panAngle )
        {
            panAngle_ = panAngle;
        }
        double TiltOffset( ) const
        {
            return tiltOffset_;
        }
        void SetTiltOffset( double tiltOffset )
        {
            tiltOffset_ = tiltOffset;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TILTCALIBRATION_FIELD_ID, tiltCalibration_);
            Bind(statement, PANANGLE_FIELD_ID, panAngle_);
            Bind(statement, TILTOFFSET_FIELD_ID, tiltOffset_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CameraTiltCalibrationValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, tiltCalibration_);
            WriteColumnValue( destination, panAngle_);
            WriteColumnValue( destination, tiltOffset_);
        }
        void AssignTo( Types::CameraTiltCalibrationValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTiltCalibration( tiltCalibration_ );
            destination.SetPanAngle( panAngle_ );
            destination.SetTiltOffset( tiltOffset_ );
        }
    };

    using SimpleCameraTiltCalibrationValueDataReader = SimpleColumnDataReader<CameraTiltCalibrationValueColumnData>;

    class CameraZoomCalibrationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid camera_;
        DateTime timestamp_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT CAMERA_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;

        CameraZoomCalibrationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraZoomCalibration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Camera( ) const
        {
            return camera_;
        }
        void SetCamera( const Guid& camera )
        {
            camera_ = camera;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, CAMERA_FIELD_ID, camera_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CameraZoomCalibration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, camera_);
            WriteColumnValue( destination, timestamp_);
        }
        void AssignTo( Types::CameraZoomCalibrationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetCamera( camera_ );
            destination.SetTimestamp( timestamp_ );
        }
    };

    using SimpleCameraZoomCalibrationDataReader = SimpleColumnDataReader<CameraZoomCalibrationColumnData>;

    class CameraZoomCalibrationValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid zoomCalibration_;
        double focalLength_ = 0.0;
        double focalLengthOffset_ = 0.0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ZOOMCALIBRATION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT FOCALLENGTH_FIELD_ID = 4;
        static constexpr SQLUSMALLINT FOCALLENGTHOFFSET_FIELD_ID = 5;

        CameraZoomCalibrationValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraZoomCalibrationValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& ZoomCalibration( ) const
        {
            return zoomCalibration_;
        }
        void SetZoomCalibration( const Guid& zoomCalibration )
        {
            zoomCalibration_ = zoomCalibration;
        }
        double FocalLength( ) const
        {
            return focalLength_;
        }
        void SetFocalLength( double focalLength )
        {
            focalLength_ = focalLength;
        }
        double FocalLengthOffset( ) const
        {
            return focalLengthOffset_;
        }
        void SetFocalLengthOffset( double focalLengthOffset )
        {
            focalLengthOffset_ = focalLengthOffset;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, ZOOMCALIBRATION_FIELD_ID, zoomCalibration_);
            Bind(statement, FOCALLENGTH_FIELD_ID, focalLength_);
            Bind(statement, FOCALLENGTHOFFSET_FIELD_ID, focalLengthOffset_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CameraZoomCalibrationValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, zoomCalibration_);
            WriteColumnValue( destination, focalLength_);
            WriteColumnValue( destination, focalLengthOffset_);
        }
        void AssignTo( Types::CameraZoomCalibrationValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetZoomCalibration( zoomCalibration_ );
            destination.SetFocalLength( focalLength_ );
            destination.SetFocalLengthOffset( focalLengthOffset_ );
        }
    };

    using SimpleCameraZoomCalibrationValueDataReader = SimpleColumnDataReader<CameraZoomCalibrationValueColumnData>;

    class CatalogElementColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
        Guid catalog_;
        FixedDBWideString<127> name_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT CATALOG_FIELD_ID = 4;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 5;

        CatalogElementColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CatalogElement;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Catalog( ) const
        {
            return catalog_;
        }
        void SetCatalog( const Guid& catalog )
        {
            catalog_ = catalog;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, CATALOG_FIELD_ID, catalog_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CatalogElement );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, catalog_);
            WriteColumnValue( destination, name_);
        }
        void AssignTo( Types::CatalogElementObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetCatalog( catalog_ );
            destination.SetName( name_ );
        }
    };

    using SimpleCatalogElementDataReader = SimpleColumnDataReader<CatalogElementColumnData>;

    class CatalogColumnData : public CatalogElementColumnData
    {
    public:
        using Base = CatalogElementColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        CatalogColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Catalog;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::CatalogObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CatalogElementObject&>( destination ) );
        }
    };

    using SimpleCatalogDataReader = SimpleColumnDataReader<CatalogColumnData>;

    class ElementColumnData : public CatalogElementColumnData
    {
        Guid elementType_;
    public:
        using Base = CatalogElementColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ELEMENTTYPE_FIELD_ID = 5;

        ElementColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Element;
        }

        const Guid& ElementType( ) const
        {
            return elementType_;
        }
        void SetElementType( const Guid& elementType )
        {
            elementType_ = elementType;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, ELEMENTTYPE_FIELD_ID, elementType_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, elementType_);
        }
        void AssignTo( Types::ElementObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::CatalogElementObject&>( destination ) );
            destination.SetElementType( elementType_ );
        }
    };

    using SimpleElementDataReader = SimpleColumnDataReader<ElementColumnData>;

    class CollectionInfoColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Int64 count_ = 0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT COUNT_FIELD_ID = 3;

        CollectionInfoColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CollectionInfo;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        Int64 Count( ) const
        {
            return count_;
        }
        void SetCount( Int64 count )
        {
            count_ = count;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, COUNT_FIELD_ID, count_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CollectionInfo );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, count_);
        }
        void AssignTo( Types::CollectionInfoObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetCount( count_ );
        }
    };

    using SimpleCollectionInfoDataReader = SimpleColumnDataReader<CollectionInfoColumnData>;

    class CountryColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        FixedDBWideString<127> name_;
        Int32 code_ = 0;
        FixedDBWideString<2> alpha2_;
        FixedDBWideString<3> alpha3_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT CODE_FIELD_ID = 4;
        static constexpr SQLUSMALLINT ALPHA2_FIELD_ID = 5;
        static constexpr SQLUSMALLINT ALPHA3_FIELD_ID = 6;

        CountryColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Country;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        Int32 Code( ) const
        {
            return code_;
        }
        void SetCode( Int32 code )
        {
            code_ = code;
        }
        const FixedDBWideString<2>& Alpha2( ) const
        {
            return alpha2_;
        }
        void SetAlpha2( const FixedDBWideString<2>& alpha2 )
        {
            alpha2_ = alpha2;
        }
        const FixedDBWideString<3>& Alpha3( ) const
        {
            return alpha3_;
        }
        void SetAlpha3( const FixedDBWideString<3>& alpha3 )
        {
            alpha3_ = alpha3;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, CODE_FIELD_ID, code_);
            Bind(statement, ALPHA2_FIELD_ID, alpha2_);
            Bind(statement, ALPHA3_FIELD_ID, alpha3_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::Country );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, code_);
            WriteColumnValue( destination, alpha2_);
            WriteColumnValue( destination, alpha3_);
        }
        void AssignTo( Types::CountryObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetName( name_ );
            destination.SetCode( code_ );
            destination.SetAlpha2( alpha2_ );
            destination.SetAlpha3( alpha3_ );
        }
    };

    using SimpleCountryDataReader = SimpleColumnDataReader<CountryColumnData>;

    class CursorInfoColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Int32 typeCode_ = 0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TYPECODE_FIELD_ID = 3;

        CursorInfoColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CursorInfo;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        Int32 TypeCode( ) const
        {
            return typeCode_;
        }
        void SetTypeCode( Int32 typeCode )
        {
            typeCode_ = typeCode;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TYPECODE_FIELD_ID, typeCode_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::CursorInfo );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, typeCode_);
        }
        void AssignTo( Types::CursorInfoObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTypeCode( typeCode_ );
        }
    };

    using SimpleCursorInfoDataReader = SimpleColumnDataReader<CursorInfoColumnData>;

    class DateTimeTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBDateTime value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        DateTimeTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DateTimeTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBDateTime& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBDateTime& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::DateTimeTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::DateTimeTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleDateTimeTimeseriesValueDataReader = SimpleColumnDataReader<DateTimeTimeseriesValueColumnData>;

    class DeviceHostColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        FixedDBWideString<127> name_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;

        DeviceHostColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DeviceHost;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::DeviceHost );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, name_);
        }
        void AssignTo( Types::DeviceHostObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetName( name_ );
        }
    };

    using SimpleDeviceHostDataReader = SimpleColumnDataReader<DeviceHostColumnData>;

    class DeviceHostConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid host_;
        DateTime timestamp_;
        FixedDBWideString<127> hostname_;
        Int32 port_ = 0;
        FixedDBWideString<127> queueName_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT HOST_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT HOSTNAME_FIELD_ID = 5;
        static constexpr SQLUSMALLINT PORT_FIELD_ID = 6;
        static constexpr SQLUSMALLINT QUEUENAME_FIELD_ID = 7;

        DeviceHostConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DeviceHostConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Host( ) const
        {
            return host_;
        }
        void SetHost( const Guid& host )
        {
            host_ = host;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const FixedDBWideString<127>& Hostname( ) const
        {
            return hostname_;
        }
        void SetHostname( const FixedDBWideString<127>& hostname )
        {
            hostname_ = hostname;
        }
        Int32 Port( ) const
        {
            return port_;
        }
        void SetPort( Int32 port )
        {
            port_ = port;
        }
        const FixedDBWideString<127>& QueueName( ) const
        {
            return queueName_;
        }
        void SetQueueName( const FixedDBWideString<127>& queueName )
        {
            queueName_ = queueName;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, HOST_FIELD_ID, host_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, HOSTNAME_FIELD_ID, hostname_);
            Bind(statement, PORT_FIELD_ID, port_);
            Bind(statement, QUEUENAME_FIELD_ID, queueName_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::DeviceHostConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, host_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, hostname_);
            WriteColumnValue( destination, port_);
            WriteColumnValue( destination, queueName_);
        }
        void AssignTo( Types::DeviceHostConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetHost( host_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetHostname( hostname_ );
            destination.SetPort( port_ );
            destination.SetQueueName( queueName_ );
        }
    };

    using SimpleDeviceHostConfigurationDataReader = SimpleColumnDataReader<DeviceHostConfigurationColumnData>;

    class DoubleTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBDouble value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        DoubleTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DoubleTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBDouble& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBDouble& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::DoubleTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::DoubleTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleDoubleTimeseriesValueDataReader = SimpleColumnDataReader<DoubleTimeseriesValueColumnData>;

    class FacilityTypeColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        FixedDBWideString<127> name_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;

        FacilityTypeColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::FacilityType;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::FacilityType );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, name_);
        }
        void AssignTo( Types::FacilityTypeObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetName( name_ );
        }
    };

    using SimpleFacilityTypeDataReader = SimpleColumnDataReader<FacilityTypeColumnData>;

    class GeoPosition2DTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBDouble latitude_;
        DBDouble longitude_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 6;

        GeoPosition2DTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GeoPosition2DTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBDouble& Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( const DBDouble& latitude )
        {
            latitude_ = latitude;
        }
        const DBDouble& Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( const DBDouble& longitude )
        {
            longitude_ = longitude;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::GeoPosition2DTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, longitude_);
        }
        void AssignTo( Types::GeoPosition2DTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetLatitude( latitude_ );
            destination.SetLongitude( longitude_ );
        }
    };

    using SimpleGeoPosition2DTimeseriesValueDataReader = SimpleColumnDataReader<GeoPosition2DTimeseriesValueColumnData>;

    class GeoPosition3DTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBDouble latitude_;
        DBDouble longitude_;
        DBDouble altitude_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT ALTITUDE_FIELD_ID = 7;

        GeoPosition3DTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GeoPosition3DTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBDouble& Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( const DBDouble& latitude )
        {
            latitude_ = latitude;
        }
        const DBDouble& Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( const DBDouble& longitude )
        {
            longitude_ = longitude;
        }
        const DBDouble& Altitude( ) const
        {
            return altitude_;
        }
        void SetAltitude( const DBDouble& altitude )
        {
            altitude_ = altitude;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, ALTITUDE_FIELD_ID, altitude_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::GeoPosition3DTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, altitude_);
        }
        void AssignTo( Types::GeoPosition3DTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetLatitude( latitude_ );
            destination.SetLongitude( longitude_ );
            destination.SetAltitude( altitude_ );
        }
    };

    using SimpleGeoPosition3DTimeseriesValueDataReader = SimpleColumnDataReader<GeoPosition3DTimeseriesValueColumnData>;

    class GNSSDeviceCommandColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid gNSSDevice_;
        DateTime timestamp_;
        Types::DeviceCommandSourceType deviceCommandSourceType_ = Types::DeviceCommandSourceType::Unknown;
        Guid deviceCommandSourceId_;
        Guid reply_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT GNSSDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCETYPE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCEID_FIELD_ID = 6;
        static constexpr SQLUSMALLINT REPLY_FIELD_ID = 7;

        GNSSDeviceCommandColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GNSSDeviceCommand;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& GNSSDevice( ) const
        {
            return gNSSDevice_;
        }
        void SetGNSSDevice( const Guid& gNSSDevice )
        {
            gNSSDevice_ = gNSSDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::DeviceCommandSourceType DeviceCommandSourceType( ) const
        {
            return deviceCommandSourceType_;
        }
        void SetDeviceCommandSourceType( Types::DeviceCommandSourceType deviceCommandSourceType )
        {
            deviceCommandSourceType_ = deviceCommandSourceType;
        }
        const Guid& DeviceCommandSourceId( ) const
        {
            return deviceCommandSourceId_;
        }
        void SetDeviceCommandSourceId( const Guid& deviceCommandSourceId )
        {
            deviceCommandSourceId_ = deviceCommandSourceId;
        }
        const Guid& Reply( ) const
        {
            return reply_;
        }
        void SetReply( const Guid& reply )
        {
            reply_ = reply;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, GNSSDEVICE_FIELD_ID, gNSSDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEVICECOMMANDSOURCETYPE_FIELD_ID, deviceCommandSourceType_);
            Bind(statement, DEVICECOMMANDSOURCEID_FIELD_ID, deviceCommandSourceId_);
            Bind(statement, REPLY_FIELD_ID, reply_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::GNSSDeviceCommand );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, gNSSDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, deviceCommandSourceType_);
            WriteColumnValue( destination, deviceCommandSourceId_);
            WriteColumnValue( destination, reply_);
        }
        void AssignTo( Types::GNSSDeviceCommandObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetGNSSDevice( gNSSDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDeviceCommandSourceType( deviceCommandSourceType_ );
            destination.SetDeviceCommandSourceId( deviceCommandSourceId_ );
            destination.SetReply( reply_ );
        }
    };

    using SimpleGNSSDeviceCommandDataReader = SimpleColumnDataReader<GNSSDeviceCommandColumnData>;

    class GNSSDeviceCommandReplyColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid gNSSDevice_;
        DateTime timestamp_;
        Guid command_;
        Types::DeviceCommandReplyStatus status_ = Types::DeviceCommandReplyStatus::Unknown;
        WideString message_;
        SQLLEN messageLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT GNSSDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT COMMAND_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STATUS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MESSAGE_FIELD_ID = 7;

        GNSSDeviceCommandReplyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GNSSDeviceCommandReply;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& GNSSDevice( ) const
        {
            return gNSSDevice_;
        }
        void SetGNSSDevice( const Guid& gNSSDevice )
        {
            gNSSDevice_ = gNSSDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const Guid& Command( ) const
        {
            return command_;
        }
        void SetCommand( const Guid& command )
        {
            command_ = command;
        }
        Types::DeviceCommandReplyStatus Status( ) const
        {
            return status_;
        }
        void SetStatus( Types::DeviceCommandReplyStatus status )
        {
            status_ = status;
        }
        const WideString& Message( ) const
        {
            return message_;
        }
        void SetMessage( const WideString& message )
        {
            message_ = message;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, GNSSDEVICE_FIELD_ID, gNSSDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, COMMAND_FIELD_ID, command_);
            Bind(statement, STATUS_FIELD_ID, status_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            message_ = statement.GetWideString(MESSAGE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::GNSSDeviceCommandReply );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, gNSSDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, command_);
            WriteColumnValue( destination, status_);
            WriteColumnValue( destination, message_);
        }
        void AssignTo( Types::GNSSDeviceCommandReplyObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetGNSSDevice( gNSSDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetCommand( command_ );
            destination.SetStatus( status_ );
            destination.SetMessage( message_ );
        }
    };

    using SimpleGNSSDeviceCommandReplyDataReader = SimpleColumnDataReader<GNSSDeviceCommandReplyColumnData>;

    class GNSSDeviceConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid gNSSDevice_;
        DateTime timestamp_;
        double defaultLatitude_ = 0.0;
        double defaultLongitude_ = 0.0;
        double defaultAltitude_ = 0.0;
        double latitudeOffset_ = 0.0;
        double longitudeOffset_ = 0.0;
        double altitudeOffset_ = 0.0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT GNSSDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT DEFAULTLATITUDE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEFAULTLONGITUDE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT DEFAULTALTITUDE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT LATITUDEOFFSET_FIELD_ID = 8;
        static constexpr SQLUSMALLINT LONGITUDEOFFSET_FIELD_ID = 9;
        static constexpr SQLUSMALLINT ALTITUDEOFFSET_FIELD_ID = 10;

        GNSSDeviceConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GNSSDeviceConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& GNSSDevice( ) const
        {
            return gNSSDevice_;
        }
        void SetGNSSDevice( const Guid& gNSSDevice )
        {
            gNSSDevice_ = gNSSDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        double DefaultLatitude( ) const
        {
            return defaultLatitude_;
        }
        void SetDefaultLatitude( double defaultLatitude )
        {
            defaultLatitude_ = defaultLatitude;
        }
        double DefaultLongitude( ) const
        {
            return defaultLongitude_;
        }
        void SetDefaultLongitude( double defaultLongitude )
        {
            defaultLongitude_ = defaultLongitude;
        }
        double DefaultAltitude( ) const
        {
            return defaultAltitude_;
        }
        void SetDefaultAltitude( double defaultAltitude )
        {
            defaultAltitude_ = defaultAltitude;
        }
        double LatitudeOffset( ) const
        {
            return latitudeOffset_;
        }
        void SetLatitudeOffset( double latitudeOffset )
        {
            latitudeOffset_ = latitudeOffset;
        }
        double LongitudeOffset( ) const
        {
            return longitudeOffset_;
        }
        void SetLongitudeOffset( double longitudeOffset )
        {
            longitudeOffset_ = longitudeOffset;
        }
        double AltitudeOffset( ) const
        {
            return altitudeOffset_;
        }
        void SetAltitudeOffset( double altitudeOffset )
        {
            altitudeOffset_ = altitudeOffset;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, GNSSDEVICE_FIELD_ID, gNSSDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEFAULTLATITUDE_FIELD_ID, defaultLatitude_);
            Bind(statement, DEFAULTLONGITUDE_FIELD_ID, defaultLongitude_);
            Bind(statement, DEFAULTALTITUDE_FIELD_ID, defaultAltitude_);
            Bind(statement, LATITUDEOFFSET_FIELD_ID, latitudeOffset_);
            Bind(statement, LONGITUDEOFFSET_FIELD_ID, longitudeOffset_);
            Bind(statement, ALTITUDEOFFSET_FIELD_ID, altitudeOffset_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::GNSSDeviceConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, gNSSDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, defaultLatitude_);
            WriteColumnValue( destination, defaultLongitude_);
            WriteColumnValue( destination, defaultAltitude_);
            WriteColumnValue( destination, latitudeOffset_);
            WriteColumnValue( destination, longitudeOffset_);
            WriteColumnValue( destination, altitudeOffset_);
        }
        void AssignTo( Types::GNSSDeviceConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetGNSSDevice( gNSSDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDefaultLatitude( defaultLatitude_ );
            destination.SetDefaultLongitude( defaultLongitude_ );
            destination.SetDefaultAltitude( defaultAltitude_ );
            destination.SetLatitudeOffset( latitudeOffset_ );
            destination.SetLongitudeOffset( longitudeOffset_ );
            destination.SetAltitudeOffset( altitudeOffset_ );
        }
    };

    using SimpleGNSSDeviceConfigurationDataReader = SimpleColumnDataReader<GNSSDeviceConfigurationColumnData>;

    class GuidTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBGuid value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        GuidTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GuidTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBGuid& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBGuid& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::GuidTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::GuidTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleGuidTimeseriesValueDataReader = SimpleColumnDataReader<GuidTimeseriesValueColumnData>;

    class GyroDeviceCommandColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid gyroDevice_;
        DateTime timestamp_;
        Types::DeviceCommandSourceType deviceCommandSourceType_ = Types::DeviceCommandSourceType::Unknown;
        Guid deviceCommandSourceId_;
        Guid reply_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT GYRODEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCETYPE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCEID_FIELD_ID = 6;
        static constexpr SQLUSMALLINT REPLY_FIELD_ID = 7;

        GyroDeviceCommandColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GyroDeviceCommand;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& GyroDevice( ) const
        {
            return gyroDevice_;
        }
        void SetGyroDevice( const Guid& gyroDevice )
        {
            gyroDevice_ = gyroDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::DeviceCommandSourceType DeviceCommandSourceType( ) const
        {
            return deviceCommandSourceType_;
        }
        void SetDeviceCommandSourceType( Types::DeviceCommandSourceType deviceCommandSourceType )
        {
            deviceCommandSourceType_ = deviceCommandSourceType;
        }
        const Guid& DeviceCommandSourceId( ) const
        {
            return deviceCommandSourceId_;
        }
        void SetDeviceCommandSourceId( const Guid& deviceCommandSourceId )
        {
            deviceCommandSourceId_ = deviceCommandSourceId;
        }
        const Guid& Reply( ) const
        {
            return reply_;
        }
        void SetReply( const Guid& reply )
        {
            reply_ = reply;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, GYRODEVICE_FIELD_ID, gyroDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEVICECOMMANDSOURCETYPE_FIELD_ID, deviceCommandSourceType_);
            Bind(statement, DEVICECOMMANDSOURCEID_FIELD_ID, deviceCommandSourceId_);
            Bind(statement, REPLY_FIELD_ID, reply_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::GyroDeviceCommand );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, gyroDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, deviceCommandSourceType_);
            WriteColumnValue( destination, deviceCommandSourceId_);
            WriteColumnValue( destination, reply_);
        }
        void AssignTo( Types::GyroDeviceCommandObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetGyroDevice( gyroDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDeviceCommandSourceType( deviceCommandSourceType_ );
            destination.SetDeviceCommandSourceId( deviceCommandSourceId_ );
            destination.SetReply( reply_ );
        }
    };

    using SimpleGyroDeviceCommandDataReader = SimpleColumnDataReader<GyroDeviceCommandColumnData>;

    class GyroDeviceCommandReplyColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid gyroDevice_;
        DateTime timestamp_;
        Guid command_;
        Types::DeviceCommandReplyStatus status_ = Types::DeviceCommandReplyStatus::Unknown;
        WideString message_;
        SQLLEN messageLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT GYRODEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT COMMAND_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STATUS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MESSAGE_FIELD_ID = 7;

        GyroDeviceCommandReplyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GyroDeviceCommandReply;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& GyroDevice( ) const
        {
            return gyroDevice_;
        }
        void SetGyroDevice( const Guid& gyroDevice )
        {
            gyroDevice_ = gyroDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const Guid& Command( ) const
        {
            return command_;
        }
        void SetCommand( const Guid& command )
        {
            command_ = command;
        }
        Types::DeviceCommandReplyStatus Status( ) const
        {
            return status_;
        }
        void SetStatus( Types::DeviceCommandReplyStatus status )
        {
            status_ = status;
        }
        const WideString& Message( ) const
        {
            return message_;
        }
        void SetMessage( const WideString& message )
        {
            message_ = message;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, GYRODEVICE_FIELD_ID, gyroDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, COMMAND_FIELD_ID, command_);
            Bind(statement, STATUS_FIELD_ID, status_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            message_ = statement.GetWideString(MESSAGE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::GyroDeviceCommandReply );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, gyroDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, command_);
            WriteColumnValue( destination, status_);
            WriteColumnValue( destination, message_);
        }
        void AssignTo( Types::GyroDeviceCommandReplyObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetGyroDevice( gyroDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetCommand( command_ );
            destination.SetStatus( status_ );
            destination.SetMessage( message_ );
        }
    };

    using SimpleGyroDeviceCommandReplyDataReader = SimpleColumnDataReader<GyroDeviceCommandReplyColumnData>;

    class GyroDeviceConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid gyroDevice_;
        DateTime timestamp_;
        double defaultHeadingTrueNorth_ = 0.0;
        double defaultMagneticTrueNorth_ = 0.0;
        double headingTrueNorthOffset_ = 0.0;
        double headingMagneticNorthOffset_ = 0.0;
        FixedDBWideString<64> pitchTransducerName_;
        FixedDBWideString<64> rollTransducerName_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT GYRODEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT DEFAULTHEADINGTRUENORTH_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEFAULTMAGNETICTRUENORTH_FIELD_ID = 6;
        static constexpr SQLUSMALLINT HEADINGTRUENORTHOFFSET_FIELD_ID = 7;
        static constexpr SQLUSMALLINT HEADINGMAGNETICNORTHOFFSET_FIELD_ID = 8;
        static constexpr SQLUSMALLINT PITCHTRANSDUCERNAME_FIELD_ID = 9;
        static constexpr SQLUSMALLINT ROLLTRANSDUCERNAME_FIELD_ID = 10;

        GyroDeviceConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GyroDeviceConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& GyroDevice( ) const
        {
            return gyroDevice_;
        }
        void SetGyroDevice( const Guid& gyroDevice )
        {
            gyroDevice_ = gyroDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        double DefaultHeadingTrueNorth( ) const
        {
            return defaultHeadingTrueNorth_;
        }
        void SetDefaultHeadingTrueNorth( double defaultHeadingTrueNorth )
        {
            defaultHeadingTrueNorth_ = defaultHeadingTrueNorth;
        }
        double DefaultMagneticTrueNorth( ) const
        {
            return defaultMagneticTrueNorth_;
        }
        void SetDefaultMagneticTrueNorth( double defaultMagneticTrueNorth )
        {
            defaultMagneticTrueNorth_ = defaultMagneticTrueNorth;
        }
        double HeadingTrueNorthOffset( ) const
        {
            return headingTrueNorthOffset_;
        }
        void SetHeadingTrueNorthOffset( double headingTrueNorthOffset )
        {
            headingTrueNorthOffset_ = headingTrueNorthOffset;
        }
        double HeadingMagneticNorthOffset( ) const
        {
            return headingMagneticNorthOffset_;
        }
        void SetHeadingMagneticNorthOffset( double headingMagneticNorthOffset )
        {
            headingMagneticNorthOffset_ = headingMagneticNorthOffset;
        }
        const FixedDBWideString<64>& PitchTransducerName( ) const
        {
            return pitchTransducerName_;
        }
        void SetPitchTransducerName( const FixedDBWideString<64>& pitchTransducerName )
        {
            pitchTransducerName_ = pitchTransducerName;
        }
        const FixedDBWideString<64>& RollTransducerName( ) const
        {
            return rollTransducerName_;
        }
        void SetRollTransducerName( const FixedDBWideString<64>& rollTransducerName )
        {
            rollTransducerName_ = rollTransducerName;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, GYRODEVICE_FIELD_ID, gyroDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEFAULTHEADINGTRUENORTH_FIELD_ID, defaultHeadingTrueNorth_);
            Bind(statement, DEFAULTMAGNETICTRUENORTH_FIELD_ID, defaultMagneticTrueNorth_);
            Bind(statement, HEADINGTRUENORTHOFFSET_FIELD_ID, headingTrueNorthOffset_);
            Bind(statement, HEADINGMAGNETICNORTHOFFSET_FIELD_ID, headingMagneticNorthOffset_);
            Bind(statement, PITCHTRANSDUCERNAME_FIELD_ID, pitchTransducerName_);
            Bind(statement, ROLLTRANSDUCERNAME_FIELD_ID, rollTransducerName_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::GyroDeviceConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, gyroDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, defaultHeadingTrueNorth_);
            WriteColumnValue( destination, defaultMagneticTrueNorth_);
            WriteColumnValue( destination, headingTrueNorthOffset_);
            WriteColumnValue( destination, headingMagneticNorthOffset_);
            WriteColumnValue( destination, pitchTransducerName_);
            WriteColumnValue( destination, rollTransducerName_);
        }
        void AssignTo( Types::GyroDeviceConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetGyroDevice( gyroDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDefaultHeadingTrueNorth( defaultHeadingTrueNorth_ );
            destination.SetDefaultMagneticTrueNorth( defaultMagneticTrueNorth_ );
            destination.SetHeadingTrueNorthOffset( headingTrueNorthOffset_ );
            destination.SetHeadingMagneticNorthOffset( headingMagneticNorthOffset_ );
            destination.SetPitchTransducerName( pitchTransducerName_ );
            destination.SetRollTransducerName( rollTransducerName_ );
        }
    };

    using SimpleGyroDeviceConfigurationDataReader = SimpleColumnDataReader<GyroDeviceConfigurationColumnData>;

    class IdentityColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;

        IdentityColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Identity;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::Identity );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
        }
        void AssignTo( Types::IdentityObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
        }
    };

    using SimpleIdentityDataReader = SimpleColumnDataReader<IdentityColumnData>;

    class CallsignColumnData : public IdentityColumnData
    {
        FixedDBWideString<127> identifier_;
    public:
        using Base = IdentityColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT IDENTIFIER_FIELD_ID = 3;

        CallsignColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Callsign;
        }

        const FixedDBWideString<127>& Identifier( ) const
        {
            return identifier_;
        }
        void SetIdentifier( const FixedDBWideString<127>& identifier )
        {
            identifier_ = identifier;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, IDENTIFIER_FIELD_ID, identifier_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, identifier_);
        }
        void AssignTo( Types::CallsignObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::IdentityObject&>( destination ) );
            destination.SetIdentifier( identifier_ );
        }
    };

    using SimpleCallsignDataReader = SimpleColumnDataReader<CallsignColumnData>;

    class InternationalMaritimeOrganizationNumberColumnData : public IdentityColumnData
    {
        Int64 identifier_ = 0;
    public:
        using Base = IdentityColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT IDENTIFIER_FIELD_ID = 3;

        InternationalMaritimeOrganizationNumberColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::InternationalMaritimeOrganizationNumber;
        }

        Int64 Identifier( ) const
        {
            return identifier_;
        }
        void SetIdentifier( Int64 identifier )
        {
            identifier_ = identifier;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, IDENTIFIER_FIELD_ID, identifier_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, identifier_);
        }
        void AssignTo( Types::InternationalMaritimeOrganizationNumberObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::IdentityObject&>( destination ) );
            destination.SetIdentifier( identifier_ );
        }
    };

    using SimpleInternationalMaritimeOrganizationNumberDataReader = SimpleColumnDataReader<InternationalMaritimeOrganizationNumberColumnData>;

    class MaritimeMobileServiceIdentityColumnData : public IdentityColumnData
    {
        Int64 identifier_ = 0;
    public:
        using Base = IdentityColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT IDENTIFIER_FIELD_ID = 3;

        MaritimeMobileServiceIdentityColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::MaritimeMobileServiceIdentity;
        }

        Int64 Identifier( ) const
        {
            return identifier_;
        }
        void SetIdentifier( Int64 identifier )
        {
            identifier_ = identifier;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, IDENTIFIER_FIELD_ID, identifier_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, identifier_);
        }
        void AssignTo( Types::MaritimeMobileServiceIdentityObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::IdentityObject&>( destination ) );
            destination.SetIdentifier( identifier_ );
        }
    };

    using SimpleMaritimeMobileServiceIdentityDataReader = SimpleColumnDataReader<MaritimeMobileServiceIdentityColumnData>;

    class NameColumnData : public IdentityColumnData
    {
        FixedDBWideString<127> text_;
    public:
        using Base = IdentityColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TEXT_FIELD_ID = 3;

        NameColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Name;
        }

        const FixedDBWideString<127>& Text( ) const
        {
            return text_;
        }
        void SetText( const FixedDBWideString<127>& text )
        {
            text_ = text;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TEXT_FIELD_ID, text_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, text_);
        }
        void AssignTo( Types::NameObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::IdentityObject&>( destination ) );
            destination.SetText( text_ );
        }
    };

    using SimpleNameDataReader = SimpleColumnDataReader<NameColumnData>;

    class Int16TimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBInt16 value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        Int16TimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int16TimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBInt16& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBInt16& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::Int16TimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::Int16TimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleInt16TimeseriesValueDataReader = SimpleColumnDataReader<Int16TimeseriesValueColumnData>;

    class Int32TimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBInt32 value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        Int32TimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int32TimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBInt32& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBInt32& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::Int32TimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::Int32TimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleInt32TimeseriesValueDataReader = SimpleColumnDataReader<Int32TimeseriesValueColumnData>;

    class Int64TimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBInt64 value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        Int64TimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int64TimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBInt64& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBInt64& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::Int64TimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::Int64TimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleInt64TimeseriesValueDataReader = SimpleColumnDataReader<Int64TimeseriesValueColumnData>;

    class ItemColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;

        ItemColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Item;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::Item );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
        }
        void AssignTo( Types::ItemObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
        }
    };

    using SimpleItemDataReader = SimpleColumnDataReader<ItemColumnData>;

    class BaseStationColumnData : public ItemColumnData
    {
        FixedDBWideString<127> name_;
        Guid type_;
    public:
        using Base = ItemColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TYPE_FIELD_ID = 4;

        BaseStationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BaseStation;
        }

        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const Guid& Type( ) const
        {
            return type_;
        }
        void SetType( const Guid& type )
        {
            type_ = type;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, TYPE_FIELD_ID, type_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, type_);
        }
        void AssignTo( Types::BaseStationObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::ItemObject&>( destination ) );
            destination.SetName( name_ );
            destination.SetType( type_ );
        }
    };

    using SimpleBaseStationDataReader = SimpleColumnDataReader<BaseStationColumnData>;

    class DeviceColumnData : public ItemColumnData
    {
        Guid host_;
        FixedDBWideString<127> name_;
        WideString description_;
        SQLLEN descriptionLength_ = SQL_NULL_DATA;
        Guid enabledTimeseries_;
    public:
        using Base = ItemColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT HOST_FIELD_ID = 3;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 4;
        static constexpr SQLUSMALLINT ENABLEDTIMESERIES_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DESCRIPTION_FIELD_ID = 6;

        DeviceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Device;
        }

        const Guid& Host( ) const
        {
            return host_;
        }
        void SetHost( const Guid& host )
        {
            host_ = host;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const WideString& Description( ) const
        {
            return description_;
        }
        void SetDescription( const WideString& description )
        {
            description_ = description;
        }
        const Guid& EnabledTimeseries( ) const
        {
            return enabledTimeseries_;
        }
        void SetEnabledTimeseries( const Guid& enabledTimeseries )
        {
            enabledTimeseries_ = enabledTimeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, HOST_FIELD_ID, host_);
            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, ENABLEDTIMESERIES_FIELD_ID, enabledTimeseries_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            description_ = statement.GetWideString(DESCRIPTION_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, host_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, description_);
            WriteColumnValue( destination, enabledTimeseries_);
        }
        void AssignTo( Types::DeviceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::ItemObject&>( destination ) );
            destination.SetHost( host_ );
            destination.SetName( name_ );
            destination.SetDescription( description_ );
            destination.SetEnabledTimeseries( enabledTimeseries_ );
        }
    };

    using SimpleDeviceDataReader = SimpleColumnDataReader<DeviceColumnData>;

    class CameraDeviceColumnData : public DeviceColumnData
    {
    public:
        using Base = DeviceColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        CameraDeviceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CameraDevice;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::CameraDeviceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DeviceObject&>( destination ) );
        }
    };

    using SimpleCameraDeviceDataReader = SimpleColumnDataReader<CameraDeviceColumnData>;

    class GNSSDeviceColumnData : public DeviceColumnData
    {
        Guid latitudeTimeseries_;
        Guid longitudeTimeseries_;
        Guid altitudeTimeseries_;
    public:
        using Base = DeviceColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT LATITUDETIMESERIES_FIELD_ID = 7;
        static constexpr SQLUSMALLINT LONGITUDETIMESERIES_FIELD_ID = 8;
        static constexpr SQLUSMALLINT ALTITUDETIMESERIES_FIELD_ID = 9;

        GNSSDeviceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GNSSDevice;
        }

        const Guid& LatitudeTimeseries( ) const
        {
            return latitudeTimeseries_;
        }
        void SetLatitudeTimeseries( const Guid& latitudeTimeseries )
        {
            latitudeTimeseries_ = latitudeTimeseries;
        }
        const Guid& LongitudeTimeseries( ) const
        {
            return longitudeTimeseries_;
        }
        void SetLongitudeTimeseries( const Guid& longitudeTimeseries )
        {
            longitudeTimeseries_ = longitudeTimeseries;
        }
        const Guid& AltitudeTimeseries( ) const
        {
            return altitudeTimeseries_;
        }
        void SetAltitudeTimeseries( const Guid& altitudeTimeseries )
        {
            altitudeTimeseries_ = altitudeTimeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, LATITUDETIMESERIES_FIELD_ID, latitudeTimeseries_);
            Bind(statement, LONGITUDETIMESERIES_FIELD_ID, longitudeTimeseries_);
            Bind(statement, ALTITUDETIMESERIES_FIELD_ID, altitudeTimeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, latitudeTimeseries_);
            WriteColumnValue( destination, longitudeTimeseries_);
            WriteColumnValue( destination, altitudeTimeseries_);
        }
        void AssignTo( Types::GNSSDeviceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DeviceObject&>( destination ) );
            destination.SetLatitudeTimeseries( latitudeTimeseries_ );
            destination.SetLongitudeTimeseries( longitudeTimeseries_ );
            destination.SetAltitudeTimeseries( altitudeTimeseries_ );
        }
    };

    using SimpleGNSSDeviceDataReader = SimpleColumnDataReader<GNSSDeviceColumnData>;

    class GyroDeviceColumnData : public DeviceColumnData
    {
        Guid headingTrueNorthTimeseries_;
        Guid headingMagneticNorthTimeseries_;
        Guid pitchTimeseries_;
        Guid rateOfTurnTimeseries_;
        Guid rollTimeseries_;
        Guid courseTimeseries_;
        Guid speedTimeseries_;
        Guid gNSSDevice_;
    public:
        using Base = DeviceColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT HEADINGTRUENORTHTIMESERIES_FIELD_ID = 7;
        static constexpr SQLUSMALLINT HEADINGMAGNETICNORTHTIMESERIES_FIELD_ID = 8;
        static constexpr SQLUSMALLINT PITCHTIMESERIES_FIELD_ID = 9;
        static constexpr SQLUSMALLINT RATEOFTURNTIMESERIES_FIELD_ID = 10;
        static constexpr SQLUSMALLINT ROLLTIMESERIES_FIELD_ID = 11;
        static constexpr SQLUSMALLINT COURSETIMESERIES_FIELD_ID = 12;
        static constexpr SQLUSMALLINT SPEEDTIMESERIES_FIELD_ID = 13;
        static constexpr SQLUSMALLINT GNSSDEVICE_FIELD_ID = 14;

        GyroDeviceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GyroDevice;
        }

        const Guid& HeadingTrueNorthTimeseries( ) const
        {
            return headingTrueNorthTimeseries_;
        }
        void SetHeadingTrueNorthTimeseries( const Guid& headingTrueNorthTimeseries )
        {
            headingTrueNorthTimeseries_ = headingTrueNorthTimeseries;
        }
        const Guid& HeadingMagneticNorthTimeseries( ) const
        {
            return headingMagneticNorthTimeseries_;
        }
        void SetHeadingMagneticNorthTimeseries( const Guid& headingMagneticNorthTimeseries )
        {
            headingMagneticNorthTimeseries_ = headingMagneticNorthTimeseries;
        }
        const Guid& PitchTimeseries( ) const
        {
            return pitchTimeseries_;
        }
        void SetPitchTimeseries( const Guid& pitchTimeseries )
        {
            pitchTimeseries_ = pitchTimeseries;
        }
        const Guid& RateOfTurnTimeseries( ) const
        {
            return rateOfTurnTimeseries_;
        }
        void SetRateOfTurnTimeseries( const Guid& rateOfTurnTimeseries )
        {
            rateOfTurnTimeseries_ = rateOfTurnTimeseries;
        }
        const Guid& RollTimeseries( ) const
        {
            return rollTimeseries_;
        }
        void SetRollTimeseries( const Guid& rollTimeseries )
        {
            rollTimeseries_ = rollTimeseries;
        }
        const Guid& CourseTimeseries( ) const
        {
            return courseTimeseries_;
        }
        void SetCourseTimeseries( const Guid& courseTimeseries )
        {
            courseTimeseries_ = courseTimeseries;
        }
        const Guid& SpeedTimeseries( ) const
        {
            return speedTimeseries_;
        }
        void SetSpeedTimeseries( const Guid& speedTimeseries )
        {
            speedTimeseries_ = speedTimeseries;
        }
        const Guid& GNSSDevice( ) const
        {
            return gNSSDevice_;
        }
        void SetGNSSDevice( const Guid& gNSSDevice )
        {
            gNSSDevice_ = gNSSDevice;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, HEADINGTRUENORTHTIMESERIES_FIELD_ID, headingTrueNorthTimeseries_);
            Bind(statement, HEADINGMAGNETICNORTHTIMESERIES_FIELD_ID, headingMagneticNorthTimeseries_);
            Bind(statement, PITCHTIMESERIES_FIELD_ID, pitchTimeseries_);
            Bind(statement, RATEOFTURNTIMESERIES_FIELD_ID, rateOfTurnTimeseries_);
            Bind(statement, ROLLTIMESERIES_FIELD_ID, rollTimeseries_);
            Bind(statement, COURSETIMESERIES_FIELD_ID, courseTimeseries_);
            Bind(statement, SPEEDTIMESERIES_FIELD_ID, speedTimeseries_);
            Bind(statement, GNSSDEVICE_FIELD_ID, gNSSDevice_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, headingTrueNorthTimeseries_);
            WriteColumnValue( destination, headingMagneticNorthTimeseries_);
            WriteColumnValue( destination, pitchTimeseries_);
            WriteColumnValue( destination, rateOfTurnTimeseries_);
            WriteColumnValue( destination, rollTimeseries_);
            WriteColumnValue( destination, courseTimeseries_);
            WriteColumnValue( destination, speedTimeseries_);
            WriteColumnValue( destination, gNSSDevice_);
        }
        void AssignTo( Types::GyroDeviceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DeviceObject&>( destination ) );
            destination.SetHeadingTrueNorthTimeseries( headingTrueNorthTimeseries_ );
            destination.SetHeadingMagneticNorthTimeseries( headingMagneticNorthTimeseries_ );
            destination.SetPitchTimeseries( pitchTimeseries_ );
            destination.SetRateOfTurnTimeseries( rateOfTurnTimeseries_ );
            destination.SetRollTimeseries( rollTimeseries_ );
            destination.SetCourseTimeseries( courseTimeseries_ );
            destination.SetSpeedTimeseries( speedTimeseries_ );
            destination.SetGNSSDevice( gNSSDevice_ );
        }
    };

    using SimpleGyroDeviceDataReader = SimpleColumnDataReader<GyroDeviceColumnData>;

    class LineInputDeviceColumnData : public DeviceColumnData
    {
    public:
        using Base = DeviceColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        LineInputDeviceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LineInputDevice;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::LineInputDeviceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DeviceObject&>( destination ) );
        }
    };

    using SimpleLineInputDeviceDataReader = SimpleColumnDataReader<LineInputDeviceColumnData>;

    class OilSpillDetectorDeviceColumnData : public DeviceColumnData
    {
    public:
        using Base = DeviceColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        OilSpillDetectorDeviceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::OilSpillDetectorDevice;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::OilSpillDetectorDeviceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DeviceObject&>( destination ) );
        }
    };

    using SimpleOilSpillDetectorDeviceDataReader = SimpleColumnDataReader<OilSpillDetectorDeviceColumnData>;

    class RadioDeviceColumnData : public DeviceColumnData
    {
    public:
        using Base = DeviceColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        RadioDeviceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadioDevice;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::RadioDeviceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DeviceObject&>( destination ) );
        }
    };

    using SimpleRadioDeviceDataReader = SimpleColumnDataReader<RadioDeviceColumnData>;

    class RadomeDeviceColumnData : public DeviceColumnData
    {
        DBGuid radar_;
        Guid pressureTimeseries_;
        Guid temperatureTimeseries_;
        Guid dewPointTimeseries_;
        Guid statusTimeseries_;
    public:
        using Base = DeviceColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 7;
        static constexpr SQLUSMALLINT PRESSURETIMESERIES_FIELD_ID = 8;
        static constexpr SQLUSMALLINT TEMPERATURETIMESERIES_FIELD_ID = 9;
        static constexpr SQLUSMALLINT DEWPOINTTIMESERIES_FIELD_ID = 10;
        static constexpr SQLUSMALLINT STATUSTIMESERIES_FIELD_ID = 11;

        RadomeDeviceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadomeDevice;
        }

        const DBGuid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const DBGuid& radar )
        {
            radar_ = radar;
        }
        const Guid& PressureTimeseries( ) const
        {
            return pressureTimeseries_;
        }
        void SetPressureTimeseries( const Guid& pressureTimeseries )
        {
            pressureTimeseries_ = pressureTimeseries;
        }
        const Guid& TemperatureTimeseries( ) const
        {
            return temperatureTimeseries_;
        }
        void SetTemperatureTimeseries( const Guid& temperatureTimeseries )
        {
            temperatureTimeseries_ = temperatureTimeseries;
        }
        const Guid& DewPointTimeseries( ) const
        {
            return dewPointTimeseries_;
        }
        void SetDewPointTimeseries( const Guid& dewPointTimeseries )
        {
            dewPointTimeseries_ = dewPointTimeseries;
        }
        const Guid& StatusTimeseries( ) const
        {
            return statusTimeseries_;
        }
        void SetStatusTimeseries( const Guid& statusTimeseries )
        {
            statusTimeseries_ = statusTimeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
            Bind(statement, PRESSURETIMESERIES_FIELD_ID, pressureTimeseries_);
            Bind(statement, TEMPERATURETIMESERIES_FIELD_ID, temperatureTimeseries_);
            Bind(statement, DEWPOINTTIMESERIES_FIELD_ID, dewPointTimeseries_);
            Bind(statement, STATUSTIMESERIES_FIELD_ID, statusTimeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
            WriteColumnValue( destination, pressureTimeseries_);
            WriteColumnValue( destination, temperatureTimeseries_);
            WriteColumnValue( destination, dewPointTimeseries_);
            WriteColumnValue( destination, statusTimeseries_);
        }
        void AssignTo( Types::RadomeDeviceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DeviceObject&>( destination ) );
            destination.SetRadar( radar_ );
            destination.SetPressureTimeseries( pressureTimeseries_ );
            destination.SetTemperatureTimeseries( temperatureTimeseries_ );
            destination.SetDewPointTimeseries( dewPointTimeseries_ );
            destination.SetStatusTimeseries( statusTimeseries_ );
        }
    };

    using SimpleRadomeDeviceDataReader = SimpleColumnDataReader<RadomeDeviceColumnData>;

    class TrackerDeviceColumnData : public DeviceColumnData
    {
    public:
        using Base = DeviceColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        TrackerDeviceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TrackerDevice;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::TrackerDeviceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DeviceObject&>( destination ) );
        }
    };

    using SimpleTrackerDeviceDataReader = SimpleColumnDataReader<TrackerDeviceColumnData>;

    class AisDeviceColumnData : public TrackerDeviceColumnData
    {
    public:
        using Base = TrackerDeviceColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        AisDeviceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisDevice;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::AisDeviceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TrackerDeviceObject&>( destination ) );
        }
    };

    using SimpleAisDeviceDataReader = SimpleColumnDataReader<AisDeviceColumnData>;

    class RadarDeviceColumnData : public TrackerDeviceColumnData
    {
        Guid saveSettingsTimeseries_;
        Guid powerOnTimeseries_;
        Guid trackingOnTimeseries_;
        Guid radarPulseTimeseries_;
        Guid tuningTimeseries_;
        Guid blankSector1Timeseries_;
        Guid sector1StartTimeseries_;
        Guid sector1EndTimeseries_;
        Guid blankSector2Timeseries_;
        Guid sector2StartTimeseries_;
        Guid sector2EndTimeseries_;
        Guid enableAutomaticFrequencyControlTimeseries_;
        Guid azimuthOffsetTimeseries_;
        Guid enableSensitivityTimeControlTimeseries_;
        Guid automaticSensitivityTimeControlTimeseries_;
        Guid sensitivityTimeControlLevelTimeseries_;
        Guid enableFastTimeConstantTimeseries_;
        Guid fastTimeConstantLevelTimeseries_;
        Guid fastTimeConstantModeTimeseries_;
        Guid latitudeTimeseries_;
        Guid longitudeTimeseries_;
        DBGuid radome_;
        DBGuid gNSSDevice_;
    public:
        using Base = TrackerDeviceColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT SAVESETTINGSTIMESERIES_FIELD_ID = 7;
        static constexpr SQLUSMALLINT POWERONTIMESERIES_FIELD_ID = 8;
        static constexpr SQLUSMALLINT TRACKINGONTIMESERIES_FIELD_ID = 9;
        static constexpr SQLUSMALLINT RADARPULSETIMESERIES_FIELD_ID = 10;
        static constexpr SQLUSMALLINT TUNINGTIMESERIES_FIELD_ID = 11;
        static constexpr SQLUSMALLINT BLANKSECTOR1TIMESERIES_FIELD_ID = 12;
        static constexpr SQLUSMALLINT SECTOR1STARTTIMESERIES_FIELD_ID = 13;
        static constexpr SQLUSMALLINT SECTOR1ENDTIMESERIES_FIELD_ID = 14;
        static constexpr SQLUSMALLINT BLANKSECTOR2TIMESERIES_FIELD_ID = 15;
        static constexpr SQLUSMALLINT SECTOR2STARTTIMESERIES_FIELD_ID = 16;
        static constexpr SQLUSMALLINT SECTOR2ENDTIMESERIES_FIELD_ID = 17;
        static constexpr SQLUSMALLINT ENABLEAUTOMATICFREQUENCYCONTROLTIMESERIES_FIELD_ID = 18;
        static constexpr SQLUSMALLINT AZIMUTHOFFSETTIMESERIES_FIELD_ID = 19;
        static constexpr SQLUSMALLINT ENABLESENSITIVITYTIMECONTROLTIMESERIES_FIELD_ID = 20;
        static constexpr SQLUSMALLINT AUTOMATICSENSITIVITYTIMECONTROLTIMESERIES_FIELD_ID = 21;
        static constexpr SQLUSMALLINT SENSITIVITYTIMECONTROLLEVELTIMESERIES_FIELD_ID = 22;
        static constexpr SQLUSMALLINT ENABLEFASTTIMECONSTANTTIMESERIES_FIELD_ID = 23;
        static constexpr SQLUSMALLINT FASTTIMECONSTANTLEVELTIMESERIES_FIELD_ID = 24;
        static constexpr SQLUSMALLINT FASTTIMECONSTANTMODETIMESERIES_FIELD_ID = 25;
        static constexpr SQLUSMALLINT LATITUDETIMESERIES_FIELD_ID = 26;
        static constexpr SQLUSMALLINT LONGITUDETIMESERIES_FIELD_ID = 27;
        static constexpr SQLUSMALLINT RADOME_FIELD_ID = 28;
        static constexpr SQLUSMALLINT GNSSDEVICE_FIELD_ID = 29;

        RadarDeviceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarDevice;
        }

        const Guid& SaveSettingsTimeseries( ) const
        {
            return saveSettingsTimeseries_;
        }
        void SetSaveSettingsTimeseries( const Guid& saveSettingsTimeseries )
        {
            saveSettingsTimeseries_ = saveSettingsTimeseries;
        }
        const Guid& PowerOnTimeseries( ) const
        {
            return powerOnTimeseries_;
        }
        void SetPowerOnTimeseries( const Guid& powerOnTimeseries )
        {
            powerOnTimeseries_ = powerOnTimeseries;
        }
        const Guid& TrackingOnTimeseries( ) const
        {
            return trackingOnTimeseries_;
        }
        void SetTrackingOnTimeseries( const Guid& trackingOnTimeseries )
        {
            trackingOnTimeseries_ = trackingOnTimeseries;
        }
        const Guid& RadarPulseTimeseries( ) const
        {
            return radarPulseTimeseries_;
        }
        void SetRadarPulseTimeseries( const Guid& radarPulseTimeseries )
        {
            radarPulseTimeseries_ = radarPulseTimeseries;
        }
        const Guid& TuningTimeseries( ) const
        {
            return tuningTimeseries_;
        }
        void SetTuningTimeseries( const Guid& tuningTimeseries )
        {
            tuningTimeseries_ = tuningTimeseries;
        }
        const Guid& BlankSector1Timeseries( ) const
        {
            return blankSector1Timeseries_;
        }
        void SetBlankSector1Timeseries( const Guid& blankSector1Timeseries )
        {
            blankSector1Timeseries_ = blankSector1Timeseries;
        }
        const Guid& Sector1StartTimeseries( ) const
        {
            return sector1StartTimeseries_;
        }
        void SetSector1StartTimeseries( const Guid& sector1StartTimeseries )
        {
            sector1StartTimeseries_ = sector1StartTimeseries;
        }
        const Guid& Sector1EndTimeseries( ) const
        {
            return sector1EndTimeseries_;
        }
        void SetSector1EndTimeseries( const Guid& sector1EndTimeseries )
        {
            sector1EndTimeseries_ = sector1EndTimeseries;
        }
        const Guid& BlankSector2Timeseries( ) const
        {
            return blankSector2Timeseries_;
        }
        void SetBlankSector2Timeseries( const Guid& blankSector2Timeseries )
        {
            blankSector2Timeseries_ = blankSector2Timeseries;
        }
        const Guid& Sector2StartTimeseries( ) const
        {
            return sector2StartTimeseries_;
        }
        void SetSector2StartTimeseries( const Guid& sector2StartTimeseries )
        {
            sector2StartTimeseries_ = sector2StartTimeseries;
        }
        const Guid& Sector2EndTimeseries( ) const
        {
            return sector2EndTimeseries_;
        }
        void SetSector2EndTimeseries( const Guid& sector2EndTimeseries )
        {
            sector2EndTimeseries_ = sector2EndTimeseries;
        }
        const Guid& EnableAutomaticFrequencyControlTimeseries( ) const
        {
            return enableAutomaticFrequencyControlTimeseries_;
        }
        void SetEnableAutomaticFrequencyControlTimeseries( const Guid& enableAutomaticFrequencyControlTimeseries )
        {
            enableAutomaticFrequencyControlTimeseries_ = enableAutomaticFrequencyControlTimeseries;
        }
        const Guid& AzimuthOffsetTimeseries( ) const
        {
            return azimuthOffsetTimeseries_;
        }
        void SetAzimuthOffsetTimeseries( const Guid& azimuthOffsetTimeseries )
        {
            azimuthOffsetTimeseries_ = azimuthOffsetTimeseries;
        }
        const Guid& EnableSensitivityTimeControlTimeseries( ) const
        {
            return enableSensitivityTimeControlTimeseries_;
        }
        void SetEnableSensitivityTimeControlTimeseries( const Guid& enableSensitivityTimeControlTimeseries )
        {
            enableSensitivityTimeControlTimeseries_ = enableSensitivityTimeControlTimeseries;
        }
        const Guid& AutomaticSensitivityTimeControlTimeseries( ) const
        {
            return automaticSensitivityTimeControlTimeseries_;
        }
        void SetAutomaticSensitivityTimeControlTimeseries( const Guid& automaticSensitivityTimeControlTimeseries )
        {
            automaticSensitivityTimeControlTimeseries_ = automaticSensitivityTimeControlTimeseries;
        }
        const Guid& SensitivityTimeControlLevelTimeseries( ) const
        {
            return sensitivityTimeControlLevelTimeseries_;
        }
        void SetSensitivityTimeControlLevelTimeseries( const Guid& sensitivityTimeControlLevelTimeseries )
        {
            sensitivityTimeControlLevelTimeseries_ = sensitivityTimeControlLevelTimeseries;
        }
        const Guid& EnableFastTimeConstantTimeseries( ) const
        {
            return enableFastTimeConstantTimeseries_;
        }
        void SetEnableFastTimeConstantTimeseries( const Guid& enableFastTimeConstantTimeseries )
        {
            enableFastTimeConstantTimeseries_ = enableFastTimeConstantTimeseries;
        }
        const Guid& FastTimeConstantLevelTimeseries( ) const
        {
            return fastTimeConstantLevelTimeseries_;
        }
        void SetFastTimeConstantLevelTimeseries( const Guid& fastTimeConstantLevelTimeseries )
        {
            fastTimeConstantLevelTimeseries_ = fastTimeConstantLevelTimeseries;
        }
        const Guid& FastTimeConstantModeTimeseries( ) const
        {
            return fastTimeConstantModeTimeseries_;
        }
        void SetFastTimeConstantModeTimeseries( const Guid& fastTimeConstantModeTimeseries )
        {
            fastTimeConstantModeTimeseries_ = fastTimeConstantModeTimeseries;
        }
        const Guid& LatitudeTimeseries( ) const
        {
            return latitudeTimeseries_;
        }
        void SetLatitudeTimeseries( const Guid& latitudeTimeseries )
        {
            latitudeTimeseries_ = latitudeTimeseries;
        }
        const Guid& LongitudeTimeseries( ) const
        {
            return longitudeTimeseries_;
        }
        void SetLongitudeTimeseries( const Guid& longitudeTimeseries )
        {
            longitudeTimeseries_ = longitudeTimeseries;
        }
        const DBGuid& Radome( ) const
        {
            return radome_;
        }
        void SetRadome( const DBGuid& radome )
        {
            radome_ = radome;
        }
        const DBGuid& GNSSDevice( ) const
        {
            return gNSSDevice_;
        }
        void SetGNSSDevice( const DBGuid& gNSSDevice )
        {
            gNSSDevice_ = gNSSDevice;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, SAVESETTINGSTIMESERIES_FIELD_ID, saveSettingsTimeseries_);
            Bind(statement, POWERONTIMESERIES_FIELD_ID, powerOnTimeseries_);
            Bind(statement, TRACKINGONTIMESERIES_FIELD_ID, trackingOnTimeseries_);
            Bind(statement, RADARPULSETIMESERIES_FIELD_ID, radarPulseTimeseries_);
            Bind(statement, TUNINGTIMESERIES_FIELD_ID, tuningTimeseries_);
            Bind(statement, BLANKSECTOR1TIMESERIES_FIELD_ID, blankSector1Timeseries_);
            Bind(statement, SECTOR1STARTTIMESERIES_FIELD_ID, sector1StartTimeseries_);
            Bind(statement, SECTOR1ENDTIMESERIES_FIELD_ID, sector1EndTimeseries_);
            Bind(statement, BLANKSECTOR2TIMESERIES_FIELD_ID, blankSector2Timeseries_);
            Bind(statement, SECTOR2STARTTIMESERIES_FIELD_ID, sector2StartTimeseries_);
            Bind(statement, SECTOR2ENDTIMESERIES_FIELD_ID, sector2EndTimeseries_);
            Bind(statement, ENABLEAUTOMATICFREQUENCYCONTROLTIMESERIES_FIELD_ID, enableAutomaticFrequencyControlTimeseries_);
            Bind(statement, AZIMUTHOFFSETTIMESERIES_FIELD_ID, azimuthOffsetTimeseries_);
            Bind(statement, ENABLESENSITIVITYTIMECONTROLTIMESERIES_FIELD_ID, enableSensitivityTimeControlTimeseries_);
            Bind(statement, AUTOMATICSENSITIVITYTIMECONTROLTIMESERIES_FIELD_ID, automaticSensitivityTimeControlTimeseries_);
            Bind(statement, SENSITIVITYTIMECONTROLLEVELTIMESERIES_FIELD_ID, sensitivityTimeControlLevelTimeseries_);
            Bind(statement, ENABLEFASTTIMECONSTANTTIMESERIES_FIELD_ID, enableFastTimeConstantTimeseries_);
            Bind(statement, FASTTIMECONSTANTLEVELTIMESERIES_FIELD_ID, fastTimeConstantLevelTimeseries_);
            Bind(statement, FASTTIMECONSTANTMODETIMESERIES_FIELD_ID, fastTimeConstantModeTimeseries_);
            Bind(statement, LATITUDETIMESERIES_FIELD_ID, latitudeTimeseries_);
            Bind(statement, LONGITUDETIMESERIES_FIELD_ID, longitudeTimeseries_);
            Bind(statement, RADOME_FIELD_ID, radome_);
            Bind(statement, GNSSDEVICE_FIELD_ID, gNSSDevice_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, saveSettingsTimeseries_);
            WriteColumnValue( destination, powerOnTimeseries_);
            WriteColumnValue( destination, trackingOnTimeseries_);
            WriteColumnValue( destination, radarPulseTimeseries_);
            WriteColumnValue( destination, tuningTimeseries_);
            WriteColumnValue( destination, blankSector1Timeseries_);
            WriteColumnValue( destination, sector1StartTimeseries_);
            WriteColumnValue( destination, sector1EndTimeseries_);
            WriteColumnValue( destination, blankSector2Timeseries_);
            WriteColumnValue( destination, sector2StartTimeseries_);
            WriteColumnValue( destination, sector2EndTimeseries_);
            WriteColumnValue( destination, enableAutomaticFrequencyControlTimeseries_);
            WriteColumnValue( destination, azimuthOffsetTimeseries_);
            WriteColumnValue( destination, enableSensitivityTimeControlTimeseries_);
            WriteColumnValue( destination, automaticSensitivityTimeControlTimeseries_);
            WriteColumnValue( destination, sensitivityTimeControlLevelTimeseries_);
            WriteColumnValue( destination, enableFastTimeConstantTimeseries_);
            WriteColumnValue( destination, fastTimeConstantLevelTimeseries_);
            WriteColumnValue( destination, fastTimeConstantModeTimeseries_);
            WriteColumnValue( destination, latitudeTimeseries_);
            WriteColumnValue( destination, longitudeTimeseries_);
            WriteColumnValue( destination, radome_);
            WriteColumnValue( destination, gNSSDevice_);
        }
        void AssignTo( Types::RadarDeviceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TrackerDeviceObject&>( destination ) );
            destination.SetSaveSettingsTimeseries( saveSettingsTimeseries_ );
            destination.SetPowerOnTimeseries( powerOnTimeseries_ );
            destination.SetTrackingOnTimeseries( trackingOnTimeseries_ );
            destination.SetRadarPulseTimeseries( radarPulseTimeseries_ );
            destination.SetTuningTimeseries( tuningTimeseries_ );
            destination.SetBlankSector1Timeseries( blankSector1Timeseries_ );
            destination.SetSector1StartTimeseries( sector1StartTimeseries_ );
            destination.SetSector1EndTimeseries( sector1EndTimeseries_ );
            destination.SetBlankSector2Timeseries( blankSector2Timeseries_ );
            destination.SetSector2StartTimeseries( sector2StartTimeseries_ );
            destination.SetSector2EndTimeseries( sector2EndTimeseries_ );
            destination.SetEnableAutomaticFrequencyControlTimeseries( enableAutomaticFrequencyControlTimeseries_ );
            destination.SetAzimuthOffsetTimeseries( azimuthOffsetTimeseries_ );
            destination.SetEnableSensitivityTimeControlTimeseries( enableSensitivityTimeControlTimeseries_ );
            destination.SetAutomaticSensitivityTimeControlTimeseries( automaticSensitivityTimeControlTimeseries_ );
            destination.SetSensitivityTimeControlLevelTimeseries( sensitivityTimeControlLevelTimeseries_ );
            destination.SetEnableFastTimeConstantTimeseries( enableFastTimeConstantTimeseries_ );
            destination.SetFastTimeConstantLevelTimeseries( fastTimeConstantLevelTimeseries_ );
            destination.SetFastTimeConstantModeTimeseries( fastTimeConstantModeTimeseries_ );
            destination.SetLatitudeTimeseries( latitudeTimeseries_ );
            destination.SetLongitudeTimeseries( longitudeTimeseries_ );
            destination.SetRadome( radome_ );
            destination.SetGNSSDevice( gNSSDevice_ );
        }
    };

    using SimpleRadarDeviceDataReader = SimpleColumnDataReader<RadarDeviceColumnData>;

    class WeatherStationDeviceColumnData : public DeviceColumnData
    {
        Guid barometricPressureTimeseries_;
        Guid airTemperatureTimeseries_;
        Guid waterTemperatureTimeseries_;
        Guid relativeHumidityTimeseries_;
        Guid absoluteHumidityTimeseries_;
        Guid dewPointTimeseries_;
        Guid windDirectionTimeseries_;
        Guid windSpeedTimeseries_;
        Guid gyro_;
    public:
        using Base = DeviceColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT BAROMETRICPRESSURETIMESERIES_FIELD_ID = 7;
        static constexpr SQLUSMALLINT AIRTEMPERATURETIMESERIES_FIELD_ID = 8;
        static constexpr SQLUSMALLINT WATERTEMPERATURETIMESERIES_FIELD_ID = 9;
        static constexpr SQLUSMALLINT RELATIVEHUMIDITYTIMESERIES_FIELD_ID = 10;
        static constexpr SQLUSMALLINT ABSOLUTEHUMIDITYTIMESERIES_FIELD_ID = 11;
        static constexpr SQLUSMALLINT DEWPOINTTIMESERIES_FIELD_ID = 12;
        static constexpr SQLUSMALLINT WINDDIRECTIONTIMESERIES_FIELD_ID = 13;
        static constexpr SQLUSMALLINT WINDSPEEDTIMESERIES_FIELD_ID = 14;
        static constexpr SQLUSMALLINT GYRO_FIELD_ID = 15;

        WeatherStationDeviceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::WeatherStationDevice;
        }

        const Guid& BarometricPressureTimeseries( ) const
        {
            return barometricPressureTimeseries_;
        }
        void SetBarometricPressureTimeseries( const Guid& barometricPressureTimeseries )
        {
            barometricPressureTimeseries_ = barometricPressureTimeseries;
        }
        const Guid& AirTemperatureTimeseries( ) const
        {
            return airTemperatureTimeseries_;
        }
        void SetAirTemperatureTimeseries( const Guid& airTemperatureTimeseries )
        {
            airTemperatureTimeseries_ = airTemperatureTimeseries;
        }
        const Guid& WaterTemperatureTimeseries( ) const
        {
            return waterTemperatureTimeseries_;
        }
        void SetWaterTemperatureTimeseries( const Guid& waterTemperatureTimeseries )
        {
            waterTemperatureTimeseries_ = waterTemperatureTimeseries;
        }
        const Guid& RelativeHumidityTimeseries( ) const
        {
            return relativeHumidityTimeseries_;
        }
        void SetRelativeHumidityTimeseries( const Guid& relativeHumidityTimeseries )
        {
            relativeHumidityTimeseries_ = relativeHumidityTimeseries;
        }
        const Guid& AbsoluteHumidityTimeseries( ) const
        {
            return absoluteHumidityTimeseries_;
        }
        void SetAbsoluteHumidityTimeseries( const Guid& absoluteHumidityTimeseries )
        {
            absoluteHumidityTimeseries_ = absoluteHumidityTimeseries;
        }
        const Guid& DewPointTimeseries( ) const
        {
            return dewPointTimeseries_;
        }
        void SetDewPointTimeseries( const Guid& dewPointTimeseries )
        {
            dewPointTimeseries_ = dewPointTimeseries;
        }
        const Guid& WindDirectionTimeseries( ) const
        {
            return windDirectionTimeseries_;
        }
        void SetWindDirectionTimeseries( const Guid& windDirectionTimeseries )
        {
            windDirectionTimeseries_ = windDirectionTimeseries;
        }
        const Guid& WindSpeedTimeseries( ) const
        {
            return windSpeedTimeseries_;
        }
        void SetWindSpeedTimeseries( const Guid& windSpeedTimeseries )
        {
            windSpeedTimeseries_ = windSpeedTimeseries;
        }
        const Guid& Gyro( ) const
        {
            return gyro_;
        }
        void SetGyro( const Guid& gyro )
        {
            gyro_ = gyro;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, BAROMETRICPRESSURETIMESERIES_FIELD_ID, barometricPressureTimeseries_);
            Bind(statement, AIRTEMPERATURETIMESERIES_FIELD_ID, airTemperatureTimeseries_);
            Bind(statement, WATERTEMPERATURETIMESERIES_FIELD_ID, waterTemperatureTimeseries_);
            Bind(statement, RELATIVEHUMIDITYTIMESERIES_FIELD_ID, relativeHumidityTimeseries_);
            Bind(statement, ABSOLUTEHUMIDITYTIMESERIES_FIELD_ID, absoluteHumidityTimeseries_);
            Bind(statement, DEWPOINTTIMESERIES_FIELD_ID, dewPointTimeseries_);
            Bind(statement, WINDDIRECTIONTIMESERIES_FIELD_ID, windDirectionTimeseries_);
            Bind(statement, WINDSPEEDTIMESERIES_FIELD_ID, windSpeedTimeseries_);
            Bind(statement, GYRO_FIELD_ID, gyro_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, barometricPressureTimeseries_);
            WriteColumnValue( destination, airTemperatureTimeseries_);
            WriteColumnValue( destination, waterTemperatureTimeseries_);
            WriteColumnValue( destination, relativeHumidityTimeseries_);
            WriteColumnValue( destination, absoluteHumidityTimeseries_);
            WriteColumnValue( destination, dewPointTimeseries_);
            WriteColumnValue( destination, windDirectionTimeseries_);
            WriteColumnValue( destination, windSpeedTimeseries_);
            WriteColumnValue( destination, gyro_);
        }
        void AssignTo( Types::WeatherStationDeviceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DeviceObject&>( destination ) );
            destination.SetBarometricPressureTimeseries( barometricPressureTimeseries_ );
            destination.SetAirTemperatureTimeseries( airTemperatureTimeseries_ );
            destination.SetWaterTemperatureTimeseries( waterTemperatureTimeseries_ );
            destination.SetRelativeHumidityTimeseries( relativeHumidityTimeseries_ );
            destination.SetAbsoluteHumidityTimeseries( absoluteHumidityTimeseries_ );
            destination.SetDewPointTimeseries( dewPointTimeseries_ );
            destination.SetWindDirectionTimeseries( windDirectionTimeseries_ );
            destination.SetWindSpeedTimeseries( windSpeedTimeseries_ );
            destination.SetGyro( gyro_ );
        }
    };

    using SimpleWeatherStationDeviceDataReader = SimpleColumnDataReader<WeatherStationDeviceColumnData>;

    class FacilityColumnData : public ItemColumnData
    {
        FixedDBWideString<127> name_;
        Guid type_;
        double longitude_ = 0.0;
        double latitude_ = 0.0;
        double altitude_ = 0.0;
    public:
        using Base = ItemColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TYPE_FIELD_ID = 4;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT ALTITUDE_FIELD_ID = 7;

        FacilityColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Facility;
        }

        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const Guid& Type( ) const
        {
            return type_;
        }
        void SetType( const Guid& type )
        {
            type_ = type;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double Altitude( ) const
        {
            return altitude_;
        }
        void SetAltitude( double altitude )
        {
            altitude_ = altitude;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, TYPE_FIELD_ID, type_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, ALTITUDE_FIELD_ID, altitude_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, type_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, altitude_);
        }
        void AssignTo( Types::FacilityObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::ItemObject&>( destination ) );
            destination.SetName( name_ );
            destination.SetType( type_ );
            destination.SetLongitude( longitude_ );
            destination.SetLatitude( latitude_ );
            destination.SetAltitude( altitude_ );
        }
    };

    using SimpleFacilityDataReader = SimpleColumnDataReader<FacilityColumnData>;

    class TrackableItemColumnData : public ItemColumnData
    {
    public:
        using Base = ItemColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        TrackableItemColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TrackableItem;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::TrackableItemObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::ItemObject&>( destination ) );
        }
    };

    using SimpleTrackableItemDataReader = SimpleColumnDataReader<TrackableItemColumnData>;

    class AircraftColumnData : public TrackableItemColumnData
    {
        FixedDBWideString<127> name_;
        Guid type_;
    public:
        using Base = TrackableItemColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TYPE_FIELD_ID = 4;

        AircraftColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Aircraft;
        }

        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const Guid& Type( ) const
        {
            return type_;
        }
        void SetType( const Guid& type )
        {
            type_ = type;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, TYPE_FIELD_ID, type_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, type_);
        }
        void AssignTo( Types::AircraftObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TrackableItemObject&>( destination ) );
            destination.SetName( name_ );
            destination.SetType( type_ );
        }
    };

    using SimpleAircraftDataReader = SimpleColumnDataReader<AircraftColumnData>;

    class AisAidToNavigationColumnData : public TrackableItemColumnData
    {
        FixedDBWideString<127> name_;
        Guid mMSI_;
        Types::NavigationalAidType navigationalAidType_ = Types::NavigationalAidType::NotSpecified;
        Guid position_;
        bool isVirtual_ = false;
        Int32 toBow_ = 0;
        Int32 toStern_ = 0;
        Int32 toPort_ = 0;
        Int32 toStarboard_ = 0;
        Guid offPositionTimeseries_;
    public:
        using Base = TrackableItemColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT MMSI_FIELD_ID = 4;
        static constexpr SQLUSMALLINT NAVIGATIONALAIDTYPE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT POSITION_FIELD_ID = 6;
        static constexpr SQLUSMALLINT ISVIRTUAL_FIELD_ID = 7;
        static constexpr SQLUSMALLINT TOBOW_FIELD_ID = 8;
        static constexpr SQLUSMALLINT TOSTERN_FIELD_ID = 9;
        static constexpr SQLUSMALLINT TOPORT_FIELD_ID = 10;
        static constexpr SQLUSMALLINT TOSTARBOARD_FIELD_ID = 11;
        static constexpr SQLUSMALLINT OFFPOSITIONTIMESERIES_FIELD_ID = 12;

        AisAidToNavigationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisAidToNavigation;
        }

        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const Guid& MMSI( ) const
        {
            return mMSI_;
        }
        void SetMMSI( const Guid& mMSI )
        {
            mMSI_ = mMSI;
        }
        Types::NavigationalAidType NavigationalAidType( ) const
        {
            return navigationalAidType_;
        }
        void SetNavigationalAidType( Types::NavigationalAidType navigationalAidType )
        {
            navigationalAidType_ = navigationalAidType;
        }
        const Guid& Position( ) const
        {
            return position_;
        }
        void SetPosition( const Guid& position )
        {
            position_ = position;
        }
        bool IsVirtual( ) const
        {
            return isVirtual_;
        }
        void SetIsVirtual( bool isVirtual )
        {
            isVirtual_ = isVirtual;
        }
        Int32 ToBow( ) const
        {
            return toBow_;
        }
        void SetToBow( Int32 toBow )
        {
            toBow_ = toBow;
        }
        Int32 ToStern( ) const
        {
            return toStern_;
        }
        void SetToStern( Int32 toStern )
        {
            toStern_ = toStern;
        }
        Int32 ToPort( ) const
        {
            return toPort_;
        }
        void SetToPort( Int32 toPort )
        {
            toPort_ = toPort;
        }
        Int32 ToStarboard( ) const
        {
            return toStarboard_;
        }
        void SetToStarboard( Int32 toStarboard )
        {
            toStarboard_ = toStarboard;
        }
        const Guid& OffPositionTimeseries( ) const
        {
            return offPositionTimeseries_;
        }
        void SetOffPositionTimeseries( const Guid& offPositionTimeseries )
        {
            offPositionTimeseries_ = offPositionTimeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, MMSI_FIELD_ID, mMSI_);
            Bind(statement, NAVIGATIONALAIDTYPE_FIELD_ID, navigationalAidType_);
            Bind(statement, POSITION_FIELD_ID, position_);
            Bind(statement, ISVIRTUAL_FIELD_ID, isVirtual_);
            Bind(statement, TOBOW_FIELD_ID, toBow_);
            Bind(statement, TOSTERN_FIELD_ID, toStern_);
            Bind(statement, TOPORT_FIELD_ID, toPort_);
            Bind(statement, TOSTARBOARD_FIELD_ID, toStarboard_);
            Bind(statement, OFFPOSITIONTIMESERIES_FIELD_ID, offPositionTimeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, mMSI_);
            WriteColumnValue( destination, navigationalAidType_);
            WriteColumnValue( destination, position_);
            WriteColumnValue( destination, isVirtual_);
            WriteColumnValue( destination, toBow_);
            WriteColumnValue( destination, toStern_);
            WriteColumnValue( destination, toPort_);
            WriteColumnValue( destination, toStarboard_);
            WriteColumnValue( destination, offPositionTimeseries_);
        }
        void AssignTo( Types::AisAidToNavigationObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TrackableItemObject&>( destination ) );
            destination.SetName( name_ );
            destination.SetMMSI( mMSI_ );
            destination.SetNavigationalAidType( navigationalAidType_ );
            destination.SetPosition( position_ );
            destination.SetIsVirtual( isVirtual_ );
            destination.SetToBow( toBow_ );
            destination.SetToStern( toStern_ );
            destination.SetToPort( toPort_ );
            destination.SetToStarboard( toStarboard_ );
            destination.SetOffPositionTimeseries( offPositionTimeseries_ );
        }
    };

    using SimpleAisAidToNavigationDataReader = SimpleColumnDataReader<AisAidToNavigationColumnData>;

    class VehicleColumnData : public TrackableItemColumnData
    {
        FixedDBWideString<127> name_;
        Guid type_;
    public:
        using Base = TrackableItemColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TYPE_FIELD_ID = 4;

        VehicleColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Vehicle;
        }

        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const Guid& Type( ) const
        {
            return type_;
        }
        void SetType( const Guid& type )
        {
            type_ = type;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, TYPE_FIELD_ID, type_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, type_);
        }
        void AssignTo( Types::VehicleObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TrackableItemObject&>( destination ) );
            destination.SetName( name_ );
            destination.SetType( type_ );
        }
    };

    using SimpleVehicleDataReader = SimpleColumnDataReader<VehicleColumnData>;

    class VesselColumnData : public TrackableItemColumnData
    {
        FixedDBWideString<127> name_;
        Guid type_;
        Int32 toBow_ = 0;
        Int32 toStern_ = 0;
        Int32 toPort_ = 0;
        Int32 toStarboard_ = 0;
        Guid draughtTimeseries_;
        Guid personsOnBoardTimeseries_;
    public:
        using Base = TrackableItemColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TYPE_FIELD_ID = 4;
        static constexpr SQLUSMALLINT TOBOW_FIELD_ID = 5;
        static constexpr SQLUSMALLINT TOSTERN_FIELD_ID = 6;
        static constexpr SQLUSMALLINT TOPORT_FIELD_ID = 7;
        static constexpr SQLUSMALLINT TOSTARBOARD_FIELD_ID = 8;
        static constexpr SQLUSMALLINT DRAUGHTTIMESERIES_FIELD_ID = 9;
        static constexpr SQLUSMALLINT PERSONSONBOARDTIMESERIES_FIELD_ID = 10;

        VesselColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Vessel;
        }

        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const Guid& Type( ) const
        {
            return type_;
        }
        void SetType( const Guid& type )
        {
            type_ = type;
        }
        Int32 ToBow( ) const
        {
            return toBow_;
        }
        void SetToBow( Int32 toBow )
        {
            toBow_ = toBow;
        }
        Int32 ToStern( ) const
        {
            return toStern_;
        }
        void SetToStern( Int32 toStern )
        {
            toStern_ = toStern;
        }
        Int32 ToPort( ) const
        {
            return toPort_;
        }
        void SetToPort( Int32 toPort )
        {
            toPort_ = toPort;
        }
        Int32 ToStarboard( ) const
        {
            return toStarboard_;
        }
        void SetToStarboard( Int32 toStarboard )
        {
            toStarboard_ = toStarboard;
        }
        const Guid& DraughtTimeseries( ) const
        {
            return draughtTimeseries_;
        }
        void SetDraughtTimeseries( const Guid& draughtTimeseries )
        {
            draughtTimeseries_ = draughtTimeseries;
        }
        const Guid& PersonsOnBoardTimeseries( ) const
        {
            return personsOnBoardTimeseries_;
        }
        void SetPersonsOnBoardTimeseries( const Guid& personsOnBoardTimeseries )
        {
            personsOnBoardTimeseries_ = personsOnBoardTimeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, TYPE_FIELD_ID, type_);
            Bind(statement, TOBOW_FIELD_ID, toBow_);
            Bind(statement, TOSTERN_FIELD_ID, toStern_);
            Bind(statement, TOPORT_FIELD_ID, toPort_);
            Bind(statement, TOSTARBOARD_FIELD_ID, toStarboard_);
            Bind(statement, DRAUGHTTIMESERIES_FIELD_ID, draughtTimeseries_);
            Bind(statement, PERSONSONBOARDTIMESERIES_FIELD_ID, personsOnBoardTimeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, type_);
            WriteColumnValue( destination, toBow_);
            WriteColumnValue( destination, toStern_);
            WriteColumnValue( destination, toPort_);
            WriteColumnValue( destination, toStarboard_);
            WriteColumnValue( destination, draughtTimeseries_);
            WriteColumnValue( destination, personsOnBoardTimeseries_);
        }
        void AssignTo( Types::VesselObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TrackableItemObject&>( destination ) );
            destination.SetName( name_ );
            destination.SetType( type_ );
            destination.SetToBow( toBow_ );
            destination.SetToStern( toStern_ );
            destination.SetToPort( toPort_ );
            destination.SetToStarboard( toStarboard_ );
            destination.SetDraughtTimeseries( draughtTimeseries_ );
            destination.SetPersonsOnBoardTimeseries( personsOnBoardTimeseries_ );
        }
    };

    using SimpleVesselDataReader = SimpleColumnDataReader<VesselColumnData>;

    class ItemIdentityLinkColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid item_;
        Guid identity_;
        DateTime start_;
        DBDateTime end_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ITEM_FIELD_ID = 3;
        static constexpr SQLUSMALLINT IDENTITY_FIELD_ID = 4;
        static constexpr SQLUSMALLINT START_FIELD_ID = 5;
        static constexpr SQLUSMALLINT END_FIELD_ID = 6;

        ItemIdentityLinkColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ItemIdentityLink;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Item( ) const
        {
            return item_;
        }
        void SetItem( const Guid& item )
        {
            item_ = item;
        }
        const Guid& Identity( ) const
        {
            return identity_;
        }
        void SetIdentity( const Guid& identity )
        {
            identity_ = identity;
        }
        const DateTime& Start( ) const
        {
            return start_;
        }
        void SetStart( const DateTime& start )
        {
            start_ = start;
        }
        const DBDateTime& End( ) const
        {
            return end_;
        }
        void SetEnd( const DBDateTime& end )
        {
            end_ = end;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, ITEM_FIELD_ID, item_);
            Bind(statement, IDENTITY_FIELD_ID, identity_);
            Bind(statement, START_FIELD_ID, start_);
            Bind(statement, END_FIELD_ID, end_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::ItemIdentityLink );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, item_);
            WriteColumnValue( destination, identity_);
            WriteColumnValue( destination, start_);
            WriteColumnValue( destination, end_);
        }
        void AssignTo( Types::ItemIdentityLinkObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetItem( item_ );
            destination.SetIdentity( identity_ );
            destination.SetStart( start_ );
            destination.SetEnd( end_ );
        }
    };

    using SimpleItemIdentityLinkDataReader = SimpleColumnDataReader<ItemIdentityLinkColumnData>;

    class ItemParentChildLinkColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid parent_;
        Guid child_;
        DateTime timestamp_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT PARENT_FIELD_ID = 3;
        static constexpr SQLUSMALLINT CHILD_FIELD_ID = 4;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 5;

        ItemParentChildLinkColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ItemParentChildLink;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Parent( ) const
        {
            return parent_;
        }
        void SetParent( const Guid& parent )
        {
            parent_ = parent;
        }
        const Guid& Child( ) const
        {
            return child_;
        }
        void SetChild( const Guid& child )
        {
            child_ = child;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, PARENT_FIELD_ID, parent_);
            Bind(statement, CHILD_FIELD_ID, child_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::ItemParentChildLink );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, parent_);
            WriteColumnValue( destination, child_);
            WriteColumnValue( destination, timestamp_);
        }
        void AssignTo( Types::ItemParentChildLinkObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetParent( parent_ );
            destination.SetChild( child_ );
            destination.SetTimestamp( timestamp_ );
        }
    };

    using SimpleItemParentChildLinkDataReader = SimpleColumnDataReader<ItemParentChildLinkColumnData>;

    class LineInputDeviceCommandColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid lineInputDevice_;
        DateTime timestamp_;
        Types::DeviceCommandSourceType deviceCommandSourceType_ = Types::DeviceCommandSourceType::Unknown;
        Guid deviceCommandSourceId_;
        Guid reply_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT LINEINPUTDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCETYPE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCEID_FIELD_ID = 6;
        static constexpr SQLUSMALLINT REPLY_FIELD_ID = 7;

        LineInputDeviceCommandColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LineInputDeviceCommand;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& LineInputDevice( ) const
        {
            return lineInputDevice_;
        }
        void SetLineInputDevice( const Guid& lineInputDevice )
        {
            lineInputDevice_ = lineInputDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::DeviceCommandSourceType DeviceCommandSourceType( ) const
        {
            return deviceCommandSourceType_;
        }
        void SetDeviceCommandSourceType( Types::DeviceCommandSourceType deviceCommandSourceType )
        {
            deviceCommandSourceType_ = deviceCommandSourceType;
        }
        const Guid& DeviceCommandSourceId( ) const
        {
            return deviceCommandSourceId_;
        }
        void SetDeviceCommandSourceId( const Guid& deviceCommandSourceId )
        {
            deviceCommandSourceId_ = deviceCommandSourceId;
        }
        const Guid& Reply( ) const
        {
            return reply_;
        }
        void SetReply( const Guid& reply )
        {
            reply_ = reply;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, LINEINPUTDEVICE_FIELD_ID, lineInputDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEVICECOMMANDSOURCETYPE_FIELD_ID, deviceCommandSourceType_);
            Bind(statement, DEVICECOMMANDSOURCEID_FIELD_ID, deviceCommandSourceId_);
            Bind(statement, REPLY_FIELD_ID, reply_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LineInputDeviceCommand );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, lineInputDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, deviceCommandSourceType_);
            WriteColumnValue( destination, deviceCommandSourceId_);
            WriteColumnValue( destination, reply_);
        }
        void AssignTo( Types::LineInputDeviceCommandObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetLineInputDevice( lineInputDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDeviceCommandSourceType( deviceCommandSourceType_ );
            destination.SetDeviceCommandSourceId( deviceCommandSourceId_ );
            destination.SetReply( reply_ );
        }
    };

    using SimpleLineInputDeviceCommandDataReader = SimpleColumnDataReader<LineInputDeviceCommandColumnData>;

    class LineInputDeviceCommandReplyColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid lineInputDevice_;
        DateTime timestamp_;
        Guid command_;
        Types::DeviceCommandReplyStatus status_ = Types::DeviceCommandReplyStatus::Unknown;
        WideString message_;
        SQLLEN messageLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT LINEINPUTDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT COMMAND_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STATUS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MESSAGE_FIELD_ID = 7;

        LineInputDeviceCommandReplyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LineInputDeviceCommandReply;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& LineInputDevice( ) const
        {
            return lineInputDevice_;
        }
        void SetLineInputDevice( const Guid& lineInputDevice )
        {
            lineInputDevice_ = lineInputDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const Guid& Command( ) const
        {
            return command_;
        }
        void SetCommand( const Guid& command )
        {
            command_ = command;
        }
        Types::DeviceCommandReplyStatus Status( ) const
        {
            return status_;
        }
        void SetStatus( Types::DeviceCommandReplyStatus status )
        {
            status_ = status;
        }
        const WideString& Message( ) const
        {
            return message_;
        }
        void SetMessage( const WideString& message )
        {
            message_ = message;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, LINEINPUTDEVICE_FIELD_ID, lineInputDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, COMMAND_FIELD_ID, command_);
            Bind(statement, STATUS_FIELD_ID, status_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            message_ = statement.GetWideString(MESSAGE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LineInputDeviceCommandReply );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, lineInputDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, command_);
            WriteColumnValue( destination, status_);
            WriteColumnValue( destination, message_);
        }
        void AssignTo( Types::LineInputDeviceCommandReplyObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetLineInputDevice( lineInputDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetCommand( command_ );
            destination.SetStatus( status_ );
            destination.SetMessage( message_ );
        }
    };

    using SimpleLineInputDeviceCommandReplyDataReader = SimpleColumnDataReader<LineInputDeviceCommandReplyColumnData>;

    class LineInputDeviceConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid lineInputDevice_;
        DateTime timestamp_;
        bool storeReceivedSentences_ = false;
        bool storeSentMessages_ = false;
        bool storeUnsentMessages_ = false;
        bool nMEA_ = false;
        bool strictNMEA_ = false;
        Types::LineInputDeviceConnectionType connectionType_ = Types::LineInputDeviceConnectionType::Unknown;
        Int32 udpReceivePort_ = 0;
        FixedDBWideString<127> udpSendHostname_;
        Int32 udpSendPort_ = 0;
        FixedDBWideString<127> tcpHostname_;
        Int32 tcpPort_ = 0;
        bool useHttpLogin_ = false;
        FixedDBWideString<127> loginHostname_;
        Int32 loginPort_ = 0;
        FixedDBWideString<127> userName_;
        FixedDBWideString<127> password_;
        FixedDBWideString<127> comPort_;
        Int32 baudRate_ = 0;
        Int32 dataBits_ = 0;
        bool discardNull_ = false;
        bool dtrEnable_ = false;
        Types::Handshake handshake_ = Types::Handshake::None;
        FixedDBWideString<127> newLine_;
        Types::Parity parity_ = Types::Parity::None;
        Byte parityReplace_ = 0;
        Int32 readBufferSize_ = 0;
        TimeSpan readTimeout_;
        Int32 receivedBytesThreshold_ = 0;
        bool rtsEnable_ = false;
        Types::StopBits stopBits_ = Types::StopBits::None;
        Int32 writeBufferSize_ = 0;
        TimeSpan writeTimeout_;
        FixedDBWideString<127> pairedComPort_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT LINEINPUTDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT STORERECEIVEDSENTENCES_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STORESENTMESSAGES_FIELD_ID = 6;
        static constexpr SQLUSMALLINT STOREUNSENTMESSAGES_FIELD_ID = 7;
        static constexpr SQLUSMALLINT NMEA_FIELD_ID = 8;
        static constexpr SQLUSMALLINT STRICTNMEA_FIELD_ID = 9;
        static constexpr SQLUSMALLINT CONNECTIONTYPE_FIELD_ID = 10;
        static constexpr SQLUSMALLINT UDPRECEIVEPORT_FIELD_ID = 11;
        static constexpr SQLUSMALLINT UDPSENDHOSTNAME_FIELD_ID = 12;
        static constexpr SQLUSMALLINT UDPSENDPORT_FIELD_ID = 13;
        static constexpr SQLUSMALLINT TCPHOSTNAME_FIELD_ID = 14;
        static constexpr SQLUSMALLINT TCPPORT_FIELD_ID = 15;
        static constexpr SQLUSMALLINT USEHTTPLOGIN_FIELD_ID = 16;
        static constexpr SQLUSMALLINT LOGINHOSTNAME_FIELD_ID = 17;
        static constexpr SQLUSMALLINT LOGINPORT_FIELD_ID = 18;
        static constexpr SQLUSMALLINT USERNAME_FIELD_ID = 19;
        static constexpr SQLUSMALLINT PASSWORD_FIELD_ID = 20;
        static constexpr SQLUSMALLINT COMPORT_FIELD_ID = 21;
        static constexpr SQLUSMALLINT BAUDRATE_FIELD_ID = 22;
        static constexpr SQLUSMALLINT DATABITS_FIELD_ID = 23;
        static constexpr SQLUSMALLINT DISCARDNULL_FIELD_ID = 24;
        static constexpr SQLUSMALLINT DTRENABLE_FIELD_ID = 25;
        static constexpr SQLUSMALLINT HANDSHAKE_FIELD_ID = 26;
        static constexpr SQLUSMALLINT NEWLINE_FIELD_ID = 27;
        static constexpr SQLUSMALLINT PARITY_FIELD_ID = 28;
        static constexpr SQLUSMALLINT PARITYREPLACE_FIELD_ID = 29;
        static constexpr SQLUSMALLINT READBUFFERSIZE_FIELD_ID = 30;
        static constexpr SQLUSMALLINT READTIMEOUT_FIELD_ID = 31;
        static constexpr SQLUSMALLINT RECEIVEDBYTESTHRESHOLD_FIELD_ID = 32;
        static constexpr SQLUSMALLINT RTSENABLE_FIELD_ID = 33;
        static constexpr SQLUSMALLINT STOPBITS_FIELD_ID = 34;
        static constexpr SQLUSMALLINT WRITEBUFFERSIZE_FIELD_ID = 35;
        static constexpr SQLUSMALLINT WRITETIMEOUT_FIELD_ID = 36;
        static constexpr SQLUSMALLINT PAIREDCOMPORT_FIELD_ID = 37;

        LineInputDeviceConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LineInputDeviceConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& LineInputDevice( ) const
        {
            return lineInputDevice_;
        }
        void SetLineInputDevice( const Guid& lineInputDevice )
        {
            lineInputDevice_ = lineInputDevice;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        bool StoreReceivedSentences( ) const
        {
            return storeReceivedSentences_;
        }
        void SetStoreReceivedSentences( bool storeReceivedSentences )
        {
            storeReceivedSentences_ = storeReceivedSentences;
        }
        bool StoreSentMessages( ) const
        {
            return storeSentMessages_;
        }
        void SetStoreSentMessages( bool storeSentMessages )
        {
            storeSentMessages_ = storeSentMessages;
        }
        bool StoreUnsentMessages( ) const
        {
            return storeUnsentMessages_;
        }
        void SetStoreUnsentMessages( bool storeUnsentMessages )
        {
            storeUnsentMessages_ = storeUnsentMessages;
        }
        bool NMEA( ) const
        {
            return nMEA_;
        }
        void SetNMEA( bool nMEA )
        {
            nMEA_ = nMEA;
        }
        bool StrictNMEA( ) const
        {
            return strictNMEA_;
        }
        void SetStrictNMEA( bool strictNMEA )
        {
            strictNMEA_ = strictNMEA;
        }
        Types::LineInputDeviceConnectionType ConnectionType( ) const
        {
            return connectionType_;
        }
        void SetConnectionType( Types::LineInputDeviceConnectionType connectionType )
        {
            connectionType_ = connectionType;
        }
        Int32 UdpReceivePort( ) const
        {
            return udpReceivePort_;
        }
        void SetUdpReceivePort( Int32 udpReceivePort )
        {
            udpReceivePort_ = udpReceivePort;
        }
        const FixedDBWideString<127>& UdpSendHostname( ) const
        {
            return udpSendHostname_;
        }
        void SetUdpSendHostname( const FixedDBWideString<127>& udpSendHostname )
        {
            udpSendHostname_ = udpSendHostname;
        }
        Int32 UdpSendPort( ) const
        {
            return udpSendPort_;
        }
        void SetUdpSendPort( Int32 udpSendPort )
        {
            udpSendPort_ = udpSendPort;
        }
        const FixedDBWideString<127>& TcpHostname( ) const
        {
            return tcpHostname_;
        }
        void SetTcpHostname( const FixedDBWideString<127>& tcpHostname )
        {
            tcpHostname_ = tcpHostname;
        }
        Int32 TcpPort( ) const
        {
            return tcpPort_;
        }
        void SetTcpPort( Int32 tcpPort )
        {
            tcpPort_ = tcpPort;
        }
        bool UseHttpLogin( ) const
        {
            return useHttpLogin_;
        }
        void SetUseHttpLogin( bool useHttpLogin )
        {
            useHttpLogin_ = useHttpLogin;
        }
        const FixedDBWideString<127>& LoginHostname( ) const
        {
            return loginHostname_;
        }
        void SetLoginHostname( const FixedDBWideString<127>& loginHostname )
        {
            loginHostname_ = loginHostname;
        }
        Int32 LoginPort( ) const
        {
            return loginPort_;
        }
        void SetLoginPort( Int32 loginPort )
        {
            loginPort_ = loginPort;
        }
        const FixedDBWideString<127>& UserName( ) const
        {
            return userName_;
        }
        void SetUserName( const FixedDBWideString<127>& userName )
        {
            userName_ = userName;
        }
        const FixedDBWideString<127>& Password( ) const
        {
            return password_;
        }
        void SetPassword( const FixedDBWideString<127>& password )
        {
            password_ = password;
        }
        const FixedDBWideString<127>& ComPort( ) const
        {
            return comPort_;
        }
        void SetComPort( const FixedDBWideString<127>& comPort )
        {
            comPort_ = comPort;
        }
        Int32 BaudRate( ) const
        {
            return baudRate_;
        }
        void SetBaudRate( Int32 baudRate )
        {
            baudRate_ = baudRate;
        }
        Int32 DataBits( ) const
        {
            return dataBits_;
        }
        void SetDataBits( Int32 dataBits )
        {
            dataBits_ = dataBits;
        }
        bool DiscardNull( ) const
        {
            return discardNull_;
        }
        void SetDiscardNull( bool discardNull )
        {
            discardNull_ = discardNull;
        }
        bool DtrEnable( ) const
        {
            return dtrEnable_;
        }
        void SetDtrEnable( bool dtrEnable )
        {
            dtrEnable_ = dtrEnable;
        }
        Types::Handshake Handshake( ) const
        {
            return handshake_;
        }
        void SetHandshake( Types::Handshake handshake )
        {
            handshake_ = handshake;
        }
        const FixedDBWideString<127>& NewLine( ) const
        {
            return newLine_;
        }
        void SetNewLine( const FixedDBWideString<127>& newLine )
        {
            newLine_ = newLine;
        }
        Types::Parity Parity( ) const
        {
            return parity_;
        }
        void SetParity( Types::Parity parity )
        {
            parity_ = parity;
        }
        Byte ParityReplace( ) const
        {
            return parityReplace_;
        }
        void SetParityReplace( Byte parityReplace )
        {
            parityReplace_ = parityReplace;
        }
        Int32 ReadBufferSize( ) const
        {
            return readBufferSize_;
        }
        void SetReadBufferSize( Int32 readBufferSize )
        {
            readBufferSize_ = readBufferSize;
        }
        const TimeSpan& ReadTimeout( ) const
        {
            return readTimeout_;
        }
        void SetReadTimeout( const TimeSpan& readTimeout )
        {
            readTimeout_ = readTimeout;
        }
        Int32 ReceivedBytesThreshold( ) const
        {
            return receivedBytesThreshold_;
        }
        void SetReceivedBytesThreshold( Int32 receivedBytesThreshold )
        {
            receivedBytesThreshold_ = receivedBytesThreshold;
        }
        bool RtsEnable( ) const
        {
            return rtsEnable_;
        }
        void SetRtsEnable( bool rtsEnable )
        {
            rtsEnable_ = rtsEnable;
        }
        Types::StopBits StopBits( ) const
        {
            return stopBits_;
        }
        void SetStopBits( Types::StopBits stopBits )
        {
            stopBits_ = stopBits;
        }
        Int32 WriteBufferSize( ) const
        {
            return writeBufferSize_;
        }
        void SetWriteBufferSize( Int32 writeBufferSize )
        {
            writeBufferSize_ = writeBufferSize;
        }
        const TimeSpan& WriteTimeout( ) const
        {
            return writeTimeout_;
        }
        void SetWriteTimeout( const TimeSpan& writeTimeout )
        {
            writeTimeout_ = writeTimeout;
        }
        const FixedDBWideString<127>& PairedComPort( ) const
        {
            return pairedComPort_;
        }
        void SetPairedComPort( const FixedDBWideString<127>& pairedComPort )
        {
            pairedComPort_ = pairedComPort;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, LINEINPUTDEVICE_FIELD_ID, lineInputDevice_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, STORERECEIVEDSENTENCES_FIELD_ID, storeReceivedSentences_);
            Bind(statement, STORESENTMESSAGES_FIELD_ID, storeSentMessages_);
            Bind(statement, STOREUNSENTMESSAGES_FIELD_ID, storeUnsentMessages_);
            Bind(statement, NMEA_FIELD_ID, nMEA_);
            Bind(statement, STRICTNMEA_FIELD_ID, strictNMEA_);
            Bind(statement, CONNECTIONTYPE_FIELD_ID, connectionType_);
            Bind(statement, UDPRECEIVEPORT_FIELD_ID, udpReceivePort_);
            Bind(statement, UDPSENDHOSTNAME_FIELD_ID, udpSendHostname_);
            Bind(statement, UDPSENDPORT_FIELD_ID, udpSendPort_);
            Bind(statement, TCPHOSTNAME_FIELD_ID, tcpHostname_);
            Bind(statement, TCPPORT_FIELD_ID, tcpPort_);
            Bind(statement, USEHTTPLOGIN_FIELD_ID, useHttpLogin_);
            Bind(statement, LOGINHOSTNAME_FIELD_ID, loginHostname_);
            Bind(statement, LOGINPORT_FIELD_ID, loginPort_);
            Bind(statement, USERNAME_FIELD_ID, userName_);
            Bind(statement, PASSWORD_FIELD_ID, password_);
            Bind(statement, COMPORT_FIELD_ID, comPort_);
            Bind(statement, BAUDRATE_FIELD_ID, baudRate_);
            Bind(statement, DATABITS_FIELD_ID, dataBits_);
            Bind(statement, DISCARDNULL_FIELD_ID, discardNull_);
            Bind(statement, DTRENABLE_FIELD_ID, dtrEnable_);
            Bind(statement, HANDSHAKE_FIELD_ID, handshake_);
            Bind(statement, NEWLINE_FIELD_ID, newLine_);
            Bind(statement, PARITY_FIELD_ID, parity_);
            Bind(statement, PARITYREPLACE_FIELD_ID, parityReplace_);
            Bind(statement, READBUFFERSIZE_FIELD_ID, readBufferSize_);
            Bind(statement, READTIMEOUT_FIELD_ID, readTimeout_);
            Bind(statement, RECEIVEDBYTESTHRESHOLD_FIELD_ID, receivedBytesThreshold_);
            Bind(statement, RTSENABLE_FIELD_ID, rtsEnable_);
            Bind(statement, STOPBITS_FIELD_ID, stopBits_);
            Bind(statement, WRITEBUFFERSIZE_FIELD_ID, writeBufferSize_);
            Bind(statement, WRITETIMEOUT_FIELD_ID, writeTimeout_);
            Bind(statement, PAIREDCOMPORT_FIELD_ID, pairedComPort_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LineInputDeviceConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, lineInputDevice_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, storeReceivedSentences_);
            WriteColumnValue( destination, storeSentMessages_);
            WriteColumnValue( destination, storeUnsentMessages_);
            WriteColumnValue( destination, nMEA_);
            WriteColumnValue( destination, strictNMEA_);
            WriteColumnValue( destination, connectionType_);
            WriteColumnValue( destination, udpReceivePort_);
            WriteColumnValue( destination, udpSendHostname_);
            WriteColumnValue( destination, udpSendPort_);
            WriteColumnValue( destination, tcpHostname_);
            WriteColumnValue( destination, tcpPort_);
            WriteColumnValue( destination, useHttpLogin_);
            WriteColumnValue( destination, loginHostname_);
            WriteColumnValue( destination, loginPort_);
            WriteColumnValue( destination, userName_);
            WriteColumnValue( destination, password_);
            WriteColumnValue( destination, comPort_);
            WriteColumnValue( destination, baudRate_);
            WriteColumnValue( destination, dataBits_);
            WriteColumnValue( destination, discardNull_);
            WriteColumnValue( destination, dtrEnable_);
            WriteColumnValue( destination, handshake_);
            WriteColumnValue( destination, newLine_);
            WriteColumnValue( destination, parity_);
            WriteColumnValue( destination, parityReplace_);
            WriteColumnValue( destination, readBufferSize_);
            WriteColumnValue( destination, readTimeout_);
            WriteColumnValue( destination, receivedBytesThreshold_);
            WriteColumnValue( destination, rtsEnable_);
            WriteColumnValue( destination, stopBits_);
            WriteColumnValue( destination, writeBufferSize_);
            WriteColumnValue( destination, writeTimeout_);
            WriteColumnValue( destination, pairedComPort_);
        }
        void AssignTo( Types::LineInputDeviceConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetLineInputDevice( lineInputDevice_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetStoreReceivedSentences( storeReceivedSentences_ );
            destination.SetStoreSentMessages( storeSentMessages_ );
            destination.SetStoreUnsentMessages( storeUnsentMessages_ );
            destination.SetNMEA( nMEA_ );
            destination.SetStrictNMEA( strictNMEA_ );
            destination.SetConnectionType( connectionType_ );
            destination.SetUdpReceivePort( udpReceivePort_ );
            destination.SetUdpSendHostname( udpSendHostname_ );
            destination.SetUdpSendPort( udpSendPort_ );
            destination.SetTcpHostname( tcpHostname_ );
            destination.SetTcpPort( tcpPort_ );
            destination.SetUseHttpLogin( useHttpLogin_ );
            destination.SetLoginHostname( loginHostname_ );
            destination.SetLoginPort( loginPort_ );
            destination.SetUserName( userName_ );
            destination.SetPassword( password_ );
            destination.SetComPort( comPort_ );
            destination.SetBaudRate( baudRate_ );
            destination.SetDataBits( dataBits_ );
            destination.SetDiscardNull( discardNull_ );
            destination.SetDtrEnable( dtrEnable_ );
            destination.SetHandshake( handshake_ );
            destination.SetNewLine( newLine_ );
            destination.SetParity( parity_ );
            destination.SetParityReplace( parityReplace_ );
            destination.SetReadBufferSize( readBufferSize_ );
            destination.SetReadTimeout( readTimeout_ );
            destination.SetReceivedBytesThreshold( receivedBytesThreshold_ );
            destination.SetRtsEnable( rtsEnable_ );
            destination.SetStopBits( stopBits_ );
            destination.SetWriteBufferSize( writeBufferSize_ );
            destination.SetWriteTimeout( writeTimeout_ );
            destination.SetPairedComPort( pairedComPort_ );
        }
    };

    using SimpleLineInputDeviceConfigurationDataReader = SimpleColumnDataReader<LineInputDeviceConfigurationColumnData>;

    class LineInputMessageRoutingColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid lineInputDevice_;
        FixedDBWideString<127> type_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT LINEINPUTDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TYPE_FIELD_ID = 4;

        LineInputMessageRoutingColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LineInputMessageRouting;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& LineInputDevice( ) const
        {
            return lineInputDevice_;
        }
        void SetLineInputDevice( const Guid& lineInputDevice )
        {
            lineInputDevice_ = lineInputDevice;
        }
        const FixedDBWideString<127>& Type( ) const
        {
            return type_;
        }
        void SetType( const FixedDBWideString<127>& type )
        {
            type_ = type;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, LINEINPUTDEVICE_FIELD_ID, lineInputDevice_);
            Bind(statement, TYPE_FIELD_ID, type_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LineInputMessageRouting );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, lineInputDevice_);
            WriteColumnValue( destination, type_);
        }
        void AssignTo( Types::LineInputMessageRoutingObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetLineInputDevice( lineInputDevice_ );
            destination.SetType( type_ );
        }
    };

    using SimpleLineInputMessageRoutingDataReader = SimpleColumnDataReader<LineInputMessageRoutingColumnData>;

    class LineInputMessageRoutingDestinationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid routing_;
        Guid listener_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROUTING_FIELD_ID = 3;
        static constexpr SQLUSMALLINT LISTENER_FIELD_ID = 4;

        LineInputMessageRoutingDestinationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LineInputMessageRoutingDestination;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Routing( ) const
        {
            return routing_;
        }
        void SetRouting( const Guid& routing )
        {
            routing_ = routing;
        }
        const Guid& Listener( ) const
        {
            return listener_;
        }
        void SetListener( const Guid& listener )
        {
            listener_ = listener;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, ROUTING_FIELD_ID, routing_);
            Bind(statement, LISTENER_FIELD_ID, listener_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LineInputMessageRoutingDestination );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, routing_);
            WriteColumnValue( destination, listener_);
        }
        void AssignTo( Types::LineInputMessageRoutingDestinationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRouting( routing_ );
            destination.SetListener( listener_ );
        }
    };

    using SimpleLineInputMessageRoutingDestinationDataReader = SimpleColumnDataReader<LineInputMessageRoutingDestinationColumnData>;

    class LineInputWhiteListEntryColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid lineInputDevice_;
        FixedDBWideString<128> hostName_;
        Int32 port_ = 0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT LINEINPUTDEVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT HOSTNAME_FIELD_ID = 4;
        static constexpr SQLUSMALLINT PORT_FIELD_ID = 5;

        LineInputWhiteListEntryColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LineInputWhiteListEntry;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& LineInputDevice( ) const
        {
            return lineInputDevice_;
        }
        void SetLineInputDevice( const Guid& lineInputDevice )
        {
            lineInputDevice_ = lineInputDevice;
        }
        const FixedDBWideString<128>& HostName( ) const
        {
            return hostName_;
        }
        void SetHostName( const FixedDBWideString<128>& hostName )
        {
            hostName_ = hostName;
        }
        Int32 Port( ) const
        {
            return port_;
        }
        void SetPort( Int32 port )
        {
            port_ = port;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, LINEINPUTDEVICE_FIELD_ID, lineInputDevice_);
            Bind(statement, HOSTNAME_FIELD_ID, hostName_);
            Bind(statement, PORT_FIELD_ID, port_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LineInputWhiteListEntry );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, lineInputDevice_);
            WriteColumnValue( destination, hostName_);
            WriteColumnValue( destination, port_);
        }
        void AssignTo( Types::LineInputWhiteListEntryObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetLineInputDevice( lineInputDevice_ );
            destination.SetHostName( hostName_ );
            destination.SetPort( port_ );
        }
    };

    using SimpleLineInputWhiteListEntryDataReader = SimpleColumnDataReader<LineInputWhiteListEntryColumnData>;

    class LogApplicationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        FixedDBWideString<127> name_;
        WideString description_;
        SQLLEN descriptionLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT DESCRIPTION_FIELD_ID = 4;

        LogApplicationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LogApplication;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const WideString& Description( ) const
        {
            return description_;
        }
        void SetDescription( const WideString& description )
        {
            description_ = description;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            description_ = statement.GetWideString(DESCRIPTION_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LogApplication );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, description_);
        }
        void AssignTo( Types::LogApplicationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetName( name_ );
            destination.SetDescription( description_ );
        }
    };

    using SimpleLogApplicationDataReader = SimpleColumnDataReader<LogApplicationColumnData>;

    class LogApplicationConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid application_;
        DateTime timestamp_;
        bool finest_ = false;
        bool finer_ = false;
        bool fine_ = false;
        bool info_ = false;
        bool notice_ = false;
        bool warn_ = false;
        bool error_ = false;
        bool severe_ = false;
        bool critical_ = false;
        bool alert_ = false;
        bool fatal_ = false;
        bool emergency_ = false;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT APPLICATION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT FINEST_FIELD_ID = 5;
        static constexpr SQLUSMALLINT FINER_FIELD_ID = 6;
        static constexpr SQLUSMALLINT FINE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT INFO_FIELD_ID = 8;
        static constexpr SQLUSMALLINT NOTICE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT WARN_FIELD_ID = 10;
        static constexpr SQLUSMALLINT ERROR_FIELD_ID = 11;
        static constexpr SQLUSMALLINT SEVERE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT CRITICAL_FIELD_ID = 13;
        static constexpr SQLUSMALLINT ALERT_FIELD_ID = 14;
        static constexpr SQLUSMALLINT FATAL_FIELD_ID = 15;
        static constexpr SQLUSMALLINT EMERGENCY_FIELD_ID = 16;

        LogApplicationConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LogApplicationConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Application( ) const
        {
            return application_;
        }
        void SetApplication( const Guid& application )
        {
            application_ = application;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        bool Finest( ) const
        {
            return finest_;
        }
        void SetFinest( bool finest )
        {
            finest_ = finest;
        }
        bool Finer( ) const
        {
            return finer_;
        }
        void SetFiner( bool finer )
        {
            finer_ = finer;
        }
        bool Fine( ) const
        {
            return fine_;
        }
        void SetFine( bool fine )
        {
            fine_ = fine;
        }
        bool Info( ) const
        {
            return info_;
        }
        void SetInfo( bool info )
        {
            info_ = info;
        }
        bool Notice( ) const
        {
            return notice_;
        }
        void SetNotice( bool notice )
        {
            notice_ = notice;
        }
        bool Warn( ) const
        {
            return warn_;
        }
        void SetWarn( bool warn )
        {
            warn_ = warn;
        }
        bool Error( ) const
        {
            return error_;
        }
        void SetError( bool error )
        {
            error_ = error;
        }
        bool Severe( ) const
        {
            return severe_;
        }
        void SetSevere( bool severe )
        {
            severe_ = severe;
        }
        bool Critical( ) const
        {
            return critical_;
        }
        void SetCritical( bool critical )
        {
            critical_ = critical;
        }
        bool Alert( ) const
        {
            return alert_;
        }
        void SetAlert( bool alert )
        {
            alert_ = alert;
        }
        bool Fatal( ) const
        {
            return fatal_;
        }
        void SetFatal( bool fatal )
        {
            fatal_ = fatal;
        }
        bool Emergency( ) const
        {
            return emergency_;
        }
        void SetEmergency( bool emergency )
        {
            emergency_ = emergency;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, APPLICATION_FIELD_ID, application_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, FINEST_FIELD_ID, finest_);
            Bind(statement, FINER_FIELD_ID, finer_);
            Bind(statement, FINE_FIELD_ID, fine_);
            Bind(statement, INFO_FIELD_ID, info_);
            Bind(statement, NOTICE_FIELD_ID, notice_);
            Bind(statement, WARN_FIELD_ID, warn_);
            Bind(statement, ERROR_FIELD_ID, error_);
            Bind(statement, SEVERE_FIELD_ID, severe_);
            Bind(statement, CRITICAL_FIELD_ID, critical_);
            Bind(statement, ALERT_FIELD_ID, alert_);
            Bind(statement, FATAL_FIELD_ID, fatal_);
            Bind(statement, EMERGENCY_FIELD_ID, emergency_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LogApplicationConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, application_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, finest_);
            WriteColumnValue( destination, finer_);
            WriteColumnValue( destination, fine_);
            WriteColumnValue( destination, info_);
            WriteColumnValue( destination, notice_);
            WriteColumnValue( destination, warn_);
            WriteColumnValue( destination, error_);
            WriteColumnValue( destination, severe_);
            WriteColumnValue( destination, critical_);
            WriteColumnValue( destination, alert_);
            WriteColumnValue( destination, fatal_);
            WriteColumnValue( destination, emergency_);
        }
        void AssignTo( Types::LogApplicationConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetApplication( application_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetFinest( finest_ );
            destination.SetFiner( finer_ );
            destination.SetFine( fine_ );
            destination.SetInfo( info_ );
            destination.SetNotice( notice_ );
            destination.SetWarn( warn_ );
            destination.SetError( error_ );
            destination.SetSevere( severe_ );
            destination.SetCritical( critical_ );
            destination.SetAlert( alert_ );
            destination.SetFatal( fatal_ );
            destination.SetEmergency( emergency_ );
        }
    };

    using SimpleLogApplicationConfigurationDataReader = SimpleColumnDataReader<LogApplicationConfigurationColumnData>;

    class LogHostColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        FixedDBWideString<127> computerName_;
        WideString description_;
        SQLLEN descriptionLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT COMPUTERNAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT DESCRIPTION_FIELD_ID = 4;

        LogHostColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LogHost;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<127>& ComputerName( ) const
        {
            return computerName_;
        }
        void SetComputerName( const FixedDBWideString<127>& computerName )
        {
            computerName_ = computerName;
        }
        const WideString& Description( ) const
        {
            return description_;
        }
        void SetDescription( const WideString& description )
        {
            description_ = description;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, COMPUTERNAME_FIELD_ID, computerName_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            description_ = statement.GetWideString(DESCRIPTION_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LogHost );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, computerName_);
            WriteColumnValue( destination, description_);
        }
        void AssignTo( Types::LogHostObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetComputerName( computerName_ );
            destination.SetDescription( description_ );
        }
    };

    using SimpleLogHostDataReader = SimpleColumnDataReader<LogHostColumnData>;

    class LogHostConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid host_;
        DateTime timestamp_;
        bool finest_ = false;
        bool finer_ = false;
        bool fine_ = false;
        bool info_ = false;
        bool notice_ = false;
        bool warn_ = false;
        bool error_ = false;
        bool severe_ = false;
        bool critical_ = false;
        bool alert_ = false;
        bool fatal_ = false;
        bool emergency_ = false;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT HOST_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT FINEST_FIELD_ID = 5;
        static constexpr SQLUSMALLINT FINER_FIELD_ID = 6;
        static constexpr SQLUSMALLINT FINE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT INFO_FIELD_ID = 8;
        static constexpr SQLUSMALLINT NOTICE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT WARN_FIELD_ID = 10;
        static constexpr SQLUSMALLINT ERROR_FIELD_ID = 11;
        static constexpr SQLUSMALLINT SEVERE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT CRITICAL_FIELD_ID = 13;
        static constexpr SQLUSMALLINT ALERT_FIELD_ID = 14;
        static constexpr SQLUSMALLINT FATAL_FIELD_ID = 15;
        static constexpr SQLUSMALLINT EMERGENCY_FIELD_ID = 16;

        LogHostConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LogHostConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Host( ) const
        {
            return host_;
        }
        void SetHost( const Guid& host )
        {
            host_ = host;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        bool Finest( ) const
        {
            return finest_;
        }
        void SetFinest( bool finest )
        {
            finest_ = finest;
        }
        bool Finer( ) const
        {
            return finer_;
        }
        void SetFiner( bool finer )
        {
            finer_ = finer;
        }
        bool Fine( ) const
        {
            return fine_;
        }
        void SetFine( bool fine )
        {
            fine_ = fine;
        }
        bool Info( ) const
        {
            return info_;
        }
        void SetInfo( bool info )
        {
            info_ = info;
        }
        bool Notice( ) const
        {
            return notice_;
        }
        void SetNotice( bool notice )
        {
            notice_ = notice;
        }
        bool Warn( ) const
        {
            return warn_;
        }
        void SetWarn( bool warn )
        {
            warn_ = warn;
        }
        bool Error( ) const
        {
            return error_;
        }
        void SetError( bool error )
        {
            error_ = error;
        }
        bool Severe( ) const
        {
            return severe_;
        }
        void SetSevere( bool severe )
        {
            severe_ = severe;
        }
        bool Critical( ) const
        {
            return critical_;
        }
        void SetCritical( bool critical )
        {
            critical_ = critical;
        }
        bool Alert( ) const
        {
            return alert_;
        }
        void SetAlert( bool alert )
        {
            alert_ = alert;
        }
        bool Fatal( ) const
        {
            return fatal_;
        }
        void SetFatal( bool fatal )
        {
            fatal_ = fatal;
        }
        bool Emergency( ) const
        {
            return emergency_;
        }
        void SetEmergency( bool emergency )
        {
            emergency_ = emergency;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, HOST_FIELD_ID, host_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, FINEST_FIELD_ID, finest_);
            Bind(statement, FINER_FIELD_ID, finer_);
            Bind(statement, FINE_FIELD_ID, fine_);
            Bind(statement, INFO_FIELD_ID, info_);
            Bind(statement, NOTICE_FIELD_ID, notice_);
            Bind(statement, WARN_FIELD_ID, warn_);
            Bind(statement, ERROR_FIELD_ID, error_);
            Bind(statement, SEVERE_FIELD_ID, severe_);
            Bind(statement, CRITICAL_FIELD_ID, critical_);
            Bind(statement, ALERT_FIELD_ID, alert_);
            Bind(statement, FATAL_FIELD_ID, fatal_);
            Bind(statement, EMERGENCY_FIELD_ID, emergency_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LogHostConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, host_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, finest_);
            WriteColumnValue( destination, finer_);
            WriteColumnValue( destination, fine_);
            WriteColumnValue( destination, info_);
            WriteColumnValue( destination, notice_);
            WriteColumnValue( destination, warn_);
            WriteColumnValue( destination, error_);
            WriteColumnValue( destination, severe_);
            WriteColumnValue( destination, critical_);
            WriteColumnValue( destination, alert_);
            WriteColumnValue( destination, fatal_);
            WriteColumnValue( destination, emergency_);
        }
        void AssignTo( Types::LogHostConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetHost( host_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetFinest( finest_ );
            destination.SetFiner( finer_ );
            destination.SetFine( fine_ );
            destination.SetInfo( info_ );
            destination.SetNotice( notice_ );
            destination.SetWarn( warn_ );
            destination.SetError( error_ );
            destination.SetSevere( severe_ );
            destination.SetCritical( critical_ );
            destination.SetAlert( alert_ );
            destination.SetFatal( fatal_ );
            destination.SetEmergency( emergency_ );
        }
    };

    using SimpleLogHostConfigurationDataReader = SimpleColumnDataReader<LogHostConfigurationColumnData>;

    class LogLocationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        FixedDBWideString<260> fileName_;
        Int32 lineNumber_ = 0;
        WideString namespace_;
        SQLLEN namespaceLength_ = SQL_NULL_DATA;
        WideString className_;
        SQLLEN classNameLength_ = SQL_NULL_DATA;
        FixedDBWideString<255> methodName_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT FILENAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT LINENUMBER_FIELD_ID = 4;
        static constexpr SQLUSMALLINT METHODNAME_FIELD_ID = 5;
        static constexpr SQLUSMALLINT NAMESPACE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT CLASSNAME_FIELD_ID = 7;

        LogLocationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LogLocation;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<260>& FileName( ) const
        {
            return fileName_;
        }
        void SetFileName( const FixedDBWideString<260>& fileName )
        {
            fileName_ = fileName;
        }
        Int32 LineNumber( ) const
        {
            return lineNumber_;
        }
        void SetLineNumber( Int32 lineNumber )
        {
            lineNumber_ = lineNumber;
        }
        const WideString& Namespace( ) const
        {
            return namespace_;
        }
        void SetNamespace( const WideString& namespace__ )
        {
            namespace_ = namespace__;
        }
        const WideString& ClassName( ) const
        {
            return className_;
        }
        void SetClassName( const WideString& className )
        {
            className_ = className;
        }
        const FixedDBWideString<255>& MethodName( ) const
        {
            return methodName_;
        }
        void SetMethodName( const FixedDBWideString<255>& methodName )
        {
            methodName_ = methodName;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, FILENAME_FIELD_ID, fileName_);
            Bind(statement, LINENUMBER_FIELD_ID, lineNumber_);
            Bind(statement, METHODNAME_FIELD_ID, methodName_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            namespace_ = statement.GetWideString(NAMESPACE_FIELD_ID);
            className_ = statement.GetWideString(CLASSNAME_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LogLocation );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, fileName_);
            WriteColumnValue( destination, lineNumber_);
            WriteColumnValue( destination, namespace_);
            WriteColumnValue( destination, className_);
            WriteColumnValue( destination, methodName_);
        }
        void AssignTo( Types::LogLocationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetFileName( fileName_ );
            destination.SetLineNumber( lineNumber_ );
            destination.SetNamespace( namespace_ );
            destination.SetClassName( className_ );
            destination.SetMethodName( methodName_ );
        }
    };

    using SimpleLogLocationDataReader = SimpleColumnDataReader<LogLocationColumnData>;

    class LogProcessColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid application_;
        Guid host_;
        DateTime started_;
        DBDateTime stopped_;
        Int64 processId_ = 0;
        WideString path_;
        SQLLEN pathLength_ = SQL_NULL_DATA;
        FixedDBWideString<127> identity_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT APPLICATION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT HOST_FIELD_ID = 4;
        static constexpr SQLUSMALLINT STARTED_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STOPPED_FIELD_ID = 6;
        static constexpr SQLUSMALLINT PROCESSID_FIELD_ID = 7;
        static constexpr SQLUSMALLINT IDENTITY_FIELD_ID = 8;
        static constexpr SQLUSMALLINT PATH_FIELD_ID = 9;

        LogProcessColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LogProcess;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Application( ) const
        {
            return application_;
        }
        void SetApplication( const Guid& application )
        {
            application_ = application;
        }
        const Guid& Host( ) const
        {
            return host_;
        }
        void SetHost( const Guid& host )
        {
            host_ = host;
        }
        const DateTime& Started( ) const
        {
            return started_;
        }
        void SetStarted( const DateTime& started )
        {
            started_ = started;
        }
        const DBDateTime& Stopped( ) const
        {
            return stopped_;
        }
        void SetStopped( const DBDateTime& stopped )
        {
            stopped_ = stopped;
        }
        Int64 ProcessId( ) const
        {
            return processId_;
        }
        void SetProcessId( Int64 processId )
        {
            processId_ = processId;
        }
        const WideString& Path( ) const
        {
            return path_;
        }
        void SetPath( const WideString& path )
        {
            path_ = path;
        }
        const FixedDBWideString<127>& Identity( ) const
        {
            return identity_;
        }
        void SetIdentity( const FixedDBWideString<127>& identity )
        {
            identity_ = identity;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, APPLICATION_FIELD_ID, application_);
            Bind(statement, HOST_FIELD_ID, host_);
            Bind(statement, STARTED_FIELD_ID, started_);
            Bind(statement, STOPPED_FIELD_ID, stopped_);
            Bind(statement, PROCESSID_FIELD_ID, processId_);
            Bind(statement, IDENTITY_FIELD_ID, identity_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            path_ = statement.GetWideString(PATH_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LogProcess );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, application_);
            WriteColumnValue( destination, host_);
            WriteColumnValue( destination, started_);
            WriteColumnValue( destination, stopped_);
            WriteColumnValue( destination, processId_);
            WriteColumnValue( destination, path_);
            WriteColumnValue( destination, identity_);
        }
        void AssignTo( Types::LogProcessObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetApplication( application_ );
            destination.SetHost( host_ );
            destination.SetStarted( started_ );
            destination.SetStopped( stopped_ );
            destination.SetProcessId( processId_ );
            destination.SetPath( path_ );
            destination.SetIdentity( identity_ );
        }
    };

    using SimpleLogProcessDataReader = SimpleColumnDataReader<LogProcessColumnData>;

    class LogRecordColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid thread_;
        Int64 sequenceNumber_ = 0;
        Types::LogLevel level_ = Types::LogLevel::Unknown;
        DateTime timestamp_;
        Int32 depth_ = 0;
        Guid location_;
        WideString message_;
        SQLLEN messageLength_ = SQL_NULL_DATA;
        WideString exceptionString_;
        SQLLEN exceptionStringLength_ = SQL_NULL_DATA;
        Binary propertiesData_;
        SQLLEN propertiesDataLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT THREAD_FIELD_ID = 3;
        static constexpr SQLUSMALLINT SEQUENCENUMBER_FIELD_ID = 4;
        static constexpr SQLUSMALLINT LEVEL_FIELD_ID = 5;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 6;
        static constexpr SQLUSMALLINT DEPTH_FIELD_ID = 7;
        static constexpr SQLUSMALLINT LOCATION_FIELD_ID = 8;
        static constexpr SQLUSMALLINT MESSAGE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT EXCEPTIONSTRING_FIELD_ID = 10;
        static constexpr SQLUSMALLINT PROPERTIESDATA_FIELD_ID = 11;

        LogRecordColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LogRecord;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Thread( ) const
        {
            return thread_;
        }
        void SetThread( const Guid& thread )
        {
            thread_ = thread;
        }
        Int64 SequenceNumber( ) const
        {
            return sequenceNumber_;
        }
        void SetSequenceNumber( Int64 sequenceNumber )
        {
            sequenceNumber_ = sequenceNumber;
        }
        Types::LogLevel Level( ) const
        {
            return level_;
        }
        void SetLevel( Types::LogLevel level )
        {
            level_ = level;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Int32 Depth( ) const
        {
            return depth_;
        }
        void SetDepth( Int32 depth )
        {
            depth_ = depth;
        }
        const Guid& Location( ) const
        {
            return location_;
        }
        void SetLocation( const Guid& location )
        {
            location_ = location;
        }
        const WideString& Message( ) const
        {
            return message_;
        }
        void SetMessage( const WideString& message )
        {
            message_ = message;
        }
        const WideString& ExceptionString( ) const
        {
            return exceptionString_;
        }
        void SetExceptionString( const WideString& exceptionString )
        {
            exceptionString_ = exceptionString;
        }
        const Binary& PropertiesData( ) const
        {
            return propertiesData_;
        }
        void SetPropertiesData( const Binary& propertiesData )
        {
            propertiesData_ = propertiesData;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, THREAD_FIELD_ID, thread_);
            Bind(statement, SEQUENCENUMBER_FIELD_ID, sequenceNumber_);
            Bind(statement, LEVEL_FIELD_ID, level_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEPTH_FIELD_ID, depth_);
            Bind(statement, LOCATION_FIELD_ID, location_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            message_ = statement.GetWideString(MESSAGE_FIELD_ID);
            exceptionString_ = statement.GetWideString(EXCEPTIONSTRING_FIELD_ID);
            propertiesData_ = statement.GetBinary(PROPERTIESDATA_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LogRecord );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, thread_);
            WriteColumnValue( destination, sequenceNumber_);
            WriteColumnValue( destination, level_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, depth_);
            WriteColumnValue( destination, location_);
            WriteColumnValue( destination, message_);
            WriteColumnValue( destination, exceptionString_);
            WriteColumnValue( destination, propertiesData_);
        }
        void AssignTo( Types::LogRecordObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetThread( thread_ );
            destination.SetSequenceNumber( sequenceNumber_ );
            destination.SetLevel( level_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDepth( depth_ );
            destination.SetLocation( location_ );
            destination.SetMessage( message_ );
            destination.SetExceptionString( exceptionString_ );
            destination.SetPropertiesData( propertiesData_ );
        }
    };

    using SimpleLogRecordDataReader = SimpleColumnDataReader<LogRecordColumnData>;

    class LogThreadColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid process_;
        DateTime started_;
        DBDateTime stopped_;
        Int64 threadId_ = 0;
        FixedDBWideString<127> name_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT PROCESS_FIELD_ID = 3;
        static constexpr SQLUSMALLINT STARTED_FIELD_ID = 4;
        static constexpr SQLUSMALLINT STOPPED_FIELD_ID = 5;
        static constexpr SQLUSMALLINT THREADID_FIELD_ID = 6;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 7;

        LogThreadColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LogThread;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Process( ) const
        {
            return process_;
        }
        void SetProcess( const Guid& process )
        {
            process_ = process;
        }
        const DateTime& Started( ) const
        {
            return started_;
        }
        void SetStarted( const DateTime& started )
        {
            started_ = started;
        }
        const DBDateTime& Stopped( ) const
        {
            return stopped_;
        }
        void SetStopped( const DBDateTime& stopped )
        {
            stopped_ = stopped;
        }
        Int64 ThreadId( ) const
        {
            return threadId_;
        }
        void SetThreadId( Int64 threadId )
        {
            threadId_ = threadId;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, PROCESS_FIELD_ID, process_);
            Bind(statement, STARTED_FIELD_ID, started_);
            Bind(statement, STOPPED_FIELD_ID, stopped_);
            Bind(statement, THREADID_FIELD_ID, threadId_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LogThread );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, process_);
            WriteColumnValue( destination, started_);
            WriteColumnValue( destination, stopped_);
            WriteColumnValue( destination, threadId_);
            WriteColumnValue( destination, name_);
        }
        void AssignTo( Types::LogThreadObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetProcess( process_ );
            destination.SetStarted( started_ );
            destination.SetStopped( stopped_ );
            destination.SetThreadId( threadId_ );
            destination.SetName( name_ );
        }
    };

    using SimpleLogThreadDataReader = SimpleColumnDataReader<LogThreadColumnData>;

    class LogTraceEntryColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid thread_;
        Int64 sequenceNumber_ = 0;
        Guid location_;
        Int32 depth_ = 0;
        DateTime entered_;
        DBDateTime ended_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT THREAD_FIELD_ID = 3;
        static constexpr SQLUSMALLINT SEQUENCENUMBER_FIELD_ID = 4;
        static constexpr SQLUSMALLINT LOCATION_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEPTH_FIELD_ID = 6;
        static constexpr SQLUSMALLINT ENTERED_FIELD_ID = 7;
        static constexpr SQLUSMALLINT ENDED_FIELD_ID = 8;

        LogTraceEntryColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::LogTraceEntry;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Thread( ) const
        {
            return thread_;
        }
        void SetThread( const Guid& thread )
        {
            thread_ = thread;
        }
        Int64 SequenceNumber( ) const
        {
            return sequenceNumber_;
        }
        void SetSequenceNumber( Int64 sequenceNumber )
        {
            sequenceNumber_ = sequenceNumber;
        }
        const Guid& Location( ) const
        {
            return location_;
        }
        void SetLocation( const Guid& location )
        {
            location_ = location;
        }
        Int32 Depth( ) const
        {
            return depth_;
        }
        void SetDepth( Int32 depth )
        {
            depth_ = depth;
        }
        const DateTime& Entered( ) const
        {
            return entered_;
        }
        void SetEntered( const DateTime& entered )
        {
            entered_ = entered;
        }
        const DBDateTime& Ended( ) const
        {
            return ended_;
        }
        void SetEnded( const DBDateTime& ended )
        {
            ended_ = ended;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, THREAD_FIELD_ID, thread_);
            Bind(statement, SEQUENCENUMBER_FIELD_ID, sequenceNumber_);
            Bind(statement, LOCATION_FIELD_ID, location_);
            Bind(statement, DEPTH_FIELD_ID, depth_);
            Bind(statement, ENTERED_FIELD_ID, entered_);
            Bind(statement, ENDED_FIELD_ID, ended_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::LogTraceEntry );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, thread_);
            WriteColumnValue( destination, sequenceNumber_);
            WriteColumnValue( destination, location_);
            WriteColumnValue( destination, depth_);
            WriteColumnValue( destination, entered_);
            WriteColumnValue( destination, ended_);
        }
        void AssignTo( Types::LogTraceEntryObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetThread( thread_ );
            destination.SetSequenceNumber( sequenceNumber_ );
            destination.SetLocation( location_ );
            destination.SetDepth( depth_ );
            destination.SetEntered( entered_ );
            destination.SetEnded( ended_ );
        }
    };

    using SimpleLogTraceEntryDataReader = SimpleColumnDataReader<LogTraceEntryColumnData>;

    class MapElementColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid item_;
        Types::MapElementType elementType_ = Types::MapElementType::Unknown;
        double latitude_ = 0.0;
        double longitude_ = 0.0;
        double angle_ = 0.0;
        double left_ = 0.0;
        double top_ = 0.0;
        double width_ = 0.0;
        double height_ = 0.0;
        FixedDBWideString<127> label_;
        Binary data_;
        SQLLEN dataLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ITEM_FIELD_ID = 3;
        static constexpr SQLUSMALLINT ELEMENTTYPE_FIELD_ID = 4;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT ANGLE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT LEFT_FIELD_ID = 8;
        static constexpr SQLUSMALLINT TOP_FIELD_ID = 9;
        static constexpr SQLUSMALLINT WIDTH_FIELD_ID = 10;
        static constexpr SQLUSMALLINT HEIGHT_FIELD_ID = 11;
        static constexpr SQLUSMALLINT LABEL_FIELD_ID = 12;
        static constexpr SQLUSMALLINT DATA_FIELD_ID = 13;

        MapElementColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::MapElement;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Item( ) const
        {
            return item_;
        }
        void SetItem( const Guid& item )
        {
            item_ = item;
        }
        Types::MapElementType ElementType( ) const
        {
            return elementType_;
        }
        void SetElementType( Types::MapElementType elementType )
        {
            elementType_ = elementType;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Angle( ) const
        {
            return angle_;
        }
        void SetAngle( double angle )
        {
            angle_ = angle;
        }
        double Left( ) const
        {
            return left_;
        }
        void SetLeft( double left )
        {
            left_ = left;
        }
        double Top( ) const
        {
            return top_;
        }
        void SetTop( double top )
        {
            top_ = top;
        }
        double Width( ) const
        {
            return width_;
        }
        void SetWidth( double width )
        {
            width_ = width;
        }
        double Height( ) const
        {
            return height_;
        }
        void SetHeight( double height )
        {
            height_ = height;
        }
        const FixedDBWideString<127>& Label( ) const
        {
            return label_;
        }
        void SetLabel( const FixedDBWideString<127>& label )
        {
            label_ = label;
        }
        const Binary& Data( ) const
        {
            return data_;
        }
        void SetData( const Binary& data )
        {
            data_ = data;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, ITEM_FIELD_ID, item_);
            Bind(statement, ELEMENTTYPE_FIELD_ID, elementType_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, ANGLE_FIELD_ID, angle_);
            Bind(statement, LEFT_FIELD_ID, left_);
            Bind(statement, TOP_FIELD_ID, top_);
            Bind(statement, WIDTH_FIELD_ID, width_);
            Bind(statement, HEIGHT_FIELD_ID, height_);
            Bind(statement, LABEL_FIELD_ID, label_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            data_ = statement.GetBinary(DATA_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::MapElement );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, item_);
            WriteColumnValue( destination, elementType_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, angle_);
            WriteColumnValue( destination, left_);
            WriteColumnValue( destination, top_);
            WriteColumnValue( destination, width_);
            WriteColumnValue( destination, height_);
            WriteColumnValue( destination, label_);
            WriteColumnValue( destination, data_);
        }
        void AssignTo( Types::MapElementObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetItem( item_ );
            destination.SetElementType( elementType_ );
            destination.SetLatitude( latitude_ );
            destination.SetLongitude( longitude_ );
            destination.SetAngle( angle_ );
            destination.SetLeft( left_ );
            destination.SetTop( top_ );
            destination.SetWidth( width_ );
            destination.SetHeight( height_ );
            destination.SetLabel( label_ );
            destination.SetData( data_ );
        }
    };

    using SimpleMapElementDataReader = SimpleColumnDataReader<MapElementColumnData>;

    class MapInfoColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Int32 scale_ = 0;
        double latitude_ = 0.0;
        double longitude_ = 0.0;
        double northWestLatitude_ = 0.0;
        double northWestLongitude_ = 0.0;
        double southEastLatitude_ = 0.0;
        double southEastLongitude_ = 0.0;
        Binary image_;
        SQLLEN imageLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT SCALE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 4;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT NORTHWESTLATITUDE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT NORTHWESTLONGITUDE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT SOUTHEASTLATITUDE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT SOUTHEASTLONGITUDE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT IMAGE_FIELD_ID = 10;

        MapInfoColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::MapInfo;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        Int32 Scale( ) const
        {
            return scale_;
        }
        void SetScale( Int32 scale )
        {
            scale_ = scale;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double NorthWestLatitude( ) const
        {
            return northWestLatitude_;
        }
        void SetNorthWestLatitude( double northWestLatitude )
        {
            northWestLatitude_ = northWestLatitude;
        }
        double NorthWestLongitude( ) const
        {
            return northWestLongitude_;
        }
        void SetNorthWestLongitude( double northWestLongitude )
        {
            northWestLongitude_ = northWestLongitude;
        }
        double SouthEastLatitude( ) const
        {
            return southEastLatitude_;
        }
        void SetSouthEastLatitude( double southEastLatitude )
        {
            southEastLatitude_ = southEastLatitude;
        }
        double SouthEastLongitude( ) const
        {
            return southEastLongitude_;
        }
        void SetSouthEastLongitude( double southEastLongitude )
        {
            southEastLongitude_ = southEastLongitude;
        }
        const Binary& Image( ) const
        {
            return image_;
        }
        void SetImage( const Binary& image )
        {
            image_ = image;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, SCALE_FIELD_ID, scale_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, NORTHWESTLATITUDE_FIELD_ID, northWestLatitude_);
            Bind(statement, NORTHWESTLONGITUDE_FIELD_ID, northWestLongitude_);
            Bind(statement, SOUTHEASTLATITUDE_FIELD_ID, southEastLatitude_);
            Bind(statement, SOUTHEASTLONGITUDE_FIELD_ID, southEastLongitude_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            image_ = statement.GetBinary(IMAGE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::MapInfo );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, scale_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, northWestLatitude_);
            WriteColumnValue( destination, northWestLongitude_);
            WriteColumnValue( destination, southEastLatitude_);
            WriteColumnValue( destination, southEastLongitude_);
            WriteColumnValue( destination, image_);
        }
        void AssignTo( Types::MapInfoObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetScale( scale_ );
            destination.SetLatitude( latitude_ );
            destination.SetLongitude( longitude_ );
            destination.SetNorthWestLatitude( northWestLatitude_ );
            destination.SetNorthWestLongitude( northWestLongitude_ );
            destination.SetSouthEastLatitude( southEastLatitude_ );
            destination.SetSouthEastLongitude( southEastLongitude_ );
            destination.SetImage( image_ );
        }
    };

    using SimpleMapInfoDataReader = SimpleColumnDataReader<MapInfoColumnData>;

    class MapServiceOptionsColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        DateTime timestamp_;
        FixedDBWideString<127> ipAddress_;
        Int32 port_ = 0;
        double imageScaleFactorX_ = 0.0;
        double imageOffsetX_ = 0.0;
        double imageScaleFactorY_ = 0.0;
        double imageOffsetY_ = 0.0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 3;
        static constexpr SQLUSMALLINT IPADDRESS_FIELD_ID = 4;
        static constexpr SQLUSMALLINT PORT_FIELD_ID = 5;
        static constexpr SQLUSMALLINT IMAGESCALEFACTORX_FIELD_ID = 6;
        static constexpr SQLUSMALLINT IMAGEOFFSETX_FIELD_ID = 7;
        static constexpr SQLUSMALLINT IMAGESCALEFACTORY_FIELD_ID = 8;
        static constexpr SQLUSMALLINT IMAGEOFFSETY_FIELD_ID = 9;

        MapServiceOptionsColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::MapServiceOptions;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const FixedDBWideString<127>& IpAddress( ) const
        {
            return ipAddress_;
        }
        void SetIpAddress( const FixedDBWideString<127>& ipAddress )
        {
            ipAddress_ = ipAddress;
        }
        Int32 Port( ) const
        {
            return port_;
        }
        void SetPort( Int32 port )
        {
            port_ = port;
        }
        double ImageScaleFactorX( ) const
        {
            return imageScaleFactorX_;
        }
        void SetImageScaleFactorX( double imageScaleFactorX )
        {
            imageScaleFactorX_ = imageScaleFactorX;
        }
        double ImageOffsetX( ) const
        {
            return imageOffsetX_;
        }
        void SetImageOffsetX( double imageOffsetX )
        {
            imageOffsetX_ = imageOffsetX;
        }
        double ImageScaleFactorY( ) const
        {
            return imageScaleFactorY_;
        }
        void SetImageScaleFactorY( double imageScaleFactorY )
        {
            imageScaleFactorY_ = imageScaleFactorY;
        }
        double ImageOffsetY( ) const
        {
            return imageOffsetY_;
        }
        void SetImageOffsetY( double imageOffsetY )
        {
            imageOffsetY_ = imageOffsetY;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, IPADDRESS_FIELD_ID, ipAddress_);
            Bind(statement, PORT_FIELD_ID, port_);
            Bind(statement, IMAGESCALEFACTORX_FIELD_ID, imageScaleFactorX_);
            Bind(statement, IMAGEOFFSETX_FIELD_ID, imageOffsetX_);
            Bind(statement, IMAGESCALEFACTORY_FIELD_ID, imageScaleFactorY_);
            Bind(statement, IMAGEOFFSETY_FIELD_ID, imageOffsetY_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::MapServiceOptions );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, ipAddress_);
            WriteColumnValue( destination, port_);
            WriteColumnValue( destination, imageScaleFactorX_);
            WriteColumnValue( destination, imageOffsetX_);
            WriteColumnValue( destination, imageScaleFactorY_);
            WriteColumnValue( destination, imageOffsetY_);
        }
        void AssignTo( Types::MapServiceOptionsObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetIpAddress( ipAddress_ );
            destination.SetPort( port_ );
            destination.SetImageScaleFactorX( imageScaleFactorX_ );
            destination.SetImageOffsetX( imageOffsetX_ );
            destination.SetImageScaleFactorY( imageScaleFactorY_ );
            destination.SetImageOffsetY( imageOffsetY_ );
        }
    };

    using SimpleMapServiceOptionsDataReader = SimpleColumnDataReader<MapServiceOptionsColumnData>;

    class MaritimeIdentificationDigitsColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Int32 code_ = 0;
        Guid country_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT CODE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT COUNTRY_FIELD_ID = 4;

        MaritimeIdentificationDigitsColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::MaritimeIdentificationDigits;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        Int32 Code( ) const
        {
            return code_;
        }
        void SetCode( Int32 code )
        {
            code_ = code;
        }
        const Guid& Country( ) const
        {
            return country_;
        }
        void SetCountry( const Guid& country )
        {
            country_ = country;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, CODE_FIELD_ID, code_);
            Bind(statement, COUNTRY_FIELD_ID, country_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::MaritimeIdentificationDigits );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, code_);
            WriteColumnValue( destination, country_);
        }
        void AssignTo( Types::MaritimeIdentificationDigitsObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetCode( code_ );
            destination.SetCountry( country_ );
        }
    };

    using SimpleMaritimeIdentificationDigitsDataReader = SimpleColumnDataReader<MaritimeIdentificationDigitsColumnData>;

    class MediaProxySessionColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid service_;
        FixedDBWideString<128> name_;
        Guid enabledTimeseries_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT SERVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 4;
        static constexpr SQLUSMALLINT ENABLEDTIMESERIES_FIELD_ID = 5;

        MediaProxySessionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::MediaProxySession;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Service( ) const
        {
            return service_;
        }
        void SetService( const Guid& service )
        {
            service_ = service;
        }
        const FixedDBWideString<128>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<128>& name )
        {
            name_ = name;
        }
        const Guid& EnabledTimeseries( ) const
        {
            return enabledTimeseries_;
        }
        void SetEnabledTimeseries( const Guid& enabledTimeseries )
        {
            enabledTimeseries_ = enabledTimeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, SERVICE_FIELD_ID, service_);
            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, ENABLEDTIMESERIES_FIELD_ID, enabledTimeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::MediaProxySession );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, service_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, enabledTimeseries_);
        }
        void AssignTo( Types::MediaProxySessionObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetService( service_ );
            destination.SetName( name_ );
            destination.SetEnabledTimeseries( enabledTimeseries_ );
        }
    };

    using SimpleMediaProxySessionDataReader = SimpleColumnDataReader<MediaProxySessionColumnData>;

    class MediaProxySessionFileColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid proxySession_;
        DateTime timestamp_;
        FixedDBWideString<127> streamName_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT PROXYSESSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT STREAMNAME_FIELD_ID = 5;

        MediaProxySessionFileColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::MediaProxySessionFile;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& ProxySession( ) const
        {
            return proxySession_;
        }
        void SetProxySession( const Guid& proxySession )
        {
            proxySession_ = proxySession;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const FixedDBWideString<127>& StreamName( ) const
        {
            return streamName_;
        }
        void SetStreamName( const FixedDBWideString<127>& streamName )
        {
            streamName_ = streamName;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, PROXYSESSION_FIELD_ID, proxySession_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, STREAMNAME_FIELD_ID, streamName_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::MediaProxySessionFile );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, proxySession_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, streamName_);
        }
        void AssignTo( Types::MediaProxySessionFileObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetProxySession( proxySession_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetStreamName( streamName_ );
        }
    };

    using SimpleMediaProxySessionFileDataReader = SimpleColumnDataReader<MediaProxySessionFileColumnData>;

    class MediaProxySessionOptionsColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid proxySession_;
        DateTime timestamp_;
        FixedDBWideString<255> sourceStreamUrl_;
        FixedDBWideString<255> streamName_;
        Types::MediaProxySessionMode mode_ = Types::MediaProxySessionMode::Unknown;
        Int32 tunnelOverHTTPPortNumber_ = 0;
        FixedDBWideString<128> username_;
        FixedDBWideString<128> password_;
        Int32 recorderPortNumber_ = 0;
        Types::MediaProxySessionType sessionType_ = Types::MediaProxySessionType::Unknown;
        TimeSpan maxFileTime_;
        TimeSpan maxFileRetention_;
        FixedDBWideString<260> videoDirectory_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT PROXYSESSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT SOURCESTREAMURL_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STREAMNAME_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MODE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT TUNNELOVERHTTPPORTNUMBER_FIELD_ID = 8;
        static constexpr SQLUSMALLINT USERNAME_FIELD_ID = 9;
        static constexpr SQLUSMALLINT PASSWORD_FIELD_ID = 10;
        static constexpr SQLUSMALLINT RECORDERPORTNUMBER_FIELD_ID = 11;
        static constexpr SQLUSMALLINT SESSIONTYPE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT MAXFILETIME_FIELD_ID = 13;
        static constexpr SQLUSMALLINT MAXFILERETENTION_FIELD_ID = 14;
        static constexpr SQLUSMALLINT VIDEODIRECTORY_FIELD_ID = 15;

        MediaProxySessionOptionsColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::MediaProxySessionOptions;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& ProxySession( ) const
        {
            return proxySession_;
        }
        void SetProxySession( const Guid& proxySession )
        {
            proxySession_ = proxySession;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const FixedDBWideString<255>& SourceStreamUrl( ) const
        {
            return sourceStreamUrl_;
        }
        void SetSourceStreamUrl( const FixedDBWideString<255>& sourceStreamUrl )
        {
            sourceStreamUrl_ = sourceStreamUrl;
        }
        const FixedDBWideString<255>& StreamName( ) const
        {
            return streamName_;
        }
        void SetStreamName( const FixedDBWideString<255>& streamName )
        {
            streamName_ = streamName;
        }
        Types::MediaProxySessionMode Mode( ) const
        {
            return mode_;
        }
        void SetMode( Types::MediaProxySessionMode mode )
        {
            mode_ = mode;
        }
        Int32 TunnelOverHTTPPortNumber( ) const
        {
            return tunnelOverHTTPPortNumber_;
        }
        void SetTunnelOverHTTPPortNumber( Int32 tunnelOverHTTPPortNumber )
        {
            tunnelOverHTTPPortNumber_ = tunnelOverHTTPPortNumber;
        }
        const FixedDBWideString<128>& Username( ) const
        {
            return username_;
        }
        void SetUsername( const FixedDBWideString<128>& username )
        {
            username_ = username;
        }
        const FixedDBWideString<128>& Password( ) const
        {
            return password_;
        }
        void SetPassword( const FixedDBWideString<128>& password )
        {
            password_ = password;
        }
        Int32 RecorderPortNumber( ) const
        {
            return recorderPortNumber_;
        }
        void SetRecorderPortNumber( Int32 recorderPortNumber )
        {
            recorderPortNumber_ = recorderPortNumber;
        }
        Types::MediaProxySessionType SessionType( ) const
        {
            return sessionType_;
        }
        void SetSessionType( Types::MediaProxySessionType sessionType )
        {
            sessionType_ = sessionType;
        }
        const TimeSpan& MaxFileTime( ) const
        {
            return maxFileTime_;
        }
        void SetMaxFileTime( const TimeSpan& maxFileTime )
        {
            maxFileTime_ = maxFileTime;
        }
        const TimeSpan& MaxFileRetention( ) const
        {
            return maxFileRetention_;
        }
        void SetMaxFileRetention( const TimeSpan& maxFileRetention )
        {
            maxFileRetention_ = maxFileRetention;
        }
        const FixedDBWideString<260>& VideoDirectory( ) const
        {
            return videoDirectory_;
        }
        void SetVideoDirectory( const FixedDBWideString<260>& videoDirectory )
        {
            videoDirectory_ = videoDirectory;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, PROXYSESSION_FIELD_ID, proxySession_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, SOURCESTREAMURL_FIELD_ID, sourceStreamUrl_);
            Bind(statement, STREAMNAME_FIELD_ID, streamName_);
            Bind(statement, MODE_FIELD_ID, mode_);
            Bind(statement, TUNNELOVERHTTPPORTNUMBER_FIELD_ID, tunnelOverHTTPPortNumber_);
            Bind(statement, USERNAME_FIELD_ID, username_);
            Bind(statement, PASSWORD_FIELD_ID, password_);
            Bind(statement, RECORDERPORTNUMBER_FIELD_ID, recorderPortNumber_);
            Bind(statement, SESSIONTYPE_FIELD_ID, sessionType_);
            Bind(statement, MAXFILETIME_FIELD_ID, maxFileTime_);
            Bind(statement, MAXFILERETENTION_FIELD_ID, maxFileRetention_);
            Bind(statement, VIDEODIRECTORY_FIELD_ID, videoDirectory_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::MediaProxySessionOptions );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, proxySession_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, sourceStreamUrl_);
            WriteColumnValue( destination, streamName_);
            WriteColumnValue( destination, mode_);
            WriteColumnValue( destination, tunnelOverHTTPPortNumber_);
            WriteColumnValue( destination, username_);
            WriteColumnValue( destination, password_);
            WriteColumnValue( destination, recorderPortNumber_);
            WriteColumnValue( destination, sessionType_);
            WriteColumnValue( destination, maxFileTime_);
            WriteColumnValue( destination, maxFileRetention_);
            WriteColumnValue( destination, videoDirectory_);
        }
        void AssignTo( Types::MediaProxySessionOptionsObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetProxySession( proxySession_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetSourceStreamUrl( sourceStreamUrl_ );
            destination.SetStreamName( streamName_ );
            destination.SetMode( mode_ );
            destination.SetTunnelOverHTTPPortNumber( tunnelOverHTTPPortNumber_ );
            destination.SetUsername( username_ );
            destination.SetPassword( password_ );
            destination.SetRecorderPortNumber( recorderPortNumber_ );
            destination.SetSessionType( sessionType_ );
            destination.SetMaxFileTime( maxFileTime_ );
            destination.SetMaxFileRetention( maxFileRetention_ );
            destination.SetVideoDirectory( videoDirectory_ );
        }
    };

    using SimpleMediaProxySessionOptionsDataReader = SimpleColumnDataReader<MediaProxySessionOptionsColumnData>;

    class MediaServiceColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid enabledTimeseries_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ENABLEDTIMESERIES_FIELD_ID = 3;

        MediaServiceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::MediaService;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& EnabledTimeseries( ) const
        {
            return enabledTimeseries_;
        }
        void SetEnabledTimeseries( const Guid& enabledTimeseries )
        {
            enabledTimeseries_ = enabledTimeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, ENABLEDTIMESERIES_FIELD_ID, enabledTimeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::MediaService );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, enabledTimeseries_);
        }
        void AssignTo( Types::MediaServiceObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetEnabledTimeseries( enabledTimeseries_ );
        }
    };

    using SimpleMediaServiceDataReader = SimpleColumnDataReader<MediaServiceColumnData>;

    class MediaServiceOptionsColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid mediaService_;
        DateTime timestamp_;
        Int32 rtspPortNumber_ = 0;
        Int32 httpPortNumber_ = 0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT MEDIASERVICE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT RTSPPORTNUMBER_FIELD_ID = 5;
        static constexpr SQLUSMALLINT HTTPPORTNUMBER_FIELD_ID = 6;

        MediaServiceOptionsColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::MediaServiceOptions;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& MediaService( ) const
        {
            return mediaService_;
        }
        void SetMediaService( const Guid& mediaService )
        {
            mediaService_ = mediaService;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Int32 RtspPortNumber( ) const
        {
            return rtspPortNumber_;
        }
        void SetRtspPortNumber( Int32 rtspPortNumber )
        {
            rtspPortNumber_ = rtspPortNumber;
        }
        Int32 HttpPortNumber( ) const
        {
            return httpPortNumber_;
        }
        void SetHttpPortNumber( Int32 httpPortNumber )
        {
            httpPortNumber_ = httpPortNumber;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, MEDIASERVICE_FIELD_ID, mediaService_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, RTSPPORTNUMBER_FIELD_ID, rtspPortNumber_);
            Bind(statement, HTTPPORTNUMBER_FIELD_ID, httpPortNumber_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::MediaServiceOptions );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, mediaService_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, rtspPortNumber_);
            WriteColumnValue( destination, httpPortNumber_);
        }
        void AssignTo( Types::MediaServiceOptionsObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetMediaService( mediaService_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetRtspPortNumber( rtspPortNumber_ );
            destination.SetHttpPortNumber( httpPortNumber_ );
        }
    };

    using SimpleMediaServiceOptionsDataReader = SimpleColumnDataReader<MediaServiceOptionsColumnData>;

    class NamespaceElementColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
        Guid namespace_;
        FixedDBWideString<127> name_;
        WideString description_;
        SQLLEN descriptionLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT NAMESPACE_FIELD_ID = 4;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DESCRIPTION_FIELD_ID = 6;

        NamespaceElementColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::NamespaceElement;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Namespace( ) const
        {
            return namespace_;
        }
        void SetNamespace( const Guid& namespace__ )
        {
            namespace_ = namespace__;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const WideString& Description( ) const
        {
            return description_;
        }
        void SetDescription( const WideString& description )
        {
            description_ = description;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, NAMESPACE_FIELD_ID, namespace_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            description_ = statement.GetWideString(DESCRIPTION_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::NamespaceElement );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, namespace_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, description_);
        }
        void AssignTo( Types::NamespaceElementObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetNamespace( namespace_ );
            destination.SetName( name_ );
            destination.SetDescription( description_ );
        }
    };

    using SimpleNamespaceElementDataReader = SimpleColumnDataReader<NamespaceElementColumnData>;

    class ElementTypeColumnData : public NamespaceElementColumnData
    {
    public:
        using Base = NamespaceElementColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        ElementTypeColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ElementType;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::ElementTypeObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::NamespaceElementObject&>( destination ) );
        }
    };

    using SimpleElementTypeDataReader = SimpleColumnDataReader<ElementTypeColumnData>;

    class NamespaceColumnData : public NamespaceElementColumnData
    {
    public:
        using Base = NamespaceElementColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        NamespaceColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Namespace;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::NamespaceObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::NamespaceElementObject&>( destination ) );
        }
    };

    using SimpleNamespaceDataReader = SimpleColumnDataReader<NamespaceColumnData>;

    class OilSpillColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid oilSpillDetector_;
        DateTime timestamp_;
        double oilArea_ = 0.0;
        Binary shape_;
        SQLLEN shapeLength_ = SQL_NULL_DATA;
        Binary bSI_;
        SQLLEN bSILength_ = SQL_NULL_DATA;
        Binary oil_;
        SQLLEN oilLength_ = SQL_NULL_DATA;
        Binary trace_;
        SQLLEN traceLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT OILSPILLDETECTOR_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT OILAREA_FIELD_ID = 5;
        static constexpr SQLUSMALLINT SHAPE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT BSI_FIELD_ID = 7;
        static constexpr SQLUSMALLINT OIL_FIELD_ID = 8;
        static constexpr SQLUSMALLINT TRACE_FIELD_ID = 9;

        OilSpillColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::OilSpill;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& OilSpillDetector( ) const
        {
            return oilSpillDetector_;
        }
        void SetOilSpillDetector( const Guid& oilSpillDetector )
        {
            oilSpillDetector_ = oilSpillDetector;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        double OilArea( ) const
        {
            return oilArea_;
        }
        void SetOilArea( double oilArea )
        {
            oilArea_ = oilArea;
        }
        const Binary& Shape( ) const
        {
            return shape_;
        }
        void SetShape( const Binary& shape )
        {
            shape_ = shape;
        }
        const Binary& BSI( ) const
        {
            return bSI_;
        }
        void SetBSI( const Binary& bSI )
        {
            bSI_ = bSI;
        }
        const Binary& Oil( ) const
        {
            return oil_;
        }
        void SetOil( const Binary& oil )
        {
            oil_ = oil;
        }
        const Binary& Trace( ) const
        {
            return trace_;
        }
        void SetTrace( const Binary& trace )
        {
            trace_ = trace;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, OILSPILLDETECTOR_FIELD_ID, oilSpillDetector_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, OILAREA_FIELD_ID, oilArea_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            shape_ = statement.GetBinary(SHAPE_FIELD_ID);
            bSI_ = statement.GetBinary(BSI_FIELD_ID);
            oil_ = statement.GetBinary(OIL_FIELD_ID);
            trace_ = statement.GetBinary(TRACE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::OilSpill );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, oilSpillDetector_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, oilArea_);
            WriteColumnValue( destination, shape_);
            WriteColumnValue( destination, bSI_);
            WriteColumnValue( destination, oil_);
            WriteColumnValue( destination, trace_);
        }
        void AssignTo( Types::OilSpillObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetOilSpillDetector( oilSpillDetector_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetOilArea( oilArea_ );
            destination.SetShape( shape_ );
            destination.SetBSI( bSI_ );
            destination.SetOil( oil_ );
            destination.SetTrace( trace_ );
        }
    };

    using SimpleOilSpillDataReader = SimpleColumnDataReader<OilSpillColumnData>;

    class OilSpillDetectorCommandColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid oilSpillDetector_;
        DateTime timestamp_;
        Types::DeviceCommandSourceType deviceCommandSourceType_ = Types::DeviceCommandSourceType::Unknown;
        Guid deviceCommandSourceId_;
        Guid reply_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT OILSPILLDETECTOR_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCETYPE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCEID_FIELD_ID = 6;
        static constexpr SQLUSMALLINT REPLY_FIELD_ID = 7;

        OilSpillDetectorCommandColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::OilSpillDetectorCommand;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& OilSpillDetector( ) const
        {
            return oilSpillDetector_;
        }
        void SetOilSpillDetector( const Guid& oilSpillDetector )
        {
            oilSpillDetector_ = oilSpillDetector;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::DeviceCommandSourceType DeviceCommandSourceType( ) const
        {
            return deviceCommandSourceType_;
        }
        void SetDeviceCommandSourceType( Types::DeviceCommandSourceType deviceCommandSourceType )
        {
            deviceCommandSourceType_ = deviceCommandSourceType;
        }
        const Guid& DeviceCommandSourceId( ) const
        {
            return deviceCommandSourceId_;
        }
        void SetDeviceCommandSourceId( const Guid& deviceCommandSourceId )
        {
            deviceCommandSourceId_ = deviceCommandSourceId;
        }
        const Guid& Reply( ) const
        {
            return reply_;
        }
        void SetReply( const Guid& reply )
        {
            reply_ = reply;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, OILSPILLDETECTOR_FIELD_ID, oilSpillDetector_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEVICECOMMANDSOURCETYPE_FIELD_ID, deviceCommandSourceType_);
            Bind(statement, DEVICECOMMANDSOURCEID_FIELD_ID, deviceCommandSourceId_);
            Bind(statement, REPLY_FIELD_ID, reply_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::OilSpillDetectorCommand );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, oilSpillDetector_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, deviceCommandSourceType_);
            WriteColumnValue( destination, deviceCommandSourceId_);
            WriteColumnValue( destination, reply_);
        }
        void AssignTo( Types::OilSpillDetectorCommandObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetOilSpillDetector( oilSpillDetector_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDeviceCommandSourceType( deviceCommandSourceType_ );
            destination.SetDeviceCommandSourceId( deviceCommandSourceId_ );
            destination.SetReply( reply_ );
        }
    };

    using SimpleOilSpillDetectorCommandDataReader = SimpleColumnDataReader<OilSpillDetectorCommandColumnData>;

    class OilSpillDetectorCommandReplyColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid oilSpillDetector_;
        DateTime timestamp_;
        Guid command_;
        Types::DeviceCommandReplyStatus status_ = Types::DeviceCommandReplyStatus::Unknown;
        WideString message_;
        SQLLEN messageLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT OILSPILLDETECTOR_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT COMMAND_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STATUS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MESSAGE_FIELD_ID = 7;

        OilSpillDetectorCommandReplyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::OilSpillDetectorCommandReply;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& OilSpillDetector( ) const
        {
            return oilSpillDetector_;
        }
        void SetOilSpillDetector( const Guid& oilSpillDetector )
        {
            oilSpillDetector_ = oilSpillDetector;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const Guid& Command( ) const
        {
            return command_;
        }
        void SetCommand( const Guid& command )
        {
            command_ = command;
        }
        Types::DeviceCommandReplyStatus Status( ) const
        {
            return status_;
        }
        void SetStatus( Types::DeviceCommandReplyStatus status )
        {
            status_ = status;
        }
        const WideString& Message( ) const
        {
            return message_;
        }
        void SetMessage( const WideString& message )
        {
            message_ = message;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, OILSPILLDETECTOR_FIELD_ID, oilSpillDetector_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, COMMAND_FIELD_ID, command_);
            Bind(statement, STATUS_FIELD_ID, status_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            message_ = statement.GetWideString(MESSAGE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::OilSpillDetectorCommandReply );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, oilSpillDetector_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, command_);
            WriteColumnValue( destination, status_);
            WriteColumnValue( destination, message_);
        }
        void AssignTo( Types::OilSpillDetectorCommandReplyObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetOilSpillDetector( oilSpillDetector_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetCommand( command_ );
            destination.SetStatus( status_ );
            destination.SetMessage( message_ );
        }
    };

    using SimpleOilSpillDetectorCommandReplyDataReader = SimpleColumnDataReader<OilSpillDetectorCommandReplyColumnData>;

    class OilSpillDetectorConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid oilSpillDetector_;
        DateTime timestamp_;
        double range_ = 0.0;
        double startAngle_ = 0.0;
        double endAngle_ = 0.0;
        double startRange_ = 0.0;
        double endRange_ = 0.0;
        Int32 updateRate_ = 0;
        TimeSpan statusSendTime_;
        bool drawBorder_ = false;
        Binary colors_;
        SQLLEN colorsLength_ = SQL_NULL_DATA;
        bool sendToServer_ = false;
        FixedDBWideString<260> directory_;
        bool transparentWater_ = false;
        bool savePictures_ = false;
        bool sendAsTarget_ = false;
        bool writeLog_ = false;
        FixedDBWideString<127> targetFilePrefix_;
        Guid targetMMSI_;
        double latitude_ = 0.0;
        double longitude_ = 0.0;
        bool testSourceEnabled_ = false;
        FixedDBWideString<127> proxyServer_;
        bool useProxyServer_ = false;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT OILSPILLDETECTOR_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT RANGE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STARTANGLE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT ENDANGLE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT STARTRANGE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT ENDRANGE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT UPDATERATE_FIELD_ID = 10;
        static constexpr SQLUSMALLINT STATUSSENDTIME_FIELD_ID = 11;
        static constexpr SQLUSMALLINT DRAWBORDER_FIELD_ID = 12;
        static constexpr SQLUSMALLINT SENDTOSERVER_FIELD_ID = 13;
        static constexpr SQLUSMALLINT DIRECTORY_FIELD_ID = 14;
        static constexpr SQLUSMALLINT TRANSPARENTWATER_FIELD_ID = 15;
        static constexpr SQLUSMALLINT SAVEPICTURES_FIELD_ID = 16;
        static constexpr SQLUSMALLINT SENDASTARGET_FIELD_ID = 17;
        static constexpr SQLUSMALLINT WRITELOG_FIELD_ID = 18;
        static constexpr SQLUSMALLINT TARGETFILEPREFIX_FIELD_ID = 19;
        static constexpr SQLUSMALLINT TARGETMMSI_FIELD_ID = 20;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 21;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 22;
        static constexpr SQLUSMALLINT TESTSOURCEENABLED_FIELD_ID = 23;
        static constexpr SQLUSMALLINT PROXYSERVER_FIELD_ID = 24;
        static constexpr SQLUSMALLINT USEPROXYSERVER_FIELD_ID = 25;
        static constexpr SQLUSMALLINT COLORS_FIELD_ID = 26;

        OilSpillDetectorConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::OilSpillDetectorConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& OilSpillDetector( ) const
        {
            return oilSpillDetector_;
        }
        void SetOilSpillDetector( const Guid& oilSpillDetector )
        {
            oilSpillDetector_ = oilSpillDetector;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        double Range( ) const
        {
            return range_;
        }
        void SetRange( double range )
        {
            range_ = range;
        }
        double StartAngle( ) const
        {
            return startAngle_;
        }
        void SetStartAngle( double startAngle )
        {
            startAngle_ = startAngle;
        }
        double EndAngle( ) const
        {
            return endAngle_;
        }
        void SetEndAngle( double endAngle )
        {
            endAngle_ = endAngle;
        }
        double StartRange( ) const
        {
            return startRange_;
        }
        void SetStartRange( double startRange )
        {
            startRange_ = startRange;
        }
        double EndRange( ) const
        {
            return endRange_;
        }
        void SetEndRange( double endRange )
        {
            endRange_ = endRange;
        }
        Int32 UpdateRate( ) const
        {
            return updateRate_;
        }
        void SetUpdateRate( Int32 updateRate )
        {
            updateRate_ = updateRate;
        }
        const TimeSpan& StatusSendTime( ) const
        {
            return statusSendTime_;
        }
        void SetStatusSendTime( const TimeSpan& statusSendTime )
        {
            statusSendTime_ = statusSendTime;
        }
        bool DrawBorder( ) const
        {
            return drawBorder_;
        }
        void SetDrawBorder( bool drawBorder )
        {
            drawBorder_ = drawBorder;
        }
        const Binary& Colors( ) const
        {
            return colors_;
        }
        void SetColors( const Binary& colors )
        {
            colors_ = colors;
        }
        bool SendToServer( ) const
        {
            return sendToServer_;
        }
        void SetSendToServer( bool sendToServer )
        {
            sendToServer_ = sendToServer;
        }
        const FixedDBWideString<260>& Directory( ) const
        {
            return directory_;
        }
        void SetDirectory( const FixedDBWideString<260>& directory )
        {
            directory_ = directory;
        }
        bool TransparentWater( ) const
        {
            return transparentWater_;
        }
        void SetTransparentWater( bool transparentWater )
        {
            transparentWater_ = transparentWater;
        }
        bool SavePictures( ) const
        {
            return savePictures_;
        }
        void SetSavePictures( bool savePictures )
        {
            savePictures_ = savePictures;
        }
        bool SendAsTarget( ) const
        {
            return sendAsTarget_;
        }
        void SetSendAsTarget( bool sendAsTarget )
        {
            sendAsTarget_ = sendAsTarget;
        }
        bool WriteLog( ) const
        {
            return writeLog_;
        }
        void SetWriteLog( bool writeLog )
        {
            writeLog_ = writeLog;
        }
        const FixedDBWideString<127>& TargetFilePrefix( ) const
        {
            return targetFilePrefix_;
        }
        void SetTargetFilePrefix( const FixedDBWideString<127>& targetFilePrefix )
        {
            targetFilePrefix_ = targetFilePrefix;
        }
        const Guid& TargetMMSI( ) const
        {
            return targetMMSI_;
        }
        void SetTargetMMSI( const Guid& targetMMSI )
        {
            targetMMSI_ = targetMMSI;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        bool TestSourceEnabled( ) const
        {
            return testSourceEnabled_;
        }
        void SetTestSourceEnabled( bool testSourceEnabled )
        {
            testSourceEnabled_ = testSourceEnabled;
        }
        const FixedDBWideString<127>& ProxyServer( ) const
        {
            return proxyServer_;
        }
        void SetProxyServer( const FixedDBWideString<127>& proxyServer )
        {
            proxyServer_ = proxyServer;
        }
        bool UseProxyServer( ) const
        {
            return useProxyServer_;
        }
        void SetUseProxyServer( bool useProxyServer )
        {
            useProxyServer_ = useProxyServer;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, OILSPILLDETECTOR_FIELD_ID, oilSpillDetector_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, RANGE_FIELD_ID, range_);
            Bind(statement, STARTANGLE_FIELD_ID, startAngle_);
            Bind(statement, ENDANGLE_FIELD_ID, endAngle_);
            Bind(statement, STARTRANGE_FIELD_ID, startRange_);
            Bind(statement, ENDRANGE_FIELD_ID, endRange_);
            Bind(statement, UPDATERATE_FIELD_ID, updateRate_);
            Bind(statement, STATUSSENDTIME_FIELD_ID, statusSendTime_);
            Bind(statement, DRAWBORDER_FIELD_ID, drawBorder_);
            Bind(statement, SENDTOSERVER_FIELD_ID, sendToServer_);
            Bind(statement, DIRECTORY_FIELD_ID, directory_);
            Bind(statement, TRANSPARENTWATER_FIELD_ID, transparentWater_);
            Bind(statement, SAVEPICTURES_FIELD_ID, savePictures_);
            Bind(statement, SENDASTARGET_FIELD_ID, sendAsTarget_);
            Bind(statement, WRITELOG_FIELD_ID, writeLog_);
            Bind(statement, TARGETFILEPREFIX_FIELD_ID, targetFilePrefix_);
            Bind(statement, TARGETMMSI_FIELD_ID, targetMMSI_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, TESTSOURCEENABLED_FIELD_ID, testSourceEnabled_);
            Bind(statement, PROXYSERVER_FIELD_ID, proxyServer_);
            Bind(statement, USEPROXYSERVER_FIELD_ID, useProxyServer_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            colors_ = statement.GetBinary(COLORS_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::OilSpillDetectorConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, oilSpillDetector_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, range_);
            WriteColumnValue( destination, startAngle_);
            WriteColumnValue( destination, endAngle_);
            WriteColumnValue( destination, startRange_);
            WriteColumnValue( destination, endRange_);
            WriteColumnValue( destination, updateRate_);
            WriteColumnValue( destination, statusSendTime_);
            WriteColumnValue( destination, drawBorder_);
            WriteColumnValue( destination, colors_);
            WriteColumnValue( destination, sendToServer_);
            WriteColumnValue( destination, directory_);
            WriteColumnValue( destination, transparentWater_);
            WriteColumnValue( destination, savePictures_);
            WriteColumnValue( destination, sendAsTarget_);
            WriteColumnValue( destination, writeLog_);
            WriteColumnValue( destination, targetFilePrefix_);
            WriteColumnValue( destination, targetMMSI_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, testSourceEnabled_);
            WriteColumnValue( destination, proxyServer_);
            WriteColumnValue( destination, useProxyServer_);
        }
        void AssignTo( Types::OilSpillDetectorConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetOilSpillDetector( oilSpillDetector_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetRange( range_ );
            destination.SetStartAngle( startAngle_ );
            destination.SetEndAngle( endAngle_ );
            destination.SetStartRange( startRange_ );
            destination.SetEndRange( endRange_ );
            destination.SetUpdateRate( updateRate_ );
            destination.SetStatusSendTime( statusSendTime_ );
            destination.SetDrawBorder( drawBorder_ );
            destination.SetColors( colors_ );
            destination.SetSendToServer( sendToServer_ );
            destination.SetDirectory( directory_ );
            destination.SetTransparentWater( transparentWater_ );
            destination.SetSavePictures( savePictures_ );
            destination.SetSendAsTarget( sendAsTarget_ );
            destination.SetWriteLog( writeLog_ );
            destination.SetTargetFilePrefix( targetFilePrefix_ );
            destination.SetTargetMMSI( targetMMSI_ );
            destination.SetLatitude( latitude_ );
            destination.SetLongitude( longitude_ );
            destination.SetTestSourceEnabled( testSourceEnabled_ );
            destination.SetProxyServer( proxyServer_ );
            destination.SetUseProxyServer( useProxyServer_ );
        }
    };

    using SimpleOilSpillDetectorConfigurationDataReader = SimpleColumnDataReader<OilSpillDetectorConfigurationColumnData>;

    class Position2DTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBDouble x_;
        DBDouble y_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT X_FIELD_ID = 5;
        static constexpr SQLUSMALLINT Y_FIELD_ID = 6;

        Position2DTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Position2DTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBDouble& X( ) const
        {
            return x_;
        }
        void SetX( const DBDouble& x )
        {
            x_ = x;
        }
        const DBDouble& Y( ) const
        {
            return y_;
        }
        void SetY( const DBDouble& y )
        {
            y_ = y;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, X_FIELD_ID, x_);
            Bind(statement, Y_FIELD_ID, y_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::Position2DTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, x_);
            WriteColumnValue( destination, y_);
        }
        void AssignTo( Types::Position2DTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetX( x_ );
            destination.SetY( y_ );
        }
    };

    using SimplePosition2DTimeseriesValueDataReader = SimpleColumnDataReader<Position2DTimeseriesValueColumnData>;

    class Position3DTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBDouble x_;
        DBDouble y_;
        DBDouble z_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT X_FIELD_ID = 5;
        static constexpr SQLUSMALLINT Y_FIELD_ID = 6;
        static constexpr SQLUSMALLINT Z_FIELD_ID = 7;

        Position3DTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Position3DTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBDouble& X( ) const
        {
            return x_;
        }
        void SetX( const DBDouble& x )
        {
            x_ = x;
        }
        const DBDouble& Y( ) const
        {
            return y_;
        }
        void SetY( const DBDouble& y )
        {
            y_ = y;
        }
        const DBDouble& Z( ) const
        {
            return z_;
        }
        void SetZ( const DBDouble& z )
        {
            z_ = z;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, X_FIELD_ID, x_);
            Bind(statement, Y_FIELD_ID, y_);
            Bind(statement, Z_FIELD_ID, z_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::Position3DTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, x_);
            WriteColumnValue( destination, y_);
            WriteColumnValue( destination, z_);
        }
        void AssignTo( Types::Position3DTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetX( x_ );
            destination.SetY( y_ );
            destination.SetZ( z_ );
        }
    };

    using SimplePosition3DTimeseriesValueDataReader = SimpleColumnDataReader<Position3DTimeseriesValueColumnData>;

    class ProcessTrackValueResultColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        bool createdNewTrack_ = false;
        Guid trackId_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT CREATEDNEWTRACK_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TRACKID_FIELD_ID = 4;

        ProcessTrackValueResultColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ProcessTrackValueResult;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        bool CreatedNewTrack( ) const
        {
            return createdNewTrack_;
        }
        void SetCreatedNewTrack( bool createdNewTrack )
        {
            createdNewTrack_ = createdNewTrack;
        }
        const Guid& TrackId( ) const
        {
            return trackId_;
        }
        void SetTrackId( const Guid& trackId )
        {
            trackId_ = trackId;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, CREATEDNEWTRACK_FIELD_ID, createdNewTrack_);
            Bind(statement, TRACKID_FIELD_ID, trackId_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::ProcessTrackValueResult );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, createdNewTrack_);
            WriteColumnValue( destination, trackId_);
        }
        void AssignTo( Types::ProcessTrackValueResultObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetCreatedNewTrack( createdNewTrack_ );
            destination.SetTrackId( trackId_ );
        }
    };

    using SimpleProcessTrackValueResultDataReader = SimpleColumnDataReader<ProcessTrackValueResultColumnData>;

    class PropertyColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
        Guid element_;
        Guid definition_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT ELEMENT_FIELD_ID = 4;
        static constexpr SQLUSMALLINT DEFINITION_FIELD_ID = 5;

        PropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Property;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Element( ) const
        {
            return element_;
        }
        void SetElement( const Guid& element )
        {
            element_ = element;
        }
        const Guid& Definition( ) const
        {
            return definition_;
        }
        void SetDefinition( const Guid& definition )
        {
            definition_ = definition;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, ELEMENT_FIELD_ID, element_);
            Bind(statement, DEFINITION_FIELD_ID, definition_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::Property );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, element_);
            WriteColumnValue( destination, definition_);
        }
        void AssignTo( Types::PropertyObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetElement( element_ );
            destination.SetDefinition( definition_ );
        }
    };

    using SimplePropertyDataReader = SimpleColumnDataReader<PropertyColumnData>;

    class BinaryPropertyColumnData : public PropertyColumnData
    {
        Binary value_;
        SQLLEN valueLength_ = SQL_NULL_DATA;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        BinaryPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BinaryProperty;
        }

        const Binary& Value( ) const
        {
            return value_;
        }
        void SetValue( const Binary& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            value_ = statement.GetBinary(VALUE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::BinaryPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleBinaryPropertyDataReader = SimpleColumnDataReader<BinaryPropertyColumnData>;

    class BooleanPropertyColumnData : public PropertyColumnData
    {
        bool value_ = false;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        BooleanPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BooleanProperty;
        }

        bool Value( ) const
        {
            return value_;
        }
        void SetValue( bool value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::BooleanPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleBooleanPropertyDataReader = SimpleColumnDataReader<BooleanPropertyColumnData>;

    class BytePropertyColumnData : public PropertyColumnData
    {
        Byte value_ = 0;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        BytePropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ByteProperty;
        }

        Byte Value( ) const
        {
            return value_;
        }
        void SetValue( Byte value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::BytePropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleBytePropertyDataReader = SimpleColumnDataReader<BytePropertyColumnData>;

    class DateTimePropertyColumnData : public PropertyColumnData
    {
        DateTime value_;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        DateTimePropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DateTimeProperty;
        }

        const DateTime& Value( ) const
        {
            return value_;
        }
        void SetValue( const DateTime& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::DateTimePropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleDateTimePropertyDataReader = SimpleColumnDataReader<DateTimePropertyColumnData>;

    class DoublePropertyColumnData : public PropertyColumnData
    {
        double value_ = 0.0;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        DoublePropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DoubleProperty;
        }

        double Value( ) const
        {
            return value_;
        }
        void SetValue( double value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::DoublePropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleDoublePropertyDataReader = SimpleColumnDataReader<DoublePropertyColumnData>;

    class GuidPropertyColumnData : public PropertyColumnData
    {
        Guid value_;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        GuidPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GuidProperty;
        }

        const Guid& Value( ) const
        {
            return value_;
        }
        void SetValue( const Guid& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::GuidPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleGuidPropertyDataReader = SimpleColumnDataReader<GuidPropertyColumnData>;

    class Int16PropertyColumnData : public PropertyColumnData
    {
        Int16 value_ = 0;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        Int16PropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int16Property;
        }

        Int16 Value( ) const
        {
            return value_;
        }
        void SetValue( Int16 value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::Int16PropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleInt16PropertyDataReader = SimpleColumnDataReader<Int16PropertyColumnData>;

    class Int32PropertyColumnData : public PropertyColumnData
    {
        Int32 value_ = 0;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        Int32PropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int32Property;
        }

        Int32 Value( ) const
        {
            return value_;
        }
        void SetValue( Int32 value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::Int32PropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleInt32PropertyDataReader = SimpleColumnDataReader<Int32PropertyColumnData>;

    class Int64PropertyColumnData : public PropertyColumnData
    {
        Int64 value_ = 0;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        Int64PropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int64Property;
        }

        Int64 Value( ) const
        {
            return value_;
        }
        void SetValue( Int64 value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::Int64PropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleInt64PropertyDataReader = SimpleColumnDataReader<Int64PropertyColumnData>;

    class ReferencePropertyColumnData : public PropertyColumnData
    {
        Guid value_;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        ReferencePropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ReferenceProperty;
        }

        const Guid& Value( ) const
        {
            return value_;
        }
        void SetValue( const Guid& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::ReferencePropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleReferencePropertyDataReader = SimpleColumnDataReader<ReferencePropertyColumnData>;

    class SBytePropertyColumnData : public PropertyColumnData
    {
        SByte value_ = 0;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        SBytePropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SByteProperty;
        }

        SByte Value( ) const
        {
            return value_;
        }
        void SetValue( SByte value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::SBytePropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleSBytePropertyDataReader = SimpleColumnDataReader<SBytePropertyColumnData>;

    class SinglePropertyColumnData : public PropertyColumnData
    {
        float value_ = 0.0f;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        SinglePropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SingleProperty;
        }

        float Value( ) const
        {
            return value_;
        }
        void SetValue( float value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::SinglePropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleSinglePropertyDataReader = SimpleColumnDataReader<SinglePropertyColumnData>;

    class StringPropertyColumnData : public PropertyColumnData
    {
        FixedDBWideString<127> value_;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        StringPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::StringProperty;
        }

        const FixedDBWideString<127>& Value( ) const
        {
            return value_;
        }
        void SetValue( const FixedDBWideString<127>& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::StringPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleStringPropertyDataReader = SimpleColumnDataReader<StringPropertyColumnData>;

    class TimeseriesPropertyColumnData : public PropertyColumnData
    {
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        TimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TimeseriesProperty;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::TimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
        }
    };

    using SimpleTimeseriesPropertyDataReader = SimpleColumnDataReader<TimeseriesPropertyColumnData>;

    class BinaryTimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        BinaryTimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BinaryTimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::BinaryTimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleBinaryTimeseriesPropertyDataReader = SimpleColumnDataReader<BinaryTimeseriesPropertyColumnData>;

    class BooleanTimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        BooleanTimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BooleanTimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::BooleanTimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleBooleanTimeseriesPropertyDataReader = SimpleColumnDataReader<BooleanTimeseriesPropertyColumnData>;

    class ByteTimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        ByteTimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ByteTimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::ByteTimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleByteTimeseriesPropertyDataReader = SimpleColumnDataReader<ByteTimeseriesPropertyColumnData>;

    class DateTimeTimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        DateTimeTimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DateTimeTimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::DateTimeTimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleDateTimeTimeseriesPropertyDataReader = SimpleColumnDataReader<DateTimeTimeseriesPropertyColumnData>;

    class DoubleTimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        DoubleTimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DoubleTimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::DoubleTimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleDoubleTimeseriesPropertyDataReader = SimpleColumnDataReader<DoubleTimeseriesPropertyColumnData>;

    class GuidTimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        GuidTimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GuidTimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::GuidTimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleGuidTimeseriesPropertyDataReader = SimpleColumnDataReader<GuidTimeseriesPropertyColumnData>;

    class Int16TimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        Int16TimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int16TimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::Int16TimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleInt16TimeseriesPropertyDataReader = SimpleColumnDataReader<Int16TimeseriesPropertyColumnData>;

    class Int32TimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        Int32TimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int32TimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::Int32TimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleInt32TimeseriesPropertyDataReader = SimpleColumnDataReader<Int32TimeseriesPropertyColumnData>;

    class Int64TimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        Int64TimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int64TimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::Int64TimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleInt64TimeseriesPropertyDataReader = SimpleColumnDataReader<Int64TimeseriesPropertyColumnData>;

    class ReferenceTimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        ReferenceTimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ReferenceTimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::ReferenceTimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleReferenceTimeseriesPropertyDataReader = SimpleColumnDataReader<ReferenceTimeseriesPropertyColumnData>;

    class SByteTimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        SByteTimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SByteTimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::SByteTimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleSByteTimeseriesPropertyDataReader = SimpleColumnDataReader<SByteTimeseriesPropertyColumnData>;

    class SingleTimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        SingleTimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SingleTimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::SingleTimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleSingleTimeseriesPropertyDataReader = SimpleColumnDataReader<SingleTimeseriesPropertyColumnData>;

    class StringTimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        StringTimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::StringTimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::StringTimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleStringTimeseriesPropertyDataReader = SimpleColumnDataReader<StringTimeseriesPropertyColumnData>;

    class TimeSpanTimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        TimeSpanTimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TimeSpanTimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::TimeSpanTimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleTimeSpanTimeseriesPropertyDataReader = SimpleColumnDataReader<TimeSpanTimeseriesPropertyColumnData>;

    class UInt16TimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        UInt16TimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt16TimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::UInt16TimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleUInt16TimeseriesPropertyDataReader = SimpleColumnDataReader<UInt16TimeseriesPropertyColumnData>;

    class UInt32TimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        UInt32TimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt32TimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::UInt32TimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleUInt32TimeseriesPropertyDataReader = SimpleColumnDataReader<UInt32TimeseriesPropertyColumnData>;

    class UInt64TimeseriesPropertyColumnData : public TimeseriesPropertyColumnData
    {
        Guid timeseries_;
    public:
        using Base = TimeseriesPropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 5;

        UInt64TimeseriesPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt64TimeseriesProperty;
        }

        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, timeseries_);
        }
        void AssignTo( Types::UInt64TimeseriesPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyObject&>( destination ) );
            destination.SetTimeseries( timeseries_ );
        }
    };

    using SimpleUInt64TimeseriesPropertyDataReader = SimpleColumnDataReader<UInt64TimeseriesPropertyColumnData>;

    class TimeSpanPropertyColumnData : public PropertyColumnData
    {
        TimeSpan value_;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        TimeSpanPropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TimeSpanProperty;
        }

        const TimeSpan& Value( ) const
        {
            return value_;
        }
        void SetValue( const TimeSpan& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::TimeSpanPropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleTimeSpanPropertyDataReader = SimpleColumnDataReader<TimeSpanPropertyColumnData>;

    class UInt16PropertyColumnData : public PropertyColumnData
    {
        UInt16 value_ = 0;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        UInt16PropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt16Property;
        }

        UInt16 Value( ) const
        {
            return value_;
        }
        void SetValue( UInt16 value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::UInt16PropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleUInt16PropertyDataReader = SimpleColumnDataReader<UInt16PropertyColumnData>;

    class UInt32PropertyColumnData : public PropertyColumnData
    {
        UInt32 value_ = 0;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        UInt32PropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt32Property;
        }

        UInt32 Value( ) const
        {
            return value_;
        }
        void SetValue( UInt32 value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::UInt32PropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleUInt32PropertyDataReader = SimpleColumnDataReader<UInt32PropertyColumnData>;

    class UInt64PropertyColumnData : public PropertyColumnData
    {
        Int64 value_ = 0;
    public:
        using Base = PropertyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        UInt64PropertyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt64Property;
        }

        Int64 Value( ) const
        {
            return value_;
        }
        void SetValue( Int64 value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::UInt64PropertyObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyObject&>( destination ) );
            destination.SetValue( value_ );
        }
    };

    using SimpleUInt64PropertyDataReader = SimpleColumnDataReader<UInt64PropertyColumnData>;

    class PropertyDefinitionColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
        Guid elementType_;
        FixedDBWideString<127> name_;
        WideString description_;
        SQLLEN descriptionLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT ELEMENTTYPE_FIELD_ID = 4;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DESCRIPTION_FIELD_ID = 6;

        PropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::PropertyDefinition;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& ElementType( ) const
        {
            return elementType_;
        }
        void SetElementType( const Guid& elementType )
        {
            elementType_ = elementType;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const WideString& Description( ) const
        {
            return description_;
        }
        void SetDescription( const WideString& description )
        {
            description_ = description;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, ELEMENTTYPE_FIELD_ID, elementType_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            description_ = statement.GetWideString(DESCRIPTION_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::PropertyDefinition );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, elementType_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, description_);
        }
        void AssignTo( Types::PropertyDefinitionObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetElementType( elementType_ );
            destination.SetName( name_ );
            destination.SetDescription( description_ );
        }
    };

    using SimplePropertyDefinitionDataReader = SimpleColumnDataReader<PropertyDefinitionColumnData>;

    class BinaryPropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        Binary defaultValue_;
        SQLLEN defaultValueLength_ = SQL_NULL_DATA;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;

        BinaryPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BinaryPropertyDefinition;
        }

        const Binary& DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( const Binary& defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            defaultValue_ = statement.GetBinary(DEFAULTVALUE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
        }
        void AssignTo( Types::BinaryPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
        }
    };

    using SimpleBinaryPropertyDefinitionDataReader = SimpleColumnDataReader<BinaryPropertyDefinitionColumnData>;

    class BooleanPropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        bool defaultValue_ = false;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;

        BooleanPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BooleanPropertyDefinition;
        }

        bool DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( bool defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
        }
        void AssignTo( Types::BooleanPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
        }
    };

    using SimpleBooleanPropertyDefinitionDataReader = SimpleColumnDataReader<BooleanPropertyDefinitionColumnData>;

    class BytePropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        Byte defaultValue_ = 0;
        Byte minValue_ = 0;
        Byte maxValue_ = 0;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 8;

        BytePropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BytePropertyDefinition;
        }

        Byte DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( Byte defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        Byte MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( Byte minValue )
        {
            minValue_ = minValue;
        }
        Byte MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( Byte maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::BytePropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleBytePropertyDefinitionDataReader = SimpleColumnDataReader<BytePropertyDefinitionColumnData>;

    class DateTimePropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        FixedDBWideString<127> defaultValue_;
        FixedDBWideString<127> minValue_;
        FixedDBWideString<127> maxValue_;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 8;

        DateTimePropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DateTimePropertyDefinition;
        }

        const FixedDBWideString<127>& DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( const FixedDBWideString<127>& defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        const FixedDBWideString<127>& MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( const FixedDBWideString<127>& minValue )
        {
            minValue_ = minValue;
        }
        const FixedDBWideString<127>& MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( const FixedDBWideString<127>& maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::DateTimePropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleDateTimePropertyDefinitionDataReader = SimpleColumnDataReader<DateTimePropertyDefinitionColumnData>;

    class DoublePropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        double defaultValue_ = 0.0;
        double minValue_ = 0.0;
        double maxValue_ = 0.0;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 8;

        DoublePropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DoublePropertyDefinition;
        }

        double DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( double defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        double MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( double minValue )
        {
            minValue_ = minValue;
        }
        double MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( double maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::DoublePropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleDoublePropertyDefinitionDataReader = SimpleColumnDataReader<DoublePropertyDefinitionColumnData>;

    class GuidPropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        Guid defaultValue_;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;

        GuidPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GuidPropertyDefinition;
        }

        const Guid& DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( const Guid& defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
        }
        void AssignTo( Types::GuidPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
        }
    };

    using SimpleGuidPropertyDefinitionDataReader = SimpleColumnDataReader<GuidPropertyDefinitionColumnData>;

    class Int16PropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        Int16 defaultValue_ = 0;
        Int16 minValue_ = 0;
        Int16 maxValue_ = 0;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 8;

        Int16PropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int16PropertyDefinition;
        }

        Int16 DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( Int16 defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        Int16 MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( Int16 minValue )
        {
            minValue_ = minValue;
        }
        Int16 MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( Int16 maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::Int16PropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleInt16PropertyDefinitionDataReader = SimpleColumnDataReader<Int16PropertyDefinitionColumnData>;

    class Int32PropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        Int32 defaultValue_ = 0;
        Int32 minValue_ = 0;
        Int32 maxValue_ = 0;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 8;

        Int32PropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int32PropertyDefinition;
        }

        Int32 DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( Int32 defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        Int32 MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( Int32 minValue )
        {
            minValue_ = minValue;
        }
        Int32 MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( Int32 maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::Int32PropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleInt32PropertyDefinitionDataReader = SimpleColumnDataReader<Int32PropertyDefinitionColumnData>;

    class Int64PropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        Int64 defaultValue_ = 0;
        Int64 minValue_ = 0;
        Int64 maxValue_ = 0;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 8;

        Int64PropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int64PropertyDefinition;
        }

        Int64 DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( Int64 defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        Int64 MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( Int64 minValue )
        {
            minValue_ = minValue;
        }
        Int64 MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( Int64 maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::Int64PropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleInt64PropertyDefinitionDataReader = SimpleColumnDataReader<Int64PropertyDefinitionColumnData>;

    class ReferencePropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        Guid defaultValue_;
        Guid referencedElementType_;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT REFERENCEDELEMENTTYPE_FIELD_ID = 7;

        ReferencePropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ReferencePropertyDefinition;
        }

        const Guid& DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( const Guid& defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        const Guid& ReferencedElementType( ) const
        {
            return referencedElementType_;
        }
        void SetReferencedElementType( const Guid& referencedElementType )
        {
            referencedElementType_ = referencedElementType;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, REFERENCEDELEMENTTYPE_FIELD_ID, referencedElementType_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, referencedElementType_);
        }
        void AssignTo( Types::ReferencePropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetReferencedElementType( referencedElementType_ );
        }
    };

    using SimpleReferencePropertyDefinitionDataReader = SimpleColumnDataReader<ReferencePropertyDefinitionColumnData>;

    class SBytePropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        SByte defaultValue_ = 0;
        SByte minValue_ = 0;
        SByte maxValue_ = 0;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 8;

        SBytePropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SBytePropertyDefinition;
        }

        SByte DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( SByte defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        SByte MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( SByte minValue )
        {
            minValue_ = minValue;
        }
        SByte MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( SByte maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::SBytePropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleSBytePropertyDefinitionDataReader = SimpleColumnDataReader<SBytePropertyDefinitionColumnData>;

    class SinglePropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        float defaultValue_ = 0.0f;
        float minValue_ = 0.0f;
        float maxValue_ = 0.0f;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 8;

        SinglePropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SinglePropertyDefinition;
        }

        float DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( float defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        float MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( float minValue )
        {
            minValue_ = minValue;
        }
        float MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( float maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::SinglePropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleSinglePropertyDefinitionDataReader = SimpleColumnDataReader<SinglePropertyDefinitionColumnData>;

    class StringPropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        FixedDBWideString<127> defaultValue_;
        FixedDBWideString<127> pattern_;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT PATTERN_FIELD_ID = 7;

        StringPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::StringPropertyDefinition;
        }

        const FixedDBWideString<127>& DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( const FixedDBWideString<127>& defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        const FixedDBWideString<127>& Pattern( ) const
        {
            return pattern_;
        }
        void SetPattern( const FixedDBWideString<127>& pattern )
        {
            pattern_ = pattern;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, PATTERN_FIELD_ID, pattern_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, pattern_);
        }
        void AssignTo( Types::StringPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetPattern( pattern_ );
        }
    };

    using SimpleStringPropertyDefinitionDataReader = SimpleColumnDataReader<StringPropertyDefinitionColumnData>;

    class TimeseriesPropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        TimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TimeseriesPropertyDefinition;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::TimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
        }
    };

    using SimpleTimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<TimeseriesPropertyDefinitionColumnData>;

    class BinaryTimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        BinaryTimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BinaryTimeseriesPropertyDefinition;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::BinaryTimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
        }
    };

    using SimpleBinaryTimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<BinaryTimeseriesPropertyDefinitionColumnData>;

    class BooleanTimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        BooleanTimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BooleanTimeseriesPropertyDefinition;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::BooleanTimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
        }
    };

    using SimpleBooleanTimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<BooleanTimeseriesPropertyDefinitionColumnData>;

    class ByteTimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        Byte minValue_ = 0;
        Byte maxValue_ = 0;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 7;

        ByteTimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ByteTimeseriesPropertyDefinition;
        }

        Byte MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( Byte minValue )
        {
            minValue_ = minValue;
        }
        Byte MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( Byte maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::ByteTimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleByteTimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<ByteTimeseriesPropertyDefinitionColumnData>;

    class DateTimeTimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        FixedDBWideString<127> minValue_;
        FixedDBWideString<127> maxValue_;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 7;

        DateTimeTimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DateTimeTimeseriesPropertyDefinition;
        }

        const FixedDBWideString<127>& MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( const FixedDBWideString<127>& minValue )
        {
            minValue_ = minValue;
        }
        const FixedDBWideString<127>& MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( const FixedDBWideString<127>& maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::DateTimeTimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleDateTimeTimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<DateTimeTimeseriesPropertyDefinitionColumnData>;

    class DoubleTimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        double minValue_ = 0.0;
        double maxValue_ = 0.0;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 7;

        DoubleTimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DoubleTimeseriesPropertyDefinition;
        }

        double MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( double minValue )
        {
            minValue_ = minValue;
        }
        double MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( double maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::DoubleTimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleDoubleTimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<DoubleTimeseriesPropertyDefinitionColumnData>;

    class GuidTimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        GuidTimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GuidTimeseriesPropertyDefinition;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::GuidTimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
        }
    };

    using SimpleGuidTimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<GuidTimeseriesPropertyDefinitionColumnData>;

    class Int16TimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        Int16 minValue_ = 0;
        Int16 maxValue_ = 0;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 7;

        Int16TimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int16TimeseriesPropertyDefinition;
        }

        Int16 MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( Int16 minValue )
        {
            minValue_ = minValue;
        }
        Int16 MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( Int16 maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::Int16TimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleInt16TimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<Int16TimeseriesPropertyDefinitionColumnData>;

    class Int32TimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        Int32 minValue_ = 0;
        Int32 maxValue_ = 0;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 7;

        Int32TimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int32TimeseriesPropertyDefinition;
        }

        Int32 MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( Int32 minValue )
        {
            minValue_ = minValue;
        }
        Int32 MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( Int32 maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::Int32TimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleInt32TimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<Int32TimeseriesPropertyDefinitionColumnData>;

    class Int64TimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        Int64 minValue_ = 0;
        Int64 maxValue_ = 0;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 7;

        Int64TimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int64TimeseriesPropertyDefinition;
        }

        Int64 MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( Int64 minValue )
        {
            minValue_ = minValue;
        }
        Int64 MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( Int64 maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::Int64TimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleInt64TimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<Int64TimeseriesPropertyDefinitionColumnData>;

    class ReferenceTimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        Guid referencedElementType_;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT REFERENCEDELEMENTTYPE_FIELD_ID = 6;

        ReferenceTimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ReferenceTimeseriesPropertyDefinition;
        }

        const Guid& ReferencedElementType( ) const
        {
            return referencedElementType_;
        }
        void SetReferencedElementType( const Guid& referencedElementType )
        {
            referencedElementType_ = referencedElementType;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, REFERENCEDELEMENTTYPE_FIELD_ID, referencedElementType_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, referencedElementType_);
        }
        void AssignTo( Types::ReferenceTimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetReferencedElementType( referencedElementType_ );
        }
    };

    using SimpleReferenceTimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<ReferenceTimeseriesPropertyDefinitionColumnData>;

    class SByteTimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        SByte minValue_ = 0;
        SByte maxValue_ = 0;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 7;

        SByteTimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SByteTimeseriesPropertyDefinition;
        }

        SByte MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( SByte minValue )
        {
            minValue_ = minValue;
        }
        SByte MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( SByte maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::SByteTimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleSByteTimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<SByteTimeseriesPropertyDefinitionColumnData>;

    class SingleTimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        float minValue_ = 0.0f;
        float maxValue_ = 0.0f;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 7;

        SingleTimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SingleTimeseriesPropertyDefinition;
        }

        float MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( float minValue )
        {
            minValue_ = minValue;
        }
        float MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( float maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::SingleTimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleSingleTimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<SingleTimeseriesPropertyDefinitionColumnData>;

    class StringTimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        FixedDBWideString<127> pattern_;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT PATTERN_FIELD_ID = 6;

        StringTimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::StringTimeseriesPropertyDefinition;
        }

        const FixedDBWideString<127>& Pattern( ) const
        {
            return pattern_;
        }
        void SetPattern( const FixedDBWideString<127>& pattern )
        {
            pattern_ = pattern;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, PATTERN_FIELD_ID, pattern_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, pattern_);
        }
        void AssignTo( Types::StringTimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetPattern( pattern_ );
        }
    };

    using SimpleStringTimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<StringTimeseriesPropertyDefinitionColumnData>;

    class TimeSpanTimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        TimeSpan minValue_;
        TimeSpan maxValue_;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 7;

        TimeSpanTimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TimeSpanTimeseriesPropertyDefinition;
        }

        const TimeSpan& MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( const TimeSpan& minValue )
        {
            minValue_ = minValue;
        }
        const TimeSpan& MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( const TimeSpan& maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::TimeSpanTimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleTimeSpanTimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<TimeSpanTimeseriesPropertyDefinitionColumnData>;

    class UInt16TimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        UInt16 minValue_ = 0;
        UInt16 maxValue_ = 0;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 7;

        UInt16TimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt16TimeseriesPropertyDefinition;
        }

        UInt16 MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( UInt16 minValue )
        {
            minValue_ = minValue;
        }
        UInt16 MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( UInt16 maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::UInt16TimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleUInt16TimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<UInt16TimeseriesPropertyDefinitionColumnData>;

    class UInt32TimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        UInt32 minValue_ = 0;
        UInt32 maxValue_ = 0;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 7;

        UInt32TimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt32TimeseriesPropertyDefinition;
        }

        UInt32 MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( UInt32 minValue )
        {
            minValue_ = minValue;
        }
        UInt32 MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( UInt32 maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::UInt32TimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleUInt32TimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<UInt32TimeseriesPropertyDefinitionColumnData>;

    class UInt64TimeseriesPropertyDefinitionColumnData : public TimeseriesPropertyDefinitionColumnData
    {
        Int64 minValue_ = 0;
        Int64 maxValue_ = 0;
    public:
        using Base = TimeseriesPropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 7;

        UInt64TimeseriesPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt64TimeseriesPropertyDefinition;
        }

        Int64 MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( Int64 minValue )
        {
            minValue_ = minValue;
        }
        Int64 MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( Int64 maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::UInt64TimeseriesPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesPropertyDefinitionObject&>( destination ) );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleUInt64TimeseriesPropertyDefinitionDataReader = SimpleColumnDataReader<UInt64TimeseriesPropertyDefinitionColumnData>;

    class TimeSpanPropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        TimeSpan defaultValue_;
        TimeSpan minValue_;
        TimeSpan maxValue_;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 8;

        TimeSpanPropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TimeSpanPropertyDefinition;
        }

        const TimeSpan& DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( const TimeSpan& defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        const TimeSpan& MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( const TimeSpan& minValue )
        {
            minValue_ = minValue;
        }
        const TimeSpan& MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( const TimeSpan& maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::TimeSpanPropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleTimeSpanPropertyDefinitionDataReader = SimpleColumnDataReader<TimeSpanPropertyDefinitionColumnData>;

    class UInt16PropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        UInt16 defaultValue_ = 0;
        UInt16 minValue_ = 0;
        UInt16 maxValue_ = 0;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 8;

        UInt16PropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt16PropertyDefinition;
        }

        UInt16 DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( UInt16 defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        UInt16 MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( UInt16 minValue )
        {
            minValue_ = minValue;
        }
        UInt16 MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( UInt16 maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::UInt16PropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleUInt16PropertyDefinitionDataReader = SimpleColumnDataReader<UInt16PropertyDefinitionColumnData>;

    class UInt32PropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        UInt32 defaultValue_ = 0;
        UInt32 minValue_ = 0;
        UInt32 maxValue_ = 0;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 8;

        UInt32PropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt32PropertyDefinition;
        }

        UInt32 DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( UInt32 defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        UInt32 MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( UInt32 minValue )
        {
            minValue_ = minValue;
        }
        UInt32 MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( UInt32 maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::UInt32PropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleUInt32PropertyDefinitionDataReader = SimpleColumnDataReader<UInt32PropertyDefinitionColumnData>;

    class UInt64PropertyDefinitionColumnData : public PropertyDefinitionColumnData
    {
        Int64 defaultValue_ = 0;
        Int64 minValue_ = 0;
        Int64 maxValue_ = 0;
    public:
        using Base = PropertyDefinitionColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEFAULTVALUE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MINVALUE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MAXVALUE_FIELD_ID = 8;

        UInt64PropertyDefinitionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt64PropertyDefinition;
        }

        Int64 DefaultValue( ) const
        {
            return defaultValue_;
        }
        void SetDefaultValue( Int64 defaultValue )
        {
            defaultValue_ = defaultValue;
        }
        Int64 MinValue( ) const
        {
            return minValue_;
        }
        void SetMinValue( Int64 minValue )
        {
            minValue_ = minValue;
        }
        Int64 MaxValue( ) const
        {
            return maxValue_;
        }
        void SetMaxValue( Int64 maxValue )
        {
            maxValue_ = maxValue;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEFAULTVALUE_FIELD_ID, defaultValue_);
            Bind(statement, MINVALUE_FIELD_ID, minValue_);
            Bind(statement, MAXVALUE_FIELD_ID, maxValue_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, defaultValue_);
            WriteColumnValue( destination, minValue_);
            WriteColumnValue( destination, maxValue_);
        }
        void AssignTo( Types::UInt64PropertyDefinitionObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::PropertyDefinitionObject&>( destination ) );
            destination.SetDefaultValue( defaultValue_ );
            destination.SetMinValue( minValue_ );
            destination.SetMaxValue( maxValue_ );
        }
    };

    using SimpleUInt64PropertyDefinitionDataReader = SimpleColumnDataReader<UInt64PropertyDefinitionColumnData>;

    class RadarAlarmStatusColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid radar_;
        DateTime timestamp_;
        Types::AlarmState type_ = Types::AlarmState::Unknown;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT TYPE_FIELD_ID = 5;

        RadarAlarmStatusColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarAlarmStatus;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::AlarmState Type( ) const
        {
            return type_;
        }
        void SetType( Types::AlarmState type )
        {
            type_ = type;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADAR_FIELD_ID, radar_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, TYPE_FIELD_ID, type_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadarAlarmStatus );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radar_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, type_);
        }
        void AssignTo( Types::RadarAlarmStatusObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadar( radar_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetType( type_ );
        }
    };

    using SimpleRadarAlarmStatusDataReader = SimpleColumnDataReader<RadarAlarmStatusColumnData>;

    class RadarCommandColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
        Guid radar_;
        DateTime timestamp_;
        Types::DeviceCommandSourceType deviceCommandSourceType_ = Types::DeviceCommandSourceType::Unknown;
        Guid deviceCommandSourceId_;
        Guid reply_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 4;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCETYPE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCEID_FIELD_ID = 7;
        static constexpr SQLUSMALLINT REPLY_FIELD_ID = 8;

        RadarCommandColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarCommand;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::DeviceCommandSourceType DeviceCommandSourceType( ) const
        {
            return deviceCommandSourceType_;
        }
        void SetDeviceCommandSourceType( Types::DeviceCommandSourceType deviceCommandSourceType )
        {
            deviceCommandSourceType_ = deviceCommandSourceType;
        }
        const Guid& DeviceCommandSourceId( ) const
        {
            return deviceCommandSourceId_;
        }
        void SetDeviceCommandSourceId( const Guid& deviceCommandSourceId )
        {
            deviceCommandSourceId_ = deviceCommandSourceId;
        }
        const Guid& Reply( ) const
        {
            return reply_;
        }
        void SetReply( const Guid& reply )
        {
            reply_ = reply;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADAR_FIELD_ID, radar_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEVICECOMMANDSOURCETYPE_FIELD_ID, deviceCommandSourceType_);
            Bind(statement, DEVICECOMMANDSOURCEID_FIELD_ID, deviceCommandSourceId_);
            Bind(statement, REPLY_FIELD_ID, reply_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadarCommand );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radar_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, deviceCommandSourceType_);
            WriteColumnValue( destination, deviceCommandSourceId_);
            WriteColumnValue( destination, reply_);
        }
        void AssignTo( Types::RadarCommandObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadar( radar_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDeviceCommandSourceType( deviceCommandSourceType_ );
            destination.SetDeviceCommandSourceId( deviceCommandSourceId_ );
            destination.SetReply( reply_ );
        }
    };

    using SimpleRadarCommandDataReader = SimpleColumnDataReader<RadarCommandColumnData>;

    class RadarCommandGetStatusColumnData : public RadarCommandColumnData
    {
    public:
        using Base = RadarCommandColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        RadarCommandGetStatusColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarCommandGetStatus;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::RadarCommandGetStatusObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::RadarCommandObject&>( destination ) );
        }
    };

    using SimpleRadarCommandGetStatusDataReader = SimpleColumnDataReader<RadarCommandGetStatusColumnData>;

    class RadarCommandReplyColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
        Guid radar_;
        DateTime timestamp_;
        Guid command_;
        Types::DeviceCommandReplyStatus status_ = Types::DeviceCommandReplyStatus::Unknown;
        WideString message_;
        SQLLEN messageLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 4;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 5;
        static constexpr SQLUSMALLINT COMMAND_FIELD_ID = 6;
        static constexpr SQLUSMALLINT STATUS_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MESSAGE_FIELD_ID = 8;

        RadarCommandReplyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarCommandReply;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const Guid& Command( ) const
        {
            return command_;
        }
        void SetCommand( const Guid& command )
        {
            command_ = command;
        }
        Types::DeviceCommandReplyStatus Status( ) const
        {
            return status_;
        }
        void SetStatus( Types::DeviceCommandReplyStatus status )
        {
            status_ = status;
        }
        const WideString& Message( ) const
        {
            return message_;
        }
        void SetMessage( const WideString& message )
        {
            message_ = message;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADAR_FIELD_ID, radar_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, COMMAND_FIELD_ID, command_);
            Bind(statement, STATUS_FIELD_ID, status_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            message_ = statement.GetWideString(MESSAGE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadarCommandReply );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radar_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, command_);
            WriteColumnValue( destination, status_);
            WriteColumnValue( destination, message_);
        }
        void AssignTo( Types::RadarCommandReplyObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadar( radar_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetCommand( command_ );
            destination.SetStatus( status_ );
            destination.SetMessage( message_ );
        }
    };

    using SimpleRadarCommandReplyDataReader = SimpleColumnDataReader<RadarCommandReplyColumnData>;

    class RadarCommandReplyGetStatusColumnData : public RadarCommandReplyColumnData
    {
        Int32 azimuthCount_ = 0;
        Int32 triggerCount_ = 0;
        TimeSpan rotationCount_;
        Types::RadarPulse pulse_ = Types::RadarPulse::Short;
        bool tx_ = false;
    public:
        using Base = RadarCommandReplyColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT AZIMUTHCOUNT_FIELD_ID = 8;
        static constexpr SQLUSMALLINT TRIGGERCOUNT_FIELD_ID = 9;
        static constexpr SQLUSMALLINT ROTATIONCOUNT_FIELD_ID = 10;
        static constexpr SQLUSMALLINT PULSE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT TX_FIELD_ID = 12;

        RadarCommandReplyGetStatusColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarCommandReplyGetStatus;
        }

        Int32 AzimuthCount( ) const
        {
            return azimuthCount_;
        }
        void SetAzimuthCount( Int32 azimuthCount )
        {
            azimuthCount_ = azimuthCount;
        }
        Int32 TriggerCount( ) const
        {
            return triggerCount_;
        }
        void SetTriggerCount( Int32 triggerCount )
        {
            triggerCount_ = triggerCount;
        }
        const TimeSpan& RotationCount( ) const
        {
            return rotationCount_;
        }
        void SetRotationCount( const TimeSpan& rotationCount )
        {
            rotationCount_ = rotationCount;
        }
        Types::RadarPulse Pulse( ) const
        {
            return pulse_;
        }
        void SetPulse( Types::RadarPulse pulse )
        {
            pulse_ = pulse;
        }
        bool Tx( ) const
        {
            return tx_;
        }
        void SetTx( bool tx )
        {
            tx_ = tx;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, AZIMUTHCOUNT_FIELD_ID, azimuthCount_);
            Bind(statement, TRIGGERCOUNT_FIELD_ID, triggerCount_);
            Bind(statement, ROTATIONCOUNT_FIELD_ID, rotationCount_);
            Bind(statement, PULSE_FIELD_ID, pulse_);
            Bind(statement, TX_FIELD_ID, tx_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, azimuthCount_);
            WriteColumnValue( destination, triggerCount_);
            WriteColumnValue( destination, rotationCount_);
            WriteColumnValue( destination, pulse_);
            WriteColumnValue( destination, tx_);
        }
        void AssignTo( Types::RadarCommandReplyGetStatusObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::RadarCommandReplyObject&>( destination ) );
            destination.SetAzimuthCount( azimuthCount_ );
            destination.SetTriggerCount( triggerCount_ );
            destination.SetRotationCount( rotationCount_ );
            destination.SetPulse( pulse_ );
            destination.SetTx( tx_ );
        }
    };

    using SimpleRadarCommandReplyGetStatusDataReader = SimpleColumnDataReader<RadarCommandReplyGetStatusColumnData>;

    class RadarConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid radar_;
        DateTime timestamp_;
        Int32 radarProtocolVersion_ = 0;
        FixedDBWideString<127> radarIPAddress_;
        Int32 radarPort_ = 0;
        Int32 radarConfigurationPort_ = 0;
        TimeSpan skipMagicTimeout_;
        TimeSpan readTimeout_;
        TimeSpan synchronizationInterval_;
        Int32 targetsRefreshRate_ = 0;
        Int32 range_ = 0;
        Int32 sectorCount_ = 0;
        Int32 sectorOffset_ = 0;
        UInt32 imageColor_ = 0;
        DBUInt32 imageSubstitutionColor_;
        UInt32 transparentColor_ = 0;
        double imageScaleFactorX_ = 0.0;
        double imageOffsetX_ = 0.0;
        double imageScaleFactorY_ = 0.0;
        double imageOffsetY_ = 0.0;
        Types::RadarImageType radarImageType_ = Types::RadarImageType::MaskedProcessed;
        UInt32 trackColor_ = 0;
        UInt32 vectorColor_ = 0;
        bool enableNmea_ = false;
        FixedDBWideString<127> nmeaReceiverIPAddress_;
        Int32 nmeaReceiverPort_ = 0;
        FixedDBWideString<127> nmeaReceiverSourceId_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT RADARPROTOCOLVERSION_FIELD_ID = 5;
        static constexpr SQLUSMALLINT RADARIPADDRESS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT RADARPORT_FIELD_ID = 7;
        static constexpr SQLUSMALLINT RADARCONFIGURATIONPORT_FIELD_ID = 8;
        static constexpr SQLUSMALLINT SKIPMAGICTIMEOUT_FIELD_ID = 9;
        static constexpr SQLUSMALLINT READTIMEOUT_FIELD_ID = 10;
        static constexpr SQLUSMALLINT SYNCHRONIZATIONINTERVAL_FIELD_ID = 11;
        static constexpr SQLUSMALLINT TARGETSREFRESHRATE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT RANGE_FIELD_ID = 13;
        static constexpr SQLUSMALLINT SECTORCOUNT_FIELD_ID = 14;
        static constexpr SQLUSMALLINT SECTOROFFSET_FIELD_ID = 15;
        static constexpr SQLUSMALLINT IMAGECOLOR_FIELD_ID = 16;
        static constexpr SQLUSMALLINT IMAGESUBSTITUTIONCOLOR_FIELD_ID = 17;
        static constexpr SQLUSMALLINT TRANSPARENTCOLOR_FIELD_ID = 18;
        static constexpr SQLUSMALLINT IMAGESCALEFACTORX_FIELD_ID = 19;
        static constexpr SQLUSMALLINT IMAGEOFFSETX_FIELD_ID = 20;
        static constexpr SQLUSMALLINT IMAGESCALEFACTORY_FIELD_ID = 21;
        static constexpr SQLUSMALLINT IMAGEOFFSETY_FIELD_ID = 22;
        static constexpr SQLUSMALLINT RADARIMAGETYPE_FIELD_ID = 23;
        static constexpr SQLUSMALLINT TRACKCOLOR_FIELD_ID = 24;
        static constexpr SQLUSMALLINT VECTORCOLOR_FIELD_ID = 25;
        static constexpr SQLUSMALLINT ENABLENMEA_FIELD_ID = 26;
        static constexpr SQLUSMALLINT NMEARECEIVERIPADDRESS_FIELD_ID = 27;
        static constexpr SQLUSMALLINT NMEARECEIVERPORT_FIELD_ID = 28;
        static constexpr SQLUSMALLINT NMEARECEIVERSOURCEID_FIELD_ID = 29;

        RadarConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Int32 RadarProtocolVersion( ) const
        {
            return radarProtocolVersion_;
        }
        void SetRadarProtocolVersion( Int32 radarProtocolVersion )
        {
            radarProtocolVersion_ = radarProtocolVersion;
        }
        const FixedDBWideString<127>& RadarIPAddress( ) const
        {
            return radarIPAddress_;
        }
        void SetRadarIPAddress( const FixedDBWideString<127>& radarIPAddress )
        {
            radarIPAddress_ = radarIPAddress;
        }
        Int32 RadarPort( ) const
        {
            return radarPort_;
        }
        void SetRadarPort( Int32 radarPort )
        {
            radarPort_ = radarPort;
        }
        Int32 RadarConfigurationPort( ) const
        {
            return radarConfigurationPort_;
        }
        void SetRadarConfigurationPort( Int32 radarConfigurationPort )
        {
            radarConfigurationPort_ = radarConfigurationPort;
        }
        const TimeSpan& SkipMagicTimeout( ) const
        {
            return skipMagicTimeout_;
        }
        void SetSkipMagicTimeout( const TimeSpan& skipMagicTimeout )
        {
            skipMagicTimeout_ = skipMagicTimeout;
        }
        const TimeSpan& ReadTimeout( ) const
        {
            return readTimeout_;
        }
        void SetReadTimeout( const TimeSpan& readTimeout )
        {
            readTimeout_ = readTimeout;
        }
        const TimeSpan& SynchronizationInterval( ) const
        {
            return synchronizationInterval_;
        }
        void SetSynchronizationInterval( const TimeSpan& synchronizationInterval )
        {
            synchronizationInterval_ = synchronizationInterval;
        }
        Int32 TargetsRefreshRate( ) const
        {
            return targetsRefreshRate_;
        }
        void SetTargetsRefreshRate( Int32 targetsRefreshRate )
        {
            targetsRefreshRate_ = targetsRefreshRate;
        }
        Int32 Range( ) const
        {
            return range_;
        }
        void SetRange( Int32 range )
        {
            range_ = range;
        }
        Int32 SectorCount( ) const
        {
            return sectorCount_;
        }
        void SetSectorCount( Int32 sectorCount )
        {
            sectorCount_ = sectorCount;
        }
        Int32 SectorOffset( ) const
        {
            return sectorOffset_;
        }
        void SetSectorOffset( Int32 sectorOffset )
        {
            sectorOffset_ = sectorOffset;
        }
        UInt32 ImageColor( ) const
        {
            return imageColor_;
        }
        void SetImageColor( UInt32 imageColor )
        {
            imageColor_ = imageColor;
        }
        const DBUInt32& ImageSubstitutionColor( ) const
        {
            return imageSubstitutionColor_;
        }
        void SetImageSubstitutionColor( const DBUInt32& imageSubstitutionColor )
        {
            imageSubstitutionColor_ = imageSubstitutionColor;
        }
        UInt32 TransparentColor( ) const
        {
            return transparentColor_;
        }
        void SetTransparentColor( UInt32 transparentColor )
        {
            transparentColor_ = transparentColor;
        }
        double ImageScaleFactorX( ) const
        {
            return imageScaleFactorX_;
        }
        void SetImageScaleFactorX( double imageScaleFactorX )
        {
            imageScaleFactorX_ = imageScaleFactorX;
        }
        double ImageOffsetX( ) const
        {
            return imageOffsetX_;
        }
        void SetImageOffsetX( double imageOffsetX )
        {
            imageOffsetX_ = imageOffsetX;
        }
        double ImageScaleFactorY( ) const
        {
            return imageScaleFactorY_;
        }
        void SetImageScaleFactorY( double imageScaleFactorY )
        {
            imageScaleFactorY_ = imageScaleFactorY;
        }
        double ImageOffsetY( ) const
        {
            return imageOffsetY_;
        }
        void SetImageOffsetY( double imageOffsetY )
        {
            imageOffsetY_ = imageOffsetY;
        }
        Types::RadarImageType RadarImageType( ) const
        {
            return radarImageType_;
        }
        void SetRadarImageType( Types::RadarImageType radarImageType )
        {
            radarImageType_ = radarImageType;
        }
        UInt32 TrackColor( ) const
        {
            return trackColor_;
        }
        void SetTrackColor( UInt32 trackColor )
        {
            trackColor_ = trackColor;
        }
        UInt32 VectorColor( ) const
        {
            return vectorColor_;
        }
        void SetVectorColor( UInt32 vectorColor )
        {
            vectorColor_ = vectorColor;
        }
        bool EnableNmea( ) const
        {
            return enableNmea_;
        }
        void SetEnableNmea( bool enableNmea )
        {
            enableNmea_ = enableNmea;
        }
        const FixedDBWideString<127>& NmeaReceiverIPAddress( ) const
        {
            return nmeaReceiverIPAddress_;
        }
        void SetNmeaReceiverIPAddress( const FixedDBWideString<127>& nmeaReceiverIPAddress )
        {
            nmeaReceiverIPAddress_ = nmeaReceiverIPAddress;
        }
        Int32 NmeaReceiverPort( ) const
        {
            return nmeaReceiverPort_;
        }
        void SetNmeaReceiverPort( Int32 nmeaReceiverPort )
        {
            nmeaReceiverPort_ = nmeaReceiverPort;
        }
        const FixedDBWideString<127>& NmeaReceiverSourceId( ) const
        {
            return nmeaReceiverSourceId_;
        }
        void SetNmeaReceiverSourceId( const FixedDBWideString<127>& nmeaReceiverSourceId )
        {
            nmeaReceiverSourceId_ = nmeaReceiverSourceId;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADAR_FIELD_ID, radar_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, RADARPROTOCOLVERSION_FIELD_ID, radarProtocolVersion_);
            Bind(statement, RADARIPADDRESS_FIELD_ID, radarIPAddress_);
            Bind(statement, RADARPORT_FIELD_ID, radarPort_);
            Bind(statement, RADARCONFIGURATIONPORT_FIELD_ID, radarConfigurationPort_);
            Bind(statement, SKIPMAGICTIMEOUT_FIELD_ID, skipMagicTimeout_);
            Bind(statement, READTIMEOUT_FIELD_ID, readTimeout_);
            Bind(statement, SYNCHRONIZATIONINTERVAL_FIELD_ID, synchronizationInterval_);
            Bind(statement, TARGETSREFRESHRATE_FIELD_ID, targetsRefreshRate_);
            Bind(statement, RANGE_FIELD_ID, range_);
            Bind(statement, SECTORCOUNT_FIELD_ID, sectorCount_);
            Bind(statement, SECTOROFFSET_FIELD_ID, sectorOffset_);
            Bind(statement, IMAGECOLOR_FIELD_ID, imageColor_);
            Bind(statement, IMAGESUBSTITUTIONCOLOR_FIELD_ID, imageSubstitutionColor_);
            Bind(statement, TRANSPARENTCOLOR_FIELD_ID, transparentColor_);
            Bind(statement, IMAGESCALEFACTORX_FIELD_ID, imageScaleFactorX_);
            Bind(statement, IMAGEOFFSETX_FIELD_ID, imageOffsetX_);
            Bind(statement, IMAGESCALEFACTORY_FIELD_ID, imageScaleFactorY_);
            Bind(statement, IMAGEOFFSETY_FIELD_ID, imageOffsetY_);
            Bind(statement, RADARIMAGETYPE_FIELD_ID, radarImageType_);
            Bind(statement, TRACKCOLOR_FIELD_ID, trackColor_);
            Bind(statement, VECTORCOLOR_FIELD_ID, vectorColor_);
            Bind(statement, ENABLENMEA_FIELD_ID, enableNmea_);
            Bind(statement, NMEARECEIVERIPADDRESS_FIELD_ID, nmeaReceiverIPAddress_);
            Bind(statement, NMEARECEIVERPORT_FIELD_ID, nmeaReceiverPort_);
            Bind(statement, NMEARECEIVERSOURCEID_FIELD_ID, nmeaReceiverSourceId_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadarConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radar_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, radarProtocolVersion_);
            WriteColumnValue( destination, radarIPAddress_);
            WriteColumnValue( destination, radarPort_);
            WriteColumnValue( destination, radarConfigurationPort_);
            WriteColumnValue( destination, skipMagicTimeout_);
            WriteColumnValue( destination, readTimeout_);
            WriteColumnValue( destination, synchronizationInterval_);
            WriteColumnValue( destination, targetsRefreshRate_);
            WriteColumnValue( destination, range_);
            WriteColumnValue( destination, sectorCount_);
            WriteColumnValue( destination, sectorOffset_);
            WriteColumnValue( destination, imageColor_);
            WriteColumnValue( destination, imageSubstitutionColor_);
            WriteColumnValue( destination, transparentColor_);
            WriteColumnValue( destination, imageScaleFactorX_);
            WriteColumnValue( destination, imageOffsetX_);
            WriteColumnValue( destination, imageScaleFactorY_);
            WriteColumnValue( destination, imageOffsetY_);
            WriteColumnValue( destination, radarImageType_);
            WriteColumnValue( destination, trackColor_);
            WriteColumnValue( destination, vectorColor_);
            WriteColumnValue( destination, enableNmea_);
            WriteColumnValue( destination, nmeaReceiverIPAddress_);
            WriteColumnValue( destination, nmeaReceiverPort_);
            WriteColumnValue( destination, nmeaReceiverSourceId_);
        }
        void AssignTo( Types::RadarConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadar( radar_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetRadarProtocolVersion( radarProtocolVersion_ );
            destination.SetRadarIPAddress( radarIPAddress_ );
            destination.SetRadarPort( radarPort_ );
            destination.SetRadarConfigurationPort( radarConfigurationPort_ );
            destination.SetSkipMagicTimeout( skipMagicTimeout_ );
            destination.SetReadTimeout( readTimeout_ );
            destination.SetSynchronizationInterval( synchronizationInterval_ );
            destination.SetTargetsRefreshRate( targetsRefreshRate_ );
            destination.SetRange( range_ );
            destination.SetSectorCount( sectorCount_ );
            destination.SetSectorOffset( sectorOffset_ );
            destination.SetImageColor( imageColor_ );
            destination.SetImageSubstitutionColor( imageSubstitutionColor_ );
            destination.SetTransparentColor( transparentColor_ );
            destination.SetImageScaleFactorX( imageScaleFactorX_ );
            destination.SetImageOffsetX( imageOffsetX_ );
            destination.SetImageScaleFactorY( imageScaleFactorY_ );
            destination.SetImageOffsetY( imageOffsetY_ );
            destination.SetRadarImageType( radarImageType_ );
            destination.SetTrackColor( trackColor_ );
            destination.SetVectorColor( vectorColor_ );
            destination.SetEnableNmea( enableNmea_ );
            destination.SetNmeaReceiverIPAddress( nmeaReceiverIPAddress_ );
            destination.SetNmeaReceiverPort( nmeaReceiverPort_ );
            destination.SetNmeaReceiverSourceId( nmeaReceiverSourceId_ );
        }
    };

    using SimpleRadarConfigurationDataReader = SimpleColumnDataReader<RadarConfigurationColumnData>;

    class RadarImageColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid radar_;
        DateTime timestamp_;
        UInt32 depth_ = 0;
        Int32 resolution_ = 0;
        Int32 range_ = 0;
        Binary image_;
        SQLLEN imageLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT DEPTH_FIELD_ID = 5;
        static constexpr SQLUSMALLINT RESOLUTION_FIELD_ID = 6;
        static constexpr SQLUSMALLINT RANGE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT IMAGE_FIELD_ID = 8;

        RadarImageColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarImage;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        UInt32 Depth( ) const
        {
            return depth_;
        }
        void SetDepth( UInt32 depth )
        {
            depth_ = depth;
        }
        Int32 Resolution( ) const
        {
            return resolution_;
        }
        void SetResolution( Int32 resolution )
        {
            resolution_ = resolution;
        }
        Int32 Range( ) const
        {
            return range_;
        }
        void SetRange( Int32 range )
        {
            range_ = range;
        }
        const Binary& Image( ) const
        {
            return image_;
        }
        void SetImage( const Binary& image )
        {
            image_ = image;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADAR_FIELD_ID, radar_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEPTH_FIELD_ID, depth_);
            Bind(statement, RESOLUTION_FIELD_ID, resolution_);
            Bind(statement, RANGE_FIELD_ID, range_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            image_ = statement.GetBinary(IMAGE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadarImage );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radar_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, depth_);
            WriteColumnValue( destination, resolution_);
            WriteColumnValue( destination, range_);
            WriteColumnValue( destination, image_);
        }
        void AssignTo( Types::RadarImageObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadar( radar_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDepth( depth_ );
            destination.SetResolution( resolution_ );
            destination.SetRange( range_ );
            destination.SetImage( image_ );
        }
    };

    using SimpleRadarImageDataReader = SimpleColumnDataReader<RadarImageColumnData>;

    class RadarRawTrackTableColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid radar_;
        DateTime timestamp_;
        Int32 count_ = 0;
        Binary table_;
        SQLLEN tableLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT COUNT_FIELD_ID = 5;
        static constexpr SQLUSMALLINT TABLE_FIELD_ID = 6;

        RadarRawTrackTableColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarRawTrackTable;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Int32 Count( ) const
        {
            return count_;
        }
        void SetCount( Int32 count )
        {
            count_ = count;
        }
        const Binary& Table( ) const
        {
            return table_;
        }
        void SetTable( const Binary& table )
        {
            table_ = table;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADAR_FIELD_ID, radar_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, COUNT_FIELD_ID, count_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            table_ = statement.GetBinary(TABLE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadarRawTrackTable );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radar_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, count_);
            WriteColumnValue( destination, table_);
        }
        void AssignTo( Types::RadarRawTrackTableObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadar( radar_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetCount( count_ );
            destination.SetTable( table_ );
        }
    };

    using SimpleRadarRawTrackTableDataReader = SimpleColumnDataReader<RadarRawTrackTableColumnData>;

    class RadarStatusColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid radar_;
        DateTime timestamp_;
        Int32 azimuthCount_ = 0;
        Int32 triggerCount_ = 0;
        TimeSpan rotationTime_;
        Types::RadarPulse pulse_ = Types::RadarPulse::Short;
        bool tx_ = false;
        bool tracking_ = false;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT AZIMUTHCOUNT_FIELD_ID = 5;
        static constexpr SQLUSMALLINT TRIGGERCOUNT_FIELD_ID = 6;
        static constexpr SQLUSMALLINT ROTATIONTIME_FIELD_ID = 7;
        static constexpr SQLUSMALLINT PULSE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT TX_FIELD_ID = 9;
        static constexpr SQLUSMALLINT TRACKING_FIELD_ID = 10;

        RadarStatusColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarStatus;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Int32 AzimuthCount( ) const
        {
            return azimuthCount_;
        }
        void SetAzimuthCount( Int32 azimuthCount )
        {
            azimuthCount_ = azimuthCount;
        }
        Int32 TriggerCount( ) const
        {
            return triggerCount_;
        }
        void SetTriggerCount( Int32 triggerCount )
        {
            triggerCount_ = triggerCount;
        }
        const TimeSpan& RotationTime( ) const
        {
            return rotationTime_;
        }
        void SetRotationTime( const TimeSpan& rotationTime )
        {
            rotationTime_ = rotationTime;
        }
        Types::RadarPulse Pulse( ) const
        {
            return pulse_;
        }
        void SetPulse( Types::RadarPulse pulse )
        {
            pulse_ = pulse;
        }
        bool Tx( ) const
        {
            return tx_;
        }
        void SetTx( bool tx )
        {
            tx_ = tx;
        }
        bool Tracking( ) const
        {
            return tracking_;
        }
        void SetTracking( bool tracking )
        {
            tracking_ = tracking;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADAR_FIELD_ID, radar_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, AZIMUTHCOUNT_FIELD_ID, azimuthCount_);
            Bind(statement, TRIGGERCOUNT_FIELD_ID, triggerCount_);
            Bind(statement, ROTATIONTIME_FIELD_ID, rotationTime_);
            Bind(statement, PULSE_FIELD_ID, pulse_);
            Bind(statement, TX_FIELD_ID, tx_);
            Bind(statement, TRACKING_FIELD_ID, tracking_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadarStatus );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radar_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, azimuthCount_);
            WriteColumnValue( destination, triggerCount_);
            WriteColumnValue( destination, rotationTime_);
            WriteColumnValue( destination, pulse_);
            WriteColumnValue( destination, tx_);
            WriteColumnValue( destination, tracking_);
        }
        void AssignTo( Types::RadarStatusObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadar( radar_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetAzimuthCount( azimuthCount_ );
            destination.SetTriggerCount( triggerCount_ );
            destination.SetRotationTime( rotationTime_ );
            destination.SetPulse( pulse_ );
            destination.SetTx( tx_ );
            destination.SetTracking( tracking_ );
        }
    };

    using SimpleRadarStatusDataReader = SimpleColumnDataReader<RadarStatusColumnData>;

    class RadioCommandColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid radio_;
        DateTime timestamp_;
        Types::DeviceCommandSourceType deviceCommandSourceType_ = Types::DeviceCommandSourceType::Unknown;
        Guid deviceCommandSourceId_;
        Guid reply_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT RADIO_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCETYPE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCEID_FIELD_ID = 6;
        static constexpr SQLUSMALLINT REPLY_FIELD_ID = 7;

        RadioCommandColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadioCommand;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radio( ) const
        {
            return radio_;
        }
        void SetRadio( const Guid& radio )
        {
            radio_ = radio;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::DeviceCommandSourceType DeviceCommandSourceType( ) const
        {
            return deviceCommandSourceType_;
        }
        void SetDeviceCommandSourceType( Types::DeviceCommandSourceType deviceCommandSourceType )
        {
            deviceCommandSourceType_ = deviceCommandSourceType;
        }
        const Guid& DeviceCommandSourceId( ) const
        {
            return deviceCommandSourceId_;
        }
        void SetDeviceCommandSourceId( const Guid& deviceCommandSourceId )
        {
            deviceCommandSourceId_ = deviceCommandSourceId;
        }
        const Guid& Reply( ) const
        {
            return reply_;
        }
        void SetReply( const Guid& reply )
        {
            reply_ = reply;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADIO_FIELD_ID, radio_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEVICECOMMANDSOURCETYPE_FIELD_ID, deviceCommandSourceType_);
            Bind(statement, DEVICECOMMANDSOURCEID_FIELD_ID, deviceCommandSourceId_);
            Bind(statement, REPLY_FIELD_ID, reply_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadioCommand );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radio_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, deviceCommandSourceType_);
            WriteColumnValue( destination, deviceCommandSourceId_);
            WriteColumnValue( destination, reply_);
        }
        void AssignTo( Types::RadioCommandObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadio( radio_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDeviceCommandSourceType( deviceCommandSourceType_ );
            destination.SetDeviceCommandSourceId( deviceCommandSourceId_ );
            destination.SetReply( reply_ );
        }
    };

    using SimpleRadioCommandDataReader = SimpleColumnDataReader<RadioCommandColumnData>;

    class RadioCommandReplyColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid radio_;
        DateTime timestamp_;
        Guid command_;
        Types::DeviceCommandReplyStatus status_ = Types::DeviceCommandReplyStatus::Unknown;
        WideString message_;
        SQLLEN messageLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT RADIO_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT COMMAND_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STATUS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MESSAGE_FIELD_ID = 7;

        RadioCommandReplyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadioCommandReply;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radio( ) const
        {
            return radio_;
        }
        void SetRadio( const Guid& radio )
        {
            radio_ = radio;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const Guid& Command( ) const
        {
            return command_;
        }
        void SetCommand( const Guid& command )
        {
            command_ = command;
        }
        Types::DeviceCommandReplyStatus Status( ) const
        {
            return status_;
        }
        void SetStatus( Types::DeviceCommandReplyStatus status )
        {
            status_ = status;
        }
        const WideString& Message( ) const
        {
            return message_;
        }
        void SetMessage( const WideString& message )
        {
            message_ = message;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADIO_FIELD_ID, radio_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, COMMAND_FIELD_ID, command_);
            Bind(statement, STATUS_FIELD_ID, status_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            message_ = statement.GetWideString(MESSAGE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadioCommandReply );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radio_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, command_);
            WriteColumnValue( destination, status_);
            WriteColumnValue( destination, message_);
        }
        void AssignTo( Types::RadioCommandReplyObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadio( radio_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetCommand( command_ );
            destination.SetStatus( status_ );
            destination.SetMessage( message_ );
        }
    };

    using SimpleRadioCommandReplyDataReader = SimpleColumnDataReader<RadioCommandReplyColumnData>;

    class RadioConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid radio_;
        DateTime timestamp_;
        double longitude_ = 0.0;
        double latitude_ = 0.0;
        FixedDBWideString<127> playbackUrl_;
        FixedDBWideString<127> radioIPAddress_;
        Int32 radioPort_ = 0;
        FixedDBWideString<127> ed137IPAddress_;
        Int32 ed137Port_ = 0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT RADIO_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT PLAYBACKURL_FIELD_ID = 7;
        static constexpr SQLUSMALLINT RADIOIPADDRESS_FIELD_ID = 8;
        static constexpr SQLUSMALLINT RADIOPORT_FIELD_ID = 9;
        static constexpr SQLUSMALLINT ED137IPADDRESS_FIELD_ID = 10;
        static constexpr SQLUSMALLINT ED137PORT_FIELD_ID = 11;

        RadioConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadioConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radio( ) const
        {
            return radio_;
        }
        void SetRadio( const Guid& radio )
        {
            radio_ = radio;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        const FixedDBWideString<127>& PlaybackUrl( ) const
        {
            return playbackUrl_;
        }
        void SetPlaybackUrl( const FixedDBWideString<127>& playbackUrl )
        {
            playbackUrl_ = playbackUrl;
        }
        const FixedDBWideString<127>& RadioIPAddress( ) const
        {
            return radioIPAddress_;
        }
        void SetRadioIPAddress( const FixedDBWideString<127>& radioIPAddress )
        {
            radioIPAddress_ = radioIPAddress;
        }
        Int32 RadioPort( ) const
        {
            return radioPort_;
        }
        void SetRadioPort( Int32 radioPort )
        {
            radioPort_ = radioPort;
        }
        const FixedDBWideString<127>& Ed137IPAddress( ) const
        {
            return ed137IPAddress_;
        }
        void SetEd137IPAddress( const FixedDBWideString<127>& ed137IPAddress )
        {
            ed137IPAddress_ = ed137IPAddress;
        }
        Int32 Ed137Port( ) const
        {
            return ed137Port_;
        }
        void SetEd137Port( Int32 ed137Port )
        {
            ed137Port_ = ed137Port;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADIO_FIELD_ID, radio_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, PLAYBACKURL_FIELD_ID, playbackUrl_);
            Bind(statement, RADIOIPADDRESS_FIELD_ID, radioIPAddress_);
            Bind(statement, RADIOPORT_FIELD_ID, radioPort_);
            Bind(statement, ED137IPADDRESS_FIELD_ID, ed137IPAddress_);
            Bind(statement, ED137PORT_FIELD_ID, ed137Port_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadioConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radio_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, playbackUrl_);
            WriteColumnValue( destination, radioIPAddress_);
            WriteColumnValue( destination, radioPort_);
            WriteColumnValue( destination, ed137IPAddress_);
            WriteColumnValue( destination, ed137Port_);
        }
        void AssignTo( Types::RadioConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadio( radio_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetLongitude( longitude_ );
            destination.SetLatitude( latitude_ );
            destination.SetPlaybackUrl( playbackUrl_ );
            destination.SetRadioIPAddress( radioIPAddress_ );
            destination.SetRadioPort( radioPort_ );
            destination.SetEd137IPAddress( ed137IPAddress_ );
            destination.SetEd137Port( ed137Port_ );
        }
    };

    using SimpleRadioConfigurationDataReader = SimpleColumnDataReader<RadioConfigurationColumnData>;

    class RadomeCommandColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid radome_;
        DateTime timestamp_;
        Types::DeviceCommandSourceType deviceCommandSourceType_ = Types::DeviceCommandSourceType::Unknown;
        Guid deviceCommandSourceId_;
        Guid reply_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT RADOME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCETYPE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCEID_FIELD_ID = 6;
        static constexpr SQLUSMALLINT REPLY_FIELD_ID = 7;

        RadomeCommandColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadomeCommand;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radome( ) const
        {
            return radome_;
        }
        void SetRadome( const Guid& radome )
        {
            radome_ = radome;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::DeviceCommandSourceType DeviceCommandSourceType( ) const
        {
            return deviceCommandSourceType_;
        }
        void SetDeviceCommandSourceType( Types::DeviceCommandSourceType deviceCommandSourceType )
        {
            deviceCommandSourceType_ = deviceCommandSourceType;
        }
        const Guid& DeviceCommandSourceId( ) const
        {
            return deviceCommandSourceId_;
        }
        void SetDeviceCommandSourceId( const Guid& deviceCommandSourceId )
        {
            deviceCommandSourceId_ = deviceCommandSourceId;
        }
        const Guid& Reply( ) const
        {
            return reply_;
        }
        void SetReply( const Guid& reply )
        {
            reply_ = reply;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADOME_FIELD_ID, radome_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEVICECOMMANDSOURCETYPE_FIELD_ID, deviceCommandSourceType_);
            Bind(statement, DEVICECOMMANDSOURCEID_FIELD_ID, deviceCommandSourceId_);
            Bind(statement, REPLY_FIELD_ID, reply_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadomeCommand );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radome_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, deviceCommandSourceType_);
            WriteColumnValue( destination, deviceCommandSourceId_);
            WriteColumnValue( destination, reply_);
        }
        void AssignTo( Types::RadomeCommandObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadome( radome_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDeviceCommandSourceType( deviceCommandSourceType_ );
            destination.SetDeviceCommandSourceId( deviceCommandSourceId_ );
            destination.SetReply( reply_ );
        }
    };

    using SimpleRadomeCommandDataReader = SimpleColumnDataReader<RadomeCommandColumnData>;

    class RadomeCommandReplyColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid radome_;
        DateTime timestamp_;
        Guid command_;
        Types::DeviceCommandReplyStatus status_ = Types::DeviceCommandReplyStatus::Unknown;
        WideString message_;
        SQLLEN messageLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT RADOME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT COMMAND_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STATUS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MESSAGE_FIELD_ID = 7;

        RadomeCommandReplyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadomeCommandReply;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radome( ) const
        {
            return radome_;
        }
        void SetRadome( const Guid& radome )
        {
            radome_ = radome;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const Guid& Command( ) const
        {
            return command_;
        }
        void SetCommand( const Guid& command )
        {
            command_ = command;
        }
        Types::DeviceCommandReplyStatus Status( ) const
        {
            return status_;
        }
        void SetStatus( Types::DeviceCommandReplyStatus status )
        {
            status_ = status;
        }
        const WideString& Message( ) const
        {
            return message_;
        }
        void SetMessage( const WideString& message )
        {
            message_ = message;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADOME_FIELD_ID, radome_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, COMMAND_FIELD_ID, command_);
            Bind(statement, STATUS_FIELD_ID, status_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            message_ = statement.GetWideString(MESSAGE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadomeCommandReply );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radome_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, command_);
            WriteColumnValue( destination, status_);
            WriteColumnValue( destination, message_);
        }
        void AssignTo( Types::RadomeCommandReplyObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadome( radome_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetCommand( command_ );
            destination.SetStatus( status_ );
            destination.SetMessage( message_ );
        }
    };

    using SimpleRadomeCommandReplyDataReader = SimpleColumnDataReader<RadomeCommandReplyColumnData>;

    class RadomeConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid radome_;
        DateTime timestamp_;
        TimeSpan interval_;
        double lowPressureLimit_ = 0.0;
        double highPressureLimit_ = 0.0;
        double lowTemperatureLimit_ = 0.0;
        double highTemperatureLimit_ = 0.0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT RADOME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT INTERVAL_FIELD_ID = 5;
        static constexpr SQLUSMALLINT LOWPRESSURELIMIT_FIELD_ID = 6;
        static constexpr SQLUSMALLINT HIGHPRESSURELIMIT_FIELD_ID = 7;
        static constexpr SQLUSMALLINT LOWTEMPERATURELIMIT_FIELD_ID = 8;
        static constexpr SQLUSMALLINT HIGHTEMPERATURELIMIT_FIELD_ID = 9;

        RadomeConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadomeConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Radome( ) const
        {
            return radome_;
        }
        void SetRadome( const Guid& radome )
        {
            radome_ = radome;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const TimeSpan& Interval( ) const
        {
            return interval_;
        }
        void SetInterval( const TimeSpan& interval )
        {
            interval_ = interval;
        }
        double LowPressureLimit( ) const
        {
            return lowPressureLimit_;
        }
        void SetLowPressureLimit( double lowPressureLimit )
        {
            lowPressureLimit_ = lowPressureLimit;
        }
        double HighPressureLimit( ) const
        {
            return highPressureLimit_;
        }
        void SetHighPressureLimit( double highPressureLimit )
        {
            highPressureLimit_ = highPressureLimit;
        }
        double LowTemperatureLimit( ) const
        {
            return lowTemperatureLimit_;
        }
        void SetLowTemperatureLimit( double lowTemperatureLimit )
        {
            lowTemperatureLimit_ = lowTemperatureLimit;
        }
        double HighTemperatureLimit( ) const
        {
            return highTemperatureLimit_;
        }
        void SetHighTemperatureLimit( double highTemperatureLimit )
        {
            highTemperatureLimit_ = highTemperatureLimit;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, RADOME_FIELD_ID, radome_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, INTERVAL_FIELD_ID, interval_);
            Bind(statement, LOWPRESSURELIMIT_FIELD_ID, lowPressureLimit_);
            Bind(statement, HIGHPRESSURELIMIT_FIELD_ID, highPressureLimit_);
            Bind(statement, LOWTEMPERATURELIMIT_FIELD_ID, lowTemperatureLimit_);
            Bind(statement, HIGHTEMPERATURELIMIT_FIELD_ID, highTemperatureLimit_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::RadomeConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, radome_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, interval_);
            WriteColumnValue( destination, lowPressureLimit_);
            WriteColumnValue( destination, highPressureLimit_);
            WriteColumnValue( destination, lowTemperatureLimit_);
            WriteColumnValue( destination, highTemperatureLimit_);
        }
        void AssignTo( Types::RadomeConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetRadome( radome_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetInterval( interval_ );
            destination.SetLowPressureLimit( lowPressureLimit_ );
            destination.SetHighPressureLimit( highPressureLimit_ );
            destination.SetLowTemperatureLimit( lowTemperatureLimit_ );
            destination.SetHighTemperatureLimit( highTemperatureLimit_ );
        }
    };

    using SimpleRadomeConfigurationDataReader = SimpleColumnDataReader<RadomeConfigurationColumnData>;

    class ReferenceTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        Guid value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        ReferenceTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ReferenceTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const Guid& Value( ) const
        {
            return value_;
        }
        void SetValue( const Guid& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::ReferenceTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::ReferenceTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleReferenceTimeseriesValueDataReader = SimpleColumnDataReader<ReferenceTimeseriesValueColumnData>;

    class SByteTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBSByte value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        SByteTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SByteTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBSByte& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBSByte& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::SByteTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::SByteTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleSByteTimeseriesValueDataReader = SimpleColumnDataReader<SByteTimeseriesValueColumnData>;

    class SecurityDomainColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        FixedDBWideString<127> name_;
        WideString description_;
        SQLLEN descriptionLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT DESCRIPTION_FIELD_ID = 4;

        SecurityDomainColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SecurityDomain;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const WideString& Description( ) const
        {
            return description_;
        }
        void SetDescription( const WideString& description )
        {
            description_ = description;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            description_ = statement.GetWideString(DESCRIPTION_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::SecurityDomain );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, description_);
        }
        void AssignTo( Types::SecurityDomainObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetName( name_ );
            destination.SetDescription( description_ );
        }
    };

    using SimpleSecurityDomainDataReader = SimpleColumnDataReader<SecurityDomainColumnData>;

    class SecurityIdentifierColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
        Guid domain_;
        FixedDBWideString<255> identity_;
        WideString description_;
        SQLLEN descriptionLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT DOMAIN_FIELD_ID = 4;
        static constexpr SQLUSMALLINT IDENTITY_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DESCRIPTION_FIELD_ID = 6;

        SecurityIdentifierColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SecurityIdentifier;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Domain( ) const
        {
            return domain_;
        }
        void SetDomain( const Guid& domain )
        {
            domain_ = domain;
        }
        const FixedDBWideString<255>& Identity( ) const
        {
            return identity_;
        }
        void SetIdentity( const FixedDBWideString<255>& identity )
        {
            identity_ = identity;
        }
        const WideString& Description( ) const
        {
            return description_;
        }
        void SetDescription( const WideString& description )
        {
            description_ = description;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, DOMAIN_FIELD_ID, domain_);
            Bind(statement, IDENTITY_FIELD_ID, identity_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            description_ = statement.GetWideString(DESCRIPTION_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::SecurityIdentifier );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, domain_);
            WriteColumnValue( destination, identity_);
            WriteColumnValue( destination, description_);
        }
        void AssignTo( Types::SecurityIdentifierObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetDomain( domain_ );
            destination.SetIdentity( identity_ );
            destination.SetDescription( description_ );
        }
    };

    using SimpleSecurityIdentifierDataReader = SimpleColumnDataReader<SecurityIdentifierColumnData>;

    class SecurityLoginColumnData : public SecurityIdentifierColumnData
    {
    public:
        using Base = SecurityIdentifierColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        SecurityLoginColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SecurityLogin;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::SecurityLoginObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::SecurityIdentifierObject&>( destination ) );
        }
    };

    using SimpleSecurityLoginDataReader = SimpleColumnDataReader<SecurityLoginColumnData>;

    class SecurityRoleColumnData : public SecurityIdentifierColumnData
    {
        FixedDBWideString<127> name_;
    public:
        using Base = SecurityIdentifierColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT NAME_FIELD_ID = 6;

        SecurityRoleColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SecurityRole;
        }

        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, NAME_FIELD_ID, name_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, name_);
        }
        void AssignTo( Types::SecurityRoleObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::SecurityIdentifierObject&>( destination ) );
            destination.SetName( name_ );
        }
    };

    using SimpleSecurityRoleDataReader = SimpleColumnDataReader<SecurityRoleColumnData>;

    class SecurityIdentifierRoleLinkColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid member_;
        Guid role_;
        DateTime start_;
        DBDateTime end_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT MEMBER_FIELD_ID = 3;
        static constexpr SQLUSMALLINT ROLE_FIELD_ID = 4;
        static constexpr SQLUSMALLINT START_FIELD_ID = 5;
        static constexpr SQLUSMALLINT END_FIELD_ID = 6;

        SecurityIdentifierRoleLinkColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SecurityIdentifierRoleLink;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Member( ) const
        {
            return member_;
        }
        void SetMember( const Guid& member )
        {
            member_ = member;
        }
        const Guid& Role( ) const
        {
            return role_;
        }
        void SetRole( const Guid& role )
        {
            role_ = role;
        }
        const DateTime& Start( ) const
        {
            return start_;
        }
        void SetStart( const DateTime& start )
        {
            start_ = start;
        }
        const DBDateTime& End( ) const
        {
            return end_;
        }
        void SetEnd( const DBDateTime& end )
        {
            end_ = end;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, MEMBER_FIELD_ID, member_);
            Bind(statement, ROLE_FIELD_ID, role_);
            Bind(statement, START_FIELD_ID, start_);
            Bind(statement, END_FIELD_ID, end_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::SecurityIdentifierRoleLink );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, member_);
            WriteColumnValue( destination, role_);
            WriteColumnValue( destination, start_);
            WriteColumnValue( destination, end_);
        }
        void AssignTo( Types::SecurityIdentifierRoleLinkObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetMember( member_ );
            destination.SetRole( role_ );
            destination.SetStart( start_ );
            destination.SetEnd( end_ );
        }
    };

    using SimpleSecurityIdentifierRoleLinkDataReader = SimpleColumnDataReader<SecurityIdentifierRoleLinkColumnData>;

    class SecurityLoginSessionColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid login_;
        DateTime fromTime_;
        DBDateTime throughTime_;
        Guid clientSession_;
        FixedDBWideString<260> notificationQueueName_;
        FixedDBWideString<260> messageQueueName_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT LOGIN_FIELD_ID = 3;
        static constexpr SQLUSMALLINT FROMTIME_FIELD_ID = 4;
        static constexpr SQLUSMALLINT THROUGHTIME_FIELD_ID = 5;
        static constexpr SQLUSMALLINT CLIENTSESSION_FIELD_ID = 6;
        static constexpr SQLUSMALLINT NOTIFICATIONQUEUENAME_FIELD_ID = 7;
        static constexpr SQLUSMALLINT MESSAGEQUEUENAME_FIELD_ID = 8;

        SecurityLoginSessionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SecurityLoginSession;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Login( ) const
        {
            return login_;
        }
        void SetLogin( const Guid& login )
        {
            login_ = login;
        }
        const DateTime& FromTime( ) const
        {
            return fromTime_;
        }
        void SetFromTime( const DateTime& fromTime )
        {
            fromTime_ = fromTime;
        }
        const DBDateTime& ThroughTime( ) const
        {
            return throughTime_;
        }
        void SetThroughTime( const DBDateTime& throughTime )
        {
            throughTime_ = throughTime;
        }
        const Guid& ClientSession( ) const
        {
            return clientSession_;
        }
        void SetClientSession( const Guid& clientSession )
        {
            clientSession_ = clientSession;
        }
        const FixedDBWideString<260>& NotificationQueueName( ) const
        {
            return notificationQueueName_;
        }
        void SetNotificationQueueName( const FixedDBWideString<260>& notificationQueueName )
        {
            notificationQueueName_ = notificationQueueName;
        }
        const FixedDBWideString<260>& MessageQueueName( ) const
        {
            return messageQueueName_;
        }
        void SetMessageQueueName( const FixedDBWideString<260>& messageQueueName )
        {
            messageQueueName_ = messageQueueName;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, LOGIN_FIELD_ID, login_);
            Bind(statement, FROMTIME_FIELD_ID, fromTime_);
            Bind(statement, THROUGHTIME_FIELD_ID, throughTime_);
            Bind(statement, CLIENTSESSION_FIELD_ID, clientSession_);
            Bind(statement, NOTIFICATIONQUEUENAME_FIELD_ID, notificationQueueName_);
            Bind(statement, MESSAGEQUEUENAME_FIELD_ID, messageQueueName_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::SecurityLoginSession );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, login_);
            WriteColumnValue( destination, fromTime_);
            WriteColumnValue( destination, throughTime_);
            WriteColumnValue( destination, clientSession_);
            WriteColumnValue( destination, notificationQueueName_);
            WriteColumnValue( destination, messageQueueName_);
        }
        void AssignTo( Types::SecurityLoginSessionObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetLogin( login_ );
            destination.SetFromTime( fromTime_ );
            destination.SetThroughTime( throughTime_ );
            destination.SetClientSession( clientSession_ );
            destination.SetNotificationQueueName( notificationQueueName_ );
            destination.SetMessageQueueName( messageQueueName_ );
        }
    };

    using SimpleSecurityLoginSessionDataReader = SimpleColumnDataReader<SecurityLoginSessionColumnData>;

    class SecurityPermissionColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid identifier_;
        DateTime timestamp_;
        Int32 typeCode_ = 0;
        bool canCreate_ = false;
        bool canRead_ = false;
        bool canUpdate_ = false;
        bool canDelete_ = false;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT IDENTIFIER_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT TYPECODE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT CANCREATE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT CANREAD_FIELD_ID = 7;
        static constexpr SQLUSMALLINT CANUPDATE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT CANDELETE_FIELD_ID = 9;

        SecurityPermissionColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SecurityPermission;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Identifier( ) const
        {
            return identifier_;
        }
        void SetIdentifier( const Guid& identifier )
        {
            identifier_ = identifier;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Int32 TypeCode( ) const
        {
            return typeCode_;
        }
        void SetTypeCode( Int32 typeCode )
        {
            typeCode_ = typeCode;
        }
        bool CanCreate( ) const
        {
            return canCreate_;
        }
        void SetCanCreate( bool canCreate )
        {
            canCreate_ = canCreate;
        }
        bool CanRead( ) const
        {
            return canRead_;
        }
        void SetCanRead( bool canRead )
        {
            canRead_ = canRead;
        }
        bool CanUpdate( ) const
        {
            return canUpdate_;
        }
        void SetCanUpdate( bool canUpdate )
        {
            canUpdate_ = canUpdate;
        }
        bool CanDelete( ) const
        {
            return canDelete_;
        }
        void SetCanDelete( bool canDelete )
        {
            canDelete_ = canDelete;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, IDENTIFIER_FIELD_ID, identifier_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, TYPECODE_FIELD_ID, typeCode_);
            Bind(statement, CANCREATE_FIELD_ID, canCreate_);
            Bind(statement, CANREAD_FIELD_ID, canRead_);
            Bind(statement, CANUPDATE_FIELD_ID, canUpdate_);
            Bind(statement, CANDELETE_FIELD_ID, canDelete_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::SecurityPermission );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, identifier_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, typeCode_);
            WriteColumnValue( destination, canCreate_);
            WriteColumnValue( destination, canRead_);
            WriteColumnValue( destination, canUpdate_);
            WriteColumnValue( destination, canDelete_);
        }
        void AssignTo( Types::SecurityPermissionObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetIdentifier( identifier_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetTypeCode( typeCode_ );
            destination.SetCanCreate( canCreate_ );
            destination.SetCanRead( canRead_ );
            destination.SetCanUpdate( canUpdate_ );
            destination.SetCanDelete( canDelete_ );
        }
    };

    using SimpleSecurityPermissionDataReader = SimpleColumnDataReader<SecurityPermissionColumnData>;

    class SingleTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBSingle value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        SingleTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SingleTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBSingle& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBSingle& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::SingleTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::SingleTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleSingleTimeseriesValueDataReader = SimpleColumnDataReader<SingleTimeseriesValueColumnData>;

    class StringTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        WideString value_;
        SQLLEN valueLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        StringTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::StringTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const WideString& Value( ) const
        {
            return value_;
        }
        void SetValue( const WideString& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            value_ = statement.GetWideString(VALUE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::StringTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::StringTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleStringTimeseriesValueDataReader = SimpleColumnDataReader<StringTimeseriesValueColumnData>;

    class TimeseriesCatalogElementColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
        DBGuid catalog_;
        FixedDBWideString<127> name_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT CATALOG_FIELD_ID = 4;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 5;

        TimeseriesCatalogElementColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TimeseriesCatalogElement;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const DBGuid& Catalog( ) const
        {
            return catalog_;
        }
        void SetCatalog( const DBGuid& catalog )
        {
            catalog_ = catalog;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, CATALOG_FIELD_ID, catalog_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::TimeseriesCatalogElement );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, catalog_);
            WriteColumnValue( destination, name_);
        }
        void AssignTo( Types::TimeseriesCatalogElementObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetCatalog( catalog_ );
            destination.SetName( name_ );
        }
    };

    using SimpleTimeseriesCatalogElementDataReader = SimpleColumnDataReader<TimeseriesCatalogElementColumnData>;

    class TimeseriesColumnData : public TimeseriesCatalogElementColumnData
    {
        TimeSpan maxRetention_;
    public:
        using Base = TimeseriesCatalogElementColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT MAXRETENTION_FIELD_ID = 5;

        TimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Timeseries;
        }

        const TimeSpan& MaxRetention( ) const
        {
            return maxRetention_;
        }
        void SetMaxRetention( const TimeSpan& maxRetention )
        {
            maxRetention_ = maxRetention;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, MAXRETENTION_FIELD_ID, maxRetention_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, maxRetention_);
        }
        void AssignTo( Types::TimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesCatalogElementObject&>( destination ) );
            destination.SetMaxRetention( maxRetention_ );
        }
    };

    using SimpleTimeseriesDataReader = SimpleColumnDataReader<TimeseriesColumnData>;

    class BinaryTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        BinaryTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BinaryTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::BinaryTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleBinaryTimeseriesDataReader = SimpleColumnDataReader<BinaryTimeseriesColumnData>;

    class BooleanTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        BooleanTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::BooleanTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::BooleanTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleBooleanTimeseriesDataReader = SimpleColumnDataReader<BooleanTimeseriesColumnData>;

    class AisAidToNavigationOffPositionTimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        Guid aidToNavigation_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT AIDTONAVIGATION_FIELD_ID = 6;

        AisAidToNavigationOffPositionTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisAidToNavigationOffPositionTimeseries;
        }

        const Guid& AidToNavigation( ) const
        {
            return aidToNavigation_;
        }
        void SetAidToNavigation( const Guid& aidToNavigation )
        {
            aidToNavigation_ = aidToNavigation;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, AIDTONAVIGATION_FIELD_ID, aidToNavigation_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, aidToNavigation_);
        }
        void AssignTo( Types::AisAidToNavigationOffPositionTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetAidToNavigation( aidToNavigation_ );
        }
    };

    using SimpleAisAidToNavigationOffPositionTimeseriesDataReader = SimpleColumnDataReader<AisAidToNavigationOffPositionTimeseriesColumnData>;

    class DeviceEnabledTimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        DBGuid device_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT DEVICE_FIELD_ID = 6;

        DeviceEnabledTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DeviceEnabledTimeseries;
        }

        const DBGuid& Device( ) const
        {
            return device_;
        }
        void SetDevice( const DBGuid& device )
        {
            device_ = device;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, DEVICE_FIELD_ID, device_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, device_);
        }
        void AssignTo( Types::DeviceEnabledTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetDevice( device_ );
        }
    };

    using SimpleDeviceEnabledTimeseriesDataReader = SimpleColumnDataReader<DeviceEnabledTimeseriesColumnData>;

    class RadarAutomaticSensitivityTimeControlTimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarAutomaticSensitivityTimeControlTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarAutomaticSensitivityTimeControlTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarAutomaticSensitivityTimeControlTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarAutomaticSensitivityTimeControlTimeseriesDataReader = SimpleColumnDataReader<RadarAutomaticSensitivityTimeControlTimeseriesColumnData>;

    class RadarBlankSector1TimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarBlankSector1TimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarBlankSector1Timeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarBlankSector1TimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarBlankSector1TimeseriesDataReader = SimpleColumnDataReader<RadarBlankSector1TimeseriesColumnData>;

    class RadarBlankSector2TimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarBlankSector2TimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarBlankSector2Timeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarBlankSector2TimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarBlankSector2TimeseriesDataReader = SimpleColumnDataReader<RadarBlankSector2TimeseriesColumnData>;

    class RadarEnableAutomaticFrequencyControlTimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarEnableAutomaticFrequencyControlTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarEnableAutomaticFrequencyControlTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarEnableAutomaticFrequencyControlTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarEnableAutomaticFrequencyControlTimeseriesDataReader = SimpleColumnDataReader<RadarEnableAutomaticFrequencyControlTimeseriesColumnData>;

    class RadarEnableFastTimeConstantTimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarEnableFastTimeConstantTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarEnableFastTimeConstantTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarEnableFastTimeConstantTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarEnableFastTimeConstantTimeseriesDataReader = SimpleColumnDataReader<RadarEnableFastTimeConstantTimeseriesColumnData>;

    class RadarEnableSensitivityTimeControlTimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarEnableSensitivityTimeControlTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarEnableSensitivityTimeControlTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarEnableSensitivityTimeControlTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarEnableSensitivityTimeControlTimeseriesDataReader = SimpleColumnDataReader<RadarEnableSensitivityTimeControlTimeseriesColumnData>;

    class RadarPowerOnTimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarPowerOnTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarPowerOnTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarPowerOnTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarPowerOnTimeseriesDataReader = SimpleColumnDataReader<RadarPowerOnTimeseriesColumnData>;

    class RadarSaveSettingsTimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarSaveSettingsTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarSaveSettingsTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarSaveSettingsTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarSaveSettingsTimeseriesDataReader = SimpleColumnDataReader<RadarSaveSettingsTimeseriesColumnData>;

    class RadarTrackingTimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarTrackingTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarTrackingTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarTrackingTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarTrackingTimeseriesDataReader = SimpleColumnDataReader<RadarTrackingTimeseriesColumnData>;

    class MediaProxySessionEnabledTimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        Guid proxySession_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT PROXYSESSION_FIELD_ID = 6;

        MediaProxySessionEnabledTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::MediaProxySessionEnabledTimeseries;
        }

        const Guid& ProxySession( ) const
        {
            return proxySession_;
        }
        void SetProxySession( const Guid& proxySession )
        {
            proxySession_ = proxySession;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, PROXYSESSION_FIELD_ID, proxySession_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, proxySession_);
        }
        void AssignTo( Types::MediaProxySessionEnabledTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetProxySession( proxySession_ );
        }
    };

    using SimpleMediaProxySessionEnabledTimeseriesDataReader = SimpleColumnDataReader<MediaProxySessionEnabledTimeseriesColumnData>;

    class MediaServiceEnabledTimeseriesColumnData : public BooleanTimeseriesColumnData
    {
        Guid service_;
    public:
        using Base = BooleanTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT SERVICE_FIELD_ID = 6;

        MediaServiceEnabledTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::MediaServiceEnabledTimeseries;
        }

        const Guid& Service( ) const
        {
            return service_;
        }
        void SetService( const Guid& service )
        {
            service_ = service;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, SERVICE_FIELD_ID, service_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, service_);
        }
        void AssignTo( Types::MediaServiceEnabledTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::BooleanTimeseriesObject&>( destination ) );
            destination.SetService( service_ );
        }
    };

    using SimpleMediaServiceEnabledTimeseriesDataReader = SimpleColumnDataReader<MediaServiceEnabledTimeseriesColumnData>;

    class ByteTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        ByteTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ByteTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::ByteTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleByteTimeseriesDataReader = SimpleColumnDataReader<ByteTimeseriesColumnData>;

    class DateTimeTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        DateTimeTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DateTimeTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::DateTimeTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleDateTimeTimeseriesDataReader = SimpleColumnDataReader<DateTimeTimeseriesColumnData>;

    class DoubleTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        DoubleTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::DoubleTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::DoubleTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleDoubleTimeseriesDataReader = SimpleColumnDataReader<DoubleTimeseriesColumnData>;

    class GNSSAltitudeTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid gNSSDevice_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT GNSSDEVICE_FIELD_ID = 6;

        GNSSAltitudeTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GNSSAltitudeTimeseries;
        }

        const Guid& GNSSDevice( ) const
        {
            return gNSSDevice_;
        }
        void SetGNSSDevice( const Guid& gNSSDevice )
        {
            gNSSDevice_ = gNSSDevice;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, GNSSDEVICE_FIELD_ID, gNSSDevice_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, gNSSDevice_);
        }
        void AssignTo( Types::GNSSAltitudeTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetGNSSDevice( gNSSDevice_ );
        }
    };

    using SimpleGNSSAltitudeTimeseriesDataReader = SimpleColumnDataReader<GNSSAltitudeTimeseriesColumnData>;

    class GNSSLatitudeTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid gNSSDevice_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT GNSSDEVICE_FIELD_ID = 6;

        GNSSLatitudeTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GNSSLatitudeTimeseries;
        }

        const Guid& GNSSDevice( ) const
        {
            return gNSSDevice_;
        }
        void SetGNSSDevice( const Guid& gNSSDevice )
        {
            gNSSDevice_ = gNSSDevice;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, GNSSDEVICE_FIELD_ID, gNSSDevice_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, gNSSDevice_);
        }
        void AssignTo( Types::GNSSLatitudeTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetGNSSDevice( gNSSDevice_ );
        }
    };

    using SimpleGNSSLatitudeTimeseriesDataReader = SimpleColumnDataReader<GNSSLatitudeTimeseriesColumnData>;

    class GNSSLongitudeTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid gNSSDevice_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT GNSSDEVICE_FIELD_ID = 6;

        GNSSLongitudeTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GNSSLongitudeTimeseries;
        }

        const Guid& GNSSDevice( ) const
        {
            return gNSSDevice_;
        }
        void SetGNSSDevice( const Guid& gNSSDevice )
        {
            gNSSDevice_ = gNSSDevice;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, GNSSDEVICE_FIELD_ID, gNSSDevice_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, gNSSDevice_);
        }
        void AssignTo( Types::GNSSLongitudeTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetGNSSDevice( gNSSDevice_ );
        }
    };

    using SimpleGNSSLongitudeTimeseriesDataReader = SimpleColumnDataReader<GNSSLongitudeTimeseriesColumnData>;

    class GyroCourseTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid gyroDevice_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT GYRODEVICE_FIELD_ID = 6;

        GyroCourseTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GyroCourseTimeseries;
        }

        const Guid& GyroDevice( ) const
        {
            return gyroDevice_;
        }
        void SetGyroDevice( const Guid& gyroDevice )
        {
            gyroDevice_ = gyroDevice;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, GYRODEVICE_FIELD_ID, gyroDevice_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, gyroDevice_);
        }
        void AssignTo( Types::GyroCourseTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetGyroDevice( gyroDevice_ );
        }
    };

    using SimpleGyroCourseTimeseriesDataReader = SimpleColumnDataReader<GyroCourseTimeseriesColumnData>;

    class GyroHeadingMagneticNorthTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid gyroDevice_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT GYRODEVICE_FIELD_ID = 6;

        GyroHeadingMagneticNorthTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GyroHeadingMagneticNorthTimeseries;
        }

        const Guid& GyroDevice( ) const
        {
            return gyroDevice_;
        }
        void SetGyroDevice( const Guid& gyroDevice )
        {
            gyroDevice_ = gyroDevice;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, GYRODEVICE_FIELD_ID, gyroDevice_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, gyroDevice_);
        }
        void AssignTo( Types::GyroHeadingMagneticNorthTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetGyroDevice( gyroDevice_ );
        }
    };

    using SimpleGyroHeadingMagneticNorthTimeseriesDataReader = SimpleColumnDataReader<GyroHeadingMagneticNorthTimeseriesColumnData>;

    class GyroHeadingTrueNorthTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid gyroDevice_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT GYRODEVICE_FIELD_ID = 6;

        GyroHeadingTrueNorthTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GyroHeadingTrueNorthTimeseries;
        }

        const Guid& GyroDevice( ) const
        {
            return gyroDevice_;
        }
        void SetGyroDevice( const Guid& gyroDevice )
        {
            gyroDevice_ = gyroDevice;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, GYRODEVICE_FIELD_ID, gyroDevice_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, gyroDevice_);
        }
        void AssignTo( Types::GyroHeadingTrueNorthTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetGyroDevice( gyroDevice_ );
        }
    };

    using SimpleGyroHeadingTrueNorthTimeseriesDataReader = SimpleColumnDataReader<GyroHeadingTrueNorthTimeseriesColumnData>;

    class GyroPitchTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid gyroDevice_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT GYRODEVICE_FIELD_ID = 6;

        GyroPitchTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GyroPitchTimeseries;
        }

        const Guid& GyroDevice( ) const
        {
            return gyroDevice_;
        }
        void SetGyroDevice( const Guid& gyroDevice )
        {
            gyroDevice_ = gyroDevice;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, GYRODEVICE_FIELD_ID, gyroDevice_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, gyroDevice_);
        }
        void AssignTo( Types::GyroPitchTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetGyroDevice( gyroDevice_ );
        }
    };

    using SimpleGyroPitchTimeseriesDataReader = SimpleColumnDataReader<GyroPitchTimeseriesColumnData>;

    class GyroRateOfTurnTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid gyroDevice_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT GYRODEVICE_FIELD_ID = 6;

        GyroRateOfTurnTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GyroRateOfTurnTimeseries;
        }

        const Guid& GyroDevice( ) const
        {
            return gyroDevice_;
        }
        void SetGyroDevice( const Guid& gyroDevice )
        {
            gyroDevice_ = gyroDevice;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, GYRODEVICE_FIELD_ID, gyroDevice_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, gyroDevice_);
        }
        void AssignTo( Types::GyroRateOfTurnTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetGyroDevice( gyroDevice_ );
        }
    };

    using SimpleGyroRateOfTurnTimeseriesDataReader = SimpleColumnDataReader<GyroRateOfTurnTimeseriesColumnData>;

    class GyroRollTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid gyroDevice_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT GYRODEVICE_FIELD_ID = 6;

        GyroRollTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GyroRollTimeseries;
        }

        const Guid& GyroDevice( ) const
        {
            return gyroDevice_;
        }
        void SetGyroDevice( const Guid& gyroDevice )
        {
            gyroDevice_ = gyroDevice;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, GYRODEVICE_FIELD_ID, gyroDevice_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, gyroDevice_);
        }
        void AssignTo( Types::GyroRollTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetGyroDevice( gyroDevice_ );
        }
    };

    using SimpleGyroRollTimeseriesDataReader = SimpleColumnDataReader<GyroRollTimeseriesColumnData>;

    class GyroSpeedTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid gyroDevice_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT GYRODEVICE_FIELD_ID = 6;

        GyroSpeedTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GyroSpeedTimeseries;
        }

        const Guid& GyroDevice( ) const
        {
            return gyroDevice_;
        }
        void SetGyroDevice( const Guid& gyroDevice )
        {
            gyroDevice_ = gyroDevice;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, GYRODEVICE_FIELD_ID, gyroDevice_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, gyroDevice_);
        }
        void AssignTo( Types::GyroSpeedTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetGyroDevice( gyroDevice_ );
        }
    };

    using SimpleGyroSpeedTimeseriesDataReader = SimpleColumnDataReader<GyroSpeedTimeseriesColumnData>;

    class RadarLatitudeTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarLatitudeTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarLatitudeTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarLatitudeTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarLatitudeTimeseriesDataReader = SimpleColumnDataReader<RadarLatitudeTimeseriesColumnData>;

    class RadarLongitudeTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarLongitudeTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarLongitudeTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarLongitudeTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarLongitudeTimeseriesDataReader = SimpleColumnDataReader<RadarLongitudeTimeseriesColumnData>;

    class RadomeDewPointTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid radome_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADOME_FIELD_ID = 6;

        RadomeDewPointTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadomeDewPointTimeseries;
        }

        const Guid& Radome( ) const
        {
            return radome_;
        }
        void SetRadome( const Guid& radome )
        {
            radome_ = radome;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADOME_FIELD_ID, radome_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radome_);
        }
        void AssignTo( Types::RadomeDewPointTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetRadome( radome_ );
        }
    };

    using SimpleRadomeDewPointTimeseriesDataReader = SimpleColumnDataReader<RadomeDewPointTimeseriesColumnData>;

    class RadomePressureTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid radome_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADOME_FIELD_ID = 6;

        RadomePressureTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadomePressureTimeseries;
        }

        const Guid& Radome( ) const
        {
            return radome_;
        }
        void SetRadome( const Guid& radome )
        {
            radome_ = radome;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADOME_FIELD_ID, radome_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radome_);
        }
        void AssignTo( Types::RadomePressureTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetRadome( radome_ );
        }
    };

    using SimpleRadomePressureTimeseriesDataReader = SimpleColumnDataReader<RadomePressureTimeseriesColumnData>;

    class RadomeTemperatureTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid radome_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADOME_FIELD_ID = 6;

        RadomeTemperatureTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadomeTemperatureTimeseries;
        }

        const Guid& Radome( ) const
        {
            return radome_;
        }
        void SetRadome( const Guid& radome )
        {
            radome_ = radome;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADOME_FIELD_ID, radome_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radome_);
        }
        void AssignTo( Types::RadomeTemperatureTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetRadome( radome_ );
        }
    };

    using SimpleRadomeTemperatureTimeseriesDataReader = SimpleColumnDataReader<RadomeTemperatureTimeseriesColumnData>;

    class VesselDraughtTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid vessel_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VESSEL_FIELD_ID = 6;

        VesselDraughtTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::VesselDraughtTimeseries;
        }

        const Guid& Vessel( ) const
        {
            return vessel_;
        }
        void SetVessel( const Guid& vessel )
        {
            vessel_ = vessel;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VESSEL_FIELD_ID, vessel_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, vessel_);
        }
        void AssignTo( Types::VesselDraughtTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetVessel( vessel_ );
        }
    };

    using SimpleVesselDraughtTimeseriesDataReader = SimpleColumnDataReader<VesselDraughtTimeseriesColumnData>;

    class ViewLatitudeTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid view_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VIEW_FIELD_ID = 6;

        ViewLatitudeTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ViewLatitudeTimeseries;
        }

        const Guid& View( ) const
        {
            return view_;
        }
        void SetView( const Guid& view )
        {
            view_ = view;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VIEW_FIELD_ID, view_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, view_);
        }
        void AssignTo( Types::ViewLatitudeTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetView( view_ );
        }
    };

    using SimpleViewLatitudeTimeseriesDataReader = SimpleColumnDataReader<ViewLatitudeTimeseriesColumnData>;

    class ViewLongitudeTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid view_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VIEW_FIELD_ID = 6;

        ViewLongitudeTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ViewLongitudeTimeseries;
        }

        const Guid& View( ) const
        {
            return view_;
        }
        void SetView( const Guid& view )
        {
            view_ = view;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VIEW_FIELD_ID, view_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, view_);
        }
        void AssignTo( Types::ViewLongitudeTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetView( view_ );
        }
    };

    using SimpleViewLongitudeTimeseriesDataReader = SimpleColumnDataReader<ViewLongitudeTimeseriesColumnData>;

    class ViewZoomLevelTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid view_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VIEW_FIELD_ID = 6;

        ViewZoomLevelTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ViewZoomLevelTimeseries;
        }

        const Guid& View( ) const
        {
            return view_;
        }
        void SetView( const Guid& view )
        {
            view_ = view;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VIEW_FIELD_ID, view_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, view_);
        }
        void AssignTo( Types::ViewZoomLevelTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetView( view_ );
        }
    };

    using SimpleViewZoomLevelTimeseriesDataReader = SimpleColumnDataReader<ViewZoomLevelTimeseriesColumnData>;

    class WeatherStationAbsoluteHumidityTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid weatherStation_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT WEATHERSTATION_FIELD_ID = 6;

        WeatherStationAbsoluteHumidityTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::WeatherStationAbsoluteHumidityTimeseries;
        }

        const Guid& WeatherStation( ) const
        {
            return weatherStation_;
        }
        void SetWeatherStation( const Guid& weatherStation )
        {
            weatherStation_ = weatherStation;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, WEATHERSTATION_FIELD_ID, weatherStation_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, weatherStation_);
        }
        void AssignTo( Types::WeatherStationAbsoluteHumidityTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetWeatherStation( weatherStation_ );
        }
    };

    using SimpleWeatherStationAbsoluteHumidityTimeseriesDataReader = SimpleColumnDataReader<WeatherStationAbsoluteHumidityTimeseriesColumnData>;

    class WeatherStationAirTemperatureTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid weatherStation_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT WEATHERSTATION_FIELD_ID = 6;

        WeatherStationAirTemperatureTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::WeatherStationAirTemperatureTimeseries;
        }

        const Guid& WeatherStation( ) const
        {
            return weatherStation_;
        }
        void SetWeatherStation( const Guid& weatherStation )
        {
            weatherStation_ = weatherStation;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, WEATHERSTATION_FIELD_ID, weatherStation_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, weatherStation_);
        }
        void AssignTo( Types::WeatherStationAirTemperatureTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetWeatherStation( weatherStation_ );
        }
    };

    using SimpleWeatherStationAirTemperatureTimeseriesDataReader = SimpleColumnDataReader<WeatherStationAirTemperatureTimeseriesColumnData>;

    class WeatherStationBarometricPressureTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid weatherStation_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT WEATHERSTATION_FIELD_ID = 6;

        WeatherStationBarometricPressureTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::WeatherStationBarometricPressureTimeseries;
        }

        const Guid& WeatherStation( ) const
        {
            return weatherStation_;
        }
        void SetWeatherStation( const Guid& weatherStation )
        {
            weatherStation_ = weatherStation;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, WEATHERSTATION_FIELD_ID, weatherStation_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, weatherStation_);
        }
        void AssignTo( Types::WeatherStationBarometricPressureTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetWeatherStation( weatherStation_ );
        }
    };

    using SimpleWeatherStationBarometricPressureTimeseriesDataReader = SimpleColumnDataReader<WeatherStationBarometricPressureTimeseriesColumnData>;

    class WeatherStationDewPointTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid weatherStation_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT WEATHERSTATION_FIELD_ID = 6;

        WeatherStationDewPointTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::WeatherStationDewPointTimeseries;
        }

        const Guid& WeatherStation( ) const
        {
            return weatherStation_;
        }
        void SetWeatherStation( const Guid& weatherStation )
        {
            weatherStation_ = weatherStation;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, WEATHERSTATION_FIELD_ID, weatherStation_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, weatherStation_);
        }
        void AssignTo( Types::WeatherStationDewPointTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetWeatherStation( weatherStation_ );
        }
    };

    using SimpleWeatherStationDewPointTimeseriesDataReader = SimpleColumnDataReader<WeatherStationDewPointTimeseriesColumnData>;

    class WeatherStationRelativeHumidityTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid weatherStation_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT WEATHERSTATION_FIELD_ID = 6;

        WeatherStationRelativeHumidityTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::WeatherStationRelativeHumidityTimeseries;
        }

        const Guid& WeatherStation( ) const
        {
            return weatherStation_;
        }
        void SetWeatherStation( const Guid& weatherStation )
        {
            weatherStation_ = weatherStation;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, WEATHERSTATION_FIELD_ID, weatherStation_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, weatherStation_);
        }
        void AssignTo( Types::WeatherStationRelativeHumidityTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetWeatherStation( weatherStation_ );
        }
    };

    using SimpleWeatherStationRelativeHumidityTimeseriesDataReader = SimpleColumnDataReader<WeatherStationRelativeHumidityTimeseriesColumnData>;

    class WeatherStationWaterTemperatureTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid weatherStation_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT WEATHERSTATION_FIELD_ID = 6;

        WeatherStationWaterTemperatureTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::WeatherStationWaterTemperatureTimeseries;
        }

        const Guid& WeatherStation( ) const
        {
            return weatherStation_;
        }
        void SetWeatherStation( const Guid& weatherStation )
        {
            weatherStation_ = weatherStation;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, WEATHERSTATION_FIELD_ID, weatherStation_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, weatherStation_);
        }
        void AssignTo( Types::WeatherStationWaterTemperatureTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetWeatherStation( weatherStation_ );
        }
    };

    using SimpleWeatherStationWaterTemperatureTimeseriesDataReader = SimpleColumnDataReader<WeatherStationWaterTemperatureTimeseriesColumnData>;

    class WeatherStationWindDirectionTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid weatherStation_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT WEATHERSTATION_FIELD_ID = 6;

        WeatherStationWindDirectionTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::WeatherStationWindDirectionTimeseries;
        }

        const Guid& WeatherStation( ) const
        {
            return weatherStation_;
        }
        void SetWeatherStation( const Guid& weatherStation )
        {
            weatherStation_ = weatherStation;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, WEATHERSTATION_FIELD_ID, weatherStation_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, weatherStation_);
        }
        void AssignTo( Types::WeatherStationWindDirectionTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetWeatherStation( weatherStation_ );
        }
    };

    using SimpleWeatherStationWindDirectionTimeseriesDataReader = SimpleColumnDataReader<WeatherStationWindDirectionTimeseriesColumnData>;

    class WeatherStationWindSpeedTimeseriesColumnData : public DoubleTimeseriesColumnData
    {
        Guid weatherStation_;
    public:
        using Base = DoubleTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT WEATHERSTATION_FIELD_ID = 6;

        WeatherStationWindSpeedTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::WeatherStationWindSpeedTimeseries;
        }

        const Guid& WeatherStation( ) const
        {
            return weatherStation_;
        }
        void SetWeatherStation( const Guid& weatherStation )
        {
            weatherStation_ = weatherStation;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, WEATHERSTATION_FIELD_ID, weatherStation_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, weatherStation_);
        }
        void AssignTo( Types::WeatherStationWindSpeedTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::DoubleTimeseriesObject&>( destination ) );
            destination.SetWeatherStation( weatherStation_ );
        }
    };

    using SimpleWeatherStationWindSpeedTimeseriesDataReader = SimpleColumnDataReader<WeatherStationWindSpeedTimeseriesColumnData>;

    class GeoPosition2DTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        GeoPosition2DTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GeoPosition2DTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::GeoPosition2DTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleGeoPosition2DTimeseriesDataReader = SimpleColumnDataReader<GeoPosition2DTimeseriesColumnData>;

    class AisAidToNavigationPositionTimeseriesColumnData : public GeoPosition2DTimeseriesColumnData
    {
        Guid aidToNavigation_;
    public:
        using Base = GeoPosition2DTimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT AIDTONAVIGATION_FIELD_ID = 6;

        AisAidToNavigationPositionTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::AisAidToNavigationPositionTimeseries;
        }

        const Guid& AidToNavigation( ) const
        {
            return aidToNavigation_;
        }
        void SetAidToNavigation( const Guid& aidToNavigation )
        {
            aidToNavigation_ = aidToNavigation;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, AIDTONAVIGATION_FIELD_ID, aidToNavigation_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, aidToNavigation_);
        }
        void AssignTo( Types::AisAidToNavigationPositionTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::GeoPosition2DTimeseriesObject&>( destination ) );
            destination.SetAidToNavigation( aidToNavigation_ );
        }
    };

    using SimpleAisAidToNavigationPositionTimeseriesDataReader = SimpleColumnDataReader<AisAidToNavigationPositionTimeseriesColumnData>;

    class GeoPosition3DTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        GeoPosition3DTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GeoPosition3DTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::GeoPosition3DTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleGeoPosition3DTimeseriesDataReader = SimpleColumnDataReader<GeoPosition3DTimeseriesColumnData>;

    class GuidTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        GuidTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::GuidTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::GuidTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleGuidTimeseriesDataReader = SimpleColumnDataReader<GuidTimeseriesColumnData>;

    class Int16TimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        Int16TimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int16Timeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::Int16TimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleInt16TimeseriesDataReader = SimpleColumnDataReader<Int16TimeseriesColumnData>;

    class Int32TimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        Int32TimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int32Timeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::Int32TimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleInt32TimeseriesDataReader = SimpleColumnDataReader<Int32TimeseriesColumnData>;

    class RadarAzimuthOffsetTimeseriesColumnData : public Int32TimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = Int32TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarAzimuthOffsetTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarAzimuthOffsetTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarAzimuthOffsetTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::Int32TimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarAzimuthOffsetTimeseriesDataReader = SimpleColumnDataReader<RadarAzimuthOffsetTimeseriesColumnData>;

    class RadarFastTimeConstantLevelTimeseriesColumnData : public Int32TimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = Int32TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarFastTimeConstantLevelTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarFastTimeConstantLevelTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarFastTimeConstantLevelTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::Int32TimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarFastTimeConstantLevelTimeseriesDataReader = SimpleColumnDataReader<RadarFastTimeConstantLevelTimeseriesColumnData>;

    class RadarFastTimeConstantModeTimeseriesColumnData : public Int32TimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = Int32TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarFastTimeConstantModeTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarFastTimeConstantModeTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarFastTimeConstantModeTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::Int32TimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarFastTimeConstantModeTimeseriesDataReader = SimpleColumnDataReader<RadarFastTimeConstantModeTimeseriesColumnData>;

    class RadarPulseTimeseriesColumnData : public Int32TimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = Int32TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarPulseTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarPulseTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarPulseTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::Int32TimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarPulseTimeseriesDataReader = SimpleColumnDataReader<RadarPulseTimeseriesColumnData>;

    class RadarSector1EndTimeseriesColumnData : public Int32TimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = Int32TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarSector1EndTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarSector1EndTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarSector1EndTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::Int32TimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarSector1EndTimeseriesDataReader = SimpleColumnDataReader<RadarSector1EndTimeseriesColumnData>;

    class RadarSector1StartTimeseriesColumnData : public Int32TimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = Int32TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarSector1StartTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarSector1StartTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarSector1StartTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::Int32TimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarSector1StartTimeseriesDataReader = SimpleColumnDataReader<RadarSector1StartTimeseriesColumnData>;

    class RadarSector2EndTimeseriesColumnData : public Int32TimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = Int32TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarSector2EndTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarSector2EndTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarSector2EndTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::Int32TimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarSector2EndTimeseriesDataReader = SimpleColumnDataReader<RadarSector2EndTimeseriesColumnData>;

    class RadarSector2StartTimeseriesColumnData : public Int32TimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = Int32TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarSector2StartTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarSector2StartTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarSector2StartTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::Int32TimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarSector2StartTimeseriesDataReader = SimpleColumnDataReader<RadarSector2StartTimeseriesColumnData>;

    class RadarSensitivityTimeControlLevelTimeseriesColumnData : public Int32TimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = Int32TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarSensitivityTimeControlLevelTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarSensitivityTimeControlLevelTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarSensitivityTimeControlLevelTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::Int32TimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarSensitivityTimeControlLevelTimeseriesDataReader = SimpleColumnDataReader<RadarSensitivityTimeControlLevelTimeseriesColumnData>;

    class RadarTuningTimeseriesColumnData : public Int32TimeseriesColumnData
    {
        Guid radar_;
    public:
        using Base = Int32TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADAR_FIELD_ID = 6;

        RadarTuningTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadarTuningTimeseries;
        }

        const Guid& Radar( ) const
        {
            return radar_;
        }
        void SetRadar( const Guid& radar )
        {
            radar_ = radar;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADAR_FIELD_ID, radar_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radar_);
        }
        void AssignTo( Types::RadarTuningTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::Int32TimeseriesObject&>( destination ) );
            destination.SetRadar( radar_ );
        }
    };

    using SimpleRadarTuningTimeseriesDataReader = SimpleColumnDataReader<RadarTuningTimeseriesColumnData>;

    class VesselPersonsOnBoardTimeseriesColumnData : public Int32TimeseriesColumnData
    {
        Guid vessel_;
    public:
        using Base = Int32TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT VESSEL_FIELD_ID = 6;

        VesselPersonsOnBoardTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::VesselPersonsOnBoardTimeseries;
        }

        const Guid& Vessel( ) const
        {
            return vessel_;
        }
        void SetVessel( const Guid& vessel )
        {
            vessel_ = vessel;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, VESSEL_FIELD_ID, vessel_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, vessel_);
        }
        void AssignTo( Types::VesselPersonsOnBoardTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::Int32TimeseriesObject&>( destination ) );
            destination.SetVessel( vessel_ );
        }
    };

    using SimpleVesselPersonsOnBoardTimeseriesDataReader = SimpleColumnDataReader<VesselPersonsOnBoardTimeseriesColumnData>;

    class Int64TimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        Int64TimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Int64Timeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::Int64TimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleInt64TimeseriesDataReader = SimpleColumnDataReader<Int64TimeseriesColumnData>;

    class Position2DTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        Position2DTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Position2DTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::Position2DTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimplePosition2DTimeseriesDataReader = SimpleColumnDataReader<Position2DTimeseriesColumnData>;

    class Position3DTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        Position3DTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Position3DTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::Position3DTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimplePosition3DTimeseriesDataReader = SimpleColumnDataReader<Position3DTimeseriesColumnData>;

    class ReferenceTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        ReferenceTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ReferenceTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::ReferenceTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleReferenceTimeseriesDataReader = SimpleColumnDataReader<ReferenceTimeseriesColumnData>;

    class SByteTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        SByteTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SByteTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::SByteTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleSByteTimeseriesDataReader = SimpleColumnDataReader<SByteTimeseriesColumnData>;

    class SingleTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        SingleTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::SingleTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::SingleTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleSingleTimeseriesDataReader = SimpleColumnDataReader<SingleTimeseriesColumnData>;

    class StringTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        StringTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::StringTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::StringTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleStringTimeseriesDataReader = SimpleColumnDataReader<StringTimeseriesColumnData>;

    class TimeSpanTimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        TimeSpanTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TimeSpanTimeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::TimeSpanTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleTimeSpanTimeseriesDataReader = SimpleColumnDataReader<TimeSpanTimeseriesColumnData>;

    class UInt16TimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        UInt16TimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt16Timeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::UInt16TimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleUInt16TimeseriesDataReader = SimpleColumnDataReader<UInt16TimeseriesColumnData>;

    class UInt32TimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        UInt32TimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt32Timeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::UInt32TimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleUInt32TimeseriesDataReader = SimpleColumnDataReader<UInt32TimeseriesColumnData>;

    class RadomeStatusTimeseriesColumnData : public UInt32TimeseriesColumnData
    {
        Guid radome_;
    public:
        using Base = UInt32TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADOME_FIELD_ID = 6;

        RadomeStatusTimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::RadomeStatusTimeseries;
        }

        const Guid& Radome( ) const
        {
            return radome_;
        }
        void SetRadome( const Guid& radome )
        {
            radome_ = radome;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADOME_FIELD_ID, radome_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radome_);
        }
        void AssignTo( Types::RadomeStatusTimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::UInt32TimeseriesObject&>( destination ) );
            destination.SetRadome( radome_ );
        }
    };

    using SimpleRadomeStatusTimeseriesDataReader = SimpleColumnDataReader<RadomeStatusTimeseriesColumnData>;

    class UInt64TimeseriesColumnData : public TimeseriesColumnData
    {
    public:
        using Base = TimeseriesColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        UInt64TimeseriesColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt64Timeseries;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::UInt64TimeseriesObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesObject&>( destination ) );
        }
    };

    using SimpleUInt64TimeseriesDataReader = SimpleColumnDataReader<UInt64TimeseriesColumnData>;

    class TimeseriesCatalogColumnData : public TimeseriesCatalogElementColumnData
    {
    public:
        using Base = TimeseriesCatalogElementColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        TimeseriesCatalogColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TimeseriesCatalog;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::TimeseriesCatalogObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TimeseriesCatalogElementObject&>( destination ) );
        }
    };

    using SimpleTimeseriesCatalogDataReader = SimpleColumnDataReader<TimeseriesCatalogColumnData>;

    class TimeseriesInfoColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        DBDateTime firstTimestamp_;
        DBDateTime lastTimestamp_;
        Int64 count_ = 0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT FIRSTTIMESTAMP_FIELD_ID = 3;
        static constexpr SQLUSMALLINT LASTTIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT COUNT_FIELD_ID = 5;

        TimeseriesInfoColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TimeseriesInfo;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const DBDateTime& FirstTimestamp( ) const
        {
            return firstTimestamp_;
        }
        void SetFirstTimestamp( const DBDateTime& firstTimestamp )
        {
            firstTimestamp_ = firstTimestamp;
        }
        const DBDateTime& LastTimestamp( ) const
        {
            return lastTimestamp_;
        }
        void SetLastTimestamp( const DBDateTime& lastTimestamp )
        {
            lastTimestamp_ = lastTimestamp;
        }
        Int64 Count( ) const
        {
            return count_;
        }
        void SetCount( Int64 count )
        {
            count_ = count;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, FIRSTTIMESTAMP_FIELD_ID, firstTimestamp_);
            Bind(statement, LASTTIMESTAMP_FIELD_ID, lastTimestamp_);
            Bind(statement, COUNT_FIELD_ID, count_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::TimeseriesInfo );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, firstTimestamp_);
            WriteColumnValue( destination, lastTimestamp_);
            WriteColumnValue( destination, count_);
        }
        void AssignTo( Types::TimeseriesInfoObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetFirstTimestamp( firstTimestamp_ );
            destination.SetLastTimestamp( lastTimestamp_ );
            destination.SetCount( count_ );
        }
    };

    using SimpleTimeseriesInfoDataReader = SimpleColumnDataReader<TimeseriesInfoColumnData>;

    class TimeSpanTimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBTimeSpan value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        TimeSpanTimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TimeSpanTimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBTimeSpan& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBTimeSpan& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::TimeSpanTimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::TimeSpanTimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleTimeSpanTimeseriesValueDataReader = SimpleColumnDataReader<TimeSpanTimeseriesValueColumnData>;

    class TrackableItemTrackLinkColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid item_;
        Guid track_;
        DateTime start_;
        DBDateTime end_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ITEM_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TRACK_FIELD_ID = 4;
        static constexpr SQLUSMALLINT START_FIELD_ID = 5;
        static constexpr SQLUSMALLINT END_FIELD_ID = 6;

        TrackableItemTrackLinkColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TrackableItemTrackLink;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Item( ) const
        {
            return item_;
        }
        void SetItem( const Guid& item )
        {
            item_ = item;
        }
        const Guid& Track( ) const
        {
            return track_;
        }
        void SetTrack( const Guid& track )
        {
            track_ = track;
        }
        const DateTime& Start( ) const
        {
            return start_;
        }
        void SetStart( const DateTime& start )
        {
            start_ = start;
        }
        const DBDateTime& End( ) const
        {
            return end_;
        }
        void SetEnd( const DBDateTime& end )
        {
            end_ = end;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, ITEM_FIELD_ID, item_);
            Bind(statement, TRACK_FIELD_ID, track_);
            Bind(statement, START_FIELD_ID, start_);
            Bind(statement, END_FIELD_ID, end_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::TrackableItemTrackLink );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, item_);
            WriteColumnValue( destination, track_);
            WriteColumnValue( destination, start_);
            WriteColumnValue( destination, end_);
        }
        void AssignTo( Types::TrackableItemTrackLinkObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetItem( item_ );
            destination.SetTrack( track_ );
            destination.SetStart( start_ );
            destination.SetEnd( end_ );
        }
    };

    using SimpleTrackableItemTrackLinkDataReader = SimpleColumnDataReader<TrackableItemTrackLinkColumnData>;

    class TrackBaseColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
        Guid tracker_;
        Int64 trackNumber_ = 0;
        DateTime timestamp_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TRACKER_FIELD_ID = 4;
        static constexpr SQLUSMALLINT TRACKNUMBER_FIELD_ID = 5;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 6;

        TrackBaseColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TrackBase;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Tracker( ) const
        {
            return tracker_;
        }
        void SetTracker( const Guid& tracker )
        {
            tracker_ = tracker;
        }
        Int64 TrackNumber( ) const
        {
            return trackNumber_;
        }
        void SetTrackNumber( Int64 trackNumber )
        {
            trackNumber_ = trackNumber;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TRACKER_FIELD_ID, tracker_);
            Bind(statement, TRACKNUMBER_FIELD_ID, trackNumber_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::TrackBase );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, tracker_);
            WriteColumnValue( destination, trackNumber_);
            WriteColumnValue( destination, timestamp_);
        }
        void AssignTo( Types::TrackBaseObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTracker( tracker_ );
            destination.SetTrackNumber( trackNumber_ );
            destination.SetTimestamp( timestamp_ );
        }
    };

    using SimpleTrackBaseDataReader = SimpleColumnDataReader<TrackBaseColumnData>;

    class TrackColumnData : public TrackBaseColumnData
    {
    public:
        using Base = TrackBaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        TrackColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Track;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::TrackObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TrackBaseObject&>( destination ) );
        }
    };

    using SimpleTrackDataReader = SimpleColumnDataReader<TrackColumnData>;

    class Track3DColumnData : public TrackBaseColumnData
    {
    public:
        using Base = TrackBaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        Track3DColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Track3D;
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
        }
        void AssignTo( Types::Track3DObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::TrackBaseObject&>( destination ) );
        }
    };

    using SimpleTrack3DDataReader = SimpleColumnDataReader<Track3DColumnData>;

    class TrackerFilterParametersColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid tracker_;
        FixedDBWideString<127> name_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TRACKER_FIELD_ID = 3;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 4;

        TrackerFilterParametersColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TrackerFilterParameters;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Tracker( ) const
        {
            return tracker_;
        }
        void SetTracker( const Guid& tracker )
        {
            tracker_ = tracker;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TRACKER_FIELD_ID, tracker_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::TrackerFilterParameters );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, tracker_);
            WriteColumnValue( destination, name_);
        }
        void AssignTo( Types::TrackerFilterParametersObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTracker( tracker_ );
            destination.SetName( name_ );
        }
    };

    using SimpleTrackerFilterParametersDataReader = SimpleColumnDataReader<TrackerFilterParametersColumnData>;

    class TrackerFilterParametersConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid parameters_;
        DateTime timestamp_;
        bool useNaivePredictor_ = false;
        Int32 numberOfPoints_ = 0;
        Int32 windowSize_ = 0;
        Int32 stabilizeCount_ = 0;
        Int32 maxBadPoints_ = 0;
        Types::TrackerFilterModelType modelType_ = Types::TrackerFilterModelType::Unknown;
        double sigmaR_ = 0.0;
        double sigmaAcc_ = 0.0;
        double tauVel_ = 0.0;
        double tauAcc_ = 0.0;
        double deltaRMin_ = 0.0;
        double deltaVMax_ = 0.0;
        double deltaAMax_ = 0.0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT PARAMETERS_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT USENAIVEPREDICTOR_FIELD_ID = 5;
        static constexpr SQLUSMALLINT NUMBEROFPOINTS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT WINDOWSIZE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT STABILIZECOUNT_FIELD_ID = 8;
        static constexpr SQLUSMALLINT MAXBADPOINTS_FIELD_ID = 9;
        static constexpr SQLUSMALLINT MODELTYPE_FIELD_ID = 10;
        static constexpr SQLUSMALLINT SIGMAR_FIELD_ID = 11;
        static constexpr SQLUSMALLINT SIGMAACC_FIELD_ID = 12;
        static constexpr SQLUSMALLINT TAUVEL_FIELD_ID = 13;
        static constexpr SQLUSMALLINT TAUACC_FIELD_ID = 14;
        static constexpr SQLUSMALLINT DELTARMIN_FIELD_ID = 15;
        static constexpr SQLUSMALLINT DELTAVMAX_FIELD_ID = 16;
        static constexpr SQLUSMALLINT DELTAAMAX_FIELD_ID = 17;

        TrackerFilterParametersConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TrackerFilterParametersConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Parameters( ) const
        {
            return parameters_;
        }
        void SetParameters( const Guid& parameters )
        {
            parameters_ = parameters;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        bool UseNaivePredictor( ) const
        {
            return useNaivePredictor_;
        }
        void SetUseNaivePredictor( bool useNaivePredictor )
        {
            useNaivePredictor_ = useNaivePredictor;
        }
        Int32 NumberOfPoints( ) const
        {
            return numberOfPoints_;
        }
        void SetNumberOfPoints( Int32 numberOfPoints )
        {
            numberOfPoints_ = numberOfPoints;
        }
        Int32 WindowSize( ) const
        {
            return windowSize_;
        }
        void SetWindowSize( Int32 windowSize )
        {
            windowSize_ = windowSize;
        }
        Int32 StabilizeCount( ) const
        {
            return stabilizeCount_;
        }
        void SetStabilizeCount( Int32 stabilizeCount )
        {
            stabilizeCount_ = stabilizeCount;
        }
        Int32 MaxBadPoints( ) const
        {
            return maxBadPoints_;
        }
        void SetMaxBadPoints( Int32 maxBadPoints )
        {
            maxBadPoints_ = maxBadPoints;
        }
        Types::TrackerFilterModelType ModelType( ) const
        {
            return modelType_;
        }
        void SetModelType( Types::TrackerFilterModelType modelType )
        {
            modelType_ = modelType;
        }
        double SigmaR( ) const
        {
            return sigmaR_;
        }
        void SetSigmaR( double sigmaR )
        {
            sigmaR_ = sigmaR;
        }
        double SigmaAcc( ) const
        {
            return sigmaAcc_;
        }
        void SetSigmaAcc( double sigmaAcc )
        {
            sigmaAcc_ = sigmaAcc;
        }
        double TauVel( ) const
        {
            return tauVel_;
        }
        void SetTauVel( double tauVel )
        {
            tauVel_ = tauVel;
        }
        double TauAcc( ) const
        {
            return tauAcc_;
        }
        void SetTauAcc( double tauAcc )
        {
            tauAcc_ = tauAcc;
        }
        double DeltaRMin( ) const
        {
            return deltaRMin_;
        }
        void SetDeltaRMin( double deltaRMin )
        {
            deltaRMin_ = deltaRMin;
        }
        double DeltaVMax( ) const
        {
            return deltaVMax_;
        }
        void SetDeltaVMax( double deltaVMax )
        {
            deltaVMax_ = deltaVMax;
        }
        double DeltaAMax( ) const
        {
            return deltaAMax_;
        }
        void SetDeltaAMax( double deltaAMax )
        {
            deltaAMax_ = deltaAMax;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, PARAMETERS_FIELD_ID, parameters_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, USENAIVEPREDICTOR_FIELD_ID, useNaivePredictor_);
            Bind(statement, NUMBEROFPOINTS_FIELD_ID, numberOfPoints_);
            Bind(statement, WINDOWSIZE_FIELD_ID, windowSize_);
            Bind(statement, STABILIZECOUNT_FIELD_ID, stabilizeCount_);
            Bind(statement, MAXBADPOINTS_FIELD_ID, maxBadPoints_);
            Bind(statement, MODELTYPE_FIELD_ID, modelType_);
            Bind(statement, SIGMAR_FIELD_ID, sigmaR_);
            Bind(statement, SIGMAACC_FIELD_ID, sigmaAcc_);
            Bind(statement, TAUVEL_FIELD_ID, tauVel_);
            Bind(statement, TAUACC_FIELD_ID, tauAcc_);
            Bind(statement, DELTARMIN_FIELD_ID, deltaRMin_);
            Bind(statement, DELTAVMAX_FIELD_ID, deltaVMax_);
            Bind(statement, DELTAAMAX_FIELD_ID, deltaAMax_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::TrackerFilterParametersConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, parameters_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, useNaivePredictor_);
            WriteColumnValue( destination, numberOfPoints_);
            WriteColumnValue( destination, windowSize_);
            WriteColumnValue( destination, stabilizeCount_);
            WriteColumnValue( destination, maxBadPoints_);
            WriteColumnValue( destination, modelType_);
            WriteColumnValue( destination, sigmaR_);
            WriteColumnValue( destination, sigmaAcc_);
            WriteColumnValue( destination, tauVel_);
            WriteColumnValue( destination, tauAcc_);
            WriteColumnValue( destination, deltaRMin_);
            WriteColumnValue( destination, deltaVMax_);
            WriteColumnValue( destination, deltaAMax_);
        }
        void AssignTo( Types::TrackerFilterParametersConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetParameters( parameters_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetUseNaivePredictor( useNaivePredictor_ );
            destination.SetNumberOfPoints( numberOfPoints_ );
            destination.SetWindowSize( windowSize_ );
            destination.SetStabilizeCount( stabilizeCount_ );
            destination.SetMaxBadPoints( maxBadPoints_ );
            destination.SetModelType( modelType_ );
            destination.SetSigmaR( sigmaR_ );
            destination.SetSigmaAcc( sigmaAcc_ );
            destination.SetTauVel( tauVel_ );
            destination.SetTauAcc( tauAcc_ );
            destination.SetDeltaRMin( deltaRMin_ );
            destination.SetDeltaVMax( deltaVMax_ );
            destination.SetDeltaAMax( deltaAMax_ );
        }
    };

    using SimpleTrackerFilterParametersConfigurationDataReader = SimpleColumnDataReader<TrackerFilterParametersConfigurationColumnData>;

    class TrackInfoColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        DBDateTime firstTimestamp_;
        DBDateTime lastTimestamp_;
        Int64 count_ = 0;
        DBDouble northWestLatitude_;
        DBDouble northWestLongitude_;
        DBDouble southEastLatitude_;
        DBDouble southEastLongitude_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT FIRSTTIMESTAMP_FIELD_ID = 3;
        static constexpr SQLUSMALLINT LASTTIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT COUNT_FIELD_ID = 5;
        static constexpr SQLUSMALLINT NORTHWESTLATITUDE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT NORTHWESTLONGITUDE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT SOUTHEASTLATITUDE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT SOUTHEASTLONGITUDE_FIELD_ID = 9;

        TrackInfoColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TrackInfo;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const DBDateTime& FirstTimestamp( ) const
        {
            return firstTimestamp_;
        }
        void SetFirstTimestamp( const DBDateTime& firstTimestamp )
        {
            firstTimestamp_ = firstTimestamp;
        }
        const DBDateTime& LastTimestamp( ) const
        {
            return lastTimestamp_;
        }
        void SetLastTimestamp( const DBDateTime& lastTimestamp )
        {
            lastTimestamp_ = lastTimestamp;
        }
        Int64 Count( ) const
        {
            return count_;
        }
        void SetCount( Int64 count )
        {
            count_ = count;
        }
        const DBDouble& NorthWestLatitude( ) const
        {
            return northWestLatitude_;
        }
        void SetNorthWestLatitude( const DBDouble& northWestLatitude )
        {
            northWestLatitude_ = northWestLatitude;
        }
        const DBDouble& NorthWestLongitude( ) const
        {
            return northWestLongitude_;
        }
        void SetNorthWestLongitude( const DBDouble& northWestLongitude )
        {
            northWestLongitude_ = northWestLongitude;
        }
        const DBDouble& SouthEastLatitude( ) const
        {
            return southEastLatitude_;
        }
        void SetSouthEastLatitude( const DBDouble& southEastLatitude )
        {
            southEastLatitude_ = southEastLatitude;
        }
        const DBDouble& SouthEastLongitude( ) const
        {
            return southEastLongitude_;
        }
        void SetSouthEastLongitude( const DBDouble& southEastLongitude )
        {
            southEastLongitude_ = southEastLongitude;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, FIRSTTIMESTAMP_FIELD_ID, firstTimestamp_);
            Bind(statement, LASTTIMESTAMP_FIELD_ID, lastTimestamp_);
            Bind(statement, COUNT_FIELD_ID, count_);
            Bind(statement, NORTHWESTLATITUDE_FIELD_ID, northWestLatitude_);
            Bind(statement, NORTHWESTLONGITUDE_FIELD_ID, northWestLongitude_);
            Bind(statement, SOUTHEASTLATITUDE_FIELD_ID, southEastLatitude_);
            Bind(statement, SOUTHEASTLONGITUDE_FIELD_ID, southEastLongitude_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::TrackInfo );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, firstTimestamp_);
            WriteColumnValue( destination, lastTimestamp_);
            WriteColumnValue( destination, count_);
            WriteColumnValue( destination, northWestLatitude_);
            WriteColumnValue( destination, northWestLongitude_);
            WriteColumnValue( destination, southEastLatitude_);
            WriteColumnValue( destination, southEastLongitude_);
        }
        void AssignTo( Types::TrackInfoObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetFirstTimestamp( firstTimestamp_ );
            destination.SetLastTimestamp( lastTimestamp_ );
            destination.SetCount( count_ );
            destination.SetNorthWestLatitude( northWestLatitude_ );
            destination.SetNorthWestLongitude( northWestLongitude_ );
            destination.SetSouthEastLatitude( southEastLatitude_ );
            destination.SetSouthEastLongitude( southEastLongitude_ );
        }
    };

    using SimpleTrackInfoDataReader = SimpleColumnDataReader<TrackInfoColumnData>;

    class TrackingServiceOptionsColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        DateTime timestamp_;
        TimeSpan timerInterval_;
        TimeSpan maxAgeOfCurrentTrackValue_;
        double falseThreshold_ = 0.0;
        double distanceThreshold_ = 0.0;
        double distanceUnmergeThreshold_ = 0.0;
        Int64 unmergeLatency_ = 0;
        bool kalmanFiltering_ = false;
        double maxCourseDeviation_ = 0.0;
        double maxSpeedDeviation_ = 0.0;
        double minimumSpeedThreshold_ = 0.0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMERINTERVAL_FIELD_ID = 4;
        static constexpr SQLUSMALLINT MAXAGEOFCURRENTTRACKVALUE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT FALSETHRESHOLD_FIELD_ID = 6;
        static constexpr SQLUSMALLINT DISTANCETHRESHOLD_FIELD_ID = 7;
        static constexpr SQLUSMALLINT DISTANCEUNMERGETHRESHOLD_FIELD_ID = 8;
        static constexpr SQLUSMALLINT UNMERGELATENCY_FIELD_ID = 9;
        static constexpr SQLUSMALLINT KALMANFILTERING_FIELD_ID = 10;
        static constexpr SQLUSMALLINT MAXCOURSEDEVIATION_FIELD_ID = 11;
        static constexpr SQLUSMALLINT MAXSPEEDDEVIATION_FIELD_ID = 12;
        static constexpr SQLUSMALLINT MINIMUMSPEEDTHRESHOLD_FIELD_ID = 13;

        TrackingServiceOptionsColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TrackingServiceOptions;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const TimeSpan& TimerInterval( ) const
        {
            return timerInterval_;
        }
        void SetTimerInterval( const TimeSpan& timerInterval )
        {
            timerInterval_ = timerInterval;
        }
        const TimeSpan& MaxAgeOfCurrentTrackValue( ) const
        {
            return maxAgeOfCurrentTrackValue_;
        }
        void SetMaxAgeOfCurrentTrackValue( const TimeSpan& maxAgeOfCurrentTrackValue )
        {
            maxAgeOfCurrentTrackValue_ = maxAgeOfCurrentTrackValue;
        }
        double FalseThreshold( ) const
        {
            return falseThreshold_;
        }
        void SetFalseThreshold( double falseThreshold )
        {
            falseThreshold_ = falseThreshold;
        }
        double DistanceThreshold( ) const
        {
            return distanceThreshold_;
        }
        void SetDistanceThreshold( double distanceThreshold )
        {
            distanceThreshold_ = distanceThreshold;
        }
        double DistanceUnmergeThreshold( ) const
        {
            return distanceUnmergeThreshold_;
        }
        void SetDistanceUnmergeThreshold( double distanceUnmergeThreshold )
        {
            distanceUnmergeThreshold_ = distanceUnmergeThreshold;
        }
        Int64 UnmergeLatency( ) const
        {
            return unmergeLatency_;
        }
        void SetUnmergeLatency( Int64 unmergeLatency )
        {
            unmergeLatency_ = unmergeLatency;
        }
        bool KalmanFiltering( ) const
        {
            return kalmanFiltering_;
        }
        void SetKalmanFiltering( bool kalmanFiltering )
        {
            kalmanFiltering_ = kalmanFiltering;
        }
        double MaxCourseDeviation( ) const
        {
            return maxCourseDeviation_;
        }
        void SetMaxCourseDeviation( double maxCourseDeviation )
        {
            maxCourseDeviation_ = maxCourseDeviation;
        }
        double MaxSpeedDeviation( ) const
        {
            return maxSpeedDeviation_;
        }
        void SetMaxSpeedDeviation( double maxSpeedDeviation )
        {
            maxSpeedDeviation_ = maxSpeedDeviation;
        }
        double MinimumSpeedThreshold( ) const
        {
            return minimumSpeedThreshold_;
        }
        void SetMinimumSpeedThreshold( double minimumSpeedThreshold )
        {
            minimumSpeedThreshold_ = minimumSpeedThreshold;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, TIMERINTERVAL_FIELD_ID, timerInterval_);
            Bind(statement, MAXAGEOFCURRENTTRACKVALUE_FIELD_ID, maxAgeOfCurrentTrackValue_);
            Bind(statement, FALSETHRESHOLD_FIELD_ID, falseThreshold_);
            Bind(statement, DISTANCETHRESHOLD_FIELD_ID, distanceThreshold_);
            Bind(statement, DISTANCEUNMERGETHRESHOLD_FIELD_ID, distanceUnmergeThreshold_);
            Bind(statement, UNMERGELATENCY_FIELD_ID, unmergeLatency_);
            Bind(statement, KALMANFILTERING_FIELD_ID, kalmanFiltering_);
            Bind(statement, MAXCOURSEDEVIATION_FIELD_ID, maxCourseDeviation_);
            Bind(statement, MAXSPEEDDEVIATION_FIELD_ID, maxSpeedDeviation_);
            Bind(statement, MINIMUMSPEEDTHRESHOLD_FIELD_ID, minimumSpeedThreshold_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::TrackingServiceOptions );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, timerInterval_);
            WriteColumnValue( destination, maxAgeOfCurrentTrackValue_);
            WriteColumnValue( destination, falseThreshold_);
            WriteColumnValue( destination, distanceThreshold_);
            WriteColumnValue( destination, distanceUnmergeThreshold_);
            WriteColumnValue( destination, unmergeLatency_);
            WriteColumnValue( destination, kalmanFiltering_);
            WriteColumnValue( destination, maxCourseDeviation_);
            WriteColumnValue( destination, maxSpeedDeviation_);
            WriteColumnValue( destination, minimumSpeedThreshold_);
        }
        void AssignTo( Types::TrackingServiceOptionsObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetTimerInterval( timerInterval_ );
            destination.SetMaxAgeOfCurrentTrackValue( maxAgeOfCurrentTrackValue_ );
            destination.SetFalseThreshold( falseThreshold_ );
            destination.SetDistanceThreshold( distanceThreshold_ );
            destination.SetDistanceUnmergeThreshold( distanceUnmergeThreshold_ );
            destination.SetUnmergeLatency( unmergeLatency_ );
            destination.SetKalmanFiltering( kalmanFiltering_ );
            destination.SetMaxCourseDeviation( maxCourseDeviation_ );
            destination.SetMaxSpeedDeviation( maxSpeedDeviation_ );
            destination.SetMinimumSpeedThreshold( minimumSpeedThreshold_ );
        }
    };

    using SimpleTrackingServiceOptionsDataReader = SimpleColumnDataReader<TrackingServiceOptionsColumnData>;

    class TrackLinkColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid primary_;
        Guid secondary_;
        DateTime start_;
        DBDateTime end_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT PRIMARY_FIELD_ID = 3;
        static constexpr SQLUSMALLINT SECONDARY_FIELD_ID = 4;
        static constexpr SQLUSMALLINT START_FIELD_ID = 5;
        static constexpr SQLUSMALLINT END_FIELD_ID = 6;

        TrackLinkColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TrackLink;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Primary( ) const
        {
            return primary_;
        }
        void SetPrimary( const Guid& primary )
        {
            primary_ = primary;
        }
        const Guid& Secondary( ) const
        {
            return secondary_;
        }
        void SetSecondary( const Guid& secondary )
        {
            secondary_ = secondary;
        }
        const DateTime& Start( ) const
        {
            return start_;
        }
        void SetStart( const DateTime& start )
        {
            start_ = start;
        }
        const DBDateTime& End( ) const
        {
            return end_;
        }
        void SetEnd( const DBDateTime& end )
        {
            end_ = end;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, PRIMARY_FIELD_ID, primary_);
            Bind(statement, SECONDARY_FIELD_ID, secondary_);
            Bind(statement, START_FIELD_ID, start_);
            Bind(statement, END_FIELD_ID, end_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::TrackLink );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, primary_);
            WriteColumnValue( destination, secondary_);
            WriteColumnValue( destination, start_);
            WriteColumnValue( destination, end_);
        }
        void AssignTo( Types::TrackLinkObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetPrimary( primary_ );
            destination.SetSecondary( secondary_ );
            destination.SetStart( start_ );
            destination.SetEnd( end_ );
        }
    };

    using SimpleTrackLinkDataReader = SimpleColumnDataReader<TrackLinkColumnData>;

    class TrackValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid track_;
        DateTime timestamp_;
        Types::TrackFlags flags_ = Types::TrackFlags::None;
        Types::TrackStatus status_ = Types::TrackStatus::Unknown;
        double latitude_ = 0.0;
        double longitude_ = 0.0;
        double speed_ = 0.0;
        double course_ = 0.0;
        double heading_ = 0.0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TRACK_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT FLAGS_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STATUS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT SPEED_FIELD_ID = 9;
        static constexpr SQLUSMALLINT COURSE_FIELD_ID = 10;
        static constexpr SQLUSMALLINT HEADING_FIELD_ID = 11;

        TrackValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TrackValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Track( ) const
        {
            return track_;
        }
        void SetTrack( const Guid& track )
        {
            track_ = track;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::TrackFlags Flags( ) const
        {
            return flags_;
        }
        void SetFlags( Types::TrackFlags flags )
        {
            flags_ = flags;
        }
        Types::TrackStatus Status( ) const
        {
            return status_;
        }
        void SetStatus( Types::TrackStatus status )
        {
            status_ = status;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Speed( ) const
        {
            return speed_;
        }
        void SetSpeed( double speed )
        {
            speed_ = speed;
        }
        double Course( ) const
        {
            return course_;
        }
        void SetCourse( double course )
        {
            course_ = course;
        }
        double Heading( ) const
        {
            return heading_;
        }
        void SetHeading( double heading )
        {
            heading_ = heading;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TRACK_FIELD_ID, track_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, FLAGS_FIELD_ID, flags_);
            Bind(statement, STATUS_FIELD_ID, status_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, SPEED_FIELD_ID, speed_);
            Bind(statement, COURSE_FIELD_ID, course_);
            Bind(statement, HEADING_FIELD_ID, heading_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::TrackValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, track_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, flags_);
            WriteColumnValue( destination, status_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, speed_);
            WriteColumnValue( destination, course_);
            WriteColumnValue( destination, heading_);
        }
        void AssignTo( Types::TrackValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTrack( track_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetFlags( flags_ );
            destination.SetStatus( status_ );
            destination.SetLatitude( latitude_ );
            destination.SetLongitude( longitude_ );
            destination.SetSpeed( speed_ );
            destination.SetCourse( course_ );
            destination.SetHeading( heading_ );
        }
    };

    using SimpleTrackValueDataReader = SimpleColumnDataReader<TrackValueColumnData>;

    class TrackValue3DColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid track_;
        DateTime timestamp_;
        Types::TrackFlags3D flags_ = Types::TrackFlags3D::None;
        UInt32 status_ = 0;
        double latitude_ = 0.0;
        double longitude_ = 0.0;
        double altitude_ = 0.0;
        double speed_ = 0.0;
        double course_ = 0.0;
        double rateOfClimb_ = 0.0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TRACK_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT FLAGS_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STATUS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT ALTITUDE_FIELD_ID = 9;
        static constexpr SQLUSMALLINT SPEED_FIELD_ID = 10;
        static constexpr SQLUSMALLINT COURSE_FIELD_ID = 11;
        static constexpr SQLUSMALLINT RATEOFCLIMB_FIELD_ID = 12;

        TrackValue3DColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::TrackValue3D;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Track( ) const
        {
            return track_;
        }
        void SetTrack( const Guid& track )
        {
            track_ = track;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::TrackFlags3D Flags( ) const
        {
            return flags_;
        }
        void SetFlags( Types::TrackFlags3D flags )
        {
            flags_ = flags;
        }
        UInt32 Status( ) const
        {
            return status_;
        }
        void SetStatus( UInt32 status )
        {
            status_ = status;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Altitude( ) const
        {
            return altitude_;
        }
        void SetAltitude( double altitude )
        {
            altitude_ = altitude;
        }
        double Speed( ) const
        {
            return speed_;
        }
        void SetSpeed( double speed )
        {
            speed_ = speed;
        }
        double Course( ) const
        {
            return course_;
        }
        void SetCourse( double course )
        {
            course_ = course;
        }
        double RateOfClimb( ) const
        {
            return rateOfClimb_;
        }
        void SetRateOfClimb( double rateOfClimb )
        {
            rateOfClimb_ = rateOfClimb;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TRACK_FIELD_ID, track_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, FLAGS_FIELD_ID, flags_);
            Bind(statement, STATUS_FIELD_ID, status_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, ALTITUDE_FIELD_ID, altitude_);
            Bind(statement, SPEED_FIELD_ID, speed_);
            Bind(statement, COURSE_FIELD_ID, course_);
            Bind(statement, RATEOFCLIMB_FIELD_ID, rateOfClimb_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::TrackValue3D );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, track_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, flags_);
            WriteColumnValue( destination, status_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, altitude_);
            WriteColumnValue( destination, speed_);
            WriteColumnValue( destination, course_);
            WriteColumnValue( destination, rateOfClimb_);
        }
        void AssignTo( Types::TrackValue3DObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTrack( track_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetFlags( flags_ );
            destination.SetStatus( status_ );
            destination.SetLatitude( latitude_ );
            destination.SetLongitude( longitude_ );
            destination.SetAltitude( altitude_ );
            destination.SetSpeed( speed_ );
            destination.SetCourse( course_ );
            destination.SetRateOfClimb( rateOfClimb_ );
        }
    };

    using SimpleTrackValue3DDataReader = SimpleColumnDataReader<TrackValue3DColumnData>;

    class UInt16TimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBUInt16 value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        UInt16TimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt16TimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBUInt16& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBUInt16& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::UInt16TimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::UInt16TimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleUInt16TimeseriesValueDataReader = SimpleColumnDataReader<UInt16TimeseriesValueColumnData>;

    class UInt32TimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBUInt32 value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        UInt32TimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt32TimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBUInt32& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBUInt32& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::UInt32TimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::UInt32TimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleUInt32TimeseriesValueDataReader = SimpleColumnDataReader<UInt32TimeseriesValueColumnData>;

    class UInt64TimeseriesValueColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid timeseries_;
        DateTime timestamp_;
        DBInt64 value_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TIMESERIES_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT VALUE_FIELD_ID = 5;

        UInt64TimeseriesValueColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::UInt64TimeseriesValue;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Timeseries( ) const
        {
            return timeseries_;
        }
        void SetTimeseries( const Guid& timeseries )
        {
            timeseries_ = timeseries;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const DBInt64& Value( ) const
        {
            return value_;
        }
        void SetValue( const DBInt64& value )
        {
            value_ = value;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TIMESERIES_FIELD_ID, timeseries_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, VALUE_FIELD_ID, value_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::UInt64TimeseriesValue );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, timeseries_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, value_);
        }
        void AssignTo( Types::UInt64TimeseriesValueObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTimeseries( timeseries_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetValue( value_ );
        }
    };

    using SimpleUInt64TimeseriesValueDataReader = SimpleColumnDataReader<UInt64TimeseriesValueColumnData>;

    class VehicleTypeColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        FixedDBWideString<127> name_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;

        VehicleTypeColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::VehicleType;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, NAME_FIELD_ID, name_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::VehicleType );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, name_);
        }
        void AssignTo( Types::VehicleTypeObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetName( name_ );
        }
    };

    using SimpleVehicleTypeDataReader = SimpleColumnDataReader<VehicleTypeColumnData>;

    class VesselTypeColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        FixedDBWideString<127> name_;
        Int32 code_ = 0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT CODE_FIELD_ID = 4;

        VesselTypeColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::VesselType;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        Int32 Code( ) const
        {
            return code_;
        }
        void SetCode( Int32 code )
        {
            code_ = code;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, CODE_FIELD_ID, code_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::VesselType );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, code_);
        }
        void AssignTo( Types::VesselTypeObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetName( name_ );
            destination.SetCode( code_ );
        }
    };

    using SimpleVesselTypeDataReader = SimpleColumnDataReader<VesselTypeColumnData>;

    class ViewColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        FixedDBWideString<127> name_;
        Guid latitudeTimeseries_;
        Guid longitudeTimeseries_;
        Guid zoomLevelTimeseries_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 3;
        static constexpr SQLUSMALLINT LATITUDETIMESERIES_FIELD_ID = 4;
        static constexpr SQLUSMALLINT LONGITUDETIMESERIES_FIELD_ID = 5;
        static constexpr SQLUSMALLINT ZOOMLEVELTIMESERIES_FIELD_ID = 6;

        ViewColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::View;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        const Guid& LatitudeTimeseries( ) const
        {
            return latitudeTimeseries_;
        }
        void SetLatitudeTimeseries( const Guid& latitudeTimeseries )
        {
            latitudeTimeseries_ = latitudeTimeseries;
        }
        const Guid& LongitudeTimeseries( ) const
        {
            return longitudeTimeseries_;
        }
        void SetLongitudeTimeseries( const Guid& longitudeTimeseries )
        {
            longitudeTimeseries_ = longitudeTimeseries;
        }
        const Guid& ZoomLevelTimeseries( ) const
        {
            return zoomLevelTimeseries_;
        }
        void SetZoomLevelTimeseries( const Guid& zoomLevelTimeseries )
        {
            zoomLevelTimeseries_ = zoomLevelTimeseries;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, LATITUDETIMESERIES_FIELD_ID, latitudeTimeseries_);
            Bind(statement, LONGITUDETIMESERIES_FIELD_ID, longitudeTimeseries_);
            Bind(statement, ZOOMLEVELTIMESERIES_FIELD_ID, zoomLevelTimeseries_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::View );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, latitudeTimeseries_);
            WriteColumnValue( destination, longitudeTimeseries_);
            WriteColumnValue( destination, zoomLevelTimeseries_);
        }
        void AssignTo( Types::ViewObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetName( name_ );
            destination.SetLatitudeTimeseries( latitudeTimeseries_ );
            destination.SetLongitudeTimeseries( longitudeTimeseries_ );
            destination.SetZoomLevelTimeseries( zoomLevelTimeseries_ );
        }
    };

    using SimpleViewDataReader = SimpleColumnDataReader<ViewColumnData>;

    class ViewCameraLinkColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid view_;
        Guid camera_;
        DateTime start_;
        DBDateTime end_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT VIEW_FIELD_ID = 3;
        static constexpr SQLUSMALLINT CAMERA_FIELD_ID = 4;
        static constexpr SQLUSMALLINT START_FIELD_ID = 5;
        static constexpr SQLUSMALLINT END_FIELD_ID = 6;

        ViewCameraLinkColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ViewCameraLink;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& View( ) const
        {
            return view_;
        }
        void SetView( const Guid& view )
        {
            view_ = view;
        }
        const Guid& Camera( ) const
        {
            return camera_;
        }
        void SetCamera( const Guid& camera )
        {
            camera_ = camera;
        }
        const DateTime& Start( ) const
        {
            return start_;
        }
        void SetStart( const DateTime& start )
        {
            start_ = start;
        }
        const DBDateTime& End( ) const
        {
            return end_;
        }
        void SetEnd( const DBDateTime& end )
        {
            end_ = end;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, VIEW_FIELD_ID, view_);
            Bind(statement, CAMERA_FIELD_ID, camera_);
            Bind(statement, START_FIELD_ID, start_);
            Bind(statement, END_FIELD_ID, end_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::ViewCameraLink );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, view_);
            WriteColumnValue( destination, camera_);
            WriteColumnValue( destination, start_);
            WriteColumnValue( destination, end_);
        }
        void AssignTo( Types::ViewCameraLinkObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetView( view_ );
            destination.SetCamera( camera_ );
            destination.SetStart( start_ );
            destination.SetEnd( end_ );
        }
    };

    using SimpleViewCameraLinkDataReader = SimpleColumnDataReader<ViewCameraLinkColumnData>;

    class ViewTrackerLinkColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid view_;
        Guid tracker_;
        DateTime start_;
        DBDateTime end_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT VIEW_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TRACKER_FIELD_ID = 4;
        static constexpr SQLUSMALLINT START_FIELD_ID = 5;
        static constexpr SQLUSMALLINT END_FIELD_ID = 6;

        ViewTrackerLinkColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ViewTrackerLink;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& View( ) const
        {
            return view_;
        }
        void SetView( const Guid& view )
        {
            view_ = view;
        }
        const Guid& Tracker( ) const
        {
            return tracker_;
        }
        void SetTracker( const Guid& tracker )
        {
            tracker_ = tracker;
        }
        const DateTime& Start( ) const
        {
            return start_;
        }
        void SetStart( const DateTime& start )
        {
            start_ = start;
        }
        const DBDateTime& End( ) const
        {
            return end_;
        }
        void SetEnd( const DBDateTime& end )
        {
            end_ = end;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, VIEW_FIELD_ID, view_);
            Bind(statement, TRACKER_FIELD_ID, tracker_);
            Bind(statement, START_FIELD_ID, start_);
            Bind(statement, END_FIELD_ID, end_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::ViewTrackerLink );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, view_);
            WriteColumnValue( destination, tracker_);
            WriteColumnValue( destination, start_);
            WriteColumnValue( destination, end_);
        }
        void AssignTo( Types::ViewTrackerLinkObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetView( view_ );
            destination.SetTracker( tracker_ );
            destination.SetStart( start_ );
            destination.SetEnd( end_ );
        }
    };

    using SimpleViewTrackerLinkDataReader = SimpleColumnDataReader<ViewTrackerLinkColumnData>;

    class WeatherStationCommandColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid weatherStation_;
        DateTime timestamp_;
        Types::DeviceCommandSourceType deviceCommandSourceType_ = Types::DeviceCommandSourceType::Unknown;
        Guid deviceCommandSourceId_;
        Guid reply_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT WEATHERSTATION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCETYPE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT DEVICECOMMANDSOURCEID_FIELD_ID = 6;
        static constexpr SQLUSMALLINT REPLY_FIELD_ID = 7;

        WeatherStationCommandColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::WeatherStationCommand;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& WeatherStation( ) const
        {
            return weatherStation_;
        }
        void SetWeatherStation( const Guid& weatherStation )
        {
            weatherStation_ = weatherStation;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        Types::DeviceCommandSourceType DeviceCommandSourceType( ) const
        {
            return deviceCommandSourceType_;
        }
        void SetDeviceCommandSourceType( Types::DeviceCommandSourceType deviceCommandSourceType )
        {
            deviceCommandSourceType_ = deviceCommandSourceType;
        }
        const Guid& DeviceCommandSourceId( ) const
        {
            return deviceCommandSourceId_;
        }
        void SetDeviceCommandSourceId( const Guid& deviceCommandSourceId )
        {
            deviceCommandSourceId_ = deviceCommandSourceId;
        }
        const Guid& Reply( ) const
        {
            return reply_;
        }
        void SetReply( const Guid& reply )
        {
            reply_ = reply;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, WEATHERSTATION_FIELD_ID, weatherStation_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, DEVICECOMMANDSOURCETYPE_FIELD_ID, deviceCommandSourceType_);
            Bind(statement, DEVICECOMMANDSOURCEID_FIELD_ID, deviceCommandSourceId_);
            Bind(statement, REPLY_FIELD_ID, reply_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::WeatherStationCommand );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, weatherStation_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, deviceCommandSourceType_);
            WriteColumnValue( destination, deviceCommandSourceId_);
            WriteColumnValue( destination, reply_);
        }
        void AssignTo( Types::WeatherStationCommandObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetWeatherStation( weatherStation_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetDeviceCommandSourceType( deviceCommandSourceType_ );
            destination.SetDeviceCommandSourceId( deviceCommandSourceId_ );
            destination.SetReply( reply_ );
        }
    };

    using SimpleWeatherStationCommandDataReader = SimpleColumnDataReader<WeatherStationCommandColumnData>;

    class WeatherStationCommandReplyColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid weatherStation_;
        DateTime timestamp_;
        Guid command_;
        Types::DeviceCommandReplyStatus status_ = Types::DeviceCommandReplyStatus::Unknown;
        WideString message_;
        SQLLEN messageLength_ = SQL_NULL_DATA;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT WEATHERSTATION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT COMMAND_FIELD_ID = 5;
        static constexpr SQLUSMALLINT STATUS_FIELD_ID = 6;
        static constexpr SQLUSMALLINT MESSAGE_FIELD_ID = 7;

        WeatherStationCommandReplyColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::WeatherStationCommandReply;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& WeatherStation( ) const
        {
            return weatherStation_;
        }
        void SetWeatherStation( const Guid& weatherStation )
        {
            weatherStation_ = weatherStation;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const Guid& Command( ) const
        {
            return command_;
        }
        void SetCommand( const Guid& command )
        {
            command_ = command;
        }
        Types::DeviceCommandReplyStatus Status( ) const
        {
            return status_;
        }
        void SetStatus( Types::DeviceCommandReplyStatus status )
        {
            status_ = status;
        }
        const WideString& Message( ) const
        {
            return message_;
        }
        void SetMessage( const WideString& message )
        {
            message_ = message;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, WEATHERSTATION_FIELD_ID, weatherStation_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, COMMAND_FIELD_ID, command_);
            Bind(statement, STATUS_FIELD_ID, status_);
        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            message_ = statement.GetWideString(MESSAGE_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::WeatherStationCommandReply );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, weatherStation_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, command_);
            WriteColumnValue( destination, status_);
            WriteColumnValue( destination, message_);
        }
        void AssignTo( Types::WeatherStationCommandReplyObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetWeatherStation( weatherStation_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetCommand( command_ );
            destination.SetStatus( status_ );
            destination.SetMessage( message_ );
        }
    };

    using SimpleWeatherStationCommandReplyDataReader = SimpleColumnDataReader<WeatherStationCommandReplyColumnData>;

    class WeatherStationConfigurationColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid weatherStation_;
        DateTime timestamp_;
        TimeSpan noDataTimeOut_;
        TimeSpan sendInterval_;
        double latitude_ = 0.0;
        double longitude_ = 0.0;
        double gyroOffset_ = 0.0;
        bool enableAveraging_ = false;
        TimeSpan averagingInterval_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT WEATHERSTATION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;
        static constexpr SQLUSMALLINT NODATATIMEOUT_FIELD_ID = 5;
        static constexpr SQLUSMALLINT SENDINTERVAL_FIELD_ID = 6;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT GYROOFFSET_FIELD_ID = 9;
        static constexpr SQLUSMALLINT ENABLEAVERAGING_FIELD_ID = 10;
        static constexpr SQLUSMALLINT AVERAGINGINTERVAL_FIELD_ID = 11;

        WeatherStationConfigurationColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::WeatherStationConfiguration;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& WeatherStation( ) const
        {
            return weatherStation_;
        }
        void SetWeatherStation( const Guid& weatherStation )
        {
            weatherStation_ = weatherStation;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        const TimeSpan& NoDataTimeOut( ) const
        {
            return noDataTimeOut_;
        }
        void SetNoDataTimeOut( const TimeSpan& noDataTimeOut )
        {
            noDataTimeOut_ = noDataTimeOut;
        }
        const TimeSpan& SendInterval( ) const
        {
            return sendInterval_;
        }
        void SetSendInterval( const TimeSpan& sendInterval )
        {
            sendInterval_ = sendInterval;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double GyroOffset( ) const
        {
            return gyroOffset_;
        }
        void SetGyroOffset( double gyroOffset )
        {
            gyroOffset_ = gyroOffset;
        }
        bool EnableAveraging( ) const
        {
            return enableAveraging_;
        }
        void SetEnableAveraging( bool enableAveraging )
        {
            enableAveraging_ = enableAveraging;
        }
        const TimeSpan& AveragingInterval( ) const
        {
            return averagingInterval_;
        }
        void SetAveragingInterval( const TimeSpan& averagingInterval )
        {
            averagingInterval_ = averagingInterval;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, WEATHERSTATION_FIELD_ID, weatherStation_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, NODATATIMEOUT_FIELD_ID, noDataTimeOut_);
            Bind(statement, SENDINTERVAL_FIELD_ID, sendInterval_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, GYROOFFSET_FIELD_ID, gyroOffset_);
            Bind(statement, ENABLEAVERAGING_FIELD_ID, enableAveraging_);
            Bind(statement, AVERAGINGINTERVAL_FIELD_ID, averagingInterval_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::WeatherStationConfiguration );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, weatherStation_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, noDataTimeOut_);
            WriteColumnValue( destination, sendInterval_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, gyroOffset_);
            WriteColumnValue( destination, enableAveraging_);
            WriteColumnValue( destination, averagingInterval_);
        }
        void AssignTo( Types::WeatherStationConfigurationObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetWeatherStation( weatherStation_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetNoDataTimeOut( noDataTimeOut_ );
            destination.SetSendInterval( sendInterval_ );
            destination.SetLatitude( latitude_ );
            destination.SetLongitude( longitude_ );
            destination.SetGyroOffset( gyroOffset_ );
            destination.SetEnableAveraging( enableAveraging_ );
            destination.SetAveragingInterval( averagingInterval_ );
        }
    };

    using SimpleWeatherStationConfigurationDataReader = SimpleColumnDataReader<WeatherStationConfigurationColumnData>;

    class ZoneColumnData : public BaseColumnData
    {
        Guid id_;
        Types::Kind entityType_ = Types::Kind::Unknown;
        Int64 rowVersion_ = 0;
        FixedDBWideString<127> name_;
        double longitude_ = 0.0;
        double latitude_ = 0.0;
        Types::ZoneAlarmType alarmType_ = Types::ZoneAlarmType::None;
        TimeSpan alarmTime_;
        TimeSpan radarTrackMinimumLifetime_;
        double speed_ = 0.0;
        UInt32 strokeColor_ = 0;
        UInt32 fillColor_ = 0;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ENTITYTYPE_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 3;
        static constexpr SQLUSMALLINT NAME_FIELD_ID = 4;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 5;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 6;
        static constexpr SQLUSMALLINT ALARMTYPE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT ALARMTIME_FIELD_ID = 8;
        static constexpr SQLUSMALLINT RADARTRACKMINIMUMLIFETIME_FIELD_ID = 9;
        static constexpr SQLUSMALLINT SPEED_FIELD_ID = 10;
        static constexpr SQLUSMALLINT STROKECOLOR_FIELD_ID = 11;
        static constexpr SQLUSMALLINT FILLCOLOR_FIELD_ID = 12;

        ZoneColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::Zone;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        Types::Kind EntityType( ) const
        {
            return entityType_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const FixedDBWideString<127>& Name( ) const
        {
            return name_;
        }
        void SetName( const FixedDBWideString<127>& name )
        {
            name_ = name;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        Types::ZoneAlarmType AlarmType( ) const
        {
            return alarmType_;
        }
        void SetAlarmType( Types::ZoneAlarmType alarmType )
        {
            alarmType_ = alarmType;
        }
        const TimeSpan& AlarmTime( ) const
        {
            return alarmTime_;
        }
        void SetAlarmTime( const TimeSpan& alarmTime )
        {
            alarmTime_ = alarmTime;
        }
        const TimeSpan& RadarTrackMinimumLifetime( ) const
        {
            return radarTrackMinimumLifetime_;
        }
        void SetRadarTrackMinimumLifetime( const TimeSpan& radarTrackMinimumLifetime )
        {
            radarTrackMinimumLifetime_ = radarTrackMinimumLifetime;
        }
        double Speed( ) const
        {
            return speed_;
        }
        void SetSpeed( double speed )
        {
            speed_ = speed;
        }
        UInt32 StrokeColor( ) const
        {
            return strokeColor_;
        }
        void SetStrokeColor( UInt32 strokeColor )
        {
            strokeColor_ = strokeColor;
        }
        UInt32 FillColor( ) const
        {
            return fillColor_;
        }
        void SetFillColor( UInt32 fillColor )
        {
            fillColor_ = fillColor;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ENTITYTYPE_FIELD_ID, entityType_ );
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, NAME_FIELD_ID, name_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, ALARMTYPE_FIELD_ID, alarmType_);
            Bind(statement, ALARMTIME_FIELD_ID, alarmTime_);
            Bind(statement, RADARTRACKMINIMUMLIFETIME_FIELD_ID, radarTrackMinimumLifetime_);
            Bind(statement, SPEED_FIELD_ID, speed_);
            Bind(statement, STROKECOLOR_FIELD_ID, strokeColor_);
            Bind(statement, FILLCOLOR_FIELD_ID, fillColor_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::Zone );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, name_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, alarmType_);
            WriteColumnValue( destination, alarmTime_);
            WriteColumnValue( destination, radarTrackMinimumLifetime_);
            WriteColumnValue( destination, speed_);
            WriteColumnValue( destination, strokeColor_);
            WriteColumnValue( destination, fillColor_);
        }
        void AssignTo( Types::ZoneObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetName( name_ );
            destination.SetLongitude( longitude_ );
            destination.SetLatitude( latitude_ );
            destination.SetAlarmType( alarmType_ );
            destination.SetAlarmTime( alarmTime_ );
            destination.SetRadarTrackMinimumLifetime( radarTrackMinimumLifetime_ );
            destination.SetSpeed( speed_ );
            destination.SetStrokeColor( strokeColor_ );
            destination.SetFillColor( fillColor_ );
        }
    };

    using SimpleZoneDataReader = SimpleColumnDataReader<ZoneColumnData>;

    class CircularZoneColumnData : public ZoneColumnData
    {
        double radius_ = 0.0;
    public:
        using Base = ZoneColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT RADIUS_FIELD_ID = 12;

        CircularZoneColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::CircularZone;
        }

        double Radius( ) const
        {
            return radius_;
        }
        void SetRadius( double radius )
        {
            radius_ = radius;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

            Bind(statement, RADIUS_FIELD_ID, radius_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, radius_);
        }
        void AssignTo( Types::CircularZoneObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::ZoneObject&>( destination ) );
            destination.SetRadius( radius_ );
        }
    };

    using SimpleCircularZoneDataReader = SimpleColumnDataReader<CircularZoneColumnData>;

    class PolygonZoneColumnData : public ZoneColumnData
    {
        Binary polygon_;
        SQLLEN polygonLength_ = SQL_NULL_DATA;
    public:
        using Base = ZoneColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT POLYGON_FIELD_ID = 12;

        PolygonZoneColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::PolygonZone;
        }

        const Binary& Polygon( ) const
        {
            return polygon_;
        }
        void SetPolygon( const Binary& polygon )
        {
            polygon_ = polygon;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Base::BindColumns( statement );

        }

        void ReadUnboundData( const ODBC::Statement& statement )
        {
            Base::ReadUnboundData( statement );

            polygon_ = statement.GetBinary(POLYGON_FIELD_ID);
        }
        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            Base::WriteColumns( destination );
            WriteColumnValue( destination, polygon_);
        }
        void AssignTo( Types::PolygonZoneObject& destination ) const
        {
            Base::AssignTo( static_cast<Types::ZoneObject&>( destination ) );
            destination.SetPolygon( polygon_ );
        }
    };

    using SimplePolygonZoneDataReader = SimpleColumnDataReader<PolygonZoneColumnData>;

    class ZoneExceptionsColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid zone_;
        DateTime timestamp_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ZONE_FIELD_ID = 3;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 4;

        ZoneExceptionsColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ZoneExceptions;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Zone( ) const
        {
            return zone_;
        }
        void SetZone( const Guid& zone )
        {
            zone_ = zone;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, ZONE_FIELD_ID, zone_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::ZoneExceptions );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, zone_);
            WriteColumnValue( destination, timestamp_);
        }
        void AssignTo( Types::ZoneExceptionsObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetZone( zone_ );
            destination.SetTimestamp( timestamp_ );
        }
    };

    using SimpleZoneExceptionsDataReader = SimpleColumnDataReader<ZoneExceptionsColumnData>;

    class ZoneExceptionsVesselLinkColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid zoneExceptions_;
        Guid vessel_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT ZONEEXCEPTIONS_FIELD_ID = 3;
        static constexpr SQLUSMALLINT VESSEL_FIELD_ID = 4;

        ZoneExceptionsVesselLinkColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ZoneExceptionsVesselLink;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& ZoneExceptions( ) const
        {
            return zoneExceptions_;
        }
        void SetZoneExceptions( const Guid& zoneExceptions )
        {
            zoneExceptions_ = zoneExceptions;
        }
        const Guid& Vessel( ) const
        {
            return vessel_;
        }
        void SetVessel( const Guid& vessel )
        {
            vessel_ = vessel;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, ZONEEXCEPTIONS_FIELD_ID, zoneExceptions_);
            Bind(statement, VESSEL_FIELD_ID, vessel_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::ZoneExceptionsVesselLink );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, zoneExceptions_);
            WriteColumnValue( destination, vessel_);
        }
        void AssignTo( Types::ZoneExceptionsVesselLinkObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetZoneExceptions( zoneExceptions_ );
            destination.SetVessel( vessel_ );
        }
    };

    using SimpleZoneExceptionsVesselLinkDataReader = SimpleColumnDataReader<ZoneExceptionsVesselLinkColumnData>;

    class ZoneTrackAlarmColumnData : public BaseColumnData
    {
        Guid id_;
        Int64 rowVersion_ = 0;
        Guid track_;
        Guid zone_;
        Guid radarTrack_;
        DateTime timestamp_;
        double latitude_ = 0.0;
        double longitude_ = 0.0;
        double speed_ = 0.0;
        DBDouble course_;
        DBDouble heading_;
        double enterLatitude_ = 0.0;
        double enterLongitude_ = 0.0;
        DBDouble leaveLatitude_;
        DBDouble leaveLongitude_;
    public:
        using Base = BaseColumnData;

        static BARRELMAN_EXPORT WideString BaseQuery;
        static BARRELMAN_EXPORT WideString BaseViewName;
        static BARRELMAN_EXPORT WideString ViewAliasName;

        static constexpr SQLUSMALLINT ID_FIELD_ID = 1;
        static constexpr SQLUSMALLINT ROWVERSION_FIELD_ID = 2;
        static constexpr SQLUSMALLINT TRACK_FIELD_ID = 3;
        static constexpr SQLUSMALLINT ZONE_FIELD_ID = 4;
        static constexpr SQLUSMALLINT RADARTRACK_FIELD_ID = 5;
        static constexpr SQLUSMALLINT TIMESTAMP_FIELD_ID = 6;
        static constexpr SQLUSMALLINT LATITUDE_FIELD_ID = 7;
        static constexpr SQLUSMALLINT LONGITUDE_FIELD_ID = 8;
        static constexpr SQLUSMALLINT SPEED_FIELD_ID = 9;
        static constexpr SQLUSMALLINT COURSE_FIELD_ID = 10;
        static constexpr SQLUSMALLINT HEADING_FIELD_ID = 11;
        static constexpr SQLUSMALLINT ENTERLATITUDE_FIELD_ID = 12;
        static constexpr SQLUSMALLINT ENTERLONGITUDE_FIELD_ID = 13;
        static constexpr SQLUSMALLINT LEAVELATITUDE_FIELD_ID = 14;
        static constexpr SQLUSMALLINT LEAVELONGITUDE_FIELD_ID = 15;

        ZoneTrackAlarmColumnData( ) = default;

        virtual Kind GetKind() const override
        {
            return Kind::ZoneTrackAlarm;
        }

        const Guid& Id( ) const
        {
            return id_;
        }
        void SetId( const Guid& id )
        {
            id_ = id;
        }
        Int64 RowVersion( ) const
        {
            return rowVersion_;
        }
        void SetRowVersion( const Int64& rowVersion )
        {
            rowVersion_ = rowVersion;
        }
        const Guid& Track( ) const
        {
            return track_;
        }
        void SetTrack( const Guid& track )
        {
            track_ = track;
        }
        const Guid& Zone( ) const
        {
            return zone_;
        }
        void SetZone( const Guid& zone )
        {
            zone_ = zone;
        }
        const Guid& RadarTrack( ) const
        {
            return radarTrack_;
        }
        void SetRadarTrack( const Guid& radarTrack )
        {
            radarTrack_ = radarTrack;
        }
        const DateTime& Timestamp( ) const
        {
            return timestamp_;
        }
        void SetTimestamp( const DateTime& timestamp )
        {
            timestamp_ = timestamp;
        }
        double Latitude( ) const
        {
            return latitude_;
        }
        void SetLatitude( double latitude )
        {
            latitude_ = latitude;
        }
        double Longitude( ) const
        {
            return longitude_;
        }
        void SetLongitude( double longitude )
        {
            longitude_ = longitude;
        }
        double Speed( ) const
        {
            return speed_;
        }
        void SetSpeed( double speed )
        {
            speed_ = speed;
        }
        const DBDouble& Course( ) const
        {
            return course_;
        }
        void SetCourse( const DBDouble& course )
        {
            course_ = course;
        }
        const DBDouble& Heading( ) const
        {
            return heading_;
        }
        void SetHeading( const DBDouble& heading )
        {
            heading_ = heading;
        }
        double EnterLatitude( ) const
        {
            return enterLatitude_;
        }
        void SetEnterLatitude( double enterLatitude )
        {
            enterLatitude_ = enterLatitude;
        }
        double EnterLongitude( ) const
        {
            return enterLongitude_;
        }
        void SetEnterLongitude( double enterLongitude )
        {
            enterLongitude_ = enterLongitude;
        }
        const DBDouble& LeaveLatitude( ) const
        {
            return leaveLatitude_;
        }
        void SetLeaveLatitude( const DBDouble& leaveLatitude )
        {
            leaveLatitude_ = leaveLatitude;
        }
        const DBDouble& LeaveLongitude( ) const
        {
            return leaveLongitude_;
        }
        void SetLeaveLongitude( const DBDouble& leaveLongitude )
        {
            leaveLongitude_ = leaveLongitude;
        }
        void BindColumns( const ODBC::Statement& statement )
        {
            Bind(statement, ID_FIELD_ID, id_);
            Bind(statement, ROWVERSION_FIELD_ID, rowVersion_);
            Bind(statement, TRACK_FIELD_ID, track_);
            Bind(statement, ZONE_FIELD_ID, zone_);
            Bind(statement, RADARTRACK_FIELD_ID, radarTrack_);
            Bind(statement, TIMESTAMP_FIELD_ID, timestamp_);
            Bind(statement, LATITUDE_FIELD_ID, latitude_);
            Bind(statement, LONGITUDE_FIELD_ID, longitude_);
            Bind(statement, SPEED_FIELD_ID, speed_);
            Bind(statement, COURSE_FIELD_ID, course_);
            Bind(statement, HEADING_FIELD_ID, heading_);
            Bind(statement, ENTERLATITUDE_FIELD_ID, enterLatitude_);
            Bind(statement, ENTERLONGITUDE_FIELD_ID, enterLongitude_);
            Bind(statement, LEAVELATITUDE_FIELD_ID, leaveLatitude_);
            Bind(statement, LEAVELONGITUDE_FIELD_ID, leaveLongitude_);
        }

        template<IO::StreamWriter StreamT>
        void WriteColumns( IO::BinaryWriter<StreamT>& destination ) const
        {
            WriteColumnValue( destination, Types::Kind::ZoneTrackAlarm );
            WriteColumnValue( destination, id_);
            WriteColumnValue( destination, rowVersion_);
            WriteColumnValue( destination, track_);
            WriteColumnValue( destination, zone_);
            WriteColumnValue( destination, radarTrack_);
            WriteColumnValue( destination, timestamp_);
            WriteColumnValue( destination, latitude_);
            WriteColumnValue( destination, longitude_);
            WriteColumnValue( destination, speed_);
            WriteColumnValue( destination, course_);
            WriteColumnValue( destination, heading_);
            WriteColumnValue( destination, enterLatitude_);
            WriteColumnValue( destination, enterLongitude_);
            WriteColumnValue( destination, leaveLatitude_);
            WriteColumnValue( destination, leaveLongitude_);
        }
        void AssignTo( Types::ZoneTrackAlarmObject& destination ) const
        {
            destination.SetId( id_ );
            destination.SetRowVersion( rowVersion_ );
            destination.SetTrack( track_ );
            destination.SetZone( zone_ );
            destination.SetRadarTrack( radarTrack_ );
            destination.SetTimestamp( timestamp_ );
            destination.SetLatitude( latitude_ );
            destination.SetLongitude( longitude_ );
            destination.SetSpeed( speed_ );
            destination.SetCourse( course_ );
            destination.SetHeading( heading_ );
            destination.SetEnterLatitude( enterLatitude_ );
            destination.SetEnterLongitude( enterLongitude_ );
            destination.SetLeaveLatitude( leaveLatitude_ );
            destination.SetLeaveLongitude( leaveLongitude_ );
        }
    };

    using SimpleZoneTrackAlarmDataReader = SimpleColumnDataReader<ZoneTrackAlarmColumnData>;

}
#endif
