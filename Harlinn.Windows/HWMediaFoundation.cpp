#include "pch.h"
#include "HWMediaFoundation.h"
#include "HWCameraUIControl.h"
#include "HWDXVA2Api.h"
#include "HWMFTransform.h"
#include "HWMFReadWrite.h"

#include <Uuids.h>
#include <Wmcontainer.h>
#include <Mfcaptureengine.h>
#include <mfd3d12.h>
#include <mfmediaengine.h>
#include <Mfapi.h>
#include <Mfmp2dlna.h>
#include <Mftransform.h>
#include <Mfvirtualcamera.h>


namespace Harlinn::Windows::MF
{

#ifndef IF_EQUAL_RETURN
#define IF_EQUAL_RETURN(param, val) if(val == param) return L#val
#endif

    HW_EXPORT WideString GetGUIDNameConst(const Guid& guid)
    {
        static const Guid MEDIASUBTYPE_VIDEOIMAGE( L"{1d4a45f2-e5f6-4b44-8388-f0ae5c0e0c37}" );

        IF_EQUAL_RETURN(guid, MF_MT_MAJOR_TYPE);
        IF_EQUAL_RETURN(guid, MF_MT_MAJOR_TYPE);
        IF_EQUAL_RETURN(guid, MF_MT_SUBTYPE);
        IF_EQUAL_RETURN(guid, MF_MT_ALL_SAMPLES_INDEPENDENT);
        IF_EQUAL_RETURN(guid, MF_MT_FIXED_SIZE_SAMPLES);
        IF_EQUAL_RETURN(guid, MF_MT_COMPRESSED);
        IF_EQUAL_RETURN(guid, MF_MT_SAMPLE_SIZE);
        IF_EQUAL_RETURN(guid, MF_MT_WRAPPED_TYPE);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_NUM_CHANNELS);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_SAMPLES_PER_SECOND);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_AVG_BYTES_PER_SECOND);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_BLOCK_ALIGNMENT);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_BITS_PER_SAMPLE);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_VALID_BITS_PER_SAMPLE);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_SAMPLES_PER_BLOCK);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_CHANNEL_MASK);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_FOLDDOWN_MATRIX);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_WMADRC_PEAKREF);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_WMADRC_PEAKTARGET);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_WMADRC_AVGREF);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_WMADRC_AVGTARGET);
        IF_EQUAL_RETURN(guid, MF_MT_AUDIO_PREFER_WAVEFORMATEX);
        IF_EQUAL_RETURN(guid, MF_MT_AAC_PAYLOAD_TYPE);
        IF_EQUAL_RETURN(guid, MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION);
        IF_EQUAL_RETURN(guid, MF_MT_FRAME_SIZE);
        IF_EQUAL_RETURN(guid, MF_MT_FRAME_RATE);
        IF_EQUAL_RETURN(guid, MF_MT_FRAME_RATE_RANGE_MAX);
        IF_EQUAL_RETURN(guid, MF_MT_FRAME_RATE_RANGE_MIN);
        IF_EQUAL_RETURN(guid, MF_MT_PIXEL_ASPECT_RATIO);
        IF_EQUAL_RETURN(guid, MF_MT_DRM_FLAGS);
        IF_EQUAL_RETURN(guid, MF_MT_PAD_CONTROL_FLAGS);
        IF_EQUAL_RETURN(guid, MF_MT_SOURCE_CONTENT_HINT);
        IF_EQUAL_RETURN(guid, MF_MT_VIDEO_CHROMA_SITING);
        IF_EQUAL_RETURN(guid, MF_MT_INTERLACE_MODE);
        IF_EQUAL_RETURN(guid, MF_MT_TRANSFER_FUNCTION);
        IF_EQUAL_RETURN(guid, MF_MT_VIDEO_PRIMARIES);
        IF_EQUAL_RETURN(guid, MF_MT_CUSTOM_VIDEO_PRIMARIES);
        IF_EQUAL_RETURN(guid, MF_MT_YUV_MATRIX);
        IF_EQUAL_RETURN(guid, MF_MT_VIDEO_LIGHTING);
        IF_EQUAL_RETURN(guid, MF_MT_VIDEO_NOMINAL_RANGE);
        IF_EQUAL_RETURN(guid, MF_MT_GEOMETRIC_APERTURE);
        IF_EQUAL_RETURN(guid, MF_MT_MINIMUM_DISPLAY_APERTURE);
        IF_EQUAL_RETURN(guid, MF_MT_PAN_SCAN_APERTURE);
        IF_EQUAL_RETURN(guid, MF_MT_PAN_SCAN_ENABLED);
        IF_EQUAL_RETURN(guid, MF_MT_AVG_BITRATE);
        IF_EQUAL_RETURN(guid, MF_MT_AVG_BIT_ERROR_RATE);
        IF_EQUAL_RETURN(guid, MF_MT_MAX_KEYFRAME_SPACING);
        IF_EQUAL_RETURN(guid, MF_MT_DEFAULT_STRIDE);
        IF_EQUAL_RETURN(guid, MF_MT_PALETTE);
        IF_EQUAL_RETURN(guid, MF_MT_USER_DATA);
        IF_EQUAL_RETURN(guid, MF_MT_AM_FORMAT_TYPE);
        IF_EQUAL_RETURN(guid, MF_MT_MPEG_START_TIME_CODE);
        IF_EQUAL_RETURN(guid, MF_MT_MPEG2_PROFILE);
        IF_EQUAL_RETURN(guid, MF_MT_MPEG2_LEVEL);
        IF_EQUAL_RETURN(guid, MF_MT_MPEG2_FLAGS);
        IF_EQUAL_RETURN(guid, MF_MT_MPEG_SEQUENCE_HEADER);
        IF_EQUAL_RETURN(guid, MF_MT_DV_AAUX_SRC_PACK_0);
        IF_EQUAL_RETURN(guid, MF_MT_DV_AAUX_CTRL_PACK_0);
        IF_EQUAL_RETURN(guid, MF_MT_DV_AAUX_SRC_PACK_1);
        IF_EQUAL_RETURN(guid, MF_MT_DV_AAUX_CTRL_PACK_1);
        IF_EQUAL_RETURN(guid, MF_MT_DV_VAUX_SRC_PACK);
        IF_EQUAL_RETURN(guid, MF_MT_DV_VAUX_CTRL_PACK);
        IF_EQUAL_RETURN(guid, MF_MT_ARBITRARY_HEADER);
        IF_EQUAL_RETURN(guid, MF_MT_ARBITRARY_FORMAT);
        IF_EQUAL_RETURN(guid, MF_MT_IMAGE_LOSS_TOLERANT);
        IF_EQUAL_RETURN(guid, MF_MT_MPEG4_SAMPLE_DESCRIPTION);
        IF_EQUAL_RETURN(guid, MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY);
        IF_EQUAL_RETURN(guid, MF_MT_ORIGINAL_4CC);
        IF_EQUAL_RETURN(guid, MF_MT_ORIGINAL_WAVE_FORMAT_TAG);

        // Media types

        IF_EQUAL_RETURN(guid, MFMediaType_Audio);
        IF_EQUAL_RETURN(guid, MFMediaType_Video);
        IF_EQUAL_RETURN(guid, MFMediaType_Protected);
        IF_EQUAL_RETURN(guid, MFMediaType_SAMI);
        IF_EQUAL_RETURN(guid, MFMediaType_Script);
        IF_EQUAL_RETURN(guid, MFMediaType_Image);
        IF_EQUAL_RETURN(guid, MFMediaType_HTML);
        IF_EQUAL_RETURN(guid, MFMediaType_Binary);
        IF_EQUAL_RETURN(guid, MFMediaType_FileTransfer);

        IF_EQUAL_RETURN(guid, MFVideoFormat_AI44); //     FCC('AI44')
        IF_EQUAL_RETURN(guid, MFVideoFormat_ARGB32); //   D3DFMT_A8R8G8B8 
        IF_EQUAL_RETURN(guid, MFVideoFormat_AYUV); //     FCC('AYUV')
        IF_EQUAL_RETURN(guid, MFVideoFormat_DV25); //     FCC('dv25')
        IF_EQUAL_RETURN(guid, MFVideoFormat_DV50); //     FCC('dv50')
        IF_EQUAL_RETURN(guid, MFVideoFormat_DVH1); //     FCC('dvh1')
        IF_EQUAL_RETURN(guid, MFVideoFormat_DVSD); //     FCC('dvsd')
        IF_EQUAL_RETURN(guid, MFVideoFormat_DVSL); //     FCC('dvsl')
        IF_EQUAL_RETURN(guid, MFVideoFormat_H264); //     FCC('H264')
        IF_EQUAL_RETURN(guid, MFVideoFormat_I420); //     FCC('I420')
        IF_EQUAL_RETURN(guid, MFVideoFormat_IYUV); //     FCC('IYUV')
        IF_EQUAL_RETURN(guid, MFVideoFormat_M4S2); //     FCC('M4S2')
        IF_EQUAL_RETURN(guid, MFVideoFormat_MJPG);
        IF_EQUAL_RETURN(guid, MFVideoFormat_MP43); //     FCC('MP43')
        IF_EQUAL_RETURN(guid, MFVideoFormat_MP4S); //     FCC('MP4S')
        IF_EQUAL_RETURN(guid, MFVideoFormat_MP4V); //     FCC('MP4V')
        IF_EQUAL_RETURN(guid, MFVideoFormat_MPG1); //     FCC('MPG1')
        IF_EQUAL_RETURN(guid, MFVideoFormat_MSS1); //     FCC('MSS1')
        IF_EQUAL_RETURN(guid, MFVideoFormat_MSS2); //     FCC('MSS2')
        IF_EQUAL_RETURN(guid, MFVideoFormat_NV11); //     FCC('NV11')
        IF_EQUAL_RETURN(guid, MFVideoFormat_NV12); //     FCC('NV12')
        IF_EQUAL_RETURN(guid, MFVideoFormat_P010); //     FCC('P010')
        IF_EQUAL_RETURN(guid, MFVideoFormat_P016); //     FCC('P016')
        IF_EQUAL_RETURN(guid, MFVideoFormat_P210); //     FCC('P210')
        IF_EQUAL_RETURN(guid, MFVideoFormat_P216); //     FCC('P216')
        IF_EQUAL_RETURN(guid, MFVideoFormat_RGB24); //    D3DFMT_R8G8B8 
        IF_EQUAL_RETURN(guid, MFVideoFormat_RGB32); //    D3DFMT_X8R8G8B8 
        IF_EQUAL_RETURN(guid, MFVideoFormat_RGB555); //   D3DFMT_X1R5G5B5 
        IF_EQUAL_RETURN(guid, MFVideoFormat_RGB565); //   D3DFMT_R5G6B5 
        IF_EQUAL_RETURN(guid, MFVideoFormat_RGB8);
        IF_EQUAL_RETURN(guid, MFVideoFormat_UYVY); //     FCC('UYVY')
        IF_EQUAL_RETURN(guid, MFVideoFormat_v210); //     FCC('v210')
        IF_EQUAL_RETURN(guid, MFVideoFormat_v410); //     FCC('v410')
        IF_EQUAL_RETURN(guid, MFVideoFormat_WMV1); //     FCC('WMV1')
        IF_EQUAL_RETURN(guid, MFVideoFormat_WMV2); //     FCC('WMV2')
        IF_EQUAL_RETURN(guid, MFVideoFormat_WMV3); //     FCC('WMV3')
        IF_EQUAL_RETURN(guid, MFVideoFormat_WVC1); //     FCC('WVC1')
        IF_EQUAL_RETURN(guid, MFVideoFormat_Y210); //     FCC('Y210')
        IF_EQUAL_RETURN(guid, MFVideoFormat_Y216); //     FCC('Y216')
        IF_EQUAL_RETURN(guid, MFVideoFormat_Y410); //     FCC('Y410')
        IF_EQUAL_RETURN(guid, MFVideoFormat_Y416); //     FCC('Y416')
        IF_EQUAL_RETURN(guid, MFVideoFormat_Y41P);
        IF_EQUAL_RETURN(guid, MFVideoFormat_Y41T);
        IF_EQUAL_RETURN(guid, MFVideoFormat_YUY2); //     FCC('YUY2')
        IF_EQUAL_RETURN(guid, MFVideoFormat_YV12); //     FCC('YV12')
        IF_EQUAL_RETURN(guid, MFVideoFormat_YVYU);

        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_I420 );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_IYUV );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_RGB1 );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_RGB24 );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_RGB32 );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_RGB4 );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_RGB555 );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_RGB565 );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_RGB8 );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_UYVY );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_VIDEOIMAGE );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_YUY2 );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_YV12 );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_YVU9 );
        IF_EQUAL_RETURN( guid, MEDIASUBTYPE_YVYU );
        IF_EQUAL_RETURN( guid, WMFORMAT_MPEG2Video );
        IF_EQUAL_RETURN( guid, WMFORMAT_Script );
        IF_EQUAL_RETURN( guid, WMFORMAT_VideoInfo );
        IF_EQUAL_RETURN( guid, WMFORMAT_WaveFormatEx );
        IF_EQUAL_RETURN( guid, WMFORMAT_WebStream );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_ACELPnet );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_Base );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_DRM );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_MP3 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_MP43 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_MP4S );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_M4S2 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_P422 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_MPEG2_VIDEO );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_MSS1 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_MSS2 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_PCM );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WebStream );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WMAudio_Lossless );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WMAudioV2 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WMAudioV7 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WMAudioV8 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WMAudioV9 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WMSP1 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WMV1 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WMV2 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WMV3 );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WMVA );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WMVP );
        IF_EQUAL_RETURN( guid, WMMEDIASUBTYPE_WVP2 );
        IF_EQUAL_RETURN( guid, WMMEDIATYPE_Audio );
        IF_EQUAL_RETURN( guid, WMMEDIATYPE_FileTransfer );
        IF_EQUAL_RETURN( guid, WMMEDIATYPE_Image );
        IF_EQUAL_RETURN( guid, WMMEDIATYPE_Script );
        IF_EQUAL_RETURN( guid, WMMEDIATYPE_Text );
        IF_EQUAL_RETURN( guid, WMMEDIATYPE_Video );
        IF_EQUAL_RETURN( guid, WMSCRIPTTYPE_TwoStrings );


        IF_EQUAL_RETURN(guid, MFAudioFormat_PCM); //              WAVE_FORMAT_PCM 
        IF_EQUAL_RETURN(guid, MFAudioFormat_Float); //            WAVE_FORMAT_IEEE_FLOAT 
        IF_EQUAL_RETURN(guid, MFAudioFormat_DTS); //              WAVE_FORMAT_DTS 
        IF_EQUAL_RETURN(guid, MFAudioFormat_Dolby_AC3_SPDIF); //  WAVE_FORMAT_DOLBY_AC3_SPDIF 
        IF_EQUAL_RETURN(guid, MFAudioFormat_DRM); //              WAVE_FORMAT_DRM 
        IF_EQUAL_RETURN(guid, MFAudioFormat_WMAudioV8); //        WAVE_FORMAT_WMAUDIO2 
        IF_EQUAL_RETURN(guid, MFAudioFormat_WMAudioV9); //        WAVE_FORMAT_WMAUDIO3 
        IF_EQUAL_RETURN(guid, MFAudioFormat_WMAudio_Lossless); // WAVE_FORMAT_WMAUDIO_LOSSLESS 
        IF_EQUAL_RETURN(guid, MFAudioFormat_WMASPDIF); //         WAVE_FORMAT_WMASPDIF 
        IF_EQUAL_RETURN(guid, MFAudioFormat_MSP1); //             WAVE_FORMAT_WMAVOICE9 
        IF_EQUAL_RETURN(guid, MFAudioFormat_MP3); //              WAVE_FORMAT_MPEGLAYER3 
        IF_EQUAL_RETURN(guid, MFAudioFormat_MPEG); //             WAVE_FORMAT_MPEG 
        IF_EQUAL_RETURN(guid, MFAudioFormat_AAC); //              WAVE_FORMAT_MPEG_HEAAC 
        IF_EQUAL_RETURN(guid, MFAudioFormat_ADTS); //             WAVE_FORMAT_MPEG_ADTS_AAC 

        IF_EQUAL_RETURN( guid, EVRConfig_AllowBatching );
        IF_EQUAL_RETURN( guid, EVRConfig_AllowDropToBob );
        IF_EQUAL_RETURN( guid, EVRConfig_AllowDropToHalfInterlace );
        IF_EQUAL_RETURN( guid, EVRConfig_AllowDropToThrottle );
        IF_EQUAL_RETURN( guid, EVRConfig_AllowScaling );
        IF_EQUAL_RETURN( guid, EVRConfig_ForceBatching );
        IF_EQUAL_RETURN( guid, EVRConfig_ForceBob );
        IF_EQUAL_RETURN( guid, EVRConfig_ForceHalfInterlace );
        IF_EQUAL_RETURN( guid, EVRConfig_ForceScaling );
        IF_EQUAL_RETURN( guid, EVRConfig_ForceThrottle );
        IF_EQUAL_RETURN( guid, MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE );
        IF_EQUAL_RETURN( guid, MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID );
        IF_EQUAL_RETURN( guid, MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS );
        IF_EQUAL_RETURN( guid, MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE );
        IF_EQUAL_RETURN( guid, MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID );
        IF_EQUAL_RETURN( guid, MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS );
        IF_EQUAL_RETURN( guid, MF_ACTIVATE_MFT_LOCKED );
        IF_EQUAL_RETURN( guid, MF_ACTIVATE_VIDEO_WINDOW );
        IF_EQUAL_RETURN( guid, MF_ASFPROFILE_MAXPACKETSIZE );
        IF_EQUAL_RETURN( guid, MF_ASFPROFILE_MINPACKETSIZE );
        IF_EQUAL_RETURN( guid, MF_ASFSTREAMCONFIG_LEAKYBUCKET1 );
        IF_EQUAL_RETURN( guid, MF_ASFSTREAMCONFIG_LEAKYBUCKET2 );
        IF_EQUAL_RETURN( guid, MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID );
        IF_EQUAL_RETURN( guid, MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE );
        IF_EQUAL_RETURN( guid, MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS );
        IF_EQUAL_RETURN( guid, MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID );
        IF_EQUAL_RETURN( guid, MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY );
        IF_EQUAL_RETURN( guid, MF_BYTESTREAM_CONTENT_TYPE );
        IF_EQUAL_RETURN( guid, MF_BYTESTREAM_DURATION );
        IF_EQUAL_RETURN( guid, MF_BYTESTREAM_EFFECTIVE_URL );
        IF_EQUAL_RETURN( guid, MF_BYTESTREAM_IFO_FILE_URI );
        IF_EQUAL_RETURN( guid, MF_BYTESTREAM_LAST_MODIFIED_TIME );
        IF_EQUAL_RETURN( guid, MF_BYTESTREAM_ORIGIN_NAME );
        IF_EQUAL_RETURN( guid, MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_CAMERA_STREAM_BLOCKED );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_CAMERA_STREAM_UNBLOCKED );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_D3D_MANAGER );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_DISABLE_DXVA );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_ENABLE_CAMERA_STREAMSTATE_NOTIFICATION );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_METADATA_FRAME_BACKGROUND_MASK );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_METADATA_FRAME_ILLUMINATION );
        IF_EQUAL_RETURN( guid, MF_CAPTURE_METADATA_PHOTO_FRAME_FLASH );
        IF_EQUAL_RETURN( guid, MF_DEVICE_THERMAL_STATE_CHANGED );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_ATTRIBUTE_FRAMESOURCE_TYPES );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_FRAMESERVER_HIDDEN );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_FRAMESERVER_SHARED );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_IMAGE_STREAM );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_MAX_FRAME_BUFFERS );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_MULTIPLEXED_MANAGER );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_REQUIRED_CAPABILITIES );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_STREAM_CATEGORY );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_STREAM_ID );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_TAKEPHOTO_TRIGGER );
        IF_EQUAL_RETURN( guid, MF_DEVICESTREAM_TRANSFORM_STREAM_ID );
        IF_EQUAL_RETURN( guid, MF_DEVSOURCE_ATTRIBUTE_ENABLE_MS_CAMERA_EFFECTS );
        IF_EQUAL_RETURN( guid, MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME );
        IF_EQUAL_RETURN( guid, MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE );
        IF_EQUAL_RETURN( guid, MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE );
        IF_EQUAL_RETURN( guid, MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID );
        IF_EQUAL_RETURN( guid, MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE );
        IF_EQUAL_RETURN( guid, MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY );
        IF_EQUAL_RETURN( guid, MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE );
        IF_EQUAL_RETURN( guid, MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS );
        IF_EQUAL_RETURN( guid, MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK );
        IF_EQUAL_RETURN( guid, MF_DMFT_FRAME_BUFFER_INFO );
        IF_EQUAL_RETURN( guid, MF_DISABLE_LOCALLY_REGISTERED_PLUGINS );
        IF_EQUAL_RETURN( guid, MF_ENABLE_3DVIDEO_OUTPUT );
        IF_EQUAL_RETURN( guid, MF_EVENT_DO_THINNING );
        IF_EQUAL_RETURN( guid, MF_EVENT_MFT_CONTEXT );
        IF_EQUAL_RETURN( guid, MF_EVENT_MFT_INPUT_STREAM_ID );
        IF_EQUAL_RETURN( guid, MF_EVENT_OUTPUT_NODE );
        IF_EQUAL_RETURN( guid, MF_EVENT_PRESENTATION_TIME_OFFSET );
        IF_EQUAL_RETURN( guid, MF_EVENT_SCRUBSAMPLE_TIME );
        IF_EQUAL_RETURN( guid, MF_EVENT_SESSIONCAPS );
        IF_EQUAL_RETURN( guid, MF_EVENT_SESSIONCAPS_DELTA );
        IF_EQUAL_RETURN( guid, MF_EVENT_SOURCE_ACTUAL_START );
        IF_EQUAL_RETURN( guid, MF_EVENT_SOURCE_CHARACTERISTICS );
        IF_EQUAL_RETURN( guid, MF_EVENT_SOURCE_CHARACTERISTICS_OLD );
        IF_EQUAL_RETURN( guid, MF_EVENT_SOURCE_FAKE_START );
        IF_EQUAL_RETURN( guid, MF_EVENT_SOURCE_PROJECTSTART );
        IF_EQUAL_RETURN( guid, MF_EVENT_SOURCE_TOPOLOGY_CANCELED );
        IF_EQUAL_RETURN( guid, MF_EVENT_START_PRESENTATION_TIME );
        IF_EQUAL_RETURN( guid, MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT );
        IF_EQUAL_RETURN( guid, MF_EVENT_STREAM_METADATA_CONTENT_KEYIDS );
        IF_EQUAL_RETURN( guid, MF_EVENT_STREAM_METADATA_KEYDATA );
        IF_EQUAL_RETURN( guid, MF_EVENT_STREAM_METADATA_SYSTEMID );
        IF_EQUAL_RETURN( guid, MF_EVENT_TOPOLOGY_STATUS );
        IF_EQUAL_RETURN( guid, MF_LOCAL_PLUGIN_CONTROL_POLICY );
        IF_EQUAL_RETURN( guid, MF_LOW_LATENCY );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_AUDIO_CATEGORY );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_AUDIO_ENDPOINT_ROLE );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_CALLBACK );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_CONTENT_PROTECTION_FLAGS );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_CONTENT_PROTECTION_MANAGER );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_COREWINDOW );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_DXGI_MANAGER );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_EXTENSION );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_NEEDKEY_CALLBACK );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_OPM_HWND );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_PLAYBACK_HWND );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_PLAYBACK_VISUAL );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_SOURCE_RESOLVER_CONFIG_STORE );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_STREAM_CONTAINS_ALPHA_CHANNEL );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_TRACK_ID );
        IF_EQUAL_RETURN( guid, MF_MEDIA_ENGINE_VIDEO_OUTPUT_FORMAT );
        IF_EQUAL_RETURN( guid, MF_MEDIATYPE_MULTIPLEXED_MANAGER );
        IF_EQUAL_RETURN( guid, MF_MP2DLNA_AUDIO_BIT_RATE );
        IF_EQUAL_RETURN( guid, MF_MP2DLNA_ENCODE_QUALITY );
        IF_EQUAL_RETURN( guid, MF_MP2DLNA_STATISTICS );
        IF_EQUAL_RETURN( guid, MF_MP2DLNA_USE_MMCSS );
        IF_EQUAL_RETURN( guid, MF_MP2DLNA_VIDEO_BIT_RATE );
        IF_EQUAL_RETURN( guid, MF_MPEG4SINK_MOOV_BEFORE_MDAT );
        IF_EQUAL_RETURN( guid, MF_MPEG4SINK_SPSPPS_PASSTHROUGH );
        IF_EQUAL_RETURN( guid, MF_MSE_ACTIVELIST_CALLBACK );
        IF_EQUAL_RETURN( guid, MF_MSE_BUFFERLIST_CALLBACK );
        IF_EQUAL_RETURN( guid, MF_MSE_CALLBACK );
        IF_EQUAL_RETURN( guid, MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION );
        IF_EQUAL_RETURN( guid, MF_MT_AAC_PAYLOAD_TYPE );
        IF_EQUAL_RETURN( guid, MF_MT_ALL_SAMPLES_INDEPENDENT );
        IF_EQUAL_RETURN( guid, MF_MT_ALPHA_MODE );
        IF_EQUAL_RETURN( guid, MF_MT_AM_FORMAT_TYPE );
        IF_EQUAL_RETURN( guid, MF_MT_ARBITRARY_FORMAT );
        IF_EQUAL_RETURN( guid, MF_MT_ARBITRARY_HEADER );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_AVG_BYTES_PER_SECOND );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_BITS_PER_SAMPLE );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_BLOCK_ALIGNMENT );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_CHANNEL_MASK );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_FOLDDOWN_MATRIX );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_NUM_CHANNELS );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_PREFER_WAVEFORMATEX );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_SAMPLES_PER_BLOCK );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_SAMPLES_PER_SECOND );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_VALID_BITS_PER_SAMPLE );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_WMADRC_AVGREF );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_WMADRC_AVGTARGET );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_WMADRC_PEAKREF );
        IF_EQUAL_RETURN( guid, MF_MT_AUDIO_WMADRC_PEAKTARGET );
        IF_EQUAL_RETURN( guid, MF_MT_AVG_BIT_ERROR_RATE );
        IF_EQUAL_RETURN( guid, MF_MT_AVG_BITRATE );
        IF_EQUAL_RETURN( guid, MF_MT_COMPRESSED );
        IF_EQUAL_RETURN( guid, MF_MT_CUSTOM_VIDEO_PRIMARIES );
        IF_EQUAL_RETURN( guid, MF_MT_D3D_RESOURCE_VERSION );
        IF_EQUAL_RETURN( guid, MF_MT_D3D12_CPU_READBACK );
        IF_EQUAL_RETURN( guid, MF_MT_D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER );
        IF_EQUAL_RETURN( guid, MF_MT_D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL );
        IF_EQUAL_RETURN( guid, MF_MT_D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET );
        IF_EQUAL_RETURN( guid, MF_MT_D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS );
        IF_EQUAL_RETURN( guid, MF_MT_D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS );
        IF_EQUAL_RETURN( guid, MF_MT_D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE );
        IF_EQUAL_RETURN( guid, MF_MT_D3D12_TEXTURE_LAYOUT );
        IF_EQUAL_RETURN( guid, MF_MT_DEFAULT_STRIDE );
        IF_EQUAL_RETURN( guid, MF_MT_DEPTH_MEASUREMENT );
        IF_EQUAL_RETURN( guid, MF_MT_DEPTH_VALUE_UNIT );
        IF_EQUAL_RETURN( guid, MF_MT_DRM_FLAGS );
        IF_EQUAL_RETURN( guid, MF_MT_DV_AAUX_CTRL_PACK_0 );
        IF_EQUAL_RETURN( guid, MF_MT_DV_AAUX_CTRL_PACK_1 );
        IF_EQUAL_RETURN( guid, MF_MT_DV_AAUX_SRC_PACK_0 );
        IF_EQUAL_RETURN( guid, MF_MT_DV_AAUX_SRC_PACK_1 );
        IF_EQUAL_RETURN( guid, MF_MT_DV_VAUX_CTRL_PACK );
        IF_EQUAL_RETURN( guid, MF_MT_DV_VAUX_SRC_PACK );
        IF_EQUAL_RETURN( guid, MF_MT_FIXED_SIZE_SAMPLES );
        IF_EQUAL_RETURN( guid, MF_MT_FORWARD_CUSTOM_NALU );
        IF_EQUAL_RETURN( guid, MF_MT_FORWARD_CUSTOM_SEI );
        IF_EQUAL_RETURN( guid, MF_MT_FRAME_RATE );
        IF_EQUAL_RETURN( guid, MF_MT_FRAME_RATE_RANGE_MAX );
        IF_EQUAL_RETURN( guid, MF_MT_FRAME_RATE_RANGE_MIN );
        IF_EQUAL_RETURN( guid, MF_MT_FRAME_SIZE );
        //IF_EQUAL_RETURN( guid, MF_MT_FRAMESOURCE_TYPES );
        IF_EQUAL_RETURN( guid, MF_MT_GEOMETRIC_APERTURE );
        IF_EQUAL_RETURN( guid, MF_MT_H264_CAPABILITIES );
        IF_EQUAL_RETURN( guid, MF_MT_H264_MAX_CODEC_CONFIG_DELAY );
        IF_EQUAL_RETURN( guid, MF_MT_H264_MAX_MB_PER_SEC );
        IF_EQUAL_RETURN( guid, MF_MT_H264_RATE_CONTROL_MODES );
        IF_EQUAL_RETURN( guid, MF_MT_H264_SIMULCAST_SUPPORT );
        IF_EQUAL_RETURN( guid, MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES );
        IF_EQUAL_RETURN( guid, MF_MT_H264_SUPPORTED_SLICE_MODES );
        IF_EQUAL_RETURN( guid, MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES );
        IF_EQUAL_RETURN( guid, MF_MT_H264_SUPPORTED_USAGES );
        IF_EQUAL_RETURN( guid, MF_MT_H264_SVC_CAPABILITIES );
        IF_EQUAL_RETURN( guid, MF_MT_H264_USAGE );
        IF_EQUAL_RETURN( guid, MF_MT_IMAGE_LOSS_TOLERANT );
        IF_EQUAL_RETURN( guid, MF_MT_INTERLACE_MODE );
        IF_EQUAL_RETURN( guid, MF_MT_MAJOR_TYPE );
        IF_EQUAL_RETURN( guid, MF_MT_MAX_KEYFRAME_SPACING );
        IF_EQUAL_RETURN( guid, MF_MT_MAX_LUMINANCE_LEVEL );
        IF_EQUAL_RETURN( guid, MF_MT_MAX_FRAME_AVERAGE_LUMINANCE_LEVEL );
        IF_EQUAL_RETURN( guid, MF_MT_MAX_MASTERING_LUMINANCE );
        IF_EQUAL_RETURN( guid, MF_MT_MIN_MASTERING_LUMINANCE );
        IF_EQUAL_RETURN( guid, MF_MT_MINIMUM_DISPLAY_APERTURE );
        IF_EQUAL_RETURN( guid, MF_MT_MPEG_SEQUENCE_HEADER );
        IF_EQUAL_RETURN( guid, MF_MT_MPEG_START_TIME_CODE );
        IF_EQUAL_RETURN( guid, MF_MT_MPEG2_CONTENT_PACKET );
        IF_EQUAL_RETURN( guid, MF_MT_MPEG2_FLAGS );
        IF_EQUAL_RETURN( guid, MF_MT_MPEG2_LEVEL );
        IF_EQUAL_RETURN( guid, MF_MT_MPEG2_PROFILE );
        IF_EQUAL_RETURN( guid, MF_MT_MPEG2_STANDARD );
        IF_EQUAL_RETURN( guid, MF_MT_MPEG2_TIMECODE );
        IF_EQUAL_RETURN( guid, MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY );
        IF_EQUAL_RETURN( guid, MF_MT_MPEG4_SAMPLE_DESCRIPTION );
        IF_EQUAL_RETURN( guid, MF_MT_ORIGINAL_4CC );
        IF_EQUAL_RETURN( guid, MF_MT_ORIGINAL_WAVE_FORMAT_TAG );
        IF_EQUAL_RETURN( guid, MF_MT_PAD_CONTROL_FLAGS );
        IF_EQUAL_RETURN( guid, MF_MT_PALETTE );
        IF_EQUAL_RETURN( guid, MF_MT_PAN_SCAN_APERTURE );
        IF_EQUAL_RETURN( guid, MF_MT_PAN_SCAN_ENABLED );
        IF_EQUAL_RETURN( guid, MF_MT_PIXEL_ASPECT_RATIO );
        IF_EQUAL_RETURN( guid, MF_MT_SAMPLE_SIZE );
        IF_EQUAL_RETURN( guid, MF_MT_SOURCE_CONTENT_HINT );
        IF_EQUAL_RETURN( guid, MF_MT_SPATIAL_AUDIO_MAX_DYNAMIC_OBJECTS );
        IF_EQUAL_RETURN( guid, MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_FORMAT_ID );
        IF_EQUAL_RETURN( guid, MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_LENGTH );
        IF_EQUAL_RETURN( guid, MF_MT_SUBTYPE );
        IF_EQUAL_RETURN( guid, MF_MT_TIMESTAMP_CAN_BE_DTS );
        IF_EQUAL_RETURN( guid, MF_MT_TRANSFER_FUNCTION );
        IF_EQUAL_RETURN( guid, MF_MT_USER_DATA );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_3D );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_3D_FIRST_IS_LEFT );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_3D_FORMAT );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_3D_LEFT_IS_BASE );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_3D_NUM_VIEWS );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_CHROMA_SITING );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_LEVEL );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_LIGHTING );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_NOMINAL_RANGE );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_PRIMARIES );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_PROFILE );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_RENDERER_EXTENSION_PROFILE );
        IF_EQUAL_RETURN( guid, MF_MT_VIDEO_ROTATION );
        IF_EQUAL_RETURN( guid, MF_MT_WRAPPED_TYPE );
        IF_EQUAL_RETURN( guid, MF_MT_YUV_MATRIX );
        IF_EQUAL_RETURN( guid, MF_NALU_LENGTH_INFORMATION );
        IF_EQUAL_RETURN( guid, MF_NALU_LENGTH_SET );
        IF_EQUAL_RETURN( guid, MF_PD_APP_CONTEXT );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_CODECLIST );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_CONTENTENCRYPTION_KEYID );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_CONTENTENCRYPTION_TYPE );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_DATA_LENGTH );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_DATA_START_OFFSET );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_FILEPROPERTIES_CREATION_TIME );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_FILEPROPERTIES_FILE_ID );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_FILEPROPERTIES_FLAGS );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_FILEPROPERTIES_PACKETS );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_FILEPROPERTIES_PREROLL );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_FILEPROPERTIES_SEND_DURATION );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_INFO_HAS_AUDIO );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_INFO_HAS_VIDEO );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_LANGLIST );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_LANGLIST_LEGACYORDER );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_MARKER );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_METADATA_IS_VBR );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_METADATA_V8_BUFFERAVERAGE );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_METADATA_V8_VBRPEAK );
        IF_EQUAL_RETURN( guid, MF_PD_ASF_SCRIPT );
        IF_EQUAL_RETURN( guid, MF_PD_AUDIO_ENCODING_BITRATE );
        IF_EQUAL_RETURN( guid, MF_PD_AUDIO_ISVARIABLEBITRATE );
        IF_EQUAL_RETURN( guid, MF_PD_DURATION );
        IF_EQUAL_RETURN( guid, MF_PD_LAST_MODIFIED_TIME );
        IF_EQUAL_RETURN( guid, MF_PD_MIME_TYPE );
        IF_EQUAL_RETURN( guid, MF_PD_PLAYBACK_BOUNDARY_TIME );
        IF_EQUAL_RETURN( guid, MF_PD_PLAYBACK_ELEMENT_ID );
        IF_EQUAL_RETURN( guid, MF_PD_PMPHOST_CONTEXT );
        IF_EQUAL_RETURN( guid, MF_PD_PREFERRED_LANGUAGE );
        IF_EQUAL_RETURN( guid, MF_PD_SAMI_STYLELIST );
        IF_EQUAL_RETURN( guid, MF_PD_TOTAL_FILE_SIZE );
        IF_EQUAL_RETURN( guid, MF_PD_VIDEO_ENCODING_BITRATE );
        IF_EQUAL_RETURN( guid, MF_READWRITE_D3D_OPTIONAL );
        IF_EQUAL_RETURN( guid, MF_READWRITE_DISABLE_CONVERTERS );
        IF_EQUAL_RETURN( guid, MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS );
        IF_EQUAL_RETURN( guid, MF_READWRITE_MMCSS_CLASS );
        IF_EQUAL_RETURN( guid, MF_READWRITE_MMCSS_CLASS_AUDIO );
        IF_EQUAL_RETURN( guid, MF_READWRITE_MMCSS_PRIORITY );
        IF_EQUAL_RETURN( guid, MF_READWRITE_MMCSS_PRIORITY_AUDIO );
        IF_EQUAL_RETURN( guid, MF_SA_D3D11_ALLOCATE_DISPLAYABLE_RESOURCES );
        IF_EQUAL_RETURN( guid, MF_SA_BUFFERS_PER_SAMPLE );
        IF_EQUAL_RETURN( guid, MF_SA_D3D_AWARE );
        IF_EQUAL_RETURN( guid, MF_SA_D3D11_AWARE );
        IF_EQUAL_RETURN( guid, MF_SA_D3D11_BINDFLAGS );
        IF_EQUAL_RETURN( guid, MF_SA_D3D11_SHARED );
        IF_EQUAL_RETURN( guid, MF_SA_D3D11_SHARED_WITHOUT_MUTEX );
        IF_EQUAL_RETURN( guid, MF_SA_D3D11_USAGE );
        IF_EQUAL_RETURN( guid, MF_SA_D3D12_CLEAR_VALUE );
        IF_EQUAL_RETURN( guid, MF_SA_D3D12_HEAP_FLAGS );
        IF_EQUAL_RETURN( guid, MF_SA_D3D12_HEAP_TYPE );
        IF_EQUAL_RETURN( guid, MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT );
        IF_EQUAL_RETURN( guid, MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT_PROGRESSIVE );
        IF_EQUAL_RETURN( guid, MF_SA_REQUIRED_SAMPLE_COUNT );
        IF_EQUAL_RETURN( guid, MF_SA_REQUIRED_SAMPLE_COUNT_PROGRESSIVE );
        IF_EQUAL_RETURN( guid, MF_SAMPLEGRABBERSINK_IGNORE_CLOCK );
        IF_EQUAL_RETURN( guid, MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET );
        IF_EQUAL_RETURN( guid, MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE );
        IF_EQUAL_RETURN( guid, MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE );
        IF_EQUAL_RETURN( guid, MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX );
        IF_EQUAL_RETURN( guid, MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE );
        IF_EQUAL_RETURN( guid, MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE );
        IF_EQUAL_RETURN( guid, MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE );
        IF_EQUAL_RETURN( guid, MF_SD_ASF_STREAMBITRATES_BITRATE );
        IF_EQUAL_RETURN( guid, MF_SD_LANGUAGE );
        IF_EQUAL_RETURN( guid, MF_SD_MUTUALLY_EXCLUSIVE );
        IF_EQUAL_RETURN( guid, MF_SD_PROTECTED );
        IF_EQUAL_RETURN( guid, MF_SD_SAMI_LANGUAGE );
        IF_EQUAL_RETURN( guid, MF_SD_STREAM_NAME );
        //IF_EQUAL_RETURN( guid, MF_SENSORSTREAM_REQUIRED_SDDL );
        //IF_EQUAL_RETURN( guid, MF_SENSORSTREAM_REQUIRED_CAPABILITIES );
        IF_EQUAL_RETURN( guid, MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME );
        IF_EQUAL_RETURN( guid, MF_SESSION_CONTENT_PROTECTION_MANAGER );
        IF_EQUAL_RETURN( guid, MF_SESSION_GLOBAL_TIME );
        IF_EQUAL_RETURN( guid, MF_SESSION_QUALITY_MANAGER );
        IF_EQUAL_RETURN( guid, MF_SESSION_REMOTE_SOURCE_MODE );
        IF_EQUAL_RETURN( guid, MF_SESSION_SERVER_CONTEXT );
        IF_EQUAL_RETURN( guid, MF_SESSION_TOPOLOADER );
        IF_EQUAL_RETURN( guid, MF_SINK_WRITER_ASYNC_CALLBACK );
        IF_EQUAL_RETURN( guid, MF_SINK_WRITER_D3D_MANAGER );
        IF_EQUAL_RETURN( guid, MF_SINK_WRITER_DISABLE_THROTTLING );
        IF_EQUAL_RETURN( guid, MF_SINK_WRITER_ENCODER_CONFIG );
        IF_EQUAL_RETURN( guid, MF_SOURCE_READER_ASYNC_CALLBACK );
        IF_EQUAL_RETURN( guid, MF_SOURCE_READER_D3D_MANAGER );
        IF_EQUAL_RETURN( guid, MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS );
        IF_EQUAL_RETURN( guid, MF_SOURCE_READER_DISABLE_DXVA );
        IF_EQUAL_RETURN( guid, MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN );
        IF_EQUAL_RETURN( guid, MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING );
        IF_EQUAL_RETURN( guid, MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS );
        IF_EQUAL_RETURN( guid, MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING );
        IF_EQUAL_RETURN( guid, MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS );
        IF_EQUAL_RETURN( guid, MF_SOURCE_READER_MEDIASOURCE_CONFIG );
        IF_EQUAL_RETURN( guid, MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION );
        IF_EQUAL_RETURN( guid, MF_STF_VERSION_DATE );
        IF_EQUAL_RETURN( guid, MF_STF_VERSION_INFO );
        IF_EQUAL_RETURN( guid, MF_STREAM_SINK_SUPPORTS_HW_CONNECTION );
        IF_EQUAL_RETURN( guid, MF_STREAM_SINK_SUPPORTS_ROTATION );
        IF_EQUAL_RETURN( guid, MF_TOPOLOGY_DXVA_MODE );
        IF_EQUAL_RETURN( guid, MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED );
        IF_EQUAL_RETURN( guid, MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES );
        IF_EQUAL_RETURN( guid, MF_TOPOLOGY_HARDWARE_MODE );
        IF_EQUAL_RETURN( guid, MF_TOPOLOGY_NO_MARKIN_MARKOUT );
        IF_EQUAL_RETURN( guid, MF_TOPOLOGY_PLAYBACK_FRAMERATE );
        IF_EQUAL_RETURN( guid, MF_TOPOLOGY_PLAYBACK_MAX_DIMS );
        IF_EQUAL_RETURN( guid, MF_TOPOLOGY_PROJECTSTART );
        IF_EQUAL_RETURN( guid, MF_TOPOLOGY_PROJECTSTOP );
        IF_EQUAL_RETURN( guid, MF_TOPOLOGY_RESOLUTION_STATUS );
        IF_EQUAL_RETURN( guid, MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH );
        IF_EQUAL_RETURN( guid, MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_CONNECT_METHOD );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_D3DAWARE );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_DECODER );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_DECRYPTOR );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_DISABLE_PREROLL );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_DISCARDABLE );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_DRAIN );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_ERROR_MAJORTYPE );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_ERROR_SUBTYPE );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_ERRORCODE );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_FLUSH );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_LOCKED );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_MARKIN_HERE );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_MARKOUT_HERE );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_MEDIASTART );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_MEDIASTOP );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_NOSHUTDOWN_ON_REMOVE );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_PRESENTATION_DESCRIPTOR );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_PRIMARYOUTPUT );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_RATELESS );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_SEQUENCE_ELEMENTID );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_SOURCE );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_STREAM_DESCRIPTOR );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_STREAMID );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_TRANSFORM_OBJECTID );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_WORKQUEUE_ID );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_WORKQUEUE_MMCSS_CLASS );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY );
        IF_EQUAL_RETURN( guid, MF_TOPONODE_WORKQUEUE_MMCSS_TASKID );
        IF_EQUAL_RETURN( guid, MF_TRANSCODE_ADJUST_PROFILE );
        IF_EQUAL_RETURN( guid, MF_TRANSCODE_CONTAINERTYPE );
        IF_EQUAL_RETURN( guid, MF_TRANSCODE_DONOT_INSERT_ENCODER );
        IF_EQUAL_RETURN( guid, MF_TRANSCODE_ENCODINGPROFILE );
        IF_EQUAL_RETURN( guid, MF_TRANSCODE_QUALITYVSSPEED );
        IF_EQUAL_RETURN( guid, MF_TRANSCODE_SKIP_METADATA_TRANSFER );
        IF_EQUAL_RETURN( guid, MF_TRANSCODE_TOPOLOGYMODE );
        IF_EQUAL_RETURN( guid, MF_TRANSFORM_ASYNC );
        IF_EQUAL_RETURN( guid, MF_TRANSFORM_ASYNC_UNLOCK );
        IF_EQUAL_RETURN( guid, MF_TRANSFORM_CATEGORY_Attribute );
        IF_EQUAL_RETURN( guid, MF_TRANSFORM_FLAGS_Attribute );
        IF_EQUAL_RETURN( guid, MF_USER_DATA_PAYLOAD );
        IF_EQUAL_RETURN( guid, MF_VIDEO_MAX_MB_PER_SEC );
        IF_EQUAL_RETURN( guid, MF_VIDEO_PROCESSOR_ALGORITHM );
        IF_EQUAL_RETURN( guid, MF_VIDEODSP_MODE );
        IF_EQUAL_RETURN( guid, MF_VIRTUALCAMERA_ASSOCIATED_CAMERA_SOURCES );
        //IF_EQUAL_RETURN( guid, MF_VIRTUALCAMERA_APP_PACKAGE_FAMILY_NAME );
        IF_EQUAL_RETURN( guid, MF_VIRTUALCAMERA_PROVIDE_ASSOCIATED_CAMERA_SOURCES );
        IF_EQUAL_RETURN( guid, MF_XVP_CALLER_ALLOCATES_OUTPUT );
        IF_EQUAL_RETURN( guid, MF_XVP_DISABLE_FRC );
        IF_EQUAL_RETURN( guid, MFASFSPLITTER_PACKET_BOUNDARY );
        IF_EQUAL_RETURN( guid, MFPROTECTION_ACP );
        IF_EQUAL_RETURN( guid, MFPROTECTION_CGMSA );
        IF_EQUAL_RETURN( guid, MFPROTECTION_CONSTRICTAUDIO );
        IF_EQUAL_RETURN( guid, MFPROTECTION_CONSTRICTVIDEO );
        IF_EQUAL_RETURN( guid, MFPROTECTION_CONSTRICTVIDEO_NOOPM );
        IF_EQUAL_RETURN( guid, MFPROTECTION_DISABLE );
        IF_EQUAL_RETURN( guid, MFPROTECTION_DISABLE_SCREEN_SCRAPE );
        IF_EQUAL_RETURN( guid, MFPROTECTION_FFT );
        IF_EQUAL_RETURN( guid, MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION );
        IF_EQUAL_RETURN( guid, MFPROTECTION_HDCP );
        IF_EQUAL_RETURN( guid, MFPROTECTION_PROTECTED_SURFACE );
        IF_EQUAL_RETURN( guid, MFPROTECTION_TRUSTEDAUDIODRIVERS );
        IF_EQUAL_RETURN( guid, MFPROTECTION_VIDEO_FRAMES );
        IF_EQUAL_RETURN( guid, MFPROTECTION_WMDRMOTA );
        IF_EQUAL_RETURN( guid, MFPROTECTIONATTRIBUTE_BEST_EFFORT );
        IF_EQUAL_RETURN( guid, MFPROTECTIONATTRIBUTE_FAIL_OVER );
        IF_EQUAL_RETURN( guid, MFSampleExtension_3DVideo );
        IF_EQUAL_RETURN( guid, MFSampleExtension_3DVideo_SampleFormat );
        IF_EQUAL_RETURN( guid, MFSampleExtension_BottomFieldFirst );
        IF_EQUAL_RETURN( guid, MFSampleExtension_CameraExtrinsics );
        IF_EQUAL_RETURN( guid, MFSampleExtension_CaptureMetadata );
        IF_EQUAL_RETURN( guid, MFSampleExtension_CleanPoint );
        IF_EQUAL_RETURN( guid, MFSampleExtension_Content_KeyID );
        IF_EQUAL_RETURN( guid, MFSampleExtension_DecodeTimestamp );
        IF_EQUAL_RETURN( guid, MFSampleExtension_DerivedFromTopField );
        IF_EQUAL_RETURN( guid, MFSampleExtension_DeviceReferenceSystemTime );
        IF_EQUAL_RETURN( guid, MFSampleExtension_DeviceTimestamp );
        IF_EQUAL_RETURN( guid, MFSampleExtension_Discontinuity );
        IF_EQUAL_RETURN( guid, MFSampleExtension_Encryption_CryptByteBlock );
        IF_EQUAL_RETURN( guid, MFSampleExtension_Encryption_HardwareProtection );
        IF_EQUAL_RETURN( guid, MFSampleExtension_Encryption_ProtectionScheme );
        IF_EQUAL_RETURN( guid, MFSampleExtension_Encryption_SampleID );
        IF_EQUAL_RETURN( guid, MFSampleExtension_Encryption_SkipByteBlock );
        IF_EQUAL_RETURN( guid, MFSampleExtension_Encryption_SubSampleMappingSplit );
        IF_EQUAL_RETURN( guid, MFSampleExtension_ForwardedDecodeUnits );
        IF_EQUAL_RETURN( guid, MFSampleExtension_ForwardedDecodeUnitType );
        IF_EQUAL_RETURN( guid, MFSampleExtension_FrameCorruption );
        IF_EQUAL_RETURN( guid, MFSampleExtension_Interlaced );
        IF_EQUAL_RETURN( guid, MFSampleExtension_LongTermReferenceFrameInfo );
        IF_EQUAL_RETURN( guid, MFSampleExtension_MeanAbsoluteDifference );
        IF_EQUAL_RETURN( guid, MFSampleExtension_MULTIPLEXED_MANAGER );
        IF_EQUAL_RETURN( guid, MFSampleExtension_PacketCrossOffsets );
        IF_EQUAL_RETURN( guid, MFSampleExtension_PhotoThumbnail );
        IF_EQUAL_RETURN( guid, MFSampleExtension_PhotoThumbnailMediaType );
        IF_EQUAL_RETURN( guid, MFSampleExtension_PinholeCameraIntrinsics );
        IF_EQUAL_RETURN( guid, MFSampleExtension_RepeatFirstField );
        IF_EQUAL_RETURN( guid, MFSampleExtension_ROIRectangle );
        IF_EQUAL_RETURN( guid, MFSampleExtension_SingleField );
        IF_EQUAL_RETURN( guid, MFSampleExtension_TargetGlobalLuminance );
        IF_EQUAL_RETURN( guid, MFSampleExtension_Token );
        IF_EQUAL_RETURN( guid, MFSampleExtension_VideoDSPMode );
        IF_EQUAL_RETURN( guid, MFSampleExtension_VideoEncodePictureType );
        IF_EQUAL_RETURN( guid, MFSampleExtension_VideoEncodeQP );
        IF_EQUAL_RETURN( guid, MFStreamExtension_CameraExtrinsics );
        IF_EQUAL_RETURN( guid, MFStreamExtension_PinholeCameraIntrinsics );
        IF_EQUAL_RETURN( guid, MFT_CODEC_MERIT_Attribute );
        IF_EQUAL_RETURN( guid, MFT_CONNECTED_STREAM_ATTRIBUTE );
        IF_EQUAL_RETURN( guid, MFT_CONNECTED_TO_HW_STREAM );
        IF_EQUAL_RETURN( guid, MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER );
        IF_EQUAL_RETURN( guid, MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT );
        IF_EQUAL_RETURN( guid, MFT_ENCODER_SUPPORTS_CONFIG_EVENT );
        IF_EQUAL_RETURN( guid, MFT_ENUM_ADAPTER_LUID );
        IF_EQUAL_RETURN( guid, MFT_ENUM_HARDWARE_URL_Attribute );
        IF_EQUAL_RETURN( guid, MFT_ENUM_HARDWARE_VENDOR_ID_Attribute );
        IF_EQUAL_RETURN( guid, MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE );
        IF_EQUAL_RETURN( guid, MFT_ENUM_VIDEO_RENDERER_EXTENSION_PROFILE );
        IF_EQUAL_RETURN( guid, MFT_FIELDOFUSE_UNLOCK_Attribute );
        IF_EQUAL_RETURN( guid, MFT_FRIENDLY_NAME_Attribute );
        IF_EQUAL_RETURN( guid, MFT_HW_TIMESTAMP_WITH_QPC_Attribute );
        IF_EQUAL_RETURN( guid, MFT_INPUT_TYPES_Attributes );
        IF_EQUAL_RETURN( guid, MFT_OUTPUT_TYPES_Attributes );
        IF_EQUAL_RETURN( guid, MFT_PREFERRED_ENCODER_PROFILE );
        IF_EQUAL_RETURN( guid, MFT_PREFERRED_OUTPUTTYPE_Attribute );
        IF_EQUAL_RETURN( guid, MFT_PROCESS_LOCAL_Attribute );
        IF_EQUAL_RETURN( guid, MFT_REMUX_MARK_I_PICTURE_AS_CLEAN_POINT );
        IF_EQUAL_RETURN( guid, MFT_SUPPORT_3DVIDEO );
        IF_EQUAL_RETURN( guid, MFT_SUPPORT_DYNAMIC_FORMAT_CHANGE );
        IF_EQUAL_RETURN( guid, MFT_TRANSFORM_CLSID_Attribute );
        IF_EQUAL_RETURN( guid, VIDEO_ZOOM_RECT );
        

        return guid.ToString();
    }

    
    HW_EXPORT WideString GetAttributeValue( const MFAttributes& attributes, const Guid& attributeKey )
    {
        if ( attributeKey == MFT_INPUT_TYPES_Attributes || attributeKey == MFT_OUTPUT_TYPES_Attributes )
        {
            auto blobSize = attributes.GetBlobSize( attributeKey );
            std::vector<Byte> blobData( static_cast<size_t>( blobSize ) );
            attributes.GetBlob( attributeKey, static_cast< UINT8* >( blobData.data( ) ), blobSize, nullptr );
            size_t count = blobSize / sizeof( MFT_REGISTER_TYPE_INFO );
            auto data = ( MFT_REGISTER_TYPE_INFO* )blobData.data( );
            WideString result;
            for ( size_t i = 0; i < count; i++ )
            {
                auto& typeInfo = data[ i ];
                Guid majorType( typeInfo.guidMajorType );
                Guid subtype( typeInfo.guidSubtype );

                auto majorTypeName = GetGUIDNameConst( majorType );
                auto subtypeName = GetGUIDNameConst( subtype );

                auto typeInfoName = Format( L"[{},{}] ", majorTypeName, subtypeName );
                result += typeInfoName;
            }
            return result;
        }
        else
        {
            PropertyVariant attributeValue;
            attributes.GetItem( attributeKey, &attributeValue );
            return attributeValue.AsWideString( );
        }
    }
    


    HW_EXPORT WideString GetMediaTypeDescription(const MFMediaType& mediaType)
    {
        WideString description;

        if (mediaType == nullptr)
        {
            description = L"<NULL>";
            return description;
        }

        auto majorType = mediaType.GetMajorType();

        auto majorTypeStr = GetGUIDNameConst(majorType);
        if (majorTypeStr.size())
        {
            description += majorTypeStr;
            description += L": \n";
        }
        else
        {
            description += majorType.ToString();
            description += L": \n";
        }

        auto attributeCount = mediaType.GetCount();
        

        for (UINT32 i = 0; i < attributeCount; i++)
        {
            auto attributeKey = mediaType.GetItemKeyByIndex(i);
            auto attrType = mediaType.GetItemType(attributeKey);

            
            auto attributeKeyStr = GetGUIDNameConst(attributeKey);
            if (attributeKeyStr.empty())
            {
                attributeKeyStr = attributeKey.ToString();
            }
            
            description += L"    " + attributeKeyStr + L"=";
            switch (attrType)
            {
                case MF_ATTRIBUTE_UINT32:
                {
                    auto Val = mediaType.GetUINT32(attributeKey);
                    

                    description += std::to_wstring(Val);
                    break;
                }
                case MF_ATTRIBUTE_UINT64:
                {
                    auto Val = mediaType.GetUINT64(attributeKey);
                    

                    if (attributeKey == MF_MT_FRAME_SIZE)
                    {
                        description += L"W:" + std::to_wstring(HI32(Val)) + L" H: " + std::to_wstring(LO32(Val));
                    }
                    else if (attributeKey == MF_MT_FRAME_RATE)
                    {
                        // Frame rate is numerator/denominator.
                        description += std::to_wstring(HI32(Val)) + L"/" + std::to_wstring(LO32(Val));
                    }
                    else if (attributeKey == MF_MT_PIXEL_ASPECT_RATIO)
                    {
                        description += std::to_wstring(HI32(Val)) + L":" + std::to_wstring(LO32(Val));
                    }
                    else
                    {
                        description += std::to_wstring(Val);
                    }

                    break;
                }
                case MF_ATTRIBUTE_DOUBLE:
                {
                    auto Val = mediaType.GetDouble(attributeKey);
                    
                    description += std::to_wstring(Val);
                    break;
                }
                case MF_ATTRIBUTE_GUID:
                {
                    

                    auto Val = mediaType.GetGUID(attributeKey);
                    
                    auto valStr = GetGUIDNameConst(Val);
                    if (valStr.empty())
                    {
                        valStr = Val.ToString();
                    }
                    description += valStr;

                    break;
                }
                case MF_ATTRIBUTE_STRING:
                {
                    auto Val = mediaType.GetString(attributeKey);
                    description += Val;


                    break;
                }
                case MF_ATTRIBUTE_BLOB:
                {
                    description += L"<BLOB>";
                    break;
                }
                case MF_ATTRIBUTE_IUNKNOWN:
                {
                    description += L"<UNK>";
                    break;
                }
            }

            description += L"\n";
        }

        return description;
    }



    Attributes::Attributes(const MFAttributes& attributes)
    { 
        Add(attributes);
    }

    void Attributes::Add(const MFAttributes& attributes)
    {
        auto count = attributes.GetCount();
        for(UInt32 i = 0; i < count; i++)
        { 
            Add(attributes, i);
        }
    }
    void Attributes::Add(const MFAttributes& attributes, UInt32 index)
    {
        auto key = attributes.GetItemKeyByIndex(index);
        auto attributeType = attributes.GetItemType(key);
        switch (attributeType)
        {
            case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_UINT32:
                AddInt32(attributes, key);
                break;
            case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_UINT64:
                AddInt64(attributes, key);
                break;
            case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_DOUBLE:
                AddDouble(attributes, key);
                break;
            case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_GUID:
                AddGuid(attributes, key);
                break;
            case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_STRING:
                AddString(attributes, key);
                break;
            case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_BLOB:
                AddBlob(attributes, key);
                break;
            case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_IUNKNOWN:
                AddUnknown(attributes, key);
                break;
        }
    }

    void Attributes::AssignTo(const MFAttributes& attributes) const
    {
        for (auto& entry : container_)
        {
            auto* attr = entry.second.get();
            auto attrType = attr->Type();
            switch (attrType)
            {
                case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_UINT32:
                    AssignToInt32(static_cast<const Int32Attribute*>(attr), attributes);
                    break;
                case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_UINT64:
                    AssignToInt64(static_cast<const Int64Attribute*>(attr), attributes);
                    break;
                case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_DOUBLE:
                    AssignToDouble(static_cast<const DoubleAttribute*>(attr), attributes);
                    break;
                case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_GUID:
                    AssignToGuid(static_cast<const GuidAttribute*>(attr), attributes);
                    break;
                case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_STRING:
                    AssignToString(static_cast<const StringAttribute*>(attr), attributes);
                    break;
                case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_BLOB:
                    AssignToBlob(static_cast<const BlobAttribute*>(attr), attributes);
                    break;
                case MF_ATTRIBUTE_TYPE::MF_ATTRIBUTE_IUNKNOWN:
                    AssignToUnknown(static_cast<const UnknownAttribute*>(attr), attributes);
                    break;
            }
        }
    }


    void Attributes::AddInt32(const MFAttributes& attributes, const Guid& key)
    {
        auto value = attributes.GetUINT32(key);
        auto ptr = std::make_shared<Int32Attribute>(key, value);
        container_.insert_or_assign(key, std::move(ptr));
    }
    void Attributes::AddInt64(const MFAttributes& attributes, const Guid& key)
    {
        auto value = attributes.GetUINT64(key);
        auto ptr = std::make_shared<Int64Attribute>(key, value);
        container_.insert_or_assign(key, std::move(ptr));
    }
    void Attributes::AddDouble(const MFAttributes& attributes, const Guid& key)
    {
        auto value = attributes.GetDouble(key);
        auto ptr = std::make_shared<DoubleAttribute>(key, value);
        container_.insert_or_assign(key, std::move(ptr));
    }
    void Attributes::AddGuid(const MFAttributes& attributes, const Guid& key)
    {
        auto value = attributes.GetGUID(key);
        auto ptr = std::make_shared<GuidAttribute>(key, value);
        container_.insert_or_assign(key, std::move(ptr));
    }
    void Attributes::AddString(const MFAttributes& attributes, const Guid& key)
    {
        auto value = attributes.GetString(key);
        auto ptr = std::make_shared<StringAttribute>(key, value);
        container_.insert_or_assign(key, std::move(ptr));
    }
    void Attributes::AddBlob(const MFAttributes& attributes, const Guid& key)
    {
        auto blobSize = attributes.GetBlobSize(key);
        std::vector<Byte> value;
        value.resize(blobSize);
        attributes.GetBlob(key, value.data(), blobSize);
        auto ptr = std::make_shared<BlobAttribute>(key, value);
        container_.insert_or_assign(key, std::move(ptr));
    }
    void Attributes::AddUnknown(const MFAttributes& attributes, const Guid& key)
    {
        auto value = attributes.GetUnknown<Unknown>(key);
        auto ptr = std::make_shared<UnknownAttribute>(key, value);
        container_.insert_or_assign(key, std::move(ptr));
    }

    void Attributes::AssignToInt32(const Int32Attribute* attribute, const MFAttributes& attributes)
    {
        auto& key = attribute->Key();
        auto value = attribute->Value();
        attributes.SetUINT32(key, value);
    }
    void Attributes::AssignToInt64(const Int64Attribute* attribute, const MFAttributes& attributes)
    {
        auto& key = attribute->Key();
        auto value = attribute->Value();
        attributes.SetUINT64(key, value);
    }
    void Attributes::AssignToDouble(const DoubleAttribute* attribute, const MFAttributes& attributes)
    {
        auto& key = attribute->Key();
        auto value = attribute->Value();
        attributes.SetDouble(key, value);
    }
    void Attributes::AssignToGuid(const GuidAttribute* attribute, const MFAttributes& attributes)
    {
        auto& key = attribute->Key();
        auto& value = attribute->Value();
        attributes.SetGUID(key, value);
    }
    void Attributes::AssignToString(const StringAttribute* attribute, const MFAttributes& attributes)
    {
        auto& key = attribute->Key();
        auto& value = attribute->Value();
        attributes.SetString(key, value);
    }
    void Attributes::AssignToBlob(const BlobAttribute* attribute, const MFAttributes& attributes)
    {
        auto& key = attribute->Key();
        auto& value = attribute->Value();
        attributes.SetBlob(key, value);
    }
    void Attributes::AssignToUnknown(const UnknownAttribute* attribute, const MFAttributes& attributes)
    {
        auto& key = attribute->Key();
        auto& value = attribute->Value();
        attributes.SetUnknown(key, value.GetInterfacePointer<IUnknown>());
    }



}