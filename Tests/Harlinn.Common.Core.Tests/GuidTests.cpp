#include "pch.h"

using namespace Harlinn::Common::Core;
namespace
{
    class LocalFixture
    {
    public:
        LocalFixture( ) {}
        ~LocalFixture( ) {}
    };
}

BOOST_FIXTURE_TEST_SUITE( GuidTests, LocalFixture )

// --run_test=GuidTests/ConstructorTest1
BOOST_AUTO_TEST_CASE( ConstructorTest1 )
{
    Guid guid;
    BOOST_CHECK( guid.empty( ) );
    BOOST_CHECK( guid ? false : true );
}

// --run_test=GuidTests/ConstructorTest2
BOOST_AUTO_TEST_CASE( ConstructorTest2 )
{
    // {8D544315-5A2F-4807-93D5-F66E5D690197}
    static const GUID expectedGuid = { 0x8d544315, 0x5a2f, 0x4807, { 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 } };

    Guid guid( expectedGuid );
    BOOST_CHECK( guid == expectedGuid );
    BOOST_CHECK( guid ? true : false );
}

// --run_test=GuidTests/ConstructorTest3
BOOST_AUTO_TEST_CASE( ConstructorTest3 )
{
    // {8D544315-5A2F-4807-93D5-F66E5D690197}
    static const GUID expectedGuid = { 0x8d544315, 0x5a2f, 0x4807, { 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 } };

    Guid guid( L"{8D544315-5A2F-4807-93D5-F66E5D690197}" );
    BOOST_CHECK( guid == expectedGuid );
}

// --run_test=GuidTests/ConstructorTest4
BOOST_AUTO_TEST_CASE( ConstructorTest4 )
{
    // {8D544315-5A2F-4807-93D5-F66E5D690197}
    static const GUID expectedGuid = { 0x8d544315, 0x5a2f, 0x4807, { 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 } };

    Guid guid( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    BOOST_CHECK( guid == expectedGuid );
}

// --run_test=GuidTests/ToStringTest1
BOOST_AUTO_TEST_CASE( ToStringTest1 )
{
    // {8D544315-5A2F-4807-93D5-F66E5D690197}
    static const GUID expectedGuid = { 0x8d544315, 0x5a2f, 0x4807, { 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 } };

    Guid guid( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    BOOST_CHECK( guid == expectedGuid );
    auto str = guid.ToString( );
    BOOST_CHECK( str == L"{8D544315-5A2F-4807-93D5-F66E5D690197}" );

}

// --run_test=GuidTests/EqTest1
BOOST_AUTO_TEST_CASE( EqTest1 )
{
    Guid guid1a( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    Guid guid1b( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    Guid guid2a( 0xa46d5eb1, 0x7606, 0x4418, 0x90, 0x68, 0xf8, 0x36, 0x98, 0x28, 0xe6, 0xc9 );

    BOOST_CHECK( guid1a == guid1b );
    BOOST_CHECK( (guid1a == guid2a) == false );
}

// --run_test=GuidTests/NotEqTest1
BOOST_AUTO_TEST_CASE( NotEqTest1 )
{
    Guid guid1a( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    Guid guid1b( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    Guid guid2a( 0xa46d5eb1, 0x7606, 0x4418, 0x90, 0x68, 0xf8, 0x36, 0x98, 0x28, 0xe6, 0xc9 );

    BOOST_CHECK( guid1a != guid2a );
    BOOST_CHECK( ( guid1a != guid1b ) == false );
}

// --run_test=GuidTests/LtTest1
BOOST_AUTO_TEST_CASE( LtTest1 )
{
    Guid guid1a( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    Guid guid1b( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    Guid guid2a( 0xa46d5eb1, 0x7606, 0x4418, 0x90, 0x68, 0xf8, 0x36, 0x98, 0x28, 0xe6, 0xc9 );

    BOOST_CHECK( guid1a < guid2a );
    BOOST_CHECK( ( guid1a < guid1b ) == false );
}

// --run_test=GuidTests/LtEqTest1
BOOST_AUTO_TEST_CASE( LtEqTest1 )
{
    Guid guid1a( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    Guid guid1b( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    Guid guid2a( 0xa46d5eb1, 0x7606, 0x4418, 0x90, 0x68, 0xf8, 0x36, 0x98, 0x28, 0xe6, 0xc9 );

    BOOST_CHECK( guid1a < guid2a );
    BOOST_CHECK( guid1a <= guid1b );
}


// --run_test=GuidTests/GtTest1
BOOST_AUTO_TEST_CASE( GtTest1 )
{
    Guid guid1a( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    Guid guid1b( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    Guid guid2a( 0xa46d5eb1, 0x7606, 0x4418, 0x90, 0x68, 0xf8, 0x36, 0x98, 0x28, 0xe6, 0xc9 );

    BOOST_CHECK( guid2a > guid1a );
    BOOST_CHECK( ( guid1a > guid1b ) == false );
}

// --run_test=GuidTests/GtEqTest1
BOOST_AUTO_TEST_CASE( GtEqTest1 )
{
    Guid guid1a( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    Guid guid1b( 0x8d544315, 0x5a2f, 0x4807, 0x93, 0xd5, 0xf6, 0x6e, 0x5d, 0x69, 0x1, 0x97 );
    Guid guid2a( 0xa46d5eb1, 0x7606, 0x4418, 0x90, 0x68, 0xf8, 0x36, 0x98, 0x28, 0xe6, 0xc9 );

    BOOST_CHECK( guid2a >= guid1a );
    BOOST_CHECK( guid1a >= guid1b );
}





BOOST_AUTO_TEST_SUITE_END( )